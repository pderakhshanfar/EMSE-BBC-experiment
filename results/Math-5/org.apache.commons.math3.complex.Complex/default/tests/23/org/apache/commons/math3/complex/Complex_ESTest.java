/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 09:17:25 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(1.950605015323617E-8, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.readResolve();
      Complex complex1 = Complex.INF;
      complex1.I.abs();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.INF.sqrt();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(968.5131437638);
      complex0.negate();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.tan();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.multiply(complex0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.ZERO.pow(complex5);
      Complex complex7 = Complex.valueOf(35.3987489, 6.283185307179586);
      Complex complex8 = complex4.I.add(complex7);
      complex8.ONE.hashCode();
      Complex complex9 = complex7.add(complex1);
      Complex complex10 = complex2.sin();
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex4.I.cosh();
      complex0.equals(complex10);
      Complex complex13 = complex11.sinh();
      complex13.INF.cos();
      complex7.toString();
      Complex complex14 = complex8.reciprocal();
      complex14.getArgument();
      complex5.ONE.reciprocal();
      complex14.NaN.cosh();
      complex9.getField();
      Complex complex15 = complex2.sqrt1z();
      Complex.valueOf(6.283185307179586);
      complex8.isInfinite();
      Complex complex16 = complex6.sinh();
      complex15.log();
      complex12.add(0.0);
      Complex complex17 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.divide(complex17);
      complex11.divide(6.283185307179586);
      complex16.multiply(complex6);
      complex8.multiply(complex17);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(Double.NaN);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2238.79837), (-2238.79837));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.ONE.subtract(complex0);
      complex3.INF.tanh();
      Complex complex4 = complex0.cosh();
      complex0.readResolve();
      Complex complex5 = complex1.atan();
      complex5.tanh();
      Complex complex6 = complex0.createComplex((-2238.79837), (-2238.79837));
      complex4.ONE.abs();
      complex6.nthRoot(706);
      complex4.pow(complex6);
      complex1.NaN.nthRoot(2251);
      complex4.ZERO.hashCode();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex4.multiply((-2238.79837));
      complex8.INF.abs();
      Complex complex9 = complex4.multiply(1.0);
      complex7.cos();
      complex9.atan();
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.multiply(complex1);
      complex6.sqrt1z();
      Complex complex12 = complex7.negate();
      complex12.I.log();
      complex11.toString();
      complex0.asin();
      complex1.acos();
      complex9.add(complex10);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(7.423583380889552, 3.732050807568877);
      complex0.tanh();
      Complex complex2 = new Complex(3.732050807568877, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, (-17.41823613617264));
      Complex complex1 = Complex.valueOf(1181.65839676);
      complex1.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex(9.113713162029408E267, Double.NaN);
      Complex complex4 = complex3.cos();
      complex1.acos();
      Complex complex5 = Complex.NaN;
      complex4.negate();
      Complex.valueOf(3070.862779380052);
      complex2.multiply((-497056857));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.113713162029408E267);
      complex0.sqrt1z();
      Complex.valueOf(9.113713162029408E267, 9.113713162029408E267);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(454.006665);
      Complex complex1 = new Complex(454.006665);
      Complex.valueOf(454.006665);
      complex0.tan();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-774.85860173), (-774.85860173));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex1.divide(complex0);
      complex4.ONE.abs();
      complex4.getArgument();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex5.ZERO.multiply(complex3);
      Complex complex7 = complex5.I.subtract((-774.85860173));
      complex0.ZERO.pow(1.0);
      Complex complex8 = Complex.valueOf((-1233.0));
      Complex.valueOf(1.0);
      complex8.I.abs();
      complex8.I.tanh();
      complex2.readResolve();
      complex1.pow(complex7);
      complex8.getField();
      complex6.exp();
      complex2.asin();
      Complex complex9 = Complex.ONE;
      complex0.divide(complex9);
      complex9.createComplex((-0.7849871973272615), 1.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.NaN.tan();
      complex1.ONE.sqrt();
      Complex complex2 = complex0.multiply(complex0);
      Complex complex3 = complex2.cos();
      complex3.sin();
      complex0.pow(1946.838);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2569.1051456));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.pow(complex1);
      complex2.tan();
      try { 
        complex1.nthRoot((-1963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,963
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, (-20.0));
      complex0.ONE.abs();
      Complex complex1 = complex0.conjugate();
      complex0.pow(complex1);
      Complex complex2 = complex0.tan();
      complex2.nthRoot(2250);
      complex2.multiply(2250);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.conjugate();
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.valueOf((double) 2262, (-1.0));
      complex2.pow(complex1);
      complex1.tan();
      complex0.nthRoot(2262);
      complex0.multiply(299);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(501.6612);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = Complex.I;
      complex4.NaN.subtract(complex5);
      Complex complex6 = complex2.INF.divide(complex3);
      Complex complex7 = complex6.ZERO.multiply(complex3);
      Complex complex8 = complex1.sqrt1z();
      complex2.readResolve();
      complex0.subtract(complex2);
      complex8.multiply(7);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.ZERO.multiply(complex1);
      complex10.ONE.conjugate();
      complex0.asin();
      complex7.sqrt1z();
      Complex complex11 = complex1.sqrt();
      complex1.reciprocal();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex.valueOf((-20.0), 9.113713162029408E267);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.acos();
      complex2.exp();
      Complex complex3 = complex0.tanh();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, (-20.0));
      complex0.ONE.abs();
      Complex complex1 = complex0.divide(9.113713162029408E267);
      Complex complex2 = new Complex(9.113713162029408E267, 9.113713162029408E267);
      Complex complex3 = complex0.divide(complex1);
      complex0.tanh();
      complex1.cos();
      Complex complex4 = Complex.I;
      Complex.valueOf(1223.9991830059907, 2.0984749794006348);
      complex3.add(1.0);
      complex1.sqrt();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.sin();
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1941.0);
      complex0.getReal();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(0.0, 514.597190126);
      complex0.reciprocal();
      Complex complex3 = Complex.ZERO;
      complex0.equals(complex2);
      Complex complex4 = complex2.asin();
      complex4.ONE.asin();
      Complex complex5 = Complex.NaN;
      complex5.getImaginary();
      complex0.abs();
      Complex complex6 = complex1.sin();
      complex6.multiply(1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      // Undeclared exception!
      complex0.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, (-20.0));
      complex0.ONE.abs();
      Complex complex1 = complex0.divide(9.113713162029408E267);
      Complex complex2 = new Complex(9.113713162029408E267, 9.113713162029408E267);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.I.pow(complex1);
      complex2.exp();
      Complex complex6 = complex1.cos();
      complex3.getImaginary();
      complex6.abs();
      complex1.sin();
      complex2.multiply(996);
      complex5.subtract(6.9766660602266E-4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.201412886580694E275, (-3888.771924272588));
      Complex complex1 = complex0.acos();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-3904.1455584029513));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.sqrt1z();
      complex2.getReal();
      Complex complex3 = complex1.atan();
      Complex.valueOf(1504.16426, 3.683043641790553E-251);
      complex0.reciprocal();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ONE;
      complex5.equals(complex3);
      Complex complex6 = Complex.ZERO;
      complex6.getImaginary();
      Complex complex7 = Complex.valueOf((-5060.6360914247), 0.4818955063819885);
      complex7.add(complex3);
      complex7.abs();
      complex4.sin();
      complex1.multiply(996);
      complex2.nthRoot(1474);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, (-20.0));
      complex0.ONE.abs();
      Complex complex1 = complex0.divide(9.113713162029408E267);
      Complex complex2 = new Complex(9.113713162029408E267, 9.113713162029408E267);
      complex0.divide(complex1);
      complex0.tanh();
      Complex complex3 = complex2.exp();
      complex1.divide(complex3);
      Complex complex4 = Complex.NaN;
      complex4.abs();
      complex0.cosh();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-3904.1455584029513));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.sqrt1z();
      complex0.getReal();
      complex1.atan();
      Complex complex3 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = Complex.ZERO;
      complex1.equals(complex5);
      complex5.ZERO.asin();
      complex4.getImaginary();
      complex4.abs();
      complex3.sin();
      complex5.multiply(996);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-276.7052), 0.0);
      complex1.atan();
      complex0.tanh();
      complex2.abs();
      Complex complex3 = complex0.createComplex(0.0, (-1800.702087975929));
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.log();
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex0.multiply(complex1);
      assertEquals((-20.0), complex2.getImaginary(), 0.01);
      assertEquals(20.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.multiply((-4.0873400635183405E225));
      Complex complex4 = complex3.ZERO.atan();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex3.ONE.divide(complex0);
      Complex complex6 = complex3.tan();
      assertTrue(complex6.equals((Object)complex5));
      
      double double0 = complex3.abs();
      assertEquals(4.0873400635183405E225, double0, 0.01);
      
      Complex complex7 = complex1.cosh();
      assertEquals(2.2146463048385474E8, complex7.getImaginary(), 0.01);
      
      complex2.pow(496.8534897449);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-3904.14555840295));
      Complex complex1 = complex0.ZERO.negate();
      complex0.cosh();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-3904.14555840295), (-1800.702087975929));
      Complex complex3 = complex2.atan();
      complex3.tanh();
      complex0.abs();
      complex2.createComplex((-5.3763211240398744E-8), (-3.141592653589793));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3849.8534);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.NaN.atan();
      complex0.getField();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.multiply(996);
      Complex complex5 = complex4.atan();
      complex5.subtract((double) 996);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.subtract((double) 7);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, (-20.0));
      complex0.ONE.abs();
      Complex complex1 = complex0.divide(9.113713162029408E267);
      Complex complex2 = new Complex(9.113713162029408E267, 9.113713162029408E267);
      complex0.divide(complex1);
      complex0.tanh();
      complex2.exp();
      complex1.cos();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.tanh();
      complex3.abs();
      complex4.createComplex(3848.8534, 4.684543972719413E-134);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      
      Complex complex1 = complex0.sin();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      
      Complex complex2 = complex0.divide(complex1);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertSame(complex1, complex2);
      assertSame(complex1, complex0);
      assertSame(complex2, complex0);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex0.multiply((-4.0873400635183405E225));
      Complex complex3 = complex0.tanh();
      complex2.abs();
      complex3.createComplex(881.0090222071361, 881.0090222071361);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-3904.1455584029513));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt1z();
      complex1.getReal();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.valueOf(682.3, 682.3);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = Complex.I;
      complex2.equals((Object) null);
      complex5.getImaginary();
      Complex complex7 = Complex.ONE;
      complex7.abs();
      complex4.createComplex(1.0, 3904.1455584029513);
      Complex complex8 = new Complex(403.9129166, (-4.946468778728474));
      complex8.add(complex7);
      complex0.divide(825.2);
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex1.I.divide(complex0);
      complex0.toString();
      complex4.I.add(complex3);
      Complex complex5 = Complex.valueOf((-1899.956057), 1732.806478434452);
      complex4.abs();
      complex5.NaN.add(complex2);
      Complex complex6 = complex5.sqrt();
      complex6.INF.acos();
      Complex complex7 = complex4.ONE.multiply(1732.806478434452);
      Complex complex8 = Complex.valueOf(0.34023189544677734, (-1899.956057));
      complex1.nthRoot(272);
      complex2.divide(complex4);
      complex8.divide((-1855.835917953108));
      complex4.sqrt();
      Complex complex9 = complex3.log();
      complex9.hashCode();
      complex3.divide((-1899.956057));
      complex6.toString();
      complex7.divide((-3157.8821));
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-1516.271351389));
      complex1.createComplex(Double.POSITIVE_INFINITY, (-3039.6316853800918));
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, (-20.0));
      complex0.ONE.abs();
      Complex complex1 = complex0.divide(9.113713162029408E267);
      Complex complex2 = complex1.subtract(701.95087);
      Complex complex3 = complex0.divide(complex1);
      complex0.tanh();
      Complex complex4 = complex2.exp();
      complex1.cos();
      complex1.acos();
      complex4.createComplex((-6.203839803215248E-299), 1.5430806348152437);
      Complex.valueOf(9.113713162029408E267);
      complex3.multiply((-4224.8028602));
      Complex.valueOf((-20.0));
      try { 
        complex1.nthRoot((-2704));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,704
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(153.4060482729258, 153.4060482729258);
      Complex complex1 = complex0.I.negate();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex1.INF.divide(153.4060482729258);
      Complex complex3 = complex0.sinh();
      complex1.reciprocal();
      complex2.multiply(153.4060482729258);
      complex1.multiply(175);
      Complex complex4 = complex3.log();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.113713162029408E267);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-3904.1455584029513));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.sqrt1z();
      complex0.getReal();
      complex1.atan();
      Complex complex3 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = Complex.I;
      complex1.equals(complex5);
      complex4.getImaginary();
      complex4.abs();
      complex3.sin();
      complex5.multiply(996);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-1029.169652713));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.sqrt1z();
      complex3.isInfinite();
      complex2.add((-1029.169652713));
      Complex complex4 = complex0.conjugate();
      complex4.exp();
      complex3.multiply(complex4);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex1.divide((-1029.169652713));
      Complex complex7 = Complex.valueOf((-1029.169652713), (-697.4866947533317));
      complex1.reciprocal();
      complex5.equals("");
      complex7.getImaginary();
      complex6.abs();
      complex3.createComplex(1.4161468365471424, (-697.4866947533317));
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.subtract(complex0);
      complex2.ZERO.cosh();
      complex0.I.getField();
      Complex complex3 = complex0.subtract((-3813.2674));
      complex3.hashCode();
      Complex complex4 = complex3.I.acos();
      complex4.ZERO.abs();
      Complex complex5 = complex3.sqrt1z();
      complex3.isInfinite();
      Complex complex6 = complex3.INF.add((-3813.2674));
      complex6.INF.conjugate();
      complex3.exp();
      complex5.multiply(complex1);
      Complex complex7 = complex5.acos();
      complex7.NaN.divide((-3813.2674));
      Complex complex8 = new Complex((-3327.52), (-3813.2674));
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex1.multiply(20.0);
      complex3.ONE.add(complex4);
      complex3.ZERO.divide(complex5);
      complex7.divide(20.0);
      complex0.I.acos();
      Complex complex8 = complex6.divide(complex0);
      complex3.multiply(complex0);
      Complex complex9 = complex8.log();
      complex9.ZERO.conjugate();
      complex9.createComplex(20.0, (-2081.985571896));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1061.58289266));
      complex0.I.getField();
      Complex complex1 = complex0.divide((-1061.58289266));
      Complex complex2 = complex1.I.tanh();
      complex2.NaN.getField();
      complex0.isInfinite();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.ONE.multiply(complex2);
      Complex complex5 = complex1.tanh();
      complex2.readResolve();
      Complex complex6 = complex5.ONE.createComplex((-2572.12637557), (-2572.12637557));
      complex6.I.log();
      Complex complex7 = complex6.I.add(complex1);
      Complex complex8 = complex7.INF.multiply(complex6);
      Complex complex9 = complex4.subtract(0.0);
      complex9.subtract(complex8);
      complex6.I.toString();
      complex2.nthRoot(1);
      complex6.multiply((-2572.12637557));
      Complex complex10 = complex3.add((-2572.12637557));
      complex2.isInfinite();
      complex3.getField();
      complex4.reciprocal();
      complex5.getField();
      try { 
        complex10.nthRoot((-1303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,303
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1500.730570591);
      Complex complex1 = complex0.INF.subtract(1500.730570591);
      complex0.getImaginary();
      Complex complex2 = complex1.ZERO.cosh();
      Complex.valueOf(1500.730570591, 1500.730570591);
      Complex complex3 = complex0.ZERO.sin();
      complex3.ONE.sqrt1z();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = Complex.valueOf((-2304.45437764), (-2304.45437764));
      Complex complex6 = complex5.NaN.log();
      complex6.ONE.hashCode();
      complex0.getArgument();
      Complex complex7 = complex0.tan();
      complex7.ZERO.pow((-2304.45437764));
      Complex complex8 = complex0.pow(4.544122762558404E223);
      complex0.getImaginary();
      complex1.getArgument();
      Complex complex9 = complex0.cosh();
      complex1.getArgument();
      complex0.subtract(complex9);
      Complex complex10 = complex2.createComplex((-2304.45437764), 0.7853981633974483);
      complex10.INF.getArgument();
      complex8.pow(complex5);
      complex4.exp();
      complex6.readResolve();
      Complex complex11 = complex0.tanh();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(707.998);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      
      Complex complex1 = Complex.ONE;
      assertNotNull(complex1);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ONE.tanh();
      assertNotNull(complex2);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.I.pow(36.0);
      assertNotNull(complex3);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals((-2.204364238465236E-15), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex0.I.subtract(complex1);
      assertNotNull(complex4);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex0.subtract(complex1);
      assertNotNull(complex5);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex5.I.pow(complex1);
      assertNotNull(complex6);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(6.123233995736766E-17, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      
      Complex complex7 = complex1.acos();
      assertNotNull(complex7);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      
      Complex complex8 = complex1.cos();
      assertNotNull(complex8);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex8.isInfinite());
      assertEquals(0.5403023058681398, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      
      Complex complex9 = complex1.sinh();
      assertNotNull(complex9);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(1.1752011936438014, complex9.getReal(), 0.01);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex0));
      
      Complex complex10 = complex4.pow(complex7);
      assertNotNull(complex10);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(1.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      
      Complex complex11 = complex10.sqrt1z();
      assertNotNull(complex11);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(1.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex10));
      assertTrue(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      
      Complex complex12 = complex7.ONE.tan();
      assertNotNull(complex12);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex11);
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex11));
      
      Complex complex13 = complex1.pow(513.5198);
      assertNotNull(complex13);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(1.0, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex3);
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex12));
      assertTrue(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex3));
      assertTrue(complex13.equals((Object)complex1));
      
      Complex complex14 = complex7.add(0.0);
      assertNotNull(complex14);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex5);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex4);
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex12));
      assertTrue(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex2));
      assertTrue(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex4));
      
      Complex complex15 = complex7.cos();
      assertNotNull(complex15);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(1.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex5);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex14);
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex3));
      assertTrue(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex12));
      assertTrue(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex3));
      assertTrue(complex15.equals((Object)complex1));
      assertTrue(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex14));
      
      Complex complex16 = complex9.negate();
      assertNotNull(complex16);
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertEquals((-1.1752011936438014), complex16.getReal(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(1.1752011936438014, complex9.getReal(), 0.01);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex13);
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex13));
      
      Complex complex17 = complex9.add(complex15);
      assertNotNull(complex17);
      assertFalse(complex17.isNaN());
      assertEquals(2.1752011936438014, complex17.getReal(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(1.1752011936438014, complex9.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(1.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex5);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex13);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex17);
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex3));
      assertTrue(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex16));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex12));
      assertTrue(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex3));
      assertTrue(complex15.equals((Object)complex1));
      assertTrue(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex16));
      assertFalse(complex15.equals((Object)complex14));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = Complex.valueOf(0.5098485946655273);
      assertNotNull(complex1);
      assertEquals(0.5098485946655273, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.NaN.subtract(complex0);
      assertNotNull(complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5098485946655273, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      complex2.NaN.hashCode();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5098485946655273, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = Complex.ZERO;
      assertNotNull(complex3);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex0.ZERO.subtract(complex3);
      assertNotNull(complex4);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex5 = Complex.valueOf(7.77328837578952E-9);
      assertNotNull(complex5);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(7.77328837578952E-9, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = complex0.negate();
      assertNotNull(complex6);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertTrue(complex6.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1741.663740609819), (-1741.663740609819));
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals((-1741.663740609819), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1741.663740609819), complex0.getImaginary(), 0.01);
      
      Complex complex1 = Complex.valueOf((-1741.663740609819), Double.NaN);
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.atan();
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals((-1741.663740609819), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1741.663740609819), complex0.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-2.8708180624630394E-4), complex2.getImaginary(), 0.01);
      assertEquals((-1.5705092449571034), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.154027217);
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = Complex.ONE;
      assertNotNull(complex1);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.NaN.add(complex1);
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex1.INF.tan();
      assertNotNull(complex3);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex2);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex0.multiply(0.0);
      assertNotNull(complex4);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = (Complex)complex0.ONE.readResolve();
      assertNotNull(complex5);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex3.ONE.atan();
      assertNotNull(complex6);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      
      double double0 = complex2.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      
      double double1 = complex4.abs();
      assertEquals(0.0, double1, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex6));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex7 = complex3.reciprocal();
      assertNotNull(complex7);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex2);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      
      Complex complex8 = complex7.divide(complex2);
      assertNotNull(complex8);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex2);
      assertSame(complex3, complex8);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex3);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex8, complex5);
      assertSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex7);
      assertSame(complex8, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      
      Complex complex9 = complex2.INF.log();
      assertNotNull(complex9);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.7853981633974483, complex9.getImaginary(), 0.01);
      assertTrue(complex9.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex7));
      
      Complex complex10 = complex2.NaN.asin();
      assertNotNull(complex10);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex7);
      assertSame(complex2, complex8);
      assertNotSame(complex10, complex9);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertSame(complex10, complex8);
      assertSame(complex10, complex7);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex5);
      assertSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      
      Complex complex11 = complex7.negate();
      assertNotNull(complex11);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex2);
      assertSame(complex3, complex11);
      assertSame(complex3, complex8);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex3);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertSame(complex7, complex10);
      assertSame(complex7, complex11);
      assertNotSame(complex7, complex1);
      assertSame(complex11, complex7);
      assertNotSame(complex11, complex6);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertSame(complex11, complex2);
      assertSame(complex11, complex3);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex4);
      assertSame(complex11, complex10);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      
      Complex complex12 = complex11.NaN.add(2125.154027217);
      assertNotNull(complex12);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex5);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex11);
      assertSame(complex3, complex8);
      assertSame(complex3, complex2);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex3);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertSame(complex7, complex10);
      assertSame(complex7, complex11);
      assertNotSame(complex7, complex1);
      assertSame(complex7, complex12);
      assertSame(complex11, complex7);
      assertNotSame(complex11, complex6);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertSame(complex11, complex2);
      assertSame(complex11, complex3);
      assertSame(complex11, complex12);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex4);
      assertSame(complex11, complex10);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex12, complex9);
      assertSame(complex12, complex3);
      assertNotSame(complex12, complex4);
      assertSame(complex12, complex11);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex6);
      assertSame(complex12, complex10);
      assertNotSame(complex12, complex0);
      assertSame(complex12, complex8);
      assertSame(complex12, complex2);
      assertSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex1));
      
      Complex complex13 = complex11.ONE.subtract(1849.88716);
      assertNotNull(complex13);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals((-1848.88716), complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex11);
      assertSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex7);
      assertSame(complex3, complex2);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertSame(complex7, complex3);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertSame(complex7, complex10);
      assertSame(complex7, complex11);
      assertSame(complex7, complex12);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertSame(complex11, complex7);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex13);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertSame(complex11, complex2);
      assertSame(complex11, complex3);
      assertSame(complex11, complex12);
      assertNotSame(complex11, complex4);
      assertSame(complex11, complex10);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex3);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex3));
      
      Complex complex14 = complex2.asin();
      assertNotNull(complex14);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex9);
      assertSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      assertSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertSame(complex14, complex11);
      assertSame(complex14, complex3);
      assertSame(complex14, complex12);
      assertSame(complex14, complex8);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex11);
      assertSame(complex2, complex8);
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex12));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      
      Complex complex15 = complex7.INF.divide(complex8);
      assertNotNull(complex15);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex15, complex1);
      assertSame(complex15, complex14);
      assertSame(complex15, complex12);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex13);
      assertSame(complex15, complex7);
      assertSame(complex15, complex2);
      assertNotSame(complex15, complex4);
      assertSame(complex15, complex10);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex5);
      assertSame(complex15, complex3);
      assertSame(complex15, complex8);
      assertNotSame(complex15, complex6);
      assertSame(complex15, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex15);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex11);
      assertSame(complex2, complex8);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex11);
      assertSame(complex3, complex8);
      assertSame(complex3, complex14);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex15);
      assertSame(complex3, complex7);
      assertSame(complex3, complex2);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertSame(complex7, complex3);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertSame(complex7, complex10);
      assertSame(complex7, complex11);
      assertSame(complex7, complex12);
      assertSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex15);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex0);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex3);
      assertSame(complex8, complex12);
      assertNotSame(complex8, complex5);
      assertSame(complex8, complex10);
      assertSame(complex8, complex2);
      assertSame(complex8, complex14);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertSame(complex8, complex15);
      assertSame(complex8, complex7);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex12));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      
      Complex complex16 = complex14.ZERO.sqrt1z();
      assertNotNull(complex16);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex0);
      assertSame(complex14, complex15);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex16);
      assertSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      assertSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertSame(complex14, complex11);
      assertSame(complex14, complex3);
      assertSame(complex14, complex12);
      assertSame(complex14, complex8);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex14);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex15);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex11);
      assertSame(complex2, complex8);
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex12));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex7));
      assertTrue(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex0));
      
      Complex complex17 = Complex.valueOf(0.0);
      assertNotNull(complex17);
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertFalse(complex17.isInfinite());
      assertFalse(complex17.isNaN());
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex10);
      
      Complex complex18 = complex14.negate();
      assertNotNull(complex18);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertTrue(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex0);
      assertSame(complex14, complex15);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex16);
      assertSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      assertSame(complex14, complex18);
      assertNotSame(complex14, complex17);
      assertSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertSame(complex14, complex11);
      assertSame(complex14, complex3);
      assertSame(complex14, complex12);
      assertSame(complex14, complex8);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex15);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertSame(complex2, complex18);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex11);
      assertSame(complex2, complex8);
      assertNotSame(complex2, complex17);
      assertNotSame(complex18, complex6);
      assertSame(complex18, complex7);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex1);
      assertSame(complex18, complex15);
      assertNotSame(complex18, complex4);
      assertSame(complex18, complex14);
      assertSame(complex18, complex11);
      assertSame(complex18, complex8);
      assertNotSame(complex18, complex17);
      assertSame(complex18, complex2);
      assertSame(complex18, complex10);
      assertSame(complex18, complex12);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex9);
      assertSame(complex18, complex3);
      
      Complex complex19 = complex16.asin();
      assertNotNull(complex19);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(1.5707963267948966, complex19.getReal(), 0.01);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex0);
      assertSame(complex14, complex15);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex16);
      assertSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      assertSame(complex14, complex18);
      assertNotSame(complex14, complex17);
      assertSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertSame(complex14, complex11);
      assertSame(complex14, complex3);
      assertNotSame(complex14, complex19);
      assertSame(complex14, complex12);
      assertSame(complex14, complex8);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex19);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertSame(complex2, complex15);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertSame(complex2, complex18);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex19);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex11);
      assertSame(complex2, complex8);
      assertNotSame(complex2, complex17);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex1);
      
      Complex complex20 = complex19.INF.sqrt1z();
      assertNotNull(complex20);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(1.5707963267948966, complex19.getReal(), 0.01);
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertTrue(complex20.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex20.getImaginary(), 0.01);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex20);
      assertSame(complex14, complex15);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex16);
      assertSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      assertSame(complex14, complex18);
      assertNotSame(complex14, complex17);
      assertSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertSame(complex14, complex11);
      assertSame(complex14, complex3);
      assertNotSame(complex14, complex19);
      assertSame(complex14, complex12);
      assertSame(complex14, complex8);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex20);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex19);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex20);
      assertSame(complex2, complex15);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertSame(complex2, complex18);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex19);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex11);
      assertSame(complex2, complex8);
      assertNotSame(complex2, complex17);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex1);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex18);
      
      complex7.hashCode();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex16);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex11);
      assertSame(complex3, complex8);
      assertSame(complex3, complex14);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex15);
      assertSame(complex3, complex18);
      assertSame(complex3, complex7);
      assertSame(complex3, complex2);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex16);
      assertSame(complex7, complex3);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertSame(complex7, complex10);
      assertSame(complex7, complex11);
      assertNotSame(complex7, complex19);
      assertSame(complex7, complex12);
      assertSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex15);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex9);
      assertSame(complex7, complex18);
      assertNotSame(complex7, complex1);
      
      ComplexField complexField0 = complex15.getField();
      assertNotNull(complexField0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex15, complex1);
      assertSame(complex15, complex14);
      assertSame(complex15, complex12);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex13);
      assertSame(complex15, complex18);
      assertNotSame(complex15, complex20);
      assertSame(complex15, complex7);
      assertSame(complex15, complex2);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex4);
      assertSame(complex15, complex10);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex5);
      assertSame(complex15, complex3);
      assertSame(complex15, complex8);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex19);
      assertSame(complex15, complex11);
      assertNotSame(complex15, complex17);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex20);
      assertSame(complex2, complex15);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex14);
      assertSame(complex2, complex18);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex19);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex11);
      assertSame(complex2, complex8);
      assertNotSame(complex2, complex17);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex16);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex11);
      assertSame(complex3, complex8);
      assertSame(complex3, complex14);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex15);
      assertSame(complex3, complex18);
      assertSame(complex3, complex7);
      assertSame(complex3, complex2);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex16);
      assertSame(complex7, complex3);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertSame(complex7, complex10);
      assertSame(complex7, complex11);
      assertNotSame(complex7, complex19);
      assertSame(complex7, complex12);
      assertSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex15);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex9);
      assertSame(complex7, complex18);
      assertNotSame(complex7, complex1);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex0);
      assertSame(complex8, complex11);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex3);
      assertNotSame(complex8, complex17);
      assertSame(complex8, complex12);
      assertNotSame(complex8, complex19);
      assertSame(complex8, complex18);
      assertNotSame(complex8, complex5);
      assertSame(complex8, complex10);
      assertSame(complex8, complex2);
      assertSame(complex8, complex14);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertSame(complex8, complex15);
      assertSame(complex8, complex7);
      
      double double2 = complex0.getReal();
      assertEquals(2125.154027217, double2, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      
      Complex complex21 = complex14.divide((-331.484));
      assertNotNull(complex21);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertEquals(Double.NaN, complex21.getImaginary(), 0.01);
      assertTrue(complex21.isNaN());
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex0);
      assertSame(complex14, complex21);
      assertNotSame(complex14, complex20);
      assertSame(complex14, complex15);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex16);
      assertSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      assertSame(complex14, complex18);
      assertNotSame(complex14, complex17);
      assertSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertSame(complex14, complex11);
      assertSame(complex14, complex3);
      assertNotSame(complex14, complex19);
      assertSame(complex14, complex12);
      assertSame(complex14, complex8);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex20);
      assertSame(complex2, complex15);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex21);
      assertSame(complex2, complex14);
      assertSame(complex2, complex18);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex19);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex11);
      assertSame(complex2, complex8);
      assertNotSame(complex2, complex17);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex4);
      assertSame(complex21, complex10);
      assertNotSame(complex21, complex9);
      assertSame(complex21, complex7);
      assertNotSame(complex21, complex20);
      assertSame(complex21, complex2);
      assertSame(complex21, complex15);
      assertSame(complex21, complex18);
      assertSame(complex21, complex14);
      assertNotSame(complex21, complex1);
      assertSame(complex21, complex12);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex13);
      assertSame(complex21, complex3);
      assertNotSame(complex21, complex6);
      assertSame(complex21, complex8);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex17);
      assertSame(complex21, complex11);
      
      String string0 = complex4.toString();
      assertEquals("(0.0, 0.0)", string0);
      assertNotNull(string0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex21);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex6);
      
      Complex complex22 = complex15.reciprocal();
      assertNotNull(complex22);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2125.154027217, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex22.isNaN());
      assertFalse(complex22.isInfinite());
      assertEquals(Double.NaN, complex22.getReal(), 0.01);
      assertEquals(Double.NaN, complex22.getImaginary(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex15, complex1);
      assertSame(complex15, complex14);
      assertSame(complex15, complex21);
      assertSame(complex15, complex12);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex13);
      assertSame(complex15, complex18);
      assertNotSame(complex15, complex20);
      assertSame(complex15, complex7);
      assertSame(complex15, complex2);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex4);
      assertSame(complex15, complex10);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex5);
      assertSame(complex15, complex3);
      assertSame(complex15, complex8);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex19);
      assertSame(complex15, complex22);
      assertSame(complex15, complex11);
      assertNotSame(complex15, complex17);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex22);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex20);
      assertSame(complex2, complex15);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex21);
      assertSame(complex2, complex14);
      assertSame(complex2, complex18);
      assertSame(complex2, complex22);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex19);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertSame(complex2, complex11);
      assertSame(complex2, complex8);
      assertNotSame(complex2, complex17);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex22);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex16);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex6);
      assertSame(complex3, complex11);
      assertSame(complex3, complex8);
      assertSame(complex3, complex21);
      assertSame(complex3, complex14);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex15);
      assertSame(complex3, complex18);
      assertSame(complex3, complex7);
      assertSame(complex3, complex2);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex16);
      assertSame(complex7, complex3);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertSame(complex7, complex10);
      assertSame(complex7, complex11);
      assertNotSame(complex7, complex19);
      assertSame(complex7, complex12);
      assertSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertSame(complex7, complex22);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex15);
      assertSame(complex7, complex21);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex9);
      assertSame(complex7, complex18);
      assertNotSame(complex7, complex1);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex0);
      assertSame(complex8, complex11);
      assertSame(complex8, complex22);
      assertSame(complex8, complex21);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex3);
      assertNotSame(complex8, complex17);
      assertSame(complex8, complex12);
      assertNotSame(complex8, complex19);
      assertSame(complex8, complex18);
      assertNotSame(complex8, complex5);
      assertSame(complex8, complex10);
      assertSame(complex8, complex2);
      assertSame(complex8, complex14);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertSame(complex8, complex15);
      assertSame(complex8, complex7);
      assertNotSame(complex22, complex4);
      assertSame(complex22, complex10);
      assertSame(complex22, complex11);
      assertNotSame(complex22, complex17);
      assertSame(complex22, complex8);
      assertSame(complex22, complex2);
      assertSame(complex22, complex3);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex0);
      assertSame(complex22, complex14);
      assertNotSame(complex22, complex1);
      assertSame(complex22, complex21);
      assertSame(complex22, complex15);
      assertSame(complex22, complex12);
      assertSame(complex22, complex18);
      assertNotSame(complex22, complex19);
      assertSame(complex22, complex7);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex5);
      
      Complex complex23 = Complex.valueOf(2125.154027217, Double.NaN);
      assertNotNull(complex23);
      assertFalse(complex23.isInfinite());
      assertEquals(Double.NaN, complex23.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex23.getReal(), 0.01);
      assertTrue(complex23.isNaN());
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex16);
      assertSame(complex23, complex11);
      assertSame(complex23, complex22);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex17);
      assertSame(complex23, complex10);
      assertSame(complex23, complex3);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex6);
      assertSame(complex23, complex8);
      assertSame(complex23, complex18);
      assertSame(complex23, complex12);
      assertSame(complex23, complex21);
      assertSame(complex23, complex15);
      assertSame(complex23, complex14);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex13);
      assertNotSame(complex23, complex1);
      assertSame(complex23, complex7);
      assertSame(complex23, complex2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-3904.1455584029513));
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.ZERO.negate();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ONE.sqrt1z();
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      
      double double0 = complex0.getReal();
      assertEquals((-3904.1455584029513), double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex3 = complex1.atan();
      assertNotNull(complex3);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex2));
      
      Complex complex4 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      assertNotNull(complex4);
      assertEquals(6.283185307179586, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(6.283185307179586, complex4.getImaginary(), 0.01);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex2.reciprocal();
      assertNotNull(complex5);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = Complex.I;
      assertNotNull(complex6);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      
      boolean boolean0 = complex1.equals(complex6);
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      
      double double1 = complex5.getImaginary();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = complex5.abs();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      Complex complex7 = complex6.createComplex((-707.136500411637), 1.4635417461395264);
      assertNotNull(complex7);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(1.4635417461395264, complex7.getImaginary(), 0.01);
      assertEquals((-707.136500411637), complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex1);
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      
      Complex complex8 = complex7.add(complex4);
      assertNotNull(complex8);
      assertEquals(6.283185307179586, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(6.283185307179586, complex4.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(1.4635417461395264, complex7.getImaginary(), 0.01);
      assertEquals((-707.136500411637), complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(7.746727053319113, complex8.getImaginary(), 0.01);
      assertEquals((-700.8533151044575), complex8.getReal(), 0.01);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex0));
      
      Complex complex9 = complex1.divide((-3859.9));
      assertNotNull(complex9);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertTrue(complex9.equals((Object)complex1));
      assertTrue(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      
      boolean boolean1 = complex6.isInfinite();
      assertFalse(boolean1);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex4));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.I.subtract(complex0);
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.ZERO.cosh();
      assertNotNull(complex3);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      ComplexField complexField0 = complex0.I.getField();
      assertNotNull(complexField0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex4 = complex0.subtract((-3813.2674));
      assertNotNull(complex4);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      
      complex4.hashCode();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex4.I.acos();
      assertNotNull(complex5);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      
      double double0 = complex5.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = complex4.sqrt1z();
      assertNotNull(complex6);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      
      boolean boolean0 = complex4.isInfinite();
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex7 = complex4.INF.add((-3813.2674));
      assertNotNull(complex7);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      
      Complex complex8 = complex7.INF.conjugate();
      assertNotNull(complex8);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex0);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      
      Complex complex9 = complex4.exp();
      assertNotNull(complex9);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      
      Complex complex10 = complex6.multiply(complex1);
      assertNotNull(complex10);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(5989.866219042105, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex2);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex2));
      
      Complex complex11 = complex6.acos();
      assertNotNull(complex11);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals((-8.939388849273602), complex11.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex10);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex10));
      
      Complex complex12 = complex11.NaN.divide((-3813.2674));
      assertNotNull(complex12);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals((-8.939388849273602), complex11.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex0);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex12);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex10);
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex5));
      assertTrue(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex10));
      
      Complex complex13 = Complex.valueOf(0.0, (-697.4866947533317));
      assertNotNull(complex13);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals((-697.4866947533317), complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex5);
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex5));
      
      Complex complex14 = complex11.ONE.reciprocal();
      assertNotNull(complex14);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(1.0, complex14.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals((-8.939388849273602), complex11.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex8);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex10);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex7));
      assertTrue(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex13));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex10));
      
      boolean boolean1 = complex11.equals(complex4);
      assertFalse(boolean1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals((-8.939388849273602), complex11.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex10);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(boolean1 == boolean0);
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex14));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex13));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex10));
      
      double double1 = complex7.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex12);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex12));
      
      double double2 = complex9.abs();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex10);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex14));
      assertTrue(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex10));
      
      Complex complex15 = complex8.I.createComplex((-1.4854841678687828E-8), 1.4635417461395264);
      assertNotNull(complex15);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(1.4635417461395264, complex15.getImaginary(), 0.01);
      assertEquals((-1.4854841678687828E-8), complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex12);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex15);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex0);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex14));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      
      Complex complex16 = complex9.divide(Double.NaN);
      assertNotNull(complex16);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertTrue(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex16);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex1);
      assertSame(complex16, complex12);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex4);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex10);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex8));
      assertTrue(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex14));
      assertTrue(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex10));
      
      boolean boolean2 = complex8.isInfinite();
      assertTrue(boolean2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex16);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex15);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex0);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex14));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex16));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex15));
      assertFalse(complex8.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.ONE.asin();
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.ONE.acos();
      assertNotNull(complex2);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.I.conjugate();
      assertNotNull(complex3);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.0), complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      List<Complex> list0 = complex0.nthRoot(227);
      assertNotNull(list0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(227, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(list0.contains(complex3));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      ComplexField complexField0 = complex1.I.getField();
      assertNotNull(complexField0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      
      ComplexField complexField1 = complex0.getField();
      assertNotNull(complexField1);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertSame(complexField1, complexField0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex4 = complex1.sinh();
      assertNotNull(complex4);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(2.3012989023072947, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex4.ZERO.multiply(complex2);
      assertNotNull(complex5);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(2.3012989023072947, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex2));
      
      Complex complex6 = complex0.ZERO.sqrt1z();
      assertNotNull(complex6);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = complex4.ZERO.conjugate();
      assertNotNull(complex7);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(2.3012989023072947, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertTrue(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      
      Complex complex8 = Complex.valueOf(1.0, 6.283185307179586);
      assertNotNull(complex8);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      
      Complex complex9 = complex1.divide((double) 227);
      assertNotNull(complex9);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.006919807607025976, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex6);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex6));
      
      List<Complex> list1 = complex4.nthRoot(227);
      assertNotNull(list1);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(2.3012989023072947, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(227, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(list1, list0);
      assertFalse(list1.contains(complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(list1.equals((Object)list0));
      
      boolean boolean0 = complex1.isInfinite();
      assertFalse(boolean0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      
      Complex complex10 = complex1.cosh();
      assertNotNull(complex10);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertFalse(complex10.isInfinite());
      assertEquals(2.5091784786580567, complex10.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      
      Complex complex11 = complex0.createComplex((-3363.4806357843577), (-1260.618101));
      assertNotNull(complex11);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-1260.618101), complex11.getImaginary(), 0.01);
      assertEquals((-3363.4806357843577), complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex10);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex10));
      
      Complex complex12 = complex6.multiply((-681.44));
      assertNotNull(complex12);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-681.44), complex12.getReal(), 0.01);
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.ZERO.multiply(1394);
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.INF.createComplex(0.0, 1394);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1394.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.NaN.multiply(170.6148302475);
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1394.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      List<Complex> list0 = complex2.I.nthRoot(1394);
      assertNotNull(list0);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1394.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(list0.isEmpty());
      assertEquals(1394, list0.size());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertFalse(list0.contains(complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      
      Complex complex4 = complex0.ONE.exp();
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2.718281828459045, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      
      List<Complex> list1 = complex4.ZERO.nthRoot(1394);
      assertNotNull(list1);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2.718281828459045, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(list1.isEmpty());
      assertEquals(1394, list1.size());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(list1, list0);
      assertTrue(list1.contains(complex1));
      assertFalse(list1.contains(complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(list1.equals((Object)list0));
      
      Complex complex5 = complex0.sqrt();
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.47213595499958, complex5.getReal(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex5.I.log();
      assertNotNull(complex6);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.47213595499958, complex5.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      
      Complex complex7 = complex5.I.multiply(285);
      assertNotNull(complex7);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.47213595499958, complex5.getReal(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(285.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = complex1.exp();
      assertNotNull(complex8);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      
      double double0 = complex8.ZERO.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      
      complex8.hashCode();
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      
      double double1 = complex6.abs();
      assertEquals(1.5707963267948966, double1, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.47213595499958, complex5.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex9 = complex8.atan();
      assertNotNull(complex9);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.NaN.atan();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.multiply(complex0);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = Complex.INF;
      assertNotNull(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.multiply(complex1);
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.NaN.tanh();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.sqrt();
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = Complex.INF;
      assertNotNull(complex1);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.I.tan();
      assertNotNull(complex2);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.I.cos();
      assertNotNull(complex3);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.5430806348152437, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex3.NaN.tanh();
      assertNotNull(complex4);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.5430806348152437, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertSame(complex4, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex4.exp();
      assertNotNull(complex5);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.5430806348152437, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertSame(complex4, complex0);
      assertNotSame(complex5, complex1);
      assertSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex0.I.pow(complex1);
      assertNotNull(complex6);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex0));
      
      Complex complex7 = complex0.ONE.cosh();
      assertNotNull(complex7);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5430806348152437, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      assertTrue(complex7.equals((Object)complex3));
      
      Complex complex8 = complex0.ONE.sqrt();
      assertNotNull(complex8);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      
      Complex complex9 = complex8.I.multiply((-2208.33));
      assertNotNull(complex9);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertEquals((-2208.33), complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      
      Complex complex10 = (Complex)complex9.ONE.readResolve();
      assertNotNull(complex10);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertEquals((-2208.33), complex9.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(1.0, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex5));
      
      double double0 = complex8.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex7);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertTrue(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex7));
      
      boolean boolean0 = complex0.isNaN();
      assertTrue(boolean0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      
      Complex complex11 = complex6.ONE.subtract((-1104.9129331));
      assertNotNull(complex11);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(1105.9129331, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex1));
      
      ComplexField complexField0 = complex11.ZERO.getField();
      assertNotNull(complexField0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(1105.9129331, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex1));
      
      Complex complex12 = complex0.createComplex(6.283185307179586, 0.0);
      assertNotNull(complex12);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(6.283185307179586, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      
      Complex complex13 = Complex.valueOf(6.283185307179586);
      assertNotNull(complex13);
      assertEquals(6.283185307179586, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex2);
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex8));
      assertTrue(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex2));
      
      double double1 = complex0.getReal();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex13);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex14 = complex13.pow(6.283185307179586);
      assertNotNull(complex14);
      assertEquals(6.283185307179586, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(103540.920434272, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex8));
      assertTrue(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      
      Complex complex15 = complex14.NaN.subtract(complex6);
      assertNotNull(complex15);
      assertEquals(6.283185307179586, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(103540.920434272, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex13);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex8);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex6);
      assertSame(complex15, complex4);
      assertSame(complex15, complex5);
      assertSame(complex15, complex0);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex9);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex13);
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex8));
      assertTrue(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex10));
      assertTrue(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex14));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex13));
      
      Complex complex16 = complex14.NaN.sqrt();
      assertNotNull(complex16);
      assertEquals(6.283185307179586, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(103540.920434272, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex16.isInfinite());
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertTrue(complex16.isNaN());
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertSame(complex16, complex5);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex13);
      assertSame(complex16, complex0);
      assertSame(complex16, complex4);
      assertNotSame(complex16, complex6);
      assertSame(complex16, complex15);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex12);
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex8));
      assertTrue(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertTrue(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex2));
      
      Complex complex17 = complex14.conjugate();
      assertNotNull(complex17);
      assertEquals(6.283185307179586, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(103540.920434272, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex17.isNaN());
      assertEquals(103540.920434272, complex17.getReal(), 0.01);
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex2);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex13);
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex8));
      assertTrue(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex16));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex10));
      assertTrue(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex13));
      
      Complex complex18 = complex6.pow(0.0);
      assertNotNull(complex18);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertTrue(complex18.isNaN());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex16);
      assertNotSame(complex0, complex11);
      assertSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex17);
      assertSame(complex0, complex4);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex13);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex8);
      assertSame(complex18, complex0);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex12);
      assertSame(complex18, complex4);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex8);
      assertSame(complex18, complex15);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex6);
      assertSame(complex18, complex16);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex7);
      assertSame(complex18, complex5);
      assertNotSame(complex18, complex14);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex13);
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex11));
      assertTrue(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex11));
      assertTrue(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex14));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex13));
      
      try { 
        complex14.ZERO.nthRoot((-1354));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,354
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.ZERO.sqrt();
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complex1.log();
      assertNotNull(complex2);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertTrue(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      ComplexField complexField0 = complex2.getField();
      assertNotNull(complexField0);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertTrue(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      Complex complex3 = complex2.ONE.atan();
      assertNotNull(complex3);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertTrue(complex2.isInfinite());
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      
      Complex complex4 = complex2.NaN.reciprocal();
      assertNotNull(complex4);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertTrue(complex2.isInfinite());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertTrue(complex4.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      
      Complex complex5 = complex0.sqrt();
      assertNotNull(complex5);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      
      Complex complex6 = complex0.cos();
      assertNotNull(complex6);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      
      Complex complex7 = complex6.tanh();
      assertNotNull(complex7);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      
      Complex complex8 = complex5.negate();
      assertNotNull(complex8);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals((-1.0), complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      
      Complex complex9 = complex7.I.negate();
      assertNotNull(complex9);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals((-1.0), complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      
      Complex complex10 = complex9.NaN.log();
      assertNotNull(complex10);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals((-1.0), complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex2);
      assertSame(complex10, complex4);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      
      Complex complex11 = complex0.multiply(complex5);
      assertNotNull(complex11);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex11);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex2);
      
      Complex complex12 = complex1.exp();
      assertNotNull(complex12);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(1.0, complex12.getReal(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex11);
      
      Complex complex13 = complex12.NaN.divide(complex6);
      assertNotNull(complex13);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(1.0, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex11);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex7);
      assertSame(complex13, complex4);
      assertNotSame(complex13, complex11);
      assertSame(complex13, complex10);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex2);
      
      Complex complex14 = complex12.I.tan();
      assertNotNull(complex14);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(1.0, complex12.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex14.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex11);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      
      Complex complex15 = complex7.reciprocal();
      assertNotNull(complex15);
      assertFalse(complex15.isInfinite());
      assertEquals(2.027506092938932, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      
      Complex complex16 = complex14.ZERO.sqrt();
      assertNotNull(complex16);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex16.isInfinite());
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(1.0, complex12.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex14.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex11);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      
      Complex complex17 = complex9.ZERO.cos();
      assertNotNull(complex17);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex17.isNaN());
      assertEquals(1.0, complex17.getReal(), 0.01);
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals((-1.0), complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex13);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex1);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex15);
      
      Complex complex18 = Complex.valueOf((-20.0));
      assertNotNull(complex18);
      assertEquals((-20.0), complex18.getReal(), 0.01);
      assertFalse(complex18.isNaN());
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex9);
      
      Complex complex19 = complex7.pow((-20.0));
      assertNotNull(complex19);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertFalse(complex19.isInfinite());
      assertEquals(1377981.4143172696, complex19.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex13);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex1);
      
      Complex complex20 = complex19.NaN.conjugate();
      assertNotNull(complex20);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertFalse(complex19.isInfinite());
      assertEquals(1377981.4143172696, complex19.getReal(), 0.01);
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertTrue(complex20.isNaN());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex13);
      assertNotSame(complex20, complex14);
      assertSame(complex20, complex13);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex1);
      assertSame(complex20, complex10);
      assertSame(complex20, complex4);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex15);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex1);
      
      Complex complex21 = complex20.acos();
      assertNotNull(complex21);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertFalse(complex19.isInfinite());
      assertEquals(1377981.4143172696, complex19.getReal(), 0.01);
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertTrue(complex20.isNaN());
      assertEquals(Double.NaN, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertTrue(complex21.isNaN());
      assertEquals(Double.NaN, complex21.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex13);
      assertNotSame(complex20, complex14);
      assertSame(complex20, complex21);
      assertSame(complex20, complex13);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex1);
      assertSame(complex20, complex10);
      assertSame(complex20, complex4);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex15);
      assertNotSame(complex21, complex7);
      assertSame(complex21, complex20);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex9);
      assertSame(complex21, complex10);
      assertSame(complex21, complex4);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex16);
      assertSame(complex21, complex13);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex1);
      
      Complex complex22 = complex20.INF.exp();
      assertNotNull(complex22);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertFalse(complex19.isInfinite());
      assertEquals(1377981.4143172696, complex19.getReal(), 0.01);
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertTrue(complex20.isNaN());
      assertEquals(Double.NaN, complex22.getImaginary(), 0.01);
      assertFalse(complex22.isInfinite());
      assertTrue(complex22.isNaN());
      assertEquals(Double.NaN, complex22.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex22);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex13);
      assertNotSame(complex20, complex14);
      assertSame(complex20, complex21);
      assertSame(complex20, complex13);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex22);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex1);
      assertSame(complex20, complex10);
      assertSame(complex20, complex4);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex15);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex22);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex1);
      
      Complex complex23 = complex22.INF.asin();
      assertNotNull(complex23);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertFalse(complex19.isInfinite());
      assertEquals(1377981.4143172696, complex19.getReal(), 0.01);
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertTrue(complex20.isNaN());
      assertEquals(Double.NaN, complex22.getImaginary(), 0.01);
      assertFalse(complex22.isInfinite());
      assertTrue(complex22.isNaN());
      assertEquals(Double.NaN, complex22.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(Double.NaN, complex23.getReal(), 0.01);
      assertFalse(complex23.isInfinite());
      assertEquals(Double.NaN, complex23.getImaginary(), 0.01);
      assertTrue(complex23.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex22);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex23);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex13);
      assertNotSame(complex20, complex14);
      assertSame(complex20, complex21);
      assertSame(complex20, complex13);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex22);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex1);
      assertSame(complex20, complex10);
      assertSame(complex20, complex4);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex3);
      assertSame(complex20, complex23);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex15);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex23);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex23);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex11);
      assertSame(complex23, complex21);
      assertNotSame(complex23, complex2);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex22);
      assertNotSame(complex23, complex1);
      assertNotSame(complex23, complex17);
      assertSame(complex23, complex13);
      assertSame(complex23, complex10);
      assertNotSame(complex23, complex11);
      assertSame(complex23, complex4);
      assertSame(complex23, complex20);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex18);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex7);
      assertNotSame(complex23, complex6);
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex16);
      assertNotSame(complex23, complex15);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex14);
      assertNotSame(complex7, complex23);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex22);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex1);
      
      String string0 = complex22.INF.toString();
      assertEquals("(Infinity, Infinity)", string0);
      assertNotNull(string0);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertFalse(complex19.isInfinite());
      assertEquals(1377981.4143172696, complex19.getReal(), 0.01);
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertTrue(complex20.isNaN());
      assertEquals(Double.NaN, complex22.getImaginary(), 0.01);
      assertFalse(complex22.isInfinite());
      assertTrue(complex22.isNaN());
      assertEquals(Double.NaN, complex22.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex22);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex23);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex13);
      assertNotSame(complex20, complex14);
      assertSame(complex20, complex21);
      assertSame(complex20, complex13);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex22);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex1);
      assertSame(complex20, complex10);
      assertSame(complex20, complex4);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex3);
      assertSame(complex20, complex23);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex15);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex23);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex23);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex11);
      assertNotSame(complex7, complex23);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex22);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex1);
      
      ComplexField complexField1 = complex10.getField();
      assertNotNull(complexField1);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals((-1.0), complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex23);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex11);
      assertNotSame(complex7, complex23);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex22);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex1);
      assertSame(complexField1, complexField0);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex23);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex20);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex22);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex21);
      assertNotSame(complex9, complex15);
      assertSame(complex10, complex23);
      assertNotSame(complex10, complex18);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex16);
      assertSame(complex10, complex20);
      assertSame(complex10, complex4);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex12);
      assertSame(complex10, complex13);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex22);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex14);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex19);
      assertSame(complex10, complex21);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex17);
      
      Complex complex24 = complex8.subtract(complex14);
      assertNotNull(complex24);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals((-1.0), complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals((-0.7615941559557649), complex24.getImaginary(), 0.01);
      assertFalse(complex24.isInfinite());
      assertEquals((-1.0), complex24.getReal(), 0.01);
      assertFalse(complex24.isNaN());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(1.0, complex12.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex14.getImaginary(), 0.01);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex23);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex24);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex22);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex24);
      assertNotSame(complex5, complex23);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex15);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex21);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex23);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex24);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex22);
      assertNotSame(complex24, complex19);
      assertNotSame(complex24, complex0);
      assertNotSame(complex24, complex20);
      assertNotSame(complex24, complex12);
      assertNotSame(complex24, complex21);
      assertNotSame(complex24, complex18);
      assertNotSame(complex24, complex23);
      assertNotSame(complex24, complex2);
      assertNotSame(complex24, complex16);
      assertNotSame(complex24, complex6);
      assertNotSame(complex24, complex14);
      assertNotSame(complex24, complex4);
      assertNotSame(complex24, complex17);
      assertNotSame(complex24, complex15);
      assertNotSame(complex24, complex8);
      assertNotSame(complex24, complex13);
      assertNotSame(complex24, complex5);
      assertNotSame(complex24, complex22);
      assertNotSame(complex24, complex3);
      assertNotSame(complex24, complex9);
      assertNotSame(complex24, complex1);
      assertNotSame(complex24, complex7);
      assertNotSame(complex24, complex11);
      assertNotSame(complex24, complex10);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex23);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex24);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex17);
      assertNotSame(complex12, complex20);
      assertNotSame(complex12, complex18);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex22);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex21);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex19);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex11);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex21);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex18);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex20);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex23);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex19);
      assertNotSame(complex14, complex24);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex22);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex17);
      
      Complex complex25 = complex2.multiply((-731.593));
      assertNotNull(complex25);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertTrue(complex2.isInfinite());
      assertFalse(complex25.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex25.getReal(), 0.01);
      assertTrue(complex25.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex25.getImaginary(), 0.01);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex25);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex25);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex23);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex24);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex22);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex25);
      assertNotSame(complex2, complex23);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex21);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex24);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex0);
      assertNotSame(complex25, complex20);
      assertNotSame(complex25, complex16);
      assertNotSame(complex25, complex15);
      assertNotSame(complex25, complex0);
      assertNotSame(complex25, complex23);
      assertNotSame(complex25, complex2);
      assertNotSame(complex25, complex12);
      assertNotSame(complex25, complex1);
      assertNotSame(complex25, complex21);
      assertNotSame(complex25, complex6);
      assertNotSame(complex25, complex13);
      assertNotSame(complex25, complex3);
      assertNotSame(complex25, complex10);
      assertNotSame(complex25, complex19);
      assertNotSame(complex25, complex8);
      assertNotSame(complex25, complex17);
      assertNotSame(complex25, complex18);
      assertNotSame(complex25, complex9);
      assertNotSame(complex25, complex14);
      assertNotSame(complex25, complex22);
      assertNotSame(complex25, complex11);
      assertNotSame(complex25, complex24);
      assertNotSame(complex25, complex5);
      assertNotSame(complex25, complex7);
      assertNotSame(complex25, complex4);
      
      Complex complex26 = Complex.valueOf((-1.0), 5830.7775);
      assertNotNull(complex26);
      assertEquals((-1.0), complex26.getReal(), 0.01);
      assertFalse(complex26.isNaN());
      assertEquals(5830.7775, complex26.getImaginary(), 0.01);
      assertFalse(complex26.isInfinite());
      assertNotSame(complex26, complex7);
      assertNotSame(complex26, complex20);
      assertNotSame(complex26, complex23);
      assertNotSame(complex26, complex16);
      assertNotSame(complex26, complex19);
      assertNotSame(complex26, complex13);
      assertNotSame(complex26, complex0);
      assertNotSame(complex26, complex21);
      assertNotSame(complex26, complex6);
      assertNotSame(complex26, complex1);
      assertNotSame(complex26, complex3);
      assertNotSame(complex26, complex8);
      assertNotSame(complex26, complex12);
      assertNotSame(complex26, complex2);
      assertNotSame(complex26, complex10);
      assertNotSame(complex26, complex17);
      assertNotSame(complex26, complex9);
      assertNotSame(complex26, complex18);
      assertNotSame(complex26, complex25);
      assertNotSame(complex26, complex11);
      assertNotSame(complex26, complex24);
      assertNotSame(complex26, complex4);
      assertNotSame(complex26, complex15);
      assertNotSame(complex26, complex14);
      assertNotSame(complex26, complex5);
      assertNotSame(complex26, complex22);
      
      Complex complex27 = complex15.subtract(complex1);
      assertNotNull(complex27);
      assertFalse(complex15.isInfinite());
      assertEquals(2.027506092938932, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(2.027506092938932, complex27.getReal(), 0.01);
      assertEquals(0.0, complex27.getImaginary(), 0.01);
      assertFalse(complex27.isNaN());
      assertFalse(complex27.isInfinite());
      assertNotSame(complex15, complex23);
      assertNotSame(complex15, complex24);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex22);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex21);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex18);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex26);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex25);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex27);
      assertNotSame(complex15, complex19);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex20);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex26);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex25);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex27);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex25);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex27);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex26);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex23);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex24);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex26);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex23);
      assertNotSame(complex6, complex24);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex27);
      assertNotSame(complex6, complex25);
      assertNotSame(complex6, complex11);
      assertNotSame(complex7, complex23);
      assertNotSame(complex7, complex15);
      
      Complex complex28 = complex9.atan();
      assertNotNull(complex28);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals((-1.0), complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertTrue(complex28.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex28.getImaginary(), 0.01);
      assertFalse(complex28.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex28.getReal(), 0.01);
      
      Complex complex29 = complex25.pow(complex21);
      assertNotNull(complex29);
      assertFalse(complex29.isInfinite());
      assertEquals(Double.NaN, complex29.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex29.getReal(), 0.01);
      assertTrue(complex29.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertFalse(complex19.isInfinite());
      assertEquals(1377981.4143172696, complex19.getReal(), 0.01);
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertTrue(complex20.isNaN());
      assertEquals(Double.NaN, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertTrue(complex21.isNaN());
      assertEquals(Double.NaN, complex21.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex25.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex25.getReal(), 0.01);
      assertTrue(complex25.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex25.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.NaN.conjugate();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.multiply(complex0);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      
      Complex complex1 = Complex.INF;
      assertNotNull(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.sin();
      assertNotNull(complex2);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.add(complex1);
      assertNotNull(complex3);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex2);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      
      boolean boolean0 = complex3.equals(complex0);
      assertTrue(boolean0);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex2);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-3904.1455584029513));
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.ZERO.negate();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ONE.sqrt1z();
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = Complex.valueOf((-3904.1455584029513), Double.NaN);
      assertNotNull(complex3);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = Complex.I;
      assertNotNull(complex4);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex1.ONE.divide(complex3);
      assertNotNull(complex5);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertSame(complex3, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      
      boolean boolean0 = complex0.equals(complex4);
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      
      double double0 = complex4.getImaginary();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      
      double double1 = complex2.abs();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex6 = complex1.multiply((-2146554829));
      assertNotNull(complex6);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex1));
      
      Complex complex7 = complex4.multiply((-709));
      assertNotNull(complex7);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals((-709.0), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(-0.0, complex7.getReal(), 0.01);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex7);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = Complex.valueOf(4.8935021740786486E-8, 4.8935021740786486E-8);
      assertNotNull(complex1);
      assertEquals(4.8935021740786486E-8, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(4.8935021740786486E-8, complex1.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.reciprocal();
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      boolean boolean0 = complex2.equals(".&T:JaZ:?k!,#");
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      double double0 = complex1.getImaginary();
      assertEquals(4.8935021740786486E-8, double0, 0.01);
      assertEquals(4.8935021740786486E-8, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(4.8935021740786486E-8, complex1.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      
      double double1 = complex2.abs();
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex3 = complex0.ONE.cosh();
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.5430806348152437, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex1.createComplex((-2666.487330888), 4.8935021740786486E-8);
      assertNotNull(complex4);
      assertEquals(4.8935021740786486E-8, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(4.8935021740786486E-8, complex1.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(4.8935021740786486E-8, complex4.getImaginary(), 0.01);
      assertEquals((-2666.487330888), complex4.getReal(), 0.01);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex4.divide(2413.4);
      assertNotNull(complex5);
      assertEquals(4.8935021740786486E-8, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(4.8935021740786486E-8, complex1.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(4.8935021740786486E-8, complex4.getImaginary(), 0.01);
      assertEquals((-2666.487330888), complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-1.1048675440822078), complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(2.0276382589204643E-11, complex5.getImaginary(), 0.01);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      
      boolean boolean1 = complex4.isInfinite();
      assertFalse(boolean1);
      assertEquals(4.8935021740786486E-8, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(4.8935021740786486E-8, complex1.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(4.8935021740786486E-8, complex4.getImaginary(), 0.01);
      assertEquals((-2666.487330888), complex4.getReal(), 0.01);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(boolean1 == boolean0);
      
      double double2 = complex0.abs();
      assertEquals(0.0, double2, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      
      Complex complex1 = Complex.valueOf(4.8935021740786486E-8, 4.8935021740786486E-8);
      assertNotNull(complex1);
      assertEquals(4.8935021740786486E-8, complex1.getReal(), 0.01);
      assertEquals(4.8935021740786486E-8, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.reciprocal();
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      
      boolean boolean0 = complex2.equals(".&T:JaZ:?k!,#");
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      
      double double0 = complex1.getImaginary();
      assertEquals(4.8935021740786486E-8, double0, 0.01);
      assertEquals(4.8935021740786486E-8, complex1.getReal(), 0.01);
      assertEquals(4.8935021740786486E-8, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      
      double double1 = complex2.abs();
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex3 = complex0.ONE.cosh();
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex3.getReal(), 0.01);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex1.createComplex((-2666.487330888), 4.8935021740786486E-8);
      assertNotNull(complex4);
      assertEquals(4.8935021740786486E-8, complex1.getReal(), 0.01);
      assertEquals(4.8935021740786486E-8, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals((-2666.487330888), complex4.getReal(), 0.01);
      assertEquals(4.8935021740786486E-8, complex4.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = Complex.I;
      assertNotNull(complex5);
      assertEquals(1.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      
      boolean boolean1 = complex4.isInfinite();
      assertFalse(boolean1);
      assertEquals(4.8935021740786486E-8, complex1.getReal(), 0.01);
      assertEquals(4.8935021740786486E-8, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals((-2666.487330888), complex4.getReal(), 0.01);
      assertEquals(4.8935021740786486E-8, complex4.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(boolean1 == boolean0);
      
      double double2 = complex0.abs();
      assertEquals(Double.NaN, double2, 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.ONE.tan();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.557407724654902, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complex1.ZERO.reciprocal();
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.557407724654902, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      assertNotNull(complex3);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      
      Complex complex4 = complex0.asin();
      assertNotNull(complex4);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      
      Complex complex5 = complex4.I.multiply(complex0);
      assertNotNull(complex5);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      
      Complex complex6 = Complex.INF;
      assertNotNull(complex6);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      
      Complex complex7 = complex5.ZERO.pow(complex6);
      assertNotNull(complex7);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      
      Complex complex8 = Complex.valueOf(35.3987489, 6.283185307179586);
      assertNotNull(complex8);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      
      Complex complex9 = complex5.I.add(complex8);
      assertNotNull(complex9);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isNaN());
      assertEquals(7.283185307179586, complex9.getImaginary(), 0.01);
      assertEquals(35.3987489, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex8);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      
      complex9.ONE.hashCode();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isNaN());
      assertEquals(7.283185307179586, complex9.getImaginary(), 0.01);
      assertEquals(35.3987489, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex8);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      
      Complex complex10 = complex8.add(complex1);
      assertNotNull(complex10);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.557407724654902, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(36.9561566246549, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(6.283185307179586, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex2);
      
      Complex complex11 = complex3.sin();
      assertNotNull(complex11);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex4);
      
      Complex complex12 = complex9.sinh();
      assertNotNull(complex12);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isNaN());
      assertEquals(7.283185307179586, complex9.getImaginary(), 0.01);
      assertEquals(35.3987489, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(9.942382412285115E14, complex12.getImaginary(), 0.01);
      assertEquals(6.383930331723634E14, complex12.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex11);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      
      Complex complex13 = complex5.I.cosh();
      assertNotNull(complex13);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.5403023058681398, complex13.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex10);
      
      boolean boolean0 = complex0.equals(complex11);
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex13);
      
      Complex complex14 = complex12.sinh();
      assertNotNull(complex14);
      assertTrue(complex14.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex14.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isNaN());
      assertEquals(7.283185307179586, complex9.getImaginary(), 0.01);
      assertEquals(35.3987489, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(9.942382412285115E14, complex12.getImaginary(), 0.01);
      assertEquals(6.383930331723634E14, complex12.getReal(), 0.01);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex4);
      
      Complex complex15 = complex14.INF.cos();
      assertNotNull(complex15);
      assertTrue(complex14.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex14.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex15.isInfinite());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertTrue(complex15.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isNaN());
      assertEquals(7.283185307179586, complex9.getImaginary(), 0.01);
      assertEquals(35.3987489, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(9.942382412285115E14, complex12.getImaginary(), 0.01);
      assertEquals(6.383930331723634E14, complex12.getReal(), 0.01);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex4);
      
      String string0 = complex8.toString();
      assertEquals("(35.3987489, 6.283185307179586)", string0);
      assertNotNull(string0);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      
      Complex complex16 = complex9.reciprocal();
      assertNotNull(complex16);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex16.isNaN());
      assertEquals((-0.0055762153786933335), complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(0.02710229654710288, complex16.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isNaN());
      assertEquals(7.283185307179586, complex9.getImaginary(), 0.01);
      assertEquals(35.3987489, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex13);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      
      double double0 = complex16.getArgument();
      assertEquals((-0.20291533547513851), double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex16.isNaN());
      assertEquals((-0.0055762153786933335), complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(0.02710229654710288, complex16.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isNaN());
      assertEquals(7.283185307179586, complex9.getImaginary(), 0.01);
      assertEquals(35.3987489, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex13);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      
      Complex complex17 = complex6.ONE.reciprocal();
      assertNotNull(complex17);
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isNaN());
      assertFalse(complex17.isInfinite());
      assertEquals(1.0, complex17.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex10);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex5);
      
      Complex complex18 = complex16.NaN.cosh();
      assertNotNull(complex18);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex16.isNaN());
      assertEquals((-0.0055762153786933335), complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(0.02710229654710288, complex16.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertTrue(complex18.isNaN());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isNaN());
      assertEquals(7.283185307179586, complex9.getImaginary(), 0.01);
      assertEquals(35.3987489, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex13);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex13);
      assertSame(complex18, complex2);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex9);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      
      ComplexField complexField0 = complex10.getField();
      assertNotNull(complexField0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.557407724654902, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(36.9561566246549, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(6.283185307179586, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex14);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex17);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex16);
      assertNotSame(complex10, complex18);
      
      Complex complex19 = complex3.sqrt1z();
      assertNotNull(complex19);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertTrue(complex19.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex19.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex12);
      
      Complex complex20 = Complex.valueOf(6.283185307179586);
      assertNotNull(complex20);
      assertFalse(complex20.isNaN());
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertEquals(6.283185307179586, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex9);
      
      boolean boolean1 = complex9.isInfinite();
      assertFalse(boolean1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isNaN());
      assertEquals(7.283185307179586, complex9.getImaginary(), 0.01);
      assertEquals(35.3987489, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex20);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex20);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      
      Complex complex21 = complex7.sinh();
      assertNotNull(complex21);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertEquals(Double.NaN, complex21.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex21.getReal(), 0.01);
      assertTrue(complex21.isNaN());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex21);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex13);
      assertSame(complex21, complex2);
      assertSame(complex21, complex18);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex20);
      
      Complex complex22 = complex19.log();
      assertNotNull(complex22);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertTrue(complex19.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex19.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex22.isInfinite());
      assertTrue(complex22.isNaN());
      assertEquals(Double.NaN, complex22.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex22.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex22);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex22);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex12);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex16);
      assertSame(complex22, complex18);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex13);
      assertSame(complex22, complex2);
      assertSame(complex22, complex21);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex4);
      
      Complex complex23 = complex13.add(0.0);
      assertNotNull(complex23);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex23.getImaginary(), 0.01);
      assertFalse(complex23.isInfinite());
      assertFalse(complex23.isNaN());
      assertEquals(0.5403023058681398, complex23.getReal(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.5403023058681398, complex13.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex21);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex22);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex23);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex23);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex22);
      assertNotSame(complex5, complex4);
      assertNotSame(complex23, complex14);
      assertNotSame(complex23, complex2);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex21);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex10);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex6);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex1);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex18);
      assertNotSame(complex23, complex16);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex22);
      assertNotSame(complex23, complex13);
      assertNotSame(complex23, complex15);
      assertNotSame(complex23, complex17);
      assertNotSame(complex23, complex7);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex11);
      assertNotSame(complex23, complex9);
      assertNotSame(complex13, complex19);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex22);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex23);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex18);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex20);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex21);
      assertNotSame(complex13, complex10);
      
      Complex complex24 = Complex.NaN;
      assertNotNull(complex24);
      assertTrue(complex24.isNaN());
      assertFalse(complex24.isInfinite());
      assertEquals(Double.NaN, complex24.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex24.getReal(), 0.01);
      assertNotSame(complex24, complex23);
      assertNotSame(complex24, complex5);
      assertNotSame(complex24, complex13);
      assertSame(complex24, complex2);
      assertNotSame(complex24, complex19);
      assertNotSame(complex24, complex15);
      assertNotSame(complex24, complex17);
      assertSame(complex24, complex18);
      assertNotSame(complex24, complex11);
      assertNotSame(complex24, complex0);
      assertNotSame(complex24, complex10);
      assertNotSame(complex24, complex9);
      assertNotSame(complex24, complex14);
      assertSame(complex24, complex21);
      assertNotSame(complex24, complex1);
      assertNotSame(complex24, complex8);
      assertNotSame(complex24, complex16);
      assertNotSame(complex24, complex6);
      assertNotSame(complex24, complex3);
      assertNotSame(complex24, complex7);
      assertNotSame(complex24, complex4);
      assertNotSame(complex24, complex20);
      assertNotSame(complex24, complex12);
      assertSame(complex24, complex22);
      
      Complex complex25 = complex0.divide(complex24);
      assertNotNull(complex25);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex24.isNaN());
      assertFalse(complex24.isInfinite());
      assertEquals(Double.NaN, complex24.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex24.getReal(), 0.01);
      assertEquals(Double.NaN, complex25.getReal(), 0.01);
      assertFalse(complex25.isInfinite());
      assertEquals(Double.NaN, complex25.getImaginary(), 0.01);
      assertTrue(complex25.isNaN());
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex25);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex24, complex19);
      assertSame(complex24, complex18);
      assertNotSame(complex24, complex11);
      assertNotSame(complex24, complex0);
      assertNotSame(complex24, complex10);
      assertNotSame(complex24, complex14);
      assertSame(complex24, complex21);
      assertNotSame(complex24, complex1);
      assertNotSame(complex24, complex16);
      assertNotSame(complex24, complex4);
      assertNotSame(complex24, complex20);
      assertSame(complex24, complex22);
      assertNotSame(complex24, complex23);
      assertNotSame(complex24, complex5);
      assertNotSame(complex24, complex13);
      assertSame(complex24, complex2);
      assertNotSame(complex24, complex15);
      assertNotSame(complex24, complex17);
      assertNotSame(complex24, complex9);
      assertSame(complex24, complex25);
      assertNotSame(complex24, complex8);
      assertNotSame(complex24, complex6);
      assertNotSame(complex24, complex3);
      assertNotSame(complex24, complex7);
      assertNotSame(complex24, complex12);
      assertNotSame(complex25, complex16);
      assertSame(complex25, complex22);
      assertNotSame(complex25, complex14);
      assertSame(complex25, complex18);
      assertNotSame(complex25, complex11);
      assertNotSame(complex25, complex0);
      assertNotSame(complex25, complex7);
      assertNotSame(complex25, complex4);
      assertNotSame(complex25, complex1);
      assertNotSame(complex25, complex20);
      assertNotSame(complex25, complex13);
      assertNotSame(complex25, complex23);
      assertNotSame(complex25, complex9);
      assertNotSame(complex25, complex15);
      assertNotSame(complex25, complex17);
      assertNotSame(complex25, complex5);
      assertNotSame(complex25, complex8);
      assertSame(complex25, complex2);
      assertNotSame(complex25, complex6);
      assertSame(complex25, complex21);
      assertSame(complex25, complex24);
      assertNotSame(complex25, complex12);
      assertNotSame(complex25, complex19);
      assertNotSame(complex25, complex3);
      assertNotSame(complex25, complex10);
      
      Complex complex26 = complex12.divide(6.283185307179586);
      assertNotNull(complex26);
      assertEquals(1.5823793070250988E14, complex26.getImaginary(), 0.01);
      assertFalse(complex26.isInfinite());
      assertFalse(complex26.isNaN());
      assertEquals(1.0160340686480995E14, complex26.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(35.3987489, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(6.283185307179586, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isNaN());
      assertEquals(7.283185307179586, complex9.getImaginary(), 0.01);
      assertEquals(35.3987489, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(9.942382412285115E14, complex12.getImaginary(), 0.01);
      assertEquals(6.383930331723634E14, complex12.getReal(), 0.01);
      assertNotSame(complex26, complex13);
      assertNotSame(complex26, complex23);
      assertNotSame(complex26, complex9);
      assertNotSame(complex26, complex15);
      assertNotSame(complex26, complex17);
      assertNotSame(complex26, complex2);
      assertNotSame(complex26, complex5);
      assertNotSame(complex26, complex20);
      assertNotSame(complex26, complex12);
      assertNotSame(complex26, complex7);
      assertNotSame(complex26, complex25);
      assertNotSame(complex26, complex1);
      assertNotSame(complex26, complex0);
      assertNotSame(complex26, complex22);
      assertNotSame(complex26, complex16);
      assertNotSame(complex26, complex18);
      assertNotSame(complex26, complex21);
      assertNotSame(complex26, complex19);
      assertNotSame(complex26, complex10);
      assertNotSame(complex26, complex4);
      assertNotSame(complex26, complex24);
      assertNotSame(complex26, complex3);
      assertNotSame(complex26, complex11);
      assertNotSame(complex26, complex8);
      assertNotSame(complex26, complex6);
      assertNotSame(complex26, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex25);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex26);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex21);
      assertNotSame(complex4, complex22);
      assertNotSame(complex4, complex24);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex26);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex23);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex25);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex22);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex25);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex23);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex24);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex26);
      assertNotSame(complex8, complex21);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex22);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex26);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex24);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex23);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex25);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex20);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex22);
      assertNotSame(complex9, complex26);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex25);
      assertNotSame(complex9, complex20);
      assertNotSame(complex9, complex23);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex21);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex24);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex12, complex24);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex17);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex19);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex21);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex18);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex26);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex23);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex22);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex20);
      assertNotSame(complex12, complex25);
      
      Complex complex27 = complex21.multiply(complex7);
      assertNotNull(complex27);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex27.isInfinite());
      assertEquals(Double.NaN, complex27.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex27.getReal(), 0.01);
      assertTrue(complex27.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertEquals(Double.NaN, complex21.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex21.getReal(), 0.01);
      assertTrue(complex21.isNaN());
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex25);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex26);
      assertNotSame(complex0, complex27);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex27, complex4);
      assertSame(complex27, complex22);
      assertNotSame(complex27, complex10);
      assertNotSame(complex27, complex13);
      assertNotSame(complex27, complex14);
      assertSame(complex27, complex2);
      assertNotSame(complex27, complex11);
      assertSame(complex27, complex18);
      assertNotSame(complex27, complex12);
      assertNotSame(complex27, complex8);
      assertNotSame(complex27, complex6);
      assertSame(complex27, complex24);
      assertSame(complex27, complex21);
      assertNotSame(complex27, complex19);
      assertSame(complex27, complex25);
      assertNotSame(complex27, complex26);
      assertNotSame(complex27, complex3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      
      Complex complex1 = complex0.multiply((-2143512709));
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(2608.0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2608.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.ZERO.conjugate();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2608.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.I.pow(complex1);
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2608.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = Complex.valueOf((-1.0));
      assertNotNull(complex3);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.0), complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex3.ONE.sinh();
      assertNotNull(complex4);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.0), complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.1752011936438014, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex2.NaN.multiply((-1.0));
      assertNotNull(complex5);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2608.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex0.divide(164.74167);
      assertNotNull(complex6);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2608.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(15.830845954153554, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      
      String string0 = complex2.toString();
      assertEquals("(1.0, 0.0)", string0);
      assertNotNull(string0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2608.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      
      Complex complex7 = complex1.cos();
      assertNotNull(complex7);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2608.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertTrue(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      
      List<Complex> list0 = complex7.ZERO.nthRoot(1591);
      assertNotNull(list0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2608.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(1591, list0.size());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertTrue(list0.contains(complex1));
      assertFalse(list0.contains(complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertTrue(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      
      Complex complex8 = complex4.sqrt1z();
      assertNotNull(complex8);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.0), complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.1752011936438014, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.6173312283870106, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex4);
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex4));
      
      Complex complex9 = complex6.multiply(0.8333333333333334);
      assertNotNull(complex9);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2608.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(15.830845954153554, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(13.192371628461295, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      complex0.NaN.hashCode();
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.cosh();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2709.3892453748), (-2709.3892453748));
      assertNotNull(complex0);
      assertEquals((-2709.3892453748), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2709.3892453748), complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.multiply((-2709.3892453748));
      assertNotNull(complex1);
      assertEquals((-2709.3892453748), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2709.3892453748), complex0.getReal(), 0.01);
      assertEquals(7340790.082952628, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(7340790.082952628, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.tan();
      assertNotNull(complex2);
      assertEquals((-2709.3892453748), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2709.3892453748), complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.asin();
      assertNotNull(complex3);
      assertEquals((-2709.3892453748), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2709.3892453748), complex0.getReal(), 0.01);
      assertEquals((-8.944199288603464), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals((-0.7853981463693084), complex3.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = Complex.valueOf((-769.0296485149048), (-2709.3892453748));
      assertNotNull(complex4);
      assertEquals((-2709.3892453748), complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-769.0296485149048), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-1029.169652713));
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(3.2550979079261073, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.sqrt1z();
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1029.1691668843355, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex0.log();
      assertNotNull(complex3);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(6.9365075936854526, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(3.141592653589793, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = Complex.valueOf((-1029.169652713));
      assertNotNull(complex4);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      
      List<Complex> list0 = complex0.nthRoot(1021);
      assertNotNull(list0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1021, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertFalse(list0.contains(complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex5 = complex1.sin();
      assertNotNull(complex5);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(3.2550979079261073, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals((-0.11326168821320688), complex5.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      
      double double0 = complex5.INF.getArgument();
      assertEquals(0.7853981633974483, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(3.2550979079261073, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals((-0.11326168821320688), complex5.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      
      double double1 = complex2.getReal();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1029.1691668843355, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotEquals(double1, double0, 0.01);
      
      String string0 = complex1.toString();
      assertEquals("(3.2550979079261073, 0.0)", string0);
      assertNotNull(string0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(3.2550979079261073, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      
      Complex complex6 = complex2.reciprocal();
      assertNotNull(complex6);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1029.1691668843355, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals((-9.716575585210728E-4), complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = Complex.I;
      assertNotNull(complex1);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.INF.pow(complex1);
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.I.atan();
      assertNotNull(complex3);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = Complex.valueOf(0.0);
      assertNotNull(complex4);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex0.INF.sin();
      assertNotNull(complex5);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = complex4.INF.subtract((-524.482721536));
      assertNotNull(complex6);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      
      Complex complex7 = complex4.INF.divide(0.0);
      assertNotNull(complex7);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex7.equals((Object)complex2));
      assertTrue(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      
      Complex complex8 = complex1.ONE.exp();
      assertNotNull(complex8);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(2.718281828459045, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      
      Complex complex9 = complex8.cos();
      assertNotNull(complex9);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(2.718281828459045, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals((-0.9117339147869651), complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      
      String string0 = complex0.toString();
      assertEquals("(1.0, 0.0)", string0);
      assertNotNull(string0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      
      double double0 = complex2.getReal();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      
      boolean boolean0 = complex2.isNaN();
      assertTrue(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      
      Complex complex10 = complex3.add(Double.NaN);
      assertNotNull(complex10);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex6);
      assertSame(complex10, complex7);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertSame(complex10, complex3);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex8));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex8));
      
      Complex complex11 = complex0.multiply(complex4);
      assertNotNull(complex11);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex0);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
      
      double double1 = complex3.getArgument();
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex7);
      assertNotSame(complex3, complex11);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex7));
      assertTrue(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex8));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex11));
      assertEquals(double1, double0, 0.01);
      
      Complex complex12 = complex1.reciprocal();
      assertNotNull(complex12);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals((-1.0), complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex11));
      
      List<Complex> list0 = complex11.nthRoot(555);
      assertNotNull(list0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(555, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex0);
      assertTrue(list0.contains(complex4));
      assertFalse(list0.contains(complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex12));
      assertTrue(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      
      double double0 = 6.283185307179586;
      Complex complex1 = complex0.I.subtract(6.283185307179586);
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-6.283185307179586), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      double double1 = (-1427.73);
      Complex complex2 = Complex.valueOf(1165.9383752529, (-1427.73));
      assertNotNull(complex2);
      assertEquals(1165.9383752529, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1427.73), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.pow(6.07014616741277E-8);
      assertNotNull(complex3);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex3.ZERO.sin();
      assertNotNull(complex4);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex4.ZERO.add(complex1);
      assertNotNull(complex5);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals((-6.283185307179586), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(1.0, complex5.getImaginary(), 0.01);
      assertEquals((-6.283185307179586), complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertTrue(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex3.sin();
      assertNotNull(complex6);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex6);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      
      try { 
        complex4.I.nthRoot((-1791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,791
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-2310.06));
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.ONE.add((-2310.06));
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-2309.06), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ZERO.multiply((-1575));
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-2309.06), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex1.multiply((-2071.6));
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-2309.06), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(4783448.6959999995, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      complex1.I.hashCode();
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-2309.06), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      
      List<Complex> list0 = complex0.INF.nthRoot(37);
      assertNotNull(list0);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(list0.contains(complex0));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex4 = complex0.subtract(1.0);
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-2311.06), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex4.ZERO.atan();
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-2311.06), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      
      Complex complex6 = complex0.sqrt();
      assertNotNull(complex6);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(48.06308354652248, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      
      Complex complex7 = complex4.subtract(complex6);
      assertNotNull(complex7);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-2311.06), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(48.06308354652248, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals((-2311.06), complex7.getReal(), 0.01);
      assertEquals((-48.06308354652248), complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      
      Complex complex8 = complex7.negate();
      assertNotNull(complex8);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-2311.06), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(48.06308354652248, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals((-2311.06), complex7.getReal(), 0.01);
      assertEquals((-48.06308354652248), complex7.getImaginary(), 0.01);
      assertEquals(48.06308354652248, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(2311.06, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      
      Complex complex9 = complex6.NaN.multiply(1.0);
      assertNotNull(complex9);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(48.06308354652248, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex9);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      
      Complex complex10 = complex4.log();
      assertNotNull(complex10);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-2311.06), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(7.745461572724026, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(3.141592653589793, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      
      Complex complex11 = complex10.INF.reciprocal();
      assertNotNull(complex11);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-2311.06), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(7.745461572724026, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(3.141592653589793, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex7));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex10));
      assertTrue(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      
      Complex complex12 = complex11.I.sinh();
      assertNotNull(complex12);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-2311.06), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(7.745461572724026, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(3.141592653589793, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(0.8414709848078965, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex12);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex7));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex10));
      assertTrue(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex3));
      
      Complex complex13 = complex0.subtract(complex6);
      assertNotNull(complex13);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(48.06308354652248, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertEquals((-48.06308354652248), complex13.getImaginary(), 0.01);
      assertEquals((-2310.06), complex13.getReal(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      
      Complex complex14 = complex0.acos();
      assertNotNull(complex14);
      assertFalse(complex14.isNaN());
      assertEquals((-8.438175910916174), complex14.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      
      Complex complex15 = complex14.reciprocal();
      assertNotNull(complex15);
      assertFalse(complex14.isNaN());
      assertEquals((-8.438175910916174), complex14.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.03875045010110345, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.10408195798607361, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex14);
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex14));
      
      Complex complex16 = complex15.ZERO.sin();
      assertNotNull(complex16);
      assertFalse(complex14.isNaN());
      assertEquals((-8.438175910916174), complex14.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.03875045010110345, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.10408195798607361, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex13);
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex15));
      assertTrue(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex13));
      assertTrue(complex16.equals((Object)complex11));
      assertTrue(complex16.equals((Object)complex2));
      
      complex15.I.hashCode();
      assertFalse(complex14.isNaN());
      assertEquals((-8.438175910916174), complex14.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.03875045010110345, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.10408195798607361, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex14);
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex16));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex14));
      
      Complex complex17 = complex14.multiply((-774));
      assertNotNull(complex17);
      assertFalse(complex14.isNaN());
      assertEquals((-8.438175910916174), complex14.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-2431.5927138785), complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(6531.148155049119, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex17);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex9);
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex9));
      
      Complex complex18 = complex15.I.negate();
      assertNotNull(complex18);
      assertFalse(complex14.isNaN());
      assertEquals((-8.438175910916174), complex14.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.03875045010110345, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.10408195798607361, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(-0.0, complex18.getReal(), 0.01);
      assertEquals((-1.0), complex18.getImaginary(), 0.01);
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex18);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex17);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex18);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex14);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex9);
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex17));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex16));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex17));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex9));
      
      Complex complex19 = complex5.acos();
      assertNotNull(complex19);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-2311.06), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex10);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex18);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex10);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex18));
      assertTrue(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex12));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex10));
      
      Complex complex20 = (Complex)complex19.ZERO.readResolve();
      assertNotNull(complex20);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-2311.06), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(0.0, complex20.getReal(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex20);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex10);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex18);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex13);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex10);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex19));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex19));
      assertTrue(complex20.equals((Object)complex16));
      assertTrue(complex20.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex3));
      assertTrue(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex13));
      assertTrue(complex20.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex18));
      assertTrue(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex19));
      assertTrue(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex12));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex10));
      
      Complex complex21 = complex0.sinh();
      assertNotNull(complex21);
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertEquals(Double.NaN, complex21.getImaginary(), 0.01);
      assertTrue(complex21.isNaN());
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex20);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex2);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex19));
      assertTrue(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex2));
      
      String string0 = complex16.toString();
      assertEquals("(0.0, 0.0)", string0);
      assertNotNull(string0);
      assertFalse(complex14.isNaN());
      assertEquals((-8.438175910916174), complex14.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-2310.06), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.03875045010110345, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.10408195798607361, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex20);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex21);
      assertNotSame(complex14, complex19);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex18);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex20);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex18);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex19);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex20);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex21);
      assertNotSame(complex15, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex20);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex19);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex21);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex13);
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex20));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex21));
      assertFalse(complex14.equals((Object)complex19));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex18));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex17));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex18));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex19));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex20));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex16));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex17));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex21));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex19));
      assertTrue(complex16.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex20));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex18));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex21));
      assertFalse(complex16.equals((Object)complex13));
      assertTrue(complex16.equals((Object)complex11));
      assertTrue(complex16.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.divide(0.0);
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.sin();
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = Complex.ZERO;
      assertNotNull(complex1);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.NaN.subtract(complex1);
      assertNotNull(complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = Complex.I;
      assertNotNull(complex3);
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.INF.acos();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.exp();
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = Complex.valueOf(20.0);
      assertNotNull(complex3);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex2.divide(complex3);
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex4.cos();
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.9572238110951454, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex3.cos();
      assertNotNull(complex6);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.40808206181339196, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertFalse(complex3.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      
      Complex complex7 = complex5.negate();
      assertNotNull(complex7);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.9572238110951454, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals((-0.9572238110951454), complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = complex4.divide(complex3);
      assertNotNull(complex8);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1212912.9885244756, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      
      complex6.INF.hashCode();
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.40808206181339196, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex8));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      
      Complex complex9 = complex5.NaN.subtract(complex8);
      assertNotNull(complex9);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.9572238110951454, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1212912.9885244756, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertTrue(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex9);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex2);
      assertSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex8));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      
      Complex complex10 = complex4.sqrt();
      assertNotNull(complex10);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(4925.267482126175, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex9);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex8);
      
      complex7.hashCode();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.9572238110951454, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals((-0.9572238110951454), complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex9);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex9);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex0);
      
      Complex complex11 = complex4.atan();
      assertNotNull(complex11);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.5707962855718243, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex8);
      
      Complex complex12 = complex3.subtract(2148.401350124144);
      assertNotNull(complex12);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals((-2128.401350124144), complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex1);
      
      Complex complex13 = complex6.divide(20.0);
      assertNotNull(complex13);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.40808206181339196, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.020404103090669597, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex10);
      
      Complex complex14 = complex13.multiply(0.0);
      assertNotNull(complex14);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.40808206181339196, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.020404103090669597, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex8);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex10);
      
      Complex complex15 = Complex.valueOf(68.0008579291, 0.0);
      assertNotNull(complex15);
      assertFalse(complex15.isInfinite());
      assertEquals(68.0008579291, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      
      Complex complex16 = complex14.NaN.add(complex15);
      assertNotNull(complex16);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(68.0008579291, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertTrue(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.40808206181339196, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.020404103090669597, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex16);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex0);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex15);
      assertSame(complex16, complex9);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex8);
      assertSame(complex16, complex1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex11);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex10);
      
      Complex complex17 = complex14.tan();
      assertNotNull(complex17);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.40808206181339196, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.020404103090669597, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex16);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex16);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex10);
      
      double double0 = complex9.getReal();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.9572238110951454, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1212912.9885244756, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertTrue(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex16);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex11);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertSame(complex9, complex1);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex2);
      assertSame(complex9, complex16);
      assertNotSame(complex9, complex3);
      
      Complex complex18 = complex9.multiply(complex11);
      assertNotNull(complex18);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertTrue(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertEquals(0.9572238110951454, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1212912.9885244756, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertTrue(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(1.5707962855718243, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex16);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex0);
      assertSame(complex18, complex9);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex15);
      assertSame(complex18, complex16);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex8);
      assertSame(complex18, complex1);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex12);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex11);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertSame(complex9, complex1);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex2);
      assertSame(complex9, complex16);
      assertNotSame(complex9, complex3);
      assertSame(complex9, complex18);
      assertNotSame(complex11, complex17);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex18);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex13);
      
      Complex complex19 = complex4.reciprocal();
      assertNotNull(complex19);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(4.122307244877116E-8, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex16);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex7);
      
      Complex complex20 = complex7.add(2135.5);
      assertNotNull(complex20);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.9572238110951454, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex20.isInfinite());
      assertFalse(complex20.isNaN());
      assertEquals(2134.542776188905, complex20.getReal(), 0.01);
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      assertEquals((-0.9572238110951454), complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex16);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex11);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex12);
      
      double double1 = complex7.abs();
      assertEquals(0.9572238110951454, double1, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.9572238110951454, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals((-0.9572238110951454), complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex16);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex11);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex12);
      
      Complex complex21 = complex17.divide(0.0);
      assertNotNull(complex21);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.40808206181339196, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(Double.NaN, complex21.getImaginary(), 0.01);
      assertFalse(complex21.isInfinite());
      assertTrue(complex21.isNaN());
      assertEquals(Double.NaN, complex21.getReal(), 0.01);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.020404103090669597, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex20);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex21);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex19);
      assertNotSame(complex14, complex18);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex19);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex21);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex20);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex16);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertSame(complex21, complex18);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex10);
      assertSame(complex21, complex9);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex5);
      assertSame(complex21, complex1);
      assertSame(complex21, complex16);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex11);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex18);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex19);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex21);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex20);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex10);
      
      Complex complex22 = complex13.divide(complex19);
      assertNotNull(complex22);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(4.851651954097903E8, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(2.4258259770489514E7, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(4.122307244877116E-8, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.40808206181339196, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex22.isInfinite());
      assertFalse(complex22.isNaN());
      assertEquals(494968.033157311, complex22.getReal(), 0.01);
      assertEquals(0.0, complex22.getImaginary(), 0.01);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.020404103090669597, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex21);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex22);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex16);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex22);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex21);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex22);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex22);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex21);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex18);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex19);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex22);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex21);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex20);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex10);
      
      complex17.hashCode();
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(20.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.40808206181339196, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.020404103090669597, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex20);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex21);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex22);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex19);
      assertNotSame(complex14, complex18);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex19);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex21);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex22);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex20);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex16);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex22);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex18);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex19);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex22);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex21);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex20);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex10);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = (-994.5);
      Complex complex0 = new Complex((-994.5));
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.NaN.sqrt();
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.I.cosh();
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.INF.divide((-994.5));
      assertNotNull(complex3);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      ComplexField complexField0 = complex3.I.getField();
      assertNotNull(complexField0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      double double1 = 1.285159987981792E19;
      Complex complex4 = complex1.I.multiply(1.285159987981792E19);
      assertNotNull(complex4);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.285159987981792E19, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex4.I.pow(complex2);
      assertNotNull(complex5);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.285159987981792E19, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.6609555923234067, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.750425016225082, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = Complex.valueOf(0.0);
      assertNotNull(complex6);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      
      Complex complex7 = complex6.ZERO.divide(complex5);
      assertNotNull(complex7);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.285159987981792E19, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.6609555923234067, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.750425016225082, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertTrue(complex7.equals((Object)complex6));
      
      Complex complex8 = complex4.multiply(complex1);
      assertNotNull(complex8);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.285159987981792E19, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      
      double double2 = complex0.getReal();
      assertEquals((-994.5), double2, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      Complex complex9 = complex0.I.add(complex4);
      assertNotNull(complex9);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.285159987981792E19, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(1.285159987981792E19, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex4));
      
      String string0 = complex9.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      assertNotNull(string0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.285159987981792E19, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(1.285159987981792E19, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex4));
      
      boolean boolean0 = complex2.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(153.868393592, 153.868393592);
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(153.868393592, complex0.getReal(), 0.01);
      assertEquals(153.868393592, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.I.negate();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(153.868393592, complex0.getReal(), 0.01);
      assertEquals(153.868393592, complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ZERO.reciprocal();
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(153.868393592, complex0.getReal(), 0.01);
      assertEquals(153.868393592, complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex1.INF.divide(153.868393592);
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(153.868393592, complex0.getReal(), 0.01);
      assertEquals(153.868393592, complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex3.isNaN());
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex0.cos();
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(153.868393592, complex0.getReal(), 0.01);
      assertEquals(153.868393592, complex0.getImaginary(), 0.01);
      assertEquals((-2.3211970399064217E65), complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals((-3.327439195199163E66), complex4.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex0.sinh();
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(153.868393592, complex0.getReal(), 0.01);
      assertEquals(153.868393592, complex0.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals((-3.327439195199163E66), complex5.getReal(), 0.01);
      assertEquals(2.3211970399064217E65, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex4.reciprocal();
      assertNotNull(complex6);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(153.868393592, complex0.getReal(), 0.01);
      assertEquals(153.868393592, complex0.getImaginary(), 0.01);
      assertEquals((-2.3211970399064217E65), complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals((-3.327439195199163E66), complex4.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-2.9907600219020435E-67), complex6.getReal(), 0.01);
      assertEquals(2.086332131906611E-68, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      
      Complex complex7 = complex3.multiply(153.868393592);
      assertNotNull(complex7);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(153.868393592, complex0.getReal(), 0.01);
      assertEquals(153.868393592, complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex3.isNaN());
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertTrue(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      
      Complex complex8 = complex1.multiply(175);
      assertNotNull(complex8);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(153.868393592, complex0.getReal(), 0.01);
      assertEquals(153.868393592, complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertEquals((-175.0), complex8.getImaginary(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.atan();
      assertNotNull(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.subtract((-2709.3892453748));
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2710.3892453748, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.ZERO.sqrt1z();
      assertNotNull(complex1);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ONE.pow(complex0);
      assertNotNull(complex2);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex0.atan();
      assertNotNull(complex3);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex3.ONE.multiply(Double.POSITIVE_INFINITY);
      assertNotNull(complex4);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      ComplexField complexField0 = complex4.getField();
      assertNotNull(complexField0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex3.INF.sqrt();
      assertNotNull(complex5);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex3.INF.acos();
      assertNotNull(complex6);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex6, complex0);
      assertSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      
      Complex complex7 = complex5.I.acos();
      assertNotNull(complex7);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex6));
      assertTrue(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = Complex.valueOf(102.4301526);
      assertNotNull(complex8);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(102.4301526, complex8.getReal(), 0.01);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      
      Complex complex9 = complex7.atan();
      assertNotNull(complex9);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-0.22101690190093917), complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(1.095546696303347, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex8);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex6));
      assertTrue(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      
      Complex complex10 = complex7.ONE.subtract(0.28670501708984375);
      assertNotNull(complex10);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.7132949829101562, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex4);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex6));
      assertTrue(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex4));
      
      Complex complex11 = complex3.NaN.asin();
      assertNotNull(complex11);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex11);
      assertSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertSame(complex3, complex11);
      assertNotSame(complex3, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex7);
      assertSame(complex11, complex6);
      assertSame(complex11, complex3);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      
      Complex complex12 = complex11.negate();
      assertNotNull(complex12);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertTrue(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex11);
      assertSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertSame(complex3, complex11);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex5);
      assertSame(complex11, complex12);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex7);
      assertSame(complex11, complex6);
      assertSame(complex11, complex3);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex8);
      assertSame(complex12, complex3);
      assertNotSame(complex12, complex0);
      assertSame(complex12, complex6);
      assertSame(complex12, complex11);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex5);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex1));
      assertTrue(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex10));
      
      Complex complex13 = complex0.I.reciprocal();
      assertNotNull(complex13);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertEquals((-1.0), complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex0);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex0));
      
      complex0.ZERO.hashCode();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex11));
      
      Complex complex14 = complex6.ONE.createComplex((-461.693823951), 1.0035391101975138E76);
      assertNotNull(complex14);
      assertFalse(complex14.isInfinite());
      assertEquals(1.0035391101975138E76, complex14.getImaginary(), 0.01);
      assertEquals((-461.693823951), complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex11);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex14);
      assertSame(complex3, complex6);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex6, complex0);
      assertSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertSame(complex6, complex12);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex7));
      
      Complex complex15 = complex14.I.tan();
      assertNotNull(complex15);
      assertFalse(complex14.isInfinite());
      assertEquals(1.0035391101975138E76, complex14.getImaginary(), 0.01);
      assertEquals((-461.693823951), complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.7615941559557649, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex0);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex11);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex14);
      assertSame(complex3, complex6);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex6, complex0);
      assertSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertSame(complex6, complex12);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex14));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex7));
      
      ComplexField complexField1 = complex4.ONE.getField();
      assertNotNull(complexField1);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertSame(complexField1, complexField0);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex11);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex14);
      assertSame(complex3, complex6);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex14);
      assertSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex14));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex11));
      
      Complex complex16 = complex14.I.tanh();
      assertNotNull(complex16);
      assertFalse(complex14.isInfinite());
      assertEquals(1.0035391101975138E76, complex14.getImaginary(), 0.01);
      assertEquals((-461.693823951), complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertEquals(1.557407724654902, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex1);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex11);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex14);
      assertSame(complex3, complex6);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex6, complex0);
      assertSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex16);
      assertSame(complex6, complex12);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex14));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex7));
      
      Complex complex17 = (Complex)complex0.readResolve();
      assertNotNull(complex17);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex17.getImaginary(), 0.01);
      assertTrue(complex17.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex12);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex11));
      assertTrue(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex5));
      assertTrue(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex12));
      
      Complex complex18 = complex5.divide(684.0602338);
      assertNotNull(complex18);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertTrue(complex18.isNaN());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertSame(complex3, complex11);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex14);
      assertSame(complex3, complex6);
      assertSame(complex3, complex18);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex10);
      assertSame(complex18, complex6);
      assertSame(complex18, complex11);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex8);
      assertSame(complex18, complex3);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex2);
      assertSame(complex18, complex12);
      assertNotSame(complex18, complex0);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex16));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex8));
      assertTrue(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex1));
      assertTrue(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex16));
      assertTrue(complex5.equals((Object)complex12));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex14));
      assertTrue(complex5.equals((Object)complex6));
      assertTrue(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex9));
      assertTrue(complex5.equals((Object)complex11));
      
      Complex complex19 = Complex.valueOf((-2403.0));
      assertNotNull(complex19);
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertFalse(complex19.isInfinite());
      assertEquals((-2403.0), complex19.getReal(), 0.01);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex5);
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex5));
      
      Complex complex20 = complex3.sinh();
      assertNotNull(complex20);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertTrue(complex20.isNaN());
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex19);
      assertSame(complex3, complex11);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex14);
      assertSame(complex3, complex6);
      assertSame(complex3, complex18);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex20);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex8);
      assertSame(complex20, complex18);
      assertNotSame(complex20, complex10);
      assertSame(complex20, complex12);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex17);
      assertSame(complex20, complex6);
      assertSame(complex20, complex11);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex0);
      assertSame(complex20, complex3);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex2);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex16));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertTrue(complex20.equals((Object)complex2));
      assertFalse(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex1));
      assertTrue(complex20.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex19));
      assertFalse(complex20.equals((Object)complex9));
      
      Complex complex21 = complex4.negate();
      assertNotNull(complex21);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex21.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex21.getImaginary(), 0.01);
      assertTrue(complex21.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex21.getReal(), 0.01);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex19);
      assertSame(complex3, complex11);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex14);
      assertSame(complex3, complex6);
      assertSame(complex3, complex18);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex20);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex21);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex14);
      assertSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex2);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex16));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex20));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex19));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex2));
      
      Complex complex22 = complex19.acos();
      assertNotNull(complex22);
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertFalse(complex19.isInfinite());
      assertEquals((-2403.0), complex19.getReal(), 0.01);
      assertFalse(complex22.isInfinite());
      assertFalse(complex22.isNaN());
      assertEquals((-8.477620373001937), complex22.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex22.getReal(), 0.01);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex22);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex5);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex12);
      assertFalse(complex19.equals((Object)complex20));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex21));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex4));
      assertFalse(complex22.equals((Object)complex2));
      assertFalse(complex22.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex13));
      assertFalse(complex22.equals((Object)complex21));
      assertFalse(complex22.equals((Object)complex0));
      assertFalse(complex22.equals((Object)complex11));
      assertFalse(complex22.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex10));
      assertFalse(complex22.equals((Object)complex3));
      assertFalse(complex22.equals((Object)complex6));
      assertFalse(complex22.equals((Object)complex19));
      assertFalse(complex22.equals((Object)complex18));
      assertFalse(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex15));
      assertFalse(complex22.equals((Object)complex14));
      assertFalse(complex22.equals((Object)complex16));
      assertFalse(complex22.equals((Object)complex17));
      assertFalse(complex22.equals((Object)complex20));
      assertFalse(complex22.equals((Object)complex1));
      assertFalse(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex12));
      
      Complex complex23 = complex14.exp();
      assertNotNull(complex23);
      assertFalse(complex14.isInfinite());
      assertEquals(1.0035391101975138E76, complex14.getImaginary(), 0.01);
      assertEquals((-461.693823951), complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals((-2.1800215182680256E-201), complex23.getImaginary(), 0.01);
      assertFalse(complex23.isInfinite());
      assertFalse(complex23.isNaN());
      assertEquals((-2.1794608298326106E-201), complex23.getReal(), 0.01);
      assertNotSame(complex14, complex19);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex18);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex20);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex23);
      assertNotSame(complex14, complex22);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex21);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex5);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex22);
      assertSame(complex3, complex11);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex14);
      assertSame(complex3, complex6);
      assertSame(complex3, complex18);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex20);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex23);
      assertNotSame(complex6, complex0);
      assertSame(complex6, complex3);
      assertSame(complex6, complex18);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex20);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex23);
      assertNotSame(complex6, complex16);
      assertSame(complex6, complex12);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex2);
      assertNotSame(complex23, complex16);
      assertNotSame(complex23, complex1);
      assertNotSame(complex23, complex15);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex21);
      assertNotSame(complex23, complex6);
      assertNotSame(complex23, complex10);
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex13);
      assertNotSame(complex23, complex7);
      assertNotSame(complex23, complex18);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex17);
      assertNotSame(complex23, complex14);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex11);
      assertNotSame(complex23, complex2);
      assertNotSame(complex23, complex22);
      assertFalse(complex14.equals((Object)complex19));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex18));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex20));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex22));
      assertFalse(complex14.equals((Object)complex17));
      assertFalse(complex14.equals((Object)complex21));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex22));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex21));
      assertFalse(complex3.equals((Object)complex16));
      assertTrue(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex22));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex19));
      assertTrue(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex21));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex22));
      assertFalse(complex23.equals((Object)complex16));
      assertFalse(complex23.equals((Object)complex1));
      assertFalse(complex23.equals((Object)complex15));
      assertFalse(complex23.equals((Object)complex19));
      assertFalse(complex23.equals((Object)complex5));
      assertFalse(complex23.equals((Object)complex21));
      assertFalse(complex23.equals((Object)complex6));
      assertFalse(complex23.equals((Object)complex10));
      assertFalse(complex23.equals((Object)complex9));
      assertFalse(complex23.equals((Object)complex13));
      assertFalse(complex23.equals((Object)complex7));
      assertFalse(complex23.equals((Object)complex18));
      assertFalse(complex23.equals((Object)complex4));
      assertFalse(complex23.equals((Object)complex12));
      assertFalse(complex23.equals((Object)complex8));
      assertFalse(complex23.equals((Object)complex20));
      assertFalse(complex23.equals((Object)complex0));
      assertFalse(complex23.equals((Object)complex17));
      assertFalse(complex23.equals((Object)complex14));
      assertFalse(complex23.equals((Object)complex3));
      assertFalse(complex23.equals((Object)complex11));
      assertFalse(complex23.equals((Object)complex2));
      assertFalse(complex23.equals((Object)complex22));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.I.subtract(complex0);
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.ZERO.cosh();
      assertNotNull(complex3);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      ComplexField complexField0 = complex0.I.getField();
      assertNotNull(complexField0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex4 = complex0.subtract((-3813.2674));
      assertNotNull(complex4);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      complex4.hashCode();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex4.I.acos();
      assertNotNull(complex5);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      
      double double0 = complex5.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex4.sqrt1z();
      assertNotNull(complex6);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      
      boolean boolean0 = complex4.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      
      Complex complex7 = complex4.INF.add((-3813.2674));
      assertNotNull(complex7);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      
      Complex complex8 = complex4.exp();
      assertNotNull(complex8);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      
      Complex complex9 = complex6.multiply(complex1);
      assertNotNull(complex9);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(5989.866219042105, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      
      Complex complex10 = complex6.acos();
      assertNotNull(complex10);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-8.939388849273602), complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(1.5707963267948966, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex4));
      
      Complex complex11 = complex10.NaN.divide((-3813.2674));
      assertNotNull(complex11);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-8.939388849273602), complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(1.5707963267948966, complex10.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex10));
      assertTrue(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex4));
      
      Complex complex12 = Complex.valueOf(0.0, (-697.4866947533317));
      assertNotNull(complex12);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals((-697.4866947533317), complex12.getImaginary(), 0.01);
      assertFalse(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      
      Complex complex13 = complex10.ONE.reciprocal();
      assertNotNull(complex13);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-8.939388849273602), complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(1.5707963267948966, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex12);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex2);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex12);
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex9));
      assertTrue(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex12));
      
      boolean boolean1 = complex10.equals(complex4);
      assertFalse(boolean1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3813.26726887885, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-8.939388849273602), complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(1.5707963267948966, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex12);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex2);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex12);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(boolean1 == boolean0);
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex12));
      
      double double1 = complex7.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex12);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex10));
      
      Complex complex14 = complex1.I.createComplex((-1.4854841678687828E-8), 1.4635417461395264);
      assertNotNull(complex14);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(1.4635417461395264, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals((-1.4854841678687828E-8), complex14.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex4);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex13);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex13));
      
      Complex complex15 = complex0.divide(complex7);
      assertNotNull(complex15);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex15.isInfinite());
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(3813.2674, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex7);
      assertSame(complex15, complex0);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex12);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex10));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = Complex.NaN;
      assertNotNull(complex1);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.divide(complex1);
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.divide((double) 7);
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.14285714285714285, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.subtract(Double.NaN);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.14285714285714285, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.createComplex(2413.67071204543, (-936.7488559));
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.14285714285714285, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(2413.67071204543, complex3.getReal(), 0.01);
      assertEquals((-936.7488559), complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      String string0 = complex0.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      assertNotNull(string0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.multiply((-1861));
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1861.0), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ZERO.sin();
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1861.0), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = Complex.valueOf((-3433.72075891));
      assertNotNull(complex3);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex0.subtract(complex3);
      assertNotNull(complex4);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(3434.72075891, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex4.ONE.cosh();
      assertNotNull(complex5);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(3434.72075891, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = complex5.ONE.createComplex((-1861), (-3433.72075891));
      assertNotNull(complex6);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(3434.72075891, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals((-3433.72075891), complex6.getImaginary(), 0.01);
      assertEquals((-1861.0), complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      
      Complex complex7 = (Complex)complex3.readResolve();
      assertNotNull(complex7);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals((-3433.72075891), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertTrue(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      
      double double0 = complex3.getArgument();
      assertEquals(3.141592653589793, double0, 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertTrue(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex8 = complex3.pow((-4684.095));
      assertNotNull(complex8);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertTrue(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      
      Complex complex9 = complex3.INF.sin();
      assertNotNull(complex9);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertTrue(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      
      boolean boolean0 = complex3.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex3.equals((Object)complex9));
      assertTrue(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      String string1 = complex8.toString();
      assertEquals("(0.0, -0.0)", string1);
      assertNotNull(string1);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertFalse(complex3.equals((Object)complex9));
      assertTrue(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(string1.equals((Object)string0));
      
      Complex complex10 = complex2.add(0.0);
      assertNotNull(complex10);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1861.0), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex1));
      
      Complex complex11 = complex10.add(complex8);
      assertNotNull(complex11);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1861.0), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-3433.72075891), complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex7);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex9));
      assertTrue(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex9));
      assertTrue(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex5));
      assertTrue(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex6));
      
      boolean boolean1 = complex1.isInfinite();
      assertFalse(boolean1);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1861.0), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertTrue(boolean1 == boolean0);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      
      String string2 = complex10.toString();
      assertEquals("(0.0, 0.0)", string2);
      assertNotNull(string2);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1861.0), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertTrue(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(23.0, 23.0);
      assertNotNull(complex0);
      assertEquals(23.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(23.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertEquals(23.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(23.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.I.sin();
      assertNotNull(complex1);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.I.exp();
      assertNotNull(complex2);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.ZERO.tanh();
      assertNotNull(complex3);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex3.ONE.sin();
      assertNotNull(complex4);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.8414709848078965, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex2.ZERO.cos();
      assertNotNull(complex5);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      
      double double0 = complex5.getArgument();
      assertEquals(-0.0, double0, 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex0.NaN.multiply(complex5);
      assertNotNull(complex6);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      
      double double1 = complex6.ZERO.abs();
      assertEquals(0.0, double1, 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertEquals(double1, double0, 0.01);
      
      String string0 = complex6.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      assertNotNull(string0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = Complex.valueOf(1021.0, (-1.0));
      assertNotNull(complex7);
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(1021.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = complex7.I.conjugate();
      assertNotNull(complex8);
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(1021.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals((-1.0), complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      
      Complex complex9 = complex0.pow(1185.9710577397825);
      assertNotNull(complex9);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex8));
      
      Complex complex10 = complex0.multiply(1185.9710577397825);
      assertNotNull(complex10);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex10.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex10.getImaginary(), 0.01);
      assertTrue(complex10.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex2);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex2));
      
      Complex complex11 = complex1.divide(complex7);
      assertNotNull(complex11);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(1021.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex11.isInfinite());
      assertEquals(0.00115102846845227, complex11.getImaginary(), 0.01);
      assertEquals((-1.1273540337436532E-6), complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex11);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex6);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex6));
      
      Complex complex12 = complex0.tanh();
      assertNotNull(complex12);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex2);
      assertSame(complex12, complex6);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      assertTrue(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex3));
      
      Complex complex13 = complex12.I.cos();
      assertNotNull(complex13);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex2);
      assertSame(complex12, complex6);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      assertTrue(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex3));
      
      Complex complex14 = complex13.ONE.multiply(complex3);
      assertNotNull(complex14);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex0);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex2);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex2);
      assertSame(complex12, complex6);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex11));
      assertTrue(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex13));
      assertTrue(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex3));
      
      Complex complex15 = complex1.sqrt();
      assertNotNull(complex15);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertFalse(complex15.isNaN());
      assertEquals(0.7665511051599239, complex15.getImaginary(), 0.01);
      assertEquals(0.7665511051599239, complex15.getReal(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex12);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex12));
      
      Complex complex16 = complex15.I.subtract((-1.0));
      assertNotNull(complex16);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertFalse(complex15.isNaN());
      assertEquals(0.7665511051599239, complex15.getImaginary(), 0.01);
      assertEquals(0.7665511051599239, complex15.getReal(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertEquals(1.0, complex16.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex12);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex11);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex11));
      
      Complex complex17 = complex9.multiply(-0.0);
      assertNotNull(complex17);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex17.isNaN());
      assertFalse(complex17.isInfinite());
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertSame(complex17, complex12);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex14);
      assertSame(complex17, complex6);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex13));
      assertTrue(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex8));
      assertTrue(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex16));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex7));
      
      Complex complex18 = complex9.asin();
      assertNotNull(complex18);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex1);
      assertSame(complex18, complex12);
      assertSame(complex18, complex6);
      assertNotSame(complex18, complex16);
      assertSame(complex18, complex17);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex5);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex13));
      assertTrue(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex17));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex8));
      assertTrue(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex16));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex7));
      
      Complex complex19 = complex18.ONE.multiply(complex7);
      assertNotNull(complex19);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals(1021.0, complex19.getReal(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals((-1.0), complex19.getImaginary(), 0.01);
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(1021.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex19);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex1);
      assertSame(complex18, complex12);
      assertSame(complex18, complex6);
      assertNotSame(complex18, complex16);
      assertSame(complex18, complex17);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex5);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex13));
      assertTrue(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex5));
      assertTrue(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex8));
      assertTrue(complex9.equals((Object)complex17));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex6));
      assertTrue(complex9.equals((Object)complex18));
      assertFalse(complex9.equals((Object)complex8));
      assertTrue(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex16));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex7));
      
      Complex complex20 = complex11.NaN.add(complex0);
      assertNotNull(complex20);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertTrue(complex20.isNaN());
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(1021.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex11.isInfinite());
      assertEquals(0.00115102846845227, complex11.getImaginary(), 0.01);
      assertEquals((-1.1273540337436532E-6), complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertSame(complex20, complex6);
      assertSame(complex20, complex12);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex13);
      assertSame(complex20, complex18);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex10);
      assertSame(complex20, complex17);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex11);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex17);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex19);
      assertNotSame(complex11, complex18);
      assertNotSame(complex11, complex20);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex6);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertTrue(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex5));
      
      ComplexField complexField0 = complex7.getField();
      assertNotNull(complexField0);
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(1021.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      
      Complex complex21 = complex11.divide(complex9);
      assertNotNull(complex21);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex21.getImaginary(), 0.01);
      assertFalse(complex21.isInfinite());
      assertEquals(Double.NaN, complex21.getReal(), 0.01);
      assertTrue(complex21.isNaN());
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(1021.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertFalse(complex11.isInfinite());
      assertEquals(0.00115102846845227, complex11.getImaginary(), 0.01);
      assertEquals((-1.1273540337436532E-6), complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertSame(complex21, complex6);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex7);
      assertSame(complex21, complex20);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex15);
      assertSame(complex21, complex17);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex8);
      assertSame(complex21, complex18);
      assertNotSame(complex21, complex1);
      assertSame(complex21, complex12);
      assertNotSame(complex21, complex14);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex20);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex21);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex17);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex21);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex19);
      assertNotSame(complex11, complex18);
      assertNotSame(complex11, complex20);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex6);
      
      double double2 = complex12.getImaginary();
      assertEquals(Double.NaN, double2, 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertSame(complex12, complex17);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex19);
      assertSame(complex12, complex18);
      assertSame(complex12, complex20);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex2);
      assertSame(complex12, complex6);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertSame(complex12, complex21);
      assertNotSame(complex12, complex16);
      
      Complex complex22 = complex0.divide(complex2);
      assertNotNull(complex22);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex22.isInfinite());
      assertEquals(Double.NaN, complex22.getImaginary(), 0.01);
      assertTrue(complex22.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex22.getReal(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex21);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex22);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex1);
      
      Complex complex23 = complex16.divide(complex15);
      assertNotNull(complex23);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertFalse(complex15.isNaN());
      assertEquals(0.7665511051599239, complex15.getImaginary(), 0.01);
      assertEquals(0.7665511051599239, complex15.getReal(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertEquals(1.0, complex16.getImaginary(), 0.01);
      assertFalse(complex23.isInfinite());
      assertEquals(1.3045444632049317, complex23.getReal(), 0.01);
      assertFalse(complex23.isNaN());
      assertEquals(0.0, complex23.getImaginary(), 0.01);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex23);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex22);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex23);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex21);
      assertNotSame(complex15, complex19);
      assertNotSame(complex15, complex20);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex18);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex12);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex22);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex21);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex23);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex20);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex19);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex1);
      assertNotSame(complex23, complex11);
      assertNotSame(complex23, complex16);
      assertNotSame(complex23, complex21);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex10);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex22);
      assertNotSame(complex23, complex15);
      assertNotSame(complex23, complex17);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex7);
      assertNotSame(complex23, complex2);
      assertNotSame(complex23, complex14);
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex6);
      assertNotSame(complex23, complex13);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex18);
      
      Complex complex24 = complex9.multiply(0);
      assertNotNull(complex24);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertFalse(complex24.isInfinite());
      assertEquals(Double.NaN, complex24.getImaginary(), 0.01);
      assertTrue(complex24.isNaN());
      assertEquals(Double.NaN, complex24.getReal(), 0.01);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex24);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex23);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex20);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex21);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex22);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertSame(complex24, complex6);
      assertSame(complex24, complex18);
      assertSame(complex24, complex12);
      assertNotSame(complex24, complex9);
      assertSame(complex24, complex17);
      assertNotSame(complex24, complex19);
      assertNotSame(complex24, complex11);
      assertSame(complex24, complex20);
      assertNotSame(complex24, complex8);
      assertNotSame(complex24, complex0);
      assertNotSame(complex24, complex23);
      assertNotSame(complex24, complex10);
      assertNotSame(complex24, complex16);
      assertSame(complex24, complex21);
      assertNotSame(complex24, complex2);
      assertNotSame(complex24, complex14);
      assertNotSame(complex24, complex3);
      assertNotSame(complex24, complex1);
      assertNotSame(complex24, complex7);
      assertNotSame(complex24, complex4);
      assertNotSame(complex24, complex22);
      assertNotSame(complex24, complex15);
      assertNotSame(complex24, complex5);
      assertNotSame(complex24, complex13);
      
      double double3 = complex19.getArgument();
      assertEquals((-9.794316162956734E-4), double3, 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals(1021.0, complex19.getReal(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals((-1.0), complex19.getImaginary(), 0.01);
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(1021.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex9.isNaN());
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex19);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex2);
      assertSame(complex18, complex20);
      assertNotSame(complex18, complex1);
      assertSame(complex18, complex12);
      assertSame(complex18, complex6);
      assertNotSame(complex18, complex16);
      assertSame(complex18, complex24);
      assertSame(complex18, complex17);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex23);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex11);
      assertSame(complex18, complex21);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex22);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex5);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex22);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex23);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex24);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex20);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex22);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex24);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex23);
      assertNotSame(complex7, complex8);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex24);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex23);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex20);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex21);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex22);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.ZERO.reciprocal();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.exp();
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(16);
      assertNotNull(list0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.asin();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(344.91470642149, 344.91470642149);
      assertNotNull(complex0);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.NaN.asin();
      assertNotNull(complex1);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      complex1.I.hashCode();
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ZERO.atan();
      assertNotNull(complex2);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex0.tan();
      assertNotNull(complex3);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex0.ZERO.pow((-2899.40858855));
      assertNotNull(complex4);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = Complex.valueOf(4.6730779443102234E-8);
      assertNotNull(complex5);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.6730779443102234E-8, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = complex3.ZERO.reciprocal();
      assertNotNull(complex6);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      
      Complex complex7 = complex6.INF.sqrt();
      assertNotNull(complex7);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertTrue(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertTrue(complex7.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex6));
      
      Complex complex8 = (Complex)complex0.readResolve();
      assertNotNull(complex8);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(344.91470642149, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(344.91470642149, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      
      Complex complex9 = complex3.multiply(578);
      assertNotNull(complex9);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(578.0, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      
      Complex complex10 = complex9.ZERO.asin();
      assertNotNull(complex10);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(578.0, complex9.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex8));
      
      Complex complex11 = complex10.INF.conjugate();
      assertNotNull(complex11);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(578.0, complex9.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex11.getImaginary(), 0.01);
      assertTrue(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex0);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex0));
      
      Complex complex12 = complex3.tan();
      assertNotNull(complex12);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex12.isInfinite());
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.7615941559557649, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex5);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex11));
      
      Complex complex13 = complex0.sin();
      assertNotNull(complex13);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals((-1.9113424696179094E149), complex13.getReal(), 0.01);
      assertEquals(2.4602703703435176E149, complex13.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex6);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex6));
      
      Complex complex14 = (Complex)complex4.INF.readResolve();
      assertNotNull(complex14);
      assertFalse(complex14.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex14.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex14.getImaginary(), 0.01);
      assertTrue(complex14.isInfinite());
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex6));
      
      Complex complex15 = complex6.ZERO.cosh();
      assertNotNull(complex15);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex15.getReal(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isNaN());
      assertFalse(complex15.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex11);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex12);
      assertSame(complex6, complex1);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex14);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex12));
      assertTrue(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex14));
      
      Complex complex16 = (Complex)complex13.ZERO.readResolve();
      assertNotNull(complex16);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex16.isInfinite());
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals((-1.9113424696179094E149), complex13.getReal(), 0.01);
      assertEquals(2.4602703703435176E149, complex13.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex9);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex6);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex12));
      assertTrue(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex0));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex6));
      
      Complex complex17 = complex4.ONE.tan();
      assertNotNull(complex17);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex17.isInfinite());
      assertEquals(1.557407724654902, complex17.getReal(), 0.01);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex6));
      
      Complex complex18 = complex4.I.tanh();
      assertNotNull(complex18);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex18.isNaN());
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertEquals(1.557407724654902, complex18.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex6));
      
      boolean boolean0 = complex4.isInfinite();
      assertFalse(boolean0);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex6));
      
      Complex complex19 = complex4.add(61.407096334);
      assertNotNull(complex19);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex19.isNaN());
      assertEquals(Double.NaN, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals(Double.NaN, complex19.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex5);
      assertSame(complex19, complex1);
      assertNotSame(complex19, complex8);
      assertSame(complex19, complex6);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex3));
      assertTrue(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex2));
      assertTrue(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex6));
      
      ComplexField complexField1 = complex19.I.getField();
      assertNotNull(complexField1);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex19.isNaN());
      assertEquals(Double.NaN, complex19.getReal(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals(Double.NaN, complex19.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex5);
      assertSame(complex19, complex1);
      assertNotSame(complex19, complex8);
      assertSame(complex19, complex6);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertSame(complexField1, complexField0);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex3));
      assertTrue(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex2));
      assertTrue(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex19));
      assertFalse(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex6));
      
      Complex complex20 = complex13.sin();
      assertNotNull(complex20);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex20.getImaginary(), 0.01);
      assertTrue(complex20.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex20.getReal(), 0.01);
      assertFalse(complex20.isNaN());
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals((-1.9113424696179094E149), complex13.getReal(), 0.01);
      assertEquals(2.4602703703435176E149, complex13.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex8);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex18);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex19);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex20);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex6);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex19));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex2));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex18));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex19));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex17));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex16));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex6));
      
      List<Complex> list0 = complex6.nthRoot(504);
      assertNotNull(list0);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex18);
      assertNotSame(complex6, complex16);
      assertSame(complex6, complex1);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex0);
      assertSame(complex6, complex19);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex14);
      assertTrue(list0.contains(complex19));
      assertFalse(list0.contains(complex0));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex20));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex16));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex18));
      assertTrue(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex14));
      
      Complex complex21 = complex0.divide((double) 578);
      assertNotNull(complex21);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5967382464039619, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertEquals(0.5967382464039619, complex21.getImaginary(), 0.01);
      assertFalse(complex21.isNaN());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex11);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex11));
      
      Complex complex22 = complex0.atan();
      assertNotNull(complex22);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex22.isInfinite());
      assertFalse(complex22.isNaN());
      assertEquals(0.0014496317211476566, complex22.getImaginary(), 0.01);
      assertEquals(1.569346691011995, complex22.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex3);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex6));
      assertFalse(complex22.equals((Object)complex10));
      assertFalse(complex22.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex18));
      assertFalse(complex22.equals((Object)complex0));
      assertFalse(complex22.equals((Object)complex20));
      assertFalse(complex22.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex4));
      assertFalse(complex22.equals((Object)complex1));
      assertFalse(complex22.equals((Object)complex13));
      assertFalse(complex22.equals((Object)complex14));
      assertFalse(complex22.equals((Object)complex21));
      assertFalse(complex22.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex16));
      assertFalse(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex11));
      assertFalse(complex22.equals((Object)complex2));
      assertFalse(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex17));
      assertFalse(complex22.equals((Object)complex19));
      assertFalse(complex22.equals((Object)complex15));
      assertFalse(complex22.equals((Object)complex3));
      
      double double0 = complex10.getReal();
      assertEquals(0.0, double0, 0.01);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(578.0, complex9.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex22);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex18);
      assertNotSame(complex9, complex20);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex22);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex21);
      assertNotSame(complex9, complex11);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex20);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex17);
      assertNotSame(complex10, complex19);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex18);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex22);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex16);
      assertNotSame(complex10, complex21);
      assertNotSame(complex10, complex14);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex22));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex20));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex16));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex22));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex21));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex18));
      assertFalse(complex9.equals((Object)complex20));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex19));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex17));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex22));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex16));
      assertFalse(complex9.equals((Object)complex18));
      assertFalse(complex9.equals((Object)complex21));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex20));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex17));
      assertFalse(complex10.equals((Object)complex19));
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex16));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex12));
      assertFalse(complex10.equals((Object)complex18));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex22));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex21));
      assertFalse(complex10.equals((Object)complex14));
      
      Complex complex23 = complex10.tan();
      assertNotNull(complex23);
      assertEquals(344.91470642149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(344.91470642149, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(578.0, complex9.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(-0.0, complex23.getImaginary(), 0.01);
      assertFalse(complex23.isNaN());
      assertEquals(0.0, complex23.getReal(), 0.01);
      assertFalse(complex23.isInfinite());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex22);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex23);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex18);
      assertNotSame(complex9, complex20);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex22);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex21);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex23);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex20);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex17);
      assertNotSame(complex10, complex19);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex23);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex18);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex22);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex16);
      assertNotSame(complex10, complex21);
      assertNotSame(complex10, complex14);
      assertNotSame(complex23, complex21);
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex18);
      assertNotSame(complex23, complex22);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex13);
      assertNotSame(complex23, complex1);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex14);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex7);
      assertNotSame(complex23, complex11);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex17);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex16);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex2);
      assertNotSame(complex23, complex15);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex10);
      assertNotSame(complex23, complex6);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex22));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex20));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex16));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex22));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex21));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex18));
      assertFalse(complex9.equals((Object)complex20));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex19));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex17));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex22));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex16));
      assertFalse(complex9.equals((Object)complex18));
      assertFalse(complex9.equals((Object)complex21));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex20));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex17));
      assertFalse(complex10.equals((Object)complex19));
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex16));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex12));
      assertFalse(complex10.equals((Object)complex18));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex22));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex21));
      assertFalse(complex10.equals((Object)complex14));
      assertFalse(complex23.equals((Object)complex21));
      assertFalse(complex23.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      
      try { 
        complex0.nthRoot((-787));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -787
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.valueOf(0.0, (-2236.8173602078));
      assertNotNull(complex2);
      assertEquals((-2236.8173602078), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.I.sinh();
      assertNotNull(complex3);
      assertEquals((-2236.8173602078), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex3.ONE.add(complex1);
      assertNotNull(complex4);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-2236.8173602078), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex1.subtract(complex2);
      assertNotNull(complex5);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-2236.8173602078), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(2236.8173602078, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex5.I.exp();
      assertNotNull(complex6);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-2236.8173602078), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(2236.8173602078, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.8414709848078965, complex6.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      
      Complex complex7 = complex5.negate();
      assertNotNull(complex7);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-2236.8173602078), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(2236.8173602078, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals((-2236.8173602078), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(-0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertTrue(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      
      Complex complex8 = complex5.I.sinh();
      assertNotNull(complex8);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-2236.8173602078), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(2236.8173602078, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.8414709848078965, complex8.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertTrue(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      
      ComplexField complexField0 = complex2.getField();
      assertNotNull(complexField0);
      assertEquals((-2236.8173602078), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex3));
      
      Complex complex9 = Complex.valueOf(0.0);
      assertNotNull(complex9);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertTrue(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      
      int int0 = (-1540);
      try { 
        complex2.I.nthRoot((-1540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,540
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.sqrt();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      
      Complex complex1 = Complex.INF;
      assertNotNull(complex1);
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertSame(complex1, complex0);
      
      Complex complex2 = complex0.pow(complex1);
      assertNotNull(complex2);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.ONE.cos();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex((-2562.981));
      assertNotNull(complex2);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-2562.981), complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.I.atan();
      assertNotNull(complex3);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-2562.981), complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex0.pow(complex2);
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-2562.981), complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex3));
      
      Complex complex5 = complex4.pow(0.0);
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-2562.981), complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.sinh();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.atan();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.INF.multiply(complex0);
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = (Complex)complex1.ZERO.readResolve();
      assertNotNull(complex3);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex1));
      
      Complex complex4 = complex0.INF.divide(complex1);
      assertNotNull(complex4);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex0.pow((-416.532242156545));
      assertNotNull(complex5);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex5.createComplex((-416.532242156545), (-416.532242156545));
      assertNotNull(complex6);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals((-416.532242156545), complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals((-416.532242156545), complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      
      Complex complex7 = complex5.ONE.negate();
      assertNotNull(complex7);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals((-1.0), complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      
      Complex complex8 = complex2.sqrt1z();
      assertNotNull(complex8);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex8.equals((Object)complex5));
      
      Complex complex9 = complex8.I.tan();
      assertNotNull(complex9);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.7615941559557649, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex9);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex8.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      
      double double0 = complex8.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex9);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex9));
      assertTrue(complex8.equals((Object)complex5));
      
      Complex complex10 = complex0.divide((-416.532242156545));
      assertNotNull(complex10);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertFalse(complex10.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertTrue(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex6));
      
      Complex complex11 = complex10.I.createComplex((-1.0), (-1.0));
      assertNotNull(complex11);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertFalse(complex10.isInfinite());
      assertFalse(complex11.isInfinite());
      assertEquals((-1.0), complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals((-1.0), complex11.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex0);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertTrue(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
      
      complex2.hashCode();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex12 = complex0.INF.conjugate();
      assertNotNull(complex12);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex12.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex12.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isNaN());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex4);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex4));
      
      Complex complex13 = complex4.sinh();
      assertNotNull(complex13);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertTrue(complex13.isNaN());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex10);
      assertSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex13, complex7);
      assertSame(complex13, complex4);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex12);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex12));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex2));
      assertTrue(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex9));
      assertTrue(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex12));
      
      Complex complex14 = complex13.ONE.sqrt1z();
      assertNotNull(complex14);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertTrue(complex13.isNaN());
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex10);
      assertSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex13, complex7);
      assertSame(complex13, complex4);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex12);
      assertTrue(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex12));
      assertTrue(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex7));
      assertTrue(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex4));
      assertTrue(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex12));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex2));
      assertTrue(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex9));
      assertTrue(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex12));
      
      Complex complex15 = complex0.pow(Double.NaN);
      assertNotNull(complex15);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex15.isNaN());
      assertFalse(complex15.isInfinite());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertSame(complex15, complex13);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex9);
      assertSame(complex15, complex4);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex3);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex9));
      assertTrue(complex15.equals((Object)complex8));
      assertTrue(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex3));
      
      Complex complex16 = complex12.exp();
      assertNotNull(complex16);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex16.isInfinite());
      assertTrue(complex16.isNaN());
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertTrue(complex12.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex12.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isNaN());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex15);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex4);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex9));
      assertTrue(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex7));
      assertTrue(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex6));
      assertTrue(complex16.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex8));
      assertTrue(complex16.equals((Object)complex15));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex15));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex14));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      
      double double1 = complex14.abs();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertTrue(complex13.isNaN());
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex10);
      assertSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertSame(complex4, complex15);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertSame(complex13, complex15);
      assertNotSame(complex13, complex7);
      assertSame(complex13, complex4);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex12);
      assertTrue(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex15));
      assertTrue(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex7));
      assertTrue(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex4));
      assertTrue(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex5));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex7));
      assertTrue(complex13.equals((Object)complex16));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertTrue(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex9));
      assertTrue(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex12));
      
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex((-3904.1455584029513));
      assertNotNull(complex0);
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.ZERO.negate();
      assertNotNull(complex1);
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ONE.sqrt1z();
      assertNotNull(complex2);
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      double double0 = complex0.getReal();
      assertEquals((-3904.1455584029513), double0, 0.01);
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex3 = complex1.atan();
      assertNotNull(complex3);
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex0.createComplex((-3904.1455584029513), 0.0);
      assertNotNull(complex4);
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-3904.1455584029513), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex2.acos();
      assertNotNull(complex5);
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex6 = complex5.sinh();
      assertNotNull(complex6);
      assertEquals((-3904.1455584029513), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(2.3012989023072947, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.multiply(15.494500954079516);
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      assertNotNull(complex1);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.multiply(complex1);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.sin();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.log();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.pow((-6.712199323081945E-8));
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.9999999999999944, complex1.getReal(), 0.01);
      assertEquals((-1.0543498041412292E-7), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      assertNotNull(complex2);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.9999999999999944, complex1.getReal(), 0.01);
      assertEquals((-1.0543498041412292E-7), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.negate();
      assertNotNull(complex3);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.9999999999999944, complex1.getReal(), 0.01);
      assertEquals((-1.0543498041412292E-7), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.INF.cos();
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.ZERO.exp();
      assertNotNull(complex2);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.INF.multiply((-20));
      assertNotNull(complex3);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex0.ONE.asin();
      assertNotNull(complex4);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      
      Complex complex5 = complex1.multiply(complex0);
      assertNotNull(complex5);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = Complex.valueOf((double) (-20));
      assertNotNull(complex6);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals((-20.0), complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = complex6.I.exp();
      assertNotNull(complex7);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals((-20.0), complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.8414709848078965, complex7.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      
      Complex complex8 = complex5.INF.createComplex((-20), (-20));
      assertNotNull(complex8);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals((-20.0), complex8.getReal(), 0.01);
      assertEquals((-20.0), complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      
      Complex complex9 = complex7.ONE.tan();
      assertNotNull(complex9);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals((-20.0), complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.8414709848078965, complex7.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(1.557407724654902, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex1));
      
      Complex complex10 = complex0.INF.tanh();
      assertNotNull(complex10);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertSame(complex10, complex5);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      
      Complex complex11 = complex1.sinh();
      assertNotNull(complex11);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex7);
      assertSame(complex11, complex10);
      assertNotSame(complex11, complex6);
      assertSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex6));
      
      complex10.I.hashCode();
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex3);
      assertSame(complex10, complex11);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertSame(complex10, complex5);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      
      Complex complex12 = (Complex)complex11.NaN.readResolve();
      assertNotNull(complex12);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex7);
      assertSame(complex11, complex10);
      assertNotSame(complex11, complex6);
      assertSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex4);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex3));
      assertTrue(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex10));
      assertTrue(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertTrue(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex4));
      
      Complex complex13 = complex11.asin();
      assertNotNull(complex13);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertSame(complex11, complex10);
      assertNotSame(complex11, complex6);
      assertSame(complex11, complex5);
      assertSame(complex11, complex13);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertSame(complex13, complex5);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex12);
      assertSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex1);
      assertSame(complex13, complex10);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex0);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertTrue(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex9));
      assertTrue(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex6));
      assertTrue(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex4));
      
      Complex complex14 = complex0.ZERO.conjugate();
      assertNotNull(complex14);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      
      ComplexField complexField0 = complex3.getField();
      assertNotNull(complexField0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex13);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex15 = complex0.sinh();
      assertNotNull(complex15);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8414709848078965, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex13);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex13));
      
      Complex complex16 = complex2.conjugate();
      assertNotNull(complex16);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex13);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex0);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex0));
      
      Complex complex17 = complex10.exp();
      assertNotNull(complex17);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex17.isInfinite());
      assertTrue(complex17.isNaN());
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex17);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex2);
      assertSame(complex17, complex13);
      assertSame(complex17, complex5);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex7);
      assertSame(complex17, complex11);
      assertNotSame(complex17, complex9);
      assertSame(complex17, complex10);
      assertNotSame(complex17, complex4);
      assertSame(complex10, complex13);
      assertNotSame(complex10, complex14);
      assertNotSame(complex10, complex3);
      assertSame(complex10, complex11);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertSame(complex10, complex17);
      assertSame(complex10, complex5);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex16);
      assertNotSame(complex10, complex1);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex0));
      assertTrue(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex2));
      assertTrue(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex14));
      assertFalse(complex10.equals((Object)complex3));
      assertTrue(complex10.equals((Object)complex12));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex16));
      
      Complex complex18 = complex16.sin();
      assertNotNull(complex18);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex18.getReal(), 0.01);
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex13);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex0);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex5);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex17));
      assertTrue(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex5));
      
      Complex complex19 = complex7.acos();
      assertNotNull(complex19);
      assertFalse(complex19.isInfinite());
      assertEquals((-0.8216834706126773), complex19.getImaginary(), 0.01);
      assertEquals(1.1612894529345954, complex19.getReal(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals((-20.0), complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.8414709848078965, complex7.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex6);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex9);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      
      Complex complex20 = complex16.exp();
      assertNotNull(complex20);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex20.getReal(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      assertFalse(complex20.isInfinite());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex13);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex19);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex20);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex6);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex19));
      assertTrue(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex18));
      assertFalse(complex16.equals((Object)complex19));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex2));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex19));
      assertFalse(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex6));
      
      Complex complex21 = complex20.sinh();
      assertNotNull(complex21);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(1.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex20.getReal(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      assertFalse(complex20.isInfinite());
      assertFalse(complex21.isInfinite());
      assertEquals(7.544137102816975, complex21.getReal(), 0.01);
      assertEquals(-0.0, complex21.getImaginary(), 0.01);
      assertFalse(complex21.isNaN());
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex21);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex13);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex19);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex21);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex20);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex21);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex6);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex10);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex20));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex19));
      assertTrue(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex18));
      assertFalse(complex16.equals((Object)complex19));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex20));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex2));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex19));
      assertFalse(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex10));
      
      Complex complex22 = complex19.multiply((-2213.125808718833));
      assertNotNull(complex22);
      assertFalse(complex19.isInfinite());
      assertEquals((-0.8216834706126773), complex19.getImaginary(), 0.01);
      assertEquals(1.1612894529345954, complex19.getReal(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals((-20.0), complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.8414709848078965, complex7.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-2570.0796596825276), complex22.getReal(), 0.01);
      assertFalse(complex22.isInfinite());
      assertFalse(complex22.isNaN());
      assertEquals(1818.488895410579, complex22.getImaginary(), 0.01);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex22);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex6);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex9);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex22);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex5);
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex20));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex21));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex21));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex19));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex19));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex21));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex20));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex22.equals((Object)complex21));
      assertFalse(complex22.equals((Object)complex10));
      assertFalse(complex22.equals((Object)complex19));
      assertFalse(complex22.equals((Object)complex4));
      assertFalse(complex22.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex11));
      assertFalse(complex22.equals((Object)complex15));
      assertFalse(complex22.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex6));
      assertFalse(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex3));
      assertFalse(complex22.equals((Object)complex1));
      assertFalse(complex22.equals((Object)complex13));
      assertFalse(complex22.equals((Object)complex14));
      assertFalse(complex22.equals((Object)complex2));
      assertFalse(complex22.equals((Object)complex16));
      assertFalse(complex22.equals((Object)complex18));
      assertFalse(complex22.equals((Object)complex0));
      assertFalse(complex22.equals((Object)complex17));
      assertFalse(complex22.equals((Object)complex20));
      assertFalse(complex22.equals((Object)complex5));
      
      Complex complex23 = complex19.log();
      assertNotNull(complex23);
      assertFalse(complex19.isInfinite());
      assertEquals((-0.8216834706126773), complex19.getImaginary(), 0.01);
      assertEquals(1.1612894529345954, complex19.getReal(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals((-20.0), complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(0.8414709848078965, complex7.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex23.isInfinite());
      assertFalse(complex23.isNaN());
      assertEquals((-0.6157826537786634), complex23.getImaginary(), 0.01);
      assertEquals(0.3524778225449152, complex23.getReal(), 0.01);
      assertNotSame(complex19, complex23);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex22);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex6);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex23);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex9);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex23);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex22);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex1);
      assertNotSame(complex23, complex14);
      assertNotSame(complex23, complex21);
      assertNotSame(complex23, complex2);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex11);
      assertNotSame(complex23, complex15);
      assertNotSame(complex23, complex6);
      assertNotSame(complex23, complex10);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex13);
      assertNotSame(complex23, complex7);
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex17);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex22);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex16);
      assertNotSame(complex23, complex18);
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex22));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex20));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex21));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex21));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex22));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex19));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex19));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex21));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex20));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex22));
      assertFalse(complex23.equals((Object)complex3));
      assertFalse(complex23.equals((Object)complex1));
      assertFalse(complex23.equals((Object)complex14));
      assertFalse(complex23.equals((Object)complex21));
      assertFalse(complex23.equals((Object)complex2));
      assertFalse(complex23.equals((Object)complex0));
      assertFalse(complex23.equals((Object)complex4));
      assertFalse(complex23.equals((Object)complex11));
      assertFalse(complex23.equals((Object)complex15));
      assertFalse(complex23.equals((Object)complex6));
      assertFalse(complex23.equals((Object)complex10));
      assertFalse(complex23.equals((Object)complex19));
      assertFalse(complex23.equals((Object)complex13));
      assertFalse(complex23.equals((Object)complex7));
      assertFalse(complex23.equals((Object)complex9));
      assertFalse(complex23.equals((Object)complex5));
      assertFalse(complex23.equals((Object)complex17));
      assertFalse(complex23.equals((Object)complex8));
      assertFalse(complex23.equals((Object)complex22));
      assertFalse(complex23.equals((Object)complex20));
      assertFalse(complex23.equals((Object)complex12));
      assertFalse(complex23.equals((Object)complex16));
      assertFalse(complex23.equals((Object)complex18));
      
      Complex complex24 = complex5.sqrt();
      assertNotNull(complex24);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertTrue(complex24.isNaN());
      assertFalse(complex24.isInfinite());
      assertEquals(Double.NaN, complex24.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex24.getReal(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex17);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex24);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex23);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex18);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex23);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex14);
      assertSame(complex5, complex11);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex3);
      assertSame(complex5, complex24);
      assertNotSame(complex5, complex6);
      assertSame(complex5, complex17);
      assertSame(complex5, complex13);
      assertNotSame(complex5, complex19);
      assertSame(complex5, complex10);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex22);
      assertNotSame(complex5, complex1);
      assertNotSame(complex24, complex3);
      assertNotSame(complex24, complex1);
      assertNotSame(complex24, complex4);
      assertNotSame(complex24, complex20);
      assertNotSame(complex24, complex23);
      assertNotSame(complex24, complex12);
      assertNotSame(complex24, complex8);
      assertNotSame(complex24, complex22);
      assertNotSame(complex24, complex7);
      assertNotSame(complex24, complex18);
      assertNotSame(complex24, complex19);
      assertSame(complex24, complex13);
      assertNotSame(complex24, complex16);
      assertNotSame(complex24, complex9);
      assertSame(complex24, complex10);
      assertNotSame(complex24, complex21);
      assertSame(complex24, complex17);
      assertNotSame(complex24, complex0);
      assertSame(complex24, complex11);
      assertNotSame(complex24, complex2);
      assertNotSame(complex24, complex15);
      assertSame(complex24, complex5);
      assertNotSame(complex24, complex14);
      assertNotSame(complex24, complex6);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex23));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex22));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertTrue(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex21));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex23));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex22));
      assertFalse(complex1.equals((Object)complex20));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex23));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex21));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex19));
      assertFalse(complex5.equals((Object)complex20));
      assertTrue(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex22));
      assertFalse(complex24.equals((Object)complex3));
      assertFalse(complex24.equals((Object)complex4));
      assertTrue(complex24.equals((Object)complex1));
      assertFalse(complex24.equals((Object)complex20));
      assertFalse(complex24.equals((Object)complex23));
      assertFalse(complex24.equals((Object)complex8));
      assertFalse(complex24.equals((Object)complex22));
      assertFalse(complex24.equals((Object)complex7));
      assertTrue(complex24.equals((Object)complex12));
      assertFalse(complex24.equals((Object)complex18));
      assertFalse(complex24.equals((Object)complex19));
      assertFalse(complex24.equals((Object)complex16));
      assertFalse(complex24.equals((Object)complex9));
      assertFalse(complex24.equals((Object)complex21));
      assertFalse(complex24.equals((Object)complex0));
      assertFalse(complex24.equals((Object)complex2));
      assertFalse(complex24.equals((Object)complex15));
      assertFalse(complex24.equals((Object)complex14));
      assertFalse(complex24.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, (-20.0));
      assertNotNull(complex0);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      
      double double0 = complex0.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.divide(9.113713162029408E267);
      assertNotNull(complex1);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-2.194495223234179E-267), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.valueOf((-1029.169652713));
      assertNotNull(complex2);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.tan();
      assertNotNull(complex3);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(3.2550979079261073, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = Complex.NaN;
      assertNotNull(complex4);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      
      List<Complex> list0 = complex4.nthRoot(524);
      assertNotNull(list0);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertTrue(list0.contains(complex4));
      assertFalse(list0.contains(complex0));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = complex2.divide((double) (-704));
      assertNotNull(complex5);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.461888711240057, complex5.getReal(), 0.01);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      
      Complex complex6 = (Complex)complex4.readResolve();
      assertNotNull(complex6);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      
      Complex complex7 = complex0.add(complex2);
      assertNotNull(complex7);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(9.113713162029408E267, complex7.getReal(), 0.01);
      assertEquals((-20.0), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertTrue(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      
      Complex complex8 = complex2.negate();
      assertNotNull(complex8);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1029.169652713, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex8);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      
      Complex complex9 = complex2.sinh();
      assertNotNull(complex9);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertTrue(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getReal(), 0.01);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex1));
      assertTrue(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      
      Complex complex10 = (Complex)complex5.readResolve();
      assertNotNull(complex10);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.461888711240057, complex5.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(1.461888711240057, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex8);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex10);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex0);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex5));
      
      Complex complex11 = complex8.cos();
      assertNotNull(complex11);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1029.169652713), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1029.169652713, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertFalse(complex11.isNaN());
      assertEquals(0.29366502024767277, complex11.getReal(), 0.01);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex8);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex1));
      
      Complex complex12 = complex4.add((-1029.169652713));
      assertNotNull(complex12);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex12);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex8);
      assertSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex9);
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex6));
      assertTrue(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex10));
      
      double double1 = complex4.getImaginary();
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex12);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex13 = complex0.cos();
      assertNotNull(complex13);
      assertEquals(1.4267164499397239E7, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(2.421626823571339E8, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex1);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      
      Complex complex14 = complex4.sin();
      assertNotNull(complex14);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertTrue(complex14.isNaN());
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex9);
      assertSame(complex14, complex12);
      assertSame(complex14, complex4);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex10);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex13);
      assertSame(complex4, complex12);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertSame(complex4, complex14);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex0));
      assertTrue(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex8));
      assertTrue(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      
      Complex complex1 = complex0.exp();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = new Complex((-3904.14555840295));
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.ZERO.negate();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.cosh();
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      double double0 = complex1.getArgument();
      assertEquals((-3.141592653589793), double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex3 = complex0.tanh();
      assertNotNull(complex3);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.0), complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex1.exp();
      assertNotNull(complex4);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex4.cos();
      assertNotNull(complex5);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.5403023058681398, complex5.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex6 = complex5.acos();
      assertNotNull(complex6);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.5403023058681398, complex5.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.1102230246251565E-16, complex6.getImaginary(), 0.01);
      assertEquals(0.9999999999999999, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      
      Complex complex7 = complex5.tanh();
      assertNotNull(complex7);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.5403023058681398, complex5.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.4932167668855039, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      
      double double1 = complex5.abs();
      assertEquals(0.5403023058681398, double1, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.5403023058681398, complex5.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex8 = complex5.createComplex(-0.0, 3848.8534);
      assertNotNull(complex8);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-3904.14555840295), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.5403023058681398, complex5.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(3848.8534, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.divide((-6.938000231893302E137));
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals((-1.441337513082082E-138), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      List<Complex> list0 = complex0.nthRoot(785);
      assertNotNull(list0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(785, list0.size());
      assertNotSame(complex0, complex1);
      assertFalse(list0.contains(complex1));
      assertFalse(complex0.equals((Object)complex1));
      
      double double0 = complex0.getImaginary();
      assertEquals(1.0, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex1.cosh();
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals((-1.441337513082082E-138), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      double double1 = complex2.abs();
      assertEquals(1.0, double1, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals((-1.441337513082082E-138), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = complex2.isNaN();
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals((-1.441337513082082E-138), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.multiply(7);
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.NaN.asin();
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.multiply(complex0);
      assertNotNull(complex2);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      Complex complex1 = Complex.valueOf(0.23710808157920837);
      assertNotNull(complex1);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.23710808157920837, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.divide(Double.NaN);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = new Complex((-724.9618330986));
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-724.9618330986), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.divide((-724.9618330986));
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-724.9618330986), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.divide((double) 7);
      assertNotNull(complex1);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      
      Complex complex1 = complex0.asin();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      
      Complex complex2 = complex1.divide(complex0);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertSame(complex2, complex1);
      assertSame(complex2, complex0);
      
      Complex complex3 = complex1.I.exp();
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex3.ONE.negate();
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals((-1.0), complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = Complex.valueOf(197.535366);
      assertNotNull(complex5);
      assertEquals(197.535366, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex6 = complex1.ZERO.negate();
      assertNotNull(complex6);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      
      Complex complex7 = complex6.I.acos();
      assertNotNull(complex7);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      
      Complex complex8 = complex6.ONE.sqrt();
      assertNotNull(complex8);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      
      Complex complex9 = complex8.divide(complex7);
      assertNotNull(complex9);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(0.2716749946478336, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(0.4841829729864344, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      
      Complex complex10 = complex9.I.sin();
      assertNotNull(complex10);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(0.2716749946478336, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(0.4841829729864344, complex9.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex10);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      
      ComplexField complexField0 = complex10.ZERO.getField();
      assertNotNull(complexField0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(0.2716749946478336, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(0.4841829729864344, complex9.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex10);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      
      Complex complex11 = complex8.divide(197.535366);
      assertNotNull(complex11);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.005062384626355971, complex11.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex6);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      
      Complex complex12 = complex1.ZERO.multiply(197.535366);
      assertNotNull(complex12);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex1));
      assertTrue(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      
      double double0 = complex0.getImaginary();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      
      Complex complex13 = complex5.negate();
      assertNotNull(complex13);
      assertEquals(197.535366, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-197.535366), complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex10);
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex10));
      
      Complex complex14 = complex13.multiply((-1060));
      assertNotNull(complex14);
      assertFalse(complex14.isNaN());
      assertEquals(209387.48796, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(197.535366, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-197.535366), complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex13);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex10);
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex10));
      
      Complex complex15 = complex1.pow(Double.NaN);
      assertNotNull(complex15);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex15.isInfinite());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertTrue(complex15.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex13);
      assertSame(complex15, complex2);
      assertSame(complex15, complex1);
      assertNotSame(complex15, complex12);
      assertSame(complex15, complex0);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex0);
      assertSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      
      Complex complex16 = complex0.divide(Double.NaN);
      assertNotNull(complex16);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertTrue(complex16.isNaN());
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex16);
      assertNotSame(complex0, complex7);
      assertNotSame(complex16, complex13);
      assertSame(complex16, complex0);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex3);
      assertSame(complex16, complex15);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex7);
      assertSame(complex16, complex2);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex5);
      assertSame(complex16, complex1);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex6);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex10));
      
      Complex complex17 = complex2.pow(379.01381333168);
      assertNotNull(complex17);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertTrue(complex17.isNaN());
      assertFalse(complex17.isInfinite());
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertNotSame(complex0, complex14);
      assertSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex16);
      assertNotSame(complex0, complex7);
      assertSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex0);
      assertSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertSame(complex1, complex17);
      assertNotSame(complex1, complex6);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertSame(complex2, complex17);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex16);
      assertSame(complex17, complex1);
      assertNotSame(complex17, complex12);
      assertSame(complex17, complex0);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex6);
      assertSame(complex17, complex15);
      assertNotSame(complex17, complex13);
      assertSame(complex17, complex16);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex7);
      assertSame(complex17, complex2);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex7));
      
      Complex complex18 = (Complex)complex17.readResolve();
      assertNotNull(complex18);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertTrue(complex17.isNaN());
      assertFalse(complex17.isInfinite());
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertTrue(complex18.isNaN());
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertNotSame(complex0, complex14);
      assertSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex16);
      assertNotSame(complex0, complex7);
      assertSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex0);
      assertSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertSame(complex1, complex17);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex6);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertSame(complex2, complex17);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertSame(complex2, complex15);
      assertNotSame(complex2, complex13);
      assertSame(complex2, complex16);
      assertSame(complex17, complex1);
      assertNotSame(complex17, complex12);
      assertSame(complex17, complex0);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex6);
      assertSame(complex17, complex15);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex13);
      assertSame(complex17, complex16);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex7);
      assertSame(complex17, complex2);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex14);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex7));
      assertTrue(complex18.equals((Object)complex0));
      assertTrue(complex18.equals((Object)complex1));
      assertTrue(complex18.equals((Object)complex15));
      assertTrue(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex4));
      assertTrue(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex13));
      assertTrue(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex14));
      
      Complex complex19 = complex13.cos();
      assertNotNull(complex19);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals((-0.9268092573457932), complex19.getReal(), 0.01);
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertEquals(197.535366, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-197.535366), complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex18);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex19);
      assertNotSame(complex13, complex10);
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex17));
      assertFalse(complex13.equals((Object)complex16));
      assertFalse(complex13.equals((Object)complex18));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex10));
      
      Complex complex20 = (Complex)complex19.INF.readResolve();
      assertNotNull(complex20);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals((-0.9268092573457932), complex19.getReal(), 0.01);
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertEquals(197.535366, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex20.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex20.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex20.getImaginary(), 0.01);
      assertTrue(complex20.isInfinite());
      assertEquals((-197.535366), complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex2);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex10);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex19);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex20);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex18);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex19);
      assertNotSame(complex13, complex10);
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex19));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex2));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex19));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex17));
      assertFalse(complex13.equals((Object)complex16));
      assertFalse(complex13.equals((Object)complex18));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex19));
      assertFalse(complex13.equals((Object)complex10));
      
      Complex complex21 = complex6.tanh();
      assertNotNull(complex21);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex21.getImaginary(), 0.01);
      assertFalse(complex21.isNaN());
      assertEquals(-0.0, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertNotSame(complex0, complex14);
      assertSame(complex0, complex17);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex20);
      assertSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex16);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex21);
      assertSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex0);
      assertSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex20);
      assertSame(complex1, complex17);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex6);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex3);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex19);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex20));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex19));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex20));
      assertTrue(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex5));
      assertTrue(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex19));
      
      Complex complex22 = Complex.valueOf(Double.NaN, 490.5741156);
      assertNotNull(complex22);
      assertTrue(complex22.isNaN());
      assertFalse(complex22.isInfinite());
      assertEquals(Double.NaN, complex22.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex22.getReal(), 0.01);
      assertSame(complex22, complex15);
      assertSame(complex22, complex0);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex8);
      assertSame(complex22, complex2);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex5);
      assertSame(complex22, complex17);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex6);
      assertSame(complex22, complex1);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex21);
      assertSame(complex22, complex16);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex10);
      assertFalse(complex22.equals((Object)complex3));
      assertFalse(complex22.equals((Object)complex13));
      assertFalse(complex22.equals((Object)complex11));
      assertFalse(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex4));
      assertFalse(complex22.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex6));
      assertFalse(complex22.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex20));
      assertFalse(complex22.equals((Object)complex21));
      assertTrue(complex22.equals((Object)complex18));
      assertFalse(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex14));
      assertFalse(complex22.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex19));
      assertFalse(complex22.equals((Object)complex10));
      
      complex22.INF.hashCode();
      assertTrue(complex22.isNaN());
      assertFalse(complex22.isInfinite());
      assertEquals(Double.NaN, complex22.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex22.getReal(), 0.01);
      assertSame(complex22, complex15);
      assertSame(complex22, complex0);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex8);
      assertSame(complex22, complex2);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex5);
      assertSame(complex22, complex17);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex6);
      assertSame(complex22, complex1);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex21);
      assertSame(complex22, complex16);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex10);
      assertFalse(complex22.equals((Object)complex3));
      assertFalse(complex22.equals((Object)complex13));
      assertFalse(complex22.equals((Object)complex11));
      assertFalse(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex4));
      assertFalse(complex22.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex6));
      assertFalse(complex22.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex20));
      assertFalse(complex22.equals((Object)complex21));
      assertTrue(complex22.equals((Object)complex18));
      assertFalse(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex14));
      assertFalse(complex22.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex19));
      assertFalse(complex22.equals((Object)complex10));
      
      Complex complex23 = complex22.multiply((-1060));
      assertNotNull(complex23);
      assertTrue(complex22.isNaN());
      assertFalse(complex22.isInfinite());
      assertEquals(Double.NaN, complex22.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex22.getReal(), 0.01);
      assertFalse(complex23.isInfinite());
      assertTrue(complex23.isNaN());
      assertEquals(Double.NaN, complex23.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex23.getReal(), 0.01);
      assertSame(complex22, complex15);
      assertSame(complex22, complex0);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex8);
      assertSame(complex22, complex2);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex5);
      assertSame(complex22, complex17);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex6);
      assertSame(complex22, complex1);
      assertNotSame(complex22, complex12);
      assertSame(complex22, complex23);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex21);
      assertSame(complex22, complex16);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex10);
      assertSame(complex23, complex0);
      assertSame(complex23, complex15);
      assertNotSame(complex23, complex13);
      assertSame(complex23, complex1);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex21);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex11);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex14);
      assertNotSame(complex23, complex10);
      assertSame(complex23, complex17);
      assertNotSame(complex23, complex18);
      assertNotSame(complex23, complex6);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex19);
      assertSame(complex23, complex22);
      assertSame(complex23, complex16);
      assertSame(complex23, complex2);
      assertNotSame(complex23, complex7);
      assertFalse(complex22.equals((Object)complex3));
      assertFalse(complex22.equals((Object)complex13));
      assertFalse(complex22.equals((Object)complex11));
      assertFalse(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex4));
      assertFalse(complex22.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex6));
      assertFalse(complex22.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex20));
      assertFalse(complex22.equals((Object)complex21));
      assertTrue(complex22.equals((Object)complex18));
      assertFalse(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex14));
      assertFalse(complex22.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex19));
      assertFalse(complex22.equals((Object)complex10));
      assertFalse(complex23.equals((Object)complex13));
      assertFalse(complex23.equals((Object)complex12));
      assertFalse(complex23.equals((Object)complex9));
      assertFalse(complex23.equals((Object)complex21));
      assertFalse(complex23.equals((Object)complex3));
      assertFalse(complex23.equals((Object)complex11));
      assertFalse(complex23.equals((Object)complex8));
      assertFalse(complex23.equals((Object)complex20));
      assertFalse(complex23.equals((Object)complex14));
      assertFalse(complex23.equals((Object)complex10));
      assertFalse(complex23.equals((Object)complex6));
      assertFalse(complex23.equals((Object)complex5));
      assertFalse(complex23.equals((Object)complex4));
      assertFalse(complex23.equals((Object)complex19));
      assertTrue(complex23.equals((Object)complex18));
      assertFalse(complex23.equals((Object)complex7));
      
      boolean boolean0 = complex7.isNaN();
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex14);
      assertSame(complex0, complex17);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex18);
      assertSame(complex0, complex23);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertSame(complex0, complex22);
      assertNotSame(complex0, complex20);
      assertSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex16);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex21);
      assertSame(complex1, complex22);
      assertSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex23);
      assertSame(complex1, complex0);
      assertSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex20);
      assertSame(complex1, complex17);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex6);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex23);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex22);
      assertNotSame(complex7, complex23);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex15);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex21));
      assertTrue(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex20));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex22));
      assertFalse(complex6.equals((Object)complex23));
      assertFalse(complex6.equals((Object)complex19));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex21));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex19));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex21));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex20));
      assertFalse(complex7.equals((Object)complex22));
      assertFalse(complex7.equals((Object)complex23));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex15));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.add((-507.5808381));
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-506.5808381), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.reciprocal();
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.reciprocal();
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = new Complex((-158.44064156), (-158.44064156));
      assertNotNull(complex1);
      assertFalse(complex1.isInfinite());
      assertEquals((-158.44064156), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-158.44064156), complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.tan();
      assertNotNull(complex2);
      assertFalse(complex1.isInfinite());
      assertEquals((-158.44064156), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-158.44064156), complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.multiply(2480.134685);
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(2480.134685, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, (-20.0));
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      double double0 = complex0.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = Complex.ZERO;
      assertNotNull(complex1);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.divide(complex0);
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.tanh();
      assertNotNull(complex3);
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      
      Complex complex4 = complex1.exp();
      assertNotNull(complex4);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex0.cos();
      assertNotNull(complex5);
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.421626823571339E8, complex5.getImaginary(), 0.01);
      assertEquals(1.4267164499397239E7, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex0.acos();
      assertNotNull(complex6);
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertTrue(complex6.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      
      Complex complex7 = complex6.tanh();
      assertNotNull(complex7);
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertTrue(complex6.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      
      double double1 = complex6.abs();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertTrue(complex6.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex8 = complex7.createComplex(3848.8534, Double.POSITIVE_INFINITY);
      assertNotNull(complex8);
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertTrue(complex6.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex8.isNaN());
      assertEquals(3848.8534, complex8.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      assertNotNull(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.valueOf((-1516.271351389));
      assertNotNull(complex2);
      assertFalse(complex2.isInfinite());
      assertEquals((-1516.271351389), complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = Complex.valueOf((-1516.271351389), Double.POSITIVE_INFINITY);
      assertNotNull(complex3);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertEquals((-1516.271351389), complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex2.INF.divide(complex1);
      assertNotNull(complex4);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-1516.271351389), complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = Complex.valueOf((-1516.271351389));
      assertNotNull(complex5);
      assertFalse(complex5.isInfinite());
      assertEquals((-1516.271351389), complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex5.createComplex(4.8582866452306916E-4, (-3911.18343690275));
      assertNotNull(complex6);
      assertFalse(complex5.isInfinite());
      assertEquals((-1516.271351389), complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals((-3911.18343690275), complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(4.8582866452306916E-4, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      
      complex6.hashCode();
      assertFalse(complex5.isInfinite());
      assertEquals((-1516.271351389), complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals((-3911.18343690275), complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(4.8582866452306916E-4, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = complex6.atan();
      assertNotNull(complex7);
      assertFalse(complex5.isInfinite());
      assertEquals((-1516.271351389), complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals((-3911.18343690275), complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(4.8582866452306916E-4, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(1.5707963267631375, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals((-2.5567709567263404E-4), complex7.getImaginary(), 0.01);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, (-20.0));
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      
      double double0 = complex0.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.I.nthRoot(7);
      assertNotNull(list0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(complex0));
      
      Complex complex1 = complex0.INF.sin();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ZERO.sin();
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.pow((-20.0));
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex4 = (Complex)complex3.readResolve();
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex3.multiply((double) 7);
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex2));
      assertTrue(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      
      Complex complex6 = complex5.I.sqrt();
      assertNotNull(complex6);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.7071067811865475, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.7071067811865476, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex6);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex2));
      assertTrue(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      
      Complex complex7 = complex6.ONE.conjugate();
      assertNotNull(complex7);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.7071067811865475, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.7071067811865476, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex6);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex6));
      assertTrue(complex3.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex2));
      assertTrue(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      
      Complex complex8 = complex0.divide(complex3);
      assertNotNull(complex8);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(9.113713162029408E267, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex8);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex7));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex6));
      assertTrue(complex3.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.multiply(complex0);
      assertNotNull(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.add((-507.5808381));
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.multiply(2480.134685);
      assertNotNull(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-19.545816277414065), (-19.545816277414065));
      assertNotNull(complex0);
      assertEquals((-19.545816277414065), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-19.545816277414065), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      
      String string0 = complex0.toString();
      assertEquals("(0.0, 1.0)", string0);
      assertNotNull(string0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.divide(2817.399654363);
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.NaN.atan();
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      String string0 = complex0.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      assertNotNull(string0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      double double0 = complex0.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex3 = complex0.createComplex(4422.54272, 4422.54272);
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(4422.54272, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(4422.54272, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex0.subtract(complex3);
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(4422.54272, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(4422.54272, complex3.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals((-4422.54272), complex4.getReal(), 0.01);
      assertEquals((-4422.54272), complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex3.NaN.divide(20.0);
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(4422.54272, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(4422.54272, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertTrue(complex5.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex3.negate();
      assertNotNull(complex6);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(4422.54272, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(4422.54272, complex3.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals((-4422.54272), complex6.getReal(), 0.01);
      assertEquals((-4422.54272), complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex6);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      
      Complex complex7 = complex4.createComplex((-220.7), 4422.54272);
      assertNotNull(complex7);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(4422.54272, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(4422.54272, complex3.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals((-4422.54272), complex4.getReal(), 0.01);
      assertEquals((-4422.54272), complex4.getImaginary(), 0.01);
      assertEquals(4422.54272, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals((-220.7), complex7.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3849.8534);
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(3849.8534, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.NaN.atan();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(3849.8534, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
      assertFalse(complex0.isInfinite());
      assertEquals(3849.8534, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex0.sin();
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(3849.8534, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-0.9858547041242736), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.add(3849.8534);
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertEquals(3849.8534, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-0.9858547041242736), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(3848.8675452958755, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = Complex.valueOf(3849.8534);
      assertNotNull(complex4);
      assertEquals(3849.8534, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      
      double double0 = complex0.getImaginary();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(3849.8534, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex5 = complex1.cos();
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertEquals(3849.8534, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertTrue(complex5.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      
      String string0 = complex5.toString();
      assertEquals("(NaN, NaN)", string0);
      assertNotNull(string0);
      assertFalse(complex0.isInfinite());
      assertEquals(3849.8534, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertTrue(complex5.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.cosh();
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.exp();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.NaN.negate();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      
      Complex complex2 = Complex.NaN;
      assertNotNull(complex2);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertSame(complex2, complex0);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.multiply(2146648085);
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(2.146648085E9, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = new Complex((-554.5), (-554.5));
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-554.5), complex0.getImaginary(), 0.01);
      assertEquals((-554.5), complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-554.5), complex0.getImaginary(), 0.01);
      assertEquals((-554.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.add(83.0);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-554.5), complex0.getImaginary(), 0.01);
      assertEquals((-554.5), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(83.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.pow(1.2133188247680664);
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9443838648634507, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-0.3288451243147322), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.I.pow((-1343.9158554553665));
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.9912777338065777, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.13178943227473028, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      complex1.ONE.hashCode();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.9912777338065777, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.13178943227473028, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.I.multiply(17);
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.9912777338065777, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.13178943227473028, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(17.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.NaN.add(0.0);
      assertNotNull(complex3);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.9912777338065777, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.13178943227473028, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(17.0, complex2.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = Complex.valueOf(0.0);
      assertNotNull(complex4);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex0));
      
      double double0 = complex2.abs();
      assertEquals(17.0, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.9912777338065777, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.13178943227473028, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(17.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      
      String string0 = complex4.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      assertNotNull(string0);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex0));
      
      Complex complex5 = Complex.valueOf((-2933.338226759691), (-2933.338226759691));
      assertNotNull(complex5);
      assertFalse(complex5.isNaN());
      assertEquals((-2933.338226759691), complex5.getImaginary(), 0.01);
      assertEquals((-2933.338226759691), complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex6 = complex5.INF.sqrt1z();
      assertNotNull(complex6);
      assertFalse(complex5.isNaN());
      assertEquals((-2933.338226759691), complex5.getImaginary(), 0.01);
      assertEquals((-2933.338226759691), complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      
      Complex complex7 = complex0.cosh();
      assertNotNull(complex7);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = complex7.createComplex((-1343.9158554553665), 17.0);
      assertNotNull(complex8);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertEquals(17.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals((-1343.9158554553665), complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      
      Complex complex9 = complex2.atan();
      assertNotNull(complex9);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.9912777338065777, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.13178943227473028, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(17.0, complex2.getImaginary(), 0.01);
      assertEquals(0.05889151782819173, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-1.5707963267948966), complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      
      Complex complex10 = complex9.NaN.negate();
      assertNotNull(complex10);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.9912777338065777, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.13178943227473028, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(17.0, complex2.getImaginary(), 0.01);
      assertEquals(0.05889151782819173, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-1.5707963267948966), complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex10);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertSame(complex10, complex3);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      
      Complex complex11 = complex10.ZERO.add(complex1);
      assertNotNull(complex11);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.9912777338065777, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.13178943227473028, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(17.0, complex2.getImaginary(), 0.01);
      assertEquals(0.05889151782819173, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-1.5707963267948966), complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertEquals(0.9912777338065777, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.13178943227473028, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex10);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex11);
      assertSame(complex10, complex3);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex1);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      
      Complex complex12 = complex9.cos();
      assertNotNull(complex12);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.9912777338065777, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.13178943227473028, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(17.0, complex2.getImaginary(), 0.01);
      assertEquals(0.05889151782819173, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-1.5707963267948966), complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(6.133855398334744E-17, complex12.getReal(), 0.01);
      assertEquals(0.05892556509887896, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex10);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex11);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex10);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex10));
      
      Complex complex13 = complex3.divide(complex4);
      assertNotNull(complex13);
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.9912777338065777, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.13178943227473028, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(17.0, complex2.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex12);
      assertSame(complex13, complex10);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex2);
      assertSame(complex13, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex6);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertSame(complex3, complex10);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertSame(complex3, complex13);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex11);
      assertTrue(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex12));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex11));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      assertNotNull(string0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.INF.multiply(0);
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.I.divide(complex0);
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex1.NaN.pow((double) 0);
      assertNotNull(complex3);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex0.cos();
      assertNotNull(complex4);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = complex4.atan();
      assertNotNull(complex5);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex4.NaN.cos();
      assertNotNull(complex6);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      
      Complex complex7 = complex6.I.add(Double.NaN);
      assertNotNull(complex7);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertSame(complex6, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertSame(complex6, complex2);
      assertNotSame(complex7, complex5);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex6);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      
      complex7.INF.hashCode();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertSame(complex6, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertSame(complex6, complex2);
      assertNotSame(complex7, complex5);
      assertSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex6);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = complex4.sqrt1z();
      assertNotNull(complex8);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      
      Complex complex9 = complex4.ONE.reciprocal();
      assertNotNull(complex9);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex9);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex6);
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex6));
      
      Complex complex10 = complex9.INF.sinh();
      assertNotNull(complex10);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex9);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex10);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex9);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex8));
      assertTrue(complex10.equals((Object)complex7));
      assertTrue(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex1));
      assertTrue(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      
      Complex complex11 = complex4.cos();
      assertNotNull(complex11);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex9);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex9));
      
      Complex complex12 = complex11.ZERO.divide((double) 0);
      assertNotNull(complex12);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex9);
      assertNotSame(complex12, complex9);
      assertSame(complex12, complex3);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex4);
      assertSame(complex12, complex7);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex1);
      assertSame(complex12, complex6);
      assertSame(complex12, complex2);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex5));
      assertTrue(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex1));
      
      Complex complex13 = complex0.conjugate();
      assertNotNull(complex13);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex2);
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex9));
      assertTrue(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertTrue(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex2));
      
      ComplexField complexField0 = complex12.getField();
      assertNotNull(complexField0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex12, complex13);
      assertSame(complex12, complex3);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex4);
      assertSame(complex12, complex7);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex8);
      assertSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex1);
      assertSame(complex12, complex2);
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex13));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex5));
      assertTrue(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.cos();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.divide(complex0);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.I.cos();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.INF.cosh();
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      double double0 = complex2.ZERO.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.atan();
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex0));
      
      Complex complex4 = complex1.tanh();
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.9126365759632116, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      
      double double1 = complex4.NaN.abs();
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.9126365759632116, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex5 = complex4.createComplex(0.0, 0.0);
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.9126365759632116, complex4.getReal(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = Complex.NaN;
      assertNotNull(complex1);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.multiply(complex1);
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.reciprocal();
      assertSame(complex1, complex0);
      
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.INF.add(0.0);
      complex1.NaN.hashCode();
      complex0.toString();
      complex1.ZERO.tanh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ZERO.sqrt1z();
      complex5.sqrt();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.tan();
      complex3.add(complex1);
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.113713162029408E267, 9.113713162029408E267);
      Complex complex1 = complex0.acos();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
      assertEquals(9.113713162029408E267, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      assertEquals(0.7853981633974483, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.sinh();
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isInfinite());
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      assertEquals(0.7615941559557649, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.valueOf(543.60585, 543.60585);
      Complex complex1 = Complex.valueOf(543.60585, 2212.927067161);
      assertEquals(543.60585, complex1.getReal(), 0.01);
      assertEquals(2212.927067161, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.reciprocal();
      assertEquals(9.197840678131039E-4, complex2.getReal(), 0.01);
      assertEquals((-9.197840678131039E-4), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      assertTrue(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = new Complex(3.220665454652531E-8);
      assertEquals(3.220665454652531E-8, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.nthRoot(7);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(list0.contains(complex0));
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex1.multiply(complex2);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.557407724654902, complex2.getImaginary(), 0.01);
      assertSame(complex4, complex3);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.readResolve();
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.sinh();
      assertTrue(complex1.isNaN());
      
      Complex complex2 = complex0.sinh();
      double double0 = complex2.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex3 = complex2.createComplex(781.1206832008954, (-960.6709991757062));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(781.1206832008954, complex3.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-960.6709991757062), complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf((-1516.271351389));
      Complex complex3 = Complex.valueOf((-3911.18343690275), (-2619.04));
      assertEquals((-3911.18343690275), complex3.getReal(), 0.01);
      assertEquals((-2619.04), complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.INF.divide(complex1);
      assertFalse(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
      assertTrue(complex4.isNaN());
      
      Complex complex5 = complex0.multiply((-1915.0));
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.INF.getField();
      List<Complex> list0 = complex1.ONE.nthRoot(17);
      assertEquals(17, list0.size());
      assertFalse(list0.contains(complex0));
      
      complex1.I.getArgument();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex2.reciprocal();
      complex4.I.hashCode();
      assertSame(complex2, complex3);
      
      Complex complex5 = complex1.sinh();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex6 = new Complex(Double.NaN);
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex0.createComplex(6.349826172787151E136, Double.NaN);
      Complex.valueOf(20.0);
      Complex complex9 = new Complex(1.0);
      Complex complex10 = complex7.add(complex9);
      assertTrue(complex0.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex8));
      assertSame(complex10, complex7);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6905817003766437);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.6905817003766437, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }
}
