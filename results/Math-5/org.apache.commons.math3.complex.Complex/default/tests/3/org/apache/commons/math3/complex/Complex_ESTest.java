/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:39:29 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2.7670181051374297E170), (-52.105654));
      complex1.ZERO.toString();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(2850);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tan();
      complex3.I.sqrt();
      Complex complex4 = complex1.createComplex(2850, (-3349.8698956289063));
      complex4.pow((double) 2850);
      Complex complex5 = Complex.valueOf(0.0, (-1.0));
      complex5.sqrt();
      Complex complex6 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 1073741824;
      complex0.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3333.0), (-3333.0));
      Complex complex1 = complex0.ZERO.multiply(3634);
      Complex complex2 = complex0.I.subtract((-3333.0));
      complex1.ONE.negate();
      Complex complex3 = complex0.sinh();
      complex3.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.ONE.tanh();
      complex4.ZERO.divide(complex1);
      complex1.INF.multiply((double) 3634);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.NaN.divide(complex0);
      complex6.INF.getField();
      Complex complex7 = complex5.sinh();
      complex1.ONE.asin();
      Complex complex8 = complex2.log();
      complex7.add(complex0);
      Complex complex9 = complex1.conjugate();
      complex9.cosh();
      complex9.ONE.sin();
      Complex complex10 = complex0.add(3950.5220026941);
      complex10.ZERO.conjugate();
      complex2.exp();
      complex5.add((-1760.69867251));
      Complex complex11 = complex1.sqrt1z();
      complex11.readResolve();
      Complex complex12 = complex8.acos();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.multiply(Double.NaN);
      complex0.multiply(1.0);
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-361.18));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.asin();
      complex3.toString();
      Complex complex4 = Complex.INF;
      Complex.valueOf(0.7462190241725836, (-361.18));
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(371, Double.POSITIVE_INFINITY);
      complex0.log();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.pow((-2996.0978));
      Complex complex1 = complex0.createComplex(20.0, 20.0);
      Complex complex2 = complex0.log();
      Complex.valueOf(1716.0, 1716.0);
      Complex complex3 = complex1.tan();
      complex0.sqrt();
      complex2.add((-2196.71));
      complex0.abs();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.93320806324482E-6));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(9.423976538577447E138, 9.423976538577447E138);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(113);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex2 = complex1.asin();
      complex0.toString();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.sqrt1z();
      complex0.ONE.readResolve();
      Complex complex1 = complex0.ONE.sqrt();
      complex1.INF.hashCode();
      complex0.equals("iBl3Mb4[");
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.valueOf(0.9127689912020085, (-3024.2959908));
      Complex complex5 = complex3.multiply(complex2);
      complex5.acos();
      complex4.cosh();
      complex2.multiply((-7.069718155041443));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.ZERO;
      complex3.divide(complex4);
      complex1.INF.divide((-5616684.456133407));
      Complex complex5 = complex0.subtract(complex1);
      complex2.isNaN();
      complex5.INF.sin();
      complex4.readResolve();
      complex5.multiply(0.4033359894180144);
      Complex complex6 = complex3.acos();
      Complex complex7 = Complex.valueOf((-1319.7043513572));
      complex7.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.subtract((-3371.21));
      complex1.getImaginary();
      complex1.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.tanh();
      complex1.getArgument();
      complex2.pow(20.0);
      Complex complex4 = complex3.cosh();
      complex4.atan();
      Complex complex5 = complex2.asin();
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(20.0);
      Complex complex7 = complex1.multiply(1);
      complex3.pow(complex6);
      complex1.conjugate();
      Complex complex8 = Complex.I;
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.cos();
      complex1.subtract(complex2);
      complex3.reciprocal();
      complex6.toString();
      complex7.createComplex(0.7853981633974483, 1.0);
      complex7.isNaN();
      complex7.getArgument();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      complex1.abs();
      complex1.divide(0.0);
      Complex complex2 = complex0.add(Double.POSITIVE_INFINITY);
      complex2.subtract(20.0);
      complex2.subtract(20.0);
      complex0.multiply(37);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.getArgument();
      complex1.add(complex0);
      complex0.multiply(2.0);
      complex0.log();
      Complex complex2 = complex1.atan();
      complex2.divide((-2369.954737148667));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.isInfinite();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      complex1.abs();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex0.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.pow(complex3);
      complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.subtract(0.0);
      complex1.getImaginary();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex2.I.tanh();
      complex0.NaN.getArgument();
      complex1.cosh();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.INF.multiply(Double.NaN);
      Complex complex7 = new Complex(1140.0, Double.NaN);
      complex6.I.multiply(1);
      complex0.pow(complex0);
      Complex complex8 = complex1.conjugate();
      complex8.ZERO.cos();
      complex0.ZERO.subtract(complex2);
      Complex complex9 = complex3.reciprocal();
      complex9.toString();
      complex9.INF.createComplex(Double.NaN, 1.0);
      complex3.isNaN();
      complex1.getArgument();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.multiply(complex2);
      complex0.nthRoot(787);
      complex3.readResolve();
      Complex complex4 = Complex.valueOf((-349.4883153378), (-20.0));
      complex4.pow(complex3);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex0.cos();
      complex6.getReal();
      Complex complex7 = complex5.add((-5.185064518887831E-9));
      complex3.add((double) 787);
      complex3.nthRoot(37);
      Complex complex8 = Complex.valueOf((-1065.14683376), (-20.0));
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.multiply(complex6);
      complex10.subtract(668.589);
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.valueOf(668.589, 0.40808206181339196);
      Complex complex13 = complex12.multiply(787);
      complex7.conjugate();
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.createComplex((-2369.954737148667), 0.0);
      Complex complex1 = complex0.multiply((-20.0));
      complex1.isInfinite();
      Complex complex2 = complex0.cosh();
      Complex complex3 = new Complex(0.0, 20.0);
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.sinh();
      complex4.abs();
      Complex complex7 = complex2.pow(complex4);
      complex4.conjugate();
      complex7.sqrt1z();
      complex6.sqrt();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex0.log();
      Complex complex10 = Complex.ONE;
      complex0.exp();
      complex9.atan();
      Complex complex11 = new Complex(20.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(4620.794717373, 4620.794717373);
      complex1.log();
      complex1.tan();
      Complex complex2 = Complex.I;
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1742.689714624587));
      Complex complex1 = complex0.atan();
      complex1.log();
      Complex complex2 = complex0.log();
      complex2.abs();
      Complex complex3 = Complex.I;
      complex3.isNaN();
      complex0.readResolve();
      Complex complex4 = complex3.acos();
      complex3.subtract((-1742.689714624587));
      Complex.valueOf((-1742.689714624587), 0.07341018319129944);
      complex3.subtract((-5616684.456133407));
      complex3.exp();
      complex4.pow((-1742.689714624587));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.createComplex((-2369.954737148667), 0.0);
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex1.divide(0.0);
      complex3.exp();
      Complex complex5 = complex2.exp();
      complex5.sqrt();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.divide(complex4);
      Complex complex9 = complex4.subtract(complex8);
      complex3.isNaN();
      complex6.readResolve();
      complex9.acos();
      complex5.subtract(Double.NaN);
      Complex.valueOf(295.4442919093081, 1.9441311963617518E-17);
      Complex complex10 = Complex.valueOf((-2760.0), 2.0);
      complex10.subtract(0.07341018319129944);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.createComplex((-2369.954737148667), 0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.subtract(complex2);
      complex1.atan();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = new Complex(1932.15, (-5616684.456133407));
      Complex complex6 = complex5.add(4.0430160253378594E-275);
      Complex complex7 = complex3.reciprocal();
      complex0.pow(1932.15);
      complex5.subtract(complex6);
      complex2.reciprocal();
      complex2.abs();
      complex2.nthRoot(12);
      Complex complex8 = complex6.negate();
      complex6.isInfinite();
      complex2.tanh();
      complex6.cos();
      Complex complex9 = Complex.valueOf((-6.402740469853475E39), 2.0);
      complex9.hashCode();
      complex4.toString();
      complex4.subtract(complex8);
      complex6.divide(complex2);
      complex7.atan();
      complex1.isInfinite();
      complex1.atan();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.tan();
      Complex complex1 = complex0.asin();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.hashCode();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.reciprocal();
      complex2.ONE.log();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = new Complex((-1315.196060913844));
      complex10.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = complex8.subtract(complex9);
      complex3.reciprocal();
      complex8.abs();
      complex10.nthRoot(827);
      complex4.negate();
      complex6.isInfinite();
      Complex complex12 = complex6.tanh();
      Complex complex13 = complex11.cos();
      complex12.hashCode();
      complex5.toString();
      Complex complex14 = new Complex(827);
      complex14.subtract(complex1);
      complex4.divide(complex3);
      complex3.atan();
      complex9.isInfinite();
      complex13.atan();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.hashCode();
      Complex complex2 = complex1.tan();
      complex1.reciprocal();
      Complex complex3 = complex2.ONE.log();
      complex3.divide((-2362.417));
      complex1.exp();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.divide(complex6);
      complex2.subtract(complex5);
      complex4.isNaN();
      complex7.readResolve();
      Complex complex8 = complex5.acos();
      complex8.subtract((-20.0));
      Complex.valueOf(0.07341018319129944, (-2362.417));
      complex4.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-4822.196460123821), (-4822.196460123821));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.INF.multiply((-1552.863));
      complex0.equals(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.createComplex((-1552.863), (-20.0));
      Complex complex6 = complex0.sinh();
      complex2.abs();
      complex3.pow(complex1);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex7.add(6.123233995736766E-17);
      complex9.getArgument();
      Complex complex12 = Complex.I;
      complex12.pow(complex5);
      complex5.tan();
      complex11.divide(1.5442993640899658);
      complex8.getField();
      complex11.getReal();
      Complex complex13 = Complex.ONE;
      try { 
        complex13.nthRoot((-2540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,540
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.INF.multiply((-1552.863));
      complex0.equals(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.atan();
      complex4.createComplex((-1552.863), (-20.0));
      Complex complex5 = complex0.sinh();
      complex2.abs();
      Complex complex6 = complex3.pow(complex1);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = Complex.NaN;
      complex4.add((-20.0));
      complex1.getArgument();
      Complex complex11 = Complex.I;
      complex4.pow(complex7);
      complex1.tan();
      complex6.divide(3.141592653589793);
      complex8.getField();
      complex9.getReal();
      Complex complex12 = Complex.ONE;
      try { 
        complex12.nthRoot((-3044));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,044
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(819.00865646627);
      Complex complex2 = Complex.INF;
      complex2.getImaginary();
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.exp();
      complex4.tanh();
      complex5.getArgument();
      Complex complex6 = complex3.cosh();
      Complex complex7 = new Complex(Double.NaN, 1.0950789876E7);
      complex1.atan();
      Complex complex8 = complex5.asin();
      complex5.multiply(Double.NaN);
      Complex.valueOf(2695.38);
      Complex complex9 = complex5.multiply(1);
      complex8.pow(complex1);
      complex4.conjugate();
      complex9.cos();
      complex5.subtract(complex7);
      Complex complex10 = Complex.NaN;
      complex10.reciprocal();
      complex1.toString();
      complex1.createComplex(0.0, 0.05400216201516023);
      complex7.isNaN();
      complex6.getArgument();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex((-20.0), (-20.0));
      Complex complex3 = Complex.valueOf((-20.0));
      complex2.reciprocal();
      complex3.getArgument();
      Complex complex4 = complex0.tanh();
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.multiply(0.0);
      complex1.equals(object0);
      complex0.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.createComplex(3526.0, (-1552.863));
      Complex complex4 = complex3.sinh();
      complex3.abs();
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex3.sqrt1z();
      complex0.sqrt();
      Complex complex8 = Complex.NaN;
      complex7.add(3852.7989172508082);
      complex7.getArgument();
      Complex complex9 = Complex.I;
      complex9.pow(complex3);
      complex2.tan();
      complex4.divide(0.0);
      complex5.getField();
      Complex complex10 = Complex.I;
      complex10.getReal();
      try { 
        complex6.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-3066.0), (-3066.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.hashCode();
      complex1.tan();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.ZERO;
      complex2.getArgument();
      Complex complex4 = Complex.valueOf(2.292498520423419E298, 2.292498520423419E298);
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = complex5.multiply(1.5707963267948966);
      Complex complex7 = new Complex((-5616684.456133407), 1.5707963267948966);
      complex7.log();
      complex7.exp();
      complex7.atan();
      complex6.divide(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-5616684.456133407), Double.POSITIVE_INFINITY);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.abs();
      complex1.tanh();
      Complex.valueOf((-25.04986356067765), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(659.97636268, 3.1408919441362495E-288);
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.ONE.getArgument();
      complex1.ZERO.hashCode();
      Complex complex2 = Complex.valueOf(659.97636268, Double.NaN);
      Complex complex3 = complex2.NaN.divide(659.97636268);
      complex0.INF.subtract(3.1408919441362495E-288);
      Complex complex4 = complex0.multiply((-990));
      Complex complex5 = complex4.I.multiply(complex1);
      complex5.INF.atan();
      Complex complex6 = Complex.valueOf(0.5406215878554037);
      Complex complex7 = complex6.createComplex(782.26, 6.283185307179586);
      Complex complex8 = Complex.valueOf((-897.8));
      Complex complex9 = complex7.tanh();
      ComplexField complexField0 = complex8.getField();
      complex7.multiply(0.5406215878554037);
      Complex complex10 = complex0.negate();
      complex0.ONE.readResolve();
      complex10.NaN.multiply((-990));
      complex4.createComplex((-990), Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.NaN;
      complex11.I.divide(complex8);
      Complex complex12 = complex5.add(complex11);
      complex12.ONE.add(0.7861513777574233);
      complex2.negate();
      complex2.equals(complexField0);
      complex4.sin();
      complex9.readResolve();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((double) 3698);
      complex1.asin();
      complex0.abs();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.multiply((-1915.887836877251));
      complex0.equals("wV");
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.createComplex((-1552.863), (-1552.863));
      complex3.sinh();
      complex1.pow(complex5);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = Complex.NaN;
      complex1.add((-1915.887836877251));
      complex3.getArgument();
      Complex complex9 = Complex.I;
      complex9.pow(complex6);
      complex7.tan();
      complex8.divide((-1552.863));
      complex9.getField();
      Complex complex10 = Complex.ONE;
      complex10.getReal();
      try { 
        complex10.nthRoot((-2040109465));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,040,109,465
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.createComplex((-2369.954737148667), 0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.ZERO.multiply(complex1);
      complex0.nthRoot(787);
      complex4.reciprocal();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex1.multiply(787);
      Complex complex8 = complex5.add(0.0);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.reciprocal();
      complex6.multiply(333);
      Complex complex11 = complex10.add(complex8);
      complex5.divide(complex8);
      complex5.subtract(1.1642439930208906E-8);
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex1.reciprocal();
      complex0.pow(complex12);
      Complex complex14 = complex10.subtract(complex7);
      Complex complex15 = complex14.subtract(complex13);
      Complex complex16 = complex11.sqrt1z();
      Complex complex17 = complex2.cos();
      complex17.tan();
      complex16.pow(complex5);
      Complex.valueOf(1.1642439930208906E-8, 3.3803067202247166E-123);
      complex15.subtract(complex10);
      Complex.valueOf((double) 333);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 877.42);
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.multiply(0.0);
      complex2.INF.nthRoot(234);
      Complex complex3 = complex0.asin();
      complex3.readResolve();
      Complex complex4 = Complex.valueOf(418.7992, 418.7992);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex1.cos();
      complex2.divide(complex5);
      complex4.getReal();
      Complex complex7 = complex6.add((-20.0));
      complex5.add(418.7992);
      complex2.nthRoot(37);
      Complex.valueOf(2941.0, (-83.9668364922549));
      Complex complex8 = Complex.INF;
      complex6.multiply(complex1);
      complex8.subtract(877.42);
      complex2.getArgument();
      complex7.isNaN();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.subtract(0.0);
      complex1.getImaginary();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex0.subtract((-1349.0));
      Complex complex5 = new Complex(0.0, 1.0);
      complex0.multiply(2941);
      Complex complex6 = new Complex((-501.59755662), (-7.47752271621367));
      Complex complex7 = complex0.pow(complex5);
      complex3.equals(complex1);
      complex6.divide(complex7);
      Complex.valueOf(2474.766166320024, (double) 2941);
      complex4.atan();
      complex3.subtract(complex4);
      try { 
        complex6.nthRoot((-71));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -71
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.multiply((double) 635);
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.exp();
      Object object0 = new Object();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf(20.0, (-1.5702225012413));
      Complex complex4 = complex3.tanh();
      complex4.getArgument();
      Complex complex5 = complex2.pow((-1.5702225012413));
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.multiply((-1.5702225012413));
      Complex complex10 = Complex.valueOf(1.0);
      Complex complex11 = complex10.multiply(1);
      Complex complex12 = complex11.pow(complex2);
      Complex complex13 = complex9.conjugate();
      complex0.cos();
      complex10.subtract(complex5);
      complex13.reciprocal();
      complex6.toString();
      complex12.createComplex(1916.454, 2981.307582768379);
      complex0.isNaN();
      Complex complex14 = new Complex(1140.0, (-1.3810978455418157));
      complex14.getArgument();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Object object0 = new Object();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.subtract(20.0);
      Complex complex4 = complex1.subtract(5616684.456133407);
      Complex complex5 = complex1.multiply(1340);
      Complex complex6 = new Complex(5616684.456133407, 20.0);
      Complex complex7 = complex3.pow(complex1);
      complex5.equals(complex7);
      complex4.divide(complex7);
      Complex complex8 = Complex.valueOf((double) 1340, 178.0);
      complex2.atan();
      complex6.subtract(complex8);
      try { 
        complex4.nthRoot((-1513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,513
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(0.0);
      complex1.equals(complex2);
      Complex complex3 = new Complex(650);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Object object0 = new Object();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.subtract(20.0);
      Complex complex4 = complex3.subtract(918.52);
      Complex complex5 = complex2.multiply((-482));
      Complex complex6 = new Complex(20.0, 68.764277154);
      complex5.equals(complex1);
      complex3.divide(complex4);
      Complex complex7 = Complex.valueOf(0.0, (-1.3810978455418157));
      complex7.atan();
      complex0.subtract(complex3);
      try { 
        complex1.nthRoot((-2095105998));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,095,105,998
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.createComplex((-2369.954737148667), 0.0);
      Complex.valueOf(0.0);
      Complex complex2 = complex0.I.conjugate();
      complex2.ZERO.multiply(complex1);
      complex0.nthRoot(787);
      complex1.readResolve();
      Complex.valueOf((-7.589116490794836), 0.0);
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ONE.divide(complex4);
      complex0.getReal();
      complex0.add((-1993.186828285118));
      complex6.add(0.0);
      complex1.nthRoot(37);
      Complex.valueOf((-83.9668364922549), (-1.0));
      Complex complex7 = Complex.INF;
      complex1.multiply(complex7);
      complex1.subtract((-5.159602957634814E-9));
      complex3.getArgument();
      complex3.isNaN();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.subtract((-3371.21));
      complex1.getImaginary();
      complex1.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.tanh();
      complex1.getArgument();
      complex2.pow(20.0);
      Complex complex4 = complex3.cosh();
      complex4.atan();
      complex2.asin();
      Complex complex5 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(20.0);
      Complex complex6 = complex1.multiply(1);
      complex3.pow(complex5);
      complex1.conjugate();
      Complex complex7 = Complex.I;
      complex7.cos();
      complex1.subtract(complex2);
      complex3.reciprocal();
      complex5.toString();
      complex6.createComplex(0.7853981633974483, 1.0);
      complex6.isNaN();
      complex6.getArgument();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tan();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex.valueOf((double) (-1055), 1.3810978455418157);
      Complex complex0 = new Complex(0.0, (-1055));
      complex0.reciprocal();
      complex0.sinh();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1742.689714624587));
      Complex complex1 = complex0.atan();
      complex1.getArgument();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.multiply((-3.141592653589793));
      complex1.log();
      complex3.exp();
      complex0.atan();
      Complex complex4 = new Complex(892.7, (-1742.689714624587));
      complex4.divide((-1742.689714624587));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.INF.multiply((-1552.863));
      complex0.equals(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.atan();
      complex4.createComplex((-1552.863), (-20.0));
      Complex complex5 = complex0.sinh();
      complex2.abs();
      complex3.pow(complex1);
      complex5.conjugate();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = Complex.NaN;
      complex8.add((-2084.4932668));
      complex2.getArgument();
      Complex complex9 = Complex.I;
      complex6.pow(complex9);
      complex7.tan();
      Complex complex10 = complex3.divide(2089.18882157);
      complex0.getField();
      complex6.getReal();
      complex10.nthRoot(684);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Object object0 = new Object();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.multiply(6.562319473965767E278);
      complex2.nthRoot(234);
      Complex complex4 = complex3.asin();
      complex4.reciprocal();
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.valueOf((double) 234);
      Complex complex7 = complex6.multiply((-1909));
      complex6.add(20.0);
      Complex complex8 = Complex.valueOf((double) (-1909), (double) 234);
      complex8.reciprocal();
      Complex complex9 = complex1.multiply(234);
      Complex complex10 = Complex.I;
      complex2.add(complex10);
      complex5.divide(complex6);
      Complex complex11 = complex7.subtract((double) (-1909));
      Complex complex12 = complex5.sqrt1z();
      complex9.reciprocal();
      Complex complex13 = complex10.pow(complex6);
      Complex complex14 = complex7.subtract(complex12);
      complex1.subtract(complex13);
      complex11.sqrt1z();
      complex9.cos();
      complex9.tan();
      complex6.pow(complex1);
      Complex.valueOf(2.0, 6.562319473965767E278);
      complex7.subtract(complex14);
      Complex.valueOf(20.0);
      Complex.valueOf(2.0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex2.I.sqrt();
      complex5.NaN.hashCode();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex4.tanh();
      complex2.getArgument();
      Complex complex9 = complex6.pow(575.482);
      Complex complex10 = complex0.cosh();
      complex10.atan();
      complex4.asin();
      Complex complex11 = complex10.multiply(3178.3413631);
      Complex complex12 = Complex.valueOf(7.589116490794836);
      Complex complex13 = new Complex(0.9999994551339897);
      complex13.multiply(1);
      complex7.pow(complex8);
      complex12.conjugate();
      complex9.cos();
      complex11.subtract(complex13);
      Complex complex14 = complex7.reciprocal();
      complex8.toString();
      complex6.createComplex((-2749.69860520655), 2.451245443147225E40);
      complex2.isNaN();
      complex0.getArgument();
      complex14.tan();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.subtract(complex1);
      complex2.reciprocal();
      complex3.getArgument();
      Complex complex4 = complex0.tanh();
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.log();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(550.0, (-7.821867597227376E-9));
      Complex complex1 = Complex.valueOf((-7.821867597227376E-9));
      complex1.I.reciprocal();
      int int0 = (-4014);
      Complex complex2 = complex0.NaN.multiply((-4014));
      complex2.I.toString();
      complex0.NaN.getArgument();
      Complex complex3 = complex0.INF.multiply(1);
      complex0.toString();
      complex3.ZERO.createComplex(0.0, (-7.821867597227376E-9));
      try { 
        complex0.nthRoot((-1253));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,253
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-527.52));
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.INF.pow((-527.52));
      complex3.ZERO.getArgument();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex0.divide((-527.52));
      Complex complex8 = complex0.multiply(697);
      complex8.hashCode();
      complex2.nthRoot(697);
      complex6.getReal();
      Complex complex9 = complex2.divide(complex7);
      complex6.INF.negate();
      complex6.sqrt1z();
      complex7.cos();
      Complex complex10 = complex4.pow(complex6);
      complex6.cos();
      Complex.valueOf(2.0, 2.0);
      complex0.getImaginary();
      Complex complex11 = complex4.log();
      complex11.NaN.log();
      complex10.pow(complex7);
      complex1.sinh();
      Complex complex12 = complex11.tanh();
      Object object0 = new Object();
      complex6.equals(object0);
      complex9.sin();
      complex12.negate();
      complex12.pow((-527.52));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-5964.59529723));
      complex0.ZERO.toString();
      Complex complex1 = Complex.NaN;
      complex0.tan();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.NaN.sin();
      complex3.ONE.log();
      Complex complex4 = complex0.I.subtract(complex1);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.subtract((-5964.59529723));
      Complex complex7 = complex2.INF.divide(complex3);
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex6.I.sqrt();
      complex9.ZERO.createComplex((-5964.59529723), (-5964.59529723));
      complex3.pow(complex2);
      Complex complex10 = Complex.valueOf((-5964.59529723), 7.303420385174346E-8);
      Complex complex11 = complex4.subtract(complex10);
      complex8.isNaN();
      complex0.add(complex11);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-779.34644));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.I.divide(complex0);
      complex0.ZERO.readResolve();
      complex1.ONE.conjugate();
      complex1.subtract(1.0);
      complex0.ZERO.hashCode();
      Complex.valueOf(802.7);
      Complex complex3 = complex0.NaN.add(1.7966744899749756);
      complex2.NaN.nthRoot(1);
      Complex complex4 = complex0.asin();
      complex4.sin();
      complex2.subtract(complex0);
      complex0.negate();
      complex4.pow(complex3);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-1.1349246400274207E46));
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ONE.divide((-1079.0891797));
      complex0.tanh();
      Complex complex2 = new Complex(1494.636925893, 2030.5);
      Complex complex3 = new Complex(2369.954737148667, 779.677);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(2013);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 877.42);
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf(0.0, (-575.482));
      Complex complex2 = complex0.multiply(0.0);
      complex2.INF.nthRoot(234);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.reciprocal();
      complex0.tanh();
      Complex complex5 = complex2.I.multiply(234);
      Complex complex6 = complex2.add((double) 234);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex3.multiply(333);
      complex4.I.add(complex8);
      Complex complex9 = complex2.divide(complex7);
      Complex complex10 = complex9.ZERO.subtract((double) 234);
      Complex complex11 = complex6.sqrt1z();
      complex8.reciprocal();
      complex3.pow(complex2);
      Complex complex12 = complex11.subtract(complex5);
      Complex complex13 = complex9.subtract(complex4);
      complex9.sqrt1z();
      complex12.cos();
      complex13.tan();
      complex1.pow(complex10);
      Complex complex14 = Complex.valueOf((-575.482), (-1757.080393698224));
      complex10.subtract(complex14);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(Double.NaN);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.multiply((-1552.863));
      complex0.equals(object0);
      complex0.isInfinite();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.ONE.sqrt1z();
      complex4.NaN.nthRoot(431);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex5.I.add(1.3861841053630075E-123);
      Complex complex9 = complex5.NaN.add(complex3);
      complex3.getReal();
      Complex complex10 = complex1.ONE.acos();
      complex10.I.multiply(complex8);
      complex10.ZERO.asin();
      Complex complex11 = complex1.sqrt1z();
      complex11.NaN.subtract(complex7);
      complex11.add((-1552.863));
      complex1.subtract((-20.0));
      complex11.getImaginary();
      complex2.getArgument();
      complex2.getArgument();
      complex5.equals((Object) null);
      complex9.isInfinite();
      complex0.equals(complex4);
      Complex complex12 = Complex.ONE;
      complex10.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      complex0.sqrt();
      Complex complex1 = Complex.valueOf((-2216.347249979583), (-2216.347249979583));
      double double0 = 0.0;
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.ZERO.asin();
      complex2.conjugate();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.ONE.tan();
      complex6.ONE.atan();
      double double1 = 3319.13914905;
      try { 
        complex4.NaN.nthRoot((-287));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -287
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1196.734072);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.multiply(complex1);
      complex2.tanh();
      Complex complex4 = complex0.multiply(518.87);
      complex4.NaN.sqrt();
      complex0.ZERO.pow(complex3);
      Complex complex5 = complex3.add((-2225.11676));
      complex5.readResolve();
      Complex complex6 = complex5.subtract(complex2);
      complex6.I.toString();
      complex5.ONE.negate();
      complex0.sinh();
      Complex.valueOf(518.87, 2143.751531954);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex0.acos();
      Complex complex3 = new Complex((-1125.830852));
      complex2.add(complex3);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.INF.sinh();
      complex2.asin();
      Complex complex3 = complex1.INF.conjugate();
      complex1.I.abs();
      Complex complex4 = complex1.multiply(2556);
      complex1.isInfinite();
      complex0.abs();
      complex0.hashCode();
      complex3.asin();
      complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-411));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-3378.47));
      Complex complex2 = complex1.ZERO.exp();
      complex0.multiply(337);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.multiply(complex0);
      complex4.NaN.conjugate();
      Complex complex5 = complex3.I.divide((-322.045031548873));
      Complex complex6 = complex3.ONE.log();
      Complex complex7 = complex2.tan();
      complex7.INF.abs();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.I.divide((double) 337);
      Complex complex10 = complex9.NaN.atan();
      complex9.ONE.multiply(complex7);
      complex8.I.hashCode();
      complex6.I.abs();
      complex3.equals(complex8);
      complex5.ZERO.negate();
      complex1.negate();
      Complex complex11 = complex6.ZERO.negate();
      complex11.ZERO.pow(complex0);
      Complex complex12 = complex6.pow(complex4);
      complex4.multiply(20.0);
      Complex complex13 = complex4.add(complex12);
      Complex complex14 = complex5.log();
      complex14.multiply(0.0);
      complex6.getArgument();
      complex13.acos();
      complex8.getField();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sinh();
      complex1.hashCode();
      complex1.divide(Double.NaN);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-3927.1959705012));
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.NaN.divide((-3927.1959705012));
      Complex complex3 = complex2.ONE.exp();
      complex2.exp();
      complex0.INF.sqrt();
      Complex complex4 = Complex.ZERO;
      complex4.I.divide(complex2);
      Complex complex5 = complex0.subtract(complex4);
      complex4.isNaN();
      complex5.readResolve();
      complex3.acos();
      complex4.subtract(817.78588);
      Complex.valueOf(683.9144202728, 0.0);
      complex4.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2346.7658376, 0.0);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.add(0.0);
      complex0.ONE.getField();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.negate();
      complex3.ONE.nthRoot(1);
      complex1.divide(complex0);
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex2.INF.subtract(complex1);
      Complex complex5 = complex4.subtract(complex3);
      complex5.I.sin();
      complex4.ZERO.hashCode();
      complex0.equals(complex2);
      complex2.NaN.add((double) 1);
      complex0.toString();
      Complex complex6 = complex2.multiply(complex0);
      complex1.isNaN();
      complex0.conjugate();
      complex6.readResolve();
      complex4.createComplex(0.0, 1);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.I.multiply(complex1);
      complex3.ONE.asin();
      Complex complex4 = complex2.I.sqrt();
      complex4.NaN.hashCode();
      complex4.INF.asin();
      Complex complex5 = complex4.sinh();
      complex5.I.multiply(complex4);
      Complex complex6 = complex0.sin();
      complex6.getReal();
      complex4.getReal();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex7.ONE.pow((-2245.03768162));
      Complex complex9 = complex7.ZERO.multiply(complex1);
      complex9.ZERO.exp();
      Complex complex10 = complex9.ONE.add(complex2);
      complex7.NaN.negate();
      Complex complex11 = complex6.divide(0.0);
      Complex complex12 = complex11.I.negate();
      Complex complex13 = complex12.ONE.tanh();
      complex13.ZERO.pow(complex10);
      Complex.valueOf(0.0, 0.0);
      complex12.NaN.add(0.0);
      complex6.getReal();
      Complex.valueOf(0.8414709848078965);
      complex12.INF.log();
      complex2.divide(0.0);
      complex7.sin();
      complex0.getImaginary();
      complex12.equals(complex0);
      complex5.cos();
      complex8.isNaN();
      complex10.tanh();
      Complex complex14 = complex0.cosh();
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals("Q{");
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.createComplex((-2369.954737148667), 0.0);
      Complex.valueOf(0.0);
      Complex complex2 = complex0.I.conjugate();
      complex2.ZERO.multiply(complex1);
      complex0.nthRoot(787);
      complex1.readResolve();
      Complex complex3 = Complex.valueOf((-5.185064518887831E-9), 0.0);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.cos();
      complex5.ONE.divide(complex4);
      complex0.getReal();
      Complex complex6 = complex0.add((-1993.186828285118));
      complex6.ONE.add((-5.185064518887831E-9));
      complex1.nthRoot(37);
      Complex.valueOf((-83.9668364922549), (-1.0));
      Complex complex7 = Complex.INF;
      complex1.multiply(complex7);
      complex1.subtract((-5.159602957634814E-9));
      complex3.getArgument();
      complex3.isNaN();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      complex0.pow(920.242);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex2.multiply((-1));
      complex2.ZERO.tanh();
      complex2.getField();
      complex0.log();
      Complex complex5 = Complex.valueOf((-894.563094));
      complex5.ZERO.readResolve();
      complex1.getArgument();
      complex2.multiply(complex3);
      Complex complex6 = complex1.subtract(Double.NaN);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.INF.divide(complex2);
      complex8.NaN.hashCode();
      Complex complex9 = complex6.INF.createComplex(Double.POSITIVE_INFINITY, Double.NaN);
      complex9.INF.createComplex(17.9, (-4.30610076666344E-131));
      complex2.abs();
      complex1.isNaN();
      complex3.getImaginary();
      Complex complex10 = complex0.tan();
      complex1.readResolve();
      Complex complex11 = complex1.subtract(complex7);
      Complex complex12 = complex11.INF.add(complex10);
      complex12.I.asin();
      complex11.I.sin();
      Complex complex13 = complex2.divide(complex6);
      complex2.isInfinite();
      complex1.INF.reciprocal();
      complex13.asin();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.createComplex((-1411.16944), (-3034.864374689732));
      complex0.getArgument();
      complex0.getImaginary();
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(1.2765238285064697, 1.2765238285064697);
      Complex complex2 = complex1.ONE.subtract(0.0);
      complex1.ONE.hashCode();
      complex2.INF.cos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.tanh();
      complex3.NaN.toString();
      complex1.INF.divide(complex2);
      Complex complex5 = complex3.subtract(2843.158411354);
      Complex complex6 = complex5.subtract(0.0);
      Complex complex7 = complex4.pow(8.498192212235393E178);
      Complex complex8 = complex7.sinh();
      complex2.createComplex(1.2765238285064697, 0.0);
      complex7.getImaginary();
      complex1.divide(complex8);
      complex6.multiply((-4167));
      complex5.readResolve();
      complex0.conjugate();
      Complex complex9 = complex2.multiply(complex5);
      complex9.sinh();
      try { 
        complex0.nthRoot((-4167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,167
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1742.689714624587));
      Complex complex1 = complex0.atan();
      complex1.log();
      Complex complex2 = complex0.log();
      complex2.abs();
      Complex complex3 = complex0.divide((-1742.689714624587));
      complex3.INF.add(3631.3822836);
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.ZERO;
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.reciprocal();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.acos();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-454);
      complex0.INF.reciprocal();
      try { 
        complex0.nthRoot((-454));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -454
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      complex1.hashCode();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.ZERO.atan();
      complex2.ONE.log();
      Complex complex5 = complex3.INF.subtract(complex2);
      Complex complex6 = complex3.atan();
      complex6.sqrt1z();
      complex1.NaN.add(0.0);
      complex3.ONE.reciprocal();
      complex6.INF.pow(0.0);
      complex4.subtract(complex0);
      complex5.INF.abs();
      try { 
        complex0.nthRoot((-2640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,640
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(38);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Object object0 = new Object();
      complex1.NaN.multiply(complex0);
      Complex complex2 = complex0.subtract(20.0);
      Complex complex3 = complex2.ONE.subtract(68.764277154);
      complex3.INF.multiply(2941);
      Complex complex4 = new Complex(68.764277154, 20.0);
      Complex complex5 = complex1.pow(complex4);
      complex0.equals(object0);
      Complex complex6 = complex1.divide(complex0);
      Complex.valueOf(61.1751534248457, 0.0);
      complex6.atan();
      Complex complex7 = complex5.subtract(complex1);
      try { 
        complex7.NaN.nthRoot((-1385));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,385
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      try { 
        complex1.NaN.nthRoot((-1055));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,055
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      complex0.equals(complex0);
      Complex complex1 = new Complex(0.24401789903640747);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.multiply(17);
      complex1.ZERO.sin();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1530.14);
      Complex complex1 = complex0.INF.sin();
      complex1.ZERO.toString();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.multiply((-516.85073));
      Complex complex4 = complex0.INF.add(1057.0542242229);
      Complex complex5 = complex3.sqrt1z();
      complex1.ONE.conjugate();
      Complex complex6 = Complex.ONE;
      complex4.ZERO.readResolve();
      Complex complex7 = complex5.ZERO.subtract(complex6);
      complex7.INF.pow(1057.0542242229);
      Complex complex8 = complex3.ONE.sinh();
      complex8.add(1057.0542242229);
      complex8.I.negate();
      Complex complex9 = complex3.conjugate();
      complex3.negate();
      complex3.negate();
      complex4.equals(complex0);
      complex1.getReal();
      complex8.subtract((-3233.088));
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add((-4.8293856891818295E-8));
      complex0.subtract((-4.8293856891818295E-8));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.createComplex(2817.869973, 2187.52631288203);
      complex2.ONE.abs();
      complex2.ZERO.toString();
      complex1.subtract(28.48);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.tanh();
      complex0.nthRoot(2234);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add((double) 2098);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.negate();
      complex0.subtract(complex1);
      Complex complex2 = complex1.reciprocal();
      complex1.getArgument();
      complex2.tanh();
      complex2.multiply(0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-7));
      complex1.ZERO.sin();
      Object object0 = new Object();
      complex0.isNaN();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex3.NaN.acos();
      complex3.ZERO.abs();
      Complex complex5 = complex0.ZERO.subtract(complex2);
      Complex complex6 = complex0.multiply((-1393));
      Complex complex7 = complex6.NaN.pow(complex0);
      Complex complex8 = complex6.I.multiply(complex1);
      Complex.valueOf((double) (-1393), (double) (-1393));
      Complex complex9 = complex2.NaN.exp();
      Complex complex10 = complex9.ZERO.pow(0.0);
      complex0.conjugate();
      complex2.exp();
      Complex.valueOf(0.0, (double) (-1393));
      Complex complex11 = complex4.add(4218.629882022);
      complex9.INF.exp();
      Complex complex12 = complex11.conjugate();
      complex12.INF.tanh();
      Complex.valueOf(507.46, 4218.629882022);
      Complex complex13 = complex3.asin();
      complex13.I.getArgument();
      complex13.add(complex10);
      complex5.subtract(4218.629882022);
      complex13.getField();
      complex4.toString();
      Complex complex14 = complex8.add(complex6);
      complex14.NaN.readResolve();
      complex11.sin();
      Complex complex15 = complex9.createComplex(0.0, 1.5707963267948966);
      complex15.I.sqrt();
      complex1.abs();
      complex0.isNaN();
      complex7.multiply(1758);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex0.subtract(complex1);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.tanh();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      complex1.NaN.subtract(complex0);
      int int0 = 0;
      complex1.I.cosh();
      double double0 = 0.0;
      complex0.ONE.conjugate();
      Complex.valueOf((-1913.3304805012594), 0.0);
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(314);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.conjugate();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(0.0);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow((-4.260359948248123));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(1409.1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(6.283185307179586);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = new Complex(2051.5);
      complex0.add(2051.5);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
      complex0.negate();
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.cos();
      Complex.valueOf((double) 1664);
      complex3.reciprocal();
      Complex complex4 = complex1.pow(2.0);
      complex4.ZERO.divide(complex2);
      complex4.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.I.abs();
      try { 
        complex1.nthRoot((-2847));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,847
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex2.sinh();
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex3.sqrt();
      complex3.sqrt1z();
      complex2.log();
      Complex complex4 = Complex.INF;
      Complex.valueOf(0.5403046481153485, 20.0);
      complex1.log();
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.I.multiply(1398);
      complex0.I.createComplex(2.579867270991543E291, 1915.431);
      Complex complex5 = complex4.I.pow(1915.431);
      complex5.ZERO.toString();
      complex0.getImaginary();
      complex2.I.divide(4.521448560089285E190);
      complex4.divide(0.0);
      complex1.abs();
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.nthRoot(2623);
      Complex complex1 = Complex.valueOf((-2115.2938982457), 0.6734226942062378);
      complex1.toString();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.NaN;
      complex2.I.subtract(complex3);
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = Complex.valueOf(0.6734226942062378, 0.6734226942062378);
      complex0.getReal();
      complex0.isNaN();
      Complex complex6 = complex1.pow((double) 2623);
      complex6.ZERO.divide(complex5);
      Complex complex7 = complex4.INF.atan();
      complex7.pow((-1566.0));
      complex6.isInfinite();
      complex4.I.createComplex(0.0, 582.8752);
      complex0.log();
      complex4.reciprocal();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.tan();
      complex0.INF.sqrt();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.ZERO.multiply(complex1);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(0.9500594530321046);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
      complex0.subtract(4.888792154132158E-111);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex.valueOf((-822.8), (-822.8));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.INF.multiply(0.0);
      Complex complex1 = Complex.I;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(458.874079869505, 0.0);
      Complex complex2 = complex0.asin();
      complex2.tan();
      Complex complex3 = Complex.valueOf(3313.3, 1096.83829191);
      Complex complex4 = complex3.ONE.conjugate();
      complex4.INF.tan();
      complex4.conjugate();
      Complex complex5 = complex1.add(458.874079869505);
      Complex complex6 = complex5.NaN.negate();
      complex6.I.multiply(2752);
      Complex complex7 = complex2.acos();
      complex7.multiply(complex5);
      Complex complex8 = complex5.subtract(2.1128692626953125);
      complex8.createComplex(0.0, (-3.807794163054899E-8));
      Complex complex9 = complex6.sinh();
      complex9.acos();
      complex3.multiply(2752);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex((-1411.16944), (-3034.864374689732));
      complex0.getArgument();
      complex0.getImaginary();
      Complex complex2 = complex1.createComplex(3011.86144700925, 3011.86144700925);
      complex1.isNaN();
      complex2.getArgument();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.subtract(0.0);
      complex1.getImaginary();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex2.I.tanh();
      complex0.NaN.getArgument();
      Complex complex5 = complex0.pow(1.0);
      complex5.cosh();
      complex5.atan();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex6.INF.multiply(Double.NaN);
      Complex.valueOf(1140.0);
      complex7.I.multiply(1);
      complex5.pow(complex0);
      Complex complex8 = complex1.conjugate();
      complex8.ZERO.cos();
      complex0.ZERO.subtract(complex5);
      Complex complex9 = complex3.reciprocal();
      complex9.toString();
      complex9.INF.createComplex(Double.NaN, 1.0);
      complex3.isNaN();
      complex5.getArgument();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.divide(complex0);
      complex2.getReal();
      complex2.add(0.7853981633974483);
      complex4.add(Double.NaN);
      complex2.nthRoot(37);
      Complex.valueOf((double) 37, (-1.0));
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.multiply(complex4);
      complex0.subtract(2764.1979123887);
      complex3.getArgument();
      Complex complex7 = Complex.NaN;
      complex6.multiply((-1073741824));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.divide(3132.027664822457);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.NaN.createComplex(3132.027664822457, (-1.0));
      Complex complex5 = complex1.sinh();
      complex3.ONE.abs();
      complex5.ONE.pow(complex1);
      complex1.NaN.conjugate();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.ZERO.sqrt();
      complex2.add(877.082562078);
      complex5.getArgument();
      Complex complex8 = complex2.pow(complex5);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.ONE.divide(3.141592653589793);
      complex4.getField();
      complex7.getReal();
      complex10.nthRoot(684);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(650);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(244);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.cosh();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.INF.acos();
      Complex complex2 = complex0.add((-5.3763211240398744E-8));
      complex2.abs();
      Complex complex3 = complex1.cosh();
      complex0.ONE.add(complex1);
      complex3.I.createComplex(1.0000000000000013, 2.547000388735681E214);
      complex1.tan();
      Complex.valueOf(1081.2979);
      complex3.log();
      Complex complex4 = Complex.INF;
      complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(858.0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.hashCode();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.ONE.log();
      complex2.nthRoot(281);
      complex3.readResolve();
      Complex complex5 = Complex.valueOf((-2362.417), 2.0);
      Complex complex6 = complex5.asin();
      complex3.cos();
      complex6.getReal();
      complex4.add((-5.185064518887831E-9));
      complex0.add((-1.569949736331221));
      complex0.nthRoot(37);
      Complex complex7 = Complex.valueOf(0.0, 253.7243);
      Complex complex8 = Complex.INF;
      complex1.multiply(complex7);
      complex3.subtract(Double.NaN);
      Complex complex9 = Complex.NaN;
      complex2.multiply(1163);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.abs();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.NaN.multiply(1472);
      Complex complex4 = Complex.ONE;
      complex0.multiply(complex4);
      Complex.valueOf(1.0, (double) 1472);
      Complex complex5 = complex2.I.multiply(1472);
      complex5.INF.toString();
      complex4.ZERO.multiply(1129);
      Complex complex6 = Complex.valueOf((double) 1472);
      assertEquals(1472.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex2.I.multiply((-1756));
      Complex complex8 = complex4.tan();
      double double0 = complex2.getReal();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      Complex complex9 = complex3.subtract(Double.NEGATIVE_INFINITY);
      Complex complex10 = complex9.ZERO.multiply((double) 1129);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex8.pow(complex9);
      assertEquals(1.557407724654902, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      complex3.multiply(complex9);
      Complex complex12 = complex7.divide((double) 1472);
      Complex complex13 = complex12.ONE.asin();
      assertEquals(1.5707963267948966, complex13.getReal(), 0.01);
      
      Complex complex14 = complex12.conjugate();
      assertEquals(1.1929347826086956, complex14.getImaginary(), 0.01);
      assertEquals(-0.0, complex14.getReal(), 0.01);
      
      complex4.multiply((-1227));
      Complex complex15 = complex5.sin();
      assertTrue(complex15.equals((Object)complex11));
      
      complex7.hashCode();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex16 = complex1.acos();
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertTrue(complex16.equals((Object)complex13));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1534.526754244728));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1534.526754244728), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.exp();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      
      complex0.getField();
      assertTrue(complex0.equals((Object)complex2));
  }
}
