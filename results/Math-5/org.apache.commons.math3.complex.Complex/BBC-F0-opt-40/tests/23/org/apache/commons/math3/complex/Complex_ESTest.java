/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:59:29 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-2726.49380119));
      complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.createComplex(1748.8035, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = Complex.valueOf(1748.8035, Double.POSITIVE_INFINITY);
      complex5.toString();
      Complex.valueOf(1031.464297731723);
      Complex.valueOf(1031.464297731723, (-3790.2404495345368));
      complex4.negate();
      complex4.getImaginary();
      Complex complex7 = Complex.ZERO;
      complex7.negate();
      complex4.divide(Double.POSITIVE_INFINITY);
      complex1.hashCode();
      complex7.getArgument();
      Complex complex8 = complex6.sinh();
      complex7.add((-3790.2404495345368));
      complex8.acos();
      complex3.multiply(6135.7851);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(3.2542391242036633E233);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.INF.multiply(3.2542391242036633E233);
      Complex complex4 = complex3.ZERO.negate();
      complex0.reciprocal();
      complex4.cosh();
      complex0.ONE.readResolve();
      Complex complex5 = complex0.sin();
      complex1.cosh();
      complex0.NaN.hashCode();
      Complex complex6 = complex0.add((-936.0));
      complex1.toString();
      complex5.divide(complex2);
      Complex complex7 = complex0.sqrt1z();
      complex1.cos();
      complex6.toString();
      complex6.atan();
      complex4.toString();
      complex1.pow(complex7);
      Complex.valueOf(3.2542391242036633E233, 3.2542391242036633E233);
      complex7.multiply(73);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(767.63202675127, 767.63202675127);
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf(767.63202675127, (-770.947));
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex6.pow(767.63202675127);
      complex1.add(complex7);
      Complex complex9 = complex5.tan();
      complex9.INF.nthRoot(1227);
      complex5.hashCode();
      complex9.getField();
      complex6.toString();
      Complex complex10 = complex6.multiply(6.923209420670962E-8);
      Complex complex11 = complex7.multiply(782);
      Complex complex12 = new Complex(2.4678881962150328E7, 6.923209420670962E-8);
      Complex.valueOf((double) 782, (-2152.4));
      complex10.divide(Double.NaN);
      complex6.add(complex11);
      Complex complex13 = new Complex((-2027.8935));
      complex4.createComplex((-2027.8935), 1.0020419790443752E-35);
      complex0.abs();
      complex0.atan();
      complex8.abs();
      complex8.nthRoot(689);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.70164513845372E-8, Double.NaN);
      complex1.ONE.divide(complex0);
      complex1.divide(1.207746682843556E-303);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1281.855, (-160.9));
      Complex complex1 = complex0.sin();
      complex1.abs();
      complex0.reciprocal();
      complex1.ZERO.divide(1281.855);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.atan();
      complex3.NaN.multiply((-2.990535475079021E-239));
      Complex complex4 = complex2.atan();
      complex4.getField();
      Complex.valueOf((-2.990535475079021E-239));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.831833881898182E203);
      complex0.negate();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4451.6377276), (-4451.6377276));
      Complex complex1 = complex0.sqrt();
      complex1.multiply((-4451.6377276));
      Complex complex2 = complex0.atan();
      complex2.ONE.divide(complex0);
      complex2.ONE.hashCode();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex0.multiply(Double.NaN);
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.INF;
      complex5.pow(6.283185307179586);
      complex3.multiply(6.283185307179586);
      complex3.nthRoot(2783);
      Complex complex6 = Complex.INF;
      complex5.ONE.divide(6.283185307179586);
      complex5.divide(0.0);
      complex2.isNaN();
      complex4.hashCode();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(3512.754045058547);
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf(3927.7577, 1.1899254154663847E-222);
      complex2.pow(Double.NaN);
      complex3.negate();
      complex0.pow(complex2);
      Complex complex4 = new Complex((-492.9059829904215), 424.47598);
      complex1.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-3604.9779611));
      complex6.sinh();
      Complex complex7 = complex4.divide((-20.0));
      complex6.tan();
      complex3.isNaN();
      Complex complex8 = Complex.INF;
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(1.2219361033150988E-8);
      Complex complex3 = Complex.valueOf(1.2219361033150988E-8, (-20.0));
      complex1.toString();
      Complex.valueOf(2.182843944647325E26);
      complex2.sinh();
      Complex.valueOf(1798.8513265728, 1031.464297731723);
      Complex complex4 = complex3.negate();
      Complex complex5 = new Complex(1.0, (-686.358689687188));
      Complex.valueOf(1.956569929924191E-4, (-2069.05215914));
      complex2.getArgument();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.valueOf(1.0, 0.0);
      complex4.tan();
      complex5.nthRoot(439);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1496450.0, (-1.0128633727463388E-7));
      Complex complex1 = complex0.divide((-1.0128633727463388E-7));
      Complex complex2 = Complex.ZERO;
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.createComplex(41.5085874, 41.5085874);
      complex1.ZERO.nthRoot(1259);
      Complex complex2 = complex0.sinh();
      complex2.sqrt1z();
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      int int0 = 5395;
      // Undeclared exception!
      complex0.nthRoot(5395);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tanh();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex2.pow(complex1);
      complex2.equals(object0);
      complex2.nthRoot(4947);
      complex2.acos();
      complex3.sinh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-2726.49380119));
      complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex0.createComplex(1748.8035, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.sqrt1z();
      Complex.valueOf(1748.8035, Double.POSITIVE_INFINITY);
      complex4.toString();
      Complex.valueOf(1031.464297731723);
      Complex.valueOf(1031.464297731723, (-3790.2404495345368));
      complex3.negate();
      complex3.getImaginary();
      Complex complex5 = Complex.ZERO;
      complex5.negate();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex complex6 = new Complex((-3790.2404495345368), (-1126.1837));
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-2726.49380119));
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex3.subtract(1025.27);
      complex3.nthRoot(865);
      Complex complex7 = Complex.I;
      complex5.equals(complex7);
      Complex complex8 = Complex.ONE;
      Object object0 = new Object();
      complex2.equals(object0);
      complex5.sqrt();
      complex6.cos();
      complex7.asin();
      try { 
        complex3.nthRoot((-1640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,640
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-2726.49380119));
      complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.createComplex(1748.8035, Double.POSITIVE_INFINITY);
      complex2.I.getArgument();
      complex3.tanh();
      complex3.multiply(complex1);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(1272.5, 8.178019529487065E-8);
      complex1.multiply(complex0);
      complex1.sqrt();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-1385.0));
      complex0.nthRoot(865);
      complex1.equals(complex0);
      Complex complex2 = Complex.ONE;
      complex1.equals(complex2);
      complex0.sqrt();
      Complex complex3 = complex2.divide((double) 865);
      complex0.toString();
      complex0.cos();
      Complex complex4 = complex3.asin();
      complex4.nthRoot(865);
      complex4.INF.sqrt1z();
      complex3.pow(complex4);
      complex4.getField();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-2726.49380119));
      complex0.ZERO.log();
      Complex complex2 = new Complex((-564.0797890858));
      complex1.nthRoot(1088);
      Complex complex3 = complex2.acos();
      complex3.multiply(17);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex2.subtract(complex1);
      complex1.cosh();
      complex3.pow(360.62705);
      complex1.getField();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1485.41321656576));
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.valueOf((-1485.41321656576), Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.createComplex(Double.POSITIVE_INFINITY, (-1485.41321656576));
      Complex.valueOf(1.0);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = Complex.valueOf((-1485.41321656576), 2.2034826278686523);
      complex7.toString();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf((-2873.7532951), (-1485.41321656576));
      complex2.negate();
      complex3.getImaginary();
      Complex complex9 = Complex.ZERO;
      complex7.negate();
      complex6.divide(0.41421356237309515);
      complex5.hashCode();
      Complex complex10 = new Complex((-1147.566), 6.732133448441883E-4);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-2726.49380119));
      complex0.ZERO.log();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.createComplex(1748.8035, Double.POSITIVE_INFINITY);
      Complex.valueOf(1.0);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(1748.8035, Double.POSITIVE_INFINITY);
      complex3.toString();
      Complex.valueOf(1031.464297731723);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-3790.2404495345368));
      complex2.multiply(744);
      complex0.toString();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(3799.815033704694);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.NaN.add(0.0);
      complex2.I.nthRoot(501);
      complex0.getField();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.tanh();
      complex3.ZERO.multiply(complex1);
      Complex complex5 = complex4.tan();
      complex5.I.toString();
      complex5.log();
      Complex complex6 = Complex.valueOf((-1.0624985110080394E-7));
      complex6.atan();
      Complex.valueOf((-1.0624985110080394E-7));
      complex4.tanh();
      complex5.nthRoot(501);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-2726.49380119));
      complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = Complex.valueOf(1748.8035, Double.POSITIVE_INFINITY);
      complex5.toString();
      Complex.valueOf(1031.464297731723);
      complex4.sinh();
      Complex complex7 = Complex.valueOf(1031.464297731723, (-3790.2404495345368));
      complex4.negate();
      complex2.pow(complex7);
      Complex complex8 = new Complex(0.48430514335632324, 1.3443336486816406);
      complex5.getArgument();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex6.divide(6.283185307179586);
      complex10.tan();
      complex5.isNaN();
      Complex complex11 = Complex.INF;
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ONE;
      complex4.equals(complex2);
      complex1.sqrt();
      Complex complex6 = complex3.cos();
      complex5.asin();
      int int0 = (-1640);
      try { 
        complex6.nthRoot((-1144));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,144
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-2726.49380119));
      complex0.ZERO.log();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.createComplex(1748.8035, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf((-145.402754));
      complex2.sqrt1z();
      Complex.valueOf(6.07014616741277E-8, 2048.149261);
      Complex complex4 = new Complex((-145.402754));
      complex4.toString();
      Complex.valueOf(1.0);
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
      Complex complex5 = Complex.ZERO;
      complex5.negate();
      complex4.getImaginary();
      Complex complex6 = Complex.ZERO;
      complex3.divide((-363.33));
      complex1.hashCode();
      complex4.getArgument();
      complex1.sinh();
      Complex complex7 = Complex.valueOf((-3790.2404495345368), 20.0);
      complex7.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.pow((-13.085231046412662));
      Complex complex4 = Complex.ONE;
      complex4.multiply((-228.31904397885387));
      complex4.nthRoot(2781);
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.ONE;
      complex6.isNaN();
      complex1.getField();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2612435745231905E181, (-1011.1477755781142));
      Complex complex1 = complex0.negate();
      complex1.getImaginary();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(0.0, (-1299.45939));
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.divide(1.7331720051707087E-70);
      complex5.hashCode();
      complex1.getArgument();
      complex0.sinh();
      complex2.add(1.7331720051707087E-70);
      complex4.multiply((-1169));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex0.NaN.log();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.INF;
      complex4.pow(6.283185307179586);
      Complex complex5 = complex2.multiply(6.283185307179586);
      complex2.nthRoot(2783);
      Complex complex6 = Complex.INF;
      complex5.sqrt();
      complex3.subtract((double) 2783);
      complex1.toString();
      Complex complex7 = Complex.INF;
      complex7.abs();
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(4204.7);
      Complex complex1 = complex0.subtract(3201.5937412);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.conjugate();
      complex1.getReal();
      Complex complex4 = complex1.add((-1553.19735012));
      complex2.getImaginary();
      Complex complex5 = Complex.valueOf(4204.7, (-3171.20277));
      complex5.toString();
      complex3.nthRoot(1);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex1.sin();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex10.sin();
      complex5.cos();
      complex8.sqrt();
      complex9.isInfinite();
      complex6.subtract(3.9174693825966044E-64);
      complex9.subtract(complex11);
      complex1.tanh();
      complex3.getArgument();
      complex1.pow(1.7768193998956956);
      complex7.acos();
      Complex complex12 = Complex.ONE;
      complex12.divide(1.7768193998956956);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-4.6157237582310713E-8), (-4.6157237582310713E-8));
      Complex complex1 = complex0.sinh();
      complex1.ZERO.toString();
      complex0.readResolve();
      Complex complex2 = Complex.NaN;
      complex2.exp();
      complex1.cos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.pow(complex3);
      complex4.acos();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex4.subtract((-20.0));
      complex3.nthRoot(865);
      complex6.equals((Object) null);
      Complex complex7 = Complex.ONE;
      complex1.equals(complex7);
      complex2.sqrt();
      complex6.cos();
      Complex complex8 = complex5.asin();
      try { 
        complex8.nthRoot((-1640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,640
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.equals(complex2);
      Complex complex3 = complex0.sinh();
      complex1.toString();
      Complex complex4 = Complex.valueOf((-803.198257032902), (-364.71023635));
      Complex complex5 = Complex.valueOf((-803.198257032902));
      complex2.divide(complex0);
      complex3.createComplex(Double.NaN, (-364.71023635));
      Complex complex6 = complex5.createComplex(1502.713963882, (-803.198257032902));
      complex4.readResolve();
      Complex complex7 = Complex.ONE;
      complex7.add(complex3);
      complex4.subtract(Double.NaN);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.tan();
      complex0.sin();
      complex3.getArgument();
      complex1.divide((-422.45377896));
      complex0.isNaN();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1600.7968706);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.sin();
      complex5.ONE.divide(complex3);
      complex5.ZERO.tan();
      complex1.multiply(176);
      Complex complex6 = Complex.INF;
      complex4.toString();
      Complex complex7 = Complex.valueOf(1600.7968706, (-1394.663799));
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.divide(complex8);
      complex9.createComplex(Double.NaN, 176);
      Complex complex10 = complex5.createComplex((-1394.663799), (-1394.663799));
      complex2.readResolve();
      Complex complex11 = Complex.ONE;
      complex11.add(complex10);
      Complex complex12 = complex4.subtract((-2494.6294716418));
      complex12.sin();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1779.76589, (double) (-476));
      Complex complex1 = Complex.valueOf((-2321.0));
      Complex complex2 = Complex.ONE;
      Complex.valueOf(1927.7281855202893);
      complex0.negate();
      complex1.pow(complex2);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(1600.7968706);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.add(1600.7968706);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.sin();
      complex5.ONE.divide(complex3);
      complex5.ZERO.tan();
      complex1.multiply(176);
      Complex complex6 = Complex.INF;
      complex6.toString();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.divide(complex8);
      complex9.createComplex(Double.NaN, 176);
      Complex complex10 = complex5.createComplex(1927.7281855202893, 1927.7281855202893);
      complex2.readResolve();
      Complex complex11 = Complex.ONE;
      complex11.add(complex10);
      complex4.subtract((-2494.6294716418));
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-3577.295037088146), (-3577.295037088146));
      Complex complex1 = complex0.NaN.sin();
      complex1.abs();
      Complex complex2 = complex0.asin();
      complex1.ZERO.divide(complex2);
      Complex complex3 = complex2.sqrt();
      complex2.reciprocal();
      complex1.hashCode();
      Complex complex4 = complex1.createComplex(446.763830640488, 446.763830640488);
      complex4.add(complex2);
      complex3.pow(complex4);
      complex0.sin();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      complex1.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.ZERO.divide(complex1);
      complex1.ONE.multiply((-1641));
      complex0.toString();
      Complex complex4 = complex1.INF.divide(complex3);
      Complex complex5 = complex4.ONE.createComplex((-1641), (-1641));
      complex5.I.createComplex((-1641), (-1437.624807470475));
      complex0.readResolve();
      Complex complex6 = complex1.add(complex0);
      complex0.subtract((double) (-1641));
      Complex complex7 = new Complex((-3941.7095077839));
      complex6.INF.multiply(complex0);
      complex7.cos();
      complex6.asin();
      Complex.valueOf((-3941.7095077839));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.acos();
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.INF;
      complex2.atan();
      Complex complex3 = Complex.valueOf((-316.05561341549), (-316.05561341549));
      complex3.tan();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.multiply((-1641));
      complex2.toString();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.divide(complex6);
      complex5.I.add((-1287.261625471));
      Complex complex8 = complex3.createComplex(2.057919896907654, (-1287.261625471));
      complex2.createComplex(6.331009331992412E-18, (-1287.261625471));
      complex3.readResolve();
      Complex complex9 = complex8.add(complex7);
      complex2.subtract(2612.03747573851);
      complex4.negate();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(2.716759624268743E271, (-393.23241481570597));
      Complex complex1 = complex0.tanh();
      complex1.readResolve();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.subtract(2.716759624268743E271);
      Complex complex4 = complex3.tan();
      complex4.equals(complex3);
      Complex complex5 = complex4.sinh();
      complex1.divide(4.615723758231075E-8);
      complex2.sin();
      Complex complex6 = complex4.pow(4.615723758231075E-8);
      Complex.valueOf(2.716759624268743E271, 2575.39177559609);
      Complex complex7 = Complex.valueOf(4.615723758231075E-8);
      complex7.getImaginary();
      complex7.asin();
      complex4.multiply(0.0);
      Complex.valueOf((-3615.869), (-3615.869));
      Complex complex8 = Complex.valueOf(1.9219478787856753E-98, (-2409.12));
      complex8.nthRoot(2811);
      complex2.abs();
      complex5.multiply(complex6);
      Complex.valueOf(1336.5653213772);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(1600.7968706);
      complex0.I.negate();
      complex0.add(1600.7968706);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.sin();
      complex2.ONE.divide(complex0);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.I.multiply(complex3);
      complex4.getReal();
      complex5.add(Double.POSITIVE_INFINITY);
      double double0 = (-32.89);
      Complex complex6 = new Complex((-32.89), 20.0);
      complex6.conjugate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex4.sqrt();
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1600.7968706);
      complex0.I.negate();
      complex0.add(1600.7968706);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex3.ZERO.tan();
      Complex complex6 = complex0.multiply(complex2);
      complex6.I.multiply(complex5);
      complex6.getReal();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = Complex.valueOf(28.83693635, 9.727979174888975E-9);
      complex7.toString();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(1600.7968706, 0.9999999538427624);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.negate();
      complex2.getImaginary();
      complex0.negate();
      complex10.divide(603.74);
      complex8.hashCode();
      complex4.getArgument();
      Complex complex11 = Complex.ONE;
      complex11.sinh();
      complex9.add(0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1600.7968706);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.add(1600.7968706);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.sin();
      complex5.ONE.divide(complex3);
      complex5.ZERO.tan();
      complex1.multiply(176);
      Complex complex6 = Complex.INF;
      complex6.toString();
      Complex complex7 = Complex.valueOf(1600.7968706, (-1394.663799));
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.divide(complex8);
      complex9.createComplex(Double.NaN, 176);
      Complex complex10 = complex5.createComplex(1927.7281855202893, 1927.7281855202893);
      complex2.readResolve();
      Complex complex11 = Complex.ONE;
      complex11.add(complex10);
      complex4.subtract((-2494.6294716418));
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = new Complex(20.0);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex2.subtract(20.0);
      complex1.acos();
      Complex complex8 = complex2.sinh();
      complex7.add(20.0);
      complex2.multiply((-1484));
      Complex complex9 = Complex.valueOf((-1.0), 715.30427108);
      complex9.negate();
      complex4.getField();
      complex0.pow(complex1);
      Complex complex10 = complex6.pow(complex8);
      complex10.readResolve();
      complex4.isInfinite();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = new Complex(2.716759624268743E271, 0.8813735870195429);
      Complex complex2 = complex0.sqrt();
      complex2.INF.sinh();
      complex1.log();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.divide(complex0);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      complex0.tanh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.NaN.subtract(0.0);
      Complex complex3 = complex2.ONE.tan();
      complex0.equals(object0);
      Complex complex4 = complex0.sinh();
      complex4.divide(0.0);
      Complex complex5 = complex1.sin();
      complex5.NaN.pow((-803.198257032902));
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex6.getImaginary();
      complex1.ZERO.asin();
      Complex.valueOf(0.0, 0.0);
      complex3.nthRoot(2811);
      complex0.abs();
      complex5.divide(complex4);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(1600.7968706);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.add(1600.7968706);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.sin();
      complex5.ONE.divide(complex3);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex7.I.multiply(complex6);
      complex7.getReal();
      Complex complex9 = complex7.I.sqrt1z();
      Complex.valueOf(1600.7968706, 9.727979174888975E-9);
      complex9.toString();
      Complex.valueOf(9.727979174888975E-9);
      Complex.valueOf(Double.NaN, Double.NaN);
      complex0.negate();
      complex8.getImaginary();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.ZERO.divide(0.0);
      complex1.hashCode();
      complex10.getArgument();
      complex0.sinh();
      complex11.acos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1.5322813987731934);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.reciprocal();
      complex3.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.add((-2726.49380119));
      complex2.conjugate();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 8.90310227565917E-9);
      complex6.subtract(complex2);
      complex6.sqrt();
      complex5.readResolve();
      complex1.nthRoot(37);
      Complex.valueOf((-1664.7), (-1.0));
      complex3.divide(complex4);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      double double0 = 0.0;
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.INF.pow(complex0);
      complex1.ZERO.asin();
      complex0.I.getField();
      complex0.ZERO.readResolve();
      complex1.INF.divide((-1421.025));
      complex0.getImaginary();
      Complex.valueOf((-505.1276922693), (-505.1276922693));
      Complex complex3 = complex0.tanh();
      complex3.ONE.add((-828.772081030581));
      complex0.pow(0.0);
      complex0.abs();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 872.8003);
      complex0.NaN.getField();
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.I.log();
      complex2.asin();
      Complex complex3 = complex0.multiply((-2107.18955));
      Complex complex4 = complex3.sqrt();
      complex2.getField();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex1.cosh();
      complex6.INF.getArgument();
      complex6.sqrt1z();
      complex4.ONE.cos();
      complex4.abs();
      complex1.log();
      complex6.equals(complex5);
      Complex complex7 = complex5.sqrt1z();
      complex7.asin();
      complex4.nthRoot(2964);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex0.isNaN();
      complex0.isNaN();
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex1.ZERO.sin();
      complex4.NaN.log();
      Complex complex5 = complex2.createComplex(1939.737443, 1939.737443);
      Complex complex6 = complex5.NaN.divide((-1432.2319801085423));
      complex6.INF.hashCode();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.I.sqrt();
      complex8.ZERO.cosh();
      Complex complex9 = complex0.reciprocal();
      complex3.asin();
      complex3.getField();
      Complex complex10 = complex5.atan();
      complex10.sqrt();
      Complex complex11 = complex3.sqrt1z();
      complex11.I.toString();
      complex0.INF.getArgument();
      complex0.sinh();
      complex9.NaN.sin();
      Complex complex12 = complex2.reciprocal();
      Complex complex13 = complex12.multiply(0);
      complex4.equals(complex9);
      Complex complex14 = Complex.valueOf(1939.737443, 0.7853981633974483);
      complex14.subtract((-1432.2319801085423));
      complex10.multiply(0);
      complex6.divide((double) 0);
      complex4.isInfinite();
      complex13.divide((-1937.17103029133));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex0.pow((-2638.705789506578));
      complex5.NaN.createComplex((-1877.588005), 0.0);
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex1.createComplex(Double.POSITIVE_INFINITY, 2.201412886580694E275);
      complex3.ZERO.pow(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.ONE.cosh();
      Complex complex9 = complex8.INF.add(complex3);
      complex9.NaN.add(0.0);
      complex3.getImaginary();
      Complex complex10 = complex8.log();
      complex10.ZERO.pow(0.0);
      complex1.pow(complex9);
      complex4.multiply(2.9019628518165404E-61);
      complex4.getArgument();
      Complex complex11 = complex8.exp();
      complex8.multiply((-2136));
      complex7.log();
      complex2.exp();
      complex9.multiply(complex5);
      complex11.add(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex3.ZERO.divide(complex1);
      Complex complex5 = complex1.ONE.multiply((-1641));
      complex0.toString();
      Complex complex6 = complex1.INF.divide(complex4);
      Complex complex7 = complex6.ONE.createComplex((-1641), (-1641));
      complex7.I.createComplex((-1641), (-1437.624807470475));
      complex0.readResolve();
      complex1.add(complex0);
      complex0.subtract((double) (-1641));
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.172548532485962, (-1601.50845));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.cosh();
      complex2.NaN.toString();
      Complex complex3 = complex2.cos();
      complex3.ONE.negate();
      Complex complex4 = complex2.add((-1601.50845));
      complex0.getReal();
      Complex complex5 = complex0.INF.sin();
      complex5.I.sqrt1z();
      complex4.isNaN();
      complex2.ZERO.pow(complex4);
      complex1.cosh();
      complex0.cosh();
      complex2.asin();
      Complex complex6 = complex4.cosh();
      complex6.I.asin();
      complex6.atan();
      complex2.equals("(NaN, NaN)");
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1431.833), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.asin();
      complex1.ONE.sin();
      complex1.NaN.toString();
      complex0.getField();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.NaN.divide(complex0);
      complex3.INF.createComplex((-853.662757), (-2277.4));
      complex1.ONE.abs();
      complex0.getField();
      complex0.NaN.getField();
      complex0.abs();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex1.I.add(complex0);
      complex4.I.hashCode();
      Complex complex6 = complex5.ZERO.acos();
      complex6.INF.cosh();
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex7 = complex4.ZERO.conjugate();
      complex7.ONE.add(complex1);
      Complex complex8 = Complex.valueOf(1.5707963267948966);
      complex8.INF.cos();
      Complex complex9 = complex0.cos();
      complex0.ONE.acos();
      complex9.ONE.multiply(1130);
      complex4.negate();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double double0 = (-5150.0);
      Complex complex0 = Complex.valueOf((-5150.0));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.ONE.multiply(complex2);
      complex3.I.sqrt();
      complex2.I.exp();
      complex0.asin();
      int int0 = 1138;
      complex2.I.asin();
      complex2.INF.exp();
      complex1.INF.multiply(1138);
      try { 
        complex2.nthRoot((-1005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,005
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2468.2575202));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.NaN.tan();
      complex3.NaN.tanh();
      complex0.getImaginary();
      complex0.divide(complex1);
      Complex complex4 = Complex.valueOf(11.8123976035, 0.0);
      complex4.NaN.subtract(11.8123976035);
      complex4.ONE.readResolve();
      complex0.exp();
      complex2.multiply(complex4);
      Complex complex5 = complex0.sqrt();
      complex5.hashCode();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(1600.7968706);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.add(1600.7968706);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.sin();
      complex5.ONE.divide(complex3);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex7.I.multiply(complex6);
      complex7.getReal();
      Complex complex9 = complex7.I.sqrt1z();
      Complex.valueOf(1600.7968706, 9.727979174888975E-9);
      complex9.toString();
      Complex.valueOf(9.727979174888975E-9);
      Complex complex10 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.negate();
      complex8.getImaginary();
      Complex complex11 = complex2.negate();
      complex11.ZERO.divide(0.0);
      complex1.hashCode();
      complex11.getArgument();
      complex0.sinh();
      complex10.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      Complex complex1 = complex0.I.subtract((-20.0));
      complex1.INF.hashCode();
      complex0.toString();
      Complex complex2 = complex0.exp();
      complex2.ZERO.toString();
      Complex complex3 = complex2.NaN.cosh();
      complex3.getField();
      complex3.getField();
      complex1.getArgument();
      complex1.readResolve();
      Complex complex4 = complex2.ZERO.add(0.04995839572194276);
      Complex complex5 = complex4.NaN.atan();
      complex4.INF.createComplex(0.0, 0.04995839572194276);
      complex0.ZERO.getArgument();
      Complex complex6 = complex2.add(complex1);
      complex0.INF.sqrt();
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex2.cosh();
      complex8.I.sqrt1z();
      complex1.isNaN();
      Complex complex9 = complex3.multiply(0);
      complex8.multiply(complex7);
      complex6.divide(complex0);
      complex0.pow(complex5);
      complex6.hashCode();
      complex9.multiply(406.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.NaN.subtract((-136.7331532531365));
      complex3.NaN.sqrt();
      complex3.NaN.cos();
      Complex complex4 = complex0.sqrt1z();
      complex0.toString();
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex4.asin();
      complex1.ZERO.hashCode();
      Complex complex7 = complex1.I.pow(complex0);
      Complex complex8 = complex6.ONE.pow(complex2);
      Complex complex9 = complex5.cosh();
      complex4.createComplex(0.0, 3.7291263280048303E-8);
      complex1.getImaginary();
      complex8.ZERO.cos();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex10.NaN.sqrt1z();
      complex11.sqrt1z();
      complex6.negate();
      complex8.getField();
      complex7.sin();
      Complex.valueOf(0.0, (-136.7331532531365));
      complex11.abs();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(4628.166199, 3.9174693825966044E-64);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.NaN.multiply((-476));
      Complex complex3 = complex2.NaN.subtract(complex1);
      Complex complex4 = complex3.ONE.tan();
      complex2.NaN.sin();
      complex0.getArgument();
      Complex complex5 = complex0.subtract(8.464409474843503E-68);
      complex5.divide(0.0);
      complex4.isNaN();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-2726.49380119);
      Complex complex1 = complex0.INF.multiply((-2726.49380119));
      complex0.ZERO.log();
      complex1.ZERO.reciprocal();
      complex0.createComplex(1748.8035, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(1.0);
      complex1.NaN.add((-2726.49380119));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.INF;
      complex3.ONE.subtract(complex4);
      complex2.sqrt();
      try { 
        complex4.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.ONE.subtract(0.0);
      complex3.NaN.asin();
      Complex complex4 = Complex.valueOf(0.0, Double.NaN);
      complex4.ZERO.abs();
      Complex complex5 = complex0.multiply((-2537.0));
      Complex complex6 = complex0.asin();
      complex5.isInfinite();
      complex6.createComplex(0.0, 0.0);
      complex5.ONE.divide((-2537.0));
      complex5.equals((Object) null);
      complex0.ONE.sqrt1z();
      Complex complex7 = complex4.add(complex1);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.ZERO.readResolve();
      complex8.ONE.atan();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex9.INF.pow(complex7);
      complex10.I.acos();
      Complex complex11 = complex9.NaN.cosh();
      complex3.asin();
      complex7.equals(complex0);
      Complex.valueOf(0.0);
      Complex.valueOf((-2537.0));
      Complex complex12 = complex11.cos();
      complex4.multiply((-31));
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.divide(1.352233648300171);
      Complex complex2 = complex1.I.add(0.0);
      complex1.INF.subtract(0.0);
      Complex complex3 = complex2.ONE.multiply(0);
      complex3.NaN.readResolve();
      complex0.equals((Object) null);
      Complex complex4 = complex1.tanh();
      complex4.tanh();
      complex0.subtract(0.0);
      Complex complex5 = complex2.acos();
      complex5.ONE.tanh();
      complex0.add(complex1);
      complex5.toString();
      Complex complex6 = complex4.negate();
      complex6.ONE.log();
      complex6.ZERO.asin();
      complex6.negate();
      Complex.valueOf((-1814.26203615));
      complex1.cos();
      complex5.pow(0.0);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(1315.0);
      Complex complex1 = new Complex(1315.0);
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.ZERO.abs();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.atan();
      complex6.ONE.hashCode();
      Complex complex7 = complex2.add(complex3);
      Complex complex8 = complex6.add(0.0);
      complex4.createComplex(0.0, 0.0);
      Complex complex9 = complex6.NaN.acos();
      complex9.ZERO.createComplex(1315.0, (-1273.9866));
      Complex complex10 = complex7.add(385.619911126797);
      complex10.readResolve();
      complex2.conjugate();
      Complex complex11 = complex6.add(complex8);
      Complex complex12 = Complex.valueOf((-1241.0), 0.0);
      Complex complex13 = complex12.I.multiply(complex6);
      complex13.ONE.subtract(0.0);
      complex6.hashCode();
      Complex complex14 = Complex.valueOf(385.619911126797);
      Complex complex15 = complex14.sin();
      complex15.tanh();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1321.043);
      complex0.ONE.getArgument();
      complex1.NaN.sinh();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.atan();
      complex3.ONE.sinh();
      try { 
        complex2.ONE.nthRoot((-4330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,330
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      complex0.tanh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.NaN.subtract(0.0);
      Complex complex3 = complex2.ONE.tan();
      complex0.equals(object0);
      Complex complex4 = complex0.sinh();
      complex4.divide(0.0);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.NaN.pow((-803.198257032902));
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex7.getImaginary();
      complex1.ZERO.asin();
      complex0.NaN.multiply((-803.198257032902));
      Complex.valueOf(0.0, 0.0);
      complex3.nthRoot(2811);
      complex0.abs();
      complex6.multiply(complex1);
      Complex.valueOf((double) 2811);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.INF.toString();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex0.ZERO.add(complex2);
      Complex complex4 = complex0.multiply(1538.46448696);
      Complex complex5 = complex4.ZERO.reciprocal();
      complex5.ZERO.acos();
      Complex complex6 = complex2.subtract(complex0);
      complex6.NaN.subtract(468.89397654447);
      complex3.abs();
      complex3.getField();
      Complex complex7 = complex3.sin();
      complex7.ZERO.conjugate();
      complex2.multiply((-1));
      Complex.valueOf(0.0);
      complex4.subtract(0.24859806895256042);
      complex3.divide(complex4);
      complex6.I.exp();
      Complex.valueOf(212.3032, 0.0);
      complex6.tanh();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.I.multiply(784);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.NaN.acos();
      complex5.INF.getField();
      Complex complex6 = complex5.ONE.sqrt1z();
      complex6.pow(complex3);
      Complex complex7 = complex1.createComplex(0.0, 0.0);
      Complex complex8 = complex2.ONE.multiply((-1664));
      complex8.ONE.asin();
      complex0.abs();
      complex5.toString();
      Complex complex9 = complex1.pow((double) (-1664));
      complex9.divide(complex3);
      Complex complex10 = complex4.multiply(complex6);
      complex10.log();
      Complex.valueOf((-381.6523162658), (-672.1053439016847));
      Complex complex11 = complex4.tanh();
      complex11.I.getField();
      complex7.NaN.add(complex3);
      complex2.toString();
      Complex complex12 = complex7.cos();
      Complex complex13 = complex12.INF.sin();
      complex6.readResolve();
      complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      double double0 = (-312.055302824);
      Complex complex2 = complex0.ONE.createComplex(6.317463237641817E-9, (-312.055302824));
      complex2.NaN.toString();
      complex2.pow((-312.055302824));
      try { 
        complex2.nthRoot((-581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -581
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.multiply(0.0);
      complex4.I.sqrt();
      double double0 = (-2716.6782208397);
      Complex.valueOf(2.591270923614502, (-2716.6782208397));
      complex3.abs();
      complex4.NaN.sinh();
      Complex complex5 = complex2.reciprocal();
      complex5.NaN.add(complex1);
      try { 
        complex5.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(1595.8);
      Complex complex1 = complex0.ONE.sinh();
      complex1.I.subtract((-2638.478665));
      Complex complex2 = complex1.NaN.multiply(1244.7630535821706);
      complex2.ONE.getField();
      Complex complex3 = complex0.INF.sqrt1z();
      complex0.multiply((-1751.89));
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.INF.cosh();
      Complex complex6 = complex5.INF.tan();
      complex6.getArgument();
      Complex complex7 = complex5.ZERO.pow(2490.9);
      complex0.hashCode();
      complex0.readResolve();
      complex7.NaN.tan();
      complex7.I.log();
      Complex.valueOf(0.0);
      Complex complex8 = complex3.cosh();
      complex4.pow(20.0);
      Complex complex9 = complex8.ONE.multiply(complex4);
      complex7.tanh();
      complex8.getReal();
      Complex complex10 = complex5.divide(complex2);
      complex9.subtract(1595.8);
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.reciprocal();
      complex1.ONE.reciprocal();
      Complex complex3 = complex2.ONE.sinh();
      complex3.ZERO.hashCode();
      complex0.subtract((-2751.49));
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.I.tan();
      complex6.ONE.asin();
      complex4.pow(6.283185307179586);
      Complex complex7 = complex1.NaN.multiply(6.283185307179586);
      try { 
        complex7.I.nthRoot((-2220));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,220
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      double double1 = 2671.5112651458867;
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(2671.5112651458867);
      Complex complex3 = complex1.NaN.negate();
      complex3.ONE.readResolve();
      Complex complex4 = complex0.multiply(complex2);
      int int0 = 0;
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.cosh();
      complex2.multiply(771);
      complex2.INF.sqrt1z();
      Complex complex3 = complex1.multiply(685);
      Complex complex4 = Complex.valueOf(3.452316818502442E-102, (double) 685);
      Complex complex5 = complex3.ONE.createComplex(685, 3.452316818502442E-102);
      complex5.ONE.asin();
      complex1.NaN.toString();
      complex0.readResolve();
      complex0.sqrt1z();
      complex1.tanh();
      complex4.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.sinh();
      complex2.I.tanh();
      complex0.I.multiply(17);
      complex1.multiply(complex0);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-4.6157237582310713E-8), (-4.6157237582310713E-8));
      Complex complex1 = complex0.sinh();
      complex1.ZERO.toString();
      complex0.subtract((-1951.67));
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.conjugate();
      complex0.getReal();
      complex3.add((-4.6157237582310713E-8));
      complex0.getImaginary();
      complex0.toString();
      complex1.nthRoot(1);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.acos();
      complex3.tanh();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex0.INF.sin();
      complex7.ONE.cos();
      complex0.sqrt();
      Complex complex8 = complex0.exp();
      complex5.isInfinite();
      Complex complex9 = complex6.subtract((-2535.77));
      complex3.ZERO.subtract(complex2);
      Complex complex10 = complex9.tanh();
      complex10.ONE.getArgument();
      complex10.pow(0.0);
      complex8.acos();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(865.93600102, 20.0);
      Complex complex1 = complex0.INF.subtract(511.51768047026);
      Complex complex2 = complex1.NaN.negate();
      complex0.ZERO.abs();
      complex2.ONE.asin();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.I.log();
      complex2.divide(865.93600102);
      Complex complex4 = complex2.ONE.sqrt1z();
      complex4.ONE.readResolve();
      complex2.NaN.readResolve();
      double double0 = Double.NaN;
      complex1.INF.createComplex(511.51768047026, Double.NaN);
      complex1.ZERO.getArgument();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex0.tanh();
      complex5.ONE.subtract((-20.0));
      complex2.INF.acos();
      complex2.INF.sinh();
      complex5.add((-20.0));
      complex3.INF.negate();
      complex5.ZERO.getField();
      Complex complex6 = complex2.pow(complex1);
      complex6.ONE.pow(complex5);
      complex2.readResolve();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double double0 = 3059.4561562808;
      Complex complex0 = new Complex(3059.4561562808, 0.0);
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.I.acos();
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex1.INF.negate();
      complex1.ONE.sin();
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex4.ONE.add(Double.NaN);
      complex0.equals(complex1);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.pow(1788.09741923897);
      Complex complex8 = complex7.ZERO.divide(complex1);
      Complex complex9 = complex8.ONE.tan();
      complex9.NaN.negate();
      complex9.ONE.sqrt1z();
      complex8.reciprocal();
      complex0.log();
      complex1.tanh();
      complex8.sqrt();
      Complex complex10 = complex9.multiply((-1347.7186866434831));
      complex10.ZERO.log();
      Complex complex11 = complex10.subtract(complex4);
      Complex complex12 = complex5.sqrt1z();
      complex12.tan();
      Complex complex13 = complex3.conjugate();
      complex13.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cosh();
      complex1.cos();
      complex1.cosh();
      Complex complex2 = complex0.I.add((-262.158613133));
      complex0.readResolve();
      Complex complex3 = complex1.add((-262.158613133));
      complex3.ONE.sqrt1z();
      complex3.I.atan();
      complex3.pow(complex2);
      try { 
        complex1.INF.nthRoot((-1989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,989
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.acos();
      complex0.readResolve();
      Complex complex2 = complex0.add(0.0);
      complex0.getReal();
      Complex complex3 = complex2.divide(complex1);
      complex3.NaN.subtract(complex2);
      Complex complex4 = complex1.pow((-20.0));
      complex4.I.hashCode();
      Complex complex5 = complex0.multiply((-20.0));
      complex5.readResolve();
      Complex complex6 = complex2.ZERO.tanh();
      complex6.I.negate();
      Complex complex7 = complex3.multiply(20.0);
      complex5.hashCode();
      Complex complex8 = complex0.pow(complex7);
      complex8.ONE.exp();
      complex8.I.sin();
      complex8.NaN.divide(0.0);
      Complex complex9 = Complex.valueOf(0.0, (-1090.848));
      complex9.log();
      complex7.isInfinite();
      complex1.readResolve();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.atan();
      Complex complex2 = Complex.valueOf(1.460686206817627);
      Complex complex3 = complex0.ZERO.conjugate();
      Complex.valueOf(1.460686206817627, 1.460686206817627);
      complex3.ONE.subtract(complex0);
      Complex complex4 = Complex.valueOf((-20.0), (-20.0));
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.cos();
      complex2.ZERO.divide(complex5);
      complex1.ZERO.hashCode();
      complex5.INF.pow((-1334.09));
      complex5.getArgument();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex5.INF.add(complex2);
      complex4.ONE.log();
      Complex complex9 = complex8.ONE.atan();
      complex6.INF.sin();
      complex7.INF.asin();
      complex6.getReal();
      Complex complex10 = complex9.I.log();
      complex4.asin();
      complex9.readResolve();
      Complex.valueOf(Double.NaN, 6.283185307179586);
      complex0.divide(complex6);
      complex9.toString();
      complex8.sinh();
      complex10.tanh();
      Complex.valueOf(1028.783);
      try { 
        complex8.nthRoot((-857));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -857
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(2.716759624268743E271, 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.ZERO.log();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.ONE.reciprocal();
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex1.ZERO.divide(complex0);
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex3.I.divide(complex1);
      assertSame(complex5, complex2);
      
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex6.subtract(complex1);
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex9.I.tan();
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex1.add(0.9921976327896118);
      List<Complex> list0 = complex6.nthRoot(1);
      assertTrue(list0.contains(complex2));
      
      Complex complex12 = (Complex)complex11.readResolve();
      assertEquals(0.9921976327896118, complex12.getReal(), 0.01);
      
      Complex complex13 = complex4.sinh();
      complex13.NaN.multiply(37);
      complex6.getReal();
      assertSame(complex6, complex13);
      
      Complex complex14 = complex7.asin();
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex14.getReal(), 0.01);
      
      complex0.createComplex((-2972.5952123846423), 0.0);
      assertTrue(complex0.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(4204.7);
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.ONE.exp();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = complex0.acos();
      assertEquals(9.03710539335379, complex5.getImaginary(), 0.01);
      
      complex0.getImaginary();
      Complex complex6 = complex4.sinh();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex6, complex4);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex0.cos();
      assertEquals(1.5430806348152437, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex1.subtract(complex4);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.8813735870195428, complex1.getImaginary(), 0.01);
      assertSame(complex5, complex4);
      assertSame(complex5, complex2);
  }
}
