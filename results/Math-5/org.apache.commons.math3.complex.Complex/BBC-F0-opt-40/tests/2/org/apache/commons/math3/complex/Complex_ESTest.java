/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:44:16 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.abs();
      complex0.nthRoot(7);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.valueOf(3815.3266911959936);
      complex2.negate();
      complex3.ZERO.reciprocal();
      Complex complex5 = Complex.valueOf(2.3705435424427623E169);
      Complex complex6 = complex5.sqrt1z();
      complex6.I.tan();
      complex6.I.sin();
      complex4.NaN.nthRoot(7);
      complex5.divide(complex1);
      Complex complex7 = complex3.asin();
      complex3.NaN.cosh();
      complex5.getArgument();
      complex7.divide((-1369.2946755));
      complex5.I.negate();
      complex4.asin();
      Complex complex8 = complex2.sqrt1z();
      complex8.NaN.readResolve();
      complex0.multiply(2.3705435424427623E169);
      complex3.multiply(7);
      complex5.nthRoot(174);
      Complex.valueOf((-1776.16466435));
      complex7.negate();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(1.6692346202615142E266);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.reciprocal();
      complex2.I.subtract((-3243.939519069756));
      complex2.I.getArgument();
      complex3.ONE.subtract(complex1);
      Complex complex4 = complex0.add(complex2);
      complex4.ZERO.acos();
      Complex complex5 = complex0.acos();
      complex5.sqrt();
      complex5.ZERO.sinh();
      Complex complex6 = Complex.valueOf((-928.1));
      complex1.subtract(complex6);
      Complex complex7 = complex3.multiply(846.0517154514349);
      complex3.abs();
      complex0.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1440.81, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.INF.conjugate();
      complex0.tanh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.multiply(0);
      Complex complex5 = new Complex((-533.4));
      Complex complex6 = complex1.divide(complex5);
      complex6.sqrt();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.I;
      complex8.nthRoot(1351);
      complex5.subtract(907.0);
      Complex complex9 = complex0.sin();
      Complex complex10 = new Complex((-1.3584500601329896E-8), 0);
      complex10.tanh();
      Complex.valueOf((double) 0, (-3794.40261726524));
      complex10.readResolve();
      complex4.sqrt();
      complex8.multiply(Double.NaN);
      complex3.pow(712.9731112842492);
      complex9.negate();
      Complex complex11 = Complex.INF;
      complex11.pow(346.5878357925643);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.exp();
      Complex complex1 = Complex.INF;
      complex1.sqrt();
      Complex complex2 = new Complex(20.0, (-20.0));
      complex2.atan();
      complex2.tan();
      Complex complex3 = Complex.ONE;
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = (-29.2070770203694);
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(43.4683686418056, Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.add(0.5004430056369402);
      Complex complex2 = complex1.NaN.reciprocal();
      complex2.ONE.cosh();
      complex1.NaN.abs();
      Complex complex3 = complex0.multiply(2657.548502586875);
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex3.NaN.pow(complex4);
      Complex complex7 = Complex.valueOf(0.5004430056369402, 1405.895954661785);
      Complex complex8 = complex0.add(complex3);
      Complex complex9 = complex8.reciprocal();
      complex8.ZERO.nthRoot(233);
      complex8.INF.abs();
      complex1.NaN.reciprocal();
      complex1.I.hashCode();
      Complex complex10 = complex1.divide(2545.66);
      Complex complex11 = complex10.I.multiply(2545.66);
      Complex complex12 = complex9.multiply(complex7);
      complex12.abs();
      Complex complex13 = complex9.conjugate();
      complex10.ONE.getArgument();
      complex1.INF.exp();
      complex7.tanh();
      complex10.ONE.createComplex(Double.NaN, 822.934896471);
      complex5.readResolve();
      complex7.multiply(233);
      complex11.reciprocal();
      complex13.cos();
      complex6.divide(2657.548502586875);
      complex8.asin();
      complex5.pow(822.934896471);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      complex0.exp();
      Complex.valueOf((-552.5790454542966));
      complex0.I.cos();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = new Complex((-552.5790454542966), Double.NaN);
      complex1.log();
      complex1.getArgument();
      complex1.isNaN();
      Complex complex6 = new Complex(0.43877264983389297, 0.43877264983389297);
      complex0.log();
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(570.406337913568, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex0.nthRoot(1838);
      complex0.multiply(6056.42102);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.INF.createComplex(20.0, 20.0);
      complex1.tan();
      Complex complex2 = new Complex(20.0);
      Complex.valueOf(0.2493593990802765, 20.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(570.406337913568, Double.POSITIVE_INFINITY);
      complex1.ZERO.asin();
      complex1.sqrt1z();
      complex1.multiply(2190);
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf((-2025.6), 0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1433527.2933243061, 1433527.2933243061);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(570.406337913568, Double.POSITIVE_INFINITY);
      complex0.multiply(2190);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.asin();
      complex1.multiply(complex0);
      Complex complex3 = Complex.I;
      complex3.isInfinite();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex4.cos();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(570.406337913568, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(2190);
      Complex complex3 = complex0.asin();
      complex0.multiply(complex1);
      complex3.log();
      Complex complex4 = complex2.tan();
      complex4.log();
      Complex complex5 = Complex.ONE;
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(570.406337913568, Double.POSITIVE_INFINITY);
      complex1.multiply(2190);
      Complex complex2 = complex1.asin();
      complex2.ONE.multiply(complex0);
      complex2.isInfinite();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.8414709848078965);
      Complex complex1 = complex0.I.cos();
      complex1.ONE.multiply((-2188));
      complex1.getArgument();
      Complex complex2 = Complex.INF;
      complex0.divide(complex2);
      Complex complex3 = complex2.log();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.tanh();
      complex0.NaN.hashCode();
      Complex complex1 = complex0.acos();
      complex1.tanh();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.I.abs();
      Complex complex2 = Complex.valueOf(2601.8237);
      Complex complex3 = complex1.pow(complex2);
      complex3.add(1.0);
      complex1.INF.abs();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex0.divide(complex8);
      Complex complex10 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.ONE.exp();
      complex11.INF.getArgument();
      Complex complex12 = complex1.subtract(complex4);
      complex12.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex13 = complex9.divide(1.0);
      complex13.toString();
      Complex complex14 = complex10.subtract(complex4);
      complex14.divide(0.7853981633974483);
      complex14.I.getArgument();
      complex1.I.tan();
      Complex complex15 = complex12.multiply(392);
      complex6.abs();
      Complex complex16 = complex15.conjugate();
      complex7.multiply(392);
      complex8.tan();
      complex16.negate();
      complex11.acos();
      complex14.cos();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-934.0), (-934.0));
      Complex complex1 = complex0.multiply(966);
      Complex complex2 = complex0.asin();
      complex2.isInfinite();
      Complex complex3 = Complex.NaN;
      complex3.tan();
      complex3.add(1.4161468365471424);
      Complex complex4 = complex1.cosh();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-539.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.subtract(complex0);
      complex4.INF.readResolve();
      Complex complex5 = complex0.acos();
      try { 
        complex5.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-1.5111906039270745E-7));
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.subtract(complex2);
      complex3.sqrt();
      Complex.valueOf((-2156.09392), (-2156.09392));
      complex1.I.conjugate();
      Complex complex4 = complex2.log();
      Complex complex5 = Complex.valueOf(6.283185307179586);
      Object object0 = complex4.readResolve();
      complex5.equals(object0);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2025.6), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.add(complex0);
      complex2.asin();
      complex1.INF.asin();
      Object object0 = new Object();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.log();
      complex1.tan();
      complex4.getField();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = complex0.multiply(907);
      complex0.ONE.asin();
      complex1.equals(complex0);
      Complex complex2 = complex1.log();
      complex2.tan();
      complex1.add(Double.NaN);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex1.equals("xH");
      Complex complex2 = complex0.log();
      complex1.tan();
      Complex complex3 = complex1.asin();
      complex3.NaN.multiply(complex2);
      complex2.add(532.354936069665);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-351.1045675277));
      Complex complex1 = complex0.cosh();
      complex1.multiply(1);
      complex1.nthRoot(307);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.negate();
      complex3.isInfinite();
      Complex.valueOf((-20.0));
      complex1.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2424.190435, 1.530436781375042E19);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = Complex.valueOf((double) 907);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.createComplex(907, 907);
      complex3.reciprocal();
      Complex complex4 = complex1.add(complex0);
      complex4.divide(complex0);
      Complex complex5 = new Complex(946.68);
      complex5.pow(complex3);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.createComplex((-4.41909071122557E-8), (-2211.2025));
      Complex complex3 = complex0.reciprocal();
      complex2.ONE.add(complex3);
      complex0.divide(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.valueOf((-2211.2025), (-2211.2025));
      complex5.negate();
      Complex complex6 = Complex.I;
      Complex complex7 = new Complex(1650.0, (-4.41909071122557E-8));
      complex7.isInfinite();
      complex4.nthRoot(167);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2025.6), 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.multiply(2146953692);
      complex3.asin();
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex5 = Complex.ONE;
      complex5.log();
      Complex complex6 = complex2.tan();
      Complex complex7 = new Complex((-552.6065258523));
      complex1.pow(complex2);
      Complex complex8 = complex6.reciprocal();
      complex8.I.sqrt1z();
      complex8.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-351.18493432166264));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.reciprocal();
      complex4.abs();
      Complex complex5 = complex2.tanh();
      Complex.valueOf(4.151794514828518E-8);
      complex0.subtract(complex1);
      Complex complex6 = complex3.divide(1239.626125294);
      complex6.ONE.pow(Double.NaN);
      complex5.createComplex((-1828.793696017477), (-1828.793696017477));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      complex0.getReal();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide((double) 907);
      Complex complex3 = complex0.cosh();
      complex3.subtract(complex1);
      complex1.sqrt();
      Complex complex4 = complex2.log();
      Complex.valueOf((-2249.0));
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      complex4.abs();
      complex0.tanh();
      complex2.getReal();
      Complex complex5 = Complex.valueOf((-3598.762177969));
      complex5.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2025.6), 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.multiply(2146953692);
      complex3.asin();
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.log();
      complex2.tan();
      complex0.atan();
      Complex complex7 = complex0.negate();
      complex6.negate();
      Complex complex8 = Complex.I;
      complex7.isInfinite();
      // Undeclared exception!
      complex4.nthRoot(2146953692);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-351.1045675277));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.add(complex2);
      complex1.sinh();
      Complex complex4 = complex3.divide((-3017.081208080981));
      Complex complex5 = complex1.cosh();
      complex5.subtract(complex1);
      complex4.sqrt();
      complex0.log();
      Complex.valueOf((-351.1045675277));
      complex5.equals(complex4);
      complex4.abs();
      complex1.tanh();
      Complex complex6 = Complex.ONE;
      complex6.getReal();
      Complex.valueOf(0.10900172727809407);
      Complex complex7 = Complex.ONE;
      complex7.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-351.1045675277));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.divide((-351.1045675277));
      complex1.subtract(complex2);
      complex2.sqrt();
      Complex.valueOf(0.044463036138362444, 0.044463036138362444);
      Complex complex4 = complex0.log();
      Complex.valueOf((-1.8409546441412518E-8));
      complex1.equals(complex2);
      complex3.abs();
      Complex complex5 = new Complex(1.0, 1.7454306955949023E94);
      Complex complex6 = complex5.tanh();
      Complex.valueOf(5.662495731848751E219);
      Complex complex7 = complex2.subtract(complex6);
      complex7.negate();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.createComplex((-0.856303237005404), (-2211.2025));
      complex0.reciprocal();
      Complex complex3 = Complex.I;
      complex2.pow(complex1);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.asin();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.acos();
      complex2.multiply(complex0);
      complex2.ZERO.getField();
      Complex complex3 = complex2.ZERO.sqrt();
      complex2.getImaginary();
      Complex complex4 = complex1.atan();
      complex4.abs();
      complex2.multiply(complex3);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.NaN.reciprocal();
      int int0 = (-884);
      try { 
        complex6.ONE.nthRoot((-884));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -884
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.readResolve();
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex4.INF.subtract(1733.2645475);
      Complex complex6 = complex4.I.sqrt();
      Complex complex7 = complex1.ONE.subtract(2.0);
      complex7.ZERO.sin();
      Complex complex8 = complex3.sqrt1z();
      complex3.ZERO.multiply(complex4);
      Complex complex9 = complex8.add(complex1);
      Complex complex10 = complex9.ONE.negate();
      complex10.ONE.tan();
      complex8.log();
      Complex complex11 = complex2.add(2.0);
      Complex complex12 = complex11.NaN.cos();
      complex11.toString();
      complex3.add(complex1);
      complex3.tan();
      complex9.multiply(Double.POSITIVE_INFINITY);
      complex1.getImaginary();
      complex6.multiply(1271);
      Complex complex13 = complex10.exp();
      complex12.add(complex13);
      complex5.tanh();
      Complex.valueOf((-832.20446079));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex((-2211.2025), (-351.1045675277));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.divide(Double.NaN);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = Complex.valueOf(Double.NaN, 0.0);
      complex6.log();
      Complex.valueOf(0.0);
      complex6.equals("'}g2L");
      complex7.abs();
      complex0.tanh();
      complex5.getReal();
      Complex.valueOf((-351.1045675277));
      complex0.subtract(complex4);
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.createComplex((-4.41909071122557E-8), (-2211.2025));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.ONE.add(complex3);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = new Complex(0.0);
      Complex complex7 = complex5.pow(complex6);
      complex7.NaN.sin();
      Complex complex8 = Complex.ZERO;
      complex8.abs();
      Complex complex9 = new Complex((-4.41909071122557E-8));
      complex2.tanh();
      complex8.pow((-3202.17));
      complex6.asin();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = Complex.valueOf((-174.90043234033));
      Complex complex4 = Complex.valueOf((-2320.0), (-2320.0));
      Complex complex5 = complex0.subtract(complex4);
      complex5.I.multiply((-244));
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex4.createComplex((-2320.0), (-635.1013749245196));
      complex3.NaN.exp();
      complex0.divide(2.0);
      Complex.valueOf(2.0);
      complex1.sin();
      Complex complex9 = Complex.valueOf(2.0);
      Complex complex10 = complex6.INF.cos();
      complex9.ZERO.atan();
      complex0.sqrt();
      complex7.sqrt();
      Complex.valueOf((-2320.0));
      complex3.reciprocal();
      complex8.sinh();
      complex10.conjugate();
      complex9.tanh();
      complex2.multiply(1796.8030327553427);
      complex6.subtract((-2320.0));
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.pow(complex0);
      complex0.ONE.abs();
      Complex complex3 = complex1.ONE.divide(complex2);
      complex3.I.hashCode();
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex4.INF.cosh();
      complex5.ZERO.getArgument();
      complex2.INF.nthRoot(686);
      Complex complex6 = complex3.ONE.add(184.0077813);
      Complex complex7 = complex0.ONE.cos();
      Complex complex8 = complex6.ONE.createComplex((-1362.967), 1.51965937149686E152);
      complex0.equals(complex1);
      complex1.abs();
      Complex.valueOf((-1062.7429));
      complex2.pow((-511.54169401027406));
      complex6.INF.abs();
      Complex complex9 = complex0.conjugate();
      complex9.INF.add(1.51965937149686E152);
      Complex complex10 = complex6.add(0.0);
      complex1.I.tan();
      complex7.INF.add(complex2);
      complex10.I.abs();
      complex7.nthRoot(3224);
      complex10.getArgument();
      complex10.createComplex((-2389.2001), (-4890.0));
      complex7.sinh();
      complex8.tanh();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.createComplex((-4.41909071122557E-8), (-2211.2025));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.ONE.add(complex3);
      Complex complex5 = complex4.divide((-1536.34));
      complex3.cosh();
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex1.negate();
      complex6.sin();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      complex1.divide(complex9);
      complex5.toString();
      Complex complex10 = Complex.I;
      complex10.atan();
      complex7.acos();
      Complex complex11 = complex7.divide(0.0);
      complex3.multiply((-1408.148728131));
      complex11.abs();
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-351.1045675277));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.ONE.cos();
      complex2.getField();
      Complex complex4 = Complex.I;
      complex4.negate();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex4.divide(complex5);
      complex6.toString();
      complex6.atan();
      Complex complex7 = complex5.acos();
      complex3.divide((-351.1045675277));
      complex7.multiply((-351.1045675277));
      complex7.abs();
      Complex complex8 = new Complex((-351.1045675277));
      Complex complex9 = Complex.valueOf((-351.1045675277), (-351.1045675277));
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-351.1045675277));
      Complex complex1 = complex0.cosh();
      complex1.pow(complex0);
      complex1.readResolve();
      complex0.getImaginary();
      Complex.valueOf((-351.1045675277), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.createComplex(1435.417213212, (-20.0));
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.INF;
      complex5.getField();
      complex3.log();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-351.1045675277));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.subtract(complex4);
      complex0.reciprocal();
      complex3.tan();
      Complex complex6 = Complex.ONE;
      complex6.ZERO.getArgument();
      complex6.hashCode();
      Complex complex7 = complex4.add((-351.1045675277));
      complex4.add(complex5);
      complex7.readResolve();
      complex6.divide(0.044463036138362444);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.getReal();
      complex0.INF.abs();
      complex1.abs();
      complex0.getArgument();
      Complex complex2 = complex0.multiply(1105);
      complex2.ONE.sinh();
      complex1.getField();
      Complex complex3 = complex2.pow(complex1);
      complex3.INF.getField();
      complex3.ZERO.negate();
      complex0.NaN.sin();
      Complex.valueOf(4.936428764615875E-4, (-20.0));
      Complex complex4 = new Complex(2416.04);
      complex4.negate();
      complex0.negate();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply(1);
      complex3.ONE.nthRoot(1);
      Complex complex4 = complex3.divide(complex1);
      complex2.toString();
      complex4.atan();
      complex2.acos();
      Complex complex5 = complex0.divide((-0.042656451544053356));
      complex4.multiply((-822648.0));
      complex5.abs();
      Complex complex6 = new Complex((-0.042656451544053356));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-6038.188116620426), 1931.80161481);
      complex0.nthRoot(132);
      complex0.sinh();
      complex0.log();
      Complex complex1 = Complex.valueOf((double) 1);
      // Undeclared exception!
      complex1.nthRoot(472766698);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-351.1045675277));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.divide(196.683011571);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex4.log();
      Complex complex9 = Complex.valueOf(196.683011571);
      complex8.equals(complex9);
      complex8.abs();
      Complex complex10 = complex6.tanh();
      complex7.getReal();
      Complex.valueOf(871.515072934);
      complex9.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
      Complex complex1 = complex0.INF.add(720.675635121);
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex6.NaN.multiply(Integer.MAX_VALUE);
      Complex complex8 = complex0.createComplex(1534.8, 1534.8);
      complex4.ZERO.multiply(complex5);
      complex8.ZERO.abs();
      Complex complex9 = complex8.cos();
      complex3.ONE.add((-1989.19508));
      complex9.NaN.pow((-231.52187));
      Complex complex10 = complex2.multiply(complex1);
      Complex complex11 = complex10.NaN.multiply(0.0);
      complex7.toString();
      Complex complex12 = complex2.pow(1376.3016);
      Complex complex13 = complex12.NaN.atan();
      Complex complex14 = complex1.pow(complex9);
      complex4.getArgument();
      complex13.ZERO.subtract(complex7);
      complex14.add((double) Integer.MAX_VALUE);
      complex13.sinh();
      Complex complex15 = complex3.multiply(complex8);
      complex15.I.divide(complex8);
      complex12.asin();
      complex10.atan();
      complex11.add(complex10);
      complex3.reciprocal();
      complex10.cos();
      complex14.getImaginary();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.add(2416.04);
      complex1.getReal();
      complex0.INF.abs();
      complex1.abs();
      complex0.getArgument();
      Complex complex3 = Complex.valueOf(5.070274654122399E107);
      Complex complex4 = complex2.multiply(1105);
      complex4.ONE.sinh();
      complex1.NaN.getField();
      Complex complex5 = complex4.pow(complex1);
      complex5.INF.getField();
      complex5.ZERO.negate();
      Complex complex6 = complex0.NaN.sin();
      complex2.divide(complex4);
      Complex complex7 = complex0.log();
      complex7.toString();
      Complex complex8 = complex1.atan();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      complex9.ONE.divide((-5719.0944516));
      complex9.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex1.multiply(Double.NEGATIVE_INFINITY);
      complex8.abs();
      complex10.cos();
      Complex complex11 = complex0.exp();
      complex3.equals(complex6);
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2025.6), 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex2.multiply(380);
      Complex complex6 = complex2.sinh();
      complex4.getField();
      Complex complex7 = complex6.pow(complex5);
      complex5.getField();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.negate();
      complex9.sin();
      complex2.divide(complex3);
      complex8.log();
      complex8.toString();
      Complex complex10 = complex4.atan();
      complex10.acos();
      complex7.divide((double) 380);
      complex8.multiply((double) 380);
      complex9.abs();
      complex0.cos();
      Complex complex11 = Complex.INF;
      complex11.exp();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.add(2416.04);
      complex1.getReal();
      complex0.INF.abs();
      complex1.abs();
      complex0.getArgument();
      Complex complex3 = Complex.valueOf(5.070274654122399E107);
      Complex complex4 = complex3.divide(3270.0);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex4.subtract(complex3);
      complex2.sqrt();
      Complex complex7 = complex1.log();
      Complex complex8 = Complex.valueOf(0.7853981633974483);
      complex5.cos();
      complex8.equals(complex2);
      Complex complex9 = Complex.INF;
      complex9.abs();
      complex6.tanh();
      complex2.getReal();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-351.1045675277));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.ONE.cos();
      complex0.ONE.sqrt1z();
      complex3.INF.reciprocal();
      Complex complex4 = complex1.reciprocal();
      complex2.getField();
      Complex complex5 = complex4.log();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.negate();
      complex1.log();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.ZERO;
      complex5.toString();
      complex2.atan();
      Complex complex6 = complex3.acos();
      complex6.I.sqrt();
      Complex complex7 = complex1.divide((-383.9));
      Complex complex8 = complex0.multiply((-2825.427655852));
      complex8.abs();
      complex7.cos();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2025.6), 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex4.I.divide(20.0);
      Complex complex6 = complex3.INF.cosh();
      Complex complex7 = complex3.subtract(complex0);
      complex7.NaN.sqrt();
      complex3.ZERO.log();
      Complex complex8 = Complex.valueOf(0.0);
      complex7.ONE.cos();
      complex2.equals(complex7);
      complex2.multiply(398.756350847105);
      complex8.readResolve();
      Complex complex9 = complex1.subtract(20.0);
      complex5.readResolve();
      Complex.valueOf(20.0, (-2025.6));
      complex6.multiply(complex7);
      Complex complex10 = Complex.valueOf((-72.0));
      complex10.negate();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.getReal();
      complex0.INF.abs();
      complex1.abs();
      complex0.getArgument();
      Complex complex2 = complex0.multiply(1105);
      complex2.ONE.sinh();
      complex1.NaN.getField();
      Complex complex3 = complex2.pow(complex1);
      complex3.INF.getField();
      complex3.ZERO.negate();
      complex0.NaN.sin();
      complex0.divide(complex2);
      complex0.toString();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.acos();
      complex5.ZERO.divide(Double.POSITIVE_INFINITY);
      complex1.multiply(Double.NEGATIVE_INFINITY);
      complex4.abs();
      Complex complex6 = new Complex(Double.NaN);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-351.1045675277));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.divide(complex1);
      complex1.ONE.cos();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.reciprocal();
      complex2.getField();
      complex4.log();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(1105.5);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex2.ZERO.pow(complex0);
      complex4.INF.sin();
      complex3.INF.pow(569.558);
      double double0 = 0.0;
      Complex.valueOf(1.7430980205535889);
      Complex complex5 = complex4.NaN.createComplex((-3654.581769), 0.0);
      complex5.tan();
      int int0 = 0;
      try { 
        complex4.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-351.1045675277));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.divide(complex1);
      complex1.ONE.cos();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.reciprocal();
      complex2.getField();
      Complex complex5 = complex4.log();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-475.755451), 217.6676205312);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.add((-475.755451));
      complex1.hashCode();
      complex2.divide(217.6676205312);
      complex0.pow(complex1);
      Complex complex3 = complex1.multiply(complex2);
      complex1.divide(complex3);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      complex1.ZERO.tanh();
      complex1.NaN.sqrt1z();
      Complex.valueOf((-136.8481));
      Complex complex2 = complex0.sin();
      complex0.INF.conjugate();
      Complex complex3 = complex0.acos();
      complex0.INF.asin();
      complex0.ZERO.tan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.atan();
      complex2.pow((-336.7299894));
      complex5.NaN.readResolve();
      Complex complex6 = complex4.cosh();
      complex6.ONE.multiply(complex3);
      Complex.valueOf((-336.7299894));
      int int0 = (-3256);
      complex3.conjugate();
      try { 
        complex4.I.nthRoot((-3256));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,256
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.INF.add(1.0);
      complex1.INF.toString();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex0.tanh();
      complex3.readResolve();
      complex0.getReal();
      Complex complex9 = complex4.log();
      Complex complex10 = complex9.multiply((-264));
      complex10.add(complex2);
      Complex complex11 = Complex.NaN;
      complex8.equals(complex11);
      complex2.sqrt();
      Complex complex12 = complex3.cos();
      complex7.tan();
      Complex.valueOf((-3563.6821), (-3563.6821));
      complex1.divide(0.0);
      complex7.negate();
      Complex complex13 = complex0.subtract(complex1);
      complex3.I.getField();
      complex13.cos();
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0));
      complex0.ONE.hashCode();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.conjugate();
      complex0.atan();
      Complex complex3 = complex2.add(0.0);
      complex0.I.hashCode();
      int int0 = 0;
      try { 
        complex3.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      complex0.exp();
      complex0.add(complex1);
      Complex.valueOf((-551.567886558));
      complex0.I.cos();
      complex1.acos();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.ZERO.exp();
      complex3.I.sqrt();
      complex1.log();
      complex1.getArgument();
      complex1.isNaN();
      Complex.valueOf(0.0, (-3297.603499523));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      complex0.negate();
      complex0.sinh();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.subtract(complex0);
      double double0 = (-8.780756503572527E-8);
      complex0.ONE.reciprocal();
      complex2.ZERO.acos();
      Complex.valueOf((-8.780756503572527E-8), (-8.780756503572527E-8));
      int int0 = (-1605);
      try { 
        complex0.nthRoot((-1605));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,605
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.conjugate();
      complex2.sqrt();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.I.cos();
      complex3.ZERO.nthRoot(2472);
      complex5.ZERO.exp();
      Complex complex6 = complex4.ONE.sqrt1z();
      Complex complex7 = complex4.pow(1.1155805587768555);
      complex7.NaN.readResolve();
      Complex complex8 = Complex.valueOf(6.283185307179586);
      complex6.isNaN();
      complex8.multiply((-2237));
      complex5.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(5.262017392507765E-9, 2156.103926);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex1.ONE.multiply((-781.7049681922));
      Complex complex4 = complex0.cosh();
      Complex complex5 = Complex.valueOf(5.262017392507765E-9);
      complex4.NaN.conjugate();
      complex3.NaN.abs();
      Complex complex6 = complex3.cos();
      complex6.INF.atan();
      complex6.NaN.acos();
      complex6.I.reciprocal();
      complex6.hashCode();
      Complex complex7 = complex3.INF.reciprocal();
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex3.subtract((-20.0));
      complex9.INF.sqrt();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex10.I.multiply(1912.44);
      Complex complex12 = complex11.I.multiply(1912.44);
      complex0.toString();
      complex11.NaN.cosh();
      complex0.isInfinite();
      complex4.getField();
      Complex complex13 = complex3.multiply(complex0);
      Complex complex14 = complex2.createComplex(4256.518, 1912.44);
      complex13.exp();
      complex8.cos();
      complex12.asin();
      complex5.tanh();
      complex14.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-6038.188116620426), 1931.80161481);
      complex0.I.atan();
      complex0.conjugate();
      complex0.subtract((-6038.188116620426));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      complex0.getReal();
      Complex complex1 = complex0.multiply(907);
      Complex complex2 = complex0.ONE.asin();
      complex1.equals(complex0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.tanh();
      complex6.hashCode();
      complex0.tan();
      Complex complex7 = complex1.sqrt1z();
      complex2.ZERO.sqrt();
      Complex complex8 = complex1.pow(complex5);
      complex0.equals(complex2);
      Complex complex9 = complex4.pow(complex5);
      complex9.NaN.toString();
      complex8.ZERO.pow(0.0);
      complex9.NaN.multiply(0.0);
      complex8.readResolve();
      complex5.getField();
      complex2.atan();
      Complex complex10 = Complex.valueOf((-2201.1269), (double) 907);
      complex10.multiply(0.0);
      complex3.readResolve();
      complex0.NaN.subtract((double) 907);
      complex5.readResolve();
      Complex complex11 = Complex.valueOf(Double.NaN, 4.3529009584292495E52);
      complex7.multiply(complex11);
      complex0.negate();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.multiply((-3125));
      complex3.getArgument();
      complex3.ONE.abs();
      complex1.sqrt1z();
      Complex complex5 = complex3.INF.subtract(0.0);
      complex5.NaN.hashCode();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex4.I.pow((-627.745318));
      Complex complex8 = complex2.INF.exp();
      complex8.INF.divide(complex1);
      complex8.NaN.readResolve();
      complex0.NaN.getField();
      Complex complex9 = complex6.atan();
      complex6.getArgument();
      Complex complex10 = complex2.pow(complex4);
      complex10.ZERO.hashCode();
      Complex complex11 = complex7.divide(complex9);
      complex11.I.acos();
      complex7.asin();
      complex5.multiply(0.0);
      complex9.toString();
      complex0.divide(complex7);
      complex4.cos();
      complex2.getImaginary();
      complex8.sqrt1z();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-4.41909071122557E-8);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.createComplex((-4.41909071122557E-8), (-2211.2025));
      Complex complex3 = complex0.reciprocal();
      complex2.ONE.add(complex3);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = new Complex((-552.6065258523));
      Complex complex6 = complex4.pow(complex5);
      complex6.NaN.sin();
      try { 
        complex6.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex1.NaN.acos();
      complex0.getField();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex4.divide(complex3);
      complex4.INF.sinh();
      Complex complex6 = complex0.divide(complex5);
      complex1.equals(complex3);
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex7.NaN.subtract(complex1);
      complex8.ZERO.tanh();
      Complex complex9 = complex7.ONE.tanh();
      complex8.ZERO.multiply(complex0);
      Complex complex10 = complex7.negate();
      complex10.ZERO.sinh();
      complex10.sqrt();
      complex2.multiply(complex3);
      complex9.pow(0.0);
      complex6.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ONE.negate();
      complex1.getImaginary();
      complex2.NaN.atan();
      complex0.pow(complex1);
      complex2.readResolve();
      complex2.getImaginary();
      Complex complex3 = Complex.valueOf(-0.0, 0.0);
      complex3.INF.atan();
      Complex complex4 = complex2.ONE.createComplex(2001.3859291, 0.0);
      Complex complex5 = new Complex(2001.3859291);
      complex4.ZERO.pow(complex5);
      complex1.multiply(432);
      Complex complex6 = complex0.divide(0.0);
      complex6.NaN.multiply(complex0);
      complex1.equals("e^O)m}m|Boq]R?p&o");
      complex2.abs();
      Complex.valueOf((-1114.703244013));
      Complex.valueOf(-0.0, 1.0);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2025.6), 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.sinh();
      complex4.I.divide(20.0);
      complex3.INF.cosh();
      Complex complex5 = complex3.subtract(complex0);
      complex5.NaN.sqrt();
      Complex complex6 = complex3.ZERO.log();
      Complex.valueOf(0.0);
      complex5.ONE.cos();
      complex2.equals(complex5);
      complex5.abs();
      complex5.tanh();
      complex5.getReal();
      Complex.valueOf(0.0);
      complex6.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = new Complex(2.0145352306345386E-8, 2.0145352306345386E-8);
      complex0.ZERO.readResolve();
      Complex.valueOf(2.0145352306345386E-8);
      Complex complex3 = complex2.NaN.add(2.0145352306345386E-8);
      Complex complex4 = complex0.divide(complex2);
      complex0.getReal();
      Complex complex5 = complex2.I.add(complex1);
      Complex complex6 = complex5.I.sqrt();
      complex6.NaN.acos();
      Complex complex7 = complex2.ZERO.sin();
      Complex complex8 = complex7.ZERO.conjugate();
      complex4.tan();
      Complex complex9 = Complex.valueOf(2.0145352306345386E-8, (-371.31));
      complex9.I.subtract(complex3);
      complex9.INF.add(complex0);
      Complex complex10 = complex9.INF.log();
      Complex complex11 = complex0.multiply(complex4);
      complex11.I.exp();
      complex9.getField();
      complex2.hashCode();
      Complex complex12 = complex2.reciprocal();
      complex9.ONE.subtract(0.0);
      complex12.I.hashCode();
      complex11.add(complex2);
      complex4.getImaginary();
      complex0.sinh();
      complex8.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1809.59);
      complex0.isNaN();
      Complex complex1 = complex0.add(0.0);
      complex1.NaN.getArgument();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.cos();
      complex3.abs();
      Complex complex5 = complex4.INF.sqrt1z();
      complex3.getField();
      Complex complex6 = complex2.log();
      complex2.abs();
      complex2.toString();
      complex4.getReal();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex8.ONE.divide(complex5);
      complex9.ZERO.multiply(complex4);
      Complex complex10 = complex6.tan();
      complex10.ZERO.getField();
      complex3.toString();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(6.353142754175797E-8);
      complex0.sqrt();
      complex0.multiply(501);
      complex0.ONE.tan();
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex1.NaN.subtract(0.0);
      Complex complex2 = complex0.pow(0.0);
      complex2.sqrt();
      Complex complex3 = complex2.conjugate();
      complex3.ZERO.log();
      complex0.INF.divide(complex1);
      complex0.readResolve();
      complex0.getReal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.subtract(complex4);
      complex5.readResolve();
      complex4.getImaginary();
      complex1.createComplex(0.0, 501);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.add(2416.04);
      complex1.getReal();
      complex0.INF.abs();
      complex1.abs();
      complex0.getArgument();
      Complex.valueOf(5.070274654122399E107);
      Complex complex3 = complex2.multiply(1105);
      complex3.ONE.sinh();
      complex1.NaN.getField();
      Complex complex4 = complex3.pow(complex1);
      complex4.INF.getField();
      complex4.ZERO.negate();
      complex0.NaN.sin();
      complex2.divide(complex3);
      Complex complex5 = complex0.log();
      complex5.toString();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.acos();
      complex7.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.multiply(Double.NEGATIVE_INFINITY);
      complex6.abs();
      complex8.cos();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex0.ZERO.pow(complex2);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.ONE.conjugate();
      complex8.NaN.hashCode();
      Complex complex9 = complex1.negate();
      complex9.ZERO.exp();
      Complex complex10 = complex1.sin();
      complex10.I.abs();
      Complex complex11 = Complex.NaN;
      complex1.I.divide(complex11);
      Complex complex12 = Complex.valueOf(1.7008878437355237E104, 3008.55439158);
      complex2.I.log();
      Complex complex13 = complex12.sqrt1z();
      Complex complex14 = complex12.ZERO.asin();
      complex5.cosh();
      complex3.getReal();
      complex6.negate();
      complex6.isInfinite();
      Complex complex15 = complex4.negate();
      complex14.abs();
      complex13.log();
      Complex complex16 = complex15.subtract(1.7008878437355237E104);
      complex16.ONE.tanh();
      complex15.subtract(complex11);
      complex4.readResolve();
      Complex.valueOf((-3.369999130712228E-9), 0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.5324647426605225);
      Complex complex1 = complex0.I.divide(0.28229647874832153);
      complex1.NaN.hashCode();
      complex0.abs();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.cosh();
      complex1.acos();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.reciprocal();
      complex3.tan();
      complex4.hashCode();
      complex0.add(0.0);
      complex4.add(complex5);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.getReal();
      Complex complex2 = complex0.log();
      complex0.ZERO.toString();
      complex2.getImaginary();
      Complex complex3 = complex1.I.pow(0.15860503911972046);
      complex3.I.readResolve();
      complex3.ONE.sqrt1z();
      Complex complex4 = complex0.subtract(2.993183789477209E-192);
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.I.add(2.993183789477209E-192);
      Complex complex7 = complex2.tanh();
      complex7.NaN.readResolve();
      Complex complex8 = complex0.NaN.exp();
      complex2.INF.asin();
      Complex complex9 = complex8.ZERO.sqrt();
      complex0.ZERO.cosh();
      complex8.NaN.abs();
      complex4.log();
      complex4.INF.readResolve();
      complex8.I.abs();
      complex0.ZERO.abs();
      complex4.sin();
      complex1.nthRoot(17);
      complex5.abs();
      complex6.sin();
      complex7.nthRoot(17);
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1710.1269659933969);
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.INF.sqrt();
      complex3.NaN.cosh();
      Complex complex4 = complex0.ONE.reciprocal();
      Complex complex5 = complex0.INF.sqrt();
      Complex complex6 = complex0.subtract(complex1);
      complex6.ZERO.toString();
      Complex complex7 = complex6.ONE.multiply(0.0);
      Complex complex8 = complex7.I.multiply(complex0);
      Complex complex9 = complex7.divide(complex0);
      Complex complex10 = complex6.ZERO.cos();
      Complex complex11 = complex10.ONE.atan();
      Complex complex12 = complex6.multiply(complex0);
      Complex complex13 = complex12.NaN.log();
      complex13.INF.tanh();
      complex12.I.negate();
      Complex complex14 = complex12.NaN.exp();
      complex14.I.hashCode();
      complex8.NaN.abs();
      Complex complex15 = complex0.asin();
      complex15.I.pow(complex8);
      Complex complex16 = complex4.add(1710.1269659933969);
      complex5.getArgument();
      complex6.ZERO.sqrt();
      Complex complex17 = complex15.multiply(0);
      Complex complex18 = complex7.divide(complex0);
      complex18.NaN.log();
      Complex complex19 = complex16.subtract(Double.NaN);
      complex19.NaN.multiply(complex17);
      complex2.getArgument();
      complex9.atan();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-383.9), (-383.9));
      Complex complex1 = complex0.sqrt();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(634.5559807856422, 634.5559807856422);
      Complex complex1 = complex0.ONE.asin();
      complex1.INF.multiply(440);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-147.5480993), 2.2934980392456055);
      Complex complex1 = new Complex(2.2934980392456055, 2.2934980392456055);
      complex1.I.readResolve();
      complex1.ONE.negate();
      Complex complex2 = complex0.add(complex1);
      complex2.pow((-147.5480993));
      complex0.getField();
      Complex.valueOf(2.0, (-147.5480993));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.reciprocal();
      Complex complex1 = complex0.ZERO.asin();
      complex0.ZERO.subtract(complex1);
      complex1.tanh();
      Complex complex2 = complex1.ONE.multiply(0.0);
      complex2.NaN.sin();
      Complex complex3 = complex1.NaN.cos();
      int int0 = 0;
      try { 
        complex3.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex1.readResolve();
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex1.add(315.979496);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.cos();
      complex3.INF.divide(0.0);
      complex1.NaN.toString();
      Complex complex5 = complex0.conjugate();
      complex5.ZERO.conjugate();
      complex5.ZERO.getField();
      complex1.getField();
      complex2.isNaN();
      Complex complex6 = complex3.asin();
      complex6.sinh();
      Complex complex7 = complex0.subtract(0.0);
      complex7.INF.multiply(315.979496);
      complex7.NaN.reciprocal();
      complex1.divide(294.672);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, (-2334.1));
      complex1.ZERO.abs();
      Complex complex2 = complex1.ONE.conjugate();
      try { 
        complex2.ONE.nthRoot((-976));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -976
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.962256961838823E292), 6.686758417135634E116);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.divide(6.686758417135634E116);
      Complex complex4 = complex0.subtract(6.686758417135634E116);
      Complex complex5 = complex2.NaN.conjugate();
      complex3.createComplex(6.686758417135634E116, 1537.293353128);
      Complex complex6 = complex5.atan();
      complex6.ZERO.cosh();
      complex4.pow(6.686758417135634E116);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(3372.460305097611, 3372.460305097611);
      Complex complex1 = Complex.ZERO;
      complex0.ONE.multiply(complex1);
      Complex complex2 = Complex.valueOf(2209.9642);
      Complex complex3 = complex2.NaN.reciprocal();
      complex2.INF.cosh();
      Complex complex4 = Complex.valueOf(3372.460305097611, 6.23514943204966E27);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.INF.multiply(complex0);
      Complex complex7 = complex0.multiply(complex2);
      complex7.INF.cosh();
      Complex complex8 = complex6.acos();
      complex6.cosh();
      Complex complex9 = complex8.ONE.pow(2209.9642);
      complex9.ZERO.subtract(complex5);
      complex2.log();
      Complex complex10 = complex1.divide(complex4);
      Complex.valueOf(3372.460305097611, 2209.9642);
      Complex complex11 = complex10.INF.exp();
      complex4.divide(complex0);
      complex5.negate();
      complex11.cos();
      complex3.atan();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(232.85568084417181);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-20.18));
      complex2.ZERO.multiply((-4160.89108));
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex3.divide((-20.18));
      complex4.ZERO.readResolve();
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex5.negate();
      complex3.sinh();
      complex1.ONE.hashCode();
      Complex complex7 = complex0.add(complex1);
      complex7.ONE.getField();
      complex7.NaN.abs();
      complex3.NaN.tanh();
      Complex complex8 = complex3.acos();
      complex8.I.asin();
      Complex complex9 = complex8.atan();
      complex9.tan();
      complex6.add((-20.0));
      complex8.divide((-20.0));
      Complex.valueOf((-873.3), (-20.0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.sinh();
      List<Complex> list0 = complex2.ONE.nthRoot(1643);
      assertEquals(1643, list0.size());
      
      complex2.hashCode();
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.valueOf((double) 1643, (-7.049068240916723E166));
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = Complex.valueOf(907.762);
      complex5.I.readResolve();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex2.pow(complex5);
      complex8.multiply(complex5);
      Complex complex9 = complex7.log();
      Complex complex10 = complex9.log();
      complex10.INF.sinh();
      Complex complex11 = complex0.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      assertTrue(complex11.isInfinite());
      
      Complex complex12 = complex7.conjugate();
      complex9.abs();
      Complex complex13 = complex3.asin();
      assertSame(complex13, complex8);
      
      complex5.abs();
      Complex complex14 = Complex.valueOf((-7.049068240916723E166));
      double double0 = complex4.abs();
      assertEquals(7.049068240916723E166, double0, 0.01);
      assertEquals((-7.049068240916723E166), complex4.getImaginary(), 0.01);
      
      complex6.getField();
      complex9.pow(complex5);
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertNotSame(complex9, complex14);
      assertSame(complex9, complex12);
  }
}
