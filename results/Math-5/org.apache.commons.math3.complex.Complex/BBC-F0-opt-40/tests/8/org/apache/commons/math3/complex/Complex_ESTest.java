/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:15:23 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = new Complex((-20.0), (-907.78751));
      complex0.acos();
      complex1.INF.multiply(complex0);
      Complex complex4 = Complex.valueOf((-20.0), (-20.0));
      complex4.tan();
      Complex complex5 = Complex.ONE;
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex((-0.21627523825289996));
      Complex complex3 = Complex.valueOf(1.1175870895385742E-8);
      Complex complex4 = complex3.tan();
      complex2.add(complex1);
      Complex complex5 = Complex.ZERO;
      Complex.valueOf((-2883.2426819210154), 1425.76);
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.add(complex3);
      complex7.tan();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.negate();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(1.0);
      complex1.divide(complex0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.sinh();
      complex2.tan();
      Complex complex4 = Complex.valueOf(261.9373674, 20.0);
      complex4.tan();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-690.31252), (-690.31252));
      Complex complex1 = Complex.valueOf(2922.7952);
      complex1.divide(complex0);
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex(2922.7952, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.I;
      complex3.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex0.conjugate();
      complex0.toString();
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.equals(complex2);
      complex3.add(Double.NaN);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.acos();
      complex3.sinh();
      complex5.tan();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-690.31252));
      Complex complex1 = complex0.acos();
      complex0.cos();
      complex0.equals(complex1);
      double double0 = (-1.1368933260611668E-7);
      Complex complex2 = complex1.add((-1.1368933260611668E-7));
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-690.31252), 2922.7952);
      Complex complex1 = complex0.asin();
      complex0.conjugate();
      complex0.toString();
      complex1.equals(complex1);
      Complex complex2 = Complex.valueOf((-690.31252), Double.POSITIVE_INFINITY);
      Complex.valueOf(2187.815626316505, (-74.49));
      complex0.getArgument();
      Complex.valueOf(1.8027284251790507);
      Complex complex3 = complex0.divide(complex1);
      complex3.ONE.cosh();
      Complex complex4 = Complex.I;
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-690.31252), 2922.7952);
      Complex complex1 = complex0.asin();
      complex0.conjugate();
      complex0.toString();
      complex1.equals(complex1);
      Complex complex2 = Complex.valueOf((-690.31252), Double.POSITIVE_INFINITY);
      Complex.valueOf(2187.815626316505, (-74.49));
      complex1.multiply(2922.7952);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-690.31252), 2922.7952);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(18.007863440766904);
      Complex complex3 = complex2.conjugate();
      complex2.toString();
      Complex complex4 = complex3.cos();
      complex4.equals(complex1);
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.valueOf((-690.31252), Double.POSITIVE_INFINITY);
      complex2.getArgument();
      complex5.add(2922.7952);
      complex1.divide(complex2);
      complex2.acos();
      complex4.sinh();
      complex6.multiply(2039);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(433.280582, 433.280582);
      Complex complex1 = complex0.add(433.280582);
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex1.I.add(0.9999658678121035);
      complex2.ZERO.atan();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.multiply(complex2);
      complex5.ZERO.sinh();
      complex4.NaN.sin();
      complex0.readResolve();
      Complex complex6 = complex1.subtract(0.9999658678121035);
      Complex complex7 = complex0.subtract(complex3);
      complex7.ONE.log();
      Complex complex8 = complex6.cosh();
      complex8.ONE.conjugate();
      Complex complex9 = complex1.divide(388.96020881);
      complex6.ZERO.log();
      complex8.negate();
      complex6.pow(2775.17794188);
      Complex complex10 = complex2.tan();
      complex10.getField();
      complex10.createComplex(2775.17794188, 2775.17794188);
      complex5.multiply(complex6);
      complex9.createComplex(226.471536251907, 263.8345);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-820.2449553079057), (-820.2449553079057));
      Complex complex1 = new Complex((-820.2449553079057), (-1376.8282583));
      complex0.equals(complex1);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1376.8282583));
      complex2.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.add((-1.0));
      complex3.divide(complex0);
      complex5.acos();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.tan();
      complex0.tan();
      complex0.sin();
      complex5.pow(Double.NaN);
      complex3.sin();
      Complex complex8 = Complex.INF;
      complex7.add(complex0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex(1491, Double.POSITIVE_INFINITY);
      complex1.tan();
      Complex complex3 = Complex.INF;
      complex1.sin();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.pow(1.0);
      complex0.sin();
      Complex complex5 = Complex.ONE;
      complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-690.31252), (-690.31252));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(692);
      Complex complex3 = Complex.valueOf((-690.31252));
      Complex complex4 = complex3.divide(complex0);
      complex4.readResolve();
      complex4.equals(complex2);
      complex1.divide(complex2);
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-1.3841980097978606E208), (-1.3841980097978606E208));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ZERO;
      complex0.INF.readResolve();
      Complex complex3 = complex2.negate();
      complex1.tanh();
      complex1.hashCode();
      complex3.multiply(complex1);
      complex0.readResolve();
      complex1.equals(complex0);
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 2.6329649017498014E-4);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.sqrt();
      complex3.ZERO.getArgument();
      complex1.ZERO.pow(complex2);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ZERO.multiply(complex0);
      complex2.ONE.sinh();
      complex5.asin();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.ZERO.tanh();
      complex0.ZERO.log();
      Complex complex8 = complex1.subtract(2801.7367154426);
      Complex complex9 = complex6.INF.reciprocal();
      complex0.exp();
      complex5.sin();
      complex7.NaN.abs();
      complex2.subtract((-1.0011813945915344));
      Complex complex10 = complex7.acos();
      complex9.subtract(complex6);
      Complex complex11 = complex8.asin();
      complex10.divide(20.0);
      complex8.abs();
      complex1.pow(complex11);
      Complex.valueOf((-736.618));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2257.929);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.add((-1.3841980097978606E208));
      Complex complex4 = complex3.subtract(2257.929);
      Complex complex5 = complex3.acos();
      complex4.conjugate();
      complex0.toString();
      complex4.cos();
      complex1.equals("(2257.929, 0.0)");
      Complex complex6 = complex0.negate();
      complex2.hashCode();
      Complex complex7 = Complex.valueOf((-1.3841980097978606E208));
      complex3.getArgument();
      Complex complex8 = complex4.add(4930974.5364);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex3.divide(complex9);
      Complex complex11 = complex2.acos();
      complex11.sinh();
      complex8.tan();
      complex0.tan();
      complex4.sin();
      complex2.pow(2439.180152767);
      complex6.sin();
      Complex.valueOf((-1.3841980097978606E208));
      complex7.add(complex5);
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-1.3841980097978606E208), (-1.3841980097978606E208));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(692);
      Complex complex3 = new Complex(692, (-1.3841980097978606E208));
      Complex complex4 = complex3.negate();
      complex0.hashCode();
      Complex complex5 = Complex.valueOf((-1.3841980097978606E208));
      complex1.getArgument();
      Complex complex6 = complex2.add(2.0);
      Complex complex7 = complex4.divide(complex6);
      Complex complex8 = new Complex(2.0);
      complex8.acos();
      Complex complex9 = complex8.sinh();
      complex0.tan();
      Complex complex10 = complex7.tan();
      complex8.sin();
      complex9.pow((double) 692);
      complex0.sin();
      Complex complex11 = complex10.pow(complex5);
      complex11.subtract(complex8);
      complex4.conjugate();
      complex10.sqrt();
      complex0.pow(0.7853981633974483);
      complex3.ZERO.divide((-1.3841980097978606E208));
      Complex.valueOf((-875.162887275), 1056.169334);
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-690.31252));
      Complex complex1 = Complex.valueOf((-690.31252), 4832.28234040339);
      Complex complex2 = complex0.pow(complex1);
      complex2.readResolve();
      Complex complex3 = Complex.valueOf(4832.28234040339, (-690.31252));
      Object object0 = complex0.readResolve();
      complex1.I.divide((-1695.74));
      complex3.equals(object0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.asin();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply((-20.0));
      complex2.ONE.sqrt();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.subtract(1.5069412868172555E-236);
      Complex.valueOf(1.5069412868172555E-236);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.subtract(complex0);
      Complex complex5 = complex2.tanh();
      complex0.multiply(Double.NaN);
      complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf((-690.31252), (-690.31252));
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.valueOf(953028.1799999998);
      Complex complex6 = Complex.valueOf((-1663.408169853));
      complex2.divide(complex5);
      complex4.acos();
      complex4.sinh();
      complex4.tan();
      Complex complex7 = complex5.pow((-1.7853937806206028));
      Complex complex8 = complex3.sin();
      Complex complex9 = Complex.valueOf(4902.6299638);
      complex6.pow(complex9);
      complex8.conjugate();
      complex0.sqrt();
      complex7.pow(3.1968677404735245E92);
      Complex.valueOf(953028.1799999998, 4902.6299638);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf((-690.31252), (-690.31252));
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = new Complex(2292.1521916, 2292.1521916);
      complex7.acos();
      Complex complex8 = new Complex(2292.1521916, 2292.1521916);
      Complex complex9 = complex3.tan();
      complex1.tan();
      Complex complex10 = complex6.sin();
      complex10.pow((-690.31252));
      complex10.sin();
      complex0.pow(complex5);
      complex8.subtract(complex9);
      complex5.conjugate();
      complex5.sqrt();
      complex10.pow(5.337290292186291E139);
      Complex.valueOf((-2985.0372), Double.POSITIVE_INFINITY);
      complex4.log();
      complex7.subtract((-443.9846696795));
      complex2.getField();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(2368.4, 5086.0);
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.tan();
      complex4.ONE.pow(complex2);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.subtract(complex3);
      complex7.tanh();
      complex6.multiply(5086.0);
      complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(490.4839);
      Complex complex1 = complex0.ONE.divide(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.multiply(complex0);
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.createComplex(2368.4, 0.6435998678207397);
      Complex complex4 = complex2.conjugate();
      complex0.reciprocal();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.subtract(complex3);
      complex6.tanh();
      complex6.getArgument();
      Object object0 = new Object();
      Complex complex7 = Complex.valueOf(2748.079998591538, Double.POSITIVE_INFINITY);
      complex7.sinh();
      complex5.negate();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2436.393359518153);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.ZERO.toString();
      Complex complex2 = complex0.tanh();
      complex0.getArgument();
      Complex complex3 = complex1.negate();
      complex2.pow(complex3);
      Complex complex4 = complex3.tan();
      Complex.valueOf(2436.393359518153);
      complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.NaN.nthRoot(1863);
      Complex complex1 = complex0.tanh();
      complex1.INF.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.INF.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ONE.asin();
      complex5.ONE.log();
      complex0.I.abs();
      complex1.INF.abs();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.pow(complex6);
      complex8.INF.sinh();
      complex6.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.INF.asin();
      complex9.I.asin();
      complex2.cosh();
      Complex complex10 = complex3.sqrt1z();
      complex10.ZERO.multiply(complex2);
      Complex complex11 = complex0.sqrt1z();
      complex2.negate();
      Complex complex12 = complex11.atan();
      complex12.sinh();
      complex10.pow((-1089.618394));
      complex0.sqrt();
      complex3.abs();
      complex6.nthRoot(1153);
      complex9.createComplex(Double.POSITIVE_INFINITY, (-1089.618394));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2100088103262734E-7, (-227.86346268666));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex2.ZERO.negate();
      complex3.I.tanh();
      Complex complex4 = complex1.multiply(10);
      complex0.hashCode();
      Complex complex5 = complex4.conjugate();
      complex5.cosh();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1.3841980097978606E208), (-1.3841980097978606E208));
      Complex complex1 = Complex.valueOf((-1.3841980097978606E208), (-1.3841980097978606E208));
      Complex complex2 = complex1.multiply(692);
      Complex complex3 = complex0.divide(complex1);
      complex0.add((-1.3841980097978606E208));
      complex0.NaN.multiply(complex1);
      complex2.cos();
      complex2.NaN.sqrt();
      Complex complex4 = complex3.INF.createComplex(1.0338809935761448, 1.0338809935761448);
      complex2.exp();
      complex1.ONE.log();
      Complex.valueOf((-1.3841980097978606E208), 5240.94716);
      Complex complex5 = complex4.exp();
      complex5.INF.pow(1.0338809935761448);
      complex0.log();
      complex1.asin();
      complex1.multiply((-2147479141));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(490.4839);
      Complex complex1 = new Complex((-208.6629442952805), (-208.6629442952805));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.add(677.034566);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex4.createComplex((-1.0), (-1.3841980097978606E208));
      Complex complex8 = complex2.exp();
      Complex complex9 = complex7.log();
      complex7.asin();
      Complex.valueOf((-1.0), (-2970.924078));
      Complex complex10 = complex8.exp();
      complex10.I.cos();
      complex9.pow(490.4839);
      complex6.log();
      complex1.asin();
      complex7.multiply((-558));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(490.4839);
      Complex complex1 = complex0.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.acos();
      complex3.getArgument();
      complex4.abs();
      Complex complex6 = Complex.valueOf(3.621549057015727E-4, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.subtract(complex3);
      complex5.isInfinite();
      complex2.getArgument();
      complex3.isNaN();
      complex3.add(complex7);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-1.3841980097978606E208), (-1.3841980097978606E208));
      Complex complex1 = Complex.INF;
      complex1.multiply(692);
      complex0.divide(complex1);
      Complex complex2 = complex0.add((-1.3841980097978606E208));
      Complex complex3 = new Complex((-1955.98));
      Complex complex4 = complex0.reciprocal();
      complex4.I.multiply(complex2);
      complex1.getField();
      Complex complex5 = Complex.NaN;
      complex5.isInfinite();
      complex1.getReal();
      complex4.atan();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(1819.48743028);
      Complex complex1 = Complex.valueOf(1819.48743028, (-1.3841980097978606E208));
      complex1.getReal();
      complex1.atan();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-1.3841980097978606E208), (-1.3841980097978606E208));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(692);
      Complex complex3 = complex0.divide(complex1);
      complex0.add((-1.3841980097978606E208));
      complex0.NaN.multiply(complex1);
      complex2.cos();
      complex2.NaN.sqrt();
      Complex complex4 = complex3.INF.createComplex(9.37721319457112E-9, 9.37721319457112E-9);
      complex2.exp();
      complex1.ONE.log();
      Complex.valueOf((-1.3841980097978606E208), 5240.94716);
      Complex complex5 = complex4.exp();
      complex5.INF.pow(9.37721319457112E-9);
      complex0.log();
      complex1.asin();
      complex1.multiply((-2147479141));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.NaN.add(complex1);
      complex0.hashCode();
      complex1.equals(complex0);
      complex4.toString();
      complex3.sqrt();
      complex2.subtract(1.1000499937513122);
      complex0.pow(981.3326102274);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex1.atan();
      Complex complex2 = new Complex((-1955.98));
      complex1.reciprocal();
      Complex complex3 = Complex.valueOf((-1011.34748478903), 6.363759991036614);
      complex3.getField();
      Complex complex4 = Complex.valueOf((-1955.98), (-438.0));
      complex4.isInfinite();
      complex4.atan();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex0.INF.multiply(3.5451314095271004E52);
      complex4.NaN.add(complex1);
      complex0.hashCode();
      complex4.equals(complex0);
      complex3.pow(3.5451314095271004E52);
      Complex complex5 = complex2.divide(complex1);
      complex5.sqrt1z();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.createComplex(2361.8106229159175, 5086.0);
      Complex complex4 = Complex.I;
      complex2.getArgument();
      complex4.divide(complex1);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex4.log();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.tanh();
      complex6.divide(0.0);
      complex7.acos();
      complex5.hashCode();
      complex8.getArgument();
      complex2.getReal();
      complex3.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
      Complex complex1 = Complex.valueOf((-690.31252), (-690.31252));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.divide((-690.31252));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.valueOf((-690.31252));
      Complex complex6 = complex4.acos();
      complex5.hashCode();
      complex3.getArgument();
      complex4.getReal();
      complex6.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = Complex.I;
      complex1.abs();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.atan();
      complex1.getField();
      complex3.isInfinite();
      complex0.getReal();
      complex0.atan();
      Complex complex4 = Complex.ZERO;
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.92549838193062, (-1962.9236));
      complex0.exp();
      Complex.valueOf(3282.0840822299547, 3.92549838193062);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.I;
      complex2.getArgument();
      Complex complex3 = complex0.divide(complex2);
      complex3.NaN.sqrt();
      Complex complex4 = complex2.log();
      complex4.tan();
      complex3.tanh();
      Complex complex5 = complex2.divide((-2442.8704460882777));
      Complex complex6 = complex2.acos();
      complex1.hashCode();
      complex6.getArgument();
      complex5.getReal();
      complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(507.3496875148259);
      Complex complex1 = complex0.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(507.3496875148259);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.add(complex1);
      complex4.hashCode();
      complex0.equals(complex1);
      Complex complex5 = Complex.valueOf(507.3496875148259, 3282.0840822299547);
      complex2.toString();
      complex5.I.getField();
      complex5.sqrt();
      complex0.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.sin();
      complex2.I.asin();
      Complex complex3 = complex1.sqrt();
      Complex.valueOf(3.5451314095271004E52);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.acos();
      complex1.hashCode();
      complex3.getArgument();
      complex2.getReal();
      complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.INF.log();
      Complex complex2 = complex0.createComplex(2368.4, 5086.0);
      Complex complex3 = Complex.valueOf(3.115616594184543E-9, 2368.4);
      Complex complex4 = complex3.acos();
      complex0.sqrt();
      Complex complex5 = Complex.NaN;
      complex0.getReal();
      Complex complex6 = complex2.add(20.0);
      complex1.getArgument();
      Complex complex7 = complex6.divide(3.115616594184543E-9);
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex8 = complex6.pow(5189446.062494719);
      complex7.abs();
      complex8.negate();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = complex2.ZERO.log();
      complex1.NaN.exp();
      Complex complex5 = complex1.ONE.asin();
      complex0.I.sqrt1z();
      Complex complex6 = complex5.multiply((-1));
      complex6.conjugate();
      Complex complex7 = complex4.pow(1.0);
      complex3.divide(complex2);
      complex1.NaN.conjugate();
      complex7.sqrt1z();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1610.8144, 1610.8144);
      Complex complex1 = Complex.valueOf((-663.89810987094), (-759.725852563));
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide((-663.89810987094));
      complex3.sinh();
      Complex complex6 = new Complex((-663.89810987094));
      complex1.NaN.acos();
      Complex.valueOf((-759.725852563), (-663.89810987094));
      Complex complex7 = Complex.NaN;
      complex2.readResolve();
      complex0.toString();
      complex4.getArgument();
      complex7.getImaginary();
      complex4.cosh();
      complex5.add((-4607.0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex0.ONE.negate();
      Complex complex3 = complex0.createComplex(486.82077094, Double.NaN);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = Complex.valueOf(Double.NaN, 523.867);
      Complex complex6 = complex4.exp();
      complex6.INF.divide(complex1);
      Complex complex7 = complex1.pow(486.82077094);
      Complex complex8 = complex7.ZERO.pow(complex2);
      complex2.equals(complex6);
      complex2.isInfinite();
      complex1.divide(2.0);
      complex3.ONE.exp();
      Complex.valueOf(2.0, 523.867);
      Complex complex9 = Complex.valueOf((-2242.48));
      Complex complex10 = Complex.valueOf(523.867);
      complex10.ZERO.getField();
      Complex complex11 = complex9.add(complex10);
      complex11.INF.cos();
      complex9.divide(complex11);
      Complex complex12 = complex7.divide(complex1);
      Complex complex13 = complex10.divide(complex8);
      complex5.nthRoot(4969);
      complex13.sinh();
      complex4.sqrt();
      complex11.cosh();
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = (-1.0809972724404233E-287);
      Complex complex0 = Complex.valueOf((-1.0809972724404233E-287), (-1.0809972724404233E-287));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex2.NaN.add(complex0);
      complex2.ZERO.sinh();
      Complex complex4 = complex2.ONE.multiply(814);
      complex4.negate();
      Complex complex5 = complex1.NaN.cos();
      complex3.sqrt1z();
      // Undeclared exception!
      complex5.ONE.nthRoot(2147483287);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1610.8144, 1610.8144);
      Complex complex1 = Complex.valueOf((-663.89810987094), (-759.725852563));
      complex0.NaN.asin();
      Complex.valueOf((-27.77));
      Complex complex2 = complex0.ZERO.multiply((-1));
      complex2.I.pow((double) (-1));
      Complex complex3 = complex0.divide(complex1);
      complex3.NaN.sqrt1z();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.createComplex(2368.4, 5086.0);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex5.subtract(complex7);
      complex2.tanh();
      complex8.getArgument();
      Object object0 = new Object();
      complex6.atan();
      Complex complex9 = Complex.valueOf(5086.0, 5086.0);
      complex9.sqrt();
      complex5.acos();
      complex9.getArgument();
      complex1.abs();
      complex3.subtract(complex7);
      complex6.isInfinite();
      complex4.getArgument();
      complex8.isNaN();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.subtract(1012.351605780794);
      complex1.getArgument();
      Complex complex2 = complex0.divide(complex1);
      complex1.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex2.divide(2.0);
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.valueOf(1012.351605780794, 2686.57);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.multiply(complex4);
      complex9.readResolve();
      complex6.toString();
      complex2.getArgument();
      Complex complex10 = Complex.ONE;
      complex10.getImaginary();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2436.393359518153);
      Complex complex1 = complex0.createComplex(2436.393359518153, 487.82077094);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex3.subtract(complex2);
      complex5.tanh();
      complex0.getArgument();
      Object object0 = new Object();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex0.acos();
      complex6.getArgument();
      complex0.abs();
      complex4.subtract(complex2);
      complex6.isInfinite();
      complex7.getArgument();
      complex8.isNaN();
      Complex complex9 = Complex.valueOf(3.442477422913037E-14);
      complex9.add(complex3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.INF.log();
      Complex complex2 = complex0.subtract(complex1);
      complex2.NaN.subtract(2.0);
      complex2.getArgument();
      complex2.INF.divide(complex1);
      Complex complex3 = complex1.log();
      complex3.ONE.tanh();
      complex3.NaN.divide(2686.57);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.NaN.acos();
      complex5.ZERO.multiply(complex0);
      complex2.readResolve();
      complex4.toString();
      complex3.getArgument();
      complex4.getImaginary();
      Complex complex6 = new Complex(7.230291078527731, 690.31252);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-690.31252));
      Complex complex1 = complex0.asin();
      complex0.I.pow(complex1);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      complex0.ONE.abs();
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.INF.atan();
      complex2.negate();
      Complex complex3 = new Complex(4206.103859782867);
      Complex.valueOf(1.0, 1.0);
      complex2.pow(complex3);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.tan();
      complex4.add(complex5);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.subtract(complex1);
      complex3.NaN.subtract(2.0);
      complex3.getArgument();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ONE.tanh();
      complex3.createComplex(2.0, Double.NaN);
      complex5.multiply(1924);
      complex2.hashCode();
      Complex complex6 = complex0.reciprocal();
      complex0.getReal();
      Complex complex7 = complex2.add(5.662495731848751E219);
      Complex complex8 = complex5.acos();
      complex0.pow(complex8);
      complex6.cosh();
      Complex complex9 = Complex.ZERO;
      complex9.sin();
      complex3.exp();
      complex1.cosh();
      complex7.abs();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.NaN.tan();
      Complex.valueOf(0.6573580503463745);
      complex2.NaN.pow(complex0);
      complex1.I.divide(6.283185307179586);
      complex0.atan();
      Complex complex3 = Complex.INF;
      complex3.INF.hashCode();
      Complex complex4 = new Complex((-1502.1099892378));
      Complex complex5 = complex4.divide((-434.88930724));
      complex4.sinh();
      Complex complex6 = complex3.acos();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.multiply(complex4);
      complex8.readResolve();
      complex5.toString();
      Complex complex9 = new Complex(0.5071767123122943, (-5283.44933));
      complex9.getArgument();
      complex8.getImaginary();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.subtract(complex1);
      complex3.NaN.subtract(2.0);
      complex3.getArgument();
      complex3.INF.divide(complex1);
      Complex complex4 = complex1.log();
      complex4.ONE.tanh();
      complex2.getField();
      complex3.multiply(Double.NaN);
      complex4.sqrt();
      complex0.pow(2686.57);
      complex1.tan();
      Complex complex5 = complex2.sinh();
      Complex complex6 = Complex.valueOf(2.0, 2.0);
      complex6.getArgument();
      complex4.sinh();
      complex5.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-487.82077094), (-37.7968722));
      complex0.equals("$kL%");
      complex0.pow((-2906.6550977557035));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-2444.1895986633463));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.INF;
      complex3.getArgument();
      Complex complex4 = complex2.acos();
      Complex.valueOf((-476530.37526875036));
      Complex complex5 = Complex.valueOf((-2444.1895986633463), (-2444.1895986633463));
      Complex complex6 = complex5.subtract(complex1);
      Complex complex7 = Complex.valueOf(0.09938566386699677);
      complex7.divide(complex5);
      complex6.hashCode();
      complex6.getArgument();
      complex1.getReal();
      Complex.valueOf((-3646.4683578653926), (-2444.1895986633463));
      complex4.exp();
      complex7.divide(1.6455042362213135);
      complex3.getReal();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(490.4839);
      complex0.createComplex(Double.POSITIVE_INFINITY, 83.3520817287);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf((-1092.0));
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.subtract(complex1);
      complex2.tanh();
      complex6.getArgument();
      complex2.readResolve();
      Complex complex7 = complex5.atan();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.sqrt();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.acos();
      complex4.getArgument();
      complex3.abs();
      complex7.subtract(complex9);
      complex4.isInfinite();
      Complex complex12 = new Complex(2454.489);
      complex12.getArgument();
      complex11.isNaN();
      complex12.add(complex9);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(490.4839);
      double double0 = 20.0;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.sqrt();
      complex2.getArgument();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.subtract(complex3);
      complex5.divide(complex1);
      complex1.hashCode();
      complex4.getArgument();
      complex2.getReal();
      Complex complex6 = Complex.valueOf(22.1468711108364, 6.283185307179586);
      Complex complex7 = Complex.INF;
      complex1.divide(20.0);
      complex5.getReal();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(490.4839);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt();
      complex0.getArgument();
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = Complex.ONE;
      complex5.hashCode();
      Complex complex7 = new Complex((-1570.716384), 0.8813735870195429);
      complex7.getArgument();
      complex0.getReal();
      Complex.valueOf(3.141031525238747, 6.493134033643613E50);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex3.divide((-476530.37526875036));
      complex1.getReal();
      try { 
        complex9.nthRoot((-3491));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,491
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.divide((-1.0));
      complex2.INF.subtract((-1.0));
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.valueOf((-1.0), (-1.0));
      Complex complex6 = complex5.ZERO.asin();
      complex6.INF.divide(complex5);
      complex6.NaN.tan();
      Complex complex7 = complex1.multiply((-1.0));
      Complex complex8 = complex4.add(complex0);
      complex3.hashCode();
      complex7.equals(complex8);
      Complex.valueOf(438.16, 2.8777050870552646E-8);
      Complex complex9 = new Complex(438.16, 438.16);
      complex9.toString();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.sin();
      complex2.I.asin();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.exp();
      Complex.valueOf(1.7879230976104736);
      complex2.acos();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.log();
      complex4.createComplex(1.7879230976104736, 0.9999995364702313);
      Complex complex7 = complex6.multiply(1924);
      complex6.hashCode();
      Complex complex8 = complex1.reciprocal();
      complex1.getReal();
      Complex complex9 = Complex.NaN;
      complex6.add(-0.0);
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.INF;
      complex5.pow(complex8);
      complex11.cosh();
      complex7.sin();
      complex2.exp();
      complex4.cosh();
      Complex complex12 = Complex.INF;
      complex12.abs();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex2.multiply(476530.37526875036);
      complex3.add(complex5);
      complex6.hashCode();
      complex1.equals(complex4);
      Complex.valueOf(438.16, (-0.9999996016281246));
      complex3.toString();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.log();
      complex3.pow(complex0);
      complex1.exp();
      Complex complex4 = Complex.NaN;
      complex4.sqrt1z();
      Complex complex5 = complex3.acos();
      complex5.sqrt();
      complex1.getReal();
      Complex complex6 = Complex.INF;
      complex5.getArgument();
      complex4.divide(9.704997606668411E204);
      complex4.equals((Object) null);
      complex2.pow((-1394.121329292));
      complex4.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.divide((-1.0));
      complex2.INF.subtract((-1.0));
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.valueOf((-1.0), (-1.0));
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex6.INF.divide(complex5);
      Complex complex8 = complex6.NaN.tan();
      complex8.NaN.exp();
      Complex.valueOf((-1.0));
      Complex complex9 = complex5.I.acos();
      Complex complex10 = complex9.log();
      complex10.ONE.createComplex((-1.0), (-1.0));
      Complex complex11 = complex2.ZERO.multiply(1924);
      complex0.NaN.hashCode();
      Complex complex12 = complex0.reciprocal();
      complex5.getReal();
      Complex complex13 = complex12.tan();
      complex2.add(227.34893);
      complex4.acos();
      complex12.I.pow(complex5);
      Complex complex14 = complex0.cosh();
      complex14.NaN.sin();
      complex13.exp();
      complex6.cosh();
      complex11.abs();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.atan();
      complex0.getReal();
      complex0.getReal();
      Complex.valueOf(0.0, Double.NaN);
      Complex complex3 = complex0.acos();
      complex1.acos();
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex2.conjugate();
      complex5.ONE.conjugate();
      int int0 = 0;
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.createComplex(0.09938566386699677, (-2442.36526));
      Complex complex2 = complex0.I.conjugate();
      complex1.INF.tan();
      Complex complex3 = complex2.I.reciprocal();
      complex2.NaN.subtract(complex1);
      Complex complex4 = complex3.I.tanh();
      complex2.INF.getArgument();
      complex0.ZERO.readResolve();
      Complex complex5 = complex0.atan();
      complex5.INF.sqrt();
      Complex complex6 = complex5.acos();
      complex6.ZERO.getArgument();
      complex6.INF.abs();
      Complex complex7 = complex2.subtract(complex0);
      complex7.isInfinite();
      complex2.getArgument();
      complex4.isNaN();
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 403.181489);
      complex0.ZERO.add((-2849.90428));
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex1.NaN.atan();
      complex0.NaN.abs();
      complex0.getField();
      Complex complex4 = complex0.ZERO.subtract(0.0);
      complex4.NaN.multiply(complex3);
      complex0.divide(0.0);
      complex0.getArgument();
      complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.ONE.createComplex((-6.764191876212205E-9), (-6.764191876212205E-9));
      complex0.ZERO.getArgument();
      Complex complex5 = complex2.subtract(1482.744855858042);
      Complex complex6 = complex5.I.pow(complex1);
      complex1.add(complex3);
      Complex complex7 = Complex.valueOf(1482.744855858042);
      complex7.ONE.multiply((-549.4154716371));
      complex0.subtract(complex1);
      Complex complex8 = complex1.subtract(complex3);
      Complex complex9 = complex8.pow(1482.744855858042);
      complex1.ZERO.tanh();
      complex2.cosh();
      Complex complex10 = complex9.acos();
      Complex complex11 = Complex.valueOf((-1558.588715024));
      complex1.abs();
      complex8.multiply(0);
      complex11.getImaginary();
      complex6.getImaginary();
      complex7.cosh();
      complex3.log();
      complex10.multiply(0);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex0.INF.multiply(3.5451314095271004E52);
      Complex complex5 = complex4.NaN.add(complex1);
      complex0.hashCode();
      complex4.equals(complex0);
      Complex.valueOf(438.16, 3.5451314095271004E52);
      complex5.toString();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(0.0);
      complex0.equals("");
      Complex complex1 = complex0.acos();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1283.3212), 0.0);
      complex0.NaN.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ZERO.negate();
      complex0.hashCode();
      Complex complex3 = complex0.subtract(0.0);
      complex3.ZERO.acos();
      complex3.getArgument();
      complex0.divide(0.0);
      complex0.log();
      complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.NaN.sqrt1z();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      complex2.isInfinite();
      Complex complex3 = complex2.add(Double.NaN);
      Complex complex4 = complex3.pow(Double.NaN);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.asin();
      complex6.ONE.tanh();
      complex2.INF.add(Double.NaN);
      complex2.multiply(complex0);
      complex1.isInfinite();
      Complex complex7 = complex6.add(complex4);
      complex1.readResolve();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.I.reciprocal();
      Complex complex10 = new Complex(Double.NaN, Double.NaN);
      Complex complex11 = complex7.divide(complex10);
      complex9.add(Double.NaN);
      complex9.multiply(1297.33537);
      complex7.abs();
      Complex complex12 = complex9.multiply(72);
      complex12.getArgument();
      complex11.pow(Double.NaN);
      Complex complex13 = Complex.NaN;
      complex1.add(complex13);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1835.763899296138);
      Complex complex1 = new Complex(2743.59120470354);
      complex1.INF.atan();
      complex0.pow(1835.763899296138);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.INF.conjugate();
      Complex.valueOf((-1231.96));
      complex0.ZERO.toString();
      complex0.INF.hashCode();
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex0.conjugate();
      complex3.ONE.abs();
      Complex complex5 = complex4.NaN.sin();
      complex5.sin();
      Complex complex6 = complex0.conjugate();
      complex3.ONE.pow(complex5);
      Complex complex7 = complex5.acos();
      Complex complex8 = complex7.I.pow(complex0);
      Complex complex9 = complex8.ONE.createComplex(0.0, (-1231.96));
      complex5.NaN.toString();
      complex3.divide(complex0);
      complex5.getArgument();
      complex7.multiply(Double.NaN);
      complex0.subtract(complex9);
      complex1.multiply(2801);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      complex1.getField();
      complex1.nthRoot(3762);
      Complex complex2 = Complex.valueOf((-1973.203545926558), 0.09761576354503632);
      Complex complex3 = complex2.NaN.multiply(5.840507984320445E-71);
      Complex complex4 = Complex.valueOf(0.09761576354503632);
      Complex complex5 = complex0.pow(32.70034166);
      Complex complex6 = complex0.INF.divide((double) 3762);
      Complex complex7 = complex6.INF.reciprocal();
      complex7.INF.sqrt();
      complex5.I.add(0.09761576354503632);
      Complex complex8 = complex5.ZERO.subtract((-1973.203545926558));
      complex8.reciprocal();
      complex8.NaN.sin();
      Complex complex9 = complex3.ONE.multiply(complex2);
      Complex complex10 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex1.getArgument();
      Complex complex11 = complex3.log();
      complex9.atan();
      complex4.subtract(2540.0735392089);
      complex10.abs();
      complex3.abs();
      complex9.sin();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4851.3994), 0.0);
      Complex complex1 = complex0.ONE.pow(0.0);
      complex1.NaN.getField();
      Complex complex2 = complex0.NaN.pow(0.0);
      complex2.createComplex(0.0, 1.4409851026316708E-8);
      complex0.I.hashCode();
      complex0.toString();
      complex0.getReal();
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = Complex.valueOf(3400.133324919956, 2.0);
      complex2.getImaginary();
      Complex complex5 = complex2.tanh();
      complex3.isInfinite();
      Complex complex6 = complex0.cos();
      complex6.toString();
      complex5.acos();
      complex4.createComplex(99.95181407, (-1964.1387955117461));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(2.8777050870552646E-8);
      Complex complex2 = complex1.createComplex(2.8777050870552646E-8, 2.8777050870552646E-8);
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex0.ONE.multiply(complex2);
      complex3.NaN.tan();
      Complex complex5 = complex2.I.reciprocal();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.ONE.pow((double) 1);
      Complex complex8 = complex3.multiply(1);
      complex0.atan();
      complex1.atan();
      Complex.valueOf((double) 1);
      complex8.readResolve();
      complex0.hashCode();
      Complex complex9 = complex3.acos();
      Complex complex10 = complex9.I.sin();
      Complex complex11 = complex9.ONE.log();
      complex11.NaN.cos();
      Complex complex12 = complex4.sqrt();
      complex10.NaN.tan();
      Complex complex13 = complex8.log();
      complex13.NaN.abs();
      complex8.atan();
      complex3.tan();
      complex10.sin();
      Complex complex14 = complex4.add(complex12);
      complex14.subtract(complex5);
      complex7.multiply(complex1);
      Complex complex15 = new Complex(2.8777050870552646E-8, 2.8777050870552646E-8);
      complex10.add(complex15);
      complex8.add((double) 1);
      complex15.createComplex((-4.04226739708981E-9), 0.0);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2436.393359518153);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.ZERO.toString();
      Complex complex2 = complex0.tanh();
      complex2.NaN.subtract(complex0);
      Complex complex3 = complex2.ONE.cos();
      complex3.I.nthRoot(1);
      complex3.asin();
      complex2.pow(complex1);
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-2802.354475445), (-2802.354475445));
      complex0.subtract(261.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.NaN.tan();
      Complex.valueOf(0.6573580503463745);
      complex2.NaN.pow(complex0);
      complex1.I.divide(6.283185307179586);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.sqrt1z();
      complex4.INF.hashCode();
      complex3.I.getField();
      Complex complex5 = complex1.I.multiply(6.283185307179586);
      complex5.INF.sqrt();
      complex1.INF.pow(0.0);
      Complex complex6 = complex0.tan();
      complex0.ZERO.sinh();
      complex1.getArgument();
      complex6.sinh();
      try { 
        complex3.nthRoot((-227));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -227
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex1.ZERO.add(0.0);
      complex4.INF.readResolve();
      complex1.getField();
      Complex complex5 = complex4.cosh();
      complex5.ZERO.multiply(complex0);
      complex3.log();
      Complex.valueOf((-1.0));
      complex0.createComplex(9.420348186357043E-9, 0.0);
      complex5.cos();
      complex3.reciprocal();
      Complex complex6 = complex1.add(0.0);
      complex6.NaN.cos();
      Complex complex7 = complex6.ZERO.add(complex3);
      complex7.NaN.multiply(0.0);
      complex6.abs();
      complex0.equals((Object) null);
      complex6.abs();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(6.837671137556327E30);
      Complex complex1 = complex0.I.acos();
      complex1.NaN.tanh();
      Complex complex2 = Complex.valueOf(0.0, 6.837671137556327E30);
      complex2.I.sqrt();
      Complex complex3 = complex2.ZERO.subtract(124.10819);
      complex3.ONE.pow(6.837671137556327E30);
      Complex complex4 = complex0.divide((-2769.83849));
      Complex complex5 = complex4.INF.sqrt1z();
      complex0.isInfinite();
      complex4.ONE.pow(complex0);
      Complex complex6 = complex5.INF.multiply(complex0);
      complex0.getReal();
      Complex complex7 = complex5.multiply(complex4);
      complex7.NaN.readResolve();
      complex0.asin();
      Complex complex8 = Complex.INF;
      complex8.ZERO.sin();
      complex6.equals(complex8);
      complex0.divide(6.837671137556327E30);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.multiply(complex1);
      complex2.NaN.negate();
      complex0.readResolve();
      Complex complex4 = new Complex(0.0);
      complex1.I.pow(complex4);
      Complex complex5 = complex0.log();
      complex0.readResolve();
      complex1.I.tan();
      Complex complex6 = complex0.subtract(0.0);
      complex6.I.getField();
      complex6.readResolve();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex1.INF.acos();
      complex6.NaN.sin();
      Complex complex9 = complex1.divide(complex6);
      Complex complex10 = complex9.I.tan();
      complex9.pow(0.0);
      complex2.ZERO.sin();
      complex8.isNaN();
      Complex complex11 = complex3.subtract(0.0);
      complex11.INF.cos();
      complex6.sqrt1z();
      complex1.createComplex((-2794.05923), (-2794.05923));
      complex5.sqrt1z();
      complex7.sqrt1z();
      complex7.cosh();
      complex5.negate();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-742.563929));
      complex0.I.readResolve();
      Complex complex1 = complex0.I.conjugate();
      complex1.ONE.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-421.0));
      Complex complex2 = Complex.valueOf((-1484.8663065115152), (-1484.8663065115152));
      complex0.isNaN();
      Complex complex3 = complex2.negate();
      complex1.ZERO.reciprocal();
      Complex complex4 = complex3.NaN.negate();
      complex2.getReal();
      complex2.getImaginary();
      complex1.multiply((-1484.8663065115152));
      complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex1.NaN.subtract((-4.04226739708981E-9));
      Complex complex2 = complex0.subtract(1.1453864574432373);
      complex2.I.readResolve();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex4.INF.multiply(834);
      complex6.INF.readResolve();
      complex2.multiply((-513));
      complex0.asin();
      Complex complex7 = complex4.reciprocal();
      complex2.getImaginary();
      complex0.equals(complex7);
      complex5.getArgument();
      complex1.cos();
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5607312917709351);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = Complex.I;
      complex2.INF.add(0.0);
      complex0.NaN.toString();
      Complex complex4 = Complex.valueOf(0.5607312917709351, 0.5607312917709351);
      complex4.INF.toString();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex1.subtract(0.5607312917709351);
      complex3.atan();
      complex4.INF.cos();
      Complex complex7 = Complex.valueOf((-899.78));
      complex0.NaN.log();
      complex2.multiply(1);
      complex4.nthRoot(1);
      complex3.getImaginary();
      complex5.pow((double) 1);
      Complex complex8 = complex0.acos();
      complex8.I.cos();
      Complex complex9 = complex6.acos();
      Complex.valueOf((-243.6620871734));
      complex1.multiply(complex7);
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2240.63244, (-6.456588023278983E-253));
      Complex complex2 = complex0.multiply(complex1);
      complex0.NaN.log();
      Complex complex3 = complex1.I.subtract(complex0);
      complex2.INF.multiply(complex1);
      Complex complex4 = Complex.valueOf(2240.63244);
      complex3.toString();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex4.sinh();
      complex6.ZERO.readResolve();
      complex0.abs();
      complex3.atan();
      complex5.cos();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.INF.conjugate();
      complex2.I.createComplex((-1.2093068629412478E-8), 362.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.reciprocal();
      complex4.ZERO.subtract(0.0);
      Complex complex5 = complex1.pow(20.0);
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex5.atan();
      complex7.INF.tanh();
      complex3.subtract(complex0);
      Complex complex8 = complex6.pow(20.0);
      complex8.INF.negate();
      complex8.getField();
      complex8.ZERO.multiply(1567);
      complex2.sqrt();
      complex5.multiply(463);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.INF.add(complex0);
      try { 
        complex3.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(9.253781621373885E29);
      Complex complex2 = complex1.negate();
      complex1.ONE.divide(complex0);
      complex0.multiply(complex1);
      Complex complex3 = complex0.pow(Double.POSITIVE_INFINITY);
      complex3.abs();
      complex2.acos();
      complex3.conjugate();
      Complex.valueOf(9.253781621373885E29);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1065.2657253631505), Double.NaN);
      Complex complex1 = complex0.I.acos();
      complex1.getField();
      complex1.INF.multiply(complex0);
      complex0.toString();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.sqrt1z();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex0.multiply((-2130));
      Complex complex6 = complex5.ONE.sqrt();
      complex3.ONE.divide((double) (-2130));
      complex5.isNaN();
      Complex complex7 = complex3.pow(Double.NaN);
      complex7.ZERO.reciprocal();
      Complex complex8 = Complex.valueOf(239.2624234930467);
      complex8.hashCode();
      complex5.getArgument();
      complex8.atan();
      complex0.getImaginary();
      complex4.add(complex6);
      complex5.isInfinite();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = (-855.2994449347719);
      Complex complex0 = new Complex((-855.2994449347719));
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex1.ZERO.negate();
      complex2.INF.subtract(0.0);
      complex2.ZERO.log();
      complex1.NaN.exp();
      Complex complex3 = complex1.ONE.asin();
      complex0.I.sqrt1z();
      Complex complex4 = complex0.acos();
      complex0.NaN.sqrt();
      complex0.getReal();
      Complex complex5 = complex0.add(0.0);
      complex5.I.getArgument();
      complex3.divide(3242.77);
      complex4.equals(" 8Gl0Y5AtUz DqF]M");
      complex4.pow(628.98092011172);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex.valueOf(1257.8118326778113, 1030.47817254);
      complex0.isInfinite();
      Complex complex1 = complex0.negate();
      complex1.getImaginary();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(490.4839);
      Complex complex1 = complex0.ONE.divide(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.INF.subtract(complex2);
      complex0.NaN.divide(complex3);
      complex2.hashCode();
      complex2.getArgument();
      complex1.getReal();
      Complex complex4 = Complex.valueOf(0.0, 490.4839);
      complex4.INF.exp();
      Complex complex5 = complex2.divide(0.0);
      complex1.getReal();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.5260756679495707E107, (-1999.1763479161048));
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.pow(complex0);
      complex5.ONE.multiply(complex1);
      complex5.I.hashCode();
      Complex complex6 = complex0.I.multiply(1526);
      Complex complex7 = complex0.conjugate();
      complex7.ZERO.createComplex(0.0, (-1489.5328));
      Complex complex8 = complex6.INF.asin();
      complex7.ZERO.nthRoot(1526);
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex4.log();
      Complex complex11 = complex9.ZERO.divide(2293.314974693813);
      complex11.ZERO.atan();
      complex6.sin();
      complex7.log();
      complex7.I.reciprocal();
      complex0.multiply(complex3);
      complex10.getReal();
      complex1.exp();
      complex9.divide(0.0);
      complex3.isNaN();
      Complex complex12 = complex6.add(Double.NaN);
      complex12.ONE.negate();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(5.855267177907345E90);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.exp();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.I.subtract(complex4);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.NaN.exp();
      assertEquals(1.5707963267948966, complex6.getReal(), 0.01);
      
      Complex complex8 = Complex.valueOf(5.855267177907345E90, (-2222.0217348));
      Complex complex9 = complex0.INF.subtract(complex1);
      Complex complex10 = complex9.ZERO.multiply(5.855267177907345E90);
      boolean boolean0 = complex1.equals("org.apache.commons.math3.complex.Complex");
      assertFalse(boolean0);
      
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex11.pow(complex9);
      Complex complex13 = complex1.ZERO.sqrt1z();
      Complex complex14 = Complex.INF;
      Complex complex15 = complex8.subtract(complex14);
      assertEquals(Double.NEGATIVE_INFINITY, complex15.getImaginary(), 0.01);
      
      complex0.getImaginary();
      complex1.equals(complex10);
      complex13.INF.readResolve();
      Complex complex16 = complex8.multiply((-718));
      assertEquals((-4.2040818337374735E93), complex16.getReal(), 0.01);
      assertEquals(1595411.6055864, complex16.getImaginary(), 0.01);
      
      complex1.toString();
      Complex complex17 = complex1.I.asin();
      assertEquals(0.8813735870195428, complex17.getImaginary(), 0.01);
      
      complex5.isNaN();
      Complex complex18 = complex12.asin();
      assertSame(complex18, complex7);
      assertNotSame(complex18, complex10);
      
      Complex.valueOf((-2222.0217348), (double) (-718));
      Complex complex19 = Complex.valueOf((double) (-718));
      Complex complex20 = complex13.divide(complex19);
      assertEquals((-0.001392757660167131), complex20.getReal(), 0.01);
      assertFalse(complex13.equals((Object)complex0));
      
      complex8.getImaginary();
      List<Complex> list0 = complex8.nthRoot(211);
      assertFalse(list0.contains(complex4));
      assertEquals(211, list0.size());
      
      Complex complex21 = Complex.valueOf(526.4828017475102, 0.0);
      assertFalse(complex21.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex1.ONE.log();
      Complex complex2 = complex1.ZERO.asin();
      complex2.INF.getArgument();
      Complex complex3 = complex0.negate();
      complex3.pow(complex1);
      complex0.tan();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(117.0, 923.0244);
      double double0 = 0.0;
      Complex complex1 = null;
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
