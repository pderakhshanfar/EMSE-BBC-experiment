/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:07:18 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(1.1342556476593018, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply(3488);
      complex2.ZERO.abs();
      Complex.valueOf(0.20486689041475337);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.multiply(0.20486689041475337);
      complex3.cos();
      Complex complex5 = complex1.add(complex3);
      complex5.ZERO.conjugate();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex1.divide(Double.POSITIVE_INFINITY);
      complex7.ZERO.exp();
      Complex complex8 = complex7.asin();
      complex8.tanh();
      complex1.getField();
      complex4.multiply(4237);
      Complex complex9 = complex6.divide((double) 3488);
      complex9.acos();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2803.208446, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-17.430933631788893));
      Complex complex1 = complex0.pow((-17.430933631788893));
      Complex complex2 = complex0.ZERO.multiply((-2193));
      complex2.NaN.acos();
      Complex complex3 = complex1.createComplex((-17.430933631788893), (-17.430933631788893));
      Complex complex4 = complex3.NaN.sqrt1z();
      complex4.INF.tan();
      complex1.log();
      Complex.valueOf((-343.2));
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, (-2193));
      complex5.sqrt();
      complex0.multiply(541);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex0.ZERO.multiply(complex1);
      Complex complex2 = new Complex(20.0, 20.0);
      complex0.acos();
      complex2.asin();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.295738697052002, 2.295738697052002);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex3.NaN.multiply(2.295738697052002);
      complex0.ZERO.pow(complex4);
      Complex complex5 = Complex.valueOf(2.295738697052002);
      Complex complex6 = complex0.ZERO.atan();
      complex1.INF.multiply(Double.POSITIVE_INFINITY);
      complex6.I.log();
      complex5.INF.subtract(3.0359663396776143E7);
      Complex complex7 = complex5.I.divide(complex0);
      Complex complex8 = complex7.INF.subtract(6.440430933947252E-58);
      complex8.ZERO.tan();
      complex7.ONE.sin();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      complex0.NaN.readResolve();
      Complex complex2 = complex1.I.conjugate();
      complex0.readResolve();
      complex2.NaN.cosh();
      complex0.hashCode();
      Complex complex3 = Complex.ONE;
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.getField();
      Complex complex2 = complex0.tan();
      complex0.ZERO.subtract(Double.NaN);
      Complex.valueOf((-634.98454287914), 1.5874010519681994);
      complex0.toString();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex0.tanh();
      complex4.NaN.sqrt1z();
      complex0.ZERO.multiply(Double.NaN);
      complex4.subtract(732.0272);
      complex2.divide(0.0);
      complex3.cos();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = complex1.tanh();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = Complex.ZERO;
      complex2.add((-712.1741688403623));
      complex1.tanh();
      Complex complex3 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.negate();
      complex1.equals(object0);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      // Undeclared exception!
      complex0.nthRoot(274706);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(5.381951258169172E10);
      Complex complex1 = new Complex(3.865352482534945E-12, 3.865352482534945E-12);
      complex0.acos();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(1780.19990224);
      Complex complex1 = complex0.I.cosh();
      complex1.I.pow(1780.19990224);
      complex0.NaN.asin();
      Complex complex2 = new Complex(1780.19990224, Double.NaN);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.INF.cosh();
      complex0.ONE.reciprocal();
      Complex.valueOf(Double.NaN, 1.3405964389498495E-8);
      complex5.INF.negate();
      Complex complex6 = complex5.NaN.divide(1.5116143E7);
      complex6.ZERO.tan();
      complex0.ONE.readResolve();
      Complex complex7 = Complex.valueOf(1.5116143E7, 1780.19990224);
      Complex complex8 = complex3.multiply(complex7);
      Complex complex9 = complex8.cos();
      complex9.ONE.createComplex(1.5116143E7, (-4037.7929371));
      complex8.ONE.exp();
      complex7.NaN.toString();
      Complex complex10 = complex8.I.asin();
      Complex complex11 = complex8.subtract(complex0);
      complex11.NaN.asin();
      complex10.add(complex0);
      complex7.asin();
      complex0.cos();
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(1995.3, 0.9934391262691873);
      complex0.INF.readResolve();
      Complex complex1 = complex0.sqrt1z();
      complex0.ONE.add(1995.3);
      Complex complex2 = complex0.exp();
      complex0.readResolve();
      Complex complex3 = complex2.log();
      complex0.I.tanh();
      Complex complex4 = complex3.multiply(1995.3);
      Complex complex5 = complex3.ZERO.sin();
      complex4.INF.multiply(0.31489628553390503);
      complex0.asin();
      Complex complex6 = complex1.log();
      complex6.createComplex(984.277057306678, 1995.3);
      Complex complex7 = complex6.tanh();
      complex7.readResolve();
      complex2.divide((-3380.9712423663));
      complex5.subtract((-831.418861076));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-17.430933631788893));
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(3.4454766202661184E267);
      Complex complex3 = complex1.tanh();
      complex2.asin();
      complex3.multiply(complex2);
      Complex complex4 = complex0.subtract((-17.430933631788893));
      complex4.multiply((-719.042614845258));
      Complex complex5 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      complex0.NaN.conjugate();
      Complex complex2 = complex0.add((-248.572882));
      complex1.multiply((-593.0));
      Complex complex3 = complex1.tanh();
      complex3.NaN.acos();
      Complex complex4 = new Complex((-593.0), 3.4454766202661184E267);
      complex4.asin();
      complex1.toString();
      Complex complex5 = new Complex(3.4454766202661184E267);
      complex5.pow((-248.572882));
      Complex complex6 = complex4.log();
      complex4.tan();
      complex2.cosh();
      Complex.valueOf(2985.1276059);
      Object object0 = new Object();
      Object object1 = new Object();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(17.089904895567305);
      complex1.ZERO.multiply((-1866));
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex((-3532.258583756718));
      Complex complex4 = new Complex(1.0, (-3532.258583756718));
      complex4.atan();
      Complex complex5 = Complex.valueOf(3028.48);
      Complex complex6 = complex5.multiply(17.089904895567305);
      complex2.subtract(1.0);
      Complex complex7 = complex6.cosh();
      Complex complex8 = new Complex(17.089904895567305, (-3401.5611293706033));
      Complex.valueOf(1.0);
      Object object0 = new Object();
      Complex complex9 = Complex.NaN;
      complex7.subtract(complex9);
      complex1.add((double) (-1866));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(17.089904895567305);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.NaN.acos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = new Complex(17.089904895567305);
      complex4.tanh();
      Complex.valueOf(17.089904895567305, 236.4670799042);
      complex3.readResolve();
      complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex(2381.9636888417945, Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex0.multiply(4.153321337726989E-8);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.toString();
      Complex complex2 = complex0.multiply((-2147386603));
      Complex complex3 = complex1.multiply(complex2);
      complex3.I.getField();
      complex0.subtract(3242.4278277902986);
      complex2.multiply(505.9365612777575);
      Object object0 = new Object();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = (-17.430933631788893);
      Complex complex0 = new Complex((-17.430933631788893));
      double double1 = Double.POSITIVE_INFINITY;
      try { 
        complex0.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-17.430933631788893));
      Complex complex1 = complex0.subtract((-17.430933631788893));
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.sinh();
      Complex complex4 = new Complex((-17.430933631788893));
      complex4.tanh();
      Complex complex5 = Complex.valueOf((-17.430933631788893), 236.4670799042);
      complex3.readResolve();
      complex1.multiply((-2199));
      complex2.createComplex((-2199), 20.0);
      complex5.add(Double.NaN);
      Complex complex6 = Complex.INF;
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-17.430933631788893));
      Complex complex1 = complex0.subtract((-17.430933631788893));
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(2.0);
      complex3.add(2.0);
      Complex complex4 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.I;
      complex4.asin();
      complex5.toString();
      Complex complex6 = complex4.pow(2.0);
      Complex.valueOf((-17.430933631788893), Double.POSITIVE_INFINITY);
      complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.createComplex(235.4670799042, Double.POSITIVE_INFINITY);
      complex7.acos();
      Complex complex8 = complex4.multiply((-2091604608));
      Complex complex9 = Complex.NaN;
      complex9.getReal();
      Complex complex10 = complex8.multiply(Double.POSITIVE_INFINITY);
      complex6.sin();
      complex2.cosh();
      complex10.divide((-0.9934391262691873));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      complex0.ONE.nthRoot(1);
      Complex complex1 = complex0.createComplex(2079.2094621707083, 2079.2094621707083);
      Complex complex2 = complex0.acos();
      complex0.multiply((-1277));
      complex1.getReal();
      complex1.multiply(2.51402968559859E301);
      Complex complex3 = complex1.sin();
      Complex.valueOf((double) 1);
      complex2.cosh();
      complex3.divide(2079.2094621707083);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.multiply(1347);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.I.subtract(0.0);
      Complex complex4 = complex3.cosh();
      complex0.getField();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ZERO.add(complex2);
      Complex complex7 = complex5.add(0.0);
      complex7.INF.add(complex5);
      complex5.multiply(1347);
      complex2.ZERO.pow(complex6);
      complex5.toString();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.reciprocal();
      complex0.subtract(complex2);
      complex9.subtract(Double.NaN);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-17.43));
      Complex complex1 = complex0.subtract((-17.43));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.NaN;
      complex4.isNaN();
      Complex complex5 = complex4.atan();
      complex3.tan();
      Complex complex6 = Complex.I;
      Complex complex7 = new Complex(Double.NaN);
      complex6.atan();
      Complex complex8 = complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(0.613389253616333);
      complex4.divide(complex9);
      complex0.log();
      Complex complex10 = complex4.cosh();
      complex0.tanh();
      Complex.valueOf(Double.NaN, (-17.43));
      Object object0 = new Object();
      complex2.readResolve();
      Complex complex11 = Complex.valueOf(Double.NaN);
      complex10.equals(complex11);
      complex6.pow(16.854620364242233);
      complex1.readResolve();
      complex5.getField();
      Complex complex12 = Complex.I;
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.multiply(502.94);
      Complex complex3 = complex2.add(502.94);
      complex1.add(complex3);
      Complex complex4 = complex1.multiply((-2142818754));
      complex4.pow(complex3);
      complex3.toString();
      Complex complex5 = Complex.ZERO;
      complex5.cos();
      complex3.reciprocal();
      complex1.subtract(complex4);
      complex3.subtract((double) (-2142818754));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = 2583.60333112;
      Complex complex0 = Complex.valueOf(2583.60333112);
      complex0.ZERO.multiply((-2048));
      Complex complex1 = new Complex(2177.252522821053);
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2583.60333112);
      Complex complex1 = complex0.ZERO.multiply((-2048));
      Complex complex2 = complex0.ONE.add(0.9154817586256075);
      Complex complex3 = complex2.ZERO.multiply((double) (-2048));
      complex2.INF.tanh();
      Complex complex4 = complex0.asin();
      complex4.I.toString();
      Complex complex5 = complex0.pow(2.0);
      complex5.ZERO.log();
      complex5.multiply(2.0);
      Complex complex6 = complex0.I.createComplex((-2286.2015200000005), (-2286.2015200000005));
      complex6.acos();
      complex2.multiply((-728243660));
      complex1.getReal();
      Complex complex7 = complex3.multiply(2.51402968559859E301);
      complex1.sin();
      Complex.valueOf((-49.86840843831867));
      Complex complex8 = complex7.cosh();
      complex8.divide((-459.35));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.subtract(470.0);
      Complex complex4 = complex3.divide((-1462.74663714078));
      Complex complex5 = complex0.sinh();
      complex3.nthRoot(2143857725);
      complex4.hashCode();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex6.NaN.cos();
      complex6.getImaginary();
      Complex complex7 = complex5.add(1271.3373698);
      complex7.divide(1271.3373698);
      Complex complex8 = complex4.cos();
      Complex complex9 = Complex.INF;
      complex9.acos();
      Complex complex10 = complex5.cosh();
      complex1.createComplex((-1462.74663714078), 0.009480627840908085);
      Complex complex11 = complex3.negate();
      complex11.I.subtract(470.0);
      complex10.sinh();
      complex0.add(complex7);
      complex8.isInfinite();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = complex0.I.createComplex(0.0, (-1.0));
      complex0.hashCode();
      complex1.isNaN();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.NaN.multiply(0);
      Complex complex4 = complex2.divide((-1.0));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex(591.2585735004641, 0);
      complex4.subtract(complex5);
      complex5.abs();
      complex2.getArgument();
      complex5.equals("");
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex4.pow(complex6);
      complex6.asin();
      complex3.abs();
      complex0.pow(456.37043247299323);
      Complex complex8 = Complex.ONE;
      complex6.multiply(complex2);
      complex5.isInfinite();
      Complex complex9 = Complex.valueOf(591.2585735004641);
      complex9.NaN.multiply(complex2);
      Object object0 = complex6.readResolve();
      complex7.equals(object0);
      Complex complex10 = Complex.I;
      Complex complex11 = complex5.cosh();
      complex3.abs();
      complex11.multiply(0);
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.divide((-3353.1085));
      Complex complex3 = complex0.sinh();
      complex1.ONE.hashCode();
      complex0.nthRoot(1470);
      complex1.hashCode();
      complex0.getImaginary();
      Complex complex4 = complex1.add((double) 1470);
      Complex complex5 = Complex.INF;
      complex5.divide(1.2210872189854344E-232);
      Complex complex6 = complex0.cos();
      complex2.acos();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex5.createComplex(Double.POSITIVE_INFINITY, 0.9104093657927799);
      complex7.negate();
      complex5.sinh();
      complex3.add(complex8);
      complex6.isInfinite();
      complex3.cos();
      complex8.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow((-1108.207400944511));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ZERO.tan();
      Complex.valueOf((-1583.101292044348), 2.0);
      complex1.subtract(complex3);
      complex2.sqrt();
      complex2.asin();
      complex1.pow(Double.POSITIVE_INFINITY);
      complex3.add((-1583.101292044348));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-17.430933631788893));
      Complex complex1 = complex0.subtract((-17.430933631788893));
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sinh();
      Complex complex3 = new Complex((-17.430933631788893));
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf((-17.430933631788893), 236.4670799042);
      complex3.readResolve();
      complex4.readResolve();
      complex5.atan();
      Complex complex6 = Complex.ONE;
      complex6.multiply(1);
      Complex complex7 = new Complex(349585.7007378037);
      complex0.equals(complex7);
      Complex complex8 = complex5.pow((double) 1);
      complex8.atan();
      complex0.isInfinite();
      Complex complex9 = Complex.INF;
      complex3.isNaN();
      complex2.sin();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.negate();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.sinh();
      complex2.nthRoot(17);
      complex2.hashCode();
      complex3.getImaginary();
      Complex complex6 = complex1.add((double) 1470);
      complex4.divide((double) 17);
      complex3.cos();
      complex6.acos();
      Complex complex7 = complex4.cosh();
      complex7.exp();
      complex6.createComplex((-904.8423212323415), 17);
      complex6.negate();
      complex1.sinh();
      complex4.add(complex0);
      complex5.isInfinite();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow((-1108.207400944511));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.ZERO.subtract(2.0);
      complex4.sqrt();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 166.30559);
      complex5.negate();
      Complex complex6 = complex2.divide(complex3);
      complex6.sqrt1z();
      complex4.isInfinite();
      complex5.negate();
      complex6.getField();
      complex3.multiply(0.9171523356672743);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.conjugate();
      complex2.readResolve();
      Complex complex3 = complex2.add(Double.NaN);
      Complex complex4 = complex0.multiply(3308);
      complex1.ZERO.createComplex(Double.NaN, Double.NaN);
      complex1.subtract(Double.NaN);
      complex0.I.log();
      complex1.abs();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex0.INF.pow(1.0);
      complex6.ZERO.pow(Double.NaN);
      Complex complex7 = complex3.sqrt();
      Complex.valueOf(1625.042975);
      Complex complex8 = complex7.ONE.cosh();
      complex0.NaN.subtract(complex4);
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex5.multiply(1.0);
      complex10.NaN.sqrt1z();
      complex6.pow((-1896.647668706448));
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply(1329.6917255751828);
      complex2.divide(complex1);
      Complex complex3 = complex0.log();
      complex3.cosh();
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, (-576.65189));
      Object object0 = new Object();
      complex4.readResolve();
      complex1.equals(complex5);
      Complex complex6 = complex2.pow(Double.NaN);
      complex6.readResolve();
      complex4.tanh();
      Complex.valueOf(0.5403023058681398, Double.POSITIVE_INFINITY);
      Complex.valueOf(1.7984299659729004);
      complex5.createComplex((-1.0), 1.7984299659729004);
      complex0.negate();
      complex0.cos();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.ZERO;
      complex2.toString();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex0.subtract(9.22064170155394E22);
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex1.pow(0.0);
      complex8.getField();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex5.add(complex8);
      complex9.add(6.283185307179586);
      Complex complex12 = complex10.add(complex11);
      complex0.multiply((-1830));
      Complex complex13 = new Complex((-1830));
      complex7.pow(complex13);
      complex6.toString();
      Complex complex14 = new Complex(6.283185307179586);
      complex10.sqrt();
      complex12.reciprocal();
      Complex complex15 = Complex.ZERO;
      complex7.subtract(complex15);
      complex9.subtract(9.22064170155394E22);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = complex0.I.createComplex(0.0, (-1.0));
      complex0.hashCode();
      complex1.isNaN();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.NaN.multiply(0);
      Complex complex4 = complex2.divide((-1.0));
      Complex complex5 = new Complex(591.2585735004641, 0);
      complex4.subtract(complex5);
      complex5.abs();
      complex2.getArgument();
      complex5.equals("");
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex4.pow(complex6);
      complex6.asin();
      complex3.abs();
      complex0.pow(456.37043247299323);
      Complex complex8 = Complex.ONE;
      complex6.multiply(complex2);
      complex5.isInfinite();
      Complex.valueOf(591.2585735004641);
      Object object0 = complex6.readResolve();
      complex7.equals(object0);
      Complex complex9 = Complex.I;
      Complex complex10 = complex5.cosh();
      complex3.abs();
      complex10.multiply(0);
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow((-1108.207400944511));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.ZERO.subtract(2.0);
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      complex5.I.sinh();
      Complex complex6 = complex4.tanh();
      Complex complex7 = Complex.valueOf((-3125.21179528), 1115.6);
      complex3.readResolve();
      complex0.readResolve();
      Complex complex8 = complex1.atan();
      complex6.multiply(1);
      complex7.equals(complex4);
      complex0.pow(2.7156286239624023);
      complex6.isInfinite();
      Complex complex9 = Complex.INF;
      complex8.isNaN();
      complex9.sin();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = 20.0;
      Complex complex0 = Complex.valueOf(20.0);
      complex0.add(20.0);
      complex0.cosh();
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(80);
      Complex complex3 = Complex.valueOf(-0.0, Double.POSITIVE_INFINITY);
      complex3.divide((-2120.967));
      Complex complex4 = new Complex(-0.0, 80);
      Complex complex5 = complex2.subtract(complex0);
      complex4.abs();
      complex5.getArgument();
      complex3.equals(complex4);
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex2.pow(complex6);
      complex6.asin();
      complex0.abs();
      Complex complex8 = complex2.pow(5.598413198183808E-9);
      Complex complex9 = Complex.ONE;
      complex9.multiply(complex8);
      complex7.isInfinite();
      Complex complex10 = Complex.valueOf(591.2585735004641);
      complex1.equals(complex10);
      Complex complex11 = Complex.I;
      Complex complex12 = complex5.cosh();
      complex3.abs();
      complex7.multiply(80);
      Complex complex13 = complex11.sqrt1z();
      complex12.readResolve();
      complex13.asin();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.4023594781085251);
      Complex complex2 = complex0.divide(complex1);
      complex2.log();
      Complex complex3 = complex2.cosh();
      complex2.tanh();
      Complex complex4 = Complex.valueOf((-2281.648), (-2281.648));
      Object object0 = new Object();
      complex3.equals("Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae");
      Complex complex5 = complex2.pow(1093626.3548413583);
      complex3.readResolve();
      complex5.tanh();
      Complex.valueOf((-111.7638), (-2508.700544));
      Complex.valueOf(0.0);
      complex4.createComplex(6.283185307179586, Double.POSITIVE_INFINITY);
      complex4.cos();
      complex5.toString();
      complex5.add((-425.84049353979));
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(9.22064170155394E22, 9.22064170155394E22);
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      complex1.INF.add(complex0);
      Complex complex2 = complex0.multiply(181);
      Complex complex3 = complex2.conjugate();
      complex2.tan();
      complex3.subtract((-909.645133261));
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-733.75660294), 745.2242);
      Complex complex2 = complex0.sinh();
      complex0.tan();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.asin();
      complex2.cosh();
      complex1.tanh();
      Complex complex5 = Complex.valueOf(0.3200522538701715, 0.3200522538701715);
      complex0.readResolve();
      complex5.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex6 = complex1.pow((-733.75660294));
      complex5.readResolve();
      complex0.tanh();
      Complex.valueOf(3826.0, (-733.75660294));
      Complex complex7 = Complex.valueOf(745.2242);
      complex4.createComplex((-857.7353216), 0.41421356237309515);
      Complex complex8 = Complex.ZERO;
      complex8.reciprocal();
      complex7.cos();
      complex6.toString();
      complex6.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.tanh();
      complex0.NaN.conjugate();
      Complex complex1 = Complex.valueOf(228.1058, (-20.0));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.multiply(683);
      Complex complex4 = complex3.conjugate();
      complex1.tan();
      Complex complex5 = complex3.subtract((-1122.0));
      complex5.add(complex2);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex0.INF.toString();
      Complex complex2 = complex1.acos();
      complex0.ZERO.sinh();
      complex1.isNaN();
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.negate();
      complex3.divide(complex6);
      complex4.sqrt1z();
      complex4.isInfinite();
      complex3.negate();
      complex1.getField();
      Complex complex7 = Complex.ONE;
      complex7.multiply((-20.0));
      Complex complex8 = new Complex((-20.0));
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.negate();
      Complex complex3 = Complex.INF;
      complex2.I.sqrt();
      complex3.negate();
      complex0.divide(complex3);
      Complex complex4 = complex0.sqrt1z();
      complex3.isInfinite();
      complex1.negate();
      complex4.getField();
      complex2.multiply(384.0);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow((-1108.207400944511));
      Complex complex2 = complex1.tanh();
      complex2.ZERO.tan();
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex3.ZERO.subtract(2.0);
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.I.sinh();
      complex6.ONE.nthRoot(1470);
      complex0.hashCode();
      complex1.getImaginary();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex8.ZERO.cos();
      complex5.ZERO.readResolve();
      Complex complex11 = complex1.acos();
      complex11.NaN.cosh();
      complex0.createComplex((-1108.207400944511), (-1108.207400944511));
      complex10.negate();
      complex4.sinh();
      Complex complex12 = complex0.add(complex5);
      complex12.isInfinite();
      complex1.readResolve();
      complex9.tan();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = complex0.I.createComplex(0.0, (-1.0));
      complex0.hashCode();
      complex0.isInfinite();
      complex1.acos();
      Complex complex2 = complex0.NaN.multiply(0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.cosh();
      complex2.negate();
      Complex complex5 = complex0.divide(complex1);
      complex5.sqrt1z();
      Complex complex6 = Complex.valueOf((-1.0), 1871.5095441);
      complex6.isInfinite();
      complex4.negate();
      complex2.getField();
      Complex complex7 = Complex.ZERO;
      complex7.multiply(0.9473998916997106);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.INF;
      complex0.ONE.add(complex1);
      Complex complex3 = complex0.cosh();
      complex3.I.sqrt();
      complex1.tanh();
      Complex complex4 = Complex.valueOf((-1344.106521564254), (-1344.106521564254));
      Object object0 = new Object();
      complex0.equals(complex2);
      Complex complex5 = Complex.valueOf((-1344.106521564254), 6.283185307179586);
      complex5.readResolve();
      Complex complex6 = complex5.tanh();
      Complex.valueOf(51.0438568, (-2374.6028566264545));
      Complex.valueOf((-1344.106521564254));
      complex6.createComplex(0.0, 1.0);
      Complex complex7 = new Complex(0.5562618970870972);
      complex7.reciprocal();
      Complex complex8 = Complex.ONE;
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.ONE.createComplex((-248.572882), (-1579.4003671525913));
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex3.NaN.tan();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = Complex.valueOf((-2202.67101018784), (-2202.67101018784));
      Complex complex8 = complex7.divide(complex4);
      Complex complex9 = complex2.log();
      Complex complex10 = complex8.cosh();
      complex6.tanh();
      Complex.valueOf((-2202.67101018784), (-1579.4003671525913));
      Object object0 = new Object();
      complex5.equals(complex6);
      Complex complex11 = complex4.pow(1974.22489768524);
      complex0.readResolve();
      complex10.tanh();
      Complex.valueOf(1974.22489768524, 1974.22489768524);
      Complex.valueOf((-248.572882));
      complex9.createComplex(0.0, 2789.14423774067);
      complex6.reciprocal();
      complex11.cos();
      Complex complex12 = Complex.ZERO;
      complex12.toString();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(complex0);
      complex2.getImaginary();
      Complex complex3 = complex1.sinh();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.valueOf(1563061.4005980038, Double.NaN);
      Complex complex6 = complex4.createComplex(0.3200522538701715, 0.2145126760005951);
      Complex complex7 = new Complex(0.3200522538701715, 0.3200522538701715);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.atan();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex3.atan();
      complex9.sinh();
      complex11.abs();
      complex6.log();
      Complex complex12 = Complex.I;
      complex12.readResolve();
      object0.equals(complex5);
      complex6.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow((-1108.207400944511));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = complex4.ZERO.subtract(2.0);
      Complex complex6 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex5.divide((-1.315498542514467E-9));
      complex1.getField();
      complex6.cosh();
      complex1.getArgument();
      Complex complex9 = complex7.negate();
      complex3.nthRoot(1470);
      complex6.negate();
      Complex complex10 = complex8.conjugate();
      complex3.log();
      Complex complex11 = complex4.exp();
      complex10.tan();
      Complex complex12 = Complex.NaN;
      complex10.add(complex11);
      Complex complex13 = Complex.ZERO;
      complex13.acos();
      complex13.cosh();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex0.INF.toString();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.ZERO.sinh();
      complex1.isNaN();
      complex3.ZERO.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.NaN.cosh();
      complex5.tanh();
      Complex.valueOf(1115.6, 1115.6);
      Object object0 = new Object();
      complex7.equals(object0);
      complex3.ONE.pow(1115.6);
      complex2.readResolve();
      Complex complex8 = complex5.tanh();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(1115.6);
      complex8.negate();
      complex4.isInfinite();
      Complex.valueOf(Double.NaN, (-2669.8647));
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      double double0 = 502.94;
      complex1.tan();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      complex0.NaN.conjugate();
      Complex complex2 = complex0.ONE.createComplex((-248.572882), (-1579.4003671525913));
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex4.INF.conjugate();
      complex5.asin();
      Complex complex6 = complex3.cosh();
      complex5.tanh();
      Complex complex7 = Complex.valueOf(5.515817703577808E-8, 1115.6);
      complex1.readResolve();
      Object object0 = complex7.readResolve();
      complex7.equals(object0);
      Complex complex8 = complex3.pow((-248.572882));
      complex8.readResolve();
      complex6.tanh();
      Complex complex9 = Complex.valueOf((-248.572882), 1115.6);
      Complex complex10 = Complex.valueOf(0.41421356237309515);
      complex9.createComplex(0.41421356237309515, 3000.378830452);
      complex2.reciprocal();
      complex10.cos();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.I;
      complex0.add(complex2);
      Complex complex3 = complex0.add(502.94);
      Complex complex4 = new Complex(1563061.4005980038);
      complex1.add(complex4);
      Complex complex5 = Complex.I;
      complex5.multiply(1829);
      complex3.pow(complex2);
      complex2.toString();
      Complex complex6 = complex1.cos();
      complex4.sqrt();
      Complex complex7 = Complex.NaN;
      complex7.reciprocal();
      complex6.subtract(complex3);
      Complex complex8 = Complex.ZERO;
      complex8.subtract(502.94);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex0.INF.toString();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.ZERO.sinh();
      complex1.isNaN();
      complex3.ZERO.atan();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.NaN.cosh();
      complex5.tanh();
      Complex.valueOf(1115.6, 1115.6);
      Object object0 = new Object();
      complex7.equals(object0);
      Complex complex8 = Complex.ONE;
      complex2.readResolve();
      complex5.tanh();
      Complex.valueOf(0.0, 0.0);
      Complex complex9 = Complex.valueOf(1115.6);
      Complex.valueOf(1115.6, 0.0);
      Complex complex10 = new Complex(1250.22494);
      complex10.acos();
      complex9.cosh();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(1.315498542514467E-9);
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.negate();
      complex1.hashCode();
      complex2.hashCode();
      complex1.I.sqrt();
      Complex complex3 = complex2.add(complex1);
      complex2.equals(complex3);
      Complex complex4 = complex2.reciprocal();
      complex0.sqrt1z();
      complex1.isInfinite();
      Complex complex5 = new Complex(591.2585735004641, 0.0);
      complex5.ZERO.subtract(591.2585735004641);
      Complex complex6 = complex4.subtract(complex5);
      Object object0 = new Object();
      complex1.equals(complex2);
      Complex complex7 = complex6.pow((-4188.60316319));
      complex3.readResolve();
      complex5.tanh();
      Complex.valueOf((-20.0), 1.315498542514467E-9);
      Complex complex8 = Complex.valueOf(0.0);
      complex8.createComplex(0.0, 1.315498542514467E-9);
      Complex complex9 = complex7.reciprocal();
      complex0.cos();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex0.INF.toString();
      complex1.acos();
      Complex complex2 = complex0.ZERO.sinh();
      complex1.isNaN();
      complex2.ZERO.atan();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.NaN.cosh();
      complex4.tanh();
      Complex complex7 = Complex.valueOf(1115.6, 1115.6);
      complex5.abs();
      complex4.getArgument();
      Object object0 = complex0.readResolve();
      complex6.equals(object0);
      Complex complex8 = Complex.valueOf(1115.6);
      complex8.tanh();
      complex3.pow(complex2);
      complex1.abs();
      Complex complex9 = complex8.pow(Double.POSITIVE_INFINITY);
      complex5.multiply(complex8);
      complex9.isInfinite();
      Complex.valueOf((-1911.253684));
      Object object1 = new Object();
      complex2.equals(object1);
      complex7.cosh();
      complex1.abs();
      complex3.multiply((-637));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(745.2242, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.createComplex(745.2242, 0.0);
      Complex complex3 = complex0.createComplex(3252.5652, (-1.0));
      complex2.atan();
      Complex complex4 = new Complex(1221.493936);
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex4.atan();
      complex0.sinh();
      Complex complex7 = Complex.ZERO;
      complex7.abs();
      complex6.log();
      complex0.readResolve();
      complex4.equals(complex5);
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = complex0.I.createComplex(0.0, (-1.0));
      complex0.hashCode();
      complex1.isNaN();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.NaN.multiply(0);
      Complex complex4 = complex2.divide((-1.0));
      Complex complex5 = new Complex(591.2585735004641, 0);
      Complex complex6 = complex4.subtract(complex5);
      complex5.abs();
      complex2.getArgument();
      complex5.equals("");
      complex4.tanh();
      Complex complex7 = complex1.pow(complex6);
      complex7.NaN.asin();
      complex7.abs();
      complex4.pow(0.0);
      Complex complex8 = Complex.ONE;
      complex4.multiply(complex8);
      complex3.isInfinite();
      Complex.valueOf(3222.1978645733);
      complex8.equals(complex2);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.cosh();
      complex3.abs();
      complex0.multiply(0);
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(1.315498542514467E-9);
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex0.negate();
      complex2.hashCode();
      complex3.hashCode();
      complex1.I.sqrt();
      Complex complex4 = complex3.add(complex2);
      complex3.equals(complex4);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex0.sqrt1z();
      complex1.isInfinite();
      complex1.getField();
      complex3.cosh();
      Complex complex7 = new Complex(0.0);
      complex7.getArgument();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.negate();
      complex9.nthRoot(542);
      complex3.negate();
      complex7.conjugate();
      complex4.log();
      Complex complex10 = complex9.exp();
      complex10.tan();
      Complex complex11 = Complex.NaN;
      complex5.add(complex8);
      complex0.acos();
      complex6.cosh();
      complex6.hashCode();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(9.22064170155394E22, 9.22064170155394E22);
      complex0.getReal();
      Complex complex1 = Complex.valueOf(0.0, (-5152.636576813342));
      Complex complex2 = new Complex((-5152.636576813342), 9.22064170155394E22);
      Complex complex3 = complex2.ONE.createComplex((-1148.6055623304817), 670.5071);
      complex3.atan();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.atan();
      complex3.sinh();
      complex1.abs();
      Complex complex6 = complex5.log();
      complex0.readResolve();
      complex6.equals(complex3);
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(9.22064170155394E22, 9.22064170155394E22);
      complex0.getReal();
      Complex complex1 = Complex.valueOf(0.0, (-5152.636576813342));
      Complex complex2 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ONE.createComplex((-1148.6055623304817), 670.5071);
      complex3.atan();
      complex1.divide(complex3);
      Complex complex4 = complex0.atan();
      complex3.sinh();
      complex2.abs();
      Complex complex5 = new Complex(9.22064170155394E22, 0.0);
      complex5.log();
      complex0.readResolve();
      Object object0 = complex1.readResolve();
      complex5.equals(object0);
      complex4.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(complex0);
      complex0.getImaginary();
      Complex complex3 = complex1.sinh();
      complex0.readResolve();
      complex3.log();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.add(complex1);
      complex5.nthRoot(1123);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex2.pow(complex5);
      Complex complex8 = complex7.asin();
      complex3.getField();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex2.multiply((-3779.7402));
      complex1.isInfinite();
      complex9.readResolve();
      complex6.log();
      complex2.divide(complex5);
      Complex complex11 = complex3.atan();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex12.multiply((-3779.7402));
      complex11.getImaginary();
      complex10.divide(complex3);
      complex2.asin();
      complex9.createComplex(0.0, 747.10128);
      Complex complex14 = complex4.pow(747.10128);
      complex14.readResolve();
      complex13.equals(complex7);
      complex9.tan();
      complex7.log();
      complex13.divide((-3779.7402));
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(complex0);
      complex2.getImaginary();
      Complex complex3 = complex1.sinh();
      Complex complex4 = (Complex)complex3.INF.readResolve();
      complex2.isNaN();
      Complex complex5 = complex3.acos();
      complex0.multiply(0);
      double double0 = (-1459.4505);
      Complex complex6 = complex2.divide((-1459.4505));
      complex6.getField();
      Complex complex7 = complex2.cosh();
      complex4.getArgument();
      complex5.negate();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(complex0);
      complex2.getImaginary();
      Complex complex3 = complex1.sinh();
      complex3.INF.readResolve();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.INF.add(complex1);
      complex6.NaN.nthRoot(1123);
      complex3.tan();
      complex5.INF.pow(complex4);
      complex3.asin();
      complex2.getField();
      complex1.sinh();
      Complex complex7 = complex1.multiply(0.0);
      complex3.isInfinite();
      complex1.readResolve();
      Complex complex8 = complex3.log();
      complex8.divide(complex0);
      complex5.ZERO.atan();
      Complex complex9 = complex4.multiply(0.0);
      complex7.getImaginary();
      complex9.ONE.divide(complex0);
      Complex complex10 = complex7.asin();
      complex9.ONE.createComplex(0.0, 0.0);
      complex4.pow(0.0);
      Object object0 = complex9.readResolve();
      complex6.equals(object0);
      Complex complex11 = complex10.tan();
      complex11.log();
      complex11.divide(0.0);
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow((-1108.207400944511));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = complex4.ZERO.subtract(2.0);
      Complex complex6 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.I.sinh();
      complex7.ONE.nthRoot(1470);
      complex0.hashCode();
      complex1.getImaginary();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex8.add(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex9.ZERO.cos();
      Complex complex12 = complex1.acos();
      complex12.NaN.cosh();
      complex0.createComplex((-1108.207400944511), (-1108.207400944511));
      complex11.negate();
      Complex complex13 = complex5.sinh();
      complex13.NaN.multiply(37);
      complex10.conjugate();
      complex3.getField();
      complex3.negate();
      complex4.isInfinite();
      Complex.valueOf((double) 37, (-2669.8647));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1961.689566);
      Complex complex2 = complex0.I.exp();
      complex0.NaN.sqrt();
      Complex complex3 = complex0.I.subtract(complex1);
      complex0.I.nthRoot(1);
      complex3.multiply(1);
      Complex complex4 = complex0.sqrt1z();
      complex4.ONE.toString();
      Complex complex5 = complex1.conjugate();
      complex3.NaN.subtract((double) 1);
      Complex complex6 = complex4.multiply(complex1);
      Complex complex7 = complex6.ONE.sinh();
      complex1.NaN.conjugate();
      complex3.getField();
      complex7.ONE.hashCode();
      complex1.ONE.divide(complex5);
      complex5.getImaginary();
      complex4.INF.getArgument();
      complex7.subtract(complex0);
      complex6.tan();
      complex2.multiply((double) 1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.ONE.nthRoot(3599);
      Complex complex3 = complex1.I.divide(0.0);
      complex3.I.getArgument();
      complex1.I.getArgument();
      Complex complex4 = complex0.ONE.add((-1962.9453));
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.ONE.sin();
      complex6.I.asin();
      complex0.getArgument();
      complex5.INF.sin();
      complex5.equals(complex4);
      complex1.hashCode();
      complex5.ONE.subtract(0.0);
      complex4.sqrt1z();
      Complex complex7 = complex5.negate();
      complex7.NaN.acos();
      complex6.getImaginary();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex0.cosh();
      complex4.I.sqrt();
      complex3.negate();
      complex0.divide(complex4);
      Complex complex5 = complex0.sqrt1z();
      complex3.isInfinite();
      complex1.negate();
      complex5.getField();
      complex2.multiply(384.0);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Object object0 = complex0.NaN.readResolve();
      complex0.readResolve();
      Complex complex1 = complex0.ONE.conjugate();
      complex0.I.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.multiply(complex1);
      complex3.ONE.readResolve();
      complex0.pow(20.0);
      complex2.ZERO.divide((-3218.312109232113));
      complex2.NaN.toString();
      complex0.equals(object0);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(1.315498542514467E-9);
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex0.negate();
      complex2.hashCode();
      complex3.hashCode();
      Complex complex4 = complex1.I.sqrt();
      Complex complex5 = complex3.add(complex2);
      complex3.equals(complex5);
      Complex complex6 = complex3.reciprocal();
      complex0.sqrt1z();
      complex1.isInfinite();
      Complex complex7 = new Complex(591.2585735004641, 0.0);
      complex7.ZERO.subtract(591.2585735004641);
      Complex complex8 = complex6.subtract(complex7);
      complex8.ONE.abs();
      complex1.getArgument();
      complex1.equals("{-9>~XK&Bhv^e:G");
      Complex complex9 = complex0.tanh();
      complex9.ONE.pow(complex7);
      complex7.abs();
      complex8.pow(1296.6);
      complex2.multiply(complex1);
      complex6.isInfinite();
      Complex.valueOf(1.5707963281103952);
      complex8.equals(complex0);
      complex2.cosh();
      complex8.abs();
      complex4.multiply(2212);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.multiply(complex1);
      complex0.hashCode();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.NaN.exp();
      Complex.valueOf(0.0, 0.0);
      complex3.I.sqrt();
      complex4.NaN.cos();
      Complex complex5 = complex2.NaN.reciprocal();
      Complex complex6 = complex5.cosh();
      complex6.NaN.getField();
      complex6.ONE.atan();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.add(0.0);
      complex1.ZERO.asin();
      complex1.subtract(complex0);
      Complex complex9 = complex0.tan();
      complex3.NaN.multiply(complex4);
      complex9.NaN.subtract(312.8460608519);
      complex2.getField();
      Complex complex10 = complex4.createComplex(0.0, 0.0);
      complex4.add(0.0);
      complex10.ZERO.cos();
      complex3.nthRoot(2159);
      complex8.multiply((-2789));
      complex9.pow(complex10);
      Complex complex11 = complex7.asin();
      complex11.I.atan();
      Complex complex12 = complex2.subtract(312.8460608519);
      complex12.NaN.conjugate();
      complex6.hashCode();
      complex2.multiply(1356);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3049.1168170055);
      Complex complex2 = complex1.NaN.multiply(3049.1168170055);
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex1.NaN.subtract(3049.1168170055);
      complex0.hashCode();
      Complex complex5 = complex0.ZERO.multiply(complex1);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.NaN.subtract(211.26495705970524);
      Complex complex8 = complex7.I.acos();
      Complex complex9 = new Complex(2946.6721);
      Complex complex10 = complex8.ZERO.multiply(complex9);
      Complex complex11 = complex8.INF.add(complex2);
      complex6.getReal();
      complex0.getReal();
      complex7.INF.multiply(1);
      complex6.abs();
      complex8.I.getField();
      Complex complex12 = complex7.subtract((-5644.8991));
      complex5.sin();
      Complex.valueOf(Double.NaN);
      complex12.pow(complex3);
      complex10.getImaginary();
      complex9.readResolve();
      complex10.divide(2946.6721);
      complex4.acos();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.negate();
      complex3.ZERO.cosh();
      complex3.ZERO.nthRoot(386);
      Complex complex4 = complex2.subtract((-2034.9297364284726));
      Complex complex5 = complex4.multiply(complex3);
      complex3.I.sqrt();
      Complex complex6 = complex0.sin();
      Complex.valueOf(1340.9952);
      complex6.conjugate();
      complex6.sqrt1z();
      complex3.multiply(complex4);
      Complex complex7 = complex5.negate();
      complex7.ONE.cosh();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      complex0.I.getField();
      complex1.ONE.nthRoot(1);
      Complex complex2 = complex0.I.divide(2079.2094621707083);
      complex2.ONE.sinh();
      Complex complex3 = complex0.INF.pow((double) 1);
      complex3.INF.readResolve();
      Complex complex4 = complex0.add(88.40033284857);
      complex4.ONE.add(complex1);
      complex4.isInfinite();
      complex0.readResolve();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2555.5107773432014);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex3.I.divide(complex2);
      complex0.getField();
      Complex complex5 = complex1.add(2555.5107773432014);
      Complex complex6 = complex5.I.cosh();
      complex6.NaN.acos();
      complex0.I.hashCode();
      Complex complex7 = complex1.createComplex((-7.2285665164439578E17), (-7.2285665164439578E17));
      complex1.atan();
      Complex.valueOf(2.2294564247131348, (-2778.4377025894));
      complex3.divide(complex0);
      complex7.log();
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      complex0.NaN.readResolve();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.NaN.cosh();
      complex0.hashCode();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(9.22064170155394E22, 9.22064170155394E22);
      complex0.getReal();
      Complex complex1 = Complex.valueOf(0.0, (-5152.636576813342));
      Complex complex2 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ONE.createComplex((-1148.6055623304817), 670.5071);
      complex3.atan();
      complex1.I.divide(complex0);
      complex1.INF.atan();
      complex2.ONE.sinh();
      complex1.abs();
      Complex complex4 = complex1.log();
      Object object0 = complex4.readResolve();
      complex1.equals(object0);
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex0.INF.toString();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.ZERO.sinh();
      complex1.isNaN();
      complex3.ZERO.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex5.tanh();
      Complex.valueOf(1115.6, 1115.6);
      Object object0 = new Object();
      complex7.equals(object0);
      complex3.ONE.pow(1115.6);
      complex2.readResolve();
      Complex complex9 = complex5.tanh();
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf(1115.6);
      complex9.ZERO.createComplex(1115.6, 1115.6);
      complex9.reciprocal();
      complex5.cos();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = complex0.I.createComplex(0.0, (-1.0));
      complex0.hashCode();
      complex1.isNaN();
      Complex complex2 = complex1.acos();
      complex0.NaN.multiply(0);
      complex2.divide((-1.0));
      complex0.getField();
      Complex complex3 = complex2.INF.cosh();
      complex3.ONE.getArgument();
      Complex complex4 = complex1.negate();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.INF.add(2400.764);
      try { 
        complex1.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.7848189609));
      complex0.readResolve();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.valueOf(614.377);
      complex1.INF.sqrt();
      Complex complex3 = complex2.INF.conjugate();
      complex3.I.divide(complex0);
      Complex complex4 = complex0.pow(complex2);
      complex4.ONE.divide(complex1);
      Complex complex5 = complex0.tan();
      complex1.sinh();
      complex5.cos();
      complex4.multiply((-207));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      complex0.ONE.conjugate();
      complex0.isInfinite();
      complex0.isNaN();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex1.NaN.readResolve();
      Complex complex3 = complex2.NaN.tanh();
      complex1.NaN.toString();
      Complex complex4 = complex0.log();
      complex2.ONE.add(complex0);
      complex4.hashCode();
      complex4.NaN.cosh();
      Complex complex5 = complex4.add(complex0);
      complex5.multiply((-2930.3696933334));
      Complex complex6 = complex4.subtract(complex2);
      complex2.NaN.getField();
      complex3.getImaginary();
      complex6.NaN.getField();
      complex6.createComplex((-1860.33079022), (-396.81174));
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      complex3.acos();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.ONE.createComplex((-248.572882), (-1579.4003671525913));
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex3.NaN.tan();
      Complex complex6 = complex5.INF.conjugate();
      complex6.asin();
      complex4.ZERO.subtract((-3637.2773));
      Complex complex7 = complex3.NaN.pow(complex0);
      complex7.exp();
      Complex complex8 = complex7.NaN.add(1200.558);
      Complex complex9 = complex0.cos();
      Complex complex10 = Complex.valueOf(1287.0, (-248.572882));
      complex10.NaN.sqrt();
      Complex complex11 = complex9.NaN.tan();
      complex0.ONE.divide(complex8);
      Complex complex12 = complex11.ZERO.pow(complex1);
      complex11.ONE.subtract((-1579.4003671525913));
      complex11.ZERO.abs();
      complex3.tan();
      complex2.hashCode();
      complex12.readResolve();
      complex1.getImaginary();
      complex7.multiply(0.0);
      complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.I.multiply(1347);
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex0.ZERO.tanh();
      Complex complex5 = complex0.I.subtract(0.0);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex0.pow(0.0);
      complex7.getField();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex8.ZERO.add(complex3);
      Complex complex10 = complex8.add(0.0);
      complex10.INF.add(complex8);
      complex8.multiply(1347);
      complex3.ZERO.pow(complex9);
      complex8.toString();
      Complex complex11 = complex1.cos();
      complex3.sqrt();
      Complex complex12 = complex11.reciprocal();
      complex1.subtract(complex4);
      complex12.subtract(Double.NaN);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3071.94274196394, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.I.negate();
      complex0.ONE.hashCode();
      Complex complex4 = complex1.ONE.negate();
      complex4.ZERO.add(complex2);
      complex0.tan();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = Complex.valueOf(0.0);
      complex6.ONE.negate();
      Complex complex7 = complex2.cosh();
      complex7.NaN.createComplex(0.0, 0.0);
      Complex complex8 = complex6.tan();
      complex7.atan();
      Complex complex9 = complex3.log();
      complex9.ONE.readResolve();
      complex5.conjugate();
      complex0.hashCode();
      complex8.asin();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(745.2242, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.createComplex(745.2242, 0.0);
      Complex complex3 = complex2.NaN.multiply(181);
      Complex complex4 = complex0.subtract(complex1);
      complex2.I.conjugate();
      complex4.I.tan();
      complex4.subtract(0.0);
      complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex1.pow(complex0);
      double double0 = 20.0;
      Complex complex2 = complex0.NaN.divide(20.0);
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      Complex complex4 = complex3.subtract(complex2);
      int int0 = 0;
      complex4.NaN.sqrt1z();
      complex4.INF.log();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.cosh();
      complex0.ZERO.log();
      Complex complex3 = complex2.ONE.divide(757.4077727);
      complex1.NaN.abs();
      complex2.ONE.nthRoot(523);
      Complex complex4 = Complex.valueOf(0.0);
      complex0.NaN.pow(complex4);
      complex3.INF.toString();
      complex1.NaN.createComplex(523, 835.01330601);
      Complex complex5 = complex1.NaN.pow(complex3);
      complex5.ZERO.subtract(2039.0602173692803);
      Complex complex6 = complex5.INF.sqrt();
      complex0.getArgument();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex3.add(complex1);
      Complex complex9 = complex3.multiply(523);
      complex7.readResolve();
      complex0.isInfinite();
      complex6.log();
      Complex.valueOf(835.01330601);
      complex8.add(835.01330601);
      complex2.exp();
      complex3.readResolve();
      complex9.sqrt();
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      complex1.NaN.readResolve();
      complex0.INF.abs();
      Complex complex2 = complex0.pow(6.308649765138419E-287);
      complex2.I.sqrt1z();
      Complex complex3 = complex1.subtract(complex0);
      complex0.sin();
      complex1.getField();
      Complex complex4 = complex0.cos();
      complex4.ONE.subtract(complex0);
      complex3.ZERO.cosh();
      Complex complex5 = complex4.ZERO.cos();
      complex5.I.tanh();
      complex3.I.getField();
      int int0 = (-3487);
      try { 
        complex3.nthRoot((-3487));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,487
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.readResolve();
      Complex complex1 = Complex.valueOf(423.733);
      Complex complex2 = complex0.subtract(complex1);
      complex2.ONE.getArgument();
      complex0.isInfinite();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.INF.createComplex(423.733, 0.28743791580200195);
      Complex complex5 = Complex.valueOf((-130.0));
      complex5.INF.sin();
      complex0.getArgument();
      complex2.sqrt1z();
      Complex complex6 = complex1.sqrt1z();
      complex6.NaN.pow(complex0);
      complex1.getField();
      complex4.pow(0.28743791580200195);
      complex4.sqrt();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3896.3211));
      complex0.ONE.readResolve();
      Complex complex1 = complex0.NaN.multiply(1);
      Complex complex2 = complex1.INF.divide((-3896.3211));
      Complex complex3 = complex0.subtract((-3896.3211));
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.I.negate();
      complex5.INF.divide((double) 1);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.I.subtract(complex6);
      complex7.NaN.divide((double) 1);
      complex6.INF.readResolve();
      complex7.ZERO.subtract(complex3);
      complex7.INF.subtract((double) 1);
      complex2.multiply(1);
      complex1.isNaN();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex3.add(complex8);
      Complex complex10 = complex0.exp();
      complex9.cosh();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      complex0.ONE.hashCode();
      complex1.multiply(complex0);
      complex0.getArgument();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.ONE.divide(6.283185307179586);
      Complex complex5 = complex1.sqrt1z();
      complex1.ONE.tan();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.ONE.divide(complex1);
      Complex complex9 = complex8.createComplex(207.738206996, 207.738206996);
      Complex complex10 = complex9.INF.atan();
      complex10.I.negate();
      Complex complex11 = complex7.negate();
      complex11.INF.negate();
      Complex complex12 = complex0.add(complex5);
      Complex complex13 = complex12.sin();
      Complex complex14 = complex13.NaN.asin();
      complex14.NaN.divide(0.0);
      complex13.NaN.tanh();
      complex0.log();
      Complex complex15 = complex1.tan();
      complex15.INF.log();
      complex15.cos();
      complex4.add(complex3);
      complex8.getArgument();
      complex7.tanh();
      complex3.createComplex((-46.1425946714), 6.283185307179586);
      complex7.pow(0.0);
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.ZERO.sqrt();
      complex2.ONE.asin();
      complex2.NaN.pow((-1.0));
      complex0.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1951.713506174504, 1951.713506174504);
      Complex complex1 = complex0.INF.createComplex((-1620.6127), 2.1151310700892382E-19);
      complex1.I.conjugate();
      Complex complex2 = complex1.INF.sin();
      complex2.ZERO.getArgument();
      complex0.ZERO.sqrt1z();
      complex0.readResolve();
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.tan();
      Complex complex1 = complex0.multiply(502.94);
      Complex.valueOf(502.94);
      Object object0 = new Object();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 194.99);
      complex0.ZERO.abs();
      complex0.getField();
      Complex complex1 = complex0.log();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex0.ONE.hashCode();
      complex0.equals(object0);
      Complex complex3 = complex0.cosh();
      complex1.divide(complex2);
      complex1.ONE.multiply(471.5);
      complex2.negate();
      complex1.log();
      Complex complex4 = complex3.cosh();
      complex3.cos();
      complex4.NaN.abs();
      complex3.NaN.sin();
      Object object1 = new Object();
      complex2.equals(object1);
      complex4.conjugate();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.I.pow(6886.1825179);
      complex2.I.multiply((-1280));
      Complex complex3 = complex0.sinh();
      complex3.I.log();
      complex3.ONE.getField();
      complex3.isInfinite();
      Complex complex4 = Complex.ZERO;
      complex4.INF.subtract(0.5438674688339233);
      complex1.add(complex4);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(2520.35359469934);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex(2520.35359469934, (-2412.9046296));
      Complex complex4 = complex3.ONE.sinh();
      complex0.pow(complex3);
      Complex complex5 = complex1.I.cosh();
      Complex complex6 = complex3.add(2520.35359469934);
      Complex complex7 = complex2.reciprocal();
      complex7.ZERO.multiply(complex5);
      complex3.nthRoot(1903);
      complex7.toString();
      complex3.getReal();
      complex4.hashCode();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = (-1.0753950588009912E-8);
      Complex complex0 = Complex.valueOf((-1.0753950588009912E-8), (-1.0753950588009912E-8));
      complex0.tanh();
      double double1 = (-4439.2398956);
      Complex complex1 = Complex.valueOf(0.0);
      int int0 = (-2948);
      try { 
        complex1.ONE.nthRoot((-2948));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,948
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2299.7708951190307), (-2299.7708951190307));
      Complex complex2 = complex0.divide(complex1);
      complex1.NaN.abs();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex3.INF.sin();
      complex4.ONE.sqrt();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex5.I.sqrt();
      complex6.createComplex((-2299.7708951190307), 0.0);
      Complex complex7 = complex2.log();
      Complex complex8 = complex1.sqrt1z();
      assertEquals((-2299.770786412553), complex8.getImaginary(), 0.01);
      
      complex1.getReal();
      Complex complex9 = complex7.atan();
      Complex complex10 = Complex.valueOf((-2299.7708951190307));
      complex10.ZERO.createComplex(0.0, (-1829.0));
      complex10.I.divide(complex6);
      Complex complex11 = complex1.negate();
      Complex complex12 = complex1.divide(complex6);
      assertEquals((-3252.3671902282463), complex12.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex13 = complex9.cos();
      Complex complex14 = Complex.valueOf((-2299.7708951190307));
      complex2.isInfinite();
      Complex complex15 = complex3.cosh();
      assertEquals(1.5430806348152437, complex15.getReal(), 0.01);
      
      Complex complex16 = complex11.divide(0.0);
      assertNotSame(complex16, complex4);
      assertSame(complex16, complex13);
      
      Complex complex17 = Complex.valueOf((-1620.140478101));
      complex2.equals(complex17);
      complex14.hashCode();
      assertTrue(complex14.equals((Object)complex10));
      assertEquals(0.0, complex14.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(200.8460318);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.sin();
      complex2.NaN.getArgument();
      Complex complex4 = complex2.I.multiply(2056);
      assertEquals(2056.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      double double0 = complex3.getArgument();
      assertEquals(3.141592653589793, double0, 0.01);
      
      Complex complex5 = complex2.divide(3.141592653589793);
      assertEquals(0.17198356548572724, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex0.sinh();
      complex6.ONE.getArgument();
      assertEquals(8.419636210795217E86, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.log();
      assertEquals(5.302538603577507, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
  }
}
