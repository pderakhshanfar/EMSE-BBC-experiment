/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:39:07 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0605288965077546E132, 1.0605288965077546E132);
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      complex0.getField();
      Complex complex3 = complex1.add(1.0605288965077546E132);
      complex3.ONE.tanh();
      Complex complex4 = complex2.divide(1.0);
      complex0.toString();
      complex1.ONE.readResolve();
      Complex complex5 = complex2.asin();
      complex5.NaN.log();
      Complex complex6 = complex0.I.reciprocal();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.exp();
      complex0.nthRoot(221);
      Complex complex9 = complex2.tanh();
      complex6.acos();
      complex6.multiply(complex8);
      complex1.pow(complex9);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.readResolve();
      complex0.ZERO.toString();
      Complex complex1 = Complex.valueOf(3.2159889205385294E-6, 8.433630296371073E297);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.sqrt1z();
      complex4.multiply(complex1);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-5061.09313857), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.sqrt1z();
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex(1.7953281745246438E-281, 1.7953281745246438E-281);
      complex1.divide(complex3);
      Complex complex4 = Complex.NaN;
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      complex0.sqrt1z();
      Complex complex3 = Complex.I;
      complex1.divide(complex2);
      Complex complex4 = complex1.atan();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-1.0166777447643158E-17), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.NaN.pow(complex0);
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-3139.704185326494), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex1.INF.atan();
      complex1.cos();
      Complex complex2 = Complex.ONE;
      complex2.add(Double.POSITIVE_INFINITY);
      complex2.readResolve();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex0.tanh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex((-3139.704185326494), 1.1558306784419011E-7);
      complex5.I.asin();
      complex5.equals(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1299.3280672613894, 20.0);
      complex0.tan();
      Complex complex1 = Complex.ONE;
      complex1.INF.divide(1299.3280672613894);
      Complex complex2 = new Complex(164.8249885, 0.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-6.997545435826076E-8), Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 3.8410992889527954E-214);
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-849390.460302086), Double.NaN);
      Complex complex2 = complex1.ZERO.tan();
      complex1.equals("");
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(1454.8574);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.I.cos();
      complex3.multiply(1454.8574);
      complex0.getField();
      complex0.abs();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.INF.multiply(complex0);
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex5.divide(1454.8574);
      complex1.getField();
      Complex complex9 = complex2.divide(Double.NaN);
      Complex complex10 = complex3.pow((-2777.14));
      complex2.INF.add(1454.8574);
      Complex complex11 = complex7.divide(complex1);
      Complex complex12 = complex11.subtract(Double.NaN);
      complex12.I.getField();
      Complex.valueOf(1454.8574);
      complex2.I.createComplex((-2777.14), 1454.8574);
      complex10.atan();
      complex11.add(complex9);
      complex0.atan();
      complex7.asin();
      Complex complex13 = complex0.multiply(complex10);
      complex13.I.cos();
      complex8.multiply((-2777.14));
      complex6.acos();
      complex4.createComplex((-2777.14), (-2777.14));
      complex4.atan();
      complex5.multiply((-454.5036778490777));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.multiply(23);
      Complex complex3 = complex2.multiply(23);
      complex3.divide(complex3);
      Complex complex4 = new Complex((-689.636882798793));
      Complex complex5 = complex3.multiply((-689.636882798793));
      Complex complex6 = new Complex(23, 23);
      Complex complex7 = complex4.ONE.multiply(complex6);
      complex4.add((-2426.4651));
      complex7.ZERO.getField();
      complex4.tanh();
      complex7.divide((-0.4556836575205));
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(2688.312);
      Complex complex3 = complex1.acos();
      complex1.multiply(complex3);
      complex0.conjugate();
      complex3.acos();
      Complex complex4 = Complex.valueOf(0.0, 857.92718465);
      complex4.isInfinite();
      Complex complex5 = complex0.sin();
      complex1.nthRoot(808);
      Complex complex6 = Complex.INF;
      complex6.subtract(1.1858604467287287E8);
      Complex complex7 = complex4.asin();
      complex7.atan();
      complex2.divide((double) 1302);
      Complex.valueOf(Double.NaN, 2612.261);
      complex0.acos();
      complex3.subtract(Double.NaN);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.NaN;
      complex2.multiply((-1035));
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-693));
      Complex complex2 = complex1.createComplex(2888.3, (-20.0));
      Complex complex3 = new Complex((-20.0), 1072557701);
      complex0.readResolve();
      complex1.divide(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.valueOf((-20.0));
      complex3.getArgument();
      Complex complex6 = Complex.NaN;
      complex6.pow(complex5);
      Complex complex7 = complex1.multiply(complex0);
      complex5.negate();
      complex7.asin();
      complex4.cos();
      complex3.tanh();
      Complex.valueOf(2888.3);
      complex2.sin();
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add((double) (-1085));
      Complex complex2 = complex0.ONE.multiply(complex0);
      complex1.tanh();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.sqrt();
      complex2.add(complex4);
      complex2.divide((double) (-1085));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1066.522);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.add((-8.009548754642203E231));
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = new Complex((-8.009548754642203E231), 1066.522);
      complex5.tanh();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.add((double) (-1085));
      complex0.ONE.multiply(complex1);
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.createComplex((-2706.01609), 0.0);
      Complex complex3 = new Complex((-707.0217747185434), 3826.7648764);
      complex3.readResolve();
      complex0.divide(complex3);
      complex2.tan();
      Complex.valueOf(Double.NaN);
      complex1.getArgument();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex5.multiply(complex4);
      complex2.negate();
      complex6.asin();
      Complex complex7 = new Complex(1981.053978);
      Complex complex8 = complex7.cos();
      complex6.tanh();
      Complex.valueOf(Double.NaN);
      complex4.sin();
      complex6.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.add(0.0);
      complex0.tanh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide((-957.782210044011));
      complex0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2.0, Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex2 = Complex.valueOf((-1.0), 2.0);
      Complex complex3 = complex2.divide(complex0);
      complex3.tan();
      Complex complex4 = Complex.valueOf(2.0);
      complex1.getArgument();
      complex1.sqrt1z();
      complex4.acos();
      Complex complex5 = complex0.tan();
      complex5.reciprocal();
      complex3.add(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.multiply(17);
      Complex complex3 = complex2.multiply(17);
      Complex complex4 = Complex.ONE;
      complex3.divide(complex4);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex3.multiply((-688.58430083));
      complex2.cos();
      Complex complex7 = complex6.cosh();
      complex3.INF.acos();
      Complex complex8 = complex1.multiply(complex3);
      complex2.conjugate();
      Complex complex9 = complex5.acos();
      complex9.isInfinite();
      complex5.sin();
      complex8.nthRoot(1302);
      complex8.subtract(330.93);
      complex7.reciprocal();
      Complex complex10 = Complex.ONE;
      complex10.add((-400.70463081311));
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.multiply((-1085));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.multiply((double) (-1085));
      Complex complex5 = complex1.cos();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex5.acos();
      Complex complex8 = Complex.valueOf(3579.26574853699);
      complex1.multiply(complex8);
      complex7.sinh();
      complex2.conjugate();
      Complex complex9 = Complex.valueOf(3579.26574853699);
      Complex complex10 = complex9.acos();
      complex4.isInfinite();
      Complex complex11 = complex6.sin();
      complex11.nthRoot(7);
      complex0.subtract((-1153.002402291003));
      complex6.asin();
      complex10.atan();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf((double) 1302, Double.NaN);
      complex3.getField();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.add(0.0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = new Complex(Double.NaN, 561.788142697756);
      complex3.nthRoot(17);
      complex2.multiply((-827.0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(6.283185307179586, 1872.5038370357784);
      Complex complex2 = new Complex(-0.0, (-4.588037824983901));
      complex0.readResolve();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.divide(complex3);
      complex2.getArgument();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex1.acos();
      Complex complex7 = new Complex(9.06393426961373E-9, (-6.497201118758974E13));
      complex7.cos();
      Complex complex8 = Complex.ONE;
      complex8.getField();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex9.sqrt1z();
      complex11.ZERO.tanh();
      complex5.abs();
      complex6.pow(complex2);
      complex3.pow(5.962956589227457E199);
      Complex complex12 = Complex.INF;
      complex10.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.tanh();
      complex0.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.createComplex(1872.340431, Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, 1557.9307153658401);
      Complex complex3 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      complex1.getReal();
      complex3.nthRoot(1697);
      Complex complex4 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex4.I.negate();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      complex0.abs();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.INF.createComplex(1872.340431, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 1557.9307153658401);
      complex2.ONE.divide(Double.POSITIVE_INFINITY);
      complex2.getReal();
      complex1.isInfinite();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex0.ONE.asin();
      Complex complex7 = new Complex((-1752.0), Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.pow(complex0);
      complex8.ZERO.cosh();
      complex5.atan();
      complex3.divide(complex0);
      complex6.tanh();
      complex4.add(complex8);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.INF.sinh();
      complex0.getImaginary();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 17, 1.9426684379577637);
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = Complex.ONE;
      complex2.tan();
      complex1.multiply((double) 17);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.cosh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.multiply(complex6);
      complex6.sinh();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex6.acos();
      complex9.isInfinite();
      complex7.sin();
      complex2.nthRoot(1302);
      Complex complex10 = Complex.NaN;
      complex10.subtract(1.1828997135162354);
      Complex complex11 = complex8.asin();
      complex9.atan();
      complex9.divide(2.3609400272358744E-8);
      Complex.valueOf(5.284573958585797E-4, 1.0);
      complex11.getField();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex(3784.6);
      Complex complex3 = Complex.NaN;
      complex3.subtract(complex0);
      complex1.subtract((-688.58430083));
      complex2.acos();
      Complex complex4 = Complex.ZERO;
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(1453);
      Complex complex3 = complex2.createComplex((-535.220865333543), (-6.997545435826076E-8));
      Complex complex4 = new Complex((-3674.227), (-3674.227));
      Complex complex5 = (Complex)complex4.readResolve();
      complex3.equals(complex4);
      Complex complex6 = complex4.divide(complex2);
      Complex complex7 = complex4.tan();
      Complex complex8 = complex7.sinh();
      complex1.abs();
      complex6.sinh();
      complex2.getArgument();
      complex4.acos();
      complex8.getField();
      complex4.sin();
      Complex complex9 = Complex.ONE;
      complex2.abs();
      complex5.pow(complex0);
      Complex complex10 = Complex.I;
      complex10.pow(0.0);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.add((-1634.4588402481825));
      Complex complex3 = Complex.valueOf(1.568377368820961);
      Complex complex4 = Complex.valueOf(0.0, 1.568377368820961);
      complex2.isInfinite();
      Complex complex5 = complex0.pow(complex1);
      complex5.multiply((-1713));
      complex1.getField();
      complex0.hashCode();
      Complex complex6 = complex0.tanh();
      complex4.toString();
      complex6.atan();
      Complex.valueOf(Double.NaN, (-1634.4588402481825));
      complex1.reciprocal();
      complex3.pow(2563.029898);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(490.46, 1516.8738523);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.conjugate();
      complex2.divide(complex0);
      Complex complex4 = Complex.valueOf(20.0, (-2297.38281));
      Complex complex5 = complex0.reciprocal();
      complex4.cos();
      Complex complex6 = complex1.cosh();
      complex5.getImaginary();
      Complex complex7 = complex2.add(complex3);
      Complex complex8 = complex1.sinh();
      complex2.getArgument();
      Complex complex9 = complex6.sqrt1z();
      complex0.multiply(complex8);
      Complex complex10 = complex7.acos();
      complex4.cos();
      Complex complex11 = new Complex((-0.99465406703434), 490.46);
      complex11.getField();
      Complex complex12 = new Complex((-20.0), 490.46);
      complex9.sqrt1z();
      complex1.sin();
      complex2.sqrt1z();
      complex10.abs();
      complex12.pow(1.739696979522705);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex1.abs();
      Complex.valueOf(0.0);
      Complex complex2 = complex1.createComplex((-3653.0), Double.NaN);
      Complex complex3 = Complex.valueOf(1557.9307153658401, Double.NaN);
      Complex complex4 = complex0.divide(3089.7419);
      Complex complex5 = Complex.ZERO;
      complex5.getReal();
      complex0.isInfinite();
      Complex complex6 = complex4.exp();
      complex2.asin();
      complex3.pow(complex4);
      Complex complex7 = Complex.valueOf(0.0, 895.9);
      complex7.divide(complex4);
      complex6.tanh();
      complex6.nthRoot(975);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4099.921860938724));
      complex0.ONE.getField();
      complex0.I.sqrt();
      complex0.atan();
      complex0.ONE.multiply(212);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.add((-1.1752011936438014));
      Complex complex3 = complex1.exp();
      complex3.asin();
      complex1.abs();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-0.9999998603663807), 1429.3695760784306);
      Complex complex1 = complex0.multiply((-2144766865));
      complex0.readResolve();
      Complex complex2 = complex0.add(1429.3695760784306);
      Complex complex3 = complex2.NaN.conjugate();
      complex3.ONE.subtract(complex0);
      Complex complex4 = complex1.createComplex((-0.9999998603663807), 1429.3695760784306);
      Complex complex5 = complex4.ONE.divide((double) (-2144766865));
      Complex complex6 = complex4.multiply(complex2);
      Complex complex7 = complex6.I.sqrt();
      Complex complex8 = complex4.divide(complex0);
      Complex complex9 = complex8.add((-1.0481908869377813E-8));
      Complex complex10 = complex7.atan();
      complex10.INF.exp();
      Complex complex11 = complex4.negate();
      Complex complex12 = complex11.I.multiply(complex9);
      complex12.ONE.sin();
      Complex complex13 = complex8.NaN.multiply(complex7);
      complex13.ZERO.divide(complex1);
      complex4.INF.tanh();
      complex8.equals((Object) null);
      complex4.multiply((-0.9999998603663807));
      Complex complex14 = Complex.valueOf(4251.21373661, 4251.21373661);
      complex14.INF.acos();
      complex5.reciprocal();
      Complex complex15 = complex8.reciprocal();
      complex15.ONE.getField();
      complex10.sinh();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2512.944334306133), (-2512.944334306133));
      complex0.hashCode();
      complex0.nthRoot(996);
      complex0.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.exp();
      complex2.sqrt1z();
      Complex complex5 = complex1.subtract((double) 996);
      Complex complex6 = Complex.valueOf((-2512.944334306133));
      complex0.reciprocal();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex5.asin();
      complex4.reciprocal();
      complex1.pow(0.41421356237309515);
      complex3.hashCode();
      complex8.sqrt();
      complex6.sin();
      Complex complex9 = Complex.INF;
      complex9.sinh();
      Complex complex10 = complex8.multiply((-2147480202));
      complex7.add((double) 996);
      complex1.getArgument();
      complex10.add(758.116);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4099.921860938724));
      complex0.ONE.getField();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.ONE.multiply(212);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.NaN.divide(complex4);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex4.ZERO.multiply(Double.NaN);
      Complex complex8 = complex6.cos();
      Complex complex9 = complex8.cosh();
      complex9.NaN.multiply(complex3);
      Complex complex10 = complex6.NaN.sinh();
      Complex complex11 = complex5.conjugate();
      complex4.abs();
      complex8.sqrt1z();
      complex8.cos();
      complex0.createComplex(Double.NaN, 1672.7483);
      Complex complex12 = Complex.valueOf((-4094.81), 1672.7483);
      complex11.readResolve();
      complex12.cosh();
      Complex complex13 = complex1.negate();
      complex10.tanh();
      complex9.readResolve();
      complex2.readResolve();
      complex10.pow(complex11);
      complex7.add(1.0);
      complex10.add(complex13);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = (-3317.839);
      Complex complex0 = new Complex(2.618885966967355E-4, (-3317.839));
      complex0.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      int int0 = 212;
      Complex complex3 = complex1.multiply(212);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex1.tan();
      double double1 = Double.NaN;
      complex1.multiply((-0.9999987851889827));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.cos();
      complex6.cosh();
      Complex complex9 = complex6.multiply(complex8);
      complex9.sinh();
      complex1.conjugate();
      complex5.acos();
      complex0.isInfinite();
      complex1.sin();
      complex2.toString();
      int int1 = 562255;
      // Undeclared exception!
      complex3.nthRoot(562255);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(1453);
      Complex complex3 = complex2.createComplex((-535.220865333543), (-6.997545435826076E-8));
      Complex complex4 = new Complex((-3674.227), (-3674.227));
      complex4.readResolve();
      complex3.equals(complex4);
      complex4.divide(complex2);
      Complex complex5 = complex4.tan();
      complex5.sinh();
      complex3.getArgument();
      complex5.sqrt1z();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.cos();
      complex1.getField();
      complex6.sqrt1z();
      complex2.sin();
      complex1.sqrt1z();
      complex0.abs();
      complex3.pow(complex7);
      complex0.pow((-3674.227));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      complex0.abs();
      Complex complex2 = complex1.log();
      complex2.tan();
      Complex complex3 = complex0.atan();
      complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.divide((-1.1345515834332824E-7));
      complex4.abs();
      Complex complex6 = complex5.acos();
      complex1.sin();
      complex1.pow((-497.7466554));
      Complex complex7 = Complex.I;
      complex7.sqrt();
      Complex complex8 = complex4.divide(complex2);
      complex4.multiply(384);
      Complex complex9 = Complex.valueOf((-1.1345515834332824E-7), Double.POSITIVE_INFINITY);
      complex9.abs();
      Complex complex10 = Complex.valueOf(863.230212, (double) 384);
      Complex complex11 = new Complex(112.3832553, (-1.1345515834332824E-7));
      complex10.pow(complex11);
      complex9.getField();
      complex6.divide(complex9);
      complex8.abs();
      complex11.cos();
      Complex complex12 = complex3.subtract(3658.79477297682);
      complex12.exp();
      complex11.log();
      complex3.sin();
      complex11.sin();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1426.152);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex3.NaN.negate();
      complex2.toString();
      complex2.conjugate();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex1.acos();
      Complex complex8 = Complex.INF;
      complex7.add(complex8);
      complex2.exp();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex1.subtract(77.406);
      Complex complex11 = Complex.valueOf((-3100760.619842451));
      complex2.reciprocal();
      Complex complex12 = complex7.conjugate();
      Complex complex13 = complex6.asin();
      Complex complex14 = complex9.reciprocal();
      complex5.pow((-3100760.619842451));
      complex4.hashCode();
      complex11.sqrt();
      complex14.sin();
      complex13.sinh();
      complex0.multiply((-1507));
      complex10.add((-1027.0));
      complex12.getArgument();
      complex7.add(1.4043786616805493E-54);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, 9.113713162029408E267);
      complex0.hashCode();
      complex0.INF.nthRoot(1);
      complex0.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.acos();
      complex3.I.add(complex2);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.subtract(9.113713162029408E267);
      Complex.valueOf((double) 1);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex2.asin();
      Complex complex11 = new Complex(1);
      complex11.reciprocal();
      complex5.pow((-1758.53));
      complex2.hashCode();
      complex10.sqrt();
      complex9.sin();
      complex8.sinh();
      complex1.multiply(785);
      complex6.add(1.0292763402892674E-9);
      Complex complex12 = Complex.INF;
      complex12.getArgument();
      complex1.add((-1758.53));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4099.921860938724));
      complex0.ONE.getField();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.ONE.multiply(212);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.NaN.divide(complex4);
      Complex complex6 = complex2.tan();
      complex6.sqrt();
      complex4.multiply(complex3);
      complex3.multiply((-1044));
      complex6.pow((double) 212);
      complex1.multiply(1);
      complex5.tanh();
      complex5.tan();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.sqrt();
      complex0.hashCode();
      complex3.tan();
      Complex complex4 = Complex.valueOf((-688.58430083), 1615.7557);
      complex2.hashCode();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.add(complex6);
      Complex complex8 = complex3.multiply(complex1);
      complex4.asin();
      complex2.getReal();
      Complex complex9 = complex5.createComplex((-1933.7289345), (-799.09071592658));
      complex8.readResolve();
      complex1.isInfinite();
      complex7.getImaginary();
      complex8.log();
      complex9.sqrt1z();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      complex0.abs();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.INF.createComplex(1872.340431, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 1557.9307153658401);
      Complex complex4 = complex2.ONE.divide(Double.POSITIVE_INFINITY);
      complex2.getReal();
      complex1.isInfinite();
      Complex complex5 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex0.ONE.asin();
      Complex complex8 = complex3.pow(complex2);
      complex1.divide(complex2);
      Complex complex9 = Complex.valueOf((-405.021996));
      Complex complex10 = Complex.valueOf((-1294.868), 1557.9307153658401);
      complex2.isInfinite();
      complex7.pow(complex4);
      complex3.multiply((-1713));
      complex0.getField();
      complex8.hashCode();
      complex6.tanh();
      complex10.toString();
      complex2.atan();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.multiply(17);
      Complex complex3 = complex1.ZERO.createComplex(1.0, (-688.58430083));
      complex1.equals(complex1);
      complex0.INF.divide(complex1);
      Complex complex4 = complex3.tan();
      complex4.ONE.sinh();
      complex2.getArgument();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.NaN.cos();
      complex3.ZERO.getField();
      complex7.I.sqrt1z();
      Complex complex8 = complex0.sin();
      complex2.sqrt1z();
      complex6.abs();
      Complex complex9 = complex3.pow(complex8);
      try { 
        complex9.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1283.1), 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.multiply(722);
      complex3.createComplex(1.0, 2307.3);
      complex0.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex3.tan();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 722);
      Complex complex8 = complex7.sinh();
      complex6.getArgument();
      complex0.sqrt1z();
      Complex complex9 = Complex.ONE;
      complex9.acos();
      complex5.cos();
      complex8.getField();
      complex7.sqrt1z();
      Complex complex10 = Complex.ZERO;
      complex10.sin();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      complex11.sqrt1z();
      Complex complex12 = new Complex((-1283.1), 1.5707963267948966);
      complex12.abs();
      complex6.pow(complex7);
      complex2.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 364.9127533);
      Complex complex1 = Complex.ZERO;
      complex1.add(0.0);
      complex0.I.divide(complex1);
      complex0.ONE.sqrt();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(789.451);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.log();
      complex1.equals(complex0);
      Complex complex3 = complex1.tanh();
      complex1.INF.negate();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex4.ONE.divide(complex0);
      Complex complex6 = Complex.valueOf(2039.1596225794, 789.451);
      complex6.I.reciprocal();
      complex6.NaN.cos();
      Complex complex7 = complex2.cosh();
      complex3.getImaginary();
      complex0.ONE.add(complex5);
      Complex complex8 = complex2.divide(0.0);
      complex8.INF.tan();
      complex8.INF.toString();
      Complex complex9 = complex4.sin();
      complex9.I.abs();
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex10.ZERO.cos();
      complex10.createComplex(789.451, Double.NaN);
      Complex.valueOf(1.0, 1.0);
      complex4.readResolve();
      complex5.cosh();
      Complex complex12 = complex7.negate();
      complex12.tanh();
      complex12.readResolve();
      complex1.readResolve();
      complex8.pow(complex2);
      complex8.add(789.451);
      complex5.add(complex11);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      complex1.readResolve();
      complex1.I.nthRoot(1);
      complex0.getImaginary();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.log();
      complex1.nthRoot(1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ONE.add((double) 1);
      complex2.nthRoot(1);
      complex5.ONE.asin();
      Complex complex6 = complex3.asin();
      complex5.NaN.reciprocal();
      complex4.ONE.pow(complex6);
      complex5.getArgument();
      complex5.createComplex(0.0, (-917.9148916487627));
      Complex complex7 = complex0.add(complex2);
      complex7.ZERO.subtract((-20.0));
      complex3.subtract(0.0);
      Complex complex8 = complex6.subtract(complex3);
      Complex complex9 = complex7.tan();
      complex9.I.multiply(0.0);
      complex8.isInfinite();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = 2856.6;
      Complex complex0 = Complex.valueOf(2856.6, 2856.6);
      complex0.hashCode();
      complex0.INF.sqrt1z();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex0.acos();
      complex4.readResolve();
      Complex complex5 = complex1.tanh();
      complex5.ONE.pow(2.9410015940087773E-8);
      Complex complex6 = Complex.ONE;
      complex6.INF.sin();
      complex2.equals(complex6);
      complex3.getArgument();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(908.78);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex3.I.cosh();
      complex0.negate();
      Complex complex5 = Complex.valueOf(908.78);
      complex1.readResolve();
      Complex complex6 = complex1.subtract(908.78);
      complex5.I.subtract(complex6);
      complex6.I.multiply(complex5);
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.NaN.multiply(4084);
      Complex complex9 = complex1.sinh();
      complex9.ZERO.divide(complex2);
      complex5.ONE.acos();
      Complex complex10 = complex9.createComplex(0.0, (-1.4656240137098836E157));
      complex10.INF.readResolve();
      complex10.NaN.sin();
      complex5.exp();
      complex9.getArgument();
      complex10.tanh();
      Complex complex11 = complex0.atan();
      complex11.NaN.cos();
      Complex.valueOf((-2.2153227096187463E-9), (-1.0));
      complex4.createComplex((-2.2153227096187463E-9), (-1.4656240137098836E157));
      complex8.getArgument();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-1283.1), 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      complex0.atan();
      Complex complex3 = complex0.pow((-1283.1));
      complex0.INF.exp();
      Complex complex4 = complex3.ZERO.divide(0.0);
      complex1.abs();
      Complex complex5 = complex3.ZERO.acos();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex2.pow(0.0);
      complex7.NaN.sqrt();
      Complex complex8 = complex7.ZERO.divide(complex2);
      Complex complex9 = complex8.I.multiply(1);
      complex1.abs();
      Complex complex10 = complex7.pow(complex1);
      complex1.getField();
      complex8.divide(complex4);
      complex6.abs();
      complex2.cos();
      Complex complex11 = complex10.subtract(7.749348772180658E175);
      Complex complex12 = complex11.exp();
      complex12.ONE.log();
      complex6.sin();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex2.ZERO.add(2869.431);
      Complex complex4 = complex0.sqrt1z();
      complex1.sqrt1z();
      complex1.readResolve();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = Complex.valueOf((-2239.651044983221));
      complex6.ONE.pow(0.0);
      complex0.abs();
      complex0.pow((-2239.651044983221));
      complex5.add((-2239.651044983221));
      Complex complex7 = Complex.valueOf((-2239.651044983221), 544.0);
      complex5.NaN.readResolve();
      complex7.ONE.tanh();
      complex7.sqrt1z();
      complex7.sin();
      Complex complex8 = Complex.valueOf(0.0, (-4.392309439525734E-8));
      complex4.ZERO.sin();
      Complex complex9 = complex8.ONE.multiply(complex6);
      complex5.cosh();
      Complex complex10 = complex8.multiply((-4.392309439525734E-8));
      complex10.ZERO.cosh();
      complex4.isNaN();
      complex3.sqrt1z();
      complex9.sqrt1z();
      Complex.valueOf(544.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.203033137154554E-8);
      Complex complex1 = new Complex(5.203033137154554E-8, 0.0);
      Complex complex2 = complex0.I.add(complex1);
      complex2.NaN.pow(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.subtract(5.203033137154554E-8);
      complex4.INF.conjugate();
      complex1.ZERO.hashCode();
      Complex complex5 = complex3.sin();
      complex1.isNaN();
      complex5.getField();
      complex3.abs();
      complex1.sqrt();
      complex5.conjugate();
      complex3.getReal();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex0.INF.subtract(complex1);
      complex0.readResolve();
      Complex complex5 = complex4.createComplex(Double.NaN, 0.0);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex4.subtract(complex5);
      complex7.sinh();
      complex0.nthRoot(3096);
      complex7.pow((-1875.59474634));
      complex3.subtract((-416.036377833381));
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.multiply(17);
      Complex complex3 = complex1.ZERO.createComplex(1.0, (-688.58430083));
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex0.INF.divide(complex1);
      Complex complex4 = complex3.tan();
      complex4.ONE.sinh();
      complex2.getArgument();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.NaN.cos();
      complex3.ZERO.getField();
      complex7.I.sqrt1z();
      Complex complex8 = complex0.sin();
      complex2.sqrt1z();
      complex6.abs();
      complex3.pow(complex8);
      complex0.pow(1288.473868552478);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1426.152);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex3.NaN.negate();
      complex4.ZERO.pow(complex1);
      complex4.ZERO.pow(1426.152);
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex0.add(0.0);
      complex6.reciprocal();
      complex0.getArgument();
      Complex complex7 = complex6.ONE.multiply((-1));
      complex1.ZERO.readResolve();
      complex5.tanh();
      Complex complex8 = Complex.valueOf((-3512.61829701));
      complex8.I.add((-240.0));
      complex0.hashCode();
      complex7.multiply(complex5);
      complex0.isNaN();
      complex6.hashCode();
      complex6.NaN.log();
      Complex complex9 = Complex.valueOf(1426.152);
      complex0.hashCode();
      complex7.getReal();
      complex0.log();
      complex3.isInfinite();
      Complex complex10 = complex3.pow(complex2);
      complex10.negate();
      complex9.multiply((-1));
      complex5.abs();
      Complex complex11 = complex3.add(complex4);
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4099.921860938724));
      complex0.ONE.getField();
      complex0.I.sqrt();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.multiply(212);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.NaN.divide(complex3);
      Complex complex5 = complex1.tan();
      complex3.ZERO.multiply(Double.NaN);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.NaN.multiply(complex2);
      complex5.NaN.sinh();
      Complex complex9 = complex4.conjugate();
      complex4.ONE.acos();
      complex0.isInfinite();
      complex3.sin();
      complex9.toString();
      complex7.nthRoot(1302);
      complex4.subtract((-4099.921860938724));
      complex8.atan();
      complex2.divide(2158.0074);
      Complex.valueOf((double) 212, 0.0);
      complex6.getField();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex2.I.pow(complex0);
      Complex complex5 = complex4.NaN.sinh();
      complex0.createComplex(0.0, 2.0);
      Complex complex6 = complex1.NaN.add(complex2);
      complex6.divide(complex3);
      Complex complex7 = Complex.valueOf(3.6769498759522324E-8, 2.0);
      Complex complex8 = Complex.I;
      Complex complex9 = complex1.pow(complex8);
      Complex complex10 = complex8.I.conjugate();
      Complex complex11 = complex1.ONE.sinh();
      Complex complex12 = complex9.INF.subtract((-1017.25385));
      complex12.I.add(2.0);
      complex8.isNaN();
      complex2.isNaN();
      complex5.negate();
      Complex complex13 = complex11.multiply(complex3);
      Complex complex14 = complex13.negate();
      complex12.asin();
      complex11.getImaginary();
      Complex complex15 = complex14.ONE.exp();
      complex7.abs();
      complex10.cos();
      complex13.add(0.0);
      complex14.cos();
      complex15.acos();
      complex4.sin();
      Complex complex16 = complex11.divide(0.0);
      complex15.isInfinite();
      complex16.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.toString();
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.ONE.negate();
      complex3.ZERO.hashCode();
      Complex complex4 = Complex.valueOf(0.0, Double.NaN);
      Complex complex5 = complex1.I.pow(complex2);
      complex0.getImaginary();
      Complex complex6 = complex2.createComplex(217.3, 0.0);
      complex6.I.add(Double.NaN);
      complex3.acos();
      complex3.divide(complex4);
      complex5.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.acos();
      complex0.ZERO.acos();
      Complex complex2 = complex0.multiply((-476));
      complex2.I.subtract(complex0);
      Complex complex3 = complex2.I.reciprocal();
      complex3.NaN.sinh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.createComplex((-476), (-476));
      Complex complex7 = complex6.ONE.conjugate();
      Complex complex8 = complex5.conjugate();
      complex8.ONE.hashCode();
      Complex complex9 = complex4.ONE.pow((-1773.812));
      complex5.INF.sinh();
      complex9.INF.add((-1773.812));
      complex8.INF.asin();
      complex6.pow(complex7);
      Complex complex10 = complex8.I.log();
      complex10.I.getField();
      Complex complex11 = complex0.reciprocal();
      complex8.cos();
      complex5.equals(complex6);
      Complex complex12 = complex6.sin();
      complex4.pow(0.0);
      complex11.log();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      complex0.abs();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.INF.createComplex(1872.340431, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 1557.9307153658401);
      Complex complex4 = complex2.ONE.divide(Double.POSITIVE_INFINITY);
      complex2.getReal();
      complex1.isInfinite();
      Complex complex5 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex0.ONE.asin();
      Complex complex8 = complex3.pow(complex2);
      complex1.divide(complex2);
      Complex.valueOf((-405.021996));
      Complex complex9 = Complex.valueOf((-1294.868), 1557.9307153658401);
      complex2.isInfinite();
      complex7.pow(complex4);
      complex3.multiply((-1713));
      complex0.getField();
      complex8.hashCode();
      complex6.tanh();
      complex9.toString();
      complex2.atan();
      Complex.valueOf(5551.5, 0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double double0 = (-2094.339724248008);
      Complex complex0 = new Complex((-2094.339724248008), (-2094.339724248008));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex1.tanh();
      complex3.NaN.sqrt1z();
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = Complex.valueOf(668.5921404, Double.NaN);
      complex4.I.add((-2094.339724248008));
      complex0.ZERO.atan();
      Complex complex6 = complex5.NaN.multiply((-1681));
      try { 
        complex6.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.abs();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.ZERO.subtract(complex0);
      complex2.I.createComplex((-2702.921384), (-2702.921384));
      complex0.NaN.abs();
      complex0.sinh();
      complex2.ZERO.add(Double.NaN);
      complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0, (-1377.6575683));
      try { 
        complex3.NaN.nthRoot((-1751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,751
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-2007.286770114));
      Complex complex1 = complex0.NaN.cosh();
      complex0.I.getArgument();
      complex0.ZERO.conjugate();
      complex0.readResolve();
      Complex complex2 = complex1.pow((-2298.1392969903577));
      complex1.abs();
      complex1.cos();
      complex0.toString();
      Complex complex3 = complex1.subtract(1.5707963267948966);
      Complex complex4 = complex2.divide(complex3);
      complex0.add(complex4);
      Complex complex5 = complex0.add(Double.NaN);
      complex5.I.negate();
      Complex complex6 = complex4.atan();
      complex6.log();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(41.3386668187194, 41.3386668187194);
      complex1.I.hashCode();
      Complex.valueOf((-8.016793741945299E96), 41.3386668187194);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.NaN.sin();
      complex0.abs();
      Complex complex4 = complex3.cosh();
      complex4.ZERO.negate();
      complex4.hashCode();
      Complex complex5 = complex1.asin();
      complex5.NaN.toString();
      complex3.toString();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex7.I.multiply(1552.246230416);
      complex8.multiply(919);
      Complex complex9 = complex3.exp();
      complex3.abs();
      complex2.getField();
      complex9.add(41.3386668187194);
      Complex complex10 = complex2.cosh();
      complex10.isNaN();
      Complex complex11 = Complex.valueOf(41.3386668187194, (-1627.210125157051));
      complex5.equals(complex11);
      Complex.valueOf((-1875.373334798576), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(9.113713162029408E267, 9.113713162029408E267);
      complex0.hashCode();
      complex0.INF.nthRoot(1);
      complex0.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.acos();
      complex3.I.add(complex2);
      Complex complex4 = complex0.exp();
      complex2.INF.sqrt1z();
      Complex complex5 = complex0.subtract(9.113713162029408E267);
      Complex complex6 = Complex.valueOf((double) 1);
      complex4.ZERO.reciprocal();
      complex4.ZERO.conjugate();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.reciprocal();
      complex4.pow((-1758.53));
      complex8.hashCode();
      Complex complex9 = complex2.sqrt();
      complex9.I.sin();
      complex5.INF.sinh();
      complex5.multiply(785);
      Complex complex10 = complex6.add((double) 1);
      complex10.getArgument();
      complex5.add(9.113713162029408E267);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      complex2.hashCode();
      complex0.readResolve();
      complex0.ONE.cos();
      Complex complex3 = complex2.NaN.subtract((-2678.1));
      Complex complex4 = complex3.INF.sqrt1z();
      complex2.nthRoot(3392);
      Complex complex5 = Complex.valueOf((double) 3392, (double) 3392);
      complex4.conjugate();
      Complex complex6 = Complex.valueOf((-2113.262181398209));
      complex5.INF.multiply(complex6);
      Complex.valueOf((double) 3392, 0.0);
      complex2.ZERO.cosh();
      complex5.tanh();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.I.divide(0.0);
      Complex complex3 = complex2.INF.createComplex(0.0, 0.0);
      complex3.INF.subtract(complex1);
      complex3.I.nthRoot(69);
      complex0.getField();
      Complex complex4 = complex0.pow(0.0);
      complex4.getField();
      Complex complex5 = complex3.subtract(0.0);
      Complex complex6 = complex1.ZERO.sinh();
      complex6.ZERO.getField();
      complex3.conjugate();
      Complex complex7 = complex1.reciprocal();
      complex3.ZERO.sinh();
      complex5.toString();
      Complex complex8 = complex0.add(complex2);
      Complex.valueOf((double) 69, 1.1802241249113175E168);
      complex8.NaN.multiply(0.0);
      Complex complex9 = complex0.log();
      complex3.ZERO.add(0.0);
      Complex complex10 = complex1.pow(complex9);
      complex10.NaN.getField();
      complex4.ZERO.tan();
      Complex complex11 = complex10.sqrt();
      complex11.ONE.getArgument();
      Complex complex12 = complex4.exp();
      complex12.pow(complex2);
      complex6.hashCode();
      complex5.isNaN();
      complex11.sinh();
      complex10.log();
      complex7.multiply(0.0);
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1282.95), (-840.68186));
      complex0.INF.atan();
      complex0.toString();
      Complex complex1 = complex0.createComplex(0.0, 4251.21373661);
      complex1.ZERO.getArgument();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.reciprocal();
      complex0.INF.add(complex1);
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex3.pow(complex1);
      complex4.getField();
      complex2.isNaN();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.ZERO.conjugate();
      complex0.sqrt();
      complex0.hashCode();
      complex1.ZERO.tan();
      Complex.valueOf((-799.09071592658), 1302.855);
      complex2.hashCode();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.NaN.sqrt1z();
      complex3.add(complex1);
      complex1.NaN.multiply(complex2);
      Complex complex5 = complex2.asin();
      complex0.getReal();
      Complex complex6 = complex0.createComplex(Double.POSITIVE_INFINITY, (-19.0219410125053));
      complex6.readResolve();
      complex4.isInfinite();
      complex6.getImaginary();
      complex1.log();
      complex0.sqrt1z();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(875.962725973);
      complex1.ONE.cosh();
      complex1.ZERO.createComplex(875.962725973, (-4868.236));
      complex2.ZERO.tan();
      complex2.ZERO.getField();
      Complex complex3 = complex0.NaN.divide(complex1);
      complex3.toString();
      Complex complex4 = complex2.NaN.cosh();
      complex4.I.multiply(875.962725973);
      complex4.ONE.sqrt1z();
      Complex complex5 = complex0.sqrt1z();
      complex3.getImaginary();
      complex1.sin();
      complex2.readResolve();
      complex5.getField();
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(454.00781);
      complex0.NaN.multiply(complex1);
      Complex complex2 = complex0.ONE.sqrt();
      complex2.ONE.divide(0.0);
      complex2.INF.sin();
      int int0 = 0;
      Complex complex3 = complex0.multiply(0);
      Complex complex4 = complex0.sqrt();
      complex4.isInfinite();
      Complex complex5 = complex0.NaN.reciprocal();
      complex5.NaN.log();
      int int1 = (-649);
      try { 
        complex3.nthRoot((-649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -649
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 0.0;
      complex0.ZERO.pow(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.add(0.0);
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex0.tanh();
      complex3.I.nthRoot(1);
      Complex complex4 = complex3.ZERO.cos();
      complex4.conjugate();
      complex4.I.sin();
      complex3.I.multiply(0.0);
      try { 
        complex3.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2737.37), (-2737.37));
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(3078.94);
      Complex complex1 = complex0.multiply((-1033));
      double double0 = (-803.826555234);
      Complex complex2 = complex1.NaN.multiply((-803.826555234));
      try { 
        complex2.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.pow(complex0);
      complex0.ONE.getField();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.hashCode();
      complex2.divide(0.0);
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1191.45, 0.0);
      Complex complex1 = complex0.I.asin();
      complex1.ZERO.conjugate();
      Complex complex2 = complex0.subtract(0.0);
      complex2.NaN.readResolve();
      complex2.getReal();
      Complex complex3 = complex0.ZERO.pow(1191.45);
      complex3.NaN.sinh();
      complex0.atan();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.conjugate();
      Complex complex5 = complex0.cos();
      complex5.ZERO.abs();
      complex0.getArgument();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.log();
      complex7.ONE.subtract(155.3200686474);
      complex7.ZERO.multiply(complex5);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(2.7318417252599104E-185, 2.7318417252599104E-185);
      Complex complex1 = Complex.valueOf((-560.4257412640037), (-560.4257412640037));
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.log();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-937.168353538102), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(2805.205239979129);
      complex2.INF.abs();
      Complex complex3 = complex0.INF.atan();
      Complex.valueOf((-256.20146));
      complex3.INF.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.NaN;
      complex4.pow(complex5);
      complex1.getReal();
      List<Complex> list0 = complex0.nthRoot(887);
      assertEquals(887, list0.size());
      
      Complex complex6 = complex2.atan();
      complex6.hashCode();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.I.tan();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.ZERO.sqrt1z();
      complex10.ZERO.cos();
      assertEquals(1.0, complex10.getReal(), 0.01);
      
      complex0.isInfinite();
      complex8.getField();
      assertEquals(0.7615941559557649, complex8.getImaginary(), 0.01);
      
      Complex complex11 = complex7.cos();
      assertEquals((-6.131376346478289), complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex2.conjugate();
      assertFalse(complex2.equals((Object)complex4));
      
      Complex.valueOf(0.0);
      Complex complex13 = complex9.cos();
      Complex complex14 = complex13.divide(28.184964859);
      assertEquals(0.035479909412790375, complex14.getReal(), 0.01);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      complex3.getField();
      Complex complex15 = complex3.tan();
      assertFalse(complex15.equals((Object)complex8));
      assertSame(complex15, complex12);
      assertFalse(complex15.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.I.sin();
      assertEquals(1.1752011936438014, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.subtract(3763.5709);
      assertEquals((-3763.5709), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex3.acos();
      assertSame(complex6, complex3);
      assertTrue(complex6.equals((Object)complex2));
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1243.0);
      Complex complex1 = new Complex(1243.0);
      Complex complex2 = complex0.pow(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.multiply(1);
      Complex complex4 = complex0.I.log();
      Complex complex5 = complex3.INF.tan();
      Complex complex6 = complex3.INF.exp();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.NaN.sqrt();
      assertTrue(complex8.equals((Object)complex2));
      
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.ONE.subtract((-1083.63));
      complex0.equals(complex9);
      complex5.sinh();
      Complex complex11 = complex6.tan();
      assertSame(complex11, complex7);
      assertSame(complex11, complex8);
      assertNotSame(complex11, complex10);
      
      Complex complex12 = complex4.subtract(complex3);
      Complex complex13 = complex12.multiply(1.5579321384429932);
      assertTrue(complex3.equals((Object)complex1));
      assertEquals((-1936.5096480846405), complex13.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex12.equals((Object)complex4));
      assertEquals(2.447194080461972, complex13.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2250.368616), (-2250.368616));
      complex0.I.divide(1128.663618007);
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.ONE.negate();
      int int0 = (-1);
      try { 
        complex1.INF.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.I.nthRoot((-3601));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,601
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.INF.subtract(0.0);
      Complex complex4 = complex2.NaN.tan();
      String string0 = complex2.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex5 = complex4.ONE.multiply(complex3);
      Complex complex6 = complex1.pow(complex2);
      complex0.hashCode();
      Complex complex7 = new Complex(1.5981547034872092E-104);
      Complex complex8 = complex5.add(complex7);
      double double0 = complex8.getArgument();
      assertEquals(0.7853981633974483, double0, 0.01);
      
      Complex complex9 = Complex.valueOf(1.5981547034872092E-104, 1.5981547034872092E-104);
      Complex complex10 = complex0.tanh();
      complex10.multiply(complex3);
      complex10.isNaN();
      assertSame(complex10, complex6);
      
      double double1 = complex7.getReal();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.5981547034872092E-104, double1, 0.01);
      
      complex0.isNaN();
      Complex complex11 = complex3.multiply(1.5981547034872092E-104);
      assertNotSame(complex1, complex9);
      assertSame(complex1, complex4);
      assertTrue(complex11.equals((Object)complex3));
      assertTrue(complex3.isInfinite());
  }
}
