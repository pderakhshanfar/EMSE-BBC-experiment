/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:57:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2436.4062867), (-20.0));
      complex0.sqrt();
      Complex complex1 = complex0.tan();
      complex0.atan();
      Complex complex2 = complex1.tan();
      complex2.sqrt();
      Complex complex3 = Complex.ONE;
      complex3.nthRoot(952);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex((-273.7066), Double.POSITIVE_INFINITY);
      complex0.toString();
      complex1.multiply(3623);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3.787075915357198E11, 3.787075915357198E11);
      complex0.divide(complex1);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3.787075915357198E11, 20.0);
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = Complex.valueOf(642.83169798, 282.2026);
      Complex complex4 = Complex.NaN;
      complex4.sqrt();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex2.divide(20.0);
      complex3.divide(complex6);
      complex5.divide(3.787075915357198E11);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(841.49625, 841.49625);
      complex0.ONE.pow(841.49625);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.cos();
      complex2.NaN.hashCode();
      complex2.INF.negate();
      complex1.NaN.divide(841.49625);
      complex0.toString();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((double) 0, (-290292.7600143598));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.ONE;
      complex2.createComplex((-426.1105995633), Double.POSITIVE_INFINITY);
      complex1.sqrt();
      complex2.add(20.0);
      complex3.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.createComplex(5.162248481759758E164, Double.POSITIVE_INFINITY);
      complex1.sqrt();
      complex2.multiply(complex3);
      complex2.nthRoot(1571);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex1.cos();
      Complex complex2 = Complex.ONE;
      complex2.createComplex(5.162248481759758E164, 5.162248481759758E164);
      complex2.sqrt1z();
      Complex complex3 = new Complex(5.162248481759758E164, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.sqrt();
      complex2.add(Double.POSITIVE_INFINITY);
      complex4.sqrt1z();
      Complex complex5 = Complex.NaN;
      complex5.tan();
      Complex complex6 = new Complex((-1421.0), 121.1557937367876);
      complex6.sin();
      complex1.isNaN();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = new Complex(1.0428862571716309);
      complex1.abs();
      complex0.subtract(complex1);
      Complex complex2 = new Complex(932.2665);
      Complex complex3 = complex2.acos();
      complex1.log();
      Complex.valueOf(932.2665);
      Complex complex4 = complex0.negate();
      complex1.readResolve();
      Complex complex5 = Complex.NaN;
      complex2.divide((-3511.056620778));
      Complex.valueOf(20.0, (-1272.47561983886));
      Complex complex6 = Complex.ONE;
      complex0.negate();
      complex3.pow(complex2);
      complex4.cos();
      Complex complex7 = Complex.valueOf(20.0, 1.0428862571716309);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.pow(complex0);
      Complex complex3 = complex0.createComplex(760.7482796, (-538.1252845062239));
      complex3.sqrt1z();
      complex3.readResolve();
      complex2.sqrt1z();
      Complex complex4 = new Complex(760.7482796, (-429.9751106479073));
      Complex complex5 = complex4.divide((-429.9751106479073));
      Complex.valueOf((-0.0015272085961621946), Double.NaN);
      Complex complex6 = Complex.ONE;
      complex1.negate();
      complex6.pow(complex3);
      complex5.cos();
      Complex complex7 = Complex.I;
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cos();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.createComplex(5.162248481759758E164, Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex((-1.0));
      complex2.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((double) (-2), (-290292.7600143598));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex3.add(605.131009172427);
      complex1.sqrt1z();
      Complex complex6 = complex3.tan();
      complex1.sin();
      complex5.add(complex4);
      Complex.valueOf((double) 544, (-361.74021716821125));
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN);
      complex1.isNaN();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract((-0.0015272085961621946));
      complex1.abs();
      Complex complex3 = complex0.subtract(complex2);
      complex3.acos();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex0.log();
      Complex complex6 = Complex.valueOf(4.806078883451016E-80);
      complex0.negate();
      complex4.sqrt1z();
      complex2.multiply((-0.0015272085961621946));
      complex5.readResolve();
      Complex complex7 = new Complex((-2308.6667967), Double.NaN);
      complex7.atan();
      Complex complex8 = Complex.ONE;
      complex6.nthRoot(1);
      complex0.add((-2308.6667967));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(2074.0051, 2074.0051);
      complex0.NaN.readResolve();
      complex0.log();
      complex0.INF.negate();
      complex0.ONE.reciprocal();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = 0.5930894613265991;
      Complex complex0 = new Complex(0.5930894613265991);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex1.INF.sqrt1z();
      complex2.ZERO.add(0.5930894613265991);
      complex3.ONE.multiply(0.5930894613265991);
      complex3.ZERO.hashCode();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex2.sqrt1z();
      complex7.tan();
      complex7.INF.hashCode();
      complex0.log();
      Complex complex8 = complex1.sinh();
      complex8.multiply(3.8019036618832785E141);
      Complex complex9 = complex8.acos();
      complex9.INF.pow(1586.6383);
      complex1.acos();
      complex7.subtract(complex6);
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.createComplex(5.162248481759758E164, Double.POSITIVE_INFINITY);
      complex2.sqrt1z();
      complex3.acos();
      complex1.sqrt();
      complex0.add(5.162248481759758E164);
      complex1.ZERO.sqrt1z();
      complex3.multiply(complex0);
      Complex complex4 = Complex.NaN;
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract((-0.0015272085961621946));
      complex1.abs();
      Complex complex3 = complex0.subtract(complex2);
      complex3.acos();
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex0.log();
      Complex complex6 = Complex.valueOf(4.806078883451016E-80);
      complex0.negate();
      Complex complex7 = new Complex(Double.NaN, (-0.0015272085961621946));
      complex2.multiply((-0.0015272085961621946));
      complex5.readResolve();
      Complex.valueOf((-0.0015272085961621946));
      complex6.multiply(Double.NaN);
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.atan();
      complex3.multiply(complex2);
      complex4.add(complex0);
      complex2.tanh();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0);
      complex1.I.divide(complex0);
      Complex complex2 = Complex.ZERO;
      complex2.NaN.pow((double) 0);
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3849.728305730087), (-3849.728305730087));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.pow(400.542);
      complex2.atan();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex2.isNaN();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.4375131636754E196, (-79.418133845));
      complex0.readResolve();
      complex0.createComplex((-1.2935356683676627E7), 5.4375131636754E196);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.add((-1.2935356683676627E7));
      Complex complex3 = Complex.INF;
      complex3.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.acos();
      complex2.NaN.readResolve();
      Complex complex3 = Complex.valueOf((-1.7976931348623157E308));
      Complex complex4 = complex0.acos();
      complex4.NaN.subtract(4.806078883451016E-80);
      complex3.ONE.abs();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex5.acos();
      complex0.INF.tan();
      Complex complex7 = complex3.log();
      Complex.valueOf((-177.39464));
      Complex complex8 = complex6.negate();
      Complex complex9 = complex4.sqrt1z();
      complex9.ZERO.multiply(1.0);
      complex2.readResolve();
      complex8.equals((Object) null);
      Complex complex10 = complex7.sqrt1z();
      complex6.divide((-429.9751106479073));
      complex7.abs();
      Complex complex11 = Complex.ZERO;
      complex10.ONE.negate();
      complex4.pow(complex11);
      complex10.cos();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(5029);
      complex1.divide(complex0);
      Complex complex2 = Complex.valueOf(612.0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.add(complex1);
      complex4.exp();
      complex4.divide((-3544.54));
      complex1.tanh();
      complex3.subtract((-1.0066845803042517));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3811.422), (-3811.422));
      complex0.acos();
      complex0.cosh();
      Complex complex1 = complex0.atan();
      complex1.add(complex0);
      complex0.ONE.atan();
      Complex complex2 = complex1.acos();
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.INF.reciprocal();
      complex3.ONE.multiply((-1292.4860100560036));
      complex0.I.sqrt1z();
      Complex complex4 = Complex.valueOf(3915.56067829);
      complex2.NaN.add(complex4);
      complex1.INF.add(complex3);
      Complex complex5 = complex1.add((-1069.8363487355));
      complex1.atan();
      Complex complex6 = complex1.I.pow(315.061721);
      Complex.valueOf(2029.33931);
      Complex complex7 = complex5.ONE.reciprocal();
      Complex complex8 = complex1.acos();
      complex8.ONE.multiply(4435.0);
      complex8.INF.reciprocal();
      complex5.conjugate();
      complex7.divide(0.0);
      complex6.add(complex3);
      complex5.multiply(522);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 300.06404);
      Complex complex2 = new Complex(300.06404, 300.06404);
      Complex.valueOf(416.8334242962, Double.POSITIVE_INFINITY);
      complex0.nthRoot(780);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3811.422), (-3811.422));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.cosh();
      complex2.add(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.add(complex0);
      complex0.multiply(2458);
      complex1.negate();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.toString();
      Complex complex1 = complex0.ZERO.subtract(1740.0837415682);
      Complex complex2 = complex0.pow(1740.0837415682);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.multiply(complex3);
      complex0.divide(7.3370297995122135E-152);
      complex4.readResolve();
      complex4.subtract(complex1);
      complex1.reciprocal();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex(7.3370297995122135E-152);
      Complex complex7 = Complex.valueOf((-1644.986), 3.425518820814759);
      complex7.exp();
      Complex complex8 = complex5.log();
      Complex complex9 = complex8.multiply((-13));
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(2815.054175237, (-182.472722129278));
      complex0.NaN.createComplex(2815.054175237, 2815.054175237);
      Complex complex1 = complex0.sin();
      complex0.nthRoot(2871);
      complex1.readResolve();
      complex0.toString();
      Complex complex2 = complex1.tanh();
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = (-1652.863);
      Complex complex0 = Complex.valueOf((-1652.863), (-1652.863));
      complex0.ZERO.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.pow((-1652.863));
      complex1.I.createComplex((-1652.863), (-1652.863));
      Complex complex4 = complex1.reciprocal();
      complex3.hashCode();
      complex0.equals("(");
      Complex complex5 = complex3.negate();
      complex5.abs();
      complex4.readResolve();
      Complex complex6 = complex4.tanh();
      complex6.INF.acos();
      Complex complex7 = complex4.multiply(complex6);
      complex7.I.multiply(complex2);
      complex7.INF.multiply(complex4);
      complex7.I.getArgument();
      complex4.NaN.tanh();
      complex1.sin();
      try { 
        complex6.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-769.196695), 300.06404);
      complex1.divide(complex0);
      Complex.valueOf(416.8334242962, (-769.196695));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3811.422), (-3811.422));
      Complex complex1 = complex0.acos();
      complex1.I.cosh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.cosh();
      complex2.multiply(1);
      Complex complex4 = complex2.acos();
      complex3.sqrt();
      complex3.add(0.0);
      complex0.tan();
      complex0.add(complex4);
      Complex.valueOf(75.611485802959, 75.611485802959);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-4264.505));
      Complex complex2 = Complex.valueOf((-4576.8598321), 864.0);
      complex1.readResolve();
      complex0.createComplex(4.85165184E8, 864.0);
      Complex complex3 = complex2.sqrt1z();
      complex3.multiply(1045);
      complex2.acos();
      Complex complex4 = complex3.add(1587.93272070872);
      complex3.tan();
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.INF.negate();
      complex0.reciprocal();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.INF.multiply((-417.7));
      complex4.ONE.negate();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.multiply(17);
      complex5.INF.log();
      complex6.multiply(17);
      complex1.I.exp();
      complex6.negate();
      Complex complex7 = complex5.exp();
      complex2.exp();
      complex5.getField();
      complex0.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3811.422), (-3811.422));
      complex0.acos();
      Complex complex1 = complex0.tanh();
      complex1.exp();
      Complex.valueOf((-3811.422));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.atan();
      complex3.add(complex1);
      complex1.exp();
      complex0.multiply(2458);
      complex2.abs();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
      Complex complex1 = Complex.valueOf((-2256.0), (-2256.0));
      Complex complex2 = (Complex)complex1.I.readResolve();
      complex1.ZERO.createComplex((-2256.0), 3375.2078228);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex1.divide((-3000.0779748));
      complex2.readResolve();
      complex3.subtract(complex4);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex((-3673.3531905482364));
      Complex complex8 = Complex.NaN;
      complex8.exp();
      complex5.log();
      complex2.multiply(12);
      Complex complex9 = Complex.ZERO;
      complex9.multiply(1626);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3811.422), (-3811.422));
      Complex complex1 = complex0.acos();
      complex1.NaN.toString();
      Complex complex2 = complex0.tanh();
      complex2.exp();
      Complex.valueOf((-3811.422));
      complex0.cosh();
      Complex complex3 = complex0.atan();
      complex3.add(complex2);
      complex2.exp();
      complex0.multiply(2458);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf((-3653.77855), 8.97733227022588);
      complex0.readResolve();
      Complex complex3 = complex1.createComplex(1714.95, Double.POSITIVE_INFINITY);
      complex3.sqrt1z();
      complex2.nthRoot(1);
      complex2.multiply(2480);
      Complex complex4 = complex2.tan();
      complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.getImaginary();
      Complex complex2 = Complex.valueOf((-20.0));
      complex2.readResolve();
      Complex complex3 = Complex.INF;
      complex3.toString();
      complex1.subtract((-20.0));
      Complex complex4 = Complex.valueOf(Double.NaN);
      complex4.pow((-238.6566562753457));
      Complex complex5 = complex1.multiply(2.0);
      complex3.pow((-238.6566562753457));
      Object object0 = new Object();
      Complex complex6 = Complex.INF;
      Object object1 = complex5.readResolve();
      complex6.equals(object1);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.divide(1740.0837415682);
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex3 = Complex.INF;
      complex3.ONE.toString();
      Complex complex4 = complex3.ZERO.subtract(1740.0837415682);
      complex3.pow(1740.0837415682);
      Complex complex5 = complex2.multiply(0.0);
      complex5.pow(1740.0837415682);
      Object object0 = new Object();
      complex4.equals(object0);
      complex1.asin();
      complex1.add(0.0);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
      complex0.cosh();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.add(complex0);
      Complex complex3 = complex2.INF.divide(1740.0837415682);
      complex0.exp();
      complex1.multiply((-483));
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.INF.multiply(1354490506);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.pow((double) 1354490506);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = Complex.valueOf((-7.315860999413894E129));
      complex5.ZERO.reciprocal();
      complex3.INF.tanh();
      complex6.ZERO.cosh();
      Complex complex7 = complex6.ZERO.asin();
      complex7.ONE.cos();
      complex2.ONE.divide(complex5);
      complex6.ONE.exp();
      complex2.NaN.divide((-1442.1407569083192));
      Complex complex8 = complex4.NaN.pow(1399.05199);
      complex8.INF.divide((-7.315860999413894E129));
      complex8.multiply(complex3);
      // Undeclared exception!
      complex2.nthRoot(2144643190);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = Complex.valueOf(1740.0837415682, 1740.0837415682);
      complex0.getImaginary();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = complex2.exp();
      complex6.multiply(7);
      Complex complex7 = Complex.valueOf(1740.0837415682);
      complex1.ONE.toString();
      complex0.multiply(complex3);
      Complex complex8 = complex7.divide(2126.36944404);
      complex4.readResolve();
      Complex complex9 = complex6.subtract(complex8);
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.reciprocal();
      complex7.sqrt();
      complex1.exp();
      complex8.reciprocal();
      complex9.multiply(2458);
      Complex complex12 = complex11.multiply(1376);
      complex12.I.subtract((-924.001));
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-755.0344559));
      complex1.nthRoot(1);
      Complex complex2 = Complex.valueOf((-5.672261759108003E-257));
      Complex complex3 = complex2.reciprocal();
      complex2.sqrt1z();
      complex2.nthRoot(1);
      Complex complex4 = complex3.createComplex((-2.6489990728664908E-8), (-2994.35111));
      Complex complex5 = complex4.acos();
      complex4.add((-2.6489990728664908E-8));
      complex5.tan();
      Complex complex6 = Complex.INF;
      complex6.add(complex5);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-755.0344559));
      complex1.nthRoot(1);
      Complex complex2 = Complex.valueOf((-5.672261759108003E-257));
      Complex complex3 = complex2.reciprocal();
      complex2.sqrt1z();
      complex2.nthRoot(1);
      Complex complex4 = complex3.createComplex((-2.6489990728664908E-8), (-2994.35111));
      complex3.pow((-1.0));
      complex4.tanh();
      complex1.pow(complex2);
      complex4.hashCode();
      complex1.isInfinite();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.valueOf(0.6486412663436919, (-6.602926393514549E-8));
      // Undeclared exception!
      complex6.nthRoot(1369859013);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-755.0344559));
      complex1.nthRoot(1);
      Complex complex2 = Complex.valueOf((-5.672261759108003E-257));
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.sqrt1z();
      complex2.nthRoot(1);
      complex2.createComplex((-2.6489990728664908E-8), (-5.672261759108003E-257));
      complex0.sqrt1z();
      complex0.multiply(1957);
      complex3.acos();
      Complex complex5 = complex4.add((-2.6489990728664908E-8));
      complex4.tan();
      complex5.add(complex2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.5758276));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.tanh();
      complex2.NaN.sinh();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.asin();
      complex4.acos();
      complex0.getImaginary();
      complex1.getField();
      complex3.multiply(complex0);
      complex6.reciprocal();
      complex5.divide(341.7730397383284);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3811.422), (-3811.422));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.pow((-2156.17588));
      Complex complex3 = complex1.multiply(1.7976931348623157E308);
      Complex complex4 = complex2.cosh();
      complex1.hashCode();
      Complex complex5 = complex1.cosh();
      complex4.abs();
      Complex complex6 = Complex.INF;
      complex6.equals(complex4);
      Complex complex7 = complex6.reciprocal();
      complex3.add(complex6);
      Complex complex8 = complex7.exp();
      complex7.multiply(7);
      Complex complex9 = Complex.valueOf(2.0);
      Complex complex10 = complex4.multiply(complex9);
      Complex complex11 = complex8.divide((-20.0));
      complex6.readResolve();
      Complex complex12 = complex0.subtract(complex10);
      Complex complex13 = Complex.valueOf((-3811.422), (-2.424921068356201E7));
      complex13.reciprocal();
      complex5.sqrt();
      complex12.exp();
      complex9.multiply(919);
      complex11.multiply(919);
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.5758276));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.NaN.sinh();
      complex3.I.getField();
      Complex complex5 = complex4.pow((-1.0));
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex2.pow(complex1);
      complex7.hashCode();
      complex6.isInfinite();
      complex1.divide(complex0);
      Complex.valueOf(Double.NaN, 2.0);
      complex6.nthRoot(1369859013);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.add(complex4);
      complex0.exp();
      complex5.multiply(1735);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.pow(1040.1847851461666);
      Complex complex3 = complex2.NaN.multiply(0.07250232994556427);
      Complex complex4 = complex3.cosh();
      complex1.I.hashCode();
      complex1.cosh();
      complex2.readResolve();
      Complex complex5 = complex2.createComplex(3592.254456118999, 3375.2078228);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.multiply(1);
      complex7.acos();
      complex7.add(1.0);
      complex6.tan();
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(1.5701510906219482, 590.751575);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = new Complex(1.5701510906219482);
      Complex complex3 = complex0.ONE.add(complex2);
      Complex complex4 = complex2.ZERO.multiply(complex0);
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex5.ZERO.exp();
      Complex.valueOf(590.751575, (-1626.5));
      Complex complex7 = complex0.multiply(complex2);
      complex7.ZERO.createComplex(2.0, 3.0482348236054953E-83);
      complex7.divide(1.5701510906219482);
      Complex complex8 = complex5.divide(complex7);
      complex3.getArgument();
      complex4.getArgument();
      Complex complex9 = complex6.cosh();
      Complex complex10 = complex4.pow(complex3);
      Complex complex11 = Complex.ZERO;
      complex10.ONE.pow(complex11);
      complex2.getField();
      complex8.subtract(1886.82);
      complex9.cos();
      complex5.sqrt();
      Complex.valueOf((-511.12142325411), 1886.82);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.INF.atan();
      complex1.divide(Double.NaN);
      complex0.readResolve();
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex6 = complex2.sqrt();
      complex4.multiply((-486));
      complex5.isNaN();
      Complex complex7 = complex4.sin();
      complex2.sqrt();
      complex7.log();
      complex3.subtract(1332.13620968);
      complex6.pow(2151.8201);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3592.254456118999));
      complex0.ZERO.cosh();
      complex0.atan();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.atan();
      complex2.add(complex1);
      complex1.exp();
      complex1.multiply(59);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.5758276));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.tanh();
      complex2.NaN.sinh();
      complex3.I.getField();
      complex2.ZERO.pow((-3596.5758276));
      complex1.I.getArgument();
      complex0.ONE.subtract(complex2);
      complex0.getReal();
      complex1.toString();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.cosh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.pow(complex0);
      complex1.hashCode();
      complex3.isInfinite();
      complex0.divide(complex1);
      Complex.valueOf((-796.728475), (-796.728475));
      complex1.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.07250232994556427);
      Complex complex2 = complex1.cosh();
      complex1.hashCode();
      Complex complex3 = complex0.cosh();
      complex1.abs();
      complex1.equals(complex0);
      complex0.reciprocal();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex2.exp();
      Complex complex6 = complex4.multiply((-928));
      Complex.valueOf((double) 7);
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex1.divide(416.8334242962);
      complex6.readResolve();
      complex7.subtract(complex6);
      Complex complex9 = Complex.ZERO;
      complex9.sqrt();
      complex3.multiply(7);
      complex8.isNaN();
      Complex complex10 = complex9.sin();
      complex10.sqrt();
      complex2.log();
      complex8.subtract(0.0);
      complex6.pow((-0.9999999113289163));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0);
      complex0.divide(complex1);
      Complex complex2 = Complex.valueOf((double) 0, 416.8334242962);
      complex2.pow(6.559231724168058E-5);
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3811.422), (-3811.422));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex2.INF.sqrt1z();
      Complex.valueOf((-3811.422), (-3811.422));
      complex1.sinh();
      complex1.getArgument();
      Complex complex5 = complex3.subtract(5.792797531);
      complex4.sinh();
      Complex complex6 = complex3.reciprocal();
      complex1.subtract(complex5);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex7.acos();
      complex6.getImaginary();
      complex3.getField();
      complex2.multiply(complex4);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(2055);
      Complex complex2 = complex0.ZERO.atan();
      complex2.getImaginary();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex3.pow(0.0);
      Complex complex6 = Complex.valueOf((-28.0), 0.0);
      Complex complex7 = complex5.divide(complex3);
      Complex complex8 = complex2.conjugate();
      complex1.getField();
      complex3.hashCode();
      complex0.abs();
      Object object0 = new Object();
      Complex complex9 = Complex.valueOf((-4749.2385));
      complex8.equals(complex0);
      complex4.cos();
      complex9.nthRoot(970);
      complex7.negate();
      complex4.negate();
      complex4.cosh();
      Complex complex10 = complex2.divide(complex6);
      Complex complex11 = complex2.acos();
      complex11.divide((-4749.2385));
      complex10.pow(5.672261759108003E-257);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 0;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0);
      complex1.divide(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(0.3956514596939087);
      Complex complex3 = Complex.ZERO;
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-755.0344559));
      complex1.nthRoot(1);
      Complex complex2 = Complex.valueOf((-5.672261759108003E-257));
      Complex complex3 = complex2.reciprocal();
      complex2.sqrt1z();
      complex2.nthRoot(1);
      Complex complex4 = complex3.createComplex((-2.6489990728664908E-8), (-2994.35111));
      Complex complex5 = complex3.pow((-1.0));
      Complex complex6 = complex0.tanh();
      complex1.pow(complex2);
      complex4.hashCode();
      complex1.isInfinite();
      complex6.divide(complex5);
      Complex complex7 = Complex.valueOf(0.6486412663436919, (-6.602926393514549E-8));
      // Undeclared exception!
      complex7.nthRoot(1369859013);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex1.I.readResolve();
      complex1.negate();
      complex1.getReal();
      Complex.valueOf(0.0, (-1357.6557386632624));
      complex4.negate();
      complex2.reciprocal();
      Complex complex5 = complex3.log();
      complex5.pow((-2.990535475079021E-239));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(2433.0380981, 1.3703391844683932E-8);
      Complex complex1 = complex0.NaN.atan();
      complex0.hashCode();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.I.pow(complex2);
      Complex complex5 = complex3.subtract(complex1);
      double double0 = 1411.0496869553;
      Complex complex6 = complex5.ZERO.createComplex(1.3703391844683932E-8, 1411.0496869553);
      Complex complex7 = complex6.ONE.multiply(2433.0380981);
      complex0.pow(complex6);
      Complex.valueOf(1411.0496869553, 2433.0380981);
      Complex complex8 = complex2.tan();
      complex8.ONE.subtract(1411.0496869553);
      complex6.ZERO.asin();
      complex7.ZERO.readResolve();
      complex0.getReal();
      complex4.getReal();
      try { 
        complex5.nthRoot((-455));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -455
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-28.0), (-28.0));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.multiply((-28.0));
      complex1.NaN.multiply(2187.89);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.NaN.cosh();
      complex4.I.multiply(complex3);
      complex4.I.getArgument();
      Complex complex5 = complex3.ZERO.acos();
      complex0.ONE.negate();
      Complex complex6 = complex2.pow(complex0);
      complex6.I.add(1.149869441986084);
      complex6.INF.sqrt();
      complex2.getImaginary();
      Complex complex7 = complex2.subtract(0.0);
      complex7.abs();
      complex7.getField();
      Complex complex8 = complex2.pow(complex1);
      Complex complex9 = complex0.sin();
      complex0.abs();
      Complex complex10 = complex3.pow(0.0);
      complex10.I.cosh();
      complex10.I.atan();
      complex9.toString();
      complex5.abs();
      Complex complex11 = complex8.conjugate();
      complex11.isInfinite();
      complex5.nthRoot(549);
      Complex.valueOf((-176.8158678507));
      complex1.getArgument();
      complex10.divide(1.5707963267948966);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-1064.262));
      complex0.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.exp();
      complex0.equals(complex2);
      complex1.NaN.hashCode();
      Complex complex4 = complex1.ZERO.cosh();
      Complex complex5 = complex3.subtract((-1064.262));
      complex5.I.atan();
      Complex complex6 = complex3.sqrt();
      complex1.isInfinite();
      Complex complex7 = complex1.exp();
      complex7.INF.divide(complex4);
      Complex complex8 = complex3.cos();
      complex8.add(complex2);
      Complex complex9 = complex6.cosh();
      complex9.asin();
      Complex.valueOf((-1064.262), (-1064.262));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-780.0));
      complex0.isNaN();
      complex0.isInfinite();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex2.ONE.asin();
      complex1.ONE.subtract((-780.0));
      complex2.divide((-780.0));
      complex2.tanh();
      complex0.readResolve();
      complex3.getImaginary();
      complex4.add(Double.NaN);
      complex0.sin();
      complex1.cosh();
      complex2.tanh();
      complex4.sqrt1z();
      Complex.valueOf(1649.6624651270745);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex1.NaN.atan();
      complex0.I.pow(complex1);
      Complex complex2 = complex0.sin();
      complex0.INF.nthRoot(1);
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.atan();
      complex5.ONE.getField();
      Complex complex6 = complex0.pow(complex2);
      complex6.asin();
      Complex complex7 = complex5.asin();
      complex5.INF.hashCode();
      Complex complex8 = complex5.sqrt();
      complex8.isInfinite();
      complex4.nthRoot(1);
      complex3.ZERO.pow(1.0256131352582533E261);
      complex0.multiply(0.0);
      complex0.I.pow(complex3);
      Complex complex9 = Complex.valueOf(0.0, (double) 1);
      complex2.add(complex9);
      complex7.toString();
      complex5.sqrt();
      complex3.sqrt1z();
      complex1.tanh();
      complex4.subtract(1009.7431676);
      complex1.getImaginary();
      complex9.cos();
      complex7.createComplex(1.8609623908996582, (-3418.025781222));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.INF.nthRoot(265);
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.INF.abs();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = Complex.valueOf((-136.1242), 47.4016759811);
      complex4.I.acos();
      complex3.ONE.toString();
      Complex complex5 = complex3.ZERO.exp();
      complex5.INF.pow(complex3);
      Complex complex6 = complex5.ONE.sqrt();
      complex6.ONE.getArgument();
      complex5.INF.abs();
      complex0.isNaN();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      complex1.I.getField();
      complex1.NaN.add(0.0);
      complex0.getArgument();
      Complex complex2 = complex1.sin();
      complex1.INF.hashCode();
      complex2.getField();
      complex2.I.sinh();
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex3.NaN.sqrt1z();
      complex3.NaN.atan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf(728.18156);
      Complex complex7 = complex6.NaN.cosh();
      complex7.NaN.getField();
      Complex complex8 = complex0.cos();
      complex8.NaN.add(0.0);
      Complex complex9 = complex8.exp();
      complex7.cos();
      complex9.NaN.divide(Double.NaN);
      complex5.subtract(complex7);
      complex4.cos();
      complex1.pow(complex6);
      complex6.exp();
      Complex complex10 = Complex.valueOf(728.18156, (-608.975928156));
      complex3.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(5.792797531);
      complex0.ZERO.toString();
      complex0.readResolve();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.subtract(complex1);
      complex3.ONE.abs();
      complex2.ONE.getField();
      complex2.INF.getArgument();
      Complex complex4 = complex2.pow(5.792797531);
      complex4.subtract(0.29981517791748047);
      complex1.getReal();
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      complex1.I.sqrt1z();
      Complex complex2 = complex1.INF.add((-2024.859371));
      complex2.ONE.tan();
      complex1.NaN.tanh();
      complex0.isNaN();
      complex1.NaN.acos();
      Complex complex3 = complex2.subtract(Double.POSITIVE_INFINITY);
      complex3.INF.add((-2024.859371));
      Complex.valueOf((-3783.31708));
      complex0.subtract(2.0);
      Complex complex4 = complex1.log();
      complex2.add(2.0);
      complex4.cosh();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-548.17186), 0.0);
      complex0.atan();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(642.83169798);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.INF.sinh();
      complex2.I.tan();
      Complex complex3 = complex0.INF.sinh();
      complex0.INF.abs();
      Complex complex4 = complex1.INF.subtract(1460.228);
      Complex.valueOf((-2246.609));
      Complex complex5 = complex0.NaN.acos();
      complex1.sin();
      complex5.sqrt1z();
      complex4.readResolve();
      Complex complex6 = Complex.valueOf(2587.5);
      complex0.readResolve();
      Complex complex7 = complex0.pow(complex4);
      complex7.INF.abs();
      Complex complex8 = complex1.asin();
      complex3.getImaginary();
      complex3.toString();
      complex8.tan();
      Complex complex9 = Complex.valueOf(1460.228);
      complex3.divide(complex9);
      complex1.isInfinite();
      complex6.sinh();
      Complex complex10 = complex9.createComplex(0.0, 0.0);
      complex10.tanh();
      Complex.valueOf((-2013.901), 1404.327838);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.sqrt();
      complex2.sqrt1z();
      complex0.abs();
      complex0.getArgument();
      complex1.getReal();
      Complex complex3 = complex1.add(1.0);
      Complex.valueOf(61.1485);
      complex3.sinh();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex((-2103.2), 2100.3756);
      Complex complex1 = complex0.NaN.divide(0.0);
      complex1.ONE.createComplex(4806.26929214, Double.NaN);
      complex0.cosh();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      double double0 = 1464.229303597864;
      complex1.ONE.subtract(complex0);
      Complex complex2 = complex0.ONE.multiply(1464.229303597864);
      Complex complex3 = complex2.INF.multiply(complex1);
      complex0.I.sqrt();
      complex3.pow((-921.83558379196));
      Complex complex4 = complex0.multiply(0.0);
      complex4.I.getField();
      // Undeclared exception!
      complex1.ONE.nthRoot(6423);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.divide(2.0);
      complex3.NaN.cosh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.divide(0.0);
      complex1.createComplex(2554.243, 2554.243);
      complex1.getArgument();
      Complex.valueOf((-5332.0), 2554.243);
      Complex complex8 = complex2.divide(complex5);
      complex5.tan();
      complex7.add(complex8);
      complex6.negate();
      complex4.toString();
      complex4.exp();
      complex6.getArgument();
      Complex complex9 = complex5.divide(complex3);
      complex4.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 6.283185307179586);
      Complex complex2 = complex0.divide(2298.299);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.asin();
      complex4.getField();
      complex1.ZERO.negate();
      complex4.isInfinite();
      Complex complex5 = Complex.valueOf(2298.299, 2298.299);
      Complex complex6 = complex0.pow(complex5);
      complex6.ONE.conjugate();
      Complex complex7 = complex6.INF.acos();
      complex7.hashCode();
      complex1.isNaN();
      complex1.pow(2298.299);
      complex1.createComplex(2298.299, (-2012.7));
      complex7.sin();
      complex7.add(complex0);
      complex5.equals(complex1);
      complex3.log();
      Complex.valueOf(737.464775057241, 737.464775057241);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2507.5));
      Complex complex1 = complex0.ONE.pow(797.02739104671);
      complex1.tan();
      Complex complex2 = complex0.pow(797.02739104671);
      Complex complex3 = complex0.conjugate();
      complex1.toString();
      Complex complex4 = complex3.negate();
      complex3.ZERO.sqrt1z();
      complex3.I.conjugate();
      complex0.ZERO.abs();
      Complex complex5 = complex4.INF.subtract(complex3);
      complex4.toString();
      Complex complex6 = complex5.sin();
      complex2.subtract(0.0);
      complex3.atan();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = Complex.NaN;
      complex0.NaN.add(complex2);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex0.multiply(802.0768540583042);
      complex7.INF.sin();
      Complex complex8 = Complex.valueOf(413.09673401656863);
      complex8.NaN.multiply((-1233.15288915955));
      Complex complex9 = complex0.ONE.sin();
      Complex.valueOf(0.0);
      complex6.getReal();
      Complex complex10 = complex8.subtract(complex5);
      complex9.isNaN();
      complex9.cosh();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0);
      complex1.I.divide(complex0);
      Complex complex2 = Complex.valueOf((double) 0, (double) 0);
      complex2.NaN.pow((double) 0);
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(105.333856);
      complex0.I.nthRoot(1);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex2.ONE.nthRoot(1);
      complex2.ONE.createComplex(1905.0, 1905.0);
      complex0.pow(105.333856);
      Complex complex3 = complex1.I.tanh();
      complex3.INF.pow(complex1);
      complex3.ONE.hashCode();
      complex0.isInfinite();
      complex3.divide(complex0);
      Complex.valueOf(0.0, (-796.728475));
      try { 
        complex2.nthRoot((-1468));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,468
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(3939.46971217);
      Complex complex1 = complex0.ONE.exp();
      complex1.ZERO.getArgument();
      Complex complex2 = complex1.INF.atan();
      complex0.readResolve();
      Complex complex3 = complex0.sqrt1z();
      complex0.INF.subtract(0.0);
      complex3.ZERO.getField();
      complex0.INF.createComplex(258.4607, 0.0);
      Complex complex4 = complex3.I.multiply(2242);
      complex4.NaN.acos();
      complex0.getImaginary();
      complex0.equals(complex1);
      complex2.ZERO.pow(258.4607);
      Complex complex5 = complex2.createComplex((-4059.4), 0.0);
      complex4.ZERO.abs();
      complex1.isNaN();
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex4.negate();
      complex4.getArgument();
      Complex complex8 = complex7.sinh();
      complex6.readResolve();
      complex5.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.tanh();
      complex1.INF.pow(2.0);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex1.ONE.multiply(0);
      complex4.hashCode();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = Complex.valueOf((double) 0);
      complex6.NaN.hashCode();
      complex2.ZERO.multiply(938);
      complex6.ZERO.subtract(1.2567331790924072);
      complex5.abs();
      complex0.subtract(1.7853981633974483);
      complex3.pow(1.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.conjugate();
      Complex complex1 = complex0.sqrt1z();
      complex1.readResolve();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf((-798.8), (-798.8));
      Complex complex3 = complex2.INF.subtract(2.0);
      complex3.ZERO.createComplex(4.267089756924666E-8, (-798.8));
      Complex complex4 = complex2.multiply(1487.04840337);
      complex4.ONE.log();
      complex0.reciprocal();
      complex1.sqrt();
      Complex complex5 = complex1.acos();
      complex5.ZERO.negate();
      complex0.tan();
      complex0.nthRoot(1182);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex1.multiply(complex0);
      complex0.I.reciprocal();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.ONE.cos();
      complex0.createComplex(2216.705, 0.0);
      complex0.asin();
      complex0.getArgument();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3596.5758276));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.I.sqrt1z();
      complex2.tanh();
      complex2.ZERO.pow((-3596.5758276));
      complex1.I.getArgument();
      int int0 = 0;
      complex0.ONE.subtract(complex2);
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(2055);
      Complex complex2 = complex0.ZERO.atan();
      complex2.I.subtract((double) 2055);
      complex0.sinh();
      Complex complex3 = complex1.reciprocal();
      complex3.I.subtract(complex0);
      Complex complex4 = complex3.asin();
      complex4.NaN.acos();
      complex1.getImaginary();
      complex4.getField();
      complex4.multiply(complex0);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf((-2256.0), (-2256.0));
      complex2.I.readResolve();
      complex2.ZERO.createComplex((-2256.0), 3375.2078228);
      Complex complex3 = complex0.sqrt1z();
      complex3.ONE.multiply(1);
      Complex complex4 = complex1.acos();
      complex4.ZERO.add(3375.2078228);
      Complex complex5 = complex1.tan();
      complex5.add(complex1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1325.17939, 1325.17939);
      Complex complex1 = Complex.valueOf(1325.17939);
      complex1.hashCode();
      complex0.ZERO.pow(complex1);
      Complex complex2 = complex0.NaN.negate();
      complex2.ONE.abs();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.valueOf(1325.17939, 1325.17939);
      complex4.ONE.sin();
      complex4.INF.conjugate();
      Complex complex5 = complex0.tanh();
      complex5.NaN.acos();
      Complex.valueOf(1.0, 20.0);
      Complex complex6 = complex5.INF.pow((-1352.07));
      Complex complex7 = complex5.I.divide(complex0);
      Complex complex8 = complex6.INF.sqrt();
      complex0.isNaN();
      Complex complex9 = complex6.INF.reciprocal();
      Complex complex10 = Complex.I;
      complex7.NaN.subtract(complex10);
      Complex complex11 = complex6.subtract(20.0);
      complex3.add(complex9);
      complex3.getArgument();
      Complex complex12 = complex8.add(complex3);
      Complex complex13 = complex12.multiply(complex11);
      complex13.ZERO.getArgument();
      complex9.sqrt();
      complex7.multiply(1.0);
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(18.70178596);
      complex0.getArgument();
      Complex complex1 = complex0.add(18.70178596);
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.INF.sin();
      complex2.NaN.reciprocal();
      complex0.getArgument();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.sqrt1z();
      complex0.toString();
      complex1.atan();
      complex1.INF.cosh();
      Complex complex6 = complex0.NaN.sin();
      complex6.ONE.abs();
      Complex complex7 = complex2.acos();
      complex7.NaN.tanh();
      complex7.getImaginary();
      Complex complex8 = Complex.valueOf(2473.271939977191, (-525.898298154));
      complex4.NaN.atan();
      Complex complex9 = complex4.add(complex1);
      complex9.NaN.sin();
      complex2.equals(complex5);
      complex1.sqrt1z();
      complex8.add(complex9);
      Complex complex10 = Complex.valueOf((-958.45105), 0.056018441915512085);
      complex3.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.atan();
      complex0.toString();
      complex2.ZERO.getArgument();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.sqrt1z();
      complex0.ONE.cos();
      complex4.ONE.createComplex(0.0, 2322.2470027704);
      complex4.ZERO.abs();
      Complex complex5 = complex2.multiply(0);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.ONE.log();
      complex6.sqrt();
      Complex complex8 = complex3.add(complex5);
      complex1.abs();
      complex1.toString();
      complex5.isNaN();
      complex8.asin();
      complex8.ZERO.atan();
      Complex complex9 = complex7.createComplex((-1718.0), (-276.848269855));
      complex9.NaN.getField();
      complex8.add(complex2);
      Complex complex10 = complex0.add(complex6);
      complex10.INF.tanh();
      complex1.reciprocal();
      complex1.atan();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.divide(1740.0837415682);
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex3 = complex0.sqrt1z();
      complex3.ONE.toString();
      Complex complex4 = complex3.ZERO.subtract(1740.0837415682);
      complex3.pow(1740.0837415682);
      Complex complex5 = complex2.NaN.divide(0.0);
      complex2.multiply(0.0);
      complex1.asin();
      complex5.isInfinite();
      complex4.negate();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex1.ZERO.pow((-20.0));
      complex2.I.hashCode();
      Complex complex3 = complex1.I.subtract(complex0);
      complex3.INF.add(complex2);
      Complex complex4 = complex3.add(complex1);
      complex4.ONE.cosh();
      complex1.ZERO.abs();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = Complex.valueOf(1103.7364117302332, 6.28857);
      complex1.equals(complex5);
      complex0.getReal();
      complex1.ZERO.sinh();
      complex5.abs();
      Complex complex7 = complex6.ZERO.createComplex(0.0, (-3047.714));
      complex7.INF.multiply(965);
      Complex complex8 = complex0.sinh();
      complex8.NaN.add(2146.28317);
      Complex complex9 = complex5.acos();
      complex9.NaN.sqrt();
      Complex complex10 = complex6.sqrt1z();
      complex10.ONE.cosh();
      complex6.sqrt();
      Complex.valueOf((-3047.714));
      complex1.subtract(complex9);
      complex3.subtract(0.0);
      complex3.isInfinite();
      Complex.valueOf(2808.8440699679936);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex.valueOf(2.0);
      Complex complex3 = complex0.ZERO.pow(2.0);
      Complex complex4 = complex3.ZERO.sin();
      complex2.ONE.tan();
      complex0.readResolve();
      complex1.acos();
      complex4.INF.sin();
      Complex complex5 = complex4.multiply((-320));
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3630.0279846992375), (-9.45487863616303E-8));
      Complex complex1 = complex0.NaN.tan();
      complex0.getImaginary();
      complex0.isNaN();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.createComplex((-632.07182768303), (-9.45487863616303E-8));
      Complex complex4 = complex3.INF.divide((-632.07182768303));
      Complex complex5 = complex0.NaN.sqrt1z();
      complex5.NaN.sqrt();
      complex5.I.tan();
      Complex complex6 = complex0.multiply((-9.45487863616303E-8));
      Complex complex7 = complex0.divide(complex1);
      complex7.ONE.multiply((-2.4892716912));
      Complex complex8 = complex7.I.sqrt();
      complex8.NaN.conjugate();
      complex8.ZERO.nthRoot(1132);
      complex0.toString();
      complex1.isNaN();
      Complex complex9 = complex4.cos();
      complex1.log();
      Complex.valueOf((-3630.0279846992375), (-632.07182768303));
      complex5.getReal();
      complex6.pow(3.537475449241181E-268);
      complex9.conjugate();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2979.796578614261);
      Complex complex1 = Complex.INF;
      complex1.I.cos();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ONE.add(2979.796578614261);
      Complex complex4 = complex3.ZERO.createComplex(2979.796578614261, 724.93);
      complex2.I.getArgument();
      complex4.INF.pow(724.93);
      complex4.NaN.atan();
      complex2.NaN.exp();
      complex1.ZERO.hashCode();
      complex0.add(complex1);
      Complex.valueOf((-2.749127978087685E126));
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tan();
      complex0.ONE.multiply(complex1);
      Complex complex2 = Complex.valueOf(1039.3695714163);
      complex2.ONE.sqrt();
      Complex.valueOf(1039.3695714163);
      Complex complex3 = complex0.divide(complex2);
      complex3.ONE.readResolve();
      Complex complex4 = complex3.tan();
      complex4.INF.getArgument();
      complex0.divide(complex1);
      complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.pow(1040.1847851461666);
      Complex complex3 = complex2.NaN.multiply(0.07250232994556427);
      Complex complex4 = complex3.cosh();
      complex1.I.hashCode();
      Complex complex5 = complex1.cosh();
      double double0 = complex5.abs();
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = complex5.equals(complex0);
      assertFalse(boolean0);
      
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex1.add(complex0);
      Complex complex8 = complex7.INF.exp();
      Complex complex9 = complex7.NaN.multiply(7);
      Complex complex10 = Complex.valueOf((-1982.91309832));
      Complex complex11 = complex10.I.multiply(complex3);
      Complex complex12 = complex11.ONE.divide(1.0);
      complex10.readResolve();
      Complex complex13 = complex7.subtract(complex1);
      Complex complex14 = complex13.I.sqrt();
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex14.getImaginary(), 0.01);
      assertEquals(0.7071067811865476, complex14.getReal(), 0.01);
      
      Complex complex15 = complex5.multiply(7);
      assertTrue(complex5.equals((Object)complex12));
      assertEquals(7.0, complex15.getReal(), 0.01);
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      
      complex9.isNaN();
      assertSame(complex9, complex11);
      
      Complex complex16 = complex4.sin();
      Complex complex17 = complex8.sqrt();
      Complex complex18 = complex17.log();
      assertSame(complex18, complex6);
      
      Complex complex19 = complex8.subtract(1.0);
      assertSame(complex19, complex3);
      assertFalse(complex8.equals((Object)complex13));
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex20 = complex2.pow(0.0);
      assertSame(complex20, complex16);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3811.422), (-3811.422));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tanh();
      complex2.ONE.pow(complex0);
      complex2.INF.sqrt1z();
      Complex complex3 = Complex.valueOf((-3811.422), (-3811.422));
      Complex complex4 = complex1.sinh();
      complex1.getArgument();
      complex1.getImaginary();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.NaN.sinh();
      complex6.I.pow((-3811.422));
      Complex.valueOf(0.0, (-1439.1739));
      complex5.ZERO.divide(complex1);
      Complex complex7 = complex4.conjugate();
      complex4.getField();
      complex3.hashCode();
      complex5.abs();
      Object object0 = new Object();
      Complex.valueOf(1189.491211074);
      complex7.equals(object0);
      complex5.cos();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3924.27466), 0.0);
      Complex complex1 = complex0.asin();
      assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
      assertEquals(8.968083978291398, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      complex2.sin();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ONE.conjugate();
      int int0 = 0;
      complex4.createComplex(0, 2.0);
      complex0.NaN.getArgument();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
