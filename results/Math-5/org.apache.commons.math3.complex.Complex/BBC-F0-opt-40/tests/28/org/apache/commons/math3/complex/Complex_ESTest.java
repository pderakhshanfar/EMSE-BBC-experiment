/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:14:26 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.tan();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2726.088080298532, (-21.76631734133015));
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.INF;
      complex2.atan();
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex((-21.76631734133015));
      complex5.atan();
      complex2.sqrt();
      complex4.pow(2726.088080298532);
      Complex.valueOf((-21.76631734133015), (-21.76631734133015));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1273.6248664, (-20.0));
      complex0.readResolve();
      Complex complex1 = complex0.tan();
      complex1.nthRoot(470);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(2.272019649514069, 9.636666808527841E52);
      complex2.pow(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = new Complex(9.636666808527841E52);
      Complex complex5 = complex4.acos();
      complex3.multiply(1362);
      Complex complex6 = complex5.divide(29.966629547095764);
      Complex complex7 = complex6.reciprocal();
      complex4.multiply((-2874.33966469));
      complex6.tanh();
      Complex complex8 = complex7.sin();
      complex7.toString();
      complex8.acos();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-1364.97176796939), (-1364.97176796939));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.pow((-1364.97176796939));
      Complex complex4 = complex1.multiply((-1364.97176796939));
      complex2.INF.conjugate();
      complex1.ONE.nthRoot(1754);
      Complex complex5 = complex2.reciprocal();
      complex2.ZERO.readResolve();
      Complex complex6 = complex0.INF.divide(complex3);
      complex3.abs();
      complex2.I.subtract(complex0);
      complex2.getField();
      Complex complex7 = complex4.divide(Double.NaN);
      Complex complex8 = complex7.INF.sqrt();
      complex0.ONE.tan();
      Complex complex9 = complex3.sqrt();
      complex9.ONE.hashCode();
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex6.INF.sqrt();
      complex10.I.nthRoot(455);
      Complex complex12 = complex1.divide(complex0);
      complex12.NaN.getArgument();
      complex2.getField();
      complex0.readResolve();
      complex9.atan();
      Complex complex13 = complex10.pow((-1364.97176796939));
      Complex complex14 = complex6.atan();
      complex14.ZERO.sqrt1z();
      complex8.log();
      complex13.readResolve();
      complex7.log();
      complex11.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-2.9098805266958403E-8));
      Complex complex1 = complex0.subtract(3.537475449241181E-268);
      Complex complex2 = complex1.ZERO.divide((-2.9098805266958403E-8));
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex1.I.exp();
      Complex complex5 = Complex.ONE;
      complex1.ONE.reciprocal();
      Complex complex6 = complex4.divide(complex5);
      complex1.INF.getField();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex7.sin();
      complex8.ZERO.subtract(complex0);
      Complex complex9 = complex1.exp();
      complex3.readResolve();
      Complex complex10 = complex4.sqrt();
      complex10.INF.readResolve();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex0.acos();
      Complex complex13 = complex7.multiply((-2.9098805266958403E-8));
      Complex complex14 = complex11.divide(complex9);
      complex1.readResolve();
      complex10.ONE.hashCode();
      Complex complex15 = complex14.asin();
      Complex complex16 = complex14.multiply((-1));
      complex16.ZERO.sqrt1z();
      complex15.subtract(complex2);
      Complex complex17 = complex5.subtract((-1.0));
      complex12.atan();
      complex13.add(complex1);
      complex11.sqrt1z();
      complex17.reciprocal();
      complex6.subtract((-1.0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(1273.6248664, Double.POSITIVE_INFINITY);
      complex0.multiply(1136);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(1273.6248664, Double.POSITIVE_INFINITY);
      complex0.readResolve();
      complex0.readResolve();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.tan();
      complex0.multiply(1273.6248664);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0), 0.40546512603759766);
      Complex complex2 = Complex.NaN;
      complex1.tanh();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(1273.6248664, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-1.0));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2205.7562984118244), (-2205.7562984118244));
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.NaN.nthRoot(1540);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.valueOf((-2205.7562984118244), (double) 1540);
      complex0.tan();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.subtract(complex5);
      complex0.I.getField();
      complex6.getArgument();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex1.sqrt1z();
      complex8.ONE.readResolve();
      complex7.isInfinite();
      complex3.toString();
      complex0.cosh();
      Complex complex9 = complex1.pow((-2205.7562984118244));
      Complex complex10 = complex2.subtract(complex1);
      Complex complex11 = complex10.tan();
      complex11.hashCode();
      complex3.add(complex9);
      complex6.sqrt1z();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-2.3085653185818848E-7), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.tanh();
      complex0.readResolve();
      complex2.divide(3452.0333127534);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex0 = Complex.ZERO;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-26), (-26));
      Complex complex1 = Complex.NaN;
      complex0.equals(complex1);
      Complex complex2 = complex0.tan();
      complex2.ZERO.multiply((double) (-26));
      Complex.valueOf((-201.4), 1574.406078885);
      complex1.negate();
      complex2.tanh();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(1.0);
      Complex complex1 = new Complex((-1441.749));
      Complex complex2 = complex1.asin();
      complex2.multiply(844);
      Complex complex3 = Complex.valueOf((-134.122302058452), Double.NaN);
      complex3.multiply(complex1);
      Complex complex4 = new Complex((-134.122302058452), Double.NaN);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(1.0368403169781264E257);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.ZERO.subtract((-20.0));
      Complex complex4 = complex3.ONE.sin();
      complex0.NaN.getArgument();
      complex0.getField();
      complex0.isInfinite();
      Complex complex5 = complex1.I.sqrt1z();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.divide(complex2);
      complex0.acos();
      Complex complex8 = complex6.add(262.566448964);
      complex8.ZERO.getField();
      complex6.exp();
      Complex complex9 = Complex.valueOf(Double.NaN);
      Complex complex10 = complex9.createComplex((-20.0), Double.NaN);
      complex10.ZERO.subtract((-898.609398087402));
      complex6.exp();
      Complex complex11 = complex2.multiply(Double.NaN);
      complex11.reciprocal();
      complex11.divide((-621.24693241711));
      Complex complex12 = complex0.add((-20.0));
      complex11.divide(complex1);
      complex7.multiply(complex12);
      complex2.sqrt();
      complex5.sinh();
      complex8.divide(0.41421356237309515);
      complex4.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-812.2117479), (-812.2117479));
      complex0.createComplex((-812.2117479), (-812.2117479));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.multiply(821);
      Complex complex4 = complex2.tanh();
      complex0.tan();
      Complex complex5 = Complex.NaN;
      complex1.subtract(complex4);
      complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(1996.03673615729, 1996.03673615729);
      Complex complex1 = Complex.INF;
      complex1.INF.divide(1996.03673615729);
      complex0.NaN.add(complex1);
      Complex complex2 = complex0.ZERO.cosh();
      complex2.sqrt();
      complex0.asin();
      complex0.exp();
      complex1.subtract((-2078639.179001));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(2.037139607241041E305);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.INF;
      complex1.equals(complex3);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.negate();
      complex3.multiply(complex6);
      Complex.valueOf(2642.59070373079, (-812.546244032116));
      complex5.multiply(complex3);
      Complex complex7 = Complex.valueOf(2.037139607241041E305);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(1138.8, (-2287.3725610433));
      complex0.sqrt1z();
      Complex complex1 = complex0.cosh();
      complex1.INF.cos();
      Complex complex2 = Complex.valueOf(0.6857960224151611, (-3411.9997069167393));
      complex2.ONE.subtract(0.6857960224151611);
      Complex complex3 = Complex.valueOf(2246.5);
      complex3.ZERO.readResolve();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isInfinite();
      Complex complex1 = complex0.cosh();
      complex0.isInfinite();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = complex3.I.add((-2287.3725610433));
      Complex complex5 = complex4.ONE.multiply(584);
      Complex complex6 = complex1.subtract((-252.41642478941));
      Complex complex7 = complex2.multiply(7);
      complex3.INF.toString();
      Complex complex8 = complex7.acos();
      complex0.ONE.multiply(complex3);
      Complex complex9 = Complex.valueOf(3207.86234116576);
      complex3.toString();
      Complex complex10 = complex1.subtract(complex6);
      complex10.INF.add(complex9);
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex0.ONE.subtract((-252.41642478941));
      complex12.multiply(complex0);
      Complex complex13 = complex11.ONE.tan();
      complex13.add(complex5);
      complex4.log();
      Complex complex14 = complex4.createComplex((-148862.50607465534), (-252.41642478941));
      complex14.getField();
      Complex complex15 = complex1.tanh();
      complex15.I.nthRoot(1129);
      Complex complex16 = new Complex(1440.9447199665867, (-2287.3725610433));
      complex4.pow(complex16);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.639240285364508), (-2.639240285364508));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = Complex.valueOf(2.0, (-208.34368877317));
      complex2.INF.hashCode();
      Complex complex3 = complex0.atan();
      complex3.getField();
      Complex complex4 = complex0.exp();
      complex3.asin();
      complex4.ONE.readResolve();
      complex4.add((-1518.581903197481));
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-186.50750751279));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.I.sinh();
      complex3.atan();
      Complex complex4 = complex1.multiply((-879));
      complex4.equals(complex3);
      complex2.equals(complex1);
      Complex complex5 = complex2.INF.multiply((-879));
      Complex complex6 = complex1.ZERO.conjugate();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex1.multiply(2245.04702108783);
      complex1.multiply((-186.50750751279));
      complex7.NaN.getField();
      complex1.multiply(complex8);
      Complex complex10 = complex0.asin();
      complex10.I.hashCode();
      Complex complex11 = complex7.log();
      Complex complex12 = complex11.I.pow((double) (-879));
      complex12.getField();
      complex5.readResolve();
      Complex complex13 = complex3.multiply(complex9);
      complex9.exp();
      complex6.sin();
      complex5.divide(2245.04702108783);
      complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.toString();
      Complex complex1 = complex0.asin();
      complex1.multiply(1743);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.NaN;
      complex0.equals(complex3);
      complex3.tan();
      Complex complex4 = complex2.add(0.0);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.9988025339542184);
      complex0.ZERO.nthRoot(1782);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      complex2.I.reciprocal();
      complex2.ONE.createComplex(0.9988025339542184, 323.5);
      complex0.createComplex(1782, 0.9988025339542184);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.toString();
      complex0.equals(complex0);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      complex0.subtract(4337.824040044);
      // Undeclared exception!
      complex1.nthRoot(7475);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.toString();
      complex0.equals(complex0);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = Complex.valueOf(218.8074126829416, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.multiply(complex2);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(412);
      complex1.tanh();
      Complex complex2 = new Complex(412);
      Complex.valueOf((-5824061.291938581));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-97.24984310842791));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.createComplex(3000.929, (-97.24984310842791));
      Complex complex3 = complex0.asin();
      complex2.multiply((-2146625924));
      complex1.tanh();
      Complex complex4 = Complex.NaN;
      complex4.ONE.sqrt1z();
      Complex complex5 = Complex.valueOf((double) 844, (double) (-2146625924));
      complex3.equals(complex5);
      Complex complex6 = complex2.tan();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.negate();
      complex2.multiply(complex6);
      Complex.valueOf(2.0, 3000.929);
      Complex complex9 = complex1.multiply(complex8);
      complex9.ZERO.atan();
      Complex complex10 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.reciprocal();
      complex0.sqrt();
      Complex complex2 = complex1.add(1003.805);
      complex1.asin();
      complex2.multiply(819.59358037899);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-83.238556));
      Complex complex1 = complex0.divide((-3.8407660485972883E-4));
      complex0.nthRoot(4118);
      complex1.sin();
      Complex complex2 = complex1.createComplex((-83.238556), Double.POSITIVE_INFINITY);
      complex2.subtract(Double.NaN);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-83.238556));
      Complex complex1 = Complex.INF;
      complex0.ZERO.sinh();
      Complex complex2 = complex0.asin();
      complex2.multiply((-1));
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf(2.531197486338927, 2514.69611);
      Complex complex5 = complex4.divide(0.0);
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.tan();
      Complex complex6 = Complex.ONE;
      complex6.negate();
      complex5.isNaN();
      Complex complex7 = complex4.sinh();
      complex3.getReal();
      Complex complex8 = complex0.acos();
      complex0.subtract((-2193.1));
      Complex complex9 = complex7.log();
      complex8.multiply(complex6);
      Complex complex10 = complex6.createComplex(1.7465059757232666, 1.148747205734253);
      complex9.asin();
      complex10.sin();
      Complex complex11 = complex9.sin();
      complex6.sqrt1z();
      Object object1 = new Object();
      complex11.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.multiply(0.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex((-2847.5779205215));
      Complex complex4 = Complex.valueOf(0.0, 643.486619136);
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1301.8238220661476));
      Complex complex1 = complex0.ONE.pow((-1301.8238220661476));
      Complex complex2 = complex1.createComplex((-1669.1927047760569), (-1210.48491584));
      Complex complex3 = complex2.atan();
      complex0.I.toString();
      complex0.toString();
      complex3.getReal();
      Complex complex4 = complex0.asin();
      complex3.ZERO.nthRoot(1);
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex6.NaN.cos();
      complex0.subtract((-1.5704037120977044));
      complex1.getArgument();
      complex7.multiply(37);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.I.conjugate();
      Complex complex2 = complex1.exp();
      complex1.I.createComplex(443635.5421970528, (-5113.51582825134));
      Complex complex3 = complex1.add((-20.0));
      complex3.ONE.conjugate();
      Complex complex4 = complex3.pow(443635.5421970528);
      complex3.I.cos();
      Complex complex5 = complex3.subtract(443635.5421970528);
      complex5.ONE.hashCode();
      complex5.NaN.pow(1.0);
      complex5.INF.pow((-5113.51582825134));
      Complex complex6 = complex3.createComplex((-20.0), 443635.5421970528);
      complex6.cos();
      complex4.pow(complex3);
      complex3.divide(443635.5421970528);
      Complex complex7 = complex6.multiply((-876.18));
      Complex complex8 = complex2.tanh();
      complex8.I.toString();
      complex1.negate();
      complex7.abs();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-812.2117479));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.multiply(844);
      Complex complex4 = complex0.sqrt1z();
      complex4.readResolve();
      complex0.nthRoot(948);
      complex0.getReal();
      complex0.readResolve();
      complex3.pow(1.148747205734253);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.divide(1.148747205734253);
      Complex complex7 = complex1.createComplex(226, (-981.4945623828602));
      complex6.readResolve();
      complex4.getReal();
      complex7.acos();
      complex4.toString();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1410.945632, 1410.945632);
      complex0.NaN.cos();
      complex0.INF.conjugate();
      Complex complex1 = Complex.ZERO;
      complex1.tanh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.INF;
      complex1.equals(complex3);
      Complex complex4 = complex3.tan();
      complex1.negate();
      Complex complex5 = Complex.valueOf((-652.49), 20.0);
      complex4.isNaN();
      Complex complex6 = complex1.sinh();
      complex4.getReal();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex1.subtract(1.0000200497415948);
      complex7.log();
      complex8.multiply(complex5);
      Complex complex9 = Complex.NaN;
      complex9.createComplex(2.573617458343506, 2.573617458343506);
      Complex complex10 = Complex.valueOf((-193.0), 0.0);
      Complex complex11 = complex10.asin();
      complex11.sin();
      complex0.sin();
      complex8.sqrt1z();
      Object object0 = new Object();
      complex10.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-65.85534211235345));
      Complex complex1 = complex0.log();
      complex0.ZERO.sinh();
      Complex complex2 = complex0.asin();
      complex2.multiply((-1));
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf(2.531197486338927, 2514.69611);
      Complex complex5 = complex4.divide(0.0);
      Complex complex6 = Complex.NaN;
      complex0.INF.divide(complex6);
      complex3.getArgument();
      complex5.getArgument();
      Complex complex7 = new Complex(Double.NaN, 2514.69611);
      Complex complex8 = complex7.multiply(1.774754509824561E-4);
      complex8.atan();
      complex8.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-898.577972439), (-898.577972439));
      Object object0 = new Object();
      complex0.readResolve();
      complex1.isNaN();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.ONE;
      complex3.isNaN();
      Complex complex4 = complex2.sinh();
      complex0.getReal();
      Complex complex5 = complex3.acos();
      complex5.subtract(537.44399761);
      complex4.log();
      complex2.multiply(complex4);
      complex1.createComplex((-3225.96710480378), 1.7465059757232666);
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.valueOf(0.0);
      complex7.sin();
      Complex complex8 = complex2.sin();
      complex7.sqrt1z();
      Object object1 = new Object();
      complex5.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(2129.06796054);
      Complex complex1 = complex0.pow(0.6793810129165649);
      Complex complex2 = complex1.createComplex((-1210.48491584), 2129.06796054);
      Complex complex3 = complex0.atan();
      complex0.toString();
      complex1.toString();
      complex2.getReal();
      Complex complex4 = complex2.asin();
      complex3.nthRoot(1);
      Complex complex5 = complex4.cosh();
      complex0.negate();
      complex1.cos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.subtract((double) 1);
      complex7.getArgument();
      complex5.multiply(37);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = Complex.valueOf(0.0, 2.4585794728405612E-8);
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3428.858937161);
      Complex complex1 = Complex.ONE;
      complex0.add(complex1);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.log();
      complex0.getField();
      Complex complex4 = complex0.cos();
      complex4.ONE.negate();
      complex3.I.cosh();
      Complex complex5 = complex4.I.pow(Double.NaN);
      complex0.isInfinite();
      Complex complex6 = complex5.multiply(Double.NaN);
      Complex.valueOf(Double.NaN, 2222.7351291794);
      Complex complex7 = Complex.valueOf(3428.858937161);
      complex3.equals(complex7);
      complex3.divide(Double.NaN);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.sinh();
      complex2.NaN.subtract((-1465.060015579699));
      Complex complex4 = complex0.add(complex1);
      complex4.ZERO.divide(complex1);
      complex4.toString();
      Complex complex5 = new Complex(2.1819935527247946E-7);
      Complex complex6 = complex4.ZERO.subtract(complex5);
      Complex complex7 = complex2.I.sinh();
      complex7.INF.divide(2.1819935527247946E-7);
      Complex complex8 = complex2.multiply(complex1);
      Complex complex9 = complex8.I.acos();
      complex9.sinh();
      complex9.hashCode();
      Complex complex10 = complex4.divide((-1465.060015579699));
      complex10.I.tan();
      complex4.sinh();
      complex3.multiply(1320);
      Complex complex11 = complex6.negate();
      complex3.getField();
      complex4.negate();
      complex9.readResolve();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1.166799420361101E-7), (-1.166799420361101E-7));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.NaN.createComplex((-1.166799420361101E-7), 6.283185307179586);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex2.conjugate();
      complex0.conjugate();
      Complex complex6 = (Complex)complex0.readResolve();
      complex5.reciprocal();
      complex5.sqrt();
      complex0.getArgument();
      complex4.add((-944.1));
      complex6.multiply(1129);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-83.238556));
      Complex complex1 = complex0.log();
      complex0.ZERO.sinh();
      Complex complex2 = complex0.asin();
      complex2.multiply((-1));
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf(2.531197486338927, 2514.69611);
      Complex complex5 = complex4.divide(0.0);
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.tan();
      Complex complex6 = Complex.ONE;
      complex6.negate();
      complex5.isNaN();
      Complex complex7 = complex4.sinh();
      complex3.getReal();
      Complex complex8 = complex0.acos();
      complex0.subtract((-2193.1));
      Complex complex9 = complex7.log();
      complex8.multiply(complex6);
      Complex complex10 = complex6.createComplex(1.7465059757232666, 1.148747205734253);
      complex9.asin();
      complex10.sin();
      Complex complex11 = complex9.sin();
      complex6.sqrt1z();
      Object object1 = new Object();
      complex11.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = Complex.valueOf(3.180701250556134);
      complex0.toString();
      Complex complex3 = complex1.subtract(complex0);
      complex0.pow(complex2);
      complex0.subtract(complex1);
      complex1.multiply(0.012665147955292224);
      Complex complex4 = complex0.sqrt1z();
      complex3.atan();
      complex2.divide(complex4);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.NaN.subtract(0.0);
      complex0.ZERO.abs();
      Complex complex3 = complex1.negate();
      complex0.getField();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex0.createComplex(0.0, (-985.8296975));
      Complex complex6 = complex2.pow((-2522.252));
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = Complex.INF;
      complex9.conjugate();
      complex4.readResolve();
      complex5.reciprocal();
      complex2.sqrt();
      complex4.getArgument();
      complex8.add(1583.20978);
      Complex complex10 = complex6.multiply(1271);
      complex2.getReal();
      complex10.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-812.2117479));
      Complex complex2 = complex0.createComplex(1.148747205734253, 1.148747205734253);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.multiply(844);
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.NaN;
      complex5.equals((Object) null);
      complex2.tan();
      Complex complex7 = complex2.negate();
      Complex complex8 = Complex.valueOf(1.0000200497415948, 0.0);
      complex8.isNaN();
      Complex complex9 = complex2.sinh();
      complex2.getReal();
      complex1.acos();
      Complex complex10 = complex3.subtract(2.573617458343506);
      complex3.log();
      complex7.multiply(complex0);
      complex10.createComplex((-812.2117479), 1.0);
      complex7.asin();
      complex1.sin();
      complex9.sin();
      complex10.sqrt1z();
      Object object0 = new Object();
      complex6.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-1061.0), (-1061.0));
      Complex complex2 = complex0.pow(297.248431421);
      Complex complex3 = complex2.sqrt();
      complex1.conjugate();
      Complex complex4 = complex0.conjugate();
      complex0.readResolve();
      Complex complex5 = complex2.reciprocal();
      complex5.negate();
      Complex complex6 = complex3.sqrt();
      complex2.getArgument();
      Complex complex7 = complex3.add((-1061.0));
      complex7.multiply(1129);
      complex6.getReal();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-1.166799420361101E-7), (-1.166799420361101E-7));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = new Complex(6.283185307179586);
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-1.166799420361101E-7), (-1.166799420361101E-7));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.NaN.createComplex(6.283185307179586, 6.283185307179586);
      complex2.ZERO.pow(1435.0);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.conjugate();
      complex0.conjugate();
      complex0.readResolve();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.sqrt();
      complex0.getArgument();
      complex6.multiply(complex0);
      complex5.createComplex((-2.356194490192345), (-2.356194490192345));
      complex3.asin();
      complex0.sin();
      complex4.sin();
      Complex complex7 = complex5.sqrt1z();
      Object object0 = new Object();
      complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.toString();
      Complex complex1 = complex0.multiply((-1386.0));
      complex0.equals(complex0);
      complex0.readResolve();
      complex0.NaN.atan();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf((-4130.45255), 0.0);
      complex2.multiply(complex3);
      Complex complex4 = complex1.sqrt1z();
      Object object0 = new Object();
      complex1.equals(complex2);
      complex3.nthRoot(2263);
      complex4.divide((-198.272734429));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2350.52826719267, 2350.52826719267);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.I.log();
      complex5.NaN.abs();
      complex5.NaN.add(Double.NaN);
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = Complex.I;
      complex6.INF.divide(complex7);
      complex2.ZERO.divide(complex4);
      Complex complex8 = complex0.multiply(1599);
      Complex complex9 = complex8.createComplex(0.0, 1599);
      complex9.sqrt();
      complex2.abs();
      complex8.abs();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.NaN.subtract(0.0);
      complex0.ZERO.abs();
      Complex complex3 = complex1.negate();
      complex0.getField();
      Complex complex4 = complex3.NaN.cosh();
      complex4.atan();
      Complex complex5 = complex3.divide(complex0);
      complex5.I.getArgument();
      complex1.createComplex(0.0, 1.5707963267948966);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex3.multiply(1243);
      Complex complex8 = complex7.ZERO.tanh();
      Complex.valueOf(2514.69611, 2514.69611);
      Complex complex9 = complex5.I.divide(0.0);
      complex5.equals((Object) null);
      Complex complex10 = complex0.I.tan();
      Complex complex11 = complex3.ONE.negate();
      complex6.isNaN();
      complex8.sinh();
      complex3.getReal();
      Complex complex12 = complex5.acos();
      complex12.subtract((-1247.0));
      Complex complex13 = complex11.log();
      Complex complex14 = complex2.multiply(complex13);
      complex10.createComplex(Double.NEGATIVE_INFINITY, 2514.69611);
      complex11.asin();
      complex10.sin();
      complex7.sin();
      complex14.sqrt1z();
      Object object0 = new Object();
      complex9.equals(object0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      complex0.log();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.I.createComplex(0.0, (-1.0));
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex0.divide(complex4);
      complex7.ZERO.readResolve();
      complex7.abs();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex8.I.atan();
      complex9.NaN.toString();
      complex9.ONE.asin();
      Complex complex10 = complex4.sin();
      complex10.INF.subtract((-1.0));
      complex10.INF.log();
      complex4.equals(complex5);
      complex2.subtract(362.0);
      complex6.I.atan();
      complex3.getImaginary();
      Complex complex11 = complex2.cos();
      complex11.ZERO.sqrt1z();
      Complex complex12 = complex6.conjugate();
      complex12.NaN.toString();
      complex8.sqrt1z();
      Complex complex13 = complex8.sinh();
      complex9.cos();
      complex7.conjugate();
      complex13.acos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      complex1.ZERO.sqrt1z();
      Complex complex2 = complex0.NaN.add((-12.9));
      complex0.abs();
      Complex complex3 = complex0.cosh();
      complex3.INF.abs();
      complex3.getReal();
      Complex complex4 = complex3.subtract(Double.NaN);
      Complex complex5 = complex4.ONE.multiply(0);
      Complex complex6 = Complex.ONE;
      complex5.ONE.pow(complex6);
      Complex complex7 = complex5.NaN.multiply(0);
      Complex complex8 = complex0.acos();
      Complex complex9 = complex2.add(0.0);
      complex4.isNaN();
      Complex complex10 = complex8.tan();
      Complex complex11 = complex10.I.multiply(0);
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex11.INF.pow(complex12);
      complex0.I.atan();
      Complex complex14 = complex3.add(complex8);
      Complex complex15 = complex14.add(Double.POSITIVE_INFINITY);
      Complex complex16 = complex0.sinh();
      complex16.NaN.multiply((-1517));
      complex0.getArgument();
      complex11.getImaginary();
      complex9.cos();
      complex4.sinh();
      complex15.cosh();
      complex11.ZERO.getArgument();
      complex3.ONE.toString();
      complex13.divide(complex9);
      complex7.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract((-798.7748439240637));
      complex1.ONE.toString();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.cos();
      complex3.ZERO.abs();
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex4.sinh();
      complex5.divide(complex2);
      Complex complex6 = complex1.I.atan();
      complex0.I.toString();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.I.pow(complex2);
      try { 
        complex8.ONE.nthRoot((-125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -125
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.divide(complex1);
      complex3.INF.multiply(2573.919588);
      complex2.ZERO.negate();
      complex1.getField();
      complex2.abs();
      complex3.subtract(889.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4489.7225434), (-4489.7225434));
      Complex complex1 = complex0.I.subtract(724.714667397);
      complex1.ZERO.readResolve();
      complex0.INF.getField();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex0.reciprocal();
      complex2.tanh();
      complex3.ONE.createComplex(0.0, Double.NaN);
      complex0.NaN.divide(0.0);
      Complex complex4 = complex1.multiply(3192);
      Complex complex5 = complex4.subtract((-1.036103313062145E-7));
      Complex complex6 = complex5.ONE.sin();
      complex6.INF.exp();
      complex6.ZERO.subtract(0.0);
      Complex complex7 = complex5.tanh();
      complex7.ONE.divide(complex2);
      Complex complex8 = complex1.ONE.add((-4300.1241823125));
      complex8.ONE.subtract(complex4);
      Complex complex9 = complex2.divide(complex0);
      Complex complex10 = complex9.reciprocal();
      complex2.conjugate();
      Complex complex11 = complex9.conjugate();
      Complex complex12 = complex11.INF.exp();
      Complex complex13 = Complex.ZERO;
      complex12.I.add(complex13);
      complex11.NaN.readResolve();
      complex10.isInfinite();
      complex5.getField();
      complex5.tan();
      complex5.negate();
      complex6.createComplex(0.0, 3192);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ZERO.cos();
      complex1.INF.toString();
      complex0.getField();
      Complex complex3 = complex0.cos();
      complex2.getArgument();
      Complex complex4 = complex1.divide(-0.0);
      complex4.ONE.sqrt1z();
      Complex complex5 = complex3.tanh();
      complex1.isNaN();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.ONE.pow(0.0);
      Complex complex3 = complex0.ZERO.add(0.0);
      complex3.ZERO.abs();
      complex2.NaN.sqrt();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.NaN.multiply(0.0);
      complex5.NaN.hashCode();
      Complex complex6 = complex0.ONE.divide(complex1);
      complex6.ZERO.sqrt();
      complex4.ONE.negate();
      complex2.getField();
      complex4.atan();
      complex4.multiply(0.0);
      Complex.valueOf(0.0);
      Complex complex7 = Complex.valueOf(0.0);
      complex7.ZERO.divide(complex4);
      Complex complex8 = complex0.multiply(complex7);
      complex4.subtract(0.0);
      Complex.valueOf(0.0, 0.0);
      complex8.nthRoot(197);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = (-1153.507811);
      Complex complex0 = Complex.valueOf((-1153.507811), (-1153.507811));
      complex0.ONE.multiply((-1153.507811));
      Complex.valueOf((-1153.507811));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.exp();
      complex2.NaN.log();
      Complex complex3 = complex1.sqrt();
      int int0 = 0;
      try { 
        complex3.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getField();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.multiply((-740.753265));
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex2.ZERO.cos();
      complex4.NaN.sqrt1z();
      complex4.INF.getArgument();
      complex2.ZERO.multiply(complex3);
      Complex complex5 = complex0.add(165.5357954);
      complex5.getReal();
      complex5.ONE.getArgument();
      Complex complex6 = complex3.INF.sin();
      complex5.I.atan();
      complex1.isInfinite();
      complex2.toString();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex3.INF.asin();
      complex8.getArgument();
      Complex complex9 = complex7.INF.sinh();
      complex9.NaN.sinh();
      Complex complex10 = complex3.exp();
      complex10.I.tan();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex5.NaN.reciprocal();
      complex11.INF.divide(complex8);
      complex2.nthRoot(1);
      Complex complex13 = complex7.asin();
      complex13.ZERO.getField();
      complex3.getReal();
      complex3.atan();
      complex11.negate();
      complex9.sinh();
      complex6.add(complex12);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(3573.8, 3573.8);
      complex0.I.negate();
      Complex.valueOf((-2008.5953869), (-2478.039027));
      Complex complex1 = Complex.valueOf((-4588.45));
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      try { 
        complex3.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2046.1298178741));
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.cosh();
      complex1.INF.getField();
      Complex complex3 = Complex.valueOf((-2046.1298178741));
      Complex complex4 = complex3.tan();
      complex3.INF.add(3.141592653589793);
      Complex complex5 = complex4.INF.divide(complex2);
      Complex complex6 = complex3.negate();
      complex4.INF.nthRoot(1);
      Complex complex7 = complex0.NaN.createComplex((-2046.1298178741), 0.0);
      Complex complex8 = complex7.ONE.multiply((-2046.1298178741));
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, (-1906.7));
      complex8.NaN.add(complex9);
      Complex complex10 = complex6.I.exp();
      complex2.sinh();
      complex4.I.multiply(complex5);
      Complex complex11 = complex0.divide(complex1);
      complex1.readResolve();
      complex2.nthRoot(1);
      complex11.getArgument();
      complex3.abs();
      Complex complex12 = complex1.negate();
      complex12.hashCode();
      Complex complex13 = complex5.multiply(17);
      complex13.INF.conjugate();
      complex11.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex2.NaN.pow(complex0);
      complex4.I.divide((-1.0));
      Complex complex5 = Complex.valueOf(0.0, (-860.29324998));
      complex5.INF.divide(complex1);
      complex5.INF.readResolve();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex7.I.divide(complex3);
      complex8.ZERO.subtract(0.0);
      Complex complex9 = complex0.divide(1.918355503889933E-7);
      complex9.asin();
      complex2.getArgument();
      Complex.valueOf(0.0, (-1320.917));
      complex7.tan();
      complex2.getField();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex1.NaN.multiply(complex0);
      complex1.ONE.sqrt();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.INF.pow(complex0);
      complex4.I.getArgument();
      Complex complex6 = complex4.NaN.tan();
      complex4.INF.getField();
      complex2.NaN.conjugate();
      Complex complex7 = complex3.createComplex(3107.83479, 3107.83479);
      complex7.ONE.tan();
      complex7.sqrt1z();
      complex2.isNaN();
      complex3.acos();
      complex1.getArgument();
      complex7.log();
      Complex complex8 = complex5.acos();
      complex6.ONE.reciprocal();
      complex8.ONE.sin();
      complex3.subtract((-1743.549162292194));
      complex5.sinh();
      complex0.isNaN();
      try { 
        complex8.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3334.24426));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.multiply((-1359.5621485838785));
      Complex complex3 = complex2.ZERO.multiply((-1359.5621485838785));
      complex3.ZERO.conjugate();
      complex1.abs();
      Complex complex4 = complex0.NaN.exp();
      complex1.getImaginary();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex1.INF.multiply(complex5);
      complex6.INF.nthRoot(7);
      Complex complex7 = complex1.sqrt1z();
      complex1.getReal();
      Complex complex8 = complex7.conjugate();
      Complex.valueOf(0.0, (-3334.24426));
      complex8.asin();
      complex5.pow(complex0);
      complex0.negate();
      complex0.readResolve();
      complex4.exp();
      complex7.sin();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(0.0, 1147.239774565357);
      Complex complex3 = complex0.multiply(complex2);
      complex0.I.getField();
      Complex complex4 = complex0.sqrt1z();
      complex4.NaN.multiply(2762.79);
      complex4.NaN.cos();
      Complex complex5 = complex2.tan();
      complex1.readResolve();
      complex3.multiply(complex2);
      complex5.INF.readResolve();
      complex3.cosh();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0487601931965087E175);
      Complex complex1 = Complex.valueOf(3173.8903853986026, 3173.8903853986026);
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.NaN.subtract(complex1);
      complex3.subtract(0.0);
      complex3.conjugate();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex0.multiply(complex1);
      complex2.ONE.reciprocal();
      complex5.I.subtract(complex0);
      complex0.isNaN();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex2.tan();
      complex7.ZERO.divide(complex0);
      complex5.getReal();
      Complex complex8 = complex7.asin();
      complex8.NaN.sqrt1z();
      complex1.NaN.nthRoot(7);
      complex6.getField();
      complex5.sinh();
      complex2.getField();
      Complex complex9 = Complex.INF;
      complex4.subtract(complex9);
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.negate();
      complex3.I.abs();
      Complex complex4 = complex3.I.conjugate();
      complex0.INF.pow(complex4);
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = Complex.valueOf(1095.0, 8886110.0);
      Complex complex8 = complex4.ZERO.multiply(1222);
      complex5.INF.hashCode();
      complex4.abs();
      Complex complex9 = complex1.acos();
      complex9.ZERO.hashCode();
      complex4.multiply(1095.0);
      Complex complex10 = complex0.subtract(5.5657084775121975E-8);
      complex10.NaN.sqrt1z();
      Complex complex11 = complex8.cos();
      Complex complex12 = Complex.valueOf(0.2592042088508606);
      Complex complex13 = complex11.I.conjugate();
      complex13.ONE.hashCode();
      Object object0 = complex3.readResolve();
      complex7.equals(object0);
      Object object1 = complex4.readResolve();
      complex6.equals(object1);
      complex9.pow(complex12);
      complex13.negate();
      complex11.abs();
      complex9.acos();
      complex4.getArgument();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-1.166799420361101E-7), (-1.166799420361101E-7));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.NaN.createComplex(6.283185307179586, 6.283185307179586);
      complex2.ZERO.pow(1435.0);
      complex2.ONE.sqrt();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.conjugate();
      complex0.readResolve();
      complex3.reciprocal();
      complex3.sqrt();
      complex0.getArgument();
      complex4.add((-20.0));
      Complex complex5 = complex4.multiply(1129);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 1.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.atan();
      complex1.add(1.0);
      Complex complex3 = Complex.valueOf(0.0, 1.0);
      complex3.ONE.createComplex(2.0, (-20.0));
      Complex complex4 = complex2.pow(0.0);
      Complex complex5 = complex4.multiply(1886.9452564986848);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex3.cos();
      complex7.toString();
      complex3.readResolve();
      complex1.multiply(6.283185307179586);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.divide(1.0);
      complex10.ZERO.subtract(complex5);
      complex2.subtract(0.0);
      complex8.asin();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide(0.0);
      complex1.nthRoot(696);
      complex1.ZERO.sin();
      complex0.createComplex(4.4896127778163155E38, 4.4896127778163155E38);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 7.989378677301346E-301;
      Complex.valueOf(7.989378677301346E-301, 0.6149744987487793);
      Complex complex1 = complex0.ZERO.negate();
      complex1.ONE.abs();
      complex1.exp();
      Complex complex2 = complex1.ONE.sin();
      complex2.I.readResolve();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.acos();
      complex0.I.multiply(complex1);
      try { 
        complex0.nthRoot((-689));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -689
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-83.238556));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.sinh();
      complex2.cosh();
      Complex complex3 = complex2.ZERO.createComplex((-83.238556), (-83.238556));
      complex1.ZERO.abs();
      complex1.getArgument();
      complex1.getImaginary();
      complex3.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.toString();
      complex0.multiply((-1386.0));
      Complex complex1 = complex0.sqrt();
      complex0.equals(complex1);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf((-4130.45255), 0.0);
      Complex complex4 = complex2.multiply(complex3);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1360.3356), (-622.2856717));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cos();
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.I.multiply((-3476));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.add((-4772.2994));
      complex2.I.readResolve();
      Complex complex5 = complex4.INF.sinh();
      complex5.I.abs();
      complex4.I.tan();
      complex5.ONE.reciprocal();
      complex4.NaN.getArgument();
      double double0 = 1591.5813500929944;
      Complex complex6 = complex0.multiply(1591.5813500929944);
      try { 
        complex6.INF.nthRoot((-3476));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,476
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2151.404709, 2151.404709);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = Complex.valueOf(1.500201674336832E-8);
      complex3.sinh();
      complex3.ZERO.abs();
      complex2.ONE.add(2279.7960013);
      Complex complex4 = complex1.ONE.sqrt();
      Complex complex5 = complex4.ONE.negate();
      complex4.ONE.getArgument();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex4.atan();
      complex1.negate();
      Complex complex8 = complex6.conjugate();
      complex8.INF.subtract(complex5);
      Complex complex9 = complex7.tanh();
      complex7.acos();
      try { 
        complex9.nthRoot((-1764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,764
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-898.577972439), (-898.577972439));
      complex0.getArgument();
      complex0.getArgument();
      complex0.multiply((-3373.78));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.ZERO.multiply((-3.784600043778247E13));
      complex2.I.add(0.0);
      complex0.conjugate();
      complex1.I.conjugate();
      Complex.valueOf((-3.784600043778247E13), (-3.784600043778247E13));
      Complex complex3 = complex0.multiply((-3.784600043778247E13));
      complex3.ONE.sin();
      complex0.equals((Object) null);
      complex0.hashCode();
      complex0.getField();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.I.tanh();
      complex6.INF.multiply((-660));
      Complex complex7 = complex0.reciprocal();
      complex2.isNaN();
      Complex complex8 = complex7.atan();
      try { 
        complex8.nthRoot((-1364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,364
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-1820.707));
      Complex complex1 = Complex.valueOf((-1820.707), (-1820.707));
      Complex complex2 = complex0.INF.add(complex1);
      complex0.toString();
      Complex complex3 = complex0.pow((-1820.707));
      Complex.valueOf((-1820.707), 20.0);
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.NaN.acos();
      complex1.ZERO.readResolve();
      complex3.ZERO.toString();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex3.subtract(complex0);
      complex7.I.pow(complex5);
      Complex.valueOf((-1820.707), 1.6011195182800293);
      complex0.getReal();
      Complex complex8 = complex6.INF.divide((-1820.707));
      Complex complex9 = complex8.sqrt();
      complex2.getField();
      complex6.nthRoot(253);
      Complex complex10 = complex4.subtract(complex9);
      complex10.nthRoot(174);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.INF.pow(complex1);
      complex0.nthRoot(1);
      complex0.I.tanh();
      Complex complex3 = complex0.reciprocal();
      complex3.cosh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.ZERO.subtract(20.0);
      complex1.sqrt1z();
      complex5.getField();
      complex1.toString();
      complex2.getArgument();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex4.INF.negate();
      Complex complex9 = complex7.NaN.createComplex(2.0, 0.5156965255737305);
      complex6.ONE.log();
      Complex complex10 = complex7.pow(0.5045560598373413);
      complex10.tanh();
      complex6.tan();
      Complex complex11 = Complex.valueOf(2.0);
      complex3.toString();
      Complex complex12 = complex9.subtract(complex0);
      complex12.ONE.pow(complex5);
      complex3.subtract(complex11);
      complex6.multiply(0.0);
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1301.8238220661476));
      Complex complex1 = complex0.ONE.pow((-20.0));
      complex1.createComplex((-1681.1686), (-1210.48491584));
      Complex complex2 = complex0.ZERO.atan();
      complex0.I.toString();
      complex0.toString();
      complex2.getReal();
      Complex complex3 = complex0.asin();
      complex2.ZERO.nthRoot(1);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex5.NaN.cos();
      complex0.subtract(0.0);
      complex1.getArgument();
      complex6.multiply(37);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1410.945632, 1410.945632);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex1.INF.pow(1410.945632);
      complex3.ZERO.sqrt1z();
      complex0.NaN.readResolve();
      complex0.ZERO.nthRoot(226);
      complex0.getReal();
      complex1.readResolve();
      Complex complex4 = complex1.pow((double) 226);
      Complex complex5 = complex4.I.divide((double) 226);
      complex2.I.createComplex(1410.945632, 226);
      complex4.NaN.readResolve();
      complex2.getReal();
      complex3.acos();
      complex2.toString();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-4548.9982883682));
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.NaN.multiply((-2150.55658434038));
      complex0.NaN.getArgument();
      complex0.I.toString();
      complex0.getImaginary();
      complex1.atan();
      complex3.ZERO.acos();
      Complex complex4 = complex3.multiply((-4548.9982883682));
      complex4.isNaN();
      complex3.sin();
      Complex complex5 = complex3.reciprocal();
      complex5.acos();
      complex2.divide((-2554.375));
      complex1.reciprocal();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex((-987.721218282432), (-987.721218282432));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = (Complex)complex1.INF.readResolve();
      assertTrue(complex2.isInfinite());
      
      complex1.getField();
      Complex complex3 = complex0.ONE.sinh();
      double double0 = complex3.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.1752011936438014, complex3.getReal(), 0.01);
      
      complex1.getArgument();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex1.sin();
      complex5.INF.cosh();
      Complex complex6 = complex5.ZERO.add(0.0);
      Complex complex7 = complex4.log();
      Complex complex8 = complex0.I.sin();
      Complex complex9 = Complex.valueOf(Double.NaN);
      Complex complex10 = complex9.NaN.exp();
      complex7.getImaginary();
      Complex complex11 = complex7.NaN.multiply(0.0);
      complex7.hashCode();
      complex7.hashCode();
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex8.sqrt1z();
      Complex complex14 = complex13.multiply(1431);
      Complex complex15 = complex14.ZERO.pow((-2.8883532688356087E-8));
      assertEquals(2208.1483884206136, complex14.getReal(), 0.01);
      
      Complex complex16 = complex12.divide(complex8);
      complex16.NaN.sinh();
      complex10.subtract(complex5);
      assertSame(complex9, complex7);
      assertSame(complex10, complex11);
      
      Complex complex17 = complex0.divide(0.0);
      assertSame(complex17, complex4);
      
      double double1 = complex13.getImaginary();
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex15);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.I.pow((-322.89));
      Complex complex4 = complex0.NaN.divide(complex1);
      complex1.getArgument();
      Complex complex5 = complex0.ZERO.reciprocal();
      complex0.getField();
      Complex complex6 = complex1.I.cosh();
      Complex complex7 = complex6.ZERO.multiply(1);
      Complex complex8 = complex7.ONE.multiply(complex3);
      assertEquals((-0.17192910027946043), complex8.getReal(), 0.01);
      assertEquals(0.985109326154765, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex9 = complex0.add(complex1);
      Complex complex10 = complex2.negate();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals((-0.7853981633974483), complex10.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      
      complex1.getImaginary();
      complex5.exp();
      Complex complex11 = complex5.log();
      assertSame(complex5, complex4);
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      
      Complex complex12 = complex6.subtract(1.0);
      assertEquals((-0.45969769413186023), complex12.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex9));
      assertEquals(0.0, complex12.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 468.29);
      Complex complex2 = complex0.subtract(complex1);
      assertSame(complex2, complex0);
      assertEquals(468.29, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex0.I.toString();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.subtract(complex1);
      double double0 = complex2.getImaginary();
      assertEquals(-0.0, double0, 0.01);
      
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex3.ZERO.conjugate();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex4.multiply(1);
      complex2.equals(complex0);
      complex0.hashCode();
      complex3.ONE.getArgument();
      Complex complex7 = complex2.pow(complex0);
      complex7.negate();
      complex7.INF.hashCode();
      assertEquals(0.4203044601423583, complex7.getImaginary(), 0.01);
      
      complex3.getImaginary();
      double double1 = complex3.getArgument();
      assertEquals((-1.1780972450961724), double1, 0.01);
      
      Complex complex8 = Complex.valueOf(-0.0, -0.0);
      complex0.getReal();
      Complex complex9 = complex1.I.tanh();
      assertEquals(1.557407724654902, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex6.pow((double) 1);
      assertTrue(complex10.isNaN());
      
      complex8.I.createComplex((-0.7071067811865475), 2811.0582);
      Complex complex11 = complex4.asin();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertTrue(complex11.equals((Object)complex6));
      
      String string0 = complex8.toString();
      assertEquals("(-0.0, -0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      assertTrue(complex2.equals((Object)complex0));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
  }
}
