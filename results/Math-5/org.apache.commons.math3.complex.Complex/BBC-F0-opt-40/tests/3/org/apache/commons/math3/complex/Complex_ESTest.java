/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:02:56 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.nthRoot(2052);
      Complex complex1 = new Complex(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.INF;
      complex4.acos();
      complex1.subtract(complex5);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex5.pow((-1233.736641515391));
      Complex complex8 = new Complex(1.0, (-108783.68369625551));
      complex6.hashCode();
      Complex complex9 = Complex.valueOf(1850.0);
      Complex complex10 = complex9.pow(complex3);
      Complex complex11 = complex10.subtract(complex0);
      complex3.exp();
      Complex complex12 = complex0.multiply((-1797));
      complex7.getField();
      complex11.reciprocal();
      complex0.atan();
      Complex complex13 = Complex.INF;
      complex6.divide((-108783.68369625551));
      complex12.multiply(complex9);
      complex1.acos();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(5.609418227003629E-301, Double.NaN);
      Complex complex1 = complex0.log();
      complex1.I.tan();
      complex0.nthRoot(1908);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.toString();
      complex0.nthRoot(3050);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = Complex.ZERO;
      complex3.acos();
      Complex complex6 = complex1.subtract(complex2);
      complex6.exp();
      complex0.pow((-2094.08743614));
      Complex complex7 = new Complex((-151.9), (-289.0));
      complex0.hashCode();
      complex0.pow(complex1);
      complex0.exp();
      complex3.multiply(2116);
      complex1.getField();
      complex3.reciprocal();
      complex0.sinh();
      Complex complex8 = complex4.atan();
      Complex complex9 = Complex.INF;
      complex9.divide((-456.2804843));
      Complex.valueOf((double) 3050, (double) 7);
      Complex complex10 = Complex.NaN;
      complex10.cosh();
      complex9.add((-2094.08743614));
      complex8.asin();
      Complex complex11 = Complex.I;
      complex11.exp();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-4681.48428001), (-4681.48428001));
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.35385270340419584E17, 2.35385270340419584E17);
      complex0.multiply(complex1);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(15007.865707773799, Double.POSITIVE_INFINITY);
      complex0.createComplex(15007.865707773799, 0.0);
      complex0.tanh();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.ZERO.reciprocal();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.createComplex((-20.0), (-20.0));
      complex3.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-10.0660019041003), (-10.06600190410033));
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = Complex.NaN;
      complex0.NaN.subtract(complex1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow(Double.NaN);
      complex0.nthRoot(1230);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.NaN.subtract(complex1);
      complex2.INF.multiply(387);
      complex1.ONE.abs();
      complex0.createComplex(1.0, 1230);
      complex1.pow(complex0);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.subtract(Double.NaN);
      complex5.I.acos();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.subtract(complex0);
      complex3.ZERO.tanh();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-10.06600190410033), (-10.06600190410033));
      Complex complex2 = Complex.ONE;
      complex1.tan();
      complex1.add((-10.06600190410033));
      Complex complex3 = complex1.cos();
      complex1.cosh();
      complex3.subtract(1314.4189431086);
      complex3.add((-10.06600190410033));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(348.9815587683599, 8.623968972387222E211);
      complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.reciprocal();
      complex4.INF.multiply(17);
      Complex complex5 = Complex.valueOf(0.22626367211341858);
      Complex complex6 = complex3.I.cosh();
      complex5.divide((-150.08930719104853));
      complex6.ZERO.sqrt1z();
      Complex complex7 = complex2.I.add(348.9815587683599);
      complex1.add(complex2);
      complex3.acos();
      complex1.multiply(8.623968972387222E211);
      Complex complex8 = complex2.log();
      complex8.I.sinh();
      complex3.negate();
      complex4.pow(complex6);
      complex2.cosh();
      complex7.multiply(10.06600190410033);
      complex0.add((-1799.598915180869));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tan();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = Complex.valueOf(0.0, 6180.68990786172);
      Complex complex2 = complex1.subtract(6180.68990786172);
      Complex complex3 = Complex.NaN;
      complex0.createComplex(0.0, 6180.68990786172);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.tanh();
      Complex complex1 = complex0.subtract(7.494218049456063E304);
      Complex complex2 = Complex.NaN;
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1303.334));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(904.0, 904.0);
      complex0.reciprocal();
      complex0.pow((-4.30610076666344E-131));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = Complex.valueOf((-1.909032533211624E7), Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN);
      complex2.tan();
      complex1.pow((-1.909032533211624E7));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(703.05337320274, (-323.426965));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.pow((-323.426965));
      complex2.conjugate();
      complex2.I.toString();
      complex2.ONE.nthRoot(7);
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex0.asin();
      complex4.multiply(complex0);
      Complex complex5 = Complex.ZERO;
      complex5.acos();
      Complex complex6 = complex3.subtract(complex5);
      complex6.I.exp();
      Complex complex7 = complex1.pow(9.183480622172801E148);
      Complex complex8 = new Complex((-289.0), (-323.426965));
      complex8.hashCode();
      Complex complex9 = complex7.ZERO.pow(complex8);
      complex7.ONE.exp();
      complex4.multiply(2116);
      complex0.getField();
      Complex complex10 = complex5.reciprocal();
      complex7.sinh();
      Complex complex11 = complex6.atan();
      complex11.INF.divide(703.05337320274);
      Complex complex12 = Complex.valueOf((double) 7, (double) 2116);
      complex12.cosh();
      complex4.add(703.05337320274);
      complex10.asin();
      complex12.exp();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow(402.9);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.ONE.subtract(complex1);
      complex3.ZERO.multiply(2135);
      Complex complex4 = complex1.I.cosh();
      complex4.I.getArgument();
      Complex complex5 = complex4.I.sinh();
      complex5.ZERO.cosh();
      Complex complex6 = complex0.add(975.31197896868);
      complex6.NaN.hashCode();
      Complex complex7 = complex1.divide(402.9);
      Complex complex8 = complex7.sin();
      complex7.ONE.abs();
      complex8.NaN.exp();
      complex1.add(975.31197896868);
      complex8.getImaginary();
      complex4.sin();
      complex2.sin();
      complex4.ZERO.getField();
      complex5.subtract(1.0);
      complex7.sinh();
      Complex complex9 = complex4.acos();
      complex1.add(complex9);
      complex7.conjugate();
      Complex complex10 = complex2.cos();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 5360;
      // Undeclared exception!
      complex0.nthRoot(5360);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getImaginary();
      complex0.reciprocal();
      Complex complex1 = complex0.log();
      complex0.tanh();
      complex0.getField();
      complex1.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = (-421.341);
      Complex complex0 = new Complex((-421.341));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.atan();
      complex2.I.cosh();
      complex5.ONE.conjugate();
      double double1 = 1.2085883617401123;
      Complex.valueOf(1.2085883617401123);
      complex2.conjugate();
      Complex complex6 = complex1.sqrt();
      complex4.getArgument();
      complex3.pow(complex0);
      try { 
        complex6.NaN.nthRoot((-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -6
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.multiply((-129.33349146419));
      Complex complex4 = Complex.valueOf((-3090.3449134823), 2.0619101524353027);
      complex4.toString();
      Complex complex5 = complex1.pow(complex3);
      Complex complex6 = complex5.sinh();
      complex0.acos();
      Complex complex7 = Complex.INF;
      complex6.divide(complex7);
      Complex complex8 = complex6.subtract(1351.508);
      complex8.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.ONE;
      complex3.pow(complex4);
      complex4.tan();
      complex3.NaN.cosh();
      Complex complex5 = Complex.NaN;
      complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = Complex.ZERO;
      complex1.NaN.multiply(3637);
      Complex complex4 = complex0.subtract(complex3);
      complex4.NaN.nthRoot(3608);
      Complex complex5 = complex1.ONE.sqrt();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = complex0.multiply(complex7);
      Complex complex9 = complex6.ONE.divide(complex8);
      complex0.tanh();
      Complex.valueOf(2.5836901664733887);
      Complex complex10 = complex6.log();
      complex10.exp();
      complex0.equals((Object) null);
      complex0.INF.add(complex5);
      Complex.valueOf((-20.0));
      complex7.equals(complex2);
      complex1.divide(complex9);
      complex3.getImaginary();
      Complex complex11 = Complex.valueOf(2.5836901664733887, 1.125);
      complex11.NaN.multiply(complex9);
      complex6.readResolve();
      Complex.valueOf(2.5836901664733887);
      complex2.add(complex5);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.6683101654052734, 1.1752011936438014);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex0.NaN.add((-5518.970266773573));
      complex5.NaN.readResolve();
      complex1.INF.toString();
      Complex complex6 = complex1.sinh();
      complex0.getField();
      complex1.reciprocal();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex1.divide(1.1752011936438014);
      complex8.INF.asin();
      Complex complex9 = complex1.divide(complex4);
      Complex complex10 = complex8.tan();
      complex7.getField();
      complex8.createComplex(2.0, 2.218596935272217);
      Complex complex11 = complex9.sin();
      complex11.atan();
      complex2.getImaginary();
      complex10.abs();
      complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2041.44460123218));
      Complex complex1 = new Complex(2137);
      complex1.nthRoot(2137);
      Complex complex2 = Complex.NaN;
      complex1.sinh();
      Complex complex3 = Complex.INF;
      complex0.equals(complex2);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2041.44460123218));
      Complex complex1 = complex0.multiply(309.5398354333);
      Complex complex2 = Complex.valueOf((-2041.44460123218), 0.0);
      complex2.toString();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.divide(complex1);
      complex3.log();
      Complex complex7 = complex6.divide(309.5398354333);
      complex4.getArgument();
      complex7.tanh();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = Complex.valueOf((-3090.3449134823), (-175.67916));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.tan();
      complex3.log();
      complex3.tanh();
      complex2.getField();
      Complex complex4 = Complex.ZERO;
      complex4.createComplex(1908.699372, (-81.1));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6869339567651153, 1893.131);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.negate();
      Complex.valueOf(1893.131);
      complex0.equals("D[_XMk'b0vhn##=E!");
      Complex complex3 = complex2.I.sinh();
      complex3.NaN.toString();
      Complex complex4 = complex1.cos();
      complex2.getField();
      complex4.INF.hashCode();
      Complex.valueOf(533.8028999, 0.6869339567651153);
      Complex complex5 = complex4.tan();
      complex2.abs();
      complex5.getField();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.INF;
      complex2.sinh();
      Complex complex3 = complex2.divide(3.8689717448064913);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ZERO.pow(3.8689717448064913);
      Complex complex6 = complex3.log();
      Complex.valueOf(1539.0, Double.NaN);
      complex6.tanh();
      complex1.abs();
      complex3.isInfinite();
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-644.2), Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tan();
      double double0 = 0.8414709848078965;
      Complex complex2 = complex1.divide(0.8414709848078965);
      complex0.isInfinite();
      complex0.I.acos();
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex3.I.divide((-1976.83080299));
      Complex complex5 = complex4.pow(complex0);
      complex1.add((-371.7));
      complex2.acos();
      complex5.I.hashCode();
      try { 
        complex3.nthRoot((-1062));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,062
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.add(1.5670874118804932);
      complex2.sinh();
      Complex complex3 = Complex.INF;
      complex3.hashCode();
      complex2.log();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.multiply((-594.2872530320603));
      Complex complex6 = Complex.valueOf(0.0, (-1245.1866));
      complex2.toString();
      Complex complex7 = Complex.valueOf((-5387428.290410763));
      Complex complex8 = complex5.pow(complex7);
      complex8.sinh();
      complex2.acos();
      Complex complex9 = complex3.divide(complex6);
      complex7.log();
      complex6.divide((-594.2872530320603));
      complex0.getArgument();
      complex9.tanh();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-0.6869339567651153));
      complex1.atan();
      complex0.tan();
      Complex complex2 = complex0.divide(37.362096235000514);
      Complex complex3 = complex2.add(0.0);
      complex1.pow(0.0);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      Complex complex1 = Complex.ZERO;
      complex1.getReal();
      Complex complex2 = Complex.valueOf((-1.0), (-18.681048117500257));
      complex1.ZERO.abs();
      Complex complex3 = complex1.createComplex(1136.269595, 1641.2538332644897);
      complex2.toString();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = Complex.valueOf(1136.269595, (-933.90518383));
      complex5.abs();
      complex5.pow((-636.007974736925));
      complex1.pow(complex4);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow(463.30533664);
      Complex complex2 = new Complex(463.30533664, 885.682045604102);
      complex1.atan();
      Complex complex3 = complex2.subtract(683.6826903180838);
      Complex complex4 = complex0.exp();
      complex0.asin();
      complex1.tan();
      Complex complex5 = Complex.ONE;
      complex5.toString();
      Complex complex6 = complex4.add(complex3);
      Complex.valueOf(6.283185307179586, 0.8466671928434897);
      Complex complex7 = Complex.ONE;
      complex7.abs();
      complex6.pow(683.6826903180838);
      Complex complex8 = new Complex(1.0);
      complex8.asin();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.pow(complex0);
      complex8.tan();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.ZERO;
      complex2.getReal();
      Complex.valueOf(0.0, (-18.681048117500257));
      complex2.subtract((-1.0));
      complex0.toString();
      Complex complex3 = new Complex((-1.0), (-1.0));
      complex1.reciprocal();
      complex2.multiply((-18.681048117500257));
      Complex complex4 = complex1.asin();
      complex0.readResolve();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.valueOf(0.0, 222.0);
      complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.ZERO;
      complex2.getReal();
      Complex complex3 = Complex.valueOf((-1.0), (-18.681048117500257));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.tan();
      complex4.toString();
      complex2.add(complex5);
      Complex complex6 = Complex.valueOf((-18.681048117500257), 0.0);
      complex6.abs();
      complex3.pow(2036.045);
      complex6.pow(complex4);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.INF;
      complex4.tan();
      complex4.toString();
      complex4.add(complex1);
      Complex complex5 = Complex.valueOf(3.947457923821984E-183, 705.340959757955);
      complex5.abs();
      complex5.pow(705.340959757955);
      Complex complex6 = Complex.valueOf(1239.7039239767007, 3107.3911);
      complex6.asin();
      complex5.pow(complex3);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow(463.30533664);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.INF.add((-650.14905129492));
      Complex complex4 = complex0.I.sinh();
      complex2.ZERO.hashCode();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex6.ZERO.multiply(0.0);
      Complex complex8 = Complex.valueOf((-1453.140584285), 463.30533664);
      complex8.toString();
      Complex complex9 = complex5.I.pow(complex8);
      Complex complex10 = complex9.INF.sinh();
      complex10.INF.acos();
      complex10.ONE.divide(complex3);
      complex0.abs();
      complex0.getReal();
      Complex complex11 = Complex.valueOf(Double.NaN, 1.1901862840583523E-7);
      Complex complex12 = complex0.subtract(complex6);
      complex3.NaN.createComplex((-1122.429553), 1.9848570823669434);
      Complex complex13 = complex12.ONE.tanh();
      complex13.ZERO.getArgument();
      Complex complex14 = complex3.multiply(complex7);
      Complex complex15 = complex8.asin();
      Complex complex16 = Complex.valueOf((-1453.140584285), 1.9848570823669434);
      complex14.ONE.getArgument();
      complex6.sinh();
      complex15.getArgument();
      complex16.getReal();
      complex15.multiply(complex4);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(66.864, (-1257.478943690567));
      complex0.acos();
      complex1.subtract(890.109132);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-4.30610076666344E-131));
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.divide(complex0);
      Complex complex2 = Complex.valueOf(0.39157733228126257, 0.0);
      Complex complex3 = complex1.subtract((-2122.66872));
      complex3.toString();
      Complex complex4 = new Complex(0.0, 0.39157733228126257);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.multiply(1.12996721591364E-202);
      Complex complex7 = complex2.asin();
      complex6.readResolve();
      Complex complex8 = Complex.ONE;
      complex7.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply(complex1);
      complex3.log();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.log();
      complex5.sqrt();
      complex1.reciprocal();
      Complex complex6 = complex2.multiply(1.0);
      complex3.exp();
      Complex complex7 = Complex.I;
      complex4.asin();
      Complex complex8 = new Complex(1.0, 0.5517725944519043);
      complex8.readResolve();
      complex0.equals(complex6);
      try { 
        complex6.nthRoot((-2578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,578
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(942.8004653917, 942.8004653917);
      Complex complex1 = complex0.tanh();
      Complex.valueOf(0.0);
      complex1.divide(complex0);
      Complex complex2 = complex0.multiply((-2045222521));
      complex2.acos();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(3.8689717448064913);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.log();
      Complex complex5 = complex2.divide(7.346695111950683E-4);
      complex5.getArgument();
      complex4.tanh();
      complex3.toString();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2041.44460123218));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide((-2041.44460123218));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.log();
      complex0.toString();
      Complex complex5 = new Complex(2334.750955116041, 5980.9999561);
      Complex complex6 = complex5.reciprocal();
      complex4.multiply(2334.750955116041);
      complex6.exp();
      complex3.asin();
      complex1.readResolve();
      Object object0 = complex5.readResolve();
      complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.divide(7.346695111950683E-4);
      complex2.NaN.multiply(complex1);
      complex2.sqrt();
      Complex complex3 = complex1.log();
      complex3.reciprocal();
      Complex complex4 = complex1.multiply(7.346695111950683E-4);
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.I;
      complex6.asin();
      complex5.readResolve();
      complex4.equals(complex0);
      complex0.nthRoot(918);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 2.414213562373095);
      Complex complex1 = complex0.subtract(2.414213562373095);
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = Complex.valueOf(1296.0734938844741, (-61.114213562373095));
      complex1.toString();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex1.divide(complex5);
      complex7.abs();
      Complex complex8 = Complex.NaN;
      complex8.getReal();
      Complex complex9 = Complex.valueOf(0.0, 1.1901862840583523E-7);
      Complex complex10 = complex6.subtract(complex3);
      Complex complex11 = complex9.createComplex(61.114213562373095, 1.1901862840583523E-7);
      complex8.tanh();
      complex0.multiply(complex1);
      Complex complex12 = complex4.asin();
      Complex.valueOf((-1453.140584285), 1.9848570823669434);
      complex1.getArgument();
      complex2.sinh();
      complex10.getArgument();
      complex3.getReal();
      Complex complex13 = Complex.NaN;
      complex13.multiply(complex12);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-59.7), 2.414213562373095);
      Complex complex1 = complex0.subtract(2.414213562373095);
      complex0.ZERO.exp();
      Complex complex2 = Complex.ONE;
      complex2.ONE.toString();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = Complex.valueOf(0.0, (-59.7));
      complex4.ZERO.abs();
      complex1.abs();
      complex3.pow(2.414213562373095);
      complex3.asin();
      Complex complex5 = Complex.valueOf((-1336.5237623316348));
      complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 2.414213562373095);
      Complex complex1 = complex0.subtract(2.414213562373095);
      complex0.ZERO.exp();
      Complex complex2 = complex0.tan();
      complex2.ONE.toString();
      complex2.add(complex1);
      Complex complex3 = Complex.valueOf(0.0, 6.283185307179586);
      complex3.ONE.abs();
      complex1.pow(0.0);
      complex1.asin();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.asin();
      complex1.ZERO.multiply(Double.NaN);
      complex1.ONE.abs();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.negate();
      complex4.NaN.sin();
      complex3.asin();
      int int0 = (-1538);
      try { 
        complex3.INF.nthRoot((-1538));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,538
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow(463.30533664);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.INF.add((-650.14905129492));
      complex0.I.sinh();
      complex2.ZERO.hashCode();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.ZERO.multiply(0.0);
      Complex complex7 = Complex.valueOf((-1453.140584285), 463.30533664);
      complex7.toString();
      Complex complex8 = complex4.I.pow(complex7);
      Complex complex9 = complex8.INF.sinh();
      Complex complex10 = complex9.INF.acos();
      complex9.ONE.divide(complex3);
      complex0.abs();
      complex0.getReal();
      Complex.valueOf(Double.NaN, 1.1901862840583523E-7);
      Complex complex11 = complex0.subtract(complex5);
      complex3.NaN.createComplex((-1122.429553), 1.9848570823669434);
      complex11.ONE.tanh();
      Complex complex12 = complex3.multiply(complex6);
      complex7.asin();
      Complex.valueOf((-1453.140584285), 1.9848570823669434);
      complex12.ONE.getArgument();
      complex5.sinh();
      complex5.getArgument();
      complex5.getReal();
      complex10.multiply(complex8);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = (-257.76133);
      double double1 = 533.8028999;
      Complex complex0 = Complex.valueOf((-257.76133), 533.8028999);
      complex0.I.getField();
      complex0.INF.getField();
      Complex complex1 = Complex.valueOf(533.8028999, (-2306.323379205512));
      complex0.abs();
      complex1.sin();
      Complex complex2 = complex0.multiply((-865));
      try { 
        complex2.ZERO.nthRoot((-865));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -865
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.createComplex((-571.2973555362), 1.9848570823669434);
      Complex complex7 = Complex.valueOf((-1122.429553));
      Complex complex8 = complex7.tanh();
      complex8.ONE.atan();
      complex4.nthRoot(1066);
      Complex complex9 = new Complex(3045.1123306651);
      complex9.multiply(complex6);
      Complex complex10 = Complex.valueOf((double) 0, (-1122.429553));
      complex2.getArgument();
      complex7.sinh();
      complex0.getArgument();
      complex7.getReal();
      complex7.multiply(complex5);
      complex9.acos();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow(463.30533664);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.subtract(complex2);
      Complex.valueOf((-3.00015852582934E-8), (-2386.9));
      Complex complex4 = complex3.pow((-2386.9));
      Complex complex5 = complex2.add((-3.00015852582934E-8));
      Complex complex6 = complex2.sin();
      complex6.hashCode();
      complex4.atan();
      Complex.valueOf((-2386.9));
      complex5.pow((-3.00015852582934E-8));
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(890.109132, Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
      complex1.exp();
      Complex complex3 = complex2.add(complex1);
      complex3.createComplex((-2267.4491), 890.109132);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      complex1.sqrt();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex1.INF.tan();
      complex3.I.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = new Complex(0.5045560598373413);
      complex5.abs();
      complex2.getReal();
      Complex.valueOf(0.5045560598373413, 868.5);
      complex2.subtract(complex4);
      Complex complex6 = complex1.createComplex(0.5045560598373413, 0.9995471396210655);
      complex6.tanh();
      Complex complex7 = Complex.I;
      complex7.nthRoot(1045);
      Complex.valueOf(672.5, 4.3529009584292495E52);
      complex1.getArgument();
      Complex complex8 = Complex.ONE;
      complex8.sinh();
      Complex complex9 = Complex.INF;
      complex9.getArgument();
      complex5.getReal();
      complex3.multiply(complex7);
      complex7.acos();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-257.76133), 533.8028999);
      complex0.I.getField();
      complex0.INF.getField();
      Complex complex1 = Complex.valueOf(533.8028999, (-2306.323379205512));
      Complex complex2 = complex1.ZERO.subtract(0.0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.divide((-1905.8));
      complex1.getArgument();
      complex2.tanh();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt();
      complex0.NaN.atan();
      Complex complex3 = complex1.INF.tan();
      complex3.I.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.sqrt();
      complex2.log();
      complex4.toString();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.reciprocal();
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex0.exp();
      complex4.asin();
      complex2.readResolve();
      complex0.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      complex1.abs();
      Complex complex2 = Complex.valueOf((-5201.145216434));
      Complex complex3 = complex2.NaN.add((-5201.145216434));
      Complex complex4 = complex0.sinh();
      complex3.NaN.readResolve();
      Complex complex5 = complex4.I.pow(0.0);
      complex0.readResolve();
      complex0.hashCode();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex7.INF.divide(complex0);
      complex8.ZERO.multiply(0);
      Complex complex9 = complex0.divide(complex5);
      complex9.sqrt1z();
      Complex complex10 = Complex.valueOf(0.0);
      complex10.readResolve();
      Complex complex11 = complex0.log();
      complex11.I.acos();
      Complex complex12 = complex11.cosh();
      complex12.ZERO.nthRoot(3011);
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex13.INF.divide(complex3);
      complex14.I.log();
      complex13.NaN.readResolve();
      complex10.pow(0.0);
      complex5.add((-5201.145216434));
      complex7.multiply(0.0);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow(463.30533664);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.INF.add((-650.14905129492));
      complex2.ZERO.hashCode();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.I.cosh();
      complex5.ZERO.multiply(0.0);
      double double0 = (-1453.140584285);
      Complex complex6 = Complex.valueOf((-1453.140584285), 463.30533664);
      complex6.toString();
      Complex complex7 = complex4.I.pow(complex6);
      Complex complex8 = complex7.INF.sinh();
      complex8.INF.acos();
      complex8.ONE.divide(complex3);
      complex0.abs();
      complex0.getReal();
      Complex.valueOf(Double.NaN, 1.1901862840583523E-7);
      Complex complex9 = complex0.subtract(complex5);
      double double1 = 1.9848570823669434;
      complex3.NaN.createComplex((-1122.429553), 1.9848570823669434);
      complex9.ONE.tanh();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, (-201.95239733891407));
      complex0.NaN.conjugate();
      complex1.ONE.negate();
      complex0.pow(complex1);
      complex0.subtract(0.5729197263717651);
      Complex.valueOf((-1503.3059));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex1.I.nthRoot(979);
      complex1.ONE.multiply((-1.01738658407525E-7));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      complex1.INF.readResolve();
      Complex complex2 = complex0.conjugate();
      complex2.getField();
      complex1.toString();
      complex1.subtract((-1.0813801247641613E-8));
      complex1.isNaN();
      complex2.isInfinite();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      complex0.INF.acos();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.conjugate();
      complex3.ONE.acos();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex1.sinh();
      complex3.ZERO.tanh();
      Complex complex6 = complex5.sqrt1z();
      complex3.getArgument();
      Complex complex7 = complex4.add(-0.0);
      Complex complex8 = complex7.sqrt();
      complex8.ONE.atan();
      complex1.multiply((-4004));
      complex6.toString();
      Complex.valueOf(-0.0);
      complex2.isNaN();
      complex7.add((double) (-4004));
      complex6.getArgument();
      complex1.multiply((-569.9917339077842));
      complex8.acos();
      complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(890.109132, Double.POSITIVE_INFINITY);
      complex0.acos();
      complex0.subtract((-1616.959564));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.ONE.pow(complex1);
      complex2.ZERO.reciprocal();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex0.NaN.tanh();
      complex4.I.getField();
      complex4.NaN.divide((-9.482976524690715E-10));
      complex0.ONE.acos();
      Complex complex6 = complex2.I.add(complex0);
      Complex complex7 = complex0.subtract(complex1);
      complex7.INF.add(64.0);
      complex2.getArgument();
      complex6.abs();
      complex2.cosh();
      Complex.valueOf(0.6155023574829102);
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex8.createComplex((-1538.6084463), 1887.01);
      complex9.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.add((-3280.72));
      complex0.pow(0.0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex1.INF.tan();
      complex4.I.divide(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      complex2.log();
      Complex complex5 = complex0.pow(complex2);
      complex5.I.divide(0.0);
      complex1.getArgument();
      complex3.tanh();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.cos();
      complex3.divide(complex0);
      complex1.isNaN();
      complex1.acos();
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.sqrt1z();
      complex5.exp();
      complex5.add(complex4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1905.8));
      complex0.ONE.cosh();
      Complex complex1 = complex0.tanh();
      complex1.I.getArgument();
      complex1.getReal();
      Complex complex2 = Complex.valueOf(0.0, 4123.3);
      Complex.valueOf(0.0, 0.0);
      complex0.getImaginary();
      complex0.getImaginary();
      complex2.pow((-1905.8));
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.nthRoot(1424);
      Complex complex1 = complex0.INF.reciprocal();
      complex0.toString();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.sqrt();
      complex1.ONE.nthRoot(1424);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex2.ONE.createComplex(1424, 1424);
      Complex complex6 = complex1.reciprocal();
      complex2.readResolve();
      Object object0 = new Object();
      complex1.equals(object0);
      complex2.getImaginary();
      complex3.sqrt();
      Complex complex7 = complex6.add(complex3);
      Complex complex8 = complex7.divide(complex5);
      complex5.exp();
      Complex complex9 = complex5.subtract((double) 1424);
      complex9.NaN.createComplex(1424, Double.NaN);
      complex4.hashCode();
      Complex complex10 = complex8.cos();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.536961912893389E-9);
      Complex complex1 = complex0.ONE.sinh();
      complex0.divide(2.536961912893389E-9);
      complex1.exp();
      Complex complex2 = complex1.log();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = Complex.valueOf(0.0);
      complex1.ZERO.divide(complex2);
      complex0.multiply(228);
      complex0.acos();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(631.89);
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.ONE.asin();
      Complex complex3 = Complex.valueOf(631.89, 631.89);
      Complex complex4 = complex1.ONE.negate();
      Complex complex5 = complex1.NaN.reciprocal();
      complex5.ZERO.tan();
      complex0.isNaN();
      complex0.nthRoot(652);
      Complex complex6 = complex0.add(631.89);
      complex6.tan();
      Complex complex7 = complex0.conjugate();
      complex7.ONE.add(complex3);
      Complex complex8 = complex7.reciprocal();
      complex0.pow(complex4);
      Complex complex9 = complex8.sinh();
      Complex complex10 = new Complex(652);
      complex10.sqrt1z();
      Complex complex11 = complex9.I.subtract(complex10);
      Complex complex12 = complex8.tanh();
      complex12.NaN.pow(complex1);
      complex9.abs();
      complex12.log();
      complex11.tanh();
      complex9.divide(complex7);
      complex0.negate();
      complex0.abs();
      complex5.isInfinite();
      Complex.valueOf(0.4556184411048889, 1.1752011936438014);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-2207.686), 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.divide(complex0);
      complex2.ONE.multiply(234);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.cosh();
      complex4.NaN.conjugate();
      Complex complex5 = Complex.valueOf((-2207.686));
      Complex complex6 = complex2.acos();
      Complex complex7 = Complex.valueOf(3.0144088843073416E-40);
      complex5.readResolve();
      complex7.I.multiply(2239);
      complex7.I.tanh();
      complex2.ZERO.pow(complex5);
      complex7.divide(complex6);
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.pow(286.9728);
      Complex complex2 = complex0.cosh();
      complex2.NaN.multiply(0);
      complex2.cos();
      complex1.hashCode();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.negate();
      complex4.I.subtract((-809.071697343));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      complex0.subtract(complex1);
      Complex complex2 = complex1.ONE.pow((-3.00015852582934E-8));
      complex0.ZERO.add(2139.0);
      complex2.sin();
      complex2.NaN.hashCode();
      complex0.atan();
      Complex complex3 = complex1.pow((-3507.07));
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-257.76133), 533.8028999);
      complex0.I.getField();
      complex0.INF.getField();
      Complex complex1 = Complex.valueOf(533.8028999, (-2306.323379205512));
      Complex complex2 = complex1.ZERO.subtract(0.0);
      complex0.toString();
      Complex complex3 = complex0.reciprocal();
      complex3.ONE.multiply(533.8028999);
      complex0.exp();
      complex3.asin();
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, (-4377.795411));
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex0.add(complex1);
      complex0.toString();
      Complex complex4 = complex3.conjugate();
      complex0.getReal();
      Complex complex5 = complex1.multiply(complex4);
      complex4.INF.reciprocal();
      complex2.I.add(0.0);
      complex4.I.getField();
      Complex complex6 = complex5.ZERO.multiply(1175);
      complex6.exp();
      Complex complex7 = complex1.log();
      complex4.ONE.hashCode();
      Complex complex8 = Complex.NaN;
      complex3.exp();
      Complex complex9 = complex2.INF.subtract(complex5);
      complex9.ONE.getArgument();
      complex5.add(complex8);
      complex3.getImaginary();
      complex0.getArgument();
      Complex complex10 = complex8.sinh();
      complex10.ZERO.sqrt();
      Complex complex11 = complex3.multiply(complex2);
      Complex complex12 = complex11.ZERO.asin();
      complex11.NaN.log();
      complex7.createComplex(0.0, 64.3);
      complex12.sqrt();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(2.68, 2.68);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      complex1.readResolve();
      complex2.NaN.toString();
      complex0.INF.sin();
      complex0.abs();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      complex3.ZERO.getField();
      complex2.divide(complex3);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.sqrt1z();
      complex0.ZERO.multiply(0);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.exp();
      complex1.ZERO.cos();
      complex2.I.getField();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.I.cos();
      complex2.NaN.cosh();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.divide(2035.84793392704);
      complex5.I.abs();
      Complex complex7 = complex6.NaN.multiply((-1062.01));
      Complex complex8 = complex5.subtract((-2784.59));
      complex1.pow(complex8);
      complex8.sinh();
      complex4.pow(2035.84793392704);
      Complex complex9 = complex0.exp();
      complex9.INF.subtract((-2784.59));
      complex7.acos();
      Complex.valueOf((-91.59625), (-1062.01));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-449));
      complex0.I.hashCode();
      Complex complex2 = complex0.subtract(6.283185307179586);
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex2.I.sqrt();
      complex3.ONE.add((double) (-449));
      complex2.add(2390.17116);
      complex3.reciprocal();
      Complex complex4 = Complex.valueOf(0.0, 973.57927086426);
      complex1.add(complex0);
      try { 
        complex4.NaN.nthRoot((-2131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,131
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
      Complex complex1 = Complex.valueOf(847.8, 847.8);
      Complex complex2 = complex0.ONE.sqrt();
      complex2.ONE.exp();
      complex1.INF.add(847.8);
      complex1.INF.cosh();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = 2912.235489813883;
      Complex complex0 = Complex.valueOf(2912.235489813883, 2912.235489813883);
      complex0.ZERO.toString();
      complex0.getImaginary();
      complex0.getImaginary();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1043.8836), (-1043.8836));
      Complex complex1 = Complex.valueOf((-1043.8836), 778.93);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      complex0.INF.sqrt();
      Complex complex3 = complex0.ZERO.subtract(0.0);
      Complex complex4 = complex0.sqrt();
      Complex.valueOf(0.0);
      complex1.readResolve();
      complex0.INF.getArgument();
      Complex complex5 = complex1.asin();
      complex2.sinh();
      Complex complex6 = Complex.valueOf((-309.48874716), 0.0);
      Complex complex7 = complex6.log();
      complex7.ONE.createComplex(0.0, (-20.0));
      complex5.hashCode();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex4.log();
      complex9.I.pow((-1.0));
      Complex complex10 = complex6.atan();
      Complex complex11 = complex10.ONE.negate();
      complex11.readResolve();
      complex5.readResolve();
      Complex complex12 = complex8.cosh();
      complex12.asin();
      complex3.getArgument();
      Complex complex13 = complex3.tanh();
      complex13.multiply(2.5066452026367188);
      complex8.tanh();
      complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(2418.27191329169, 2418.27191329169);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.I.sqrt1z();
      complex2.ZERO.add(0.0);
      complex1.reciprocal();
      complex2.ZERO.conjugate();
      complex2.ZERO.readResolve();
      Complex complex3 = complex1.ONE.cos();
      complex3.ONE.getField();
      complex3.ZERO.getArgument();
      complex3.INF.sinh();
      Complex complex4 = complex3.ONE.subtract(complex0);
      complex0.ZERO.toString();
      complex0.INF.abs();
      Complex complex5 = complex0.asin();
      complex4.ONE.conjugate();
      complex5.hashCode();
      complex4.getArgument();
      complex5.getField();
      try { 
        complex1.nthRoot((-677));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -677
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex complex3 = complex2.I.subtract(0.0);
      complex3.INF.toString();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.pow(0.034552380442619324);
      complex5.hashCode();
      complex4.cos();
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getImaginary();
      complex0.reciprocal();
      complex0.log();
      Complex complex1 = complex0.tanh();
      complex0.getField();
      complex1.createComplex((-81.1), 0.0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getArgument();
      complex0.ONE.toString();
      Complex complex1 = complex0.subtract(0.0);
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      complex2.I.sin();
      complex0.ZERO.reciprocal();
      Complex complex3 = complex2.atan();
      complex3.NaN.subtract(complex1);
      complex3.ZERO.createComplex(0.0, 0.0);
      complex2.abs();
      complex2.getArgument();
      complex1.getImaginary();
      complex3.sqrt();
      complex0.negate();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1183.0846));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.acos();
      assertFalse(complex3.isInfinite());
      
      complex1.toString();
      Complex complex4 = complex2.I.divide(complex0);
      Complex complex5 = complex0.ONE.conjugate();
      Complex complex6 = complex4.INF.tanh();
      complex6.ZERO.createComplex(1097.9944859260831, (-1183.0846));
      Complex complex7 = complex1.NaN.cosh();
      Complex complex8 = complex0.ZERO.subtract(complex2);
      Complex complex9 = complex2.INF.negate();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex2.divide((-1183.0846));
      Complex complex12 = complex8.atan();
      complex12.NaN.add(complex0);
      Complex complex13 = complex12.sqrt1z();
      assertEquals(2.1602624927729328E-16, complex13.getReal(), 0.01);
      
      complex12.add(complex10);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      Complex complex14 = complex8.I.sin();
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex1.reciprocal();
      Complex complex16 = complex7.subtract((-1319.0204872684978));
      complex16.NaN.add(complex9);
      complex12.exp();
      Complex complex17 = complex15.sqrt();
      assertEquals((-0.029073150694464173), complex17.getImaginary(), 0.01);
      
      Complex complex18 = Complex.valueOf(902.607098, (-2338.7));
      assertEquals((-2338.7), complex18.getImaginary(), 0.01);
      
      Complex complex19 = complex8.exp();
      assertTrue(complex19.equals((Object)complex16));
      
      Complex complex20 = complex11.pow(902.607098);
      assertEquals(0.46614919281030576, complex20.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex5));
      
      Complex complex21 = Complex.valueOf(20.0);
      Complex complex22 = complex15.multiply(complex21);
      assertEquals((-0.016904961826060452), complex22.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = null;
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-2127.879833175504), (-2127.879833175504));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.INF.multiply((-20.0));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.NaN.add(complex1);
      Complex complex6 = complex0.INF.subtract((-236.2316239938988));
      Complex complex7 = complex6.add(complex4);
      Complex complex8 = complex0.subtract(complex4);
      assertEquals((-2127.879833175504), complex8.getImaginary(), 0.01);
      assertEquals((-2128.879833175504), complex8.getReal(), 0.01);
      
      Complex.valueOf((-2127.879833175504));
      Complex complex9 = (Complex)complex4.readResolve();
      assertEquals(1.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex1.log();
      Complex complex11 = Complex.valueOf((-2127.879833175504), 0.0);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex0.sqrt();
      assertEquals((-50.681142214597436), complex12.getImaginary(), 0.01);
      assertEquals(20.992816461845855, complex12.getReal(), 0.01);
      
      Complex complex13 = complex3.tanh();
      assertSame(complex13, complex10);
      assertTrue(complex3.equals((Object)complex7));
      assertSame(complex2, complex5);
      
      Complex complex14 = complex1.add(0.0);
      assertSame(complex14, complex1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.multiply(103.0);
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(2060.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = complex0.pow((-435.0742590399398));
      Complex complex2 = complex1.tan();
      assertEquals(1.557407724654902, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.add(complex0);
      assertEquals(2.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = complex0.ONE.atan();
      complex0.ZERO.sqrt();
      complex0.toString();
      Complex complex2 = complex1.INF.atan();
      complex0.readResolve();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex4.ZERO.sinh();
      complex5.NaN.subtract(complex2);
      int int0 = (-1766);
      complex5.ZERO.exp();
      try { 
        complex5.I.nthRoot((-1766));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,766
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-144.5661));
      complex0.getReal();
      Complex complex1 = complex0.multiply((-144.5661));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.tan();
      complex3.ONE.pow(3981.64714629319);
      assertEquals(0.05288716166006881, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex0.acos();
      assertEquals((-5.666872060660274), complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex2.pow((-144.5661));
      Complex complex7 = complex6.pow((-144.5661));
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      
      complex4.NaN.subtract(0.0);
      Complex complex8 = complex6.NaN.tan();
      assertTrue(complex8.isNaN());
      
      Complex complex9 = complex6.add(complex4);
      Complex complex10 = complex9.reciprocal();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals((-4.818164595573059E-5), complex10.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      complex2.getImaginary();
      assertFalse(complex0.equals((Object)complex4));
  }
}
