/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:46:22 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1181.7266, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex((-1183.495721148381), 7.573375369829243E-8);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.add(complex0);
      complex3.multiply(complex2);
      Complex complex5 = new Complex(8.243511389338205E-9, (-2211.11));
      complex2.tan();
      Complex complex6 = new Complex((-1183.495721148381), 8.243511389338205E-9);
      complex3.multiply(complex2);
      Complex complex7 = Complex.I;
      complex2.nthRoot(1209);
      complex4.asin();
      Complex complex8 = complex7.multiply((-2040));
      Complex complex9 = complex8.sin();
      complex3.abs();
      complex1.multiply((-2040));
      complex9.add(complex2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-1.0948439298090806), (-14.0));
      Complex complex1 = new Complex((-1.0948439298090806), (-14.0));
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex((-14.0), 2.7182817459106445);
      Complex complex4 = new Complex((-14.0), 0.003081721977698468);
      complex2.multiply(complex4);
      Complex complex5 = new Complex((-1.0948439298090806), (-1.0948439298090806));
      Complex complex6 = new Complex(0.003081721977698468, (-20.0));
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply((-925066146));
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex(1877.758, 0.0);
      Complex complex4 = complex3.tan();
      Complex complex5 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.multiply(complex2);
      complex3.nthRoot(1);
      complex6.asin();
      Complex complex7 = complex2.log();
      Complex complex8 = Complex.INF;
      complex7.multiply(0);
      complex7.sin();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.negate();
      complex0.ONE.hashCode();
      Complex complex4 = complex3.INF.add(complex0);
      complex4.NaN.conjugate();
      complex3.readResolve();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.pow(complex2);
      complex6.ONE.sqrt1z();
      Complex complex7 = complex2.sqrt1z();
      complex5.NaN.cosh();
      Complex complex8 = complex6.ONE.cos();
      Complex.valueOf((-7.955085231106037E-8), 0.6032907962799072);
      complex6.add(Double.NaN);
      Complex complex9 = complex5.createComplex(589.0390149, (-1.0));
      complex4.cosh();
      complex7.pow(complex0);
      Complex complex10 = complex9.negate();
      complex4.add(complex10);
      complex8.divide(0.7071067811865475);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.I;
      complex3.abs();
      Complex complex5 = complex3.sin();
      complex3.sin();
      complex1.createComplex(1.1188538074493408, 0.0);
      complex3.subtract((-504.6765));
      Complex complex6 = Complex.ONE;
      complex4.getArgument();
      Complex complex7 = Complex.NaN;
      complex0.pow(complex5);
      complex3.tan();
      complex3.multiply(2107);
      Complex complex8 = Complex.valueOf(Double.NaN, 2042.55663067);
      complex2.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = new Complex(0.0, 1170.1);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.negate();
      complex3.NaN.multiply((-925066146));
      Complex complex4 = complex0.asin();
      complex4.I.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex(1170.1, 1877.758);
      Complex complex7 = new Complex(0.0, (-1122.253789988241));
      Complex complex8 = complex7.multiply(complex2);
      complex8.nthRoot(3519);
      Complex complex9 = complex5.asin();
      complex9.multiply(1277);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3067.49129125, 3067.49129125);
      complex0.ONE.sin();
      Complex complex1 = complex0.sinh();
      complex1.ONE.cos();
      complex1.I.getField();
      complex0.multiply(727);
      Complex complex2 = Complex.valueOf(5019.99967719, 3067.49129125);
      complex0.NaN.negate();
      Complex complex3 = complex2.INF.pow(complex0);
      complex3.INF.divide(complex0);
      Complex complex4 = complex0.sqrt1z();
      complex4.ZERO.createComplex(5019.99967719, 1.5367645598839362E247);
      Complex complex5 = Complex.valueOf((-20.0), 5019.99967719);
      complex5.reciprocal();
      complex0.exp();
      complex5.conjugate();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf((-20.0), (double) 1868);
      Complex complex4 = complex2.reciprocal();
      complex2.readResolve();
      Complex complex5 = complex4.subtract((-6606.03504041572));
      complex5.isNaN();
      complex3.readResolve();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.ONE;
      complex3.isInfinite();
      complex3.tanh();
      Complex complex8 = Complex.ZERO;
      complex8.nthRoot(1078);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-584.3), (-584.3));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.createComplex(0.0, (-584.3));
      Complex complex4 = new Complex(3368.873, 277982.1913855061);
      Complex complex5 = complex4.subtract((-1784.3403447620635));
      complex1.divide(complex3);
      complex5.getArgument();
      Complex complex6 = Complex.NaN;
      complex6.ONE.getArgument();
      complex5.pow(complex3);
      complex3.tan();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2835.745), (-2835.745));
      complex0.INF.negate();
      complex0.ONE.getField();
      complex0.acos();
      Complex complex1 = Complex.ZERO;
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.subtract(complex1);
      complex4.log();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex5.add(complex6);
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = Complex.NaN;
      complex10.multiply((-155.948747474));
      Complex complex11 = complex5.cosh();
      complex8.reciprocal();
      complex10.atan();
      complex3.pow(complex10);
      Complex complex12 = complex8.cos();
      complex5.subtract((-155.948747474));
      complex7.cosh();
      complex7.abs();
      complex9.abs();
      complex10.sin();
      Complex complex13 = complex10.multiply(complex5);
      Complex complex14 = complex8.sin();
      Complex complex15 = Complex.INF;
      complex15.createComplex(1.4380402565002441, (-969.4827272699622));
      Complex complex16 = complex11.subtract(0.38109784554181547);
      complex16.divide(complex13);
      complex14.getArgument();
      Complex complex17 = Complex.NaN;
      complex17.pow(complex3);
      complex8.tan();
      complex4.tan();
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1666.31872578), 5.896786161387733E242);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.multiply((-1666.31872578));
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.I;
      complex6.ZERO.asin();
      complex6.hashCode();
      complex2.abs();
      complex5.getImaginary();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex2.subtract(5.896786161387733E242);
      complex8.equals("");
      Complex complex10 = complex2.asin();
      complex10.ZERO.add(complex9);
      complex1.getField();
      Complex complex11 = new Complex(5.896786161387733E242, (-1666.31872578));
      complex0.pow(complex10);
      complex3.negate();
      Complex complex12 = complex3.asin();
      Complex complex13 = complex2.subtract(complex9);
      complex1.multiply(complex12);
      complex7.divide((-1666.31872578));
      complex3.sqrt1z();
      complex5.subtract(complex13);
      complex12.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.readResolve();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.add(complex2);
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.tanh();
      complex5.hashCode();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex6.abs();
      complex4.getImaginary();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex8.subtract(0.0);
      complex9.equals(complex6);
      complex8.asin();
      complex5.getField();
      Complex complex10 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex11 = complex3.pow(complex10);
      complex9.negate();
      Complex complex12 = complex5.asin();
      complex7.subtract(complex8);
      complex4.multiply(complex1);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex9.sqrt1z();
      complex11.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.log();
      complex0.tan();
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.ONE;
      complex3.add(complex4);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.multiply(20.0);
      Complex complex8 = complex6.cosh();
      complex1.reciprocal();
      Complex complex9 = complex5.atan();
      Complex complex10 = complex7.pow(complex6);
      complex10.cos();
      complex3.subtract((-155.948747474));
      complex5.cosh();
      complex10.abs();
      complex3.abs();
      complex3.sin();
      complex1.multiply(complex2);
      Complex complex11 = complex0.sin();
      Complex complex12 = Complex.INF;
      Complex complex13 = Complex.ONE;
      complex13.createComplex(Double.NaN, (-969.4827272699622));
      complex11.subtract((-42.86717549));
      complex6.divide(complex9);
      complex13.getArgument();
      Complex complex14 = Complex.NaN;
      complex12.pow(complex13);
      complex8.tan();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2921.0, 2921.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.log();
      complex2.hashCode();
      complex1.divide(complex0);
      Complex complex3 = Complex.valueOf((-5418.2163185908), (-640406.1702110813));
      complex1.reciprocal();
      complex3.readResolve();
      Complex complex4 = complex2.subtract((-640406.1702110813));
      complex2.isNaN();
      complex2.readResolve();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.ONE;
      complex1.isNaN();
      Complex complex7 = complex4.tanh();
      Complex.valueOf((-170.5695));
      complex4.equals(complex0);
      complex7.multiply((-1.0));
      complex0.exp();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-565.8649000473));
      complex0.getImaginary();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.equals((Object) null);
      complex2.asin();
      complex1.getField();
      Complex complex4 = new Complex(2.3106230530437902E-7, 1519.1596715798);
      Complex complex5 = complex2.pow(complex0);
      complex4.negate();
      Complex complex6 = new Complex((-565.8649000473));
      Complex complex7 = complex6.asin();
      Complex complex8 = new Complex((-3074.8), 1519.1596715798);
      complex4.subtract(complex8);
      complex7.multiply(complex5);
      complex1.divide(2779.219910104);
      complex1.sqrt1z();
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Object object0 = complex0.INF.readResolve();
      ((Complex) object0).ONE.divide(complex0);
      Complex complex2 = complex1.INF.add(complex0);
      complex2.NaN.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.cosh();
      Complex complex3 = complex0.NaN.tanh();
      complex0.hashCode();
      complex1.abs();
      complex0.getImaginary();
      Complex complex4 = complex0.sqrt();
      complex4.NaN.asin();
      complex2.NaN.subtract((-144.1));
      complex3.equals(complex1);
      Complex complex5 = complex4.asin();
      complex5.getField();
      Complex complex6 = new Complex(1519.1596715798, Double.POSITIVE_INFINITY);
      complex0.pow(complex6);
      // Undeclared exception!
      complex1.nthRoot(944679875);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.INF.readResolve();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.NaN.multiply(Double.POSITIVE_INFINITY);
      complex3.NaN.getArgument();
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex0.NaN.tanh();
      complex0.hashCode();
      complex1.abs();
      complex0.getImaginary();
      Complex complex6 = complex0.sqrt();
      complex6.NaN.asin();
      complex2.NaN.subtract((-144.1));
      complex5.equals(complex1);
      Complex complex7 = complex6.asin();
      complex7.getField();
      Complex complex8 = new Complex(360.7, Double.POSITIVE_INFINITY);
      Complex complex9 = complex0.pow(complex8);
      Complex complex10 = complex1.negate();
      complex0.asin();
      complex10.multiply(complex2);
      complex4.divide(1.0);
      complex8.sqrt1z();
      complex5.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      double double0 = 0.0;
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.log();
      Complex.valueOf((double) 1906, (-1275.6887566));
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.negate();
      complex3.asin();
      complex4.subtract(complex1);
      complex2.multiply(complex1);
      Complex complex6 = complex5.divide(Double.NaN);
      complex2.sqrt1z();
      try { 
        complex6.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(2848.166148897);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = new Complex(0.0);
      complex0.equals(complex5);
      Complex complex6 = complex4.subtract(2848.166148897);
      complex4.isNaN();
      Complex complex7 = Complex.ONE;
      complex7.readResolve();
      Complex complex8 = complex3.atan();
      complex7.isInfinite();
      complex2.tanh();
      Complex complex9 = new Complex(0.0);
      complex9.nthRoot(1335);
      Complex complex10 = complex6.asin();
      complex9.hashCode();
      complex9.equals(complex2);
      Complex complex11 = complex8.subtract(20.0);
      complex1.subtract(complex10);
      complex3.divide(complex11);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(4295.6160313);
      complex2.ONE.sqrt();
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.I;
      complex4.subtract(complex3);
      Complex complex6 = complex0.log();
      complex6.tan();
      double double0 = (-20.0);
      complex6.pow(complex4);
      complex6.negate();
      complex1.asin();
      try { 
        complex4.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.ZERO.multiply(1906);
      Complex.valueOf((double) 1906, 710.84);
      Complex complex3 = complex2.NaN.sqrt();
      complex3.ONE.createComplex(1906, 0.9999999709801621);
      complex2.equals(complex1);
      complex2.multiply(99);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.log();
      complex0.hashCode();
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = Complex.valueOf((-5418.2163185908), (-5418.2163185908));
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.reciprocal();
      complex2.sqrt();
      Complex complex7 = complex1.sqrt();
      complex4.asin();
      Complex complex8 = complex5.subtract(1668.5074193176);
      complex1.equals(complex8);
      complex4.asin();
      complex0.getField();
      Complex complex9 = new Complex(2384.973146658402, 3406.7803816084);
      complex0.pow(complex3);
      Complex complex10 = complex6.negate();
      complex10.asin();
      complex2.subtract(complex4);
      Complex complex11 = new Complex((-5418.2163185908), 780.1229554284444);
      complex11.multiply(complex2);
      Complex complex12 = Complex.ONE;
      complex12.divide(0.44068679350977147);
      complex7.sqrt1z();
      complex10.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5097.401042573068);
      Complex complex1 = complex0.createComplex(5097.401042573068, 5097.401042573068);
      complex0.equals(complex1);
      complex1.ZERO.hashCode();
      complex0.INF.atan();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex4.NaN.exp();
      complex2.ZERO.subtract(complex0);
      Complex complex6 = complex0.ONE.sin();
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex3.pow(complex4);
      complex0.cos();
      complex6.subtract(0.6173312283870106);
      Complex complex9 = complex8.cosh();
      Complex complex10 = new Complex(3321.794403706368, 665.7644238);
      complex10.abs();
      complex5.abs();
      complex7.sin();
      complex4.multiply(complex8);
      Complex complex11 = complex9.sin();
      Complex complex12 = Complex.INF;
      complex3.createComplex((-2507.0), Double.NaN);
      Complex complex13 = complex11.subtract(Double.NaN);
      Complex complex14 = complex13.divide(complex1);
      complex14.getArgument();
      Complex complex15 = Complex.NaN;
      Complex complex16 = new Complex((-2507.0), 5097.401042573068);
      complex16.pow(complex8);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2921.0, 2921.0);
      complex0.ONE.getArgument();
      complex0.isNaN();
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
      Complex complex2 = complex0.asin();
      complex0.getField();
      Complex complex3 = new Complex(2921.0, (-1.0));
      complex2.pow(complex0);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.subtract(complex3);
      complex0.multiply(complex3);
      Complex complex7 = new Complex((-1.0));
      Complex complex8 = complex6.sqrt1z();
      complex8.subtract(complex1);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.reciprocal();
      complex3.equals(complex2);
      Complex complex5 = complex4.subtract(0.0);
      complex5.isNaN();
      complex4.readResolve();
      Complex complex6 = Complex.I;
      complex6.atan();
      complex2.isInfinite();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.tanh();
      complex1.nthRoot(294);
      Complex complex9 = Complex.ONE;
      complex9.asin();
      complex1.hashCode();
      complex3.equals(complex7);
      Complex complex10 = new Complex(20.0);
      Complex complex11 = complex10.subtract(2.0);
      complex11.subtract(complex0);
      complex8.divide(complex10);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.log();
      complex2.hashCode();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = Complex.valueOf(1.1918249660105651E-8, (-5418.2163185908));
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.reciprocal();
      complex3.readResolve();
      Complex complex8 = Complex.valueOf(669.228185831457, 2291212.4686951824);
      complex7.equals(complex8);
      complex6.subtract(2291212.4686951824);
      complex5.isNaN();
      complex4.readResolve();
      complex4.atan();
      complex4.isInfinite();
      complex1.tanh();
      complex5.nthRoot(503);
      complex6.hashCode();
      Complex complex9 = Complex.valueOf((double) 448, (-2380.776));
      complex5.equals(complex9);
      complex8.subtract((-5051.472476642464));
      complex7.subtract(complex7);
      complex9.cosh();
      Complex.valueOf(2291212.4686951824);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.INF.readResolve();
      Complex complex2 = complex1.INF.add(complex0);
      complex2.NaN.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.cosh();
      Complex complex3 = complex0.NaN.tanh();
      complex0.hashCode();
      complex1.abs();
      complex0.getImaginary();
      Complex complex4 = complex0.sqrt();
      complex4.sqrt();
      complex4.NaN.asin();
      Complex complex5 = complex2.NaN.subtract((-144.1));
      complex3.equals(complex1);
      Complex complex6 = complex4.asin();
      complex6.getField();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.pow(complex7);
      complex5.createComplex(1.0, Double.POSITIVE_INFINITY);
      complex5.subtract(8.558712852391182E-5);
      complex1.getArgument();
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.valueOf((-1.0269233640424235E-292), 3362.725474);
      complex6.pow(complex9);
      Complex.valueOf(5733.176363116281);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex.valueOf((-390.061798176), (-390.061798176));
      Complex complex0 = Complex.NaN;
      complex0.ONE.tan();
      Complex complex1 = complex0.ONE.negate();
      complex0.abs();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2921.0, 2921.0);
      complex0.ONE.getArgument();
      complex0.isNaN();
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.multiply(2921.0);
      complex0.cosh();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex2.pow(complex3);
      complex2.cos();
      Complex complex9 = complex7.subtract((-1867.1937));
      Complex complex10 = complex9.cosh();
      complex1.abs();
      complex8.abs();
      Complex complex11 = Complex.valueOf((-155.948747474), 1.0);
      Complex complex12 = complex11.sin();
      complex5.multiply(complex12);
      complex6.multiply(complex8);
      complex10.sin();
      complex1.createComplex(1455.0, (-1867.1937));
      Complex complex13 = Complex.valueOf(2725.4, 4295.6160313);
      complex13.subtract(1.0);
      Complex complex14 = Complex.I;
      complex14.divide(complex4);
      complex14.ONE.tanh();
      complex3.getArgument();
      complex14.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = (Complex)complex0.INF.readResolve();
      Complex complex3 = complex1.INF.add(complex0);
      Complex complex4 = complex3.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.ONE.cosh();
      Complex complex6 = complex0.NaN.tanh();
      complex0.hashCode();
      complex1.abs();
      complex0.getImaginary();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex7.NaN.asin();
      Complex complex10 = complex3.NaN.subtract((-144.1));
      complex6.equals(complex1);
      complex7.asin();
      Complex complex11 = complex8.subtract(298.4);
      complex3.cosh();
      complex2.abs();
      complex3.abs();
      Complex complex12 = complex5.sin();
      Complex complex13 = Complex.I;
      Complex complex14 = complex11.multiply(complex13);
      Complex complex15 = Complex.valueOf(967.0, Double.POSITIVE_INFINITY);
      complex15.sin();
      complex12.createComplex(0.785398147457644, 1455.0);
      complex9.subtract(Double.NaN);
      complex14.divide(complex10);
      complex6.getArgument();
      complex4.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.subtract(complex1);
      complex4.log();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex5.add(complex6);
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = Complex.NaN;
      complex10.multiply((-155.948747474));
      Complex complex11 = complex5.cosh();
      complex5.sqrt();
      complex8.reciprocal();
      complex10.atan();
      complex3.pow(complex10);
      complex8.cos();
      complex5.subtract((-155.948747474));
      complex7.cosh();
      complex7.abs();
      complex9.abs();
      complex10.sin();
      Complex complex12 = complex10.multiply(complex5);
      Complex complex13 = complex8.sin();
      Complex complex14 = Complex.INF;
      complex14.createComplex(1.4380402565002441, (-969.4827272699622));
      Complex complex15 = complex11.subtract(0.38109784554181547);
      complex15.divide(complex12);
      complex13.getArgument();
      Complex complex16 = Complex.NaN;
      complex16.pow(complex3);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(11.91462767);
      Complex complex1 = complex0.pow(11.91462767);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex1.atan();
      Complex complex3 = complex0.multiply((-1118));
      Complex complex4 = complex1.NaN.sin();
      complex4.I.add(complex2);
      Complex complex5 = complex2.ONE.conjugate();
      complex5.sinh();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex3.pow(2921.0);
      Complex.valueOf(2921.0, Double.NaN);
      Complex complex8 = complex7.INF.cos();
      complex2.acos();
      complex2.readResolve();
      complex0.readResolve();
      complex8.sqrt();
      complex1.sinh();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(2848.166148897);
      complex1.tanh();
      Complex complex2 = complex0.reciprocal();
      complex1.equals("GYr^iW1l=|2MkzX?Vq");
      Complex complex3 = Complex.valueOf(2848.166148897, (-1236.1904296521782));
      complex3.subtract(2848.166148897);
      complex0.isNaN();
      complex0.readResolve();
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.valueOf(1208.5697, Double.POSITIVE_INFINITY);
      complex5.isInfinite();
      complex4.tanh();
      complex5.nthRoot(2753);
      Complex complex6 = complex2.asin();
      complex1.hashCode();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.subtract(2848.166148897);
      Complex complex7 = new Complex(8541323.494855404, 699.9820363557694);
      complex7.subtract(complex4);
      Complex complex8 = complex4.divide(complex6);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cosh();
      complex0.hashCode();
      Complex complex2 = complex0.sqrt1z();
      complex2.readResolve();
      Complex complex3 = complex1.add(complex2);
      complex2.multiply(1.71174240676919E-4);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex2.tanh();
      complex1.hashCode();
      complex2.abs();
      complex5.getImaginary();
      Complex complex6 = complex4.sqrt();
      complex4.sqrt();
      complex3.asin();
      complex0.subtract((-193.475122454585));
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.I;
      complex8.getField();
      Complex complex9 = new Complex(Double.NaN, (-193.475122454585));
      complex9.pow(complex8);
      Complex complex10 = complex7.negate();
      Complex complex11 = complex9.asin();
      complex7.subtract(complex8);
      Complex complex12 = complex11.multiply(complex0);
      complex6.divide((-144.1));
      complex12.sqrt1z();
      Complex complex13 = new Complex(Double.NaN);
      complex10.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(4295.6160313);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.NaN.reciprocal();
      complex4.subtract(complex3);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex6.ONE.add(complex7);
      complex2.ZERO.reciprocal();
      Complex complex10 = complex3.multiply((-155.948747474));
      Complex complex11 = complex10.cosh();
      complex6.sqrt();
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex6.atan();
      complex11.pow(complex3);
      complex0.ONE.cos();
      complex6.subtract(2772.0);
      Complex complex14 = complex11.cosh();
      complex7.abs();
      complex9.abs();
      Complex complex15 = complex5.sin();
      complex15.ONE.multiply(complex11);
      complex13.sin();
      complex2.createComplex(2772.0, 1455.0);
      complex14.subtract(1455.0);
      Complex complex16 = complex14.divide(complex1);
      complex16.NaN.getArgument();
      complex8.pow(complex10);
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5097.401042573068);
      Complex complex1 = complex0.createComplex(5097.401042573068, 5097.401042573068);
      complex1.ZERO.hashCode();
      complex1.INF.add(complex0);
      complex0.atan();
      Complex complex2 = complex0.multiply(7);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.cosh();
      Complex complex5 = new Complex(7);
      complex5.exp();
      Complex complex6 = Complex.valueOf(949.0, 5097.401042573068);
      Complex complex7 = complex2.subtract(complex6);
      complex0.multiply(complex2);
      complex3.sin();
      complex1.cosh();
      complex0.getArgument();
      complex4.hashCode();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex1.reciprocal();
      complex9.isInfinite();
      Complex complex10 = complex7.cosh();
      complex0.getImaginary();
      complex8.multiply(8.792425221770645E-222);
      Complex complex11 = complex10.cos();
      Complex complex12 = new Complex(0.0);
      complex11.hashCode();
      Complex complex13 = complex4.multiply(0);
      complex13.divide(949.0);
      complex3.cosh();
      Complex complex14 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5097.401042573068);
      Complex complex1 = complex0.createComplex(5097.401042573068, 5097.401042573068);
      complex0.equals(complex1);
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.NaN;
      complex4.acos();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex3.exp();
      complex1.subtract(complex3);
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex4.sin();
      Complex complex9 = complex3.cosh();
      complex2.getArgument();
      complex9.hashCode();
      Complex complex10 = complex3.add(complex5);
      Complex complex11 = complex6.reciprocal();
      Complex complex12 = complex11.asin();
      complex2.isInfinite();
      Complex complex13 = complex7.cosh();
      complex13.getImaginary();
      complex13.multiply((double) 0);
      complex8.cos();
      Complex complex14 = complex11.asin();
      Complex complex15 = Complex.ZERO;
      complex15.hashCode();
      complex10.multiply(0);
      complex12.divide(Double.POSITIVE_INFINITY);
      complex14.cosh();
      Complex complex16 = new Complex(0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.INF.readResolve();
      Complex complex2 = complex1.INF.add(complex0);
      complex2.NaN.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.cosh();
      complex0.NaN.tanh();
      complex0.hashCode();
      complex1.abs();
      complex0.getImaginary();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.sqrt();
      complex3.NaN.asin();
      Complex complex5 = complex2.NaN.subtract((-144.1));
      Complex complex6 = new Complex(1424.7087225320236);
      complex2.multiply(780.123596352);
      complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = Complex.NaN;
      complex0.ZERO.log();
      complex0.hashCode();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex0.ZERO.nthRoot(1855);
      complex1.I.add(2.0);
      complex0.equals(complex1);
      Complex complex3 = Complex.valueOf(20.0, 0.0);
      double double0 = 1748.616;
      Complex complex4 = Complex.valueOf(1748.616, 1506.149723486213);
      complex3.add(0.0);
      complex0.pow((-448.4454251183898));
      Complex complex5 = complex1.subtract((double) 1855);
      complex0.INF.add((-1097.4236831733));
      complex5.ZERO.abs();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ZERO.log();
      complex0.cos();
      complex7.log();
      complex7.tanh();
      complex2.negate();
      try { 
        complex4.nthRoot((-1096));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,096
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tanh();
      complex2.ZERO.pow(complex0);
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex0.createComplex((-4396.7), 1.0);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = (Complex)complex5.readResolve();
      Complex complex7 = complex4.INF.subtract(complex1);
      Complex complex8 = complex5.ZERO.tanh();
      Complex complex9 = complex8.I.sinh();
      complex9.getArgument();
      complex9.ONE.sqrt();
      complex4.ZERO.nthRoot(258);
      complex3.isNaN();
      Complex complex10 = complex8.pow(complex0);
      Complex complex11 = Complex.ONE;
      complex11.cos();
      complex7.subtract(2772.0);
      Complex complex12 = complex5.cosh();
      Complex complex13 = Complex.valueOf((-4396.7));
      complex13.abs();
      Complex complex14 = new Complex(258, 258);
      complex14.abs();
      complex14.sin();
      complex1.multiply(complex13);
      complex12.sin();
      Complex complex15 = complex6.createComplex(1.0, 2772.0);
      complex4.subtract(364.86709909225857);
      complex10.divide(complex13);
      complex8.getArgument();
      complex15.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-0.38109784554181547), 1040.727);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = Complex.NaN;
      complex0.ZERO.log();
      complex0.hashCode();
      complex1.ZERO.divide(complex0);
      complex0.ZERO.nthRoot(1855);
      Complex complex2 = complex1.I.add(2.0);
      complex0.equals(complex1);
      Complex complex3 = Complex.valueOf(20.0, 0.0);
      Complex complex4 = Complex.valueOf(1748.616, 1506.149723486213);
      complex3.add(0.0);
      Complex complex5 = complex0.pow((-448.4454251183898));
      Complex complex6 = complex1.subtract((double) 1855);
      complex0.INF.add((-1097.4236831733));
      complex6.ZERO.abs();
      Complex complex7 = complex0.log();
      Complex complex8 = new Complex(20.0, 20.0);
      complex4.pow(complex0);
      complex2.negate();
      complex1.subtract(complex6);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex7.multiply(complex9);
      complex5.divide((-2669.3344));
      complex5.sqrt1z();
      complex4.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(39.77108279752079, 20.0);
      Complex complex1 = Complex.NaN;
      complex0.ZERO.log();
      complex0.hashCode();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex0.ZERO.nthRoot(1855);
      Complex complex3 = complex1.I.add(2.0);
      complex0.equals(complex1);
      Complex complex4 = Complex.valueOf(20.0, 39.77108279752079);
      Complex complex5 = complex4.add(0.0);
      complex0.pow((-448.4454251183898));
      Complex complex6 = complex1.subtract((double) 1855);
      Complex complex7 = complex0.INF.add((-1097.4236831733));
      complex6.ZERO.abs();
      Complex complex8 = complex0.log();
      complex8.ZERO.log();
      complex1.cos();
      Complex complex9 = complex0.log();
      complex9.tanh();
      complex3.I.negate();
      Complex complex10 = complex3.subtract(complex6);
      complex5.multiply(complex7);
      complex2.divide(1748.616);
      Complex complex11 = Complex.valueOf(615.6448423);
      complex11.sqrt1z();
      complex7.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.subtract(complex1);
      complex4.log();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex5.add(complex6);
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = Complex.NaN;
      complex10.multiply((-155.948747474));
      Complex complex11 = complex5.cosh();
      complex5.sqrt();
      complex8.reciprocal();
      complex10.atan();
      complex3.pow(complex10);
      complex8.cos();
      complex5.subtract(2772.0);
      complex7.cosh();
      complex7.abs();
      complex9.abs();
      complex10.sin();
      Complex complex12 = complex10.multiply(complex5);
      Complex complex13 = complex8.sin();
      Complex complex14 = Complex.INF;
      complex14.createComplex(1.4380402565002441, (-969.4827272699622));
      Complex complex15 = complex11.subtract(0.38109784554181547);
      complex15.divide(complex12);
      complex13.getArgument();
      Complex complex16 = Complex.NaN;
      complex16.pow(complex3);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.divide(complex3);
      complex4.INF.getArgument();
      complex4.ONE.sinh();
      Complex complex5 = complex1.tanh();
      complex0.pow((-1664.8716558671954));
      complex0.nthRoot(362);
      complex1.hashCode();
      complex3.tan();
      complex1.subtract((-1664.8716558671954));
      Complex complex6 = complex1.negate();
      Complex complex7 = complex5.exp();
      complex6.cosh();
      complex7.multiply((double) 362);
      Complex complex8 = Complex.I;
      complex2.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(240.26, 240.26);
      complex0.getReal();
      Complex complex2 = complex1.I.reciprocal();
      complex0.getImaginary();
      complex0.INF.abs();
      complex1.getField();
      complex2.negate();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex4.ZERO.negate();
      complex4.ZERO.sqrt();
      complex6.add((-4343.027));
      Complex complex7 = new Complex(240.26, Double.NaN);
      complex0.sin();
      complex1.multiply(236);
      complex5.negate();
      complex6.multiply(complex3);
      complex4.tan();
      complex2.multiply((-1420.6295135));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(240.26, 240.26);
      complex0.getReal();
      Complex complex2 = complex1.I.reciprocal();
      complex0.getImaginary();
      complex0.INF.abs();
      complex1.getField();
      Complex complex3 = complex1.sinh();
      complex2.subtract(complex3);
      Complex complex4 = complex2.subtract(2886.378);
      complex4.isNaN();
      complex0.readResolve();
      complex2.atan();
      complex4.isInfinite();
      complex0.tanh();
      complex3.nthRoot(294);
      Complex complex5 = complex0.asin();
      complex2.hashCode();
      Complex complex6 = Complex.ZERO;
      complex6.equals(complex1);
      complex2.subtract(20.0);
      Complex complex7 = complex5.subtract(complex3);
      complex6.divide(complex7);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = Complex.valueOf(2848.166148897);
      complex2.ONE.tanh();
      complex0.ONE.reciprocal();
      complex0.equals((Object) null);
      Complex complex3 = complex0.tan();
      complex3.negate();
      complex1.sqrt();
      complex3.add((-4343.027));
      complex2.tanh();
      Complex complex4 = new Complex(2848.166148897);
      complex4.pow(2848.166148897);
      try { 
        complex2.nthRoot((-1183));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,183
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3996.3862155590077), (-92.6112326079));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex3.NaN.multiply(1);
      Complex complex6 = complex3.reciprocal();
      complex4.hashCode();
      complex0.INF.acos();
      Complex complex7 = complex3.ONE.log();
      complex7.NaN.multiply((-3996.3862155590077));
      Complex complex8 = complex0.divide((-3996.3862155590077));
      Complex complex9 = complex8.ONE.conjugate();
      complex0.abs();
      Complex complex10 = complex4.conjugate();
      complex10.ZERO.getField();
      complex2.abs();
      Complex complex11 = Complex.NaN;
      complex6.multiply(complex11);
      Complex.valueOf(0.0, (-3996.3862155590077));
      Complex.valueOf(0.0);
      complex3.isInfinite();
      complex5.toString();
      Complex complex12 = complex1.negate();
      complex5.isNaN();
      Complex.valueOf(649.91624632, (-622.01121645));
      complex6.sqrt1z();
      Complex complex13 = complex9.tan();
      complex13.NaN.nthRoot(1);
      complex12.getImaginary();
      complex10.readResolve();
      complex11.subtract((-130.03322207));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(718.10604);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ONE.add(718.10604);
      complex0.INF.asin();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex2.ONE.sinh();
      Complex complex5 = complex0.subtract(718.10604);
      complex5.atan();
      complex0.getArgument();
      complex5.ONE.getArgument();
      complex2.ZERO.multiply(complex5);
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex6.ZERO.negate();
      complex7.ONE.multiply(0.0);
      Complex complex8 = complex1.exp();
      complex8.ZERO.multiply(17);
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex2.multiply(718.10604);
      complex10.ONE.add(0.0);
      complex4.cosh();
      complex4.ONE.hashCode();
      complex1.log();
      Complex complex11 = complex4.asin();
      complex11.INF.nthRoot(17);
      Complex complex12 = complex2.multiply(0.0);
      complex12.NaN.subtract(745.793151);
      complex9.multiply((-244.113));
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(240.26, 240.26);
      complex0.getReal();
      Complex complex2 = complex1.I.reciprocal();
      complex0.getImaginary();
      complex0.INF.abs();
      complex1.getField();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.subtract(complex3);
      complex4.ZERO.tan();
      Complex complex5 = complex4.ZERO.negate();
      complex4.ZERO.sqrt();
      complex5.add((-4343.027));
      complex5.tanh();
      complex5.ONE.pow(240.26);
      double double0 = (-1719.4);
      try { 
        complex0.ONE.nthRoot((-1183));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,183
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-825.928));
      Complex complex1 = Complex.valueOf(0.0, 1814.30323942);
      Complex complex2 = complex1.NaN.createComplex((-825.928), (-1048.88));
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex1.I.sinh();
      Complex complex6 = complex4.NaN.multiply(2870);
      Object object0 = new Object();
      complex0.INF.toString();
      complex0.equals(object0);
      Complex complex7 = complex1.asin();
      complex7.hashCode();
      complex0.multiply(1);
      complex1.isNaN();
      Complex complex8 = complex5.ONE.sinh();
      complex8.NaN.multiply(complex5);
      complex2.getReal();
      complex5.cosh();
      Complex.valueOf(0.0);
      Complex complex9 = complex1.cos();
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex9.reciprocal();
      complex11.add(complex10);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 4.388125271425036E166;
      Complex complex0 = Complex.valueOf(4.388125271425036E166, 4.388125271425036E166);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.ZERO.exp();
      complex0.ZERO.add(complex1);
      Complex complex2 = complex1.sqrt();
      complex2.NaN.reciprocal();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2921.0, 2921.0);
      complex0.ONE.getArgument();
      complex0.isNaN();
      Complex complex1 = new Complex(2147.9891136);
      complex1.ONE.multiply(0.0);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.INF.readResolve();
      Complex complex2 = complex1.INF.add(complex0);
      complex2.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex0.NaN.tanh();
      complex0.hashCode();
      complex1.abs();
      complex0.getImaginary();
      Complex complex5 = complex0.sqrt();
      complex5.sqrt();
      complex5.NaN.asin();
      complex2.NaN.subtract((-144.1));
      complex4.equals(complex1);
      Complex complex6 = complex5.asin();
      complex6.getField();
      Complex complex7 = new Complex(1519.1596715798, Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.pow(complex7);
      Complex complex9 = complex1.negate();
      complex0.asin();
      complex3.subtract(complex4);
      complex9.multiply(complex2);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex7.sqrt1z();
      complex4.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.ONE.toString();
      Complex complex3 = complex0.sqrt1z();
      complex2.ZERO.subtract(complex3);
      Complex complex4 = complex0.I.sin();
      complex3.abs();
      complex2.INF.sqrt();
      complex2.acos();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex7.INF.multiply(1);
      complex4.isInfinite();
      Complex complex9 = complex0.acos();
      complex9.NaN.multiply(1);
      complex1.getReal();
      Complex complex10 = complex1.subtract(Double.NaN);
      complex10.ONE.pow(Double.NaN);
      complex10.NaN.tan();
      Complex.valueOf(1.0, Double.NaN);
      complex2.cosh();
      complex7.sin();
      complex8.abs();
      complex8.createComplex((-20.0), Double.POSITIVE_INFINITY);
      complex3.getReal();
      Complex.valueOf((double) 1, 0.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-133.63966), (-711.3));
      complex0.cosh();
      complex0.getArgument();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.I.exp();
      complex2.ZERO.getField();
      complex0.I.readResolve();
      Complex complex4 = complex2.I.multiply(3022);
      complex2.ZERO.acos();
      Complex complex5 = complex4.ZERO.multiply(3022);
      complex5.I.divide(complex4);
      complex0.log();
      Complex complex6 = complex2.reciprocal();
      complex1.asin();
      Complex complex7 = complex6.multiply(533.42950584804);
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = new Complex(0.0, 0.0);
      complex7.NaN.add(complex9);
      complex8.ZERO.add(complex0);
      complex1.divide(1.747018414872141E-8);
      complex8.toString();
      complex0.hashCode();
      complex2.abs();
      complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1890.82687308768), (-1890.82687308768));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6214.43205, (-72.830588));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.cosh();
      complex2.NaN.exp();
      Complex complex3 = complex0.NaN.multiply(5.858546779607288E-181);
      Complex complex4 = Complex.valueOf(861.4462461, Double.POSITIVE_INFINITY);
      complex4.ONE.toString();
      complex4.NaN.abs();
      Complex complex5 = complex4.subtract(Double.POSITIVE_INFINITY);
      complex5.INF.conjugate();
      complex5.NaN.sin();
      Complex complex6 = complex5.cos();
      Complex complex7 = Complex.valueOf((-1660.5733317618128));
      complex6.I.add(complex7);
      complex4.divide(complex0);
      complex3.conjugate();
      complex4.multiply((-72.830588));
      complex1.asin();
      complex4.sinh();
      complex2.multiply(5.858546779607288E-181);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sin();
      complex2.ZERO.pow(complex0);
      complex0.ONE.sin();
      Complex complex3 = complex1.add((-1381.0));
      complex3.ZERO.log();
      complex1.equals("PX4Xao#1Y)n|9z");
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.log();
      complex0.hashCode();
      complex1.ZERO.divide(complex0);
      complex0.ZERO.nthRoot(1855);
      Complex complex3 = complex1.I.add(2.0);
      complex0.equals(complex1);
      Complex complex4 = Complex.valueOf(20.0, 0.0);
      Complex complex5 = Complex.valueOf(1748.616, 1506.149723486213);
      Complex complex6 = complex4.add(0.0);
      complex0.pow((-448.4454251183898));
      Complex complex7 = complex1.subtract((double) 1855);
      complex0.INF.add((-1097.4236831733));
      complex7.ZERO.abs();
      Complex complex8 = complex0.log();
      complex8.ZERO.log();
      complex1.cos();
      Complex complex9 = complex0.log();
      complex9.tanh();
      Complex complex10 = complex3.I.negate();
      complex3.nthRoot(1);
      complex2.isNaN();
      complex3.divide(0.0);
      complex6.divide(complex10);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-979.305));
      Complex complex2 = complex1.NaN.negate();
      complex2.abs();
      Complex complex3 = complex1.I.exp();
      complex3.NaN.conjugate();
      Complex complex4 = complex0.NaN.subtract(complex1);
      complex0.getArgument();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex0.ONE.sin();
      complex6.INF.log();
      Complex complex7 = complex5.acos();
      complex4.ONE.asin();
      Complex complex8 = complex7.INF.pow((-185.66668821122));
      Complex complex9 = complex8.tanh();
      complex1.hashCode();
      Complex complex10 = complex4.asin();
      complex10.abs();
      complex1.getArgument();
      complex10.conjugate();
      complex7.getReal();
      complex9.readResolve();
      Complex complex11 = complex2.tanh();
      complex11.getReal();
      complex7.getImaginary();
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-164.56));
      Complex complex1 = Complex.valueOf((-164.56));
      complex1.I.asin();
      complex0.readResolve();
      Complex complex2 = complex0.log();
      Complex.valueOf((-164.56), 2.0);
      Complex complex3 = complex2.I.conjugate();
      complex3.sin();
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex0.pow((-164.56));
      complex5.add((-164.56));
      complex1.isNaN();
      complex4.reciprocal();
      try { 
        complex5.nthRoot((-2189));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,189
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.INF.add(complex0);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.acos();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex2.pow(0.0);
      Complex complex10 = complex9.NaN.divide(complex2);
      complex10.toString();
      Complex complex11 = complex10.ZERO.subtract((-496.2720541657079));
      complex9.sinh();
      complex4.NaN.subtract(complex2);
      complex4.ONE.sinh();
      complex4.tanh();
      complex9.hashCode();
      Complex complex12 = complex6.tanh();
      complex12.nthRoot(37);
      complex12.isNaN();
      complex7.getArgument();
      Complex complex13 = complex3.sin();
      complex13.NaN.log();
      Complex complex14 = complex13.exp();
      complex14.ZERO.sinh();
      complex1.nthRoot(37);
      complex8.getArgument();
      complex1.acos();
      complex11.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2230.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.multiply((-6218.711812));
      Complex complex3 = complex2.subtract((-4396.2));
      complex3.NaN.sinh();
      Complex complex4 = complex1.ZERO.subtract(243.332);
      complex4.I.tanh();
      Complex complex5 = complex1.add(0.0);
      complex5.ZERO.hashCode();
      complex1.NaN.readResolve();
      complex2.ONE.abs();
      complex1.toString();
      Complex complex6 = complex2.multiply(37);
      complex6.I.multiply(complex2);
      complex1.toString();
      complex6.NaN.atan();
      Complex.valueOf((-6218.711812), 20.0);
      Complex complex7 = complex6.exp();
      complex7.I.nthRoot(1);
      complex6.toString();
      complex1.log();
      complex2.cos();
      complex5.subtract((-6218.711812));
      complex0.getArgument();
      Complex complex8 = complex2.sinh();
      complex8.ZERO.toString();
      complex2.sinh();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.ZERO.multiply(1906);
      Complex.valueOf(4.7835721669653157E-296, 710.84);
      complex2.NaN.sqrt();
      Complex complex3 = complex0.reciprocal();
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-57.103360822176), (-57.103360822176));
      try { 
        complex0.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.ZERO.negate();
      Complex complex1 = complex0.add(299.200517165898);
      Complex complex2 = complex1.INF.add(2.0);
      complex2.I.tanh();
      complex2.NaN.log();
      Complex complex3 = new Complex(299.200517165898, 2.0);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = Complex.valueOf(256.122730607099, 0.0);
      complex4.isInfinite();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(807.5408981, 807.5408981);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.subtract((-3.6149218175202596E-8));
      Complex complex3 = complex2.NaN.sin();
      complex0.toString();
      complex0.acos();
      complex2.ZERO.abs();
      complex3.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.cos();
      complex1.NaN.toString();
      Complex.valueOf((-2118.60925558), 0.0);
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex4.INF.atan();
      try { 
        complex5.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5097.401042573068);
      Complex complex1 = complex0.createComplex(5097.401042573068, 5097.401042573068);
      complex0.equals(complex1);
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex1.multiply(0);
      complex0.ONE.acos();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.NaN.exp();
      complex4.ZERO.subtract(complex0);
      Complex complex7 = complex4.INF.multiply(complex2);
      Complex complex8 = complex7.ONE.sin();
      Complex complex9 = complex8.INF.cosh();
      complex9.ZERO.getArgument();
      complex4.hashCode();
      complex1.add(complex0);
      Complex complex10 = complex4.reciprocal();
      complex0.asin();
      complex4.isInfinite();
      complex0.cosh();
      complex3.getImaginary();
      complex3.multiply(Double.NaN);
      complex0.cos();
      complex5.asin();
      complex7.hashCode();
      complex10.multiply(0);
      complex10.divide(5097.401042573068);
      complex5.cosh();
      complex6.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.tan();
      complex2.INF.createComplex((-3101.6781), 0.0);
      complex2.NaN.atan();
      complex2.ONE.reciprocal();
      Complex complex3 = complex0.sqrt1z();
      complex1.I.multiply(0.0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.NaN.multiply(359);
      Complex complex6 = complex3.cosh();
      complex3.sinh();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex4.pow(complex0);
      complex8.sqrt1z();
      complex8.ONE.pow(complex6);
      complex4.tan();
      complex7.asin();
      complex5.getArgument();
      complex0.isInfinite();
      complex1.multiply((double) 359);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.cosh();
      complex1.I.hashCode();
      complex0.ONE.cos();
      Complex complex2 = complex1.pow((-20.0));
      complex2.ZERO.readResolve();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.I.pow(0.0);
      Complex complex6 = complex3.NaN.sqrt();
      complex6.INF.getArgument();
      Complex complex7 = complex3.sqrt();
      complex7.toString();
      complex6.sqrt1z();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      complex0.nthRoot(137);
      Complex complex1 = Complex.INF;
      complex1.ONE.toString();
      Complex complex2 = complex0.pow(complex1);
      complex1.add(complex0);
      Complex complex3 = Complex.valueOf((-2978.294));
      complex0.getArgument();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex4.ZERO.multiply(137);
      complex2.ZERO.subtract(complex3);
      Complex complex6 = Complex.valueOf((double) 137);
      complex6.multiply((double) 137);
      Complex complex7 = Complex.valueOf((-2978.294));
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex9.sqrt();
      complex10.NaN.acos();
      complex2.getArgument();
      complex4.getField();
      Complex complex11 = complex8.acos();
      complex11.ZERO.reciprocal();
      complex11.conjugate();
      complex8.ZERO.atan();
      complex9.pow((-2326.2377309393755));
      complex5.sinh();
      complex8.conjugate();
      complex7.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.ONE.tanh();
      complex0.divide(329.1811880042045);
      Complex complex2 = Complex.NaN;
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-648.7282698591837), (-648.7282698591837));
      double double0 = 0.0;
      Complex complex1 = complex0.multiply(0.0);
      double double1 = 0.0;
      complex1.I.divide(0.0);
      Complex complex2 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex0.INF.cos();
      Complex complex5 = complex0.createComplex((-4396.7), 1.0);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = (Complex)complex6.readResolve();
      assertEquals((-2.2744329798929732E-4), complex7.getReal(), 0.01);
      
      complex5.INF.subtract(complex1);
      Complex complex8 = complex6.ZERO.tanh();
      Complex complex9 = complex8.I.sinh();
      complex9.getArgument();
      Complex complex10 = complex9.ONE.sqrt();
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      List<Complex> list0 = complex5.ZERO.nthRoot(258);
      assertTrue(list0.contains(complex1));
      
      complex4.isNaN();
      Complex complex11 = complex0.NaN.sqrt();
      String string0 = complex5.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      complex6.hashCode();
      complex6.getField();
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex12.tanh();
      Complex complex14 = complex0.tan();
      complex2.readResolve();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex13.pow(complex15);
      Complex complex17 = complex3.subtract(complex14);
      Complex complex18 = complex17.cos();
      complex16.readResolve();
      assertTrue(complex13.equals((Object)complex14));
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      Complex complex19 = complex8.pow(0.0);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex20 = complex11.sin();
      assertSame(complex20, complex18);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex19);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-92.07192877));
      Complex complex1 = complex0.INF.sinh();
      assertTrue(complex1.isNaN());
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(complex0.isInfinite());
      assertEquals((-92.07192877), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.log();
      complex0.ONE.divide(3647.272);
      complex0.getReal();
      Complex complex3 = complex0.sin();
      int int0 = 1;
      complex3.I.multiply(1);
      complex2.sqrt();
      complex1.INF.atan();
      Complex complex4 = complex1.divide(1.0);
      try { 
        complex4.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1277.632806002, 1277.632806002);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex0.I.add(1277.632806002);
      complex0.hashCode();
      Complex complex5 = complex3.multiply(1029);
      Complex complex6 = complex5.subtract(1277.632806002);
      Complex complex7 = complex2.sqrt();
      complex6.getImaginary();
      Complex complex8 = complex1.reciprocal();
      assertEquals((-3.91348748757174E-4), complex8.getImaginary(), 0.01);
      
      complex1.add(complex4);
      Complex complex9 = complex7.cos();
      assertEquals((-2.9997425410072192E16), complex9.getImaginary(), 0.01);
      assertEquals((-4.7501108266844584E16), complex9.getReal(), 0.01);
      
      complex0.getReal();
      Complex complex10 = complex7.asin();
      assertEquals(0.3927969476085024, complex10.getReal(), 0.01);
      
      Complex complex11 = complex5.add(complex3);
      Complex complex12 = complex6.tan();
      assertSame(complex5, complex12);
      assertSame(complex6, complex11);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-1010.218));
      Complex complex1 = complex0.subtract(939.7576);
      Complex complex2 = Complex.valueOf((-20.0), (-1708.4));
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = complex3.I.reciprocal();
      assertEquals((-1.0), complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals((-1708.4), complex2.getImaginary(), 0.01);
      
      complex0.getReal();
      complex1.hashCode();
      Complex complex5 = complex0.multiply(939.7576);
      Complex complex6 = complex5.INF.add(complex0);
      boolean boolean0 = complex1.isNaN();
      assertEquals((-959.7576), complex1.getReal(), 0.01);
      
      Complex complex7 = complex5.sqrt();
      assertEquals((-695.8236944033403), complex7.getImaginary(), 0.01);
      assertEquals(682.1843311694522, complex7.getReal(), 0.01);
      
      boolean boolean1 = complex6.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex1.ONE.exp();
      assertEquals(2.718281828459045, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.INF.negate();
      Complex complex5 = complex1.ZERO.divide(complex4);
      complex0.hashCode();
      Complex complex6 = complex1.pow(complex4);
      complex2.negate();
      complex0.divide(complex4);
      complex2.isNaN();
      double double0 = complex5.abs();
      assertSame(complex1, complex6);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.sqrt1z();
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.divide(complex4);
      complex5.INF.getArgument();
      Complex complex6 = complex5.ONE.sinh();
      assertEquals(1.1752011936438014, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex3.I.sin();
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex7.ZERO.multiply(3057);
      Complex complex10 = complex3.negate();
      assertEquals(-0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex9.multiply(complex3);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertTrue(complex11.equals((Object)complex5));
      assertTrue(complex7.isInfinite());
      
      Complex complex12 = complex4.tan();
      assertEquals(0.7615941559557649, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sqrt1z();
      complex0.INF.abs();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.I.exp();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.I.pow(0.0);
      complex4.I.multiply(complex5);
      complex0.getImaginary();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex8.I.divide(complex7);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex10 = complex8.asin();
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      complex0.getImaginary();
      Complex complex11 = new Complex(6186.027458816703, (-54.0380016));
      Complex complex12 = complex1.divide(complex11);
      assertTrue(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex2));
      assertEquals(0.0, complex12.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-390.061798176), (-390.061798176));
      Complex complex1 = complex0.add((-390.061798176));
      Complex complex2 = complex1.ONE.tan();
      assertEquals(1.557407724654902, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.ONE.negate();
      double double0 = complex1.abs();
      assertEquals(872.2046961473396, double0, 0.01);
      
      Complex complex4 = complex3.add((-390.061798176));
      assertEquals((-390.061798176), complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
  }
}
