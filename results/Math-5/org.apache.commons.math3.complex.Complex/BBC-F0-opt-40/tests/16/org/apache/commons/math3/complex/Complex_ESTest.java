/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:45:10 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(740.1223933989904, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(6.283185307179586);
      double double0 = 1.029901759234897E-7;
      Complex complex2 = Complex.INF;
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1.0));
      complex0.asin();
      try { 
        complex1.nthRoot((-3434));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,434
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.139559281E7, (-20.0));
      Complex complex2 = Complex.valueOf((-1236526.550057231), (-20.0));
      complex2.acos();
      complex2.tan();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-631.6986169363462));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.pow((-631.6986169363462));
      complex2.NaN.add(complex1);
      complex1.NaN.tanh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.conjugate();
      complex3.toString();
      Complex complex5 = complex1.multiply(1365.9055500660447);
      complex5.INF.divide((-631.6986169363462));
      complex2.readResolve();
      Complex complex6 = complex3.multiply(complex0);
      complex6.abs();
      complex3.toString();
      Complex complex7 = complex3.sqrt1z();
      complex4.reciprocal();
      Complex complex8 = complex6.add(complex5);
      complex8.INF.getField();
      complex8.getField();
      Complex complex9 = complex2.createComplex(6.961510647855884E276, 6.961510647855884E276);
      complex9.I.reciprocal();
      complex7.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2774.938967, 20.0);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.asin();
      complex3.acos();
      complex2.getReal();
      try { 
        complex2.nthRoot((-69));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -69
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = Complex.valueOf(2.1395592812636856E7, 826.2);
      complex0.sqrt();
      Complex complex2 = Complex.valueOf(2.1395592812636856E7, 2.1395592812636856E7);
      Complex complex3 = complex2.acos();
      complex3.tan();
      complex3.atan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = Complex.valueOf(4464.0816038, 4464.0816038);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.valueOf(4464.0816038, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.acos();
      complex4.ONE.sinh();
      Complex complex5 = Complex.I;
      complex5.tan();
      complex5.asin();
      complex3.multiply((-51327260));
      complex5.add(9.671332777035621E-8);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-4389.91004), (-4389.91004));
      Complex complex1 = complex0.asin();
      complex0.toString();
      Complex complex2 = Complex.ZERO;
      complex2.cosh();
      complex0.toString();
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.ZERO;
      complex3.divide(complex4);
      complex0.pow((-395.5));
      Complex complex6 = Complex.valueOf(711.44167349, 711.44167349);
      complex6.atan();
      Complex complex7 = complex4.acos();
      complex7.asin();
      complex1.tan();
      Complex complex8 = Complex.I;
      complex6.ONE.add(711.44167349);
      complex6.pow(complex0);
      complex6.getReal();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(826.2, 2.1395592812636856E7);
      complex0.hashCode();
      Complex complex1 = Complex.NaN;
      complex1.getField();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(2.1395592812636856E7, 826.2);
      complex3.asin();
      complex2.toString();
      complex0.cosh();
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.valueOf(4.577713918041418E14, 826.2);
      Complex complex7 = Complex.I;
      complex6.divide(complex7);
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex0.pow(826.2);
      complex7.sqrt1z();
      complex9.atan();
      complex8.acos();
      Complex complex10 = complex3.asin();
      complex4.tan();
      Complex complex11 = Complex.I;
      complex3.pow(complex6);
      complex10.getReal();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf((-1704.6689), (-1704.6689));
      Complex complex3 = complex0.acos();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, (-1704.6689));
      complex4.asin();
      complex2.tan();
      complex3.asin();
      complex4.sqrt();
      complex2.divide((-1.452507231312146E-49));
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1461);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.408559707497606E293, 1055.0);
      Complex complex2 = complex1.cosh();
      complex1.toString();
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.ZERO;
      complex3.divide(complex2);
      complex4.sqrt();
      Complex complex5 = new Complex((-1012.57445630809), 1.408559707497606E293);
      Complex complex6 = complex5.pow((-2254.2));
      complex6.sqrt1z();
      Complex.valueOf((-3568.274085493046), (-3568.274085493046));
      complex1.atan();
      Complex.valueOf((-1.0), 0.7853981633974483);
      complex0.acos();
      complex2.asin();
      complex1.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.INF;
      complex8.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-4430.6361678771655), (-4430.6361678771655));
      complex0.toString();
      complex0.hashCode();
      Complex complex1 = Complex.NaN;
      complex1.getField();
      Complex complex2 = complex0.pow(complex1);
      Complex.valueOf(2892.1645938593247, 2892.1645938593247);
      Complex complex3 = complex1.asin();
      complex2.toString();
      Complex complex4 = Complex.valueOf((-20.0), (-4430.6361678771655));
      Complex complex5 = complex4.cosh();
      complex1.toString();
      complex3.acos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.divide(complex2);
      Complex complex8 = complex6.sqrt();
      Complex.valueOf(9.155427836083158E14, 2892.1645938593247);
      complex4.acos();
      complex8.asin();
      complex7.tan();
      complex5.asin();
      Complex complex9 = complex6.sqrt();
      complex9.divide((-2216.7));
      Complex.valueOf(2716.9);
      complex2.divide((-2819.275576));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.createComplex((-2190.8273572), (-2190.8273572));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.pow(587.853204505);
      Complex complex3 = complex2.reciprocal();
      complex1.abs();
      Complex complex4 = Complex.I;
      complex4.INF.acos();
      complex0.equals(complex4);
      Complex complex5 = complex2.subtract(587.853204505);
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.reciprocal();
      Complex complex8 = complex0.subtract(0.0);
      Complex complex9 = complex5.subtract(complex4);
      Complex complex10 = complex1.pow(587.853204505);
      complex2.I.pow(587.853204505);
      complex9.readResolve();
      complex1.exp();
      Complex complex11 = complex5.add(complex9);
      Complex complex12 = complex11.multiply(complex7);
      Complex complex13 = complex3.add(complex8);
      complex13.ZERO.nthRoot(4720);
      complex13.asin();
      Complex.valueOf(587.853204505);
      complex12.sqrt1z();
      Complex complex14 = complex9.cosh();
      Complex complex15 = complex6.sin();
      complex15.I.sin();
      complex15.I.log();
      complex5.divide(complex14);
      complex10.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex2.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-4430.6361678771655), (-4430.6361678771655));
      Complex complex1 = complex0.asin();
      complex0.toString();
      Complex complex2 = complex0.cosh();
      complex1.toString();
      complex2.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex5.pow((-4430.6361678771655));
      complex7.atan();
      complex2.acos();
      Complex complex8 = complex7.asin();
      complex4.tan();
      complex6.asin();
      complex8.sqrt();
      complex8.divide(Double.POSITIVE_INFINITY);
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-4389.91004), (-4389.91004));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.acos();
      complex2.asin();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.I;
      complex3.pow(complex0);
      Complex complex5 = new Complex(1581.489734, 6.2832);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      complex1.hashCode();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex(5.283185307179586, (-271.91241));
      Complex complex4 = Complex.I;
      complex2.pow(complex3);
      Complex complex5 = new Complex((-280.137), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1395592812636856E7, 826.2);
      complex0.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.log();
      complex1.getField();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = Complex.valueOf(2.1395592812636856E7, 826.2);
      Complex complex5 = complex4.asin();
      complex3.toString();
      Complex complex6 = complex0.cosh();
      complex3.toString();
      complex5.acos();
      complex5.acos();
      complex3.asin();
      complex6.tan();
      Complex complex7 = new Complex((-2961.0), (-952.1891));
      Complex complex8 = Complex.I;
      complex3.pow(complex0);
      Complex complex9 = new Complex(2381.74396620768, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf((-3.85426203185856E7), (-3.85426203185856E7));
      Complex complex4 = complex3.asin();
      complex2.toString();
      Complex complex5 = complex0.cosh();
      complex0.toString();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex5.multiply(complex0);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.divide(complex1);
      Complex complex10 = complex6.sqrt();
      complex1.pow(5566.0);
      complex0.sqrt1z();
      complex9.atan();
      complex1.getImaginary();
      complex6.acos();
      Complex complex11 = Complex.valueOf(0.9999995231631829, Double.POSITIVE_INFINITY);
      complex11.asin();
      complex8.tan();
      Complex complex12 = new Complex((-2254.2), 1219.5873702536);
      complex4.pow(complex11);
      Complex.valueOf((-2585.843852151));
      complex0.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1395592812636856E7, 826.2);
      complex0.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.log();
      complex1.getField();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = Complex.valueOf(2.1395592812636856E7, 826.2);
      Complex complex5 = complex4.asin();
      complex3.toString();
      Complex complex6 = complex0.cosh();
      complex3.toString();
      Complex complex7 = complex5.acos();
      complex4.multiply(complex5);
      Complex complex8 = Complex.ZERO;
      complex1.divide(complex0);
      Complex complex9 = complex1.sqrt();
      complex0.pow((-2254.2));
      Complex complex10 = complex6.sqrt1z();
      complex6.atan();
      complex9.getImaginary();
      complex10.asin();
      Complex complex11 = complex0.tan();
      complex11.NaN.sin();
      Complex complex12 = new Complex(Double.NaN, (-2254.2));
      Complex complex13 = complex6.pow(complex12);
      complex13.NaN.sinh();
      Complex complex14 = new Complex(Double.NaN, 0.0075781541764231575);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1107.02831975));
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.NaN.negate();
      Complex.valueOf((-1157.6));
      Complex complex3 = complex0.add((-1107.02831975));
      Complex complex4 = Complex.valueOf((-1107.02831975), (-1107.02831975));
      complex3.ZERO.cosh();
      complex4.INF.log();
      complex4.getField();
      complex3.NaN.divide(complex4);
      Complex complex5 = complex1.tan();
      complex1.abs();
      Complex complex6 = complex3.exp();
      complex6.ZERO.exp();
      complex5.getField();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.I.createComplex(Double.NaN, (-1028.635));
      complex7.add((-1028.635));
      complex8.acos();
      complex7.ZERO.readResolve();
      complex2.add((-1157.6));
      complex0.log();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex9.reciprocal();
      Complex.valueOf((-1157.6));
      Complex.valueOf(Double.NaN, (-1157.6));
      try { 
        complex10.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      complex2.sqrt();
      complex2.sqrt();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.sqrt1z();
      complex1.atan();
      complex0.acos();
      complex4.asin();
      Complex complex5 = Complex.NaN;
      complex5.tan();
      complex5.readResolve();
      Complex complex6 = Complex.I;
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(1.0, (-1009.976317));
      complex2.subtract(0.0);
      Complex.valueOf((-2108.19461462));
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = complex2.subtract(complex0);
      complex3.sqrt();
      complex3.reciprocal();
      Complex complex7 = complex6.sqrt();
      complex4.tan();
      complex5.multiply(complex7);
      Complex complex8 = new Complex((-0.9997966874200814), (-1.1603376405901542E-7));
      complex7.add(Double.NaN);
      Complex complex9 = new Complex(0.0, 11.221824608077787);
      complex9.ONE.tanh();
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-909.70482162626), 1.568413405104933E58);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.acos();
      complex0.ZERO.nthRoot(17);
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex3.ZERO.exp();
      complex4.INF.conjugate();
      complex3.subtract(6.283185307179586);
      Complex complex5 = complex3.exp();
      Complex complex6 = complex1.I.acos();
      complex0.toString();
      complex3.getField();
      complex2.exp();
      complex5.toString();
      complex2.getField();
      complex6.divide(6.283185307179586);
      complex0.add(complex5);
      Complex complex7 = Complex.ZERO;
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = (-9.566090597326916E9);
      Complex complex0 = Complex.valueOf(826.2, (-9.566090597326916E9));
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.log();
      complex2.I.getField();
      complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.asin();
      complex3.ONE.toString();
      Complex complex4 = complex0.reciprocal();
      complex0.sqrt1z();
      Complex complex5 = Complex.I;
      try { 
        complex4.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.reciprocal();
      complex2.sqrt();
      complex1.equals(complex2);
      try { 
        complex2.nthRoot((-1426));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,426
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 1.282130763903269E70);
      complex0.tanh();
      complex0.NaN.tanh();
      complex0.multiply(2143665820);
      complex0.abs();
      complex0.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.atan();
      complex1.getImaginary();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.asin();
      complex0.tan();
      Complex complex4 = Complex.valueOf(7.50512017048, (-1208.94842185852));
      complex4.pow(complex2);
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(826.2, 826.2);
      complex0.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.log();
      complex0.getField();
      Complex complex3 = new Complex((-1282.852595818), (-1282.852595818));
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex0.asin();
      complex4.toString();
      complex4.cosh();
      complex4.toString();
      complex0.acos();
      complex4.multiply(complex0);
      complex3.sqrt();
      complex2.divide(complex5);
      Complex complex6 = Complex.valueOf(2.0);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex6.pow(1588.660785488217);
      complex8.sin();
      complex7.I.cosh();
      Complex complex9 = Complex.INF;
      complex9.sqrt1z();
      complex0.atan();
      complex9.getImaginary();
      complex5.acos();
      Complex complex10 = complex4.asin();
      complex10.tan();
      try { 
        complex10.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1395592812636856E7, 826.2);
      complex0.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.log();
      complex1.getField();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.asin();
      complex3.toString();
      Complex complex6 = complex0.cosh();
      complex3.toString();
      Complex complex7 = complex5.acos();
      complex4.multiply(complex5);
      Complex complex8 = complex2.sqrt();
      complex1.divide(complex0);
      complex1.sqrt();
      Complex complex9 = complex0.pow((-2254.2));
      Complex complex10 = complex6.sqrt1z();
      complex4.atan();
      complex10.getImaginary();
      complex0.acos();
      complex7.asin();
      complex10.tan();
      Complex complex11 = new Complex((-2254.2), (-6987647.355242451));
      complex11.pow(complex8);
      complex9.multiply((-2254.2));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.divide(complex2);
      complex2.getField();
      complex2.readResolve();
      complex3.createComplex((-7263098.900733759), 3710.97495679843);
      complex1.negate();
      Complex complex5 = Complex.I;
      complex5.divide(complex4);
      complex1.divide(3710.97495679843);
      Complex complex6 = Complex.valueOf((-7263098.900733759));
      complex6.tanh();
      complex0.hashCode();
      Complex.valueOf((-276.0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Object object0 = new Object();
      Complex complex2 = Complex.INF;
      complex0.equals(complex2);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sin();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.cosh();
      complex4.subtract(complex1);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.6773988008499146);
      Complex complex2 = complex0.divide(complex1);
      complex1.getField();
      complex2.readResolve();
      complex0.createComplex(0.6773988008499146, (-329.1));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = Complex.ONE;
      complex5.divide((-329.1));
      Complex complex6 = complex4.tanh();
      complex5.hashCode();
      complex2.getImaginary();
      complex5.multiply(complex1);
      complex6.atan();
      Complex complex7 = new Complex(0.0);
      complex7.getImaginary();
      Complex complex8 = Complex.INF;
      complex8.pow(Double.NaN);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(826.2, (-9.566090597326916E9));
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.log();
      complex2.I.getField();
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = Complex.I;
      complex4.ONE.toString();
      Complex complex5 = complex4.ONE.cosh();
      complex4.toString();
      Complex complex6 = complex4.acos();
      complex6.NaN.multiply(complex3);
      Complex complex7 = complex3.cos();
      complex3.cos();
      complex2.acos();
      complex3.divide(complex1);
      Complex complex8 = Complex.valueOf((-9.566090597326916E9), (-9.566090597326916E9));
      complex8.getField();
      complex6.readResolve();
      Complex complex9 = Complex.valueOf((-9.566090597326916E9));
      complex9.createComplex(826.2, 0.0);
      complex2.negate();
      complex7.divide(complex1);
      complex5.divide((-827.1));
      complex4.tanh();
      complex2.hashCode();
      Complex.valueOf(826.2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      complex0.ONE.sinh();
      complex0.equals(complex1);
      Complex complex2 = complex0.asin();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(826.2, (-9.566090597326916E9));
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.log();
      complex2.I.getField();
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex0.asin();
      complex4.ONE.toString();
      Complex complex5 = complex4.ONE.cosh();
      complex4.toString();
      Complex complex6 = complex4.acos();
      complex6.NaN.multiply(complex3);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex7.I.divide(complex3);
      complex7.ONE.sqrt();
      Complex complex9 = complex0.divide(complex2);
      complex9.getField();
      complex1.readResolve();
      complex0.createComplex((-9.566090597326916E9), 0.0);
      complex6.negate();
      complex8.divide(complex5);
      complex5.divide(0.0);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.tanh();
      complex11.hashCode();
      Complex.valueOf(0.9997869576972231);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, 2917.631774);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.atan();
      complex4.tan();
      complex1.add(complex3);
      complex3.atan();
      Complex complex5 = complex2.add(complex4);
      complex5.getReal();
      Complex.valueOf(2917.631774);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1380.211927863608));
      Complex complex1 = complex0.reciprocal();
      complex0.asin();
      complex1.nthRoot(1247);
      Complex complex2 = new Complex(0.0, (-2313.0));
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ONE;
      complex1.equals(complex2);
      complex0.getArgument();
      Complex complex3 = Complex.I;
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex5.divide(complex0);
      complex4.subtract(complex2);
      complex3.sqrt();
      complex7.reciprocal();
      complex6.sqrt();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex1.multiply(complex4);
      Complex complex10 = new Complex(0.0, (-4918.5347002961));
      Complex complex11 = complex10.add((-4918.5347002961));
      complex8.add(complex9);
      Complex complex12 = Complex.ONE;
      complex11.getField();
      complex1.atan();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.exp();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.createComplex(0.0, 3044.103);
      complex2.INF.hashCode();
      complex1.INF.divide(0.0);
      Complex complex3 = complex0.acos();
      complex3.ONE.toString();
      complex3.tan();
      complex3.INF.multiply((-4088));
      Complex complex4 = complex2.sin();
      Complex complex5 = complex0.INF.multiply(complex1);
      complex2.toString();
      Complex complex6 = complex4.divide(complex2);
      Complex.valueOf(1652.4);
      complex6.getImaginary();
      complex4.ZERO.atan();
      complex2.abs();
      complex5.toString();
      complex1.atan();
      complex4.multiply(7.694375233102382E-11);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.INF.tan();
      complex2.divide(2368.7249316);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = complex1.cos();
      Complex complex7 = complex0.cos();
      complex3.acos();
      Complex complex8 = complex7.divide(complex5);
      complex8.getField();
      Complex complex9 = Complex.NaN;
      complex9.readResolve();
      Complex complex10 = complex9.createComplex(2368.7249316, 2368.7249316);
      Complex complex11 = complex10.negate();
      complex11.divide(complex9);
      complex0.divide(2368.7249316);
      complex6.tanh();
      complex7.hashCode();
      complex4.getImaginary();
      complex3.multiply(complex9);
      complex1.getImaginary();
      complex0.pow(6.636396724067746E-8);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1343.8044387241));
      complex1.ZERO.hashCode();
      complex0.multiply(complex1);
      complex1.sqrt1z();
      Complex complex2 = complex1.tan();
      complex1.sinh();
      complex2.pow(2641.95);
      Complex.valueOf((-2108.19461462));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.sinh();
      complex1.asin();
      complex0.equals(complex1);
      complex0.getImaginary();
      Complex complex3 = complex2.multiply(1143);
      // Undeclared exception!
      complex3.nthRoot(2049870754);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = complex0.negate();
      complex0.abs();
      Complex complex2 = complex0.I.sqrt1z();
      complex0.getImaginary();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.acos();
      complex4.pow(complex1);
      Complex complex5 = new Complex((-1301.7), 0.9997869576972231);
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex2.subtract(complex7);
      Complex complex9 = complex6.sqrt();
      complex9.reciprocal();
      complex5.sqrt();
      complex3.tan();
      complex1.add(0.0);
      try { 
        complex8.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-4389.91004), (-4389.91004));
      Complex complex1 = Complex.NaN;
      complex0.add(complex1);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.I;
      complex3.multiply((-4389.91004));
      Complex complex4 = complex0.pow(2700.42058212);
      complex4.NaN.readResolve();
      Complex complex5 = Complex.ZERO;
      complex5.sqrt1z();
      complex3.log();
      complex2.toString();
      complex5.divide(2910.69);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-4389.91004), (-4389.91004));
      Complex complex1 = complex0.asin();
      complex0.equals("");
      complex0.getArgument();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.acos();
      complex2.cos();
      complex1.multiply(736.5639017384119);
      Complex.valueOf(1073.817063206173, 5999.042549726733);
      complex3.sin();
      complex4.cosh();
      Complex complex5 = new Complex((-2.356194490192345));
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex2.ZERO.pow(complex0);
      Complex complex4 = complex2.sqrt1z();
      complex3.tan();
      complex0.sinh();
      Complex.valueOf(2956.0, 2956.0);
      complex1.sin();
      Complex complex5 = Complex.valueOf(1045.9274901, 3083.3376380145974);
      complex5.cosh();
      complex5.subtract(complex3);
      complex4.toString();
      complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-4389.91004), (-4389.91004));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.multiply(complex0);
      complex0.add(complex2);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, 2917.631774);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ONE.asin();
      complex2.ONE.atan();
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.valueOf(9.284633292147283E-110, 7.640606938467665E-129);
      Complex complex6 = complex4.add(complex5);
      Complex.valueOf(0.9999983872935769, 1572.21519);
      complex0.tan();
      complex1.isNaN();
      Complex complex7 = complex3.multiply((-5064));
      complex6.log();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.subtract((-20.0));
      complex1.log();
      complex7.sin();
      complex9.add(complex1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = complex0.negate();
      complex0.abs();
      Complex complex2 = complex0.I.sqrt1z();
      complex0.getImaginary();
      Complex complex3 = complex0.multiply(1);
      complex3.INF.pow(complex0);
      complex1.ONE.tanh();
      Complex complex4 = complex3.asin();
      Complex complex5 = new Complex(0.0, 468.9);
      complex1.multiply(complex5);
      Complex complex6 = Complex.valueOf((-5.095591405025083E-281), 5999.042549726733);
      complex5.getField();
      Complex complex7 = complex6.atan();
      Complex.valueOf(468.9, 1242.01903753);
      complex2.add(complex4);
      Complex complex8 = Complex.valueOf(1242.01903753, 0.0);
      complex3.tan();
      complex0.isNaN();
      complex0.multiply((-5064));
      complex1.log();
      Complex complex9 = complex7.subtract((double) (-5064));
      complex7.log();
      complex0.sin();
      complex9.add(complex8);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.divide((-1500.04215));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.conjugate();
      complex0.multiply(complex4);
      Complex complex5 = complex4.multiply(complex0);
      complex1.add(complex4);
      complex3.getField();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.INF.tan();
      complex1.createComplex((-74.15), 7.640606938467665E-129);
      Complex complex3 = new Complex((-74.15), (-6753.169));
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.acos();
      complex5.pow(complex0);
      Complex complex7 = complex6.divide(complex2);
      complex0.subtract(complex5);
      complex6.sqrt();
      complex1.reciprocal();
      Complex complex8 = Complex.valueOf(7.640606938467665E-129);
      complex8.sqrt();
      complex3.tan();
      complex7.add(2441.0);
      try { 
        complex4.nthRoot((-1356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,356
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex1.getImaginary();
      Complex complex2 = new Complex(262.636);
      Complex complex3 = complex2.multiply(1158);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.asin();
      Complex complex7 = new Complex(262.636, 2402.653);
      Complex complex8 = complex4.multiply(complex7);
      Complex complex9 = complex3.cos();
      Complex complex10 = complex0.cos();
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.acos();
      Complex complex13 = complex5.divide(complex3);
      complex2.getField();
      complex9.readResolve();
      Complex complex14 = complex10.createComplex(487.5230906, 468.9);
      complex13.negate();
      complex13.divide(complex8);
      Complex complex15 = Complex.ZERO;
      complex15.divide(1.3029727935791016);
      Complex complex16 = complex14.tanh();
      complex6.hashCode();
      complex16.getImaginary();
      complex12.multiply(complex14);
      complex7.getImaginary();
      complex6.pow((-2579.86628));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.getImaginary();
      Complex complex2 = complex0.multiply(3);
      complex0.nthRoot(37);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex4.add(complex1);
      complex2.nthRoot(2004);
      complex3.getReal();
      complex3.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2643.416039);
      Complex complex1 = Complex.valueOf(2643.416039, 2643.416039);
      complex1.sqrt1z();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.asin();
      Complex.valueOf(1098.97387, 974.347);
      Complex complex5 = Complex.INF;
      complex0.divide(complex3);
      complex4.sin();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2643.416039);
      Complex complex1 = complex0.NaN.sin();
      complex1.getArgument();
      Complex complex2 = complex0.divide(2643.416039);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = new Complex(2.272019649514069, 1.0);
      Complex complex6 = complex5.conjugate();
      complex3.multiply(complex4);
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = Complex.INF;
      complex8.add(complex4);
      complex7.getField();
      complex6.atan();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-4389.91004), (-4389.91004));
      complex0.isNaN();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.cos();
      complex1.cos();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.divide(complex0);
      complex4.getField();
      complex5.readResolve();
      complex2.createComplex(0.0, 0.9871086951291462);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex5.divide(complex4);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.divide(0.9871086951291462);
      complex6.tanh();
      complex0.hashCode();
      complex8.getImaginary();
      complex7.multiply(complex1);
      complex6.ZERO.atan();
      complex7.getImaginary();
      complex4.pow((-996.4345));
      Complex complex10 = complex9.tanh();
      complex6.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.sin();
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.NaN.multiply(6.283185307179586);
      complex2.pow((-929.7933812343144));
      Complex complex3 = complex0.ZERO.createComplex((-929.7933812343144), (-929.7933812343144));
      complex0.isNaN();
      complex3.readResolve();
      Complex.valueOf((-929.7933812343144));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.tan();
      complex2.ZERO.subtract(6.283185307179586);
      complex2.sqrt1z();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex6.NaN.sinh();
      complex3.pow(complex5);
      Complex complex8 = complex3.atan();
      complex8.INF.tanh();
      complex8.INF.log();
      Complex.valueOf(6.283185307179586, 0.0);
      complex7.ONE.getField();
      complex5.divide(131.917858);
      Complex complex9 = complex3.divide(0.0);
      complex9.NaN.readResolve();
      complex4.isInfinite();
      complex2.ZERO.log();
      Complex complex10 = complex3.sin();
      complex4.isInfinite();
      complex7.log();
      Complex complex11 = complex10.pow(0.0);
      Complex complex12 = complex11.ZERO.divide(133.65262278);
      complex1.pow(complex6);
      complex4.atan();
      Complex.valueOf(806.6, (-1468.362612952676));
      complex12.divide(0.0);
      complex10.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = complex0.negate();
      complex0.abs();
      Complex complex2 = complex0.I.sqrt1z();
      complex0.getImaginary();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.INF.pow(complex0);
      complex1.ONE.tanh();
      Complex complex5 = complex3.asin();
      Complex complex6 = new Complex(0.0, 468.9);
      Complex complex7 = complex1.multiply(complex6);
      Complex complex8 = complex6.cos();
      Complex complex9 = complex8.ZERO.cos();
      complex9.NaN.acos();
      Complex complex10 = complex4.divide(complex7);
      complex2.getField();
      complex10.readResolve();
      complex6.createComplex(0.0, 1);
      Complex complex11 = complex7.negate();
      Complex complex12 = complex0.divide(complex5);
      complex12.ZERO.divide(1.3029727935791016);
      Complex complex13 = complex11.tanh();
      complex11.hashCode();
      complex7.getImaginary();
      complex2.multiply(complex3);
      complex11.getImaginary();
      complex13.pow((-996.4345));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      complex1.I.getField();
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex0.asin();
      Complex complex6 = Complex.INF;
      complex1.getArgument();
      complex0.divide(complex6);
      Complex complex7 = complex5.ZERO.sqrt1z();
      complex7.INF.atan();
      complex5.equals("org.apache.commons.math3.complex.Complex");
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex4.NaN.divide(0.0);
      complex1.exp();
      Complex complex10 = complex8.atan();
      complex10.abs();
      complex4.multiply(Double.NaN);
      Complex complex11 = complex7.cos();
      Complex complex12 = complex6.pow(complex9);
      complex11.multiply(1);
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.I.divide(0.0);
      complex1.toString();
      Complex complex4 = new Complex(2243.0);
      Complex complex5 = complex4.ONE.reciprocal();
      complex1.NaN.toString();
      complex5.divide(complex4);
      Complex complex6 = complex0.multiply(complex4);
      complex6.I.readResolve();
      complex0.getReal();
      Complex complex7 = complex3.subtract(0.0);
      Complex complex8 = Complex.valueOf((-2712.0));
      Complex complex9 = complex4.exp();
      complex9.getField();
      complex8.INF.hashCode();
      complex9.isInfinite();
      complex9.add(0.0);
      complex8.multiply(complex0);
      complex6.add(complex1);
      complex7.getField();
      complex7.sinh();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(974.347, 0.0);
      complex0.I.cosh();
      Complex complex1 = complex0.ZERO.divide((-4805.885));
      complex1.negate();
      complex1.exp();
      Complex complex2 = Complex.valueOf(6.283185307179586);
      complex1.NaN.sin();
      complex0.reciprocal();
      Complex complex3 = complex0.pow((-2783.731658969786));
      complex0.conjugate();
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.valueOf(0.0, Double.NaN);
      complex4.I.multiply(complex5);
      complex2.INF.getField();
      complex4.nthRoot(748);
      complex2.acos();
      Complex complex6 = Complex.valueOf(0.0, (-1597.8990916465173));
      complex6.NaN.tanh();
      Complex complex7 = complex3.divide((-1597.8990916465173));
      complex7.tan();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-4389.91004), (-4389.91004));
      complex0.isNaN();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex2.I.tan();
      complex2.I.multiply((-4389.91004));
      Complex complex3 = complex1.pow(0.0);
      complex1.sqrt1z();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-1759.1829511289525));
      complex0.I.sinh();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.multiply((-1759.1829511289525));
      complex3.toString();
      Complex.valueOf(2214.616, 0.0);
      Complex complex4 = complex2.NaN.reciprocal();
      complex4.NaN.abs();
      Complex complex5 = complex0.sqrt1z();
      complex2.ZERO.pow((-1759.1829511289525));
      complex2.NaN.tan();
      complex4.createComplex(7.932952721989251E-8, 7.932952721989251E-8);
      complex5.nthRoot(1653);
      complex4.toString();
      Complex.valueOf(0.0);
      complex5.reciprocal();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.readResolve();
      Complex complex1 = complex0.asin();
      complex1.NaN.divide(complex0);
      complex0.NaN.abs();
      complex0.I.getArgument();
      Complex complex2 = complex0.subtract(0.0);
      complex0.readResolve();
      complex0.hashCode();
      complex2.I.pow((-1.0));
      complex2.getReal();
      complex2.INF.sinh();
      complex2.hashCode();
      complex2.getImaginary();
      complex0.getArgument();
      Complex complex3 = complex0.subtract(1.2167897656061312E23);
      complex3.I.negate();
      complex0.multiply(0.0);
      complex3.cos();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.acos();
      complex1.INF.atan();
      complex1.ONE.hashCode();
      complex1.getField();
      Complex complex2 = complex0.createComplex(1.0, 1.0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.add(520.6143442802);
      complex4.sqrt1z();
      Complex complex5 = complex3.pow(107.0);
      complex5.ZERO.asin();
      complex5.INF.sin();
      complex5.ONE.sin();
      Complex complex6 = Complex.valueOf(107.0);
      complex6.tan();
      Complex complex7 = complex4.add(520.6143442802);
      complex2.subtract(complex1);
      complex4.getImaginary();
      complex6.sqrt1z();
      try { 
        complex7.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.atan();
      complex0.NaN.createComplex(0.0, 238.8);
      Complex complex2 = complex0.NaN.createComplex(918.5216876, 918.5216876);
      Complex.valueOf(0.0);
      complex1.NaN.cosh();
      complex2.ONE.getField();
      complex0.INF.toString();
      Complex complex3 = complex1.createComplex(0.0, 238.8);
      Complex complex4 = Complex.INF;
      complex4.ONE.nthRoot(308);
      Complex complex5 = complex4.ONE.multiply(1.4450790882110596);
      complex5.log();
      complex0.pow(complex4);
      Complex complex6 = Complex.valueOf(Double.NaN, 2117.15468376944);
      Complex complex7 = complex5.multiply(complex4);
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.NaN.divide(complex5);
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = complex9.INF.subtract(Double.NaN);
      complex10.I.pow(complex7);
      Object object0 = new Object();
      complex6.equals(object0);
      Object object1 = new Object();
      complex6.equals(object1);
      complex4.isNaN();
      complex6.nthRoot(308);
      complex0.pow(0.0);
      complex3.getImaginary();
      complex6.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.INF.tan();
      complex2.divide(2368.7249316);
      Complex complex3 = complex2.INF.cosh();
      complex3.ZERO.log();
      Complex complex4 = complex0.sqrt();
      complex4.NaN.subtract(0.29109418392181396);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex4.multiply(complex5);
      complex6.ONE.conjugate();
      Complex complex7 = complex1.tan();
      complex7.ONE.createComplex((-937.629981), 0.29109418392181396);
      complex7.NaN.readResolve();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.I.hashCode();
      complex0.isInfinite();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1905.66247021, 1905.66247021);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.ONE.createComplex(1100.0, 0.0);
      complex0.sqrt1z();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.sin();
      complex4.NaN.nthRoot(2316);
      complex3.equals(complex4);
      complex2.getImaginary();
      complex0.multiply((-2068));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.sinh();
      complex1.asin();
      complex0.equals(complex1);
      complex0.getArgument();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex3.ZERO.acos();
      complex0.INF.cos();
      complex0.ONE.multiply(735.509107964);
      Complex.valueOf(1045.9274901, 0.0);
      complex0.getField();
      Complex complex6 = complex2.atan();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex1.ZERO.add(complex7);
      Complex.valueOf(1.0, 1.0);
      complex0.tan();
      complex6.isNaN();
      Complex complex8 = complex2.multiply((-5064));
      complex8.ZERO.log();
      Complex complex9 = complex5.subtract(735.509107964);
      complex4.log();
      complex9.sin();
      complex9.add(complex7);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.readResolve();
      complex0.ZERO.getField();
      Complex complex1 = complex0.subtract(1.618327917706804E96);
      complex1.add(complex0);
      Complex complex2 = complex0.subtract(complex1);
      complex1.NaN.reciprocal();
      complex2.ZERO.sinh();
      Complex complex3 = complex2.conjugate();
      complex0.ZERO.acos();
      complex0.ONE.subtract(complex3);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ZERO.pow(1.618327917706804E96);
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex1.tanh();
      complex0.add(205.6969849);
      Complex.valueOf(1.618327917706804E96);
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex6.multiply(complex8);
      complex9.NaN.readResolve();
      complex1.sqrt1z();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.divide(262.636);
      complex1.NaN.tan();
      complex0.I.conjugate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.multiply(complex1);
      complex3.ZERO.multiply(complex0);
      complex2.add(complex1);
      complex3.getField();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.createComplex(20.0, 20.0);
      Complex complex3 = complex2.ZERO.conjugate();
      complex3.ONE.add(complex2);
      Complex complex4 = complex1.ZERO.acos();
      Complex.valueOf(20.0, 20.0);
      Complex complex5 = complex0.cosh();
      Complex.valueOf(20.0, 2.0);
      complex0.NaN.cos();
      complex1.sin();
      complex4.getImaginary();
      complex5.tan();
      try { 
        complex1.nthRoot((-2380));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,380
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(760.48288455968, 0.0);
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.NaN.acos();
      complex1.ZERO.asin();
      Complex complex3 = complex0.multiply((-1882.897485));
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = Complex.valueOf((-1538.115));
      complex4.NaN.getField();
      Complex complex6 = complex0.divide(complex1);
      complex6.ONE.sqrt();
      Complex complex7 = Complex.valueOf(0.0, 760.48288455968);
      complex7.sin();
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex0.ZERO.multiply(1059);
      complex9.I.getArgument();
      Complex complex10 = complex1.I.multiply(Double.POSITIVE_INFINITY);
      complex10.I.reciprocal();
      complex6.pow((-6.540181860667302E168));
      complex0.conjugate();
      Complex complex11 = complex9.reciprocal();
      Complex complex12 = complex3.add(complex8);
      complex12.I.conjugate();
      complex0.ONE.divide(complex9);
      complex3.toString();
      complex11.getImaginary();
      complex11.getReal();
      complex3.reciprocal();
      complex0.reciprocal();
      complex1.add(complex5);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(163.0282985361, 163.0282985361);
      Complex complex1 = Complex.I;
      complex0.ZERO.add(complex1);
      complex0.NaN.sqrt1z();
      complex0.sinh();
      complex0.sqrt();
      Complex complex2 = complex1.conjugate();
      complex2.I.sinh();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      complex1.I.cosh();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.pow((-1370.415812276331));
      Complex complex4 = complex3.INF.createComplex(0.0, 0.0);
      complex4.ONE.asin();
      complex0.getArgument();
      complex3.ONE.sqrt();
      complex0.getImaginary();
      complex3.reciprocal();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.I.pow(0.0);
      Complex complex7 = complex5.reciprocal();
      complex7.ONE.getArgument();
      complex5.getField();
      complex6.subtract(complex3);
      complex0.getArgument();
      complex5.cos();
      Complex complex8 = complex4.log();
      complex3.isNaN();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.asin();
      complex1.hashCode();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = complex0.asin();
      complex0.sqrt();
      complex0.ONE.nthRoot(1312);
      complex1.getReal();
      Complex complex2 = complex0.sqrt1z();
      complex1.hashCode();
      complex2.acos();
      Complex.valueOf((-6.458486486369316E-8));
      Complex complex3 = complex1.divide(0.0);
      complex3.I.atan();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = complex1.ZERO.pow(0.0);
      complex6.ZERO.multiply((-6.458486486369316E-8));
      complex3.getField();
      complex0.pow(complex5);
      Complex.valueOf((-231.6443), 0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.735781872502109E-8);
      complex0.NaN.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.ONE.sqrt1z();
      complex3.ONE.sqrt();
      Complex complex4 = complex3.ONE.pow(0.0);
      Complex complex5 = complex1.I.divide(4.735781872502109E-8);
      Complex complex6 = complex5.I.multiply((-147.379505));
      complex1.toString();
      Complex complex7 = complex0.add(complex1);
      complex5.exp();
      complex6.getReal();
      complex1.pow(complex3);
      Complex complex8 = complex6.multiply(0.0);
      complex2.readResolve();
      Complex.valueOf((-20.0), (-272.1607479));
      complex5.equals(complex7);
      complex8.isInfinite();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex0.toString();
      Complex complex3 = complex1.exp();
      complex2.equals(complex1);
      complex3.divide(899.08938);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex3.add(899.08938);
      complex5.I.atan();
      complex2.sqrt();
      complex4.toString();
      try { 
        complex0.nthRoot((-582));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -582
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.I.negate();
      complex0.getReal();
      complex1.ZERO.readResolve();
      complex0.getField();
      complex0.multiply(622);
      Complex complex4 = complex0.reciprocal();
      complex1.abs();
      Complex complex5 = complex4.atan();
      complex3.ZERO.exp();
      complex5.isInfinite();
      Complex complex6 = complex3.subtract(complex0);
      Complex complex7 = complex1.createComplex(622, Double.POSITIVE_INFINITY);
      complex5.sqrt1z();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex1.add(710.59);
      complex9.NaN.sinh();
      Complex.valueOf((double) 622, 710.59);
      complex8.divide(complex0);
      complex0.multiply(complex6);
      Complex complex10 = complex5.divide(complex9);
      complex10.NaN.reciprocal();
      complex10.ZERO.negate();
      Complex complex11 = complex5.subtract((-763.255932185));
      Complex complex12 = complex11.divide(complex8);
      complex7.asin();
      complex12.hashCode();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(1766.142256773);
      complex1.ZERO.negate();
      complex0.INF.abs();
      complex0.NaN.pow(0.0);
      complex0.getField();
      Complex complex2 = complex0.exp();
      complex2.ONE.nthRoot(192);
      complex0.ONE.hashCode();
      complex2.ZERO.readResolve();
      complex2.INF.getArgument();
      Complex complex3 = complex2.INF.atan();
      complex2.abs();
      complex0.hashCode();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-1584.4608), 3877.4936);
      Complex complex1 = complex0.ZERO.cos();
      complex1.I.acos();
      Complex complex2 = complex0.tan();
      complex2.ZERO.multiply(0);
      complex0.ZERO.subtract(3877.4936);
      complex0.isNaN();
      complex2.I.sqrt1z();
      Complex complex3 = complex2.multiply(0.3936771750450134);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(3105.187);
      Complex complex2 = complex0.subtract(complex1);
      complex2.cosh();
      Complex complex3 = complex0.reciprocal();
      complex3.getField();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.sin();
      complex2.INF.exp();
      Complex complex6 = new Complex(3105.187);
      complex2.I.add(complex6);
      complex5.INF.createComplex(1.5645672698520312E274, 0.0);
      complex1.getArgument();
      Complex complex7 = complex1.sin();
      complex7.I.divide(complex0);
      complex2.exp();
      Complex complex8 = complex5.exp();
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex9.INF.sinh();
      complex0.abs();
      Complex complex11 = complex4.subtract(complex8);
      complex10.multiply(complex0);
      complex6.sqrt1z();
      complex7.readResolve();
      complex11.add(1984.86855985726);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2999.521357447), (-288.31507319));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      complex2.INF.reciprocal();
      complex1.asin();
      Complex.valueOf(1098.97387, (-288.31507319));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      complex4.sin();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply((-348));
      complex0.conjugate();
      complex1.negate();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex1.sqrt1z();
      complex2.tan();
      complex0.sinh();
      complex2.pow(2641.95);
      Complex.valueOf((-2108.19461462));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(1234.64071);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.asin();
      complex0.isInfinite();
      Complex complex3 = complex1.subtract(complex2);
      complex2.INF.sinh();
      complex0.createComplex(0.0, 0.0);
      complex2.readResolve();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = complex1.divide(0.0);
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex5.ONE.add(complex3);
      Complex complex9 = complex5.multiply(441);
      complex9.I.conjugate();
      Complex complex10 = complex9.multiply(3132.628269964357);
      complex5.atan();
      Complex complex11 = complex7.negate();
      complex5.hashCode();
      Complex complex12 = complex6.tan();
      Complex complex13 = complex12.multiply(6.080174837146273E-8);
      Complex complex14 = complex13.sinh();
      complex12.abs();
      Complex complex15 = complex4.pow(complex8);
      Complex complex16 = complex0.atan();
      Complex complex17 = complex10.multiply(0.0);
      complex15.ONE.cosh();
      complex4.NaN.log();
      Complex complex18 = complex15.I.log();
      assertEquals(0.0, complex18.getReal(), 0.01);
      
      Complex.valueOf((double) 441, 376.0);
      Complex complex19 = complex15.divide(complex16);
      assertSame(complex19, complex3);
      assertSame(complex15, complex11);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex4.getReal(), 0.01);
      
      List<Complex> list0 = complex17.nthRoot(1);
      assertTrue(complex1.equals((Object)complex16));
      assertSame(complex10, complex8);
      assertTrue(list0.contains(complex3));
      assertSame(complex5, complex14);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.902712448725381E-8), (-5.902712448725381E-8));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.INF.multiply(0);
      complex1.INF.negate();
      complex0.ZERO.hashCode();
      Complex complex3 = complex2.multiply(0);
      complex3.hashCode();
      complex3.INF.sin();
      Complex complex4 = complex0.ONE.add((-3638.218235225334));
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex3.atan();
      complex0.toString();
      Complex complex7 = complex1.add(complex0);
      List<Complex> list0 = complex7.ONE.nthRoot(1782);
      assertFalse(list0.contains(complex5));
      assertEquals(1782, list0.size());
      
      Complex complex8 = complex2.add(complex0);
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = complex6.sqrt1z();
      complex3.hashCode();
      Complex complex11 = complex3.subtract(complex6);
      complex7.acos();
      Complex complex12 = complex2.conjugate();
      complex10.readResolve();
      complex12.add(complex4);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex13 = Complex.valueOf(0.0);
      assertTrue(complex13.equals((Object)complex9));
      
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex0.multiply(complex14);
      assertEquals((-5.902712448725381E-8), complex0.getReal(), 0.01);
      assertSame(complex15, complex11);
      assertSame(complex15, complex10);
  }
}
