/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:00:23 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1234.1080587305), Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.8023930305180668, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex1.multiply(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex5.add(complex3);
      complex2.tan();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex4.atan();
      complex4.nthRoot(662);
      complex2.tanh();
      complex4.toString();
      Complex complex9 = new Complex(3043.102744, 0.9999988055686776);
      complex9.add((-288.685));
      complex5.multiply(complex2);
      complex6.multiply(complex7);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 3356);
      Complex complex1 = Complex.valueOf((double) 3356, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      complex1.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex3.ONE.pow((double) 3356);
      complex1.tan();
      complex0.reciprocal();
      complex0.nthRoot(628);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.divide(complex0);
      Complex complex2 = new Complex((-1455.12111068), (-1455.12111068));
      Complex complex3 = new Complex(2.0, 1061.04213);
      complex3.pow(84313.7369);
      complex2.tan();
      complex2.nthRoot(1002);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1335.2345704086);
      Complex complex2 = new Complex(2.2741891590028428E-8, Double.NaN);
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.INF;
      complex4.divide(complex3);
      complex2.subtract(complex1);
      Complex complex5 = Complex.I;
      complex1.tan();
      complex3.nthRoot(42);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(5.32346341339996E-260);
      Complex complex1 = new Complex(5.32346341339996E-260, 5.32346341339996E-260);
      Complex complex2 = new Complex((-20.0));
      complex2.tanh();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-0.5518584859828479), Double.POSITIVE_INFINITY);
      complex0.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.I.sqrt();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf((-14.992600043727602), 2.778073442169904E185);
      Complex complex4 = complex3.asin();
      Complex complex5 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex6 = complex1.subtract(complex4);
      complex0.add(complex2);
      complex6.getField();
      complex6.tan();
      complex2.nthRoot(1905);
      complex0.tanh();
      Complex complex7 = complex6.exp();
      Complex complex8 = Complex.INF;
      complex8.tanh();
      complex7.multiply(2624);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(1035.6);
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-960.9713376729135), Double.POSITIVE_INFINITY);
      complex0.multiply((-2.751925069084042E-8));
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex1.INF.abs();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.sqrt1z();
      complex2.acos();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.subtract(1281.86);
      complex5.INF.abs();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.NaN.abs();
      complex2.tanh();
      Complex complex7 = complex4.sqrt();
      complex7.INF.acos();
      complex3.nthRoot(2049870754);
      complex7.log();
      complex5.atan();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-986.22263203), (-20.0));
      complex0.tanh();
      complex1.tan();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.createComplex(0.0, 1.9711751621240536E163);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex6.asin();
      Complex complex8 = new Complex(0.0, 1.0297303199768066);
      Complex complex9 = new Complex((-5.32346341339996E-260));
      complex9.add(complex7);
      complex3.getField();
      complex4.tan();
      complex0.nthRoot(662);
      complex5.tanh();
      complex2.exp();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(5.32346341339996E-260);
      Complex complex1 = complex0.ONE.asin();
      complex0.I.createComplex(2717.327, 2717.327);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.I.multiply(complex2);
      complex3.ONE.asin();
      complex0.divide(complex2);
      Complex complex4 = new Complex(2717.327, 5.32346341339996E-260);
      complex2.subtract(complex4);
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      complex1.hashCode();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.tanh();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.ONE.hashCode();
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0);
      complex0.exp();
      complex1.divide(complex0);
      Complex complex2 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(23.500514611497746, 20.0);
      complex1.tan();
      complex1.exp();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.cosh();
      complex2.sqrt();
      complex4.getReal();
      Complex complex5 = complex4.sinh();
      Complex complex6 = Complex.valueOf(345.7392, Double.NaN);
      complex5.add(complex6);
      complex3.toString();
      complex6.sin();
      Complex complex7 = Complex.ONE;
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt1z();
      try { 
        complex1.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.add(complex0);
      complex3.tanh();
      complex0.divide((-67.38));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.multiply(2527);
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.getArgument();
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = (Complex)complex1.readResolve();
      complex3.INF.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex3.divide((-3538.9754668213));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract((-20.0));
      Complex complex1 = Complex.ZERO;
      complex1.readResolve();
      complex1.equals(complex0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(15);
      complex0.divide(complex1);
      Complex complex2 = complex1.createComplex((-1885.3392643), (-1885.3392643));
      complex2.INF.pow(3847.29006);
      Complex complex3 = complex0.divide(0.0);
      Complex.valueOf((-1029.4027587));
      Complex complex4 = complex3.tanh();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-725.2644184413856), (-725.2644184413856));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = Complex.valueOf(6.283185307179586, (-67.38));
      Complex complex3 = complex0.sin();
      complex3.ONE.asin();
      complex2.abs();
      complex3.I.add(complex1);
      complex2.getReal();
      Complex.valueOf((-725.2644184413856));
      Complex complex4 = complex0.subtract(complex2);
      complex4.I.sinh();
      complex2.I.sin();
      // Undeclared exception!
      complex2.nthRoot(5338);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.multiply(2527);
      complex0.add(complex1);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide((-6.648490725635754E-8));
      complex1.readResolve();
      complex0.sinh();
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(0);
      complex1.ONE.divide(complex0);
      complex0.sin();
      complex0.isInfinite();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.log();
      complex0.conjugate();
      complex3.sqrt();
      Complex complex4 = complex1.sin();
      complex1.sqrt();
      Complex complex5 = Complex.ONE;
      complex4.getReal();
      Complex complex6 = complex4.sinh();
      complex6.ZERO.multiply(0);
      Complex.valueOf(1.0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.NaN;
      complex8.toString();
      Complex complex9 = Complex.valueOf((double) 0, (-1737.6638));
      complex9.sin();
      complex5.acos();
      complex6.equals("(NaN, NaN)");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(714.62, (-2335.87384824));
      complex0.add((-2335.87384824));
      Complex complex2 = new Complex(714.62, (-280.8370576709318));
      Complex complex3 = new Complex(0.5745554485659254, 0.5745554485659254);
      Complex complex4 = Complex.ONE;
      complex4.nthRoot(1037);
      Complex complex5 = complex1.cos();
      Complex complex6 = Complex.ZERO;
      complex5.getField();
      Complex complex7 = Complex.I;
      complex3.tanh();
      complex6.getImaginary();
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7043828964233398, 1.7043828964233398);
      Complex complex1 = complex0.add((-1700.0776));
      Complex complex2 = new Complex(1.7043828964233398, (-1700.0776));
      complex1.tan();
      Complex complex3 = complex1.exp();
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      try { 
        complex1.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = new Complex(23.500514611497746, 23.500514611497746);
      Complex complex3 = new Complex(23.500514611497746);
      complex1.multiply(23.500514611497746);
      Complex complex4 = new Complex(23.500514611497746, (-461.229));
      Complex complex5 = complex4.reciprocal();
      complex5.I.divide((-461.229));
      complex2.cosh();
      Complex complex6 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.011480595451672, 4.011480595451672);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.multiply(2527);
      complex1.ONE.log();
      Complex complex2 = Complex.NaN;
      complex2.multiply(complex1);
      complex2.equals(complex0);
      complex0.pow((-2184.76938555));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(111352.16048709885, (-499.7));
      Complex complex2 = complex1.tan();
      complex2.INF.negate();
      Complex complex3 = complex2.exp();
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(0);
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      complex2.divide(6.283185307179586);
      Complex.valueOf(273.329931405);
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-457.72811860094), (-457.72811860094));
      Complex complex1 = complex0.ZERO.sin();
      complex1.I.pow(1.1991832256317139);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.divide(2.9095921130135163);
      complex2.I.subtract((-253.9336));
      complex0.toString();
      Complex complex4 = complex2.log();
      complex3.readResolve();
      complex4.multiply((-2054.635077));
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(3357.584, 3357.584);
      complex0.ONE.readResolve();
      complex0.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.multiply((-6.0490084078440215E175));
      Complex complex3 = complex2.ZERO.cos();
      complex2.INF.getArgument();
      complex3.ONE.divide(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.reciprocal();
      complex5.ZERO.add(complex0);
      Complex complex6 = complex0.exp();
      complex4.sinh();
      Complex complex7 = complex3.I.add(complex4);
      complex7.INF.subtract(complex6);
      complex7.getField();
      Complex complex8 = complex4.reciprocal();
      complex4.equals(complex3);
      complex8.getField();
      complex7.multiply((-1812874763));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1373.291114760558));
      complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(2.0);
      complex2.abs();
      complex2.divide(complex1);
      complex2.add(1373.2925711152361);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-1139.067670558556), 2.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.asin();
      complex3.abs();
      Complex complex4 = complex0.add(complex2);
      complex0.getReal();
      Complex complex5 = Complex.valueOf(1.054760847603618E-7);
      Complex complex6 = new Complex(2.0);
      Complex complex7 = complex4.subtract(complex6);
      complex0.sinh();
      Complex complex8 = complex0.sin();
      complex7.isInfinite();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex5.sqrt();
      complex7.sin();
      complex9.sqrt();
      Complex complex12 = complex8.sqrt();
      complex9.cos();
      complex11.sqrt1z();
      complex12.getReal();
      complex10.sinh();
      complex4.add(complex6);
      Complex complex13 = Complex.ZERO;
      complex13.toString();
      complex8.sin();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-725.2644184413856), (-725.2644184413856));
      Complex complex1 = complex0.I.negate();
      Complex.valueOf(6.283185307179586, (-67.38));
      Complex complex2 = Complex.valueOf((-725.2644184413856), (-3767.319734559297));
      complex2.abs();
      complex0.pow(6.283185307179586);
      complex0.divide((-725.2644184413856));
      complex2.abs();
      complex0.divide(complex1);
      complex2.add(20.0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.multiply(2527);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.add(0.0);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7043828964233398, (-1700.0776));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(23.500514611497746, 23.500514611497746);
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(1832.97232933474, (-20.0));
      Complex complex4 = complex2.sin();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.asin();
      complex0.abs();
      Complex complex7 = complex3.add(complex4);
      complex5.getReal();
      Complex.valueOf(2024.2176029245966);
      Complex complex8 = complex2.subtract(complex1);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex8.sin();
      complex2.isInfinite();
      Complex complex11 = complex8.log();
      Complex complex12 = complex9.conjugate();
      Complex complex13 = complex0.sqrt();
      complex6.sin();
      complex13.sqrt();
      complex11.sqrt();
      Complex complex14 = complex12.cos();
      Complex complex15 = complex10.sqrt1z();
      complex7.getReal();
      complex14.sinh();
      Complex complex16 = complex10.add(complex15);
      complex0.toString();
      complex10.sin();
      complex16.acos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(460);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(complex2);
      complex3.createComplex(1450.5284921809848, 1450.5284921809848);
      Complex complex4 = Complex.INF;
      complex4.divide(873.68223344751);
      Complex complex5 = Complex.valueOf((-2705.287554970731));
      complex2.multiply((double) 0);
      complex1.readResolve();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      complex0.getArgument();
      Complex complex2 = complex1.cos();
      complex2.ZERO.divide(0.7853981633974483);
      Complex complex3 = Complex.NaN;
      complex1.multiply(complex2);
      complex3.tanh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.I.getArgument();
      complex0.NaN.getArgument();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.INF.pow(0.4831010699272156);
      complex2.INF.atan();
      complex2.NaN.hashCode();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex0.exp();
      complex5.ZERO.multiply(0.4831010699272156);
      Complex complex6 = complex5.NaN.divide(complex1);
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.INF.add(complex3);
      complex1.getField();
      Complex complex9 = Complex.valueOf(6.283185307179586, 2.016113758087158);
      Complex.valueOf(Double.NaN, Double.NaN);
      complex1.abs();
      complex1.conjugate();
      complex3.tan();
      complex6.getField();
      complex9.add(complex7);
      complex8.nthRoot(67);
      complex2.sinh();
      Complex.valueOf(2.0, 6.283185307179586);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex.valueOf((-1276.0), 1.0);
      complex1.atan();
      Complex complex2 = complex0.sinh();
      complex0.getField();
      try { 
        complex2.nthRoot((-739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -739
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(0);
      complex0.divide((-2393.24022954));
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      complex2.INF.cos();
      Complex.valueOf((-1412.6), (-8.784622656707742E-9));
      complex2.add(0.0);
      complex1.equals("'9_;N'NVYGUtsd-x:");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = new Complex(23.500514611497746, 23.500514611497746);
      complex2.tan();
      Complex complex3 = complex1.exp();
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(2.2778730392456055, 2.9271223293841774E-106);
      complex0.getArgument();
      complex0.cos();
      complex0.getField();
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex((-1.0602700638269148E-7));
      complex0.multiply(complex2);
      complex2.tanh();
      complex0.multiply((-4322));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.multiply((-1897.7546388022772));
      complex0.subtract((-1236.25738782648));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.createComplex((-1480.71), (-1480.71));
      Complex complex3 = complex2.ZERO.sin();
      complex1.sinh();
      complex3.ONE.getArgument();
      complex0.ZERO.readResolve();
      complex0.sqrt();
      Complex complex4 = complex2.cos();
      complex1.sinh();
      Complex complex5 = complex4.subtract(0.0);
      complex5.I.add(494.46);
      Complex complex6 = Complex.valueOf(Double.NaN, 2.0);
      complex1.add((-120.4015688978875));
      complex5.sin();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.multiply(2527);
      Complex complex2 = complex0.add(complex1);
      complex2.divide(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(0);
      complex1.ONE.divide(complex0);
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = Complex.valueOf((-1412.6), (-8.784622656707742E-9));
      complex2.add(6.283185307179586);
      Object object0 = complex2.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-725.2644184413856), (-725.2644184413856));
      complex0.I.negate();
      Complex complex1 = Complex.valueOf(6.283185307179586, (-67.38));
      Complex complex2 = complex0.sin();
      complex2.ONE.asin();
      Complex complex3 = complex0.asin();
      complex1.abs();
      complex2.I.add(complex3);
      complex1.getReal();
      Complex.valueOf((-725.2644184413856));
      Complex complex4 = complex0.subtract(complex1);
      complex4.I.sinh();
      Complex complex5 = complex1.I.sin();
      complex5.exp();
      complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(2.2778730392456055, 2.2778730392456055);
      Complex complex1 = complex0.tan();
      complex1.log();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.sin();
      complex1.sqrt();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex1.cos();
      complex4.sqrt1z();
      complex5.getReal();
      complex6.sinh();
      complex1.add(complex2);
      complex2.toString();
      complex3.sin();
      Complex complex7 = new Complex(2.2778730392456055);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1590.7996298));
      Complex complex1 = complex0.add(1397.2606000775);
      complex1.NaN.conjugate();
      Complex.valueOf((-1276.0), (-1282.7613));
      complex1.I.atan();
      complex1.hashCode();
      complex1.subtract(1423.63409329758);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-302.8842149), (-302.8842149));
      complex0.hashCode();
      Complex complex1 = Complex.valueOf((-575.621540052), 968.0999729389);
      complex1.subtract((-575.621540052));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1964.9709660178803));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.reciprocal();
      complex2.multiply(complex1);
      complex0.multiply(0.001721946077566372);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(2.2778730392456055);
      Complex complex1 = complex0.tan();
      complex0.INF.exp();
      Complex complex2 = Complex.NaN;
      complex1.equals(complex2);
      complex2.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      complex0.getArgument();
      complex1.cos();
      complex1.getField();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = Complex.INF;
      complex4.tanh();
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-302.8842149), 0.0);
      complex0.INF.cosh();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.INF.tan();
      complex1.NaN.sqrt();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex0.ZERO.tan();
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex0.INF.exp();
      complex7.I.cos();
      complex0.getReal();
      complex0.getArgument();
      complex1.cos();
      complex0.getField();
      complex1.getField();
      complex1.isNaN();
      complex1.getReal();
      complex2.tan();
      complex3.add(0.0);
      complex4.getReal();
      Object object0 = new Object();
      complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1590.7996298));
      Complex complex1 = complex0.add(1397.2606000775);
      complex1.NaN.conjugate();
      Complex.valueOf((-1276.0), (-1282.7613));
      Complex complex2 = complex1.I.atan();
      complex2.ZERO.sinh();
      complex1.getField();
      int int0 = (-739);
      try { 
        complex1.INF.nthRoot((-739));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -739
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3448.81, 3448.81);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.I.negate();
      complex1.log();
      Complex complex5 = complex3.conjugate();
      complex4.INF.abs();
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = complex1.cosh();
      complex6.tan();
      Complex complex8 = complex6.createComplex((-535.461391603214), 3448.81);
      complex8.ZERO.multiply(0.0);
      complex8.negate();
      complex7.getField();
      Complex complex9 = Complex.valueOf((-535.461391603214));
      Complex complex10 = complex9.INF.log();
      int int0 = (-1635);
      complex10.I.multiply((-1635));
      try { 
        complex0.ZERO.nthRoot((-1635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,635
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.I.pow(Double.NaN);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.INF.pow(complex2);
      complex0.ZERO.getArgument();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex2.INF.tan();
      complex5.ONE.getField();
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex7 = complex2.sqrt1z();
      complex7.I.divide(complex6);
      Complex complex8 = complex0.atan();
      complex4.NaN.cosh();
      Complex complex9 = complex8.ZERO.multiply(0.0);
      Complex complex10 = complex9.ZERO.reciprocal();
      Complex complex11 = complex3.sqrt1z();
      Complex complex12 = complex3.conjugate();
      complex12.I.abs();
      complex4.pow(complex8);
      complex9.I.subtract(complex8);
      Complex.valueOf(3498.7364);
      Complex complex13 = complex1.asin();
      complex13.INF.readResolve();
      complex11.readResolve();
      complex10.getReal();
      complex0.nthRoot(460);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.cos();
      complex2.ONE.subtract(complex1);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-183.0));
      Complex complex1 = complex0.log();
      complex1.nthRoot(290);
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.NaN.sin();
      complex5.getArgument();
      Complex complex6 = Complex.valueOf(2.337279322276433E-135, (-183.0));
      Complex complex7 = complex6.asin();
      complex7.ZERO.multiply(complex3);
      complex6.hashCode();
      Complex complex8 = complex7.tanh();
      complex3.subtract(0.0);
      complex2.isInfinite();
      Complex complex9 = complex3.multiply(complex4);
      complex9.INF.asin();
      Complex complex10 = Complex.valueOf(2.337279322276433E-135, 0.0);
      complex10.cosh();
      Complex.valueOf(6.533561982617909E-227, 0.0);
      Complex complex11 = complex8.multiply(290);
      complex11.NaN.tanh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-302.8842149), 0.0);
      complex0.INF.cosh();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex2.ZERO.reciprocal();
      Complex complex5 = complex2.I.sin();
      Complex complex6 = complex0.ZERO.tan();
      complex6.divide(complex2);
      Complex complex7 = complex0.INF.exp();
      complex7.I.cos();
      complex0.getReal();
      complex0.getArgument();
      complex1.cos();
      complex0.getField();
      complex1.getField();
      complex1.isNaN();
      complex1.getReal();
      complex2.tan();
      complex4.add(0.0);
      complex5.getReal();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = new Complex(2.0, (-59.756));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(2.0);
      complex2.ONE.reciprocal();
      Complex.valueOf((-59.756), 6.033249389304709E-115);
      Complex complex3 = complex1.INF.atan();
      complex3.log();
      try { 
        complex2.NaN.nthRoot((-1367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,367
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      complex0.getArgument();
      complex1.cos();
      complex0.getField();
      Complex complex2 = Complex.NaN;
      complex0.multiply(complex2);
      complex1.tanh();
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(290.37);
      Complex complex1 = complex0.acos();
      complex1.I.tan();
      Complex complex2 = new Complex((-770.79171015047), 1.2493696959436675E-93);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.NaN.subtract(complex2);
      complex4.readResolve();
      Complex complex5 = complex0.tanh();
      complex5.ZERO.abs();
      Complex complex6 = complex5.NaN.cosh();
      complex1.hashCode();
      complex5.abs();
      complex3.getReal();
      complex6.ONE.multiply(complex3);
      complex0.I.multiply((-52));
      Complex complex7 = complex5.reciprocal();
      complex7.ONE.sin();
      Complex complex8 = complex1.divide(complex6);
      complex7.isInfinite();
      Complex complex9 = complex3.negate();
      complex1.createComplex(1.2493696959436675E-93, (-4456.107759267));
      Complex complex10 = complex1.divide(complex0);
      complex10.I.pow(complex5);
      Complex complex11 = complex8.sqrt();
      complex4.pow((-2350.7971));
      complex0.tan();
      complex9.add(complex0);
      complex11.divide(complex5);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.exp();
      complex2.ONE.abs();
      complex2.I.readResolve();
      Complex complex3 = complex2.atan();
      complex3.INF.toString();
      Complex.valueOf((-5852.0));
      Complex complex4 = complex2.subtract((-5852.0));
      complex4.NaN.readResolve();
      Complex complex5 = complex4.NaN.add(1.0);
      complex5.I.subtract(1.0);
      Complex complex6 = Complex.valueOf((-5852.0));
      complex6.nthRoot(3863);
      Complex complex7 = complex0.cos();
      complex7.ONE.getField();
      complex0.cos();
      complex0.multiply((double) 3863);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-959.994504));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.cosh();
      complex2.NaN.multiply(complex3);
      complex2.sqrt1z();
      Complex complex4 = complex1.acos();
      complex4.I.atan();
      complex4.cosh();
      complex4.ZERO.getArgument();
      complex2.toString();
      complex0.getField();
      Complex complex5 = complex3.multiply((-959.994504));
      complex5.NaN.exp();
      double double0 = 2442.01254373082;
      complex1.I.pow((-959.994504));
      try { 
        complex2.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-3887.749704), (-3887.749704));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = new Complex((-3887.749704), (-3887.749704));
      complex1.ZERO.add(complex2);
      complex0.getArgument();
      Complex complex3 = Complex.valueOf((-2.356194490192345), 215.9);
      complex3.subtract((-3887.749704));
      complex3.log();
      Complex complex4 = complex2.ZERO.add(complex0);
      complex1.getImaginary();
      complex0.divide((-0.8813735870195429));
      complex3.isInfinite();
      complex1.equals(complex2);
      complex3.pow(complex1);
      complex1.subtract((-2.356194490192345));
      Complex.valueOf(515.9206564927);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1425.4662886390875), (-1425.4662886390875));
      Complex complex1 = Complex.INF;
      complex1.ZERO.sqrt1z();
      complex0.I.pow(complex1);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.ZERO.divide((-4404.3066449586));
      complex0.hashCode();
      complex3.log();
      Complex.valueOf((-4404.3066449586), 0.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-219.311452299));
      int int0 = 1896;
      complex0.INF.nthRoot(1896);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.pow((-219.311452299));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.NaN.exp();
      Complex complex6 = complex5.ONE.log();
      Complex.valueOf((-219.311452299));
      complex6.ONE.add((-617.311));
      complex4.multiply((-617.311));
      Complex complex7 = Complex.valueOf((double) 1896, (double) 1896);
      complex7.tanh();
      Complex complex8 = complex0.add((-219.311452299));
      complex8.ZERO.nthRoot(243);
      complex8.NaN.tanh();
      complex3.toString();
      complex1.I.sqrt();
      Complex complex9 = complex4.exp();
      complex9.getField();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.reciprocal();
      complex1.multiply(complex0);
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(3374.047856349798);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.NaN.add(complex0);
      complex0.I.acos();
      complex2.ZERO.readResolve();
      Complex complex3 = Complex.valueOf(4.426120229279107E153);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex3.NaN.reciprocal();
      Complex complex8 = complex7.INF.negate();
      complex8.ZERO.tanh();
      complex6.INF.createComplex(4.426120229279107E153, 0.0);
      complex2.getImaginary();
      Complex complex9 = complex2.tan();
      complex9.INF.acos();
      Complex complex10 = complex1.createComplex(3374.047856349798, (-834.79054975));
      complex10.INF.conjugate();
      complex5.negate();
      complex3.toString();
      complex6.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.conjugate();
      Complex complex1 = Complex.valueOf((-74.6701768463267), 0.0);
      complex0.atan();
      Complex complex2 = Complex.valueOf(706.6923762301712);
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex3.ONE.tan();
      complex2.ZERO.tanh();
      complex4.ONE.add(0.0);
      complex2.readResolve();
      complex3.asin();
      complex4.INF.asin();
      Complex complex5 = complex4.cos();
      complex5.INF.subtract(0.0);
      complex5.abs();
      complex5.ONE.abs();
      complex1.add(complex0);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(6.008604166110734E80);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.acos();
      complex1.readResolve();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = Complex.valueOf(6.008604166110734E80, 6.283185307179586);
      Complex complex5 = complex0.ZERO.sin();
      complex0.ONE.readResolve();
      complex2.ONE.divide(complex1);
      Complex complex6 = complex0.ONE.pow((-1248.22494001));
      Complex complex7 = complex6.multiply(1379);
      Complex.valueOf(6.283185307179586);
      complex6.NaN.subtract(6.283185307179586);
      complex7.INF.tan();
      complex6.I.multiply(1308);
      complex0.isInfinite();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.sinh();
      complex9.asin();
      complex1.NaN.divide((-1248.22494001));
      Complex complex10 = complex9.pow(complex5);
      complex10.acos();
      complex2.divide(0.0);
      complex10.conjugate();
      complex10.nthRoot(1308);
      Complex complex11 = complex3.add(complex4);
      complex11.getField();
      Complex.valueOf((-2603.43), 0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-2098.3928763736));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.conjugate();
      complex0.toString();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.isInfinite();
      complex0.sqrt();
      Complex.valueOf((-3.7398514182529506E-8), (-6259.7398));
      complex0.I.cosh();
      complex0.getImaginary();
      Complex complex3 = complex0.cos();
      complex3.NaN.tanh();
      Complex complex4 = complex3.cos();
      complex4.I.tan();
      complex4.toString();
      complex3.ZERO.sqrt();
      Complex complex5 = complex3.tanh();
      complex5.INF.sqrt1z();
      complex0.ONE.subtract(complex2);
      complex2.sinh();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2360.3801404));
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex4.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex3.sin();
      Complex complex10 = complex9.multiply(complex3);
      complex10.I.tanh();
      Complex complex11 = complex10.INF.subtract(complex7);
      complex9.getReal();
      Complex complex12 = complex9.acos();
      Complex.valueOf((-1421.0), 0.0);
      complex12.isInfinite();
      complex8.multiply(complex6);
      Complex complex13 = complex11.negate();
      complex13.subtract((-724.7718865615395));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.createComplex((-1480.71), (-1480.71));
      Complex complex3 = complex2.ZERO.sin();
      complex1.sinh();
      complex3.ONE.getArgument();
      complex0.ZERO.readResolve();
      complex0.sqrt();
      Complex complex4 = complex2.cos();
      complex1.sinh();
      Complex complex5 = complex4.subtract(0.0);
      complex5.I.add(494.46);
      complex3.divide((-3095.405315717));
      Complex.valueOf(0.0);
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.getField();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.ZERO.tan();
      complex3.ONE.negate();
      complex0.INF.getField();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.INF.exp();
      complex5.ONE.pow(1209.02924273);
      Complex complex6 = complex4.createComplex(460.5602, (-2459.09770026034));
      Complex complex7 = complex6.NaN.atan();
      complex7.ZERO.subtract(460.5602);
      complex1.ZERO.add((-1030.5020611613877));
      complex1.pow(792.4202918);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(2.2778730392456055, 2.2778730392456055);
      complex0.tan();
      complex0.INF.exp();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex0.I.tanh();
      complex2.NaN.cos();
      complex2.readResolve();
      Complex complex3 = complex0.I.cosh();
      complex0.I.readResolve();
      complex0.getField();
      complex3.I.getField();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ONE.tanh();
      complex4.add(complex1);
      Complex complex6 = new Complex(634.4, (-534.939138663));
      complex0.divide(complex6);
      Complex complex7 = Complex.valueOf(0.0, 2007.641713779985);
      complex7.ZERO.pow((-534.939138663));
      complex3.cos();
      complex0.asin();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      complex0.NaN.toString();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.I.divide(complex3);
      Complex complex5 = complex1.NaN.cos();
      Complex complex6 = complex2.INF.log();
      complex0.abs();
      Complex complex7 = complex0.ZERO.divide(1410.36);
      complex7.INF.createComplex((-20.0), 1410.36);
      complex7.INF.getArgument();
      complex7.NaN.pow(complex5);
      complex0.isNaN();
      complex1.abs();
      Complex complex8 = complex0.pow(complex4);
      complex8.ZERO.acos();
      complex8.I.subtract(1410.36);
      complex1.readResolve();
      Complex complex9 = complex6.pow(2123.767355255);
      complex0.INF.conjugate();
      complex1.ONE.subtract((-20.0));
      complex0.getReal();
      Complex complex10 = complex1.multiply(complex0);
      complex10.ONE.getArgument();
      complex5.readResolve();
      complex7.acos();
      complex9.cos();
      complex1.pow(2123.767355255);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.ZERO.pow((-20.0));
      complex4.ZERO.sqrt();
      Complex complex5 = complex2.I.conjugate();
      complex5.ZERO.sin();
      Complex complex6 = complex0.acos();
      complex6.INF.pow((-20.0));
      Complex complex7 = Complex.I;
      complex0.equals(complex7);
      complex0.tan();
      complex1.cos();
      complex3.multiply(1);
      complex3.cosh();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(0);
      complex1.ONE.divide(complex0);
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex.valueOf((-1412.6), (-8.784622656707742E-9));
      complex2.add(6.283185307179586);
      complex1.sin();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-725.2644184413856), (-725.2644184413856));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = Complex.valueOf(6.283185307179586, (-67.38));
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex0.asin();
      complex2.abs();
      complex3.I.add(complex5);
      complex2.getReal();
      Complex.valueOf((-725.2644184413856));
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex6.I.sinh();
      complex2.I.sin();
      complex4.equals(complex3);
      complex1.ONE.log();
      complex3.conjugate();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex7.sin();
      complex9.NaN.sqrt();
      complex9.INF.sqrt();
      complex8.cos();
      complex8.sqrt1z();
      complex6.getReal();
      complex5.sinh();
      Complex complex10 = complex2.add(complex0);
      complex2.toString();
      complex7.sin();
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 0.0);
      complex0.I.abs();
      complex0.pow(3.652892398145774E-153);
      Complex complex1 = complex0.divide(2.0);
      complex1.abs();
      Complex complex2 = complex0.divide(complex1);
      complex2.add(596.24019005137);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.hashCode();
      complex0.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.ONE.pow(complex0);
      Complex complex2 = complex1.I.divide(Double.NaN);
      complex1.INF.subtract(complex0);
      complex2.ZERO.add(complex1);
      complex1.sinh();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.add(0.3757305145263672);
      complex2.I.tanh();
      complex1.ONE.readResolve();
      complex0.multiply(complex1);
      double double0 = 0.0;
      complex0.add(0.0);
      Complex.valueOf(0.0);
      int int0 = (-330);
      try { 
        complex0.nthRoot((-330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -330
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-386));
      complex1.getArgument();
      Complex.valueOf(6.283185307179586, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.sqrt1z();
      Complex complex1 = new Complex((-971.1418598287521), 1.4385227981629147E-8);
      Complex complex2 = complex1.ONE.multiply(1.4385227981629147E-8);
      complex2.pow(complex1);
      complex0.INF.divide(complex1);
      try { 
        complex0.ZERO.nthRoot((-382));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -382
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = complex0.asin();
      complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.multiply(Double.NaN);
      complex0.getField();
      complex1.divide(complex0);
      complex2.reciprocal();
      complex0.log();
      try { 
        complex1.nthRoot((-912));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -912
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7043828964233398, 1.7043828964233398);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.getField();
      Complex complex1 = complex0.NaN.divide(1.970577274107218E-8);
      complex0.tan();
      List<Complex> list0 = complex0.nthRoot(1762);
      assertTrue(list0.contains(complex0));
      assertEquals(1762, list0.size());
      
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.I.add(Double.NaN);
      Complex complex4 = complex3.ZERO.atan();
      complex2.sqrt();
      complex0.createComplex(Double.NaN, 1762);
      complex0.hashCode();
      Complex complex5 = complex2.ONE.sqrt();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex0.ONE.subtract((-1888.0));
      assertEquals(1889.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex6.ONE.reciprocal();
      complex6.I.pow(Double.NaN);
      Complex complex9 = complex6.INF.asin();
      complex2.log();
      complex5.getReal();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex10 = Complex.valueOf((-403.525511845517), (double) 1762);
      assertEquals((-403.525511845517), complex10.getReal(), 0.01);
      
      complex9.isInfinite();
      complex6.equals(complex9);
      complex2.getReal();
      complex2.multiply((-403.525511845517));
      complex0.toString();
      Complex complex11 = complex0.tan();
      assertEquals(1.557407724654902, complex11.getReal(), 0.01);
      
      Complex complex12 = complex4.divide(complex0);
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      Complex complex13 = complex2.reciprocal();
      assertSame(complex13, complex6);
      
      complex4.getField();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex8));
      assertSame(complex3, complex1);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex2.ONE.divide(2565.56784);
      Complex complex5 = complex4.NaN.sqrt1z();
      assertEquals(3.8977725882313833E-4, complex4.getReal(), 0.01);
      
      Complex complex6 = complex0.I.multiply((-540));
      Complex complex7 = complex0.cosh();
      String string0 = complex6.toString();
      assertEquals("(-0.0, -540.0)", string0);
      
      Complex complex8 = complex7.tan();
      complex8.I.sinh();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.INF.asin();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(74.68593339875962, complex9.getReal(), 0.01);
      assertSame(complex10, complex5);
      
      Complex complex11 = complex6.sinh();
      assertEquals(0.34659290437655327, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex7.acos();
      Complex complex13 = complex12.INF.sinh();
      assertTrue(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex1));
      
      Complex complex14 = complex0.sin();
      Complex complex15 = complex0.exp();
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex12.multiply(complex0);
      Complex complex17 = complex12.divide(20.0);
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      
      complex16.multiply(1);
      assertTrue(complex7.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex3));
  }
}
