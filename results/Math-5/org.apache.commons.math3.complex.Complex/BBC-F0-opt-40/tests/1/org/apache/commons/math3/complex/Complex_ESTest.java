/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 16:52:41 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0);
      complex0.ZERO.pow(complex1);
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      Complex complex3 = complex2.subtract(948.9612);
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.valueOf(0.7853981633974483);
      complex5.INF.tanh();
      complex5.hashCode();
      complex3.subtract(0.3831497249319151);
      Complex complex6 = complex3.tan();
      Complex complex7 = Complex.I;
      complex4.pow(complex7);
      complex2.abs();
      complex3.atan();
      Complex complex8 = new Complex(948.9612);
      Complex complex9 = complex8.asin();
      Complex complex10 = Complex.I;
      complex8.NaN.getField();
      Complex complex11 = Complex.NaN;
      complex9.nthRoot(148);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(20.0, 3896.6);
      complex1.subtract(948.9612);
      Complex complex2 = Complex.NaN;
      complex2.NaN.subtract(complex1);
      complex0.I.createComplex(20.0, 3896.6);
      complex1.abs();
      complex2.subtract(complex0);
      Complex complex3 = new Complex(3896.6);
      Complex.valueOf((-838.75313), 2404.99);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.NaN.toString();
      Complex complex2 = complex0.tanh();
      complex2.ZERO.nthRoot(4866);
      Complex complex3 = complex0.ZERO.createComplex(0.0017394476919321278, 0.0017394476919321278);
      complex3.ZERO.pow(complex0);
      Complex complex4 = complex2.acos();
      complex4.NaN.atan();
      Complex complex5 = complex2.subtract(complex1);
      complex5.NaN.nthRoot(4866);
      Complex.valueOf((double) 4866);
      Complex complex6 = complex1.multiply(complex2);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.INF.sqrt1z();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.I.negate();
      Complex complex11 = Complex.valueOf((-4273.509716664));
      complex11.ONE.add(0.0017394476919321278);
      Complex complex12 = complex7.divide(complex9);
      complex12.ZERO.conjugate();
      complex2.subtract((-2298.1426381));
      complex8.createComplex(0.0017394476919321278, 9.537541205168784E-120);
      complex10.log();
      complex12.reciprocal();
      complex5.log();
      complex6.add((-4273.509716664));
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-3.5369724282602945E13));
      complex1.cos();
      Complex complex2 = Complex.valueOf((-3.5369724282602945E13), (-20.0));
      Complex.valueOf(7.358873642076596E195);
      complex2.tan();
      Complex complex3 = new Complex(7.358873642076596E195);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(1378.5370514583606, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(5947245.10720977, 287.4484327128954);
      Complex complex3 = complex0.add(5947245.10720977);
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.ZERO;
      complex5.multiply(complex3);
      complex3.tanh();
      Object object0 = new Object();
      Object object1 = complex3.readResolve();
      complex2.equals(object1);
      complex4.sqrt();
      Complex complex6 = Complex.valueOf(5947245.10720977);
      complex0.nthRoot(973);
      Complex complex7 = complex3.divide(complex4);
      complex6.readResolve();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(1378.5370514583606, Double.POSITIVE_INFINITY);
      complex0.cos();
      complex0.multiply(2980);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.getField();
      Complex complex2 = Complex.INF;
      complex1.reciprocal();
      complex0.hashCode();
      complex1.createComplex(0.49539655935838334, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(7.901084730502162E-9, (-1.0672213971363184E-7));
      Complex complex1 = Complex.valueOf(7.901084730502162E-9, (-1.0672213971363184E-7));
      Complex complex2 = complex1.reciprocal();
      complex2.NaN.conjugate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.multiply(7.901084730502162E-9);
      complex4.nthRoot(870);
      Complex complex5 = new Complex(2293.891614052, 2293.891614052);
      Complex complex6 = Complex.INF;
      complex3.asin();
      Complex complex7 = Complex.ZERO;
      complex5.sqrt1z();
      Complex.valueOf((-87.5978119), (double) 870);
      complex6.tan();
      Complex complex8 = Complex.ZERO;
      complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.subtract(177.86);
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex4.asin();
      complex2.sqrt1z();
      complex0.add(177.86);
      Complex complex6 = complex2.tan();
      complex6.multiply(1367.41520589);
      complex5.getImaginary();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.hashCode();
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.sinh();
      double double0 = (-17.0);
      Complex complex2 = complex1.I.add((-17.0));
      Complex complex3 = Complex.valueOf((-3014.3634646813443), 2.782159649779516);
      complex1.I.reciprocal();
      complex3.NaN.subtract(complex0);
      complex0.toString();
      Complex complex4 = complex0.pow(889.70935296246);
      complex4.ZERO.asin();
      complex0.getField();
      complex4.I.multiply(2.782159649779516);
      Complex complex5 = Complex.valueOf(889.70935296246);
      Complex complex6 = complex5.tanh();
      complex4.asin();
      complex5.ZERO.divide(889.70935296246);
      Complex complex7 = complex6.INF.divide(complex2);
      complex7.ZERO.subtract(complex0);
      Complex complex8 = complex2.sinh();
      complex4.acos();
      Complex.valueOf(889.70935296246, 889.70935296246);
      Complex.valueOf(2.0133131420595028E-8);
      try { 
        complex8.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(1379.15178483373, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.subtract(287.4484327128954);
      Complex complex2 = complex1.pow(complex0);
      complex2.abs();
      complex1.atan();
      Complex complex3 = complex0.multiply(complex1);
      complex3.multiply(complex2);
      complex2.asin();
      complex3.sqrt();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.negate();
      Complex.valueOf(1007.331659462165, 0.006957685509493865);
      complex5.tanh();
      Object object0 = new Object();
      Complex complex6 = Complex.valueOf((-3207.322915876), 2306.3);
      Complex complex7 = Complex.NaN;
      complex6.equals(complex7);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(1509.6944449224359, (double) 17);
      complex0.INF.multiply(0.0);
      complex0.nthRoot(17);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex3.asin();
      complex0.sqrt1z();
      Complex complex6 = Complex.valueOf((double) 17, 1509.6944449224359);
      complex6.tanh();
      Object object0 = new Object();
      Object object1 = complex1.readResolve();
      complex4.equals(object1);
      complex6.sqrt();
      complex5.sinh();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      Complex complex1 = Complex.I;
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1379.15178483373);
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.pow(complex1);
      complex3.abs();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.multiply(complex1);
      complex4.multiply(complex0);
      Complex complex6 = complex5.asin();
      complex0.sqrt();
      Complex complex7 = complex5.negate();
      Complex.valueOf(0.9999999611907433, 2.0409413041821978E-5);
      complex6.tanh();
      Object object0 = new Object();
      complex7.equals(complex0);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1749.504790916);
      Complex complex1 = complex0.subtract(3645.2);
      Complex complex2 = complex1.subtract(1388813.2107174965);
      Complex complex3 = complex1.pow(complex2);
      complex2.abs();
      Complex complex4 = complex3.atan();
      complex1.multiply(complex4);
      Complex complex5 = complex0.multiply(complex2);
      complex5.asin();
      Complex complex6 = Complex.INF;
      complex6.sqrt();
      Complex complex7 = complex2.negate();
      Complex.valueOf(1390708.9059265805, 1379.15178483373);
      Complex complex8 = complex7.tanh();
      Object object0 = new Object();
      complex8.equals(complex1);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(2663.9738, (-1.0672213971363184E-7));
      complex0.reciprocal();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-3141.391), 1015.197666346715);
      Complex complex3 = Complex.INF;
      complex0.asin();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.add(2027.87);
      complex0.tan();
      Complex complex6 = Complex.NaN;
      complex6.multiply(0.0);
      complex4.getImaginary();
      complex2.add(0.0);
      complex1.exp();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-510.64));
      Complex complex1 = complex0.ZERO.subtract(2.0);
      Complex complex2 = complex0.ZERO.subtract(2.0);
      complex2.ONE.pow(complex0);
      complex2.NaN.abs();
      Complex complex3 = complex2.INF.atan();
      complex1.I.multiply(complex0);
      Complex complex4 = complex3.multiply(complex2);
      Complex.valueOf((-510.64));
      Complex complex5 = new Complex((-510.64));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex4.divide(complex0);
      complex7.createComplex(Double.NaN, 2.0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(1379.15178483373, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 287.4484327128954);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.multiply(8.988361382732908E-9);
      complex6.nthRoot(852);
      complex1.asin();
      Complex complex7 = new Complex((-2833.59039), 1379.15178483373);
      Complex complex8 = Complex.INF;
      complex6.asin();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.ZERO;
      complex10.sqrt1z();
      Complex complex11 = Complex.valueOf(2.4585794728405612E-8, 1379.15178483373);
      complex3.tan();
      Complex complex12 = Complex.ZERO;
      complex0.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.cos();
      Complex.valueOf(1509.6944449224359, (double) 17);
      Complex complex1 = complex0.INF.multiply((-14.594480879130609));
      complex1.toString();
      complex0.nthRoot(17);
      complex1.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(1379.15178483373, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-509.493630680008));
      complex1.nthRoot(2513);
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex1.asin();
      Complex.valueOf((-1934.86678));
      Complex complex7 = complex0.sqrt();
      complex2.negate();
      Complex complex8 = Complex.valueOf(456.6510542, 287.4484327128954);
      complex8.tanh();
      Object object0 = new Object();
      complex7.isInfinite();
      complex6.sqrt();
      complex5.cosh();
      complex4.multiply((-305.89922206));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1509.6944449224359, (double) 17);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.multiply(3689.7);
      complex2.nthRoot(17);
      complex1.asin();
      Complex complex5 = new Complex(852, (-126.116549564596));
      Complex complex6 = Complex.INF;
      complex4.asin();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex8.sqrt1z();
      Complex.valueOf((double) 17, 404.9130262255383);
      complex0.tan();
      complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.I;
      complex9.getImaginary();
      complex5.cosh();
      complex3.pow(1509.6944449224359);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(7.901084730502162E-9, (-1.0672213971363184E-7));
      Complex complex1 = complex0.reciprocal();
      complex0.getArgument();
      Complex complex2 = complex1.divide(649.9);
      Complex complex3 = complex0.tan();
      complex0.toString();
      complex3.getArgument();
      Complex complex4 = complex2.multiply(1045);
      complex4.toString();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = new Complex(2.7796303536272215E-86, 2.7796303536272215E-86);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.sqrt();
      complex1.acos();
      Complex complex8 = complex4.asin();
      Complex complex9 = Complex.valueOf(2.7796303536272215E-86, 2.7796303536272215E-86);
      complex9.add(2.7796303536272215E-86);
      Complex complex10 = complex6.reciprocal();
      complex10.sin();
      Complex complex11 = complex3.cos();
      Complex complex12 = Complex.valueOf(0.5557018518447876);
      Complex complex13 = complex10.divide(complex12);
      complex4.atan();
      Complex.valueOf(0.5557018518447876);
      Complex complex14 = complex2.atan();
      complex9.toString();
      Complex complex15 = complex13.tanh();
      complex8.pow(complex12);
      complex6.multiply(0.5557018518447876);
      complex2.readResolve();
      Complex complex16 = complex4.cosh();
      complex15.tan();
      complex16.exp();
      complex15.exp();
      complex7.sqrt1z();
      Complex complex17 = Complex.INF;
      complex17.sqrt1z();
      complex14.readResolve();
      complex11.atan();
      complex10.sqrt();
      complex3.tanh();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-1.0672213971363184E-7), (-1.0672213971363184E-7));
      Complex complex1 = complex0.reciprocal();
      Complex.valueOf(3689.29369);
      Complex.valueOf((-1.0672213971363184E-7), 930.70247335);
      Complex complex2 = complex0.tanh();
      Object object0 = new Object();
      complex2.isInfinite();
      complex1.add((-1.0672213971363184E-7));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-56.45141187191411), (-56.45141187191411));
      Complex complex1 = complex0.ONE.atan();
      complex1.I.pow((-56.45141187191411));
      Complex complex2 = complex0.pow((-56.45141187191411));
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex6.I.subtract((-56.45141187191411));
      complex2.equals(complex0);
      complex0.equals(complex1);
      complex4.exp();
      Complex complex8 = complex1.log();
      Complex complex9 = Complex.valueOf((-56.45141187191411));
      Complex complex10 = complex8.sinh();
      complex8.sinh();
      complex6.ZERO.pow(complex2);
      Complex.valueOf(1.0297303199768066, (-56.45141187191411));
      complex0.tanh();
      Complex complex11 = complex7.pow((-1992.2436658197948));
      complex11.NaN.pow(complex9);
      complex10.abs();
      try { 
        complex2.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(7.901084730502162E-9, (-1.0672213971363184E-7));
      Complex complex1 = Complex.valueOf(7.901084730502162E-9);
      complex0.divide(complex1);
      Complex complex2 = Complex.ZERO;
      complex2.atan();
      Complex complex3 = Complex.valueOf(7.901084730502162E-9);
      Complex complex4 = complex0.atan();
      complex2.toString();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.pow(complex2);
      complex6.ONE.multiply((-1));
      Complex complex7 = complex1.multiply(893.280220380551);
      Complex complex8 = Complex.ZERO;
      complex8.readResolve();
      complex0.cosh();
      complex0.tan();
      complex7.exp();
      complex8.exp();
      Complex complex9 = Complex.valueOf(7.901084730502162E-9, 2953.647);
      Complex complex10 = complex9.sqrt1z();
      complex9.I.add((double) (-1));
      complex3.sqrt1z();
      complex10.readResolve();
      complex4.atan();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(287.4484327128954);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.reciprocal();
      complex2.atan();
      complex0.sqrt();
      Complex complex3 = complex0.negate();
      Complex.valueOf(157.38485784635, 287.4484327128954);
      Complex complex4 = complex0.tanh();
      Object object0 = new Object();
      complex4.isInfinite();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.sqrt();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-510.64));
      complex0.ZERO.subtract(2.0);
      Complex complex1 = complex0.ZERO.subtract(2.0);
      complex1.NaN.abs();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.valueOf(Double.NaN, 2.0);
      complex4.asin();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex2.add((-1926.7255673976513));
      Complex complex7 = complex2.tan();
      complex6.multiply(3800.6533);
      Complex.valueOf(3.444406231880653E-285);
      complex5.getImaginary();
      Complex complex8 = Complex.ONE;
      complex8.add(3800.6533);
      complex7.reciprocal();
      Complex complex9 = new Complex((-3800.6533), Double.NaN);
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(1379.15178483373, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.pow(complex1);
      complex1.abs();
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.ONE;
      complex2.multiply(complex4);
      complex4.asin();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex2.negate();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex3.tanh();
      Object object0 = new Object();
      Complex complex7 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex7.isInfinite();
      complex6.sqrt();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-3800.6533), 455.6510542);
      Complex complex1 = complex0.INF.multiply((-1585.213196831948));
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.I.add(complex3);
      complex2.ONE.sinh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex5.I.sqrt();
      Complex complex8 = complex7.I.acos();
      complex2.NaN.asin();
      Complex complex9 = complex7.ONE.add(455.6510542);
      complex1.reciprocal();
      Complex complex10 = complex1.sin();
      complex10.cos();
      complex10.NaN.divide(complex5);
      complex10.atan();
      Complex complex11 = Complex.valueOf(893.280220380551);
      complex11.INF.atan();
      complex2.toString();
      complex8.tanh();
      Complex complex12 = complex8.pow(complex4);
      complex12.NaN.multiply(455.6510542);
      complex0.ONE.readResolve();
      complex0.cosh();
      complex5.tan();
      complex2.exp();
      complex6.exp();
      complex2.sqrt1z();
      Complex complex13 = complex6.sqrt1z();
      complex13.readResolve();
      complex3.atan();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(31633.179600000003, 31633.179600000003);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.ONE.subtract(31633.179600000003);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.ONE.divide(31633.179600000003);
      complex4.NaN.acos();
      complex0.INF.readResolve();
      complex0.NaN.hashCode();
      Complex complex5 = complex0.tan();
      complex1.ONE.hashCode();
      Complex complex6 = complex1.createComplex((-30882.418873128085), 1049.3116109293);
      Complex complex7 = complex3.add((-2984068.460420808));
      complex7.abs();
      complex6.ONE.hashCode();
      complex7.sqrt();
      complex6.getField();
      try { 
        complex5.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      complex1.abs();
      Complex complex3 = Complex.valueOf(1.1752011936438014);
      complex3.multiply(complex2);
      complex2.sqrt();
      complex1.negate();
      Complex complex4 = Complex.I;
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-510.64));
      Complex complex1 = complex0.ZERO.subtract(2.0);
      Complex.valueOf((-510.64));
      Complex complex2 = complex0.multiply(complex1);
      complex1.asin();
      complex0.sqrt();
      complex1.negate();
      Complex complex3 = Complex.valueOf(0.0997506234413965, (-3859.652632));
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.sqrt1z();
      complex4.atan();
      Complex complex6 = complex5.subtract((-329.19449));
      Complex complex7 = Complex.NaN;
      complex2.sqrt1z();
      complex3.pow((-686.6405246081921));
      complex5.pow(complex3);
      complex6.sin();
      Complex.valueOf(0.0997506234413965);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(1379.15178483373, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 287.4484327128954);
      complex2.ONE.reciprocal();
      Complex complex3 = Complex.INF;
      complex3.multiply(287.4484327128954);
      complex3.nthRoot(852);
      complex1.asin();
      Complex complex4 = new Complex(287.4484327128954, 852);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.ZERO;
      complex7.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.tan();
      complex1.multiply(0.0);
      complex6.getImaginary();
      complex8.add((-37733.9413093869));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(196.254836);
      Complex complex2 = complex1.subtract(2.0);
      Complex complex3 = complex1.subtract((-629.9542908133));
      Complex complex4 = complex2.pow(complex3);
      complex2.abs();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex2.multiply(complex5);
      complex2.asin();
      complex5.sqrt();
      Complex complex7 = complex6.negate();
      Complex complex8 = Complex.valueOf(196.254836, 2.0);
      Complex complex9 = complex7.tanh();
      complex9.ZERO.log();
      complex8.ZERO.createComplex((-629.9542908133), 20.0);
      Object object0 = new Object();
      complex4.isInfinite();
      complex5.sqrt();
      complex0.cosh();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.I.add((-575.55703155));
      Complex complex2 = Complex.I;
      complex0.add(complex2);
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 2.7689167860486803);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.NaN.sqrt();
      complex2.I.multiply(1895.82);
      complex1.I.sqrt1z();
      Complex complex3 = complex2.ZERO.multiply((-1277141308));
      Complex complex4 = Complex.valueOf(2.7689167860486803, 2.7689167860486803);
      Complex complex5 = complex4.ZERO.exp();
      complex4.I.sqrt();
      complex5.I.negate();
      complex0.ONE.sqrt();
      complex0.readResolve();
      Complex complex6 = complex4.divide(2.7689167860486803);
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex7.NaN.pow(complex1);
      complex8.I.tanh();
      complex3.multiply(complex4);
      complex7.ONE.readResolve();
      Complex complex9 = complex6.ZERO.sqrt();
      complex7.subtract(complex1);
      complex7.divide(2.7689167860486803);
      complex7.log();
      complex7.multiply(complex4);
      complex5.sin();
      complex8.add(2193.211);
      complex9.divide(complex2);
      complex6.atan();
      complex2.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.cos();
      Complex complex1 = Complex.valueOf(1509.6944449224359, (double) 17);
      Complex complex2 = complex0.INF.multiply(0.0);
      complex0.nthRoot(17);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex3.asin();
      complex0.sqrt1z();
      complex5.add(831.231872287);
      complex4.tan();
      complex2.multiply(0.0);
      complex5.getImaginary();
      complex4.add((-8.723843554555664E8));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.conjugate();
      complex1.INF.add(complex0);
      complex0.multiply(1.0);
      Complex complex2 = Complex.valueOf(1156.13557344664, 0.9999528007445925);
      complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex3.INF.multiply(20.0);
      complex4.INF.hashCode();
      Complex complex6 = complex3.pow(0.0);
      complex0.cosh();
      complex5.getReal();
      complex1.readResolve();
      complex1.conjugate();
      Complex complex7 = complex6.asin();
      complex5.abs();
      complex7.getField();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.valueOf(0.0, 1.0847913100494912E-238);
      complex8.equals(complex9);
      complex6.pow((-1076.9715251935347));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
      double double0 = Double.NaN;
      Complex.valueOf(1509.6944449224359, Double.NaN);
      complex0.multiply(1768.798148349);
      try { 
        complex0.nthRoot((-2251));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,251
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(complex0);
      complex0.abs();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.multiply(complex1);
      complex0.asin();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.negate();
      Complex complex6 = Complex.valueOf(1.0, 1.206790586971942E-8);
      complex6.tanh();
      complex5.sqrt1z();
      complex6.atan();
      complex3.subtract((-1.0));
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.acos();
      complex9.I.toString();
      Complex complex10 = complex5.pow(1.0);
      complex10.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1500.4954115), 44.46706);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.I.asin();
      // Undeclared exception!
      complex1.ZERO.nthRoot(2146960126);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.atan();
      complex0.equals(complex1);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.pow(1959.2930983919);
      Complex complex5 = complex1.cosh();
      complex1.getReal();
      complex3.readResolve();
      complex5.conjugate();
      Complex complex6 = complex4.asin();
      complex2.abs();
      complex1.getField();
      Object object0 = new Object();
      complex6.equals(object0);
      Complex complex7 = Complex.I;
      complex7.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.valueOf(1509.6944449224359, (double) 17);
      complex0.INF.multiply(0.0);
      complex0.nthRoot(17);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex3.asin();
      complex0.sqrt1z();
      Complex complex6 = complex5.add(831.231872287);
      Complex complex7 = complex4.tan();
      Complex complex8 = complex6.asin();
      complex0.multiply(20.0);
      complex7.getImaginary();
      Complex complex9 = complex8.add((-760.8709915071));
      complex1.add(complex9);
      complex3.sinh();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1467.150131);
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.NaN.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.cos();
      complex0.getArgument();
      complex3.ZERO.pow(2.9599693109692324E-149);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.add(complex4);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.multiply((-4051));
      complex3.NaN.acos();
      Complex complex8 = (Complex)complex6.NaN.readResolve();
      complex2.I.sqrt1z();
      Complex complex9 = complex6.subtract(complex3);
      Complex complex10 = complex7.asin();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.sqrt1z();
      complex9.add((double) (-4051));
      complex11.tan();
      Complex complex13 = complex12.asin();
      Complex complex14 = complex10.multiply((double) (-4051));
      complex14.NaN.add(0.41421356237309515);
      complex13.getImaginary();
      complex8.toString();
      complex1.conjugate();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.valueOf(1509.6944449224359, (double) 17);
      Complex complex3 = complex0.pow((double) 17);
      complex2.NaN.multiply((-3150));
      Complex complex4 = complex3.cosh();
      complex4.I.tanh();
      complex2.getReal();
      complex3.readResolve();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.conjugate();
      Complex complex7 = Complex.ZERO;
      complex7.asin();
      Complex complex8 = Complex.INF;
      complex8.abs();
      Complex complex9 = complex6.I.sqrt1z();
      complex0.getField();
      Complex complex10 = Complex.ZERO;
      complex6.divide(Double.POSITIVE_INFINITY);
      complex3.subtract(1509.6944449224359);
      complex9.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.equals((Object) null);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf((-1.998183061531611E-9), (-1.998183061531611E-9));
      Complex complex4 = complex0.multiply((-1.998183061531611E-9));
      complex4.nthRoot(1114);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.asin();
      Complex complex7 = complex4.subtract(complex3);
      complex1.asin();
      complex2.sqrt1z();
      complex6.add(831.231872287);
      Complex complex8 = complex1.tan();
      complex4.asin();
      complex7.multiply(475.9);
      Complex complex9 = Complex.NaN;
      complex9.getImaginary();
      complex8.add((-1.998183061531611E-9));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.equals((Object) null);
      complex1.multiply(complex0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.INF.pow(0.0);
      complex3.NaN.cosh();
      complex0.getReal();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.ONE.conjugate();
      Object object0 = new Object();
      complex4.equals(complex5);
      Complex complex6 = Complex.INF;
      complex6.sqrt();
      Complex complex7 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      complex7.multiply(5570.21933);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-510.64));
      Complex complex1 = complex0.ZERO.subtract(2.0);
      Complex complex2 = complex0.ZERO.subtract(2.0);
      complex2.ONE.pow(complex0);
      complex2.NaN.abs();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex1.I.multiply(complex0);
      Complex complex5 = complex1.NaN.asin();
      complex1.NaN.sqrt();
      complex0.NaN.negate();
      complex4.tan();
      Complex complex6 = new Complex(536.302429917944);
      complex6.asin();
      complex3.multiply((-715.9599933026493));
      complex5.getImaginary();
      complex0.add((-510.64));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.asin();
      complex1.pow(0.0);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex3.ZERO.atan();
      complex3.INF.multiply(20.0);
      complex4.INF.hashCode();
      complex3.NaN.negate();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex1.INF.exp();
      complex1.nthRoot(4101);
      complex0.INF.add(0.0);
      Complex complex7 = complex0.reciprocal();
      complex5.multiply(4101);
      complex4.abs();
      Complex.valueOf(0.0);
      complex7.readResolve();
      complex6.divide(2152528.5068933177);
      complex7.divide(4337.6891117935);
      Complex complex8 = Complex.INF;
      complex8.subtract(28.516018029185);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(complex0);
      complex1.abs();
      Complex complex3 = Complex.valueOf(1.1752011936438014);
      Complex complex4 = complex3.multiply(complex2);
      complex0.asin();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.negate();
      Complex complex7 = Complex.valueOf(1.1752011936438014, 1.206790586971942E-8);
      complex7.tanh();
      complex6.sqrt1z();
      complex7.atan();
      complex4.subtract((-1.0));
      Complex complex8 = Complex.NaN;
      complex8.sqrt1z();
      Complex complex9 = complex6.pow(1.1752011936438014);
      complex9.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.pow(1642.0051205684895);
      complex2.pow(4046.6979809963);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.multiply(62.10928);
      complex4.hashCode();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex1.atan();
      complex3.exp();
      complex1.nthRoot(734);
      complex6.add(6.529321706138789E-9);
      Complex complex8 = complex7.reciprocal();
      complex5.multiply(734);
      complex8.abs();
      Complex.valueOf(Double.NaN);
      complex3.readResolve();
      complex2.divide(Double.NaN);
      Complex complex9 = Complex.NaN;
      complex9.negate();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.valueOf((double) 734);
      complex1.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.asin();
      complex0.asin();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.pow(38.303);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.multiply((-49.69240096117223));
      complex2.hashCode();
      Complex complex5 = new Complex(1982.2450385907, 1982.2450385907);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex0.exp();
      complex8.nthRoot(37);
      Complex complex9 = new Complex((-303.48896649176885));
      complex9.add((-44.20382431248));
      complex1.reciprocal();
      Complex complex10 = complex5.multiply((-38));
      complex6.abs();
      Complex.valueOf(2658.547709);
      complex7.readResolve();
      complex3.divide(13.4417154466);
      complex10.negate();
      Complex complex11 = Complex.ZERO;
      complex9.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.equals((Object) null);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.log();
      complex0.hashCode();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.valueOf((-1389.51069), (-1389.51069));
      complex7.nthRoot(759);
      complex2.add(0.0);
      Complex complex8 = complex0.reciprocal();
      complex8.abs();
      Complex.valueOf((double) 759);
      complex3.readResolve();
      complex4.divide(2326.2032);
      complex1.divide((-690945.4255057515));
      complex6.subtract(2326.2032);
      complex7.multiply(2027);
      complex5.divide(1.4201378353978042E-97);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-510.64));
      Complex complex1 = complex0.ZERO.subtract(2.0);
      Complex complex2 = complex0.ZERO.subtract(2.0);
      Complex complex3 = complex2.ONE.pow(complex0);
      complex2.NaN.abs();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex1.I.multiply(complex0);
      Complex complex6 = complex1.NaN.asin();
      Complex complex7 = complex4.acos();
      complex5.readResolve();
      complex1.sqrt1z();
      complex7.subtract(complex6);
      Complex complex8 = Complex.ONE;
      complex8.asin();
      complex1.sqrt1z();
      Complex complex9 = complex3.add(Double.NaN);
      complex1.tan();
      complex2.asin();
      Complex complex10 = Complex.INF;
      complex10.multiply((-510.64));
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1467.150131);
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex1.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.cos();
      complex1.getArgument();
      Complex complex4 = complex1.pow(1467.150131);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex4.log();
      Complex complex8 = complex3.multiply((-4051));
      complex2.acos();
      complex7.readResolve();
      complex3.sqrt1z();
      complex8.subtract(complex6);
      Complex complex9 = complex0.asin();
      complex9.sqrt1z();
      Complex complex10 = complex5.add(1467.150131);
      Complex complex11 = complex5.tan();
      complex10.asin();
      complex11.multiply(1467.150131);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1467.150131);
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.cos();
      complex3.getArgument();
      Complex complex4 = complex0.pow((-2102.6));
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex2.log();
      Complex complex8 = complex6.multiply((-4051));
      complex2.acos();
      Complex complex9 = Complex.ONE;
      complex9.readResolve();
      Complex complex10 = complex8.sqrt1z();
      complex6.subtract(complex3);
      Complex complex11 = complex7.asin();
      complex5.sqrt1z();
      complex9.add((-673.55884));
      complex1.tan();
      complex11.asin();
      Complex complex12 = Complex.I;
      complex12.multiply(1.1752011936438014);
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.pow((-3108.62601654163));
      Complex complex4 = complex3.pow((-3108.62601654163));
      Complex complex5 = new Complex(0.6624060869216919, 9.791643415724138E-4);
      Complex complex6 = complex5.atan();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.hashCode();
      complex4.negate();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex5.exp();
      Complex complex9 = Complex.valueOf((-854.697), (double) 4101);
      complex9.nthRoot(4101);
      Complex complex10 = Complex.ZERO;
      complex10.add(9.791643415724138E-4);
      complex6.reciprocal();
      complex1.multiply(4092);
      complex5.abs();
      Complex.valueOf(1474.860813903333);
      Complex complex11 = Complex.ZERO;
      complex11.readResolve();
      complex7.divide(17.3266869);
      complex4.negate();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = Complex.ONE;
      complex13.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.INF.sin();
      complex1.ONE.getArgument();
      complex0.NaN.getField();
      Complex complex2 = Complex.valueOf(650.237596899, (-1488.15));
      Complex complex3 = complex2.ZERO.cosh();
      complex3.I.getArgument();
      Complex complex4 = complex2.NaN.multiply(complex0);
      complex4.INF.pow((-1836.0));
      complex4.INF.sinh();
      complex1.NaN.tan();
      Complex complex5 = complex0.multiply(1118.5812236842416);
      complex2.NaN.negate();
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex6.ONE.cosh();
      complex7.ONE.reciprocal();
      complex5.ONE.multiply(1236);
      complex5.I.log();
      Complex complex8 = Complex.valueOf(1118.5812236842416, 0.0);
      complex8.ZERO.negate();
      complex8.ONE.nthRoot(2245);
      Complex complex9 = complex0.tan();
      Complex.valueOf(1118.5812236842416);
      Complex complex10 = complex9.negate();
      complex10.getField();
      try { 
        complex2.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.sqrt1z();
      complex0.NaN.atan();
      Complex complex3 = Complex.valueOf(0.0, 2037.4740453);
      complex1.ZERO.createComplex(0.0, 0.0);
      complex3.ONE.divide(0.0);
      Complex complex4 = complex3.ONE.multiply(complex0);
      complex4.cos();
      complex3.ZERO.sqrt();
      Complex.valueOf(2037.4740453, 0.0);
      complex0.toString();
      complex1.atan();
      complex2.negate();
      Complex complex5 = Complex.ZERO;
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(2152528.5068933177);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.asin();
      complex2.pow((-20.0));
      Complex complex3 = complex1.pow(1.0);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex1.multiply(1.0);
      complex4.hashCode();
      complex4.negate();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.exp();
      complex5.nthRoot(347);
      complex4.add(0.0);
      complex7.reciprocal();
      complex0.multiply(1897);
      complex4.abs();
      Complex complex8 = Complex.valueOf(1.5654514126859087);
      complex8.readResolve();
      complex4.divide(3.807242187736102E-281);
      Complex complex9 = complex3.divide(1392.17399505144);
      complex9.subtract(2.0);
      complex1.divide(9.57882);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(complex0);
      complex1.abs();
      Complex complex3 = complex0.atan();
      complex3.multiply(complex2);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.negate();
      Complex complex7 = Complex.valueOf(1.1752011936438014, 1.206790586971942E-8);
      complex7.tanh();
      complex6.sqrt1z();
      Object object0 = new Object();
      complex5.equals(complex4);
      complex6.sqrt();
      Complex complex8 = Complex.valueOf(5570.21933, 1.0);
      complex8.multiply(1.1752011936438014);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-510.64));
      Complex complex1 = complex0.ZERO.subtract(2.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ONE.pow(complex0);
      complex2.NaN.abs();
      complex2.INF.atan();
      Complex complex4 = complex1.I.multiply(complex0);
      complex1.NaN.asin();
      Complex complex5 = complex1.NaN.sqrt();
      complex0.NaN.negate();
      Complex complex6 = Complex.valueOf(0.0, (-510.64));
      complex1.tanh();
      complex3.asin();
      complex1.subtract(complex5);
      complex0.atan();
      complex6.cosh();
      complex4.isInfinite();
      Complex complex7 = Complex.NaN;
      complex7.sqrt1z();
      complex6.multiply(Double.NaN);
      complex5.atan();
      complex4.divide(1020191.1504410019);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(1725.809398292);
      Complex complex1 = complex0.subtract(2736.855585);
      Complex complex2 = complex0.subtract((-1009.045618));
      Complex complex3 = complex2.pow(complex1);
      complex3.abs();
      complex2.atan();
      complex1.multiply(complex2);
      Complex complex4 = complex3.asin();
      complex4.sqrt();
      Complex complex5 = complex1.negate();
      Complex.valueOf(Double.NaN, 2736.855585);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex2.sqrt1z();
      Object object0 = new Object();
      complex6.equals(complex0);
      Complex complex8 = Complex.ZERO;
      complex8.sqrt();
      complex7.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.723843554555664E8);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex((-510.64));
      complex2.equals(complex0);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.pow(0.0);
      complex3.cosh();
      complex2.getReal();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex2.conjugate();
      complex5.asin();
      Complex complex7 = Complex.INF;
      complex7.abs();
      complex4.getField();
      complex0.equals(object0);
      complex6.pow(8.723843554555664E8);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex2.pow(0.0);
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex4.INF.multiply(20.0);
      complex5.INF.hashCode();
      Complex complex7 = Complex.INF;
      complex7.pow(20.0);
      complex5.cosh();
      complex4.getReal();
      complex4.readResolve();
      complex6.conjugate();
      Complex complex8 = complex4.asin();
      complex3.abs();
      complex8.getField();
      complex6.equals(complex4);
      complex6.pow((-1442.9));
      complex3.subtract(1.9540846347808838);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-510.64));
      Complex complex1 = complex0.ZERO.subtract(2.0);
      Complex complex2 = complex0.ZERO.subtract(2.0);
      complex2.NaN.abs();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.I.multiply(complex0);
      Complex complex5 = complex1.NaN.asin();
      complex5.INF.log();
      Complex complex6 = complex1.NaN.sqrt();
      complex0.NaN.negate();
      complex6.add((-2478.440990268641));
      complex3.reciprocal();
      Complex complex7 = complex4.multiply((-3427));
      complex7.abs();
      Complex.valueOf(Double.NaN);
      Object object0 = new Object();
      complex2.divide((-1523.91152));
      complex1.divide(0.0);
      complex3.subtract(707.768678879891);
      complex3.divide(2.0);
      complex4.sqrt();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.NaN.multiply(0);
      complex3.ZERO.nthRoot(1);
      complex0.tanh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex2.INF.conjugate();
      complex1.I.acos();
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = Complex.valueOf((-5221.4), (double) 1);
      complex1.exp();
      complex0.subtract(complex7);
      complex8.divide((double) 0);
      complex1.subtract((-793.458343275644));
      complex6.divide(2.373243808746338);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.asin();
      complex1.pow(0.0);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex3.ZERO.atan();
      complex3.INF.multiply(20.0);
      complex4.INF.hashCode();
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex3.atan();
      complex1.INF.exp();
      complex1.nthRoot(4101);
      Complex complex7 = complex0.INF.add(0.0);
      complex0.reciprocal();
      Complex complex8 = complex6.multiply(4101);
      complex8.NaN.abs();
      Complex.valueOf(9.57882);
      complex5.readResolve();
      Complex complex9 = complex2.divide((double) 4101);
      complex8.negate();
      Complex complex10 = Complex.ZERO;
      complex9.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1467.150131);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.cos();
      complex0.getArgument();
      Complex complex4 = complex3.ZERO.pow(2.9599693109692324E-149);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.multiply((-4051));
      complex3.NaN.acos();
      complex7.NaN.readResolve();
      complex2.I.sqrt1z();
      complex1.subtract(complex3);
      Complex complex9 = complex0.asin();
      complex9.sqrt1z();
      Complex complex10 = complex4.add(0.0);
      complex6.tan();
      complex8.asin();
      complex10.multiply(1467.150131);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(1609.4778105);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.INF.divide(complex0);
      Complex complex5 = complex0.createComplex(1609.4778105, 1609.4778105);
      complex4.getField();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex0.subtract(complex1);
      complex5.atan();
      Complex complex8 = complex6.cosh();
      complex8.exp();
      complex7.isInfinite();
      complex2.sqrt1z();
      Complex complex9 = complex8.multiply(1609.4778105);
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.NaN.multiply(0);
      complex3.ZERO.nthRoot(1);
      complex0.tanh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex2.INF.conjugate();
      complex6.sqrt1z();
      Complex complex7 = complex4.subtract(complex6);
      Complex complex8 = complex2.asin();
      Complex complex9 = Complex.ONE;
      complex9.sqrt1z();
      Complex complex10 = complex8.add((-1253.450423));
      Complex complex11 = complex10.createComplex((-20.0), 3145.6961371278);
      complex0.getField();
      Complex complex12 = complex9.asin();
      complex12.subtract(complex7);
      complex11.cosh();
      complex9.isInfinite();
      complex11.sqrt1z();
      complex7.multiply(7.640883264531458E-197);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cosh();
      complex0.I.toString();
      complex1.ZERO.sqrt1z();
      complex1.ZERO.tan();
      Complex complex2 = complex1.ZERO.add(949.07992589401);
      complex0.NaN.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.createComplex(3078.0971844, 3078.0971844);
      Complex complex5 = complex1.log();
      complex5.negate();
      complex4.ZERO.tanh();
      Complex complex6 = complex4.tanh();
      Complex complex7 = Complex.valueOf(949.07992589401);
      complex2.toString();
      complex6.sin();
      Complex.valueOf((-311.147820016), 6.000235114895513E123);
      complex0.I.nthRoot(1363);
      complex5.cosh();
      complex5.readResolve();
      int int0 = (-1707);
      try { 
        complex7.nthRoot((-1707));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,707
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.add(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.NaN.multiply(complex2);
      Complex complex4 = complex0.acos();
      complex4.ONE.cos();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      complex5.ONE.atan();
      Complex complex6 = complex5.ZERO.add(2.1071983674869414E-8);
      complex0.NaN.tanh();
      complex0.toString();
      complex4.tanh();
      complex2.getReal();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex3.multiply((-864));
      complex2.cos();
      complex8.INF.log();
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex complex9 = complex8.sin();
      complex9.sinh();
      complex5.readResolve();
      complex6.sqrt1z();
      Complex complex10 = complex0.exp();
      complex7.multiply((-864));
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract((-1038.041499593201));
      complex1.INF.tanh();
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.atan();
      complex0.getField();
      Complex complex1 = complex0.subtract(0.6624060869216919);
      complex0.ZERO.add((-1.0672213971363184E-7));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex1.subtract(0.6624060869216919);
      complex3.sqrt1z();
      complex4.pow((-1.0672213971363184E-7));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-510.64));
      Complex complex1 = complex0.ZERO.subtract(2.0);
      Complex complex2 = complex0.ZERO.subtract(2.0);
      Complex complex3 = complex2.ONE.pow(complex0);
      complex2.NaN.abs();
      Complex complex4 = complex2.INF.atan();
      complex1.I.multiply(complex0);
      complex1.NaN.asin();
      complex1.NaN.sqrt();
      complex0.NaN.negate();
      Complex complex5 = Complex.valueOf(0.0, (-510.64));
      complex1.tanh();
      complex4.sqrt1z();
      Object object0 = new Object();
      complex4.equals(object0);
      complex3.sqrt();
      complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.asin();
      complex1.pow(0.0);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex3.ZERO.atan();
      complex3.INF.multiply(20.0);
      complex4.INF.hashCode();
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex3.atan();
      complex1.INF.exp();
      complex1.nthRoot(4101);
      complex0.INF.add(0.0);
      complex0.reciprocal();
      Complex complex7 = complex6.multiply(4101);
      complex7.NaN.abs();
      Complex.valueOf(9.57882);
      complex5.readResolve();
      Complex complex8 = complex2.divide((double) 4101);
      Complex complex9 = complex8.divide(Double.POSITIVE_INFINITY);
      complex9.subtract(Double.NaN);
      complex8.divide((double) 4101);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.NaN.multiply(0);
      complex3.ZERO.nthRoot(1);
      complex0.tanh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.divide(complex0);
      complex2.INF.conjugate();
      complex1.I.acos();
      Complex complex6 = complex5.add(complex0);
      Complex.valueOf((-5221.4), (double) 1);
      complex1.exp();
      complex2.divide(0.0);
      Complex complex7 = complex0.subtract(complex6);
      complex5.negate();
      Complex complex8 = Complex.ZERO;
      complex7.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex1 = complex0.ONE.exp();
      complex1.ONE.toString();
      Complex complex2 = complex0.I.subtract(complex1);
      complex0.getReal();
      Complex complex3 = complex0.pow(complex1);
      complex3.INF.getField();
      Complex complex4 = complex3.reciprocal();
      complex4.INF.hashCode();
      Complex complex5 = complex3.multiply(6.283185307179586);
      complex5.ZERO.toString();
      complex3.nthRoot(609);
      complex5.ONE.readResolve();
      Complex complex6 = complex0.ZERO.createComplex(0.0, 961.8851429);
      complex6.ONE.atan();
      Complex complex7 = new Complex(0.0);
      complex2.equals(complex7);
      Complex complex8 = complex5.cosh();
      complex8.reciprocal();
      complex8.I.sqrt1z();
      complex1.INF.cos();
      complex2.sin();
      complex1.ZERO.sin();
      complex3.add(6.283185307179586);
      complex0.isNaN();
      complex4.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.ONE.cos();
      complex1.ZERO.tanh();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.ZERO.acos();
      complex3.ZERO.readResolve();
      Complex complex4 = complex2.add(0.0);
      complex4.getImaginary();
      Complex complex5 = Complex.valueOf((-3.5901655945224663E-10), 0.0);
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex2.subtract(complex4);
      complex7.ZERO.getField();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex0.multiply(complex3);
      complex9.divide(complex1);
      complex1.divide(0.0);
      complex4.isNaN();
      complex8.atan();
      Complex complex10 = complex9.subtract(complex6);
      complex0.toString();
      complex8.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.add((-129.4));
      Complex complex2 = complex0.NaN.createComplex((-900.8643152128947), (-1467.6));
      Complex complex3 = complex2.INF.sqrt();
      complex0.equals("");
      complex2.abs();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex4.ONE.asin();
      complex5.INF.divide((-129.4));
      Complex complex6 = Complex.valueOf(1722.0355032414395);
      Complex complex7 = complex4.ONE.tan();
      Complex complex8 = complex7.INF.acos();
      complex8.NaN.divide(complex1);
      Complex complex9 = complex2.log();
      complex9.reciprocal();
      Complex complex10 = complex3.exp();
      Complex complex11 = complex10.ONE.cosh();
      complex9.log();
      complex4.getImaginary();
      complex6.hashCode();
      complex4.exp();
      complex11.hashCode();
      complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1765.9909111655288);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.I.cos();
      complex1.INF.getArgument();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.I.divide(complex1);
      complex3.NaN.abs();
      complex2.toString();
      complex0.ZERO.abs();
      Complex.valueOf(0.0);
      Complex complex5 = complex0.divide(1765.9909111655288);
      complex5.ONE.tan();
      complex5.I.toString();
      complex0.multiply(complex1);
      complex2.NaN.subtract(0.0);
      Complex complex6 = complex4.sqrt1z();
      Complex.valueOf((-1359.988746547253), 5169.356084172);
      complex6.getReal();
      complex0.getField();
      complex1.multiply(741);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.equals((Object) null);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.INF.pow(0.0);
      complex4.NaN.cosh();
      complex0.getReal();
      complex0.readResolve();
      complex1.ONE.conjugate();
      Complex complex5 = complex1.asin();
      complex3.abs();
      complex0.getField();
      complex2.equals(complex5);
      complex5.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.log();
      complex0.getReal();
      Complex complex3 = complex0.ONE.pow(3.491470347090126E290);
      complex3.add(0.0);
      complex3.ONE.toString();
      Complex complex4 = complex0.sqrt();
      complex4.getArgument();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex0.ONE.pow(0.0);
      Complex complex8 = complex4.ONE.sinh();
      complex0.getImaginary();
      Complex complex9 = complex5.reciprocal();
      complex5.INF.reciprocal();
      complex9.nthRoot(1);
      Complex complex10 = complex4.asin();
      complex10.INF.log();
      complex8.tan();
      complex6.tanh();
      complex4.sinh();
      complex2.readResolve();
      complex7.asin();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(128);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(6.180972117932364E-99, 6.180972117932364E-99);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.I.sqrt();
      complex3.ONE.atan();
      Complex complex4 = Complex.valueOf((-1427.174));
      complex4.ONE.pow((-1427.174));
      Complex complex5 = complex0.I.divide(complex4);
      Complex complex6 = complex0.subtract(6.180972117932364E-99);
      Complex complex7 = complex6.sin();
      complex7.I.sin();
      complex7.negate();
      Complex complex8 = complex2.cosh();
      complex5.readResolve();
      Complex.valueOf((-1427.174), 6.180972117932364E-99);
      complex2.hashCode();
      Complex complex9 = complex8.sin();
      complex0.isNaN();
      complex9.cosh();
      complex9.asin();
      complex2.isNaN();
      Complex.valueOf((-1427.174));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ZERO.atan();
      complex2.INF.getField();
      Complex complex3 = complex0.sinh();
      complex3.ZERO.tanh();
      complex3.getArgument();
      Complex complex4 = complex0.tan();
      complex3.getImaginary();
      complex4.I.divide(0.0);
      Complex complex5 = complex4.tan();
      complex5.toString();
      complex4.getArgument();
      complex4.multiply(1045);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.sinh();
      double double1 = 0.0;
      Complex complex1 = complex0.INF.reciprocal();
      double double2 = 1.1541756557557508E254;
      Complex complex2 = complex1.INF.divide(1.1541756557557508E254);
      complex2.INF.exp();
      Complex complex3 = complex0.INF.sqrt();
      try { 
        complex3.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ONE.asin();
      complex2.I.sqrt();
      complex0.isNaN();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.subtract(complex1);
      complex3.ZERO.multiply(complex2);
      Complex complex5 = complex4.reciprocal();
      complex5.ONE.acos();
      Complex complex6 = Complex.valueOf(0.0);
      complex0.I.toString();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex1.createComplex(0.0, (-4.1291070428848755E-76));
      complex8.sin();
      complex8.getField();
      complex1.hashCode();
      complex6.getField();
      complex1.negate();
      complex1.multiply(complex7);
      complex6.readResolve();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-637.4974425459679));
      Complex complex1 = Complex.valueOf(3359.353196616, 2639.668);
      Complex complex2 = complex1.multiply(complex0);
      complex2.createComplex((-2991.1353793309795), 3359.353196616);
      Complex complex3 = complex2.NaN.pow((-637.4974425459679));
      Complex complex4 = complex0.multiply(0.6338034868240356);
      complex1.ZERO.subtract(complex0);
      Complex complex5 = complex4.NaN.cos();
      complex3.NaN.sin();
      complex5.nthRoot(822);
      Complex complex6 = complex5.multiply(complex1);
      complex4.isNaN();
      complex1.ONE.subtract(2639.668);
      complex1.isNaN();
      complex0.multiply(0.6027565002441406);
      Complex complex7 = complex1.divide(complex0);
      complex7.ONE.nthRoot(822);
      Complex complex8 = complex3.pow((-1679.971));
      complex8.getField();
      complex8.toString();
      Complex complex9 = complex6.pow(0.0);
      complex6.hashCode();
      complex9.sqrt1z();
      complex1.createComplex((-1741.4006022469), 2639.668);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow((-2096.849634560321));
      complex1.NaN.divide((-2096.849634560321));
      complex0.multiply((-1230));
      Complex complex2 = complex0.multiply((-2988.9741138146));
      Complex complex3 = complex2.ZERO.sinh();
      complex3.I.log();
      complex3.conjugate();
      Complex complex4 = complex2.divide(4.3239378585884645E70);
      complex4.I.conjugate();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.sqrt1z();
      complex2.I.reciprocal();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = Complex.valueOf(0.0, 2037.4740453);
      complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ONE.divide(0.0);
      Complex complex6 = complex4.ONE.multiply(complex0);
      complex6.cos();
      complex4.ZERO.sqrt();
      Complex.valueOf(2037.4740453, 0.0);
      complex0.toString();
      complex1.atan();
      complex3.getArgument();
      complex5.pow(0.0);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2151.6768998843695, 2151.6768998843695);
      complex0.readResolve();
      complex0.getArgument();
      complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.sinh();
      complex1.readResolve();
      Complex complex3 = Complex.valueOf(2151.6768998843695);
      complex3.I.divide(complex1);
      complex2.I.negate();
      complex1.ONE.toString();
      Complex.valueOf(2151.6768998843695);
      Complex complex4 = complex0.cosh();
      Complex.valueOf(0.7853981633974483);
      complex2.I.getArgument();
      complex1.isInfinite();
      complex4.add(1576.537);
      complex2.isInfinite();
      Complex complex5 = complex0.multiply(1576.537);
      complex5.ZERO.cos();
      complex1.cosh();
      try { 
        complex2.INF.nthRoot((-495));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -495
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.NaN.sin();
      complex3.ZERO.sin();
      Complex complex4 = complex2.NaN.sinh();
      complex2.INF.getArgument();
      Complex complex5 = complex0.log();
      complex2.getField();
      complex4.hashCode();
      Complex complex6 = complex1.ZERO.cosh();
      Complex complex7 = complex2.multiply((-1036));
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex1.log();
      Complex.valueOf(0.0, 3475.1709);
      Complex complex10 = complex2.conjugate();
      complex8.nthRoot(1);
      complex6.getArgument();
      complex10.toString();
      Complex complex11 = complex5.negate();
      complex11.createComplex((-1036), 0.0);
      Complex complex12 = complex4.exp();
      complex6.getReal();
      complex9.toString();
      complex11.acos();
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      complex1.ZERO.divide(4.24835413113866E-18);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex1.ONE.atan();
      complex2.ZERO.pow(complex0);
      complex3.sqrt();
      complex2.readResolve();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.ONE.negate();
      complex2.getArgument();
      complex1.NaN.readResolve();
      complex0.getReal();
      Complex complex3 = complex1.pow(complex0);
      complex1.abs();
      complex3.NaN.exp();
      try { 
        complex3.nthRoot((-642));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -642
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.conjugate();
      complex0.ONE.sqrt();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf((-1289.7765292697427));
      Complex complex2 = complex0.pow(2011.16406);
      complex2.I.sin();
      Complex.valueOf((-285.3229376), 0.0);
      complex2.I.hashCode();
      complex0.getReal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.ONE.add(0.0);
      complex0.hashCode();
      complex0.toString();
      complex1.conjugate();
      complex3.atan();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1467.150131);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.cos();
      complex0.getArgument();
      Complex complex4 = complex3.ZERO.pow(2.9599693109692324E-149);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = complex0.log();
      complex7.multiply((-4051));
      Complex complex8 = complex3.NaN.acos();
      complex7.NaN.readResolve();
      complex2.I.sqrt1z();
      complex1.subtract(complex3);
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.sqrt1z();
      assertEquals(1.5590612801103185, complex10.getImaginary(), 0.01);
      assertEquals(8.044321392713002, complex10.getReal(), 0.01);
      
      Complex complex11 = complex4.add(0.0);
      Complex complex12 = complex11.createComplex(3145.6961371278, 3145.6961371278);
      complex12.ONE.getField();
      Complex complex13 = complex4.asin();
      Complex complex14 = complex0.subtract(complex1);
      Complex complex15 = complex8.atan();
      Complex complex16 = complex1.cosh();
      complex15.isInfinite();
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex3));
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      
      Complex complex17 = complex14.sqrt1z();
      Complex complex18 = complex17.ONE.multiply(3145.6961371278);
      assertSame(complex14, complex13);
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertEquals(3145.6961371278, complex18.getReal(), 0.01);
      
      Complex complex19 = complex16.atan();
      assertSame(complex19, complex17);
      assertNotSame(complex19, complex4);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.conjugate();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.ONE.cos();
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.cosh();
      assertTrue(complex3.isNaN());
      
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 287.4484327128954);
      Complex complex1 = Complex.valueOf(287.4484327128954);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.INF.cos();
      assertTrue(complex3.isNaN());
      
      Complex complex4 = complex2.multiply(1.985773325073412E-7);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals((-5.708074300154272E-5), complex4.getReal(), 0.01);
      
      double double0 = complex0.getArgument();
      assertEquals(1.5707963267948966, double0, 0.01);
      
      Complex complex5 = complex0.cosh();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-0.007295025865414183), complex5.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add((-718.02411));
      complex0.getImaginary();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.ONE.cosh();
      assertEquals(1.5430806348152437, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      
      complex0.getArgument();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.INF.exp();
      complex6.ZERO.abs();
      assertEquals((-1.0232274785475506), complex5.getImaginary(), 0.01);
      
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex0.acos();
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      complex8.createComplex(6.283185307179586, 0.0);
      assertNotSame(complex7, complex3);
      assertTrue(complex7.equals((Object)complex6));
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex10 = complex0.subtract(1277.2308);
      assertEquals((-1277.2308), complex10.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2373.0);
      String string0 = complex0.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      complex0.getArgument();
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = Complex.valueOf(834.866823819, 0.0);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex1.INF.pow(2373.0);
      Complex complex6 = complex1.INF.sinh();
      complex6.I.createComplex(2126.0, 20.0);
      Complex complex7 = complex0.multiply(complex2);
      assertFalse(complex7.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex3));
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex1.reciprocal();
      assertNotSame(complex8, complex5);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex8, complex6);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex8.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-830.5));
      complex0.I.divide(complex1);
      Complex complex2 = complex0.INF.add((-20.0));
      complex0.tan();
      Complex complex3 = complex0.cosh();
      complex2.NaN.divide(1337.2991591102);
      Complex complex4 = complex3.ONE.sin();
      complex3.isInfinite();
      complex1.ZERO.hashCode();
      int int0 = (-339);
      complex2.ZERO.multiply((-339));
      complex4.INF.hashCode();
      try { 
        complex0.nthRoot((-339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -339
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = (Complex)complex3.readResolve();
      assertSame(complex3, complex0);
      assertTrue(complex4.isNaN());
      
      Complex complex5 = Complex.valueOf(777.942807539942);
      assertEquals(777.942807539942, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(1609.4778105);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.INF.divide(complex0);
      Complex complex5 = complex4.ZERO.tan();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.multiply(1609.4778105);
      assertEquals(2528.1618327912925, complex7.getReal(), 0.01);
      assertEquals((-939.3385381665782), complex7.getImaginary(), 0.01);
      
      double double0 = complex3.getImaginary();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.cos();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      complex0.INF.getField();
      Complex complex3 = Complex.valueOf(1509.6944449224359, (double) 17);
      Complex complex4 = complex0.INF.multiply(0.0);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      
      List<Complex> list0 = complex1.nthRoot(17);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(list0.contains(complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(17, list0.size());
      
      Complex complex5 = complex0.asin();
      assertTrue(complex5.equals((Object)complex1));
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex3.divide((-570.28));
      assertEquals((-2.647286324125756), complex6.getReal(), 0.01);
      assertEquals((-0.02980991793504945), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.ONE.cosh();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      complex0.createComplex((-307.40159), 17);
      assertTrue(complex0.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 1392.024007;
      Complex complex0 = Complex.valueOf(1392.024007);
      try { 
        complex0.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.multiply(complex1);
      assertTrue(complex2.isNaN());
      
      complex0.getArgument();
      Complex complex3 = Complex.valueOf(2.0, 1581.5726);
      assertEquals(1581.5726, complex3.getImaginary(), 0.01);
      assertEquals(2.0, complex3.getReal(), 0.01);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.isInfinite());
  }
}
