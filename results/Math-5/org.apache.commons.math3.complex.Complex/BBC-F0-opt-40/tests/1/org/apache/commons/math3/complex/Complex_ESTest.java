/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:42:53 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.createComplex((-2388.3), (-2388.3));
      complex3.I.toString();
      Complex complex4 = complex2.INF.reciprocal();
      Complex complex5 = complex2.ZERO.pow(complex1);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.NaN.reciprocal();
      complex7.NaN.toString();
      Complex complex8 = complex2.INF.log();
      Complex complex9 = complex2.I.tanh();
      complex9.ZERO.multiply((-2749.581761512771));
      Complex complex10 = complex4.INF.reciprocal();
      complex10.ZERO.abs();
      complex5.INF.subtract((-2833.45871763164));
      Complex complex11 = Complex.valueOf((-2388.3), (-2388.3));
      complex4.divide(complex0);
      Complex complex12 = complex11.ONE.acos();
      complex12.hashCode();
      complex0.INF.add(complex11);
      complex7.reciprocal();
      complex8.divide(complex11);
      Complex complex13 = complex2.tanh();
      complex13.ONE.abs();
      complex5.readResolve();
      complex0.sqrt1z();
      complex1.reciprocal();
      complex1.sinh();
      complex5.cosh();
      complex7.getField();
      complex2.subtract((-2833.45871763164));
      Complex.valueOf(1.0);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.exp();
      Complex complex1 = new Complex(1465.76902424, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.pow(1465.76902424);
      complex0.multiply(complex1);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.6965931069318893E-8, Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
      complex1.INF.hashCode();
      complex1.nthRoot(287);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.NaN.createComplex(20.0, 20.0);
      complex1.tan();
      complex0.tan();
      complex0.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.conjugate();
      Complex complex1 = complex0.createComplex(1, Double.POSITIVE_INFINITY);
      complex1.INF.nthRoot(1);
      complex1.multiply((double) 1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 3.091617462831603E221);
      Complex complex1 = new Complex(1633.13812527, 19.0);
      Complex complex2 = complex0.I.pow(complex1);
      complex1.createComplex(3422.0, 20.0);
      complex2.nthRoot(1773);
      complex0.tan();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.conjugate();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.subtract(0.2854642045333351);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.divide(0.2854642045333351);
      complex4.abs();
      complex0.multiply(3.5030661782438117);
      complex2.add(complex3);
      Complex complex5 = Complex.ZERO;
      complex5.sin();
      Complex complex6 = Complex.valueOf(0.2854642045333351, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.multiply(2118);
      complex5.asin();
      Complex complex8 = Complex.ONE;
      complex7.nthRoot(5032);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.conjugate();
      Complex complex1 = complex0.createComplex(1, Double.POSITIVE_INFINITY);
      complex0.INF.sin();
      complex1.INF.nthRoot(1);
      complex1.multiply(complex0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 3.091617462831603E221);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.createComplex(2727.8918, (-20.0));
      complex2.nthRoot(1);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2374.7133723353227);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = new Complex(2374.7133723353227, 2374.7133723353227);
      Complex complex3 = complex0.asin();
      complex3.divide(complex1);
      complex0.createComplex(2374.7133723353227, 2374.7133723353227);
      complex2.sin();
      Complex complex4 = complex1.createComplex(2374.7133723353227, 2374.7133723353227);
      Complex complex5 = complex4.tan();
      complex5.ZERO.sqrt1z();
      Complex complex6 = Complex.NaN;
      complex4.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.INF.multiply(complex1);
      complex0.getField();
      complex0.getImaginary();
      Complex complex2 = Complex.ZERO;
      complex2.INF.negate();
      Complex complex3 = complex0.divide(178.26014193462396);
      complex3.NaN.sqrt1z();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.add(complex4);
      Complex.valueOf(178.26014193462396);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(20.0);
      Complex complex4 = complex3.conjugate();
      complex3.tanh();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(1633.13812527, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.subtract((-354.7417));
      Complex complex6 = complex3.negate();
      complex0.divide((-354.7417));
      complex6.abs();
      complex2.add(complex4);
      complex5.sin();
      complex6.reciprocal();
      int int0 = 5032;
      try { 
        complex0.nthRoot((-2093796556));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,093,796,556
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(2374.7133723353227);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.subtract((-2159.328295419464));
      Complex complex3 = complex0.conjugate();
      complex3.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.divide(complex6);
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.ONE;
      complex1.abs();
      complex7.divide(1.0);
      complex4.isInfinite();
      complex0.getReal();
      complex5.sqrt();
      complex2.getField();
      complex9.reciprocal();
      Object object0 = new Object();
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(1.066894095685355E-13);
      complex2.sqrt1z();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.divide((-1904.3065158233));
      complex4.reciprocal();
      Complex complex5 = new Complex(1426.6, 0.2854642045333351);
      complex5.add(complex3);
      Complex.valueOf(2.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1029.375));
      complex0.toString();
      Complex complex1 = Complex.valueOf((-1029.375));
      complex0.I.subtract(complex1);
      complex0.toString();
      Complex complex2 = complex0.ZERO.asin();
      complex2.toString();
      Complex complex3 = new Complex((-929.84027673561));
      Complex complex4 = complex0.pow(complex3);
      complex4.pow(complex0);
      complex4.cosh();
      Complex complex5 = complex4.add(0.0);
      complex5.conjugate();
      Complex complex6 = complex4.pow((-929.84027673561));
      complex6.pow((-1.0725602261510391E-7));
      complex6.ZERO.conjugate();
      complex3.exp();
      int int0 = (-2382);
      try { 
        complex6.nthRoot((-2382));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,382
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-622.454567807), 20.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex2.createComplex((-622.454567807), (-622.454567807));
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex5.tan();
      complex2.multiply(complex6);
      Complex complex8 = Complex.INF;
      complex7.atan();
      complex4.sin();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex2.INF.multiply(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.subtract(2284.066818594274);
      complex4.I.asin();
      complex3.tanh();
      Complex complex5 = complex3.cosh();
      complex5.pow(2284.066818594274);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 3.091617462831603E221);
      Complex complex1 = Complex.valueOf(3.091617462831603E221);
      Complex complex2 = complex1.add(3.091617462831603E221);
      complex2.abs();
      Complex complex3 = Complex.valueOf(0.6348391771316528);
      complex3.getArgument();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = Complex.valueOf(2020.17628686177, 2.1716436960517516E-23);
      complex5.getField();
      complex1.getImaginary();
      complex4.divide(complex2);
      Complex complex6 = Complex.valueOf(0.0, 2.1716436960517516E-23);
      Complex complex7 = Complex.NaN;
      complex6.negate();
      complex1.divide(2.1716436960517516E-23);
      Complex complex8 = complex0.sqrt1z();
      complex1.divide(9.098790295810902E-8);
      Complex complex9 = Complex.ONE;
      complex9.reciprocal();
      complex8.add(complex9);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.subtract(0.5729197263717651);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.subtract(1418.712125288129);
      complex4.conjugate();
      complex4.getArgument();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.I;
      Complex complex7 = complex0.divide(complex2);
      complex7.atan();
      Complex complex8 = Complex.ONE;
      complex3.abs();
      complex5.divide((-1495.508951291768));
      complex4.isInfinite();
      complex2.getReal();
      Complex complex9 = complex6.sqrt();
      complex1.getField();
      complex9.reciprocal();
      Object object0 = new Object();
      complex9.equals(complex0);
      complex0.multiply(683);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-2096.229648028093);
      Complex complex1 = new Complex((-2096.229648028093));
      Complex complex2 = Complex.INF;
      complex2.sin();
      // Undeclared exception!
      complex0.nthRoot(978479931);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.INF;
      complex3.atan();
      Complex complex4 = Complex.ONE;
      complex0.abs();
      Complex complex5 = complex0.divide((-1521.1994));
      complex3.isInfinite();
      complex3.getReal();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex6.sqrt();
      complex2.getField();
      complex1.reciprocal();
      Object object0 = new Object();
      complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2359.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.valueOf(2359.0, 0.0);
      complex0.toString();
      Complex complex3 = complex0.asin();
      complex2.asin();
      complex3.add(complex3);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex5.log();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Object object0 = complex8.readResolve();
      complex5.equals(object0);
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex0.readResolve();
      complex4.isNaN();
      complex4.conjugate();
      complex0.exp();
      complex7.abs();
      Complex complex9 = new Complex(2.152197750914928, (-308.371));
      complex9.readResolve();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.equals("(2359.0, 0.0)");
      complex6.sinh();
      complex7.pow(1942.11236);
      complex1.sqrt();
      complex2.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.sin();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(0.0, 441.8443761695);
      complex1.toString();
      complex0.ZERO.subtract(complex2);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ONE.divide(0.0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.negate();
      complex2.ZERO.readResolve();
      complex6.negate();
      complex3.getReal();
      Complex complex8 = Complex.valueOf(1878.85349);
      complex2.log();
      complex7.tan();
      Complex complex9 = new Complex(0.0, 0.0);
      Complex complex10 = complex9.exp();
      complex8.hashCode();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.sin();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(0.0, 441.8443761695);
      complex1.toString();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ONE.divide(0.0);
      Complex complex6 = new Complex(0.0, 1.274413296252691E81);
      complex6.getField();
      Complex complex7 = Complex.ONE;
      complex7.getImaginary();
      Complex complex8 = complex3.divide(complex0);
      Complex complex9 = Complex.valueOf(0.0, 441.8443761695);
      complex3.exp();
      complex8.negate();
      Complex complex10 = complex9.divide(0.0);
      Complex complex11 = complex10.sqrt1z();
      complex6.divide((-845.5895498));
      Complex complex12 = complex10.multiply(118);
      complex12.abs();
      Complex complex13 = Complex.ONE;
      Complex complex14 = new Complex((-4507.4604472412275), 0.01934296265244484);
      complex5.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1343.15135784229), (-1343.15135784229));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.reciprocal();
      complex2.NaN.getArgument();
      Complex complex3 = complex0.cosh();
      complex0.NaN.getField();
      Complex complex4 = complex3.subtract(complex1);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.ONE.pow(2.5332752658571312E182);
      Complex complex1 = complex0.I.pow(20.0);
      Complex complex2 = complex0.multiply(1142);
      Complex complex3 = Complex.valueOf(20.0);
      complex3.divide(complex1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex3.tanh();
      complex6.sqrt();
      complex6.getField();
      complex6.getField();
      complex2.isNaN();
      complex4.reciprocal();
      complex5.sinh();
      complex5.abs();
      Complex complex7 = Complex.valueOf(5.0, 2.0);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(0.0, 441.8443761695);
      complex2.toString();
      Complex complex4 = complex0.ZERO.subtract(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.ONE.divide(0.0);
      Complex complex7 = complex2.ZERO.sin();
      complex7.I.subtract(complex0);
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.NaN.divide(complex4);
      Complex complex11 = complex10.INF.sin();
      complex11.log();
      complex0.equals(complex2);
      Complex complex12 = Complex.valueOf(0.0, 441.8443761695);
      complex12.ZERO.readResolve();
      complex6.isNaN();
      Complex complex13 = complex0.conjugate();
      complex13.ONE.exp();
      complex9.NaN.abs();
      Object object0 = complex9.readResolve();
      complex0.equals(object0);
      complex9.sinh();
      Complex complex14 = new Complex(0.0, (-27.2810567469));
      Complex complex15 = Complex.ZERO;
      complex15.ZERO.subtract(complex1);
      complex2.equals(complex15);
      complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1027.7));
      complex0.ZERO.getField();
      Complex complex1 = complex0.ONE.atan();
      complex1.ONE.cos();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.createComplex((-1027.7), 1.002147739690966E179);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex0.asin();
      complex6.ZERO.multiply(complex2);
      Complex complex7 = complex1.multiply(2146771242);
      Complex complex8 = complex0.negate();
      complex8.INF.divide((-1027.7));
      Complex complex9 = complex0.multiply(complex5);
      complex9.ONE.add((double) 2146771242);
      Complex complex10 = complex0.pow(complex8);
      complex10.hashCode();
      complex0.abs();
      Complex complex11 = complex2.add(1027.7);
      complex11.NaN.nthRoot(2146771242);
      complex0.sinh();
      complex8.add(complex7);
      complex7.toString();
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = Complex.valueOf(0.0, (-565.7829));
      Complex complex3 = complex0.conjugate();
      complex2.getArgument();
      Complex complex4 = Complex.INF;
      complex4.nthRoot(17);
      complex1.getArgument();
      Complex.valueOf((-2.3852348451914424E-4), Double.NaN);
      complex0.cos();
      Complex.valueOf((double) 17);
      complex2.getReal();
      Complex complex5 = complex3.createComplex((-787.23549816322), 2.2254737134350224E-8);
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.INF;
      complex2.getReal();
      complex6.sqrt();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(0.0, 441.8443761695);
      complex2.toString();
      Complex complex4 = complex0.ZERO.subtract(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ONE.divide(0.0);
      Complex complex6 = complex2.ZERO.sin();
      complex6.I.subtract(complex0);
      complex3.ZERO.multiply(complex1);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.NaN.divide(complex4);
      complex8.NaN.tan();
      Complex complex9 = complex8.INF.sin();
      complex9.log();
      complex0.equals(complex2);
      Complex complex10 = Complex.valueOf(0.0, 441.8443761695);
      complex10.ZERO.readResolve();
      complex1.isInfinite();
      Complex complex11 = complex0.conjugate();
      complex11.ONE.exp();
      complex7.NaN.abs();
      Object object0 = complex7.readResolve();
      Complex complex12 = ((Complex) object0).INF.asin();
      complex0.equals(object0);
      Complex complex13 = complex7.sinh();
      complex1.pow(1.0187277793884277);
      Complex complex14 = Complex.ONE;
      complex13.pow(complex11);
      complex10.add(complex12);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-565.7829));
      Complex complex2 = complex0.conjugate();
      complex1.getArgument();
      complex2.tanh();
      complex0.divide(complex1);
      complex1.atan();
      Complex complex3 = Complex.valueOf(778.3472);
      complex3.multiply((-1349));
      complex0.reciprocal();
      complex0.exp();
      Complex complex4 = Complex.ONE;
      complex4.tanh();
      complex4.asin();
      Complex complex5 = Complex.NaN;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.toString();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = Complex.valueOf(689.2, 689.2);
      complex4.readResolve();
      Complex complex5 = complex3.ZERO.add((-9.204784113858607E-279));
      Complex complex6 = complex0.sqrt();
      complex5.ONE.sinh();
      Complex complex7 = complex6.tan();
      complex7.I.getArgument();
      complex7.negate();
      Complex complex8 = complex5.tan();
      complex8.ZERO.divide(6.283185307179586);
      Complex complex9 = complex6.sqrt1z();
      complex8.atan();
      complex1.pow(complex8);
      complex9.multiply(1.5707963267948966);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(4.6424556110307644E-91, 4.6424556110307644E-91);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.sin();
      complex2.ONE.nthRoot(1);
      Complex complex3 = complex0.conjugate();
      complex0.getArgument();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.divide(complex2);
      complex5.atan();
      Complex complex7 = complex0.multiply((-2146401955));
      complex4.abs();
      Complex complex8 = complex7.divide(581.0);
      complex2.isInfinite();
      Complex complex9 = Complex.NaN;
      complex1.multiply(complex9);
      complex3.readResolve();
      complex4.hashCode();
      complex5.ONE.exp();
      complex3.divide(1781.61);
      complex6.tanh();
      Complex complex10 = Complex.NaN;
      complex10.getReal();
      Complex complex11 = Complex.INF;
      complex11.conjugate();
      Complex complex12 = Complex.I;
      complex12.isNaN();
      complex3.toString();
      complex1.abs();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2359.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.valueOf(2359.0, 0.0);
      complex0.toString();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex3.add(complex3);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.negate();
      Complex complex8 = complex1.negate();
      complex5.getReal();
      Complex.valueOf(1878.85349);
      Complex complex9 = complex4.log();
      complex9.tan();
      complex2.exp();
      complex7.hashCode();
      Complex complex10 = complex8.pow(811.7921903503349);
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2096.229648028093));
      Complex complex2 = new Complex(2.5332752658571312E182);
      complex2.divide(2527.8461104331);
      Complex complex3 = complex1.multiply(1257.1106630431);
      complex2.divide(complex3);
      complex3.reciprocal();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex2.tanh();
      complex1.asin();
      complex2.acos();
      Complex complex6 = new Complex((-698.565387716436), (-698.565387716436));
      Complex complex7 = complex0.divide(complex1);
      complex5.add(complex2);
      complex6.sqrt1z();
      complex1.conjugate();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex6.log();
      complex5.pow(0.0);
      complex8.isInfinite();
      complex4.pow(2527.8461104331);
      complex6.sqrt1z();
      complex1.divide(complex2);
      complex9.sinh();
      complex6.cos();
      Complex.valueOf(0.0);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2096.229648028093));
      Complex complex2 = new Complex((-2096.229648028093));
      complex2.divide(2527.8461104331);
      Complex complex3 = complex1.multiply(1257.1106630431);
      complex2.divide(complex3);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex2.tanh();
      complex1.asin();
      Complex complex7 = complex4.add((-698.565387716436));
      Complex complex8 = complex0.divide(complex1);
      complex6.add(complex2);
      complex7.sqrt1z();
      complex1.conjugate();
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex7.log();
      Complex complex11 = complex6.pow(0.0);
      complex9.isInfinite();
      complex5.pow(2527.8461104331);
      complex7.sqrt1z();
      complex1.divide(complex2);
      complex10.sinh();
      complex7.cos();
      Complex.valueOf(0.0);
      complex8.toString();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf((-1.0));
      complex1.divide(complex0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.createComplex((-1.0), 927.2357786312475);
      complex3.tan();
      Complex complex5 = new Complex(2389.93, Double.NaN);
      complex5.getReal();
      complex4.sqrt();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2096.229648028093));
      Complex complex2 = new Complex(2.5332752658571312E182);
      Complex complex3 = complex1.divide(2527.8461104331);
      Complex complex4 = complex1.multiply(1257.1106630431);
      complex2.divide(complex4);
      Complex complex5 = complex4.reciprocal();
      complex2.exp();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex5.add((-698.565387716436));
      complex0.divide(complex1);
      complex6.add(complex2);
      complex8.sqrt1z();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex6.sinh();
      complex8.log();
      Complex complex11 = complex3.conjugate();
      complex11.exp();
      Complex complex12 = Complex.valueOf((-1.0));
      complex12.abs();
      Complex complex13 = Complex.ONE;
      complex10.equals(complex13);
      Complex complex14 = complex3.sinh();
      complex14.ONE.divide(1257.1106630431);
      complex9.pow(1.5070531368255615);
      complex1.sqrt();
      Complex complex15 = Complex.I;
      complex15.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.subtract(2427.3660936);
      Complex complex3 = new Complex(2427.3660936);
      complex2.divide(2427.3660936);
      Complex complex4 = complex3.multiply(2.373243808746338);
      complex1.divide(complex4);
      complex0.reciprocal();
      Complex complex5 = Complex.ONE;
      complex5.exp();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex6.add((-2.922922859038));
      Complex complex9 = complex1.divide(complex4);
      complex8.add(complex9);
      complex7.sqrt1z();
      complex2.conjugate();
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex8.log();
      complex3.pow((-1651.108649));
      complex1.isInfinite();
      complex10.pow(1257.1106630431);
      complex8.sqrt1z();
      Complex complex12 = Complex.valueOf(193.05853358379585, 2.373243808746338);
      complex12.divide(complex5);
      complex11.sinh();
      complex3.cos();
      Complex.valueOf((-698.565387716436));
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.I.add(178.26014193462396);
      complex1.I.abs();
      complex3.I.getArgument();
      Complex complex4 = complex0.INF.multiply(complex2);
      complex3.ONE.getField();
      complex0.getImaginary();
      Complex complex5 = complex3.divide(complex0);
      Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex6 = complex3.exp();
      complex6.INF.negate();
      Complex complex7 = complex3.divide(178.26014193462396);
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex3.divide(Double.NaN);
      complex9.multiply((-9));
      complex2.I.abs();
      complex7.ONE.asin();
      Complex complex10 = complex3.add(complex5);
      Complex complex11 = complex5.negate();
      complex10.NaN.negate();
      complex7.getReal();
      Complex.valueOf(1.5707963267948966);
      complex10.log();
      complex2.tan();
      complex4.exp();
      complex11.hashCode();
      complex8.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex2.conjugate();
      complex6.getArgument();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex4.divide(complex3);
      complex4.atan();
      complex8.multiply(1614);
      Complex complex10 = Complex.ONE;
      complex10.abs();
      Complex complex11 = complex8.divide((-961.2));
      complex10.isInfinite();
      Complex complex12 = Complex.valueOf(1.0, 3782.0);
      Complex complex13 = complex11.multiply(complex12);
      complex5.readResolve();
      Complex complex14 = new Complex(3198.95849142, (-1625.3735198307));
      complex14.hashCode();
      complex8.divide((-4394177.737271982));
      complex13.tanh();
      complex13.getReal();
      complex9.conjugate();
      complex2.isNaN();
      complex1.toString();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.subtract(0.0);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.conjugate();
      complex0.getArgument();
      complex1.tanh();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex5.multiply((-1));
      complex0.abs();
      Complex complex9 = complex0.divide((double) 123);
      complex3.isInfinite();
      complex2.multiply(complex5);
      complex2.readResolve();
      Complex complex10 = Complex.ZERO;
      complex10.hashCode();
      complex9.divide((-1951.841843991));
      complex8.tanh();
      complex7.getReal();
      complex9.conjugate();
      complex8.isNaN();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 2579.51341103866;
      Complex complex0 = Complex.valueOf(2579.51341103866, 2579.51341103866);
      Complex complex1 = complex0.INF.add(2579.51341103866);
      complex1.hashCode();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex2.INF.cos();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.ONE.atan();
      Complex complex4 = complex0.INF.asin();
      complex4.createComplex((-7.919617109348822E-8), 2579.51341103866);
      complex2.ONE.divide(complex1);
      Complex complex5 = complex0.sin();
      try { 
        complex5.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(144.39611857743);
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2096.229648028093));
      Complex complex2 = new Complex(2.5332752658571312E182);
      complex2.divide(2527.8461104331);
      Complex complex3 = complex1.multiply(1257.1106630431);
      complex2.divide(complex3);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex2.tanh();
      complex1.asin();
      Complex complex7 = complex4.add((-698.565387716436));
      Complex complex8 = complex0.divide(complex1);
      complex6.add(complex2);
      complex7.sqrt1z();
      complex1.conjugate();
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex7.log();
      complex6.pow(0.0);
      complex9.isInfinite();
      complex5.pow(2527.8461104331);
      complex7.sqrt1z();
      complex1.divide(complex2);
      complex10.sinh();
      complex7.cos();
      Complex.valueOf(0.0);
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.divide(690.05618736);
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.divide(1.244950238958056E-7);
      Complex complex9 = complex7.add((-3.314051560952014E-254));
      Complex complex10 = complex5.divide(complex9);
      complex5.add(complex10);
      Complex complex11 = complex7.sqrt1z();
      Complex complex12 = complex9.conjugate();
      complex8.sinh();
      complex4.log();
      Complex complex13 = new Complex((-3.314051560952014E-254), (-1482.7591437339));
      complex13.pow((-698.565387716436));
      Complex complex14 = Complex.NaN;
      complex14.isInfinite();
      complex12.pow(0.37429352684715783);
      Complex complex15 = complex3.sqrt1z();
      complex15.divide(complex12);
      complex14.sinh();
      complex2.cos();
      Complex.valueOf(1.0);
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(0.0, 441.8443761695);
      complex2.toString();
      Complex complex4 = complex0.ZERO.subtract(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ONE.divide(0.0);
      Complex complex6 = complex2.ZERO.sin();
      Complex complex7 = complex6.I.subtract(complex0);
      Complex complex8 = complex3.ZERO.multiply(complex1);
      Complex complex9 = complex2.NaN.divide(0.0);
      Complex complex10 = complex9.NaN.divide(complex4);
      complex10.NaN.tan();
      Complex complex11 = complex10.INF.sin();
      complex11.log();
      complex0.equals(complex2);
      Complex complex12 = complex1.conjugate();
      complex3.sqrt();
      Complex complex13 = new Complex(0.0, 0.2742313881366776);
      complex13.getField();
      Complex complex14 = Complex.NaN;
      complex14.getField();
      Complex complex15 = Complex.valueOf(6.283185307179586);
      complex15.isNaN();
      complex11.reciprocal();
      complex8.sinh();
      complex11.abs();
      complex12.sqrt();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.35471993684768677);
      Complex complex1 = complex0.exp();
      complex0.toString();
      complex0.nthRoot(1048);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.NaN.multiply(0.35471993684768677);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex1.acos();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.INF.cosh();
      Complex complex11 = complex7.I.sqrt();
      Complex complex12 = complex10.ONE.divide(complex8);
      Complex complex13 = complex12.ZERO.add(complex5);
      complex13.ONE.acos();
      complex0.multiply(1);
      complex0.abs();
      Complex complex14 = complex11.asin();
      complex14.add(complex11);
      complex8.negate();
      complex2.negate();
      complex9.getReal();
      Complex.valueOf((-1428.544879422));
      complex12.log();
      Complex complex15 = Complex.I;
      complex15.tan();
      complex3.exp();
      complex12.hashCode();
      complex6.pow(0.35471993684768677);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.multiply(89);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.pow(complex2);
      complex4.sqrt1z();
      Complex complex6 = complex5.sinh();
      complex6.add((-1245.481));
      complex6.sqrt1z();
      complex3.sin();
      complex1.exp();
      Complex.valueOf((-1245.481), 0.0);
      Complex complex7 = Complex.NaN;
      complex7.negate();
      Complex complex8 = Complex.ONE;
      complex8.atan();
      complex7.getImaginary();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 3470.5104742621625);
      Complex.valueOf(3470.5104742621625, (-565.7829));
      Complex complex2 = complex1.atan();
      Complex.valueOf((-565.7829));
      Complex complex3 = new Complex(402.4, 0.4094878842592953);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = Complex.valueOf((-565.7829), (-1.0));
      complex5.tanh();
      complex0.createComplex((-565.7829), 0.0);
      complex0.tanh();
      complex2.tan();
      complex3.getReal();
      complex4.sqrt();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.pow((-2232.0));
      complex0.ONE.sinh();
      Complex complex1 = Complex.valueOf((-1182.8149749242418));
      Complex complex2 = complex1.I.add(178.26014193462396);
      complex1.atan();
      Complex complex3 = Complex.valueOf((-1182.8149749242418));
      Complex complex4 = complex2.divide(complex0);
      complex4.tanh();
      complex3.createComplex(390452.90550266806, 390452.90550266806);
      Complex complex5 = complex3.tan();
      Complex complex6 = Complex.INF;
      complex6.getReal();
      complex1.sqrt();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.abs();
      complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.ZERO;
      complex3.getImaginary();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = Complex.valueOf(Double.NaN, 8.885765876316732);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex6.divide(0.10993985831737518);
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.multiply((-407317036));
      complex7.abs();
      Complex complex13 = Complex.I;
      complex13.asin();
      complex9.add(complex7);
      Complex complex14 = complex4.negate();
      complex12.negate();
      complex14.getReal();
      Complex.valueOf((-1166593.4081));
      complex8.log();
      Complex complex15 = complex4.tan();
      complex15.exp();
      complex8.hashCode();
      Complex complex16 = Complex.ZERO;
      complex16.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(0.0, 441.8443761695);
      complex2.toString();
      Complex complex4 = complex0.ZERO.subtract(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.ONE.divide(0.0);
      Complex complex7 = complex2.ZERO.sin();
      complex7.I.subtract(complex0);
      complex3.ZERO.multiply(complex1);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.NaN.divide(complex4);
      complex9.NaN.tan();
      Complex complex10 = complex9.INF.sin();
      complex10.log();
      complex0.equals(complex2);
      Complex complex11 = Complex.valueOf(0.0, 441.8443761695);
      complex11.ZERO.readResolve();
      complex6.isNaN();
      Complex complex12 = complex0.conjugate();
      complex12.ONE.exp();
      complex8.NaN.abs();
      Object object0 = complex8.readResolve();
      complex0.equals(object0);
      Complex complex13 = complex8.sinh();
      complex1.pow(1.0187277793884277);
      complex13.sqrt();
      complex13.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.I.add(178.26014193462396);
      complex1.I.abs();
      complex3.I.getArgument();
      Complex complex4 = complex0.INF.multiply(complex2);
      complex3.ONE.getField();
      complex0.getImaginary();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex7 = complex3.exp();
      complex7.INF.negate();
      Complex complex8 = complex3.divide(178.26014193462396);
      complex8.NaN.sqrt1z();
      Complex complex9 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.multiply(17);
      complex2.I.abs();
      Complex complex11 = complex8.ONE.asin();
      Complex complex12 = complex3.add(complex5);
      Complex complex13 = complex6.tan();
      complex8.add(complex12);
      Complex complex14 = complex1.sinh();
      complex4.isInfinite();
      Complex complex15 = Complex.ONE;
      complex15.multiply(complex10);
      complex15.asin();
      complex13.multiply(complex14);
      Complex complex16 = new Complex(Double.NaN, 17);
      Complex complex17 = complex16.tan();
      complex17.INF.subtract(Double.NaN);
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.ZERO.atan();
      complex0.cosh();
      Complex.valueOf(6.283185307179586);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.add((-1.0));
      Complex complex4 = complex1.createComplex(Double.NaN, (-1.0));
      complex3.conjugate();
      complex4.readResolve();
      complex4.exp();
      complex2.pow(Double.NaN);
      complex2.sinh();
      complex1.pow(866.262844737387);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.valueOf(0.0, (-4.342161053332263E165));
      complex0.isNaN();
      complex2.getArgument();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.I.reciprocal();
      complex2.hashCode();
      complex1.ONE.pow(complex0);
      complex2.getField();
      complex1.getReal();
      complex1.getReal();
      Complex complex5 = complex3.atan();
      complex4.ONE.multiply(complex1);
      complex5.ZERO.pow(complex3);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex5.sqrt1z();
      complex7.ONE.sqrt1z();
      complex1.INF.sin();
      complex1.isInfinite();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex3.pow(complex8);
      Complex complex10 = Complex.valueOf((-1.5707963267948966));
      Complex complex11 = complex4.subtract(complex6);
      Complex complex12 = complex11.add(complex10);
      complex9.ZERO.sin();
      complex9.ONE.getArgument();
      complex8.multiply(0);
      complex2.tanh();
      complex9.subtract(complex1);
      complex9.isNaN();
      complex12.pow(Double.NaN);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1859.0), 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      complex2.ONE.abs();
      complex0.toString();
      Complex complex3 = complex0.pow((-1859.0));
      complex1.cosh();
      Complex complex4 = complex0.negate();
      complex4.I.negate();
      complex0.pow(5.324902289537048E274);
      Complex complex5 = complex3.log();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex2.add(complex1);
      complex7.multiply(complex0);
      complex4.getImaginary();
      complex0.NaN.createComplex(0.0, 1297.0);
      complex5.cos();
      complex6.hashCode();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(0.0, 441.8443761695);
      complex2.toString();
      Complex complex4 = complex0.ZERO.subtract(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ONE.divide(0.0);
      Complex complex6 = complex2.ZERO.sin();
      complex6.I.subtract(complex0);
      complex3.ZERO.multiply(complex1);
      Complex complex7 = complex2.NaN.divide(0.0);
      Complex complex8 = complex7.NaN.divide(complex4);
      complex8.NaN.tan();
      Complex complex9 = complex8.INF.sin();
      complex9.log();
      complex0.equals(complex2);
      Complex complex10 = complex1.conjugate();
      complex10.ZERO.readResolve();
      complex1.isNaN();
      Complex complex11 = complex0.conjugate();
      complex11.ONE.exp();
      complex7.NaN.abs();
      Object object0 = complex7.readResolve();
      complex0.equals(object0);
      Complex complex12 = complex7.sinh();
      complex1.pow(1.0187277793884277);
      complex12.sqrt();
      complex12.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.createComplex(0.32553088665008545, (-932.368));
      complex1.ONE.subtract((-932.368));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.divide(complex0);
      complex3.ONE.getField();
      complex1.NaN.atan();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.createComplex(2.0, 2.0);
      complex0.hashCode();
      Complex complex6 = complex5.add(2.0);
      complex6.ONE.sqrt();
      complex6.toString();
      Complex complex7 = complex5.multiply(2.0);
      complex7.negate();
      complex1.getReal();
      Complex complex8 = complex4.log();
      Complex complex9 = complex4.asin();
      complex9.ZERO.readResolve();
      Complex complex10 = complex8.divide(complex2);
      Complex complex11 = complex4.log();
      complex11.ZERO.multiply(complex6);
      Complex complex12 = complex0.reciprocal();
      complex10.toString();
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.multiply(0);
      complex1.cosh();
      complex0.INF.add((double) 0);
      complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex0.ZERO.conjugate();
      complex1.readResolve();
      Complex complex2 = complex0.exp();
      complex2.pow(Double.POSITIVE_INFINITY);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.I.add(178.26014193462396);
      complex1.I.abs();
      complex3.I.getArgument();
      Complex complex4 = complex0.INF.multiply(complex2);
      complex3.ONE.getField();
      complex0.getImaginary();
      Complex complex5 = complex3.divide(complex0);
      Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex6 = complex3.exp();
      complex6.INF.negate();
      Complex complex7 = complex3.divide(178.26014193462396);
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex3.divide(Double.POSITIVE_INFINITY);
      complex9.multiply(17);
      complex2.I.abs();
      complex7.ONE.asin();
      Complex complex10 = complex3.add(complex5);
      Complex complex11 = complex5.negate();
      complex10.NaN.negate();
      complex7.getReal();
      Complex.valueOf(1.5707963267948966);
      complex10.log();
      complex2.tan();
      complex4.exp();
      complex11.hashCode();
      complex8.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.ZERO.atan();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.tanh();
      Complex complex3 = complex2.createComplex(Double.NaN, Double.NaN);
      complex0.tan();
      complex1.getReal();
      complex3.sqrt();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.subtract(2427.3660936);
      Complex complex3 = complex2.NaN.subtract(548.28);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.conjugate();
      complex5.NaN.getArgument();
      complex3.ONE.tanh();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex3.ONE.atan();
      complex6.multiply(123);
      complex5.abs();
      Complex complex8 = complex5.divide(2427.3660936);
      complex3.isInfinite();
      Complex complex9 = complex4.multiply(complex2);
      complex9.readResolve();
      complex5.INF.hashCode();
      Complex complex10 = complex0.divide(1091.801024499);
      complex4.tanh();
      complex8.getReal();
      complex7.conjugate();
      complex1.isNaN();
      complex10.toString();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.negate();
      complex1.ONE.readResolve();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.INF.cosh();
      complex0.isNaN();
      Complex complex5 = Complex.I;
      complex3.I.add((-85.07693049385));
      complex3.I.nthRoot(1386);
      Complex complex6 = complex2.NaN.tan();
      Complex complex7 = complex6.tan();
      complex7.I.getField();
      Complex complex8 = complex0.pow(complex5);
      complex8.ONE.multiply(complex0);
      Complex complex9 = complex2.log();
      Complex complex10 = complex9.NaN.sinh();
      complex9.I.readResolve();
      Complex complex11 = complex0.atan();
      complex9.INF.sqrt();
      complex11.isInfinite();
      complex11.ZERO.add(complex10);
      complex4.getArgument();
      complex5.hashCode();
      complex11.readResolve();
      Complex complex12 = Complex.I;
      Complex complex13 = complex8.add(complex12);
      complex13.getArgument();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1080.09);
      Complex complex1 = complex0.divide(1.0);
      Complex complex2 = complex0.multiply(1080.09);
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex3.INF.reciprocal();
      complex2.exp();
      complex0.ONE.tanh();
      complex0.asin();
      Complex complex5 = complex1.divide(1.0);
      double double0 = (-698.565387716436);
      Complex complex6 = complex5.I.add((-698.565387716436));
      Complex complex7 = complex6.divide(complex0);
      complex7.ONE.add(complex5);
      Complex complex8 = complex6.I.sqrt1z();
      Complex complex9 = complex8.ZERO.conjugate();
      complex9.I.sinh();
      complex1.log();
      complex0.pow(0.0);
      complex4.isInfinite();
      complex8.pow(63.939563943);
      complex1.sqrt1z();
      try { 
        complex8.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.ONE.multiply(complex0);
      complex4.INF.pow(complex0);
      Complex complex5 = complex2.I.multiply(complex0);
      complex5.INF.cos();
      complex5.ONE.createComplex((-2588.0), (-2588.0));
      Complex complex6 = complex1.NaN.cosh();
      Complex complex7 = complex6.ONE.add(complex3);
      complex3.I.negate();
      Complex complex8 = complex2.negate();
      complex7.ONE.conjugate();
      complex2.multiply(7.4364594917181125E270);
      complex2.getField();
      Complex.valueOf(2.0, 2.0);
      try { 
        complex8.ONE.nthRoot((-396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -396
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.NaN;
      complex1.ZERO.nthRoot(1);
      Complex complex3 = complex1.ONE.divide(complex2);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.I.sqrt1z();
      complex5.abs();
      Complex complex6 = complex3.acos();
      Complex.valueOf(0.0);
      complex6.tan();
      complex6.add(complex3);
      complex1.multiply(complex4);
      Complex complex7 = complex4.add(complex0);
      complex2.cosh();
      complex4.hashCode();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.abs();
      complex3.tanh();
      complex8.getReal();
      complex7.pow((-784.218));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(2642.56);
      Complex complex1 = complex0.I.pow(2642.56);
      Complex complex2 = Complex.valueOf(2642.56);
      Complex complex3 = complex0.I.atan();
      complex3.NaN.hashCode();
      complex0.NaN.sin();
      complex3.ZERO.sin();
      complex0.I.readResolve();
      complex0.getImaginary();
      Complex complex4 = complex2.INF.cos();
      complex4.subtract(2766.4068658420215);
      complex2.I.sqrt1z();
      complex0.isInfinite();
      complex2.readResolve();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.ZERO.add(0.0);
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex0.subtract(2642.56);
      Complex complex9 = complex3.sqrt();
      complex9.I.sqrt1z();
      complex8.sqrt();
      complex1.INF.sinh();
      complex8.getImaginary();
      Complex complex10 = complex1.reciprocal();
      complex7.abs();
      complex6.sin();
      complex10.pow(1211.955579505604);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2655.382255114), 0.0);
      Complex complex2 = complex0.pow(complex1);
      complex1.getField();
      Complex complex3 = complex1.multiply((-4381));
      Complex complex4 = complex2.NaN.divide((-2655.382255114));
      complex3.asin();
      Complex complex5 = complex2.multiply(2190);
      Complex complex6 = complex3.NaN.log();
      Complex complex7 = complex2.subtract(complex3);
      Complex complex8 = complex1.ZERO.atan();
      complex8.INF.atan();
      Complex complex9 = complex3.tanh();
      complex2.ZERO.pow(complex7);
      Complex complex10 = complex5.conjugate();
      complex5.add(0.0);
      Complex complex11 = complex0.pow((double) 2190);
      Complex complex12 = complex3.cos();
      Complex complex13 = complex9.tan();
      complex13.ZERO.negate();
      complex13.NaN.conjugate();
      complex11.atan();
      complex6.pow(complex12);
      Complex complex14 = complex2.atan();
      complex14.NaN.pow(complex8);
      complex14.I.add(0.0);
      complex11.getField();
      complex10.negate();
      complex11.pow(complex4);
      complex7.readResolve();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.equals(complex1);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.sin();
      complex3.I.readResolve();
      Complex complex5 = complex3.cos();
      complex3.tan();
      complex3.add(1.0);
      complex5.sqrt();
      complex0.sqrt1z();
      complex4.log();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(20.0, (-2284.02526));
      Complex complex2 = complex0.subtract(complex1);
      complex1.nthRoot(1352);
      complex2.subtract(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.I.exp();
      complex3.tan();
      Complex complex5 = complex4.I.sqrt1z();
      complex5.ZERO.divide(complex4);
      complex4.I.subtract(1905.1706829519);
      complex3.conjugate();
      Complex complex6 = complex0.atan();
      complex6.I.pow(20.0);
      complex4.log();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = Complex.valueOf(599.7764861, 1978.9452340510916);
      complex10.I.multiply(2057.721990578368);
      complex8.conjugate();
      complex10.sqrt1z();
      complex9.getReal();
      complex7.multiply((-937));
      Complex complex11 = complex4.conjugate();
      complex11.I.sinh();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.sqrt();
      Complex complex1 = complex0.ZERO.multiply((-1));
      Complex complex2 = complex1.I.add((double) (-1));
      complex1.I.multiply(complex0);
      Complex complex3 = complex0.I.pow(complex1);
      complex3.ZERO.abs();
      complex3.ZERO.acos();
      Complex complex4 = complex0.subtract(501.4);
      complex4.ONE.hashCode();
      complex0.toString();
      complex2.add(6.283185307179586);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.tanh();
      complex2.NaN.readResolve();
      complex2.multiply((double) 1035);
      complex1.INF.nthRoot(1035);
      Complex complex3 = complex0.INF.pow(0.0);
      Complex complex4 = complex1.createComplex(2.4175248449172035E-87, 2.4175248449172035E-87);
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex5.ZERO.divide(complex0);
      Complex complex7 = complex5.NaN.cosh();
      complex7.ONE.pow(complex1);
      complex0.getImaginary();
      Complex complex8 = complex3.multiply((double) 1035);
      Complex complex9 = Complex.valueOf(2.4175248449172035E-87, 0.0);
      Complex complex10 = complex5.add(complex9);
      complex7.toString();
      Complex complex11 = complex6.createComplex(0.0, (-2737.4675973));
      complex11.ONE.cos();
      Complex complex12 = complex8.reciprocal();
      complex12.NaN.hashCode();
      complex10.isNaN();
      complex5.getField();
      complex10.divide(complex3);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.atan();
      complex0.multiply(0.0);
      complex2.NaN.cosh();
      Complex complex3 = complex2.NaN.asin();
      complex3.NaN.multiply(0.0);
      complex1.ZERO.hashCode();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex2.cosh();
      complex5.add(0.0);
      complex4.subtract(complex3);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex0.hashCode();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.ZERO.subtract(complex3);
      complex0.I.pow(complex1);
      Complex complex5 = complex2.NaN.multiply(complex0);
      Complex complex6 = Complex.valueOf(3200.908, 2.0);
      Complex complex7 = complex5.ONE.asin();
      Complex complex8 = complex7.NaN.sin();
      complex8.atan();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex9.ZERO.exp();
      complex10.INF.cos();
      complex1.ONE.subtract(3200.908);
      Complex complex11 = complex1.negate();
      complex11.ONE.multiply(927);
      complex5.nthRoot(7);
      complex4.ZERO.createComplex(3200.908, (-1206.673404846866));
      Complex complex12 = complex1.ZERO.subtract(0.0);
      complex12.I.hashCode();
      complex0.readResolve();
      complex1.getImaginary();
      Complex complex13 = complex4.sqrt();
      complex1.reciprocal();
      complex1.sin();
      complex3.cos();
      complex13.abs();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      double double0 = 1.3405964389498495E-8;
      Complex complex1 = Complex.valueOf(1.3405964389498495E-8, 1.3405964389498495E-8);
      try { 
        complex1.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = new Complex(1.0);
      complex0.NaN.add(complex1);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.add(0.0);
      complex2.INF.sinh();
      complex0.ONE.sqrt1z();
      Complex complex3 = Complex.valueOf(382.4, 1729.267695395566);
      complex0.isNaN();
      complex1.readResolve();
      Complex complex4 = complex3.cosh();
      Complex.valueOf(0.0, 1.800187110900879);
      complex4.ZERO.readResolve();
      complex3.tanh();
      Complex complex5 = complex1.pow((-1.0));
      Complex complex6 = complex5.ONE.log();
      try { 
        complex6.nthRoot((-774));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -774
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-596.84685));
      Object object0 = new Object();
      Complex complex1 = Complex.valueOf(47.242162036, 0.0);
      complex0.equals(object0);
      Complex complex2 = complex0.cos();
      complex2.ZERO.abs();
      complex1.readResolve();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex4.multiply(complex0);
      complex0.sqrt();
      complex1.tan();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.ONE.createComplex(283.11, (-316.521869316));
      complex2.multiply(complex7);
      Complex complex9 = new Complex(0.0);
      complex9.INF.conjugate();
      complex2.equals(complex9);
      complex5.getImaginary();
      complex8.INF.multiply(283.11);
      complex4.tanh();
      complex8.getImaginary();
      complex6.createComplex(4388.141, 0.0);
      Complex complex10 = complex5.atan();
      complex10.ONE.readResolve();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.I.getField();
      Complex complex2 = complex1.pow(13.89322742);
      Complex complex3 = complex2.ONE.conjugate();
      complex2.ZERO.subtract(complex0);
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex2.INF.multiply(13.89322742);
      complex4.abs();
      Complex complex6 = complex4.ZERO.conjugate();
      Complex complex7 = complex1.ZERO.multiply(13.89322742);
      complex7.NaN.hashCode();
      Complex complex8 = complex1.conjugate();
      complex8.ONE.hashCode();
      Complex complex9 = complex8.ZERO.add(complex3);
      complex9.ONE.multiply((-1412.904));
      complex0.abs();
      Complex complex10 = complex1.negate();
      complex10.INF.divide(complex6);
      complex10.I.abs();
      complex4.toString();
      Complex complex11 = complex4.pow(0.0);
      Complex complex12 = complex11.subtract(0.0);
      complex4.abs();
      Complex.valueOf(1.2949980563724296E-100);
      Complex complex13 = complex1.sinh();
      complex13.ONE.toString();
      Complex.valueOf(0.0);
      complex6.subtract(0.0);
      Object object0 = new Object();
      complex8.equals(object0);
      complex5.subtract(complex1);
      complex6.abs();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-674.64370671));
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.exp();
      Complex complex2 = Complex.valueOf((-674.64370671));
      Complex complex3 = complex2.I.sqrt1z();
      complex2.I.abs();
      complex1.I.abs();
      complex1.nthRoot(1);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.INF.exp();
      Complex.valueOf(0.0);
      complex5.atan();
      Complex.valueOf(0.0, 1.5070531368255615);
      Complex complex6 = Complex.valueOf((double) 1, 0.0);
      complex6.ONE.multiply(complex2);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.I.add(complex1);
      complex7.INF.multiply((-191));
      complex8.I.cosh();
      Complex complex9 = complex8.INF.tanh();
      complex4.cosh();
      complex6.acos();
      complex3.multiply(complex4);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1117.5);
      complex1.ONE.reciprocal();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.I.subtract(complex1);
      complex0.toString();
      complex1.ONE.cos();
      Complex complex4 = complex0.atan();
      complex1.ZERO.negate();
      complex4.abs();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex4.add(175.8354);
      complex4.ZERO.getArgument();
      Object object0 = complex6.readResolve();
      complex3.equals(object0);
      Complex complex7 = complex1.INF.negate();
      Complex complex8 = complex5.negate();
      Complex complex9 = Complex.valueOf(1117.5);
      complex9.ZERO.multiply(175.8354);
      complex2.toString();
      complex8.tanh();
      complex7.getReal();
      Complex complex10 = complex2.asin();
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt();
      double double0 = (-1701.62812);
      Complex complex1 = Complex.valueOf((-1701.62812));
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.35471993684768677);
      Complex complex1 = complex0.exp();
      complex0.toString();
      complex0.nthRoot(1048);
      Complex complex2 = complex1.sin();
      complex2.sinh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.NaN.multiply(0.35471993684768677);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex1.acos();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.INF.cosh();
      complex6.I.sqrt();
      Complex complex10 = complex9.ONE.divide(complex7);
      Complex complex11 = complex10.ZERO.add(complex4);
      complex11.ONE.acos();
      complex7.ZERO.sin();
      complex7.I.divide(complex8);
      complex6.getField();
      Complex complex12 = complex6.atan();
      complex9.acos();
      complex12.abs();
      complex8.tan();
      Complex complex13 = complex7.add(complex8);
      Complex complex14 = complex6.sinh();
      complex13.isInfinite();
      complex0.multiply(complex14);
      complex4.asin();
      complex5.multiply(complex6);
      Complex complex15 = complex3.tan();
      complex15.exp();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.pow(1312.665700818);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex0.subtract(1312.665700818);
      Complex complex6 = complex5.NaN.add(complex0);
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex7.pow(1312.665700818);
      complex6.ONE.sqrt();
      assertTrue(complex6.equals((Object)complex8));
      
      Complex complex9 = complex5.ZERO.sqrt();
      complex0.hashCode();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex2.acos();
      Complex complex12 = complex11.INF.log();
      assertTrue(complex12.isInfinite());
      assertTrue(complex12.equals((Object)complex7));
      
      Complex complex13 = complex5.sqrt1z();
      complex13.equals(complex5);
      complex4.getField();
      complex3.hashCode();
      Complex complex14 = complex4.subtract(complex1);
      double double0 = complex13.getImaginary();
      assertEquals(1312.6653199136522, double0, 0.01);
      
      complex9.I.sqrt1z();
      List<Complex> list0 = complex9.nthRoot(1046);
      assertTrue(list0.contains(complex0));
      assertEquals(1046, list0.size());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex2.getArgument();
      Complex complex15 = complex14.multiply(1046);
      assertNotSame(complex15, complex8);
      assertFalse(complex15.equals((Object)complex10));
      assertEquals(0.8813735870195428, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex15.equals((Object)complex13));
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(4.6424556110307644E-91, 4.6424556110307644E-91);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.sin();
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      assertEquals(1, list0.size());
      
      complex2.ZERO.getArgument();
      Complex complex3 = Complex.valueOf(4.6424556110307644E-91, 2.0);
      Complex complex4 = complex3.I.cos();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex4.getReal(), 0.01);
      
      Complex complex5 = Complex.valueOf((-20.0));
      complex0.getReal();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex5.INF.tanh();
      assertSame(complex7, complex2);
      
      Complex complex8 = complex6.sqrt();
      complex5.getField();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex8.getField();
      complex0.isNaN();
      Complex complex9 = complex0.reciprocal();
      assertEquals(1.0770162213548553E90, complex9.getReal(), 0.01);
      
      Complex complex10 = complex8.sinh();
      assertEquals(2.7918342367632993E-23, complex10.getReal(), 0.01);
      
      complex0.abs();
      Complex complex11 = complex3.sqrt();
      assertEquals(1.0, complex11.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.sin();
      assertTrue(complex0.equals((Object)object0));
      assertSame(complex2, complex0);
      
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex1.NaN.createComplex(1140.47, 0.0);
      complex0.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.pow(Double.NaN);
      complex0.equals(complex1);
      Complex complex4 = (Complex)complex2.readResolve();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.acos();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.asin();
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = complex1.asin();
      assertEquals((-1.0120948455406893), complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex2.multiply(complex8);
      assertTrue(complex2.equals((Object)complex4));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertSame(complex9, complex3);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = 0;
      double double0 = (-2428.35);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.createComplex((-2428.35), 2.0);
      Complex complex2 = complex1.ONE.log();
      complex2.INF.tanh();
      complex1.ZERO.conjugate();
      try { 
        complex0.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
