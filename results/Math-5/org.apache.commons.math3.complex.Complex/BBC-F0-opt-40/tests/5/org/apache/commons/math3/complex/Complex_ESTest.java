/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:49:35 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(63.7045, (-20.0));
      Complex complex2 = complex1.multiply(1);
      Complex complex3 = complex0.asin();
      complex3.multiply(complex2);
      complex2.tan();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.INF.tanh();
      complex2.multiply(1353);
      complex0.abs();
      Complex complex3 = Complex.valueOf(1.4198992252349854, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.asin();
      complex5.tan();
      complex1.readResolve();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.cos();
      complex8.multiply(complex6);
      complex7.tanh();
      complex9.hashCode();
      complex3.multiply(2.1190686225891113);
      complex6.hashCode();
      complex8.multiply(complex7);
      complex1.asin();
      complex4.readResolve();
      complex6.subtract((-6.3890560989306495));
      Complex complex10 = Complex.ZERO;
      complex10.asin();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4717.546428781294, (-116.87540765817894));
      complex1.multiply(4363);
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.I;
      complex3.asin();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.acos();
      complex4.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2006.040264960658), 1.1507496472539512E-93);
      Complex complex2 = complex1.multiply(4363);
      complex2.abs();
      Complex complex3 = Complex.valueOf(8489882.830048999, 20.0);
      Complex complex4 = complex2.asin();
      complex4.hashCode();
      Complex complex5 = complex3.tan();
      complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(1.0795973350137036, Double.POSITIVE_INFINITY);
      complex4.ZERO.add(complex0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.divide(complex5);
      complex6.multiply(complex1);
      Complex complex7 = complex2.tanh();
      complex7.ZERO.log();
      Complex complex8 = new Complex(1.0, (-1.0));
      complex3.divide(complex8);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-1580.3797154411288), Double.POSITIVE_INFINITY);
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-1393.329565295));
      complex1.multiply(2146991557);
      complex0.divide(complex1);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1945.881923));
      Complex complex1 = complex0.multiply(4333);
      complex0.abs();
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.INF.divide(complex3);
      complex0.multiply(4333);
      complex1.multiply(77.289);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1580.3797154411288), (-1580.3797154411288));
      complex1.divide(complex0);
      complex0.multiply(complex1);
      complex1.pow(1897.48040839732);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex3.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex3.NaN.pow(Double.POSITIVE_INFINITY);
      complex3.add(complex2);
      complex0.divide(complex3);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(832.781175389);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getArgument();
      Complex complex1 = complex0.atan();
      complex1.ONE.negate();
      complex0.isInfinite();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.asin();
      complex2.exp();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1580.3797154411288), (-1580.3797154411288));
      Complex complex2 = complex1.multiply(complex0);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(357);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.I;
      complex3.abs();
      Complex complex4 = Complex.valueOf((-5423.25267762645), Double.NaN);
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.exp();
      Complex complex8 = complex5.asin();
      complex5.tan();
      Complex complex9 = complex8.divide(complex4);
      Complex complex10 = Complex.valueOf(1.5830993332061267E-10);
      Complex complex11 = complex9.multiply(complex1);
      complex8.tanh();
      complex9.hashCode();
      complex10.multiply(1.5830993332061267E-10);
      Complex complex12 = new Complex(1.0, Double.NaN);
      complex12.hashCode();
      Complex complex13 = Complex.ONE;
      complex0.getField();
      complex6.sqrt();
      complex5.tanh();
      complex7.divide((-885.41191841));
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1722.3512421759044), (-1722.3512421759044));
      Complex complex1 = complex0.multiply(4333);
      Complex complex2 = Complex.ZERO;
      complex2.abs();
      Complex complex3 = Complex.valueOf((-1722.3512421759044), (double) 4333);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.exp();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex0.divide(complex7);
      Complex.valueOf((-1722.3512421759044));
      Complex complex9 = complex5.multiply(complex2);
      complex0.tanh();
      complex9.hashCode();
      Complex complex10 = new Complex(344.437316346, 1945.881923);
      complex7.sinh();
      Complex complex11 = Complex.ZERO;
      complex8.multiply(102);
      complex3.toString();
      complex6.add(Double.NaN);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1722.3512421759044), (-1722.3512421759044));
      Complex complex1 = new Complex((-1722.3512421759044), (-1722.3512421759044));
      complex0.abs();
      Complex complex2 = Complex.valueOf(659.832, (-586.3921799678462));
      Complex complex3 = Complex.ONE;
      complex0.exp();
      complex2.asin();
      Complex complex4 = complex1.tan();
      complex0.divide(complex3);
      Complex complex5 = Complex.valueOf((-586.3921799678462));
      Complex complex6 = complex3.multiply(complex4);
      Complex complex7 = complex2.tanh();
      complex5.hashCode();
      Complex complex8 = complex4.multiply(2435.7724858553115);
      complex2.hashCode();
      Complex complex9 = Complex.ONE;
      complex8.getField();
      complex8.sqrt();
      complex6.tanh();
      complex7.divide((-1722.3512421759044));
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(2.5847537197720607);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.NaN.sqrt1z();
      complex1.nthRoot(590);
      Complex complex3 = complex1.multiply(complex0);
      complex2.ONE.readResolve();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.NaN.divide(complex3);
      Complex complex6 = complex5.INF.asin();
      complex6.ZERO.multiply(671);
      complex4.I.toString();
      Complex complex7 = complex0.sqrt();
      complex7.I.sqrt();
      Complex complex8 = complex7.ZERO.multiply(complex5);
      Complex complex9 = complex2.multiply(590);
      complex9.I.sqrt();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex10.ONE.multiply(complex7);
      complex9.add(672.34);
      Complex complex12 = complex4.add(complex2);
      Complex complex13 = complex11.divide((double) 590);
      complex1.equals(complex8);
      complex12.nthRoot(1925);
      complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1722.3512421759044), (-1722.3512421759044));
      Complex complex1 = complex0.multiply(4333);
      Complex complex2 = Complex.ZERO;
      complex2.abs();
      Complex complex3 = Complex.valueOf((-1722.3512421759044), (double) 4333);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.exp();
      complex1.asin();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex3.divide(complex1);
      complex3.asin();
      Complex complex8 = Complex.valueOf((-625.0));
      Complex complex9 = complex0.multiply(complex5);
      Complex complex10 = complex9.tanh();
      complex6.hashCode();
      complex1.multiply(Double.NaN);
      complex9.hashCode();
      complex2.getField();
      complex10.sqrt();
      complex7.tanh();
      complex8.divide(1700.187191541796);
      Complex complex11 = complex5.exp();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.negate();
      complex1.INF.hashCode();
      Complex complex4 = complex2.ZERO.divide(complex0);
      complex2.ONE.atan();
      Complex complex5 = complex1.divide(complex2);
      complex5.I.nthRoot(37);
      Complex complex6 = complex5.INF.conjugate();
      complex6.cos();
      Complex complex7 = Complex.valueOf((-1706.56));
      complex2.toString();
      complex1.log();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex8.I.negate();
      complex3.toString();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex7.add(complex10);
      Complex complex12 = complex0.divide(complex7);
      Complex complex13 = complex2.pow(complex4);
      complex13.ZERO.readResolve();
      Complex complex14 = complex5.divide((double) 37);
      complex14.NaN.add(complex12);
      complex13.atan();
      complex9.reciprocal();
      complex11.createComplex((-1706.56), (-1706.56));
      Complex.valueOf((double) 37);
      complex10.multiply(37);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1945.881923));
      Complex complex1 = Complex.valueOf((-6087.2), (-6087.2));
      complex0.getArgument();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.cosh();
      complex3.getReal();
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = Complex.NaN;
      complex5.asin();
      Complex complex6 = Complex.valueOf((-1945.881923), Double.POSITIVE_INFINITY);
      complex1.pow(complex6);
      complex4.readResolve();
      complex0.acos();
      complex2.divide((-6087.2));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.divide(complex0);
      complex0.ZERO.hashCode();
      complex0.negate();
      Complex complex2 = complex0.log();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(5.0075692943, 5.0075692943);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.subtract(3892.04585344);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex1.ZERO.sqrt1z();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex3.I.acos();
      complex0.divide(2.0);
      complex5.I.hashCode();
      complex3.NaN.readResolve();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex0.multiply(complex2);
      Complex complex11 = complex7.asin();
      Complex complex12 = complex11.pow(complex1);
      complex6.acos();
      complex5.abs();
      Complex complex13 = Complex.I;
      complex13.ONE.readResolve();
      complex4.multiply(complex13);
      complex12.isInfinite();
      complex10.conjugate();
      complex6.sqrt();
      complex6.atan();
      complex11.I.pow(Double.NaN);
      complex0.sqrt1z();
      complex8.subtract(0.0);
      complex11.tan();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-638.240839526);
      Complex complex1 = complex0.pow((-638.240839526));
      int int0 = 4333;
      Complex complex2 = complex1.multiply(4333);
      complex1.I.abs();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.I;
      complex4.tan();
      complex3.readResolve();
      Complex complex5 = complex1.divide(complex2);
      double double1 = 0.5403023058681398;
      Complex.valueOf((-638.240839526));
      complex5.asin();
      complex0.cos();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1820.269), 208.9779);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.NaN.exp();
      complex1.I.getField();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.I.atan();
      complex4.ZERO.subtract(complex2);
      complex1.nthRoot(681);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.INF.tanh();
      complex2.multiply(1353);
      complex0.abs();
      Complex complex3 = Complex.valueOf(1.4198992252349854, (-2.3313931141476297E13));
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.asin();
      complex5.tan();
      complex1.readResolve();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.cos();
      complex8.multiply(complex6);
      complex7.tanh();
      complex9.hashCode();
      complex3.multiply(2.1190686225891113);
      complex6.hashCode();
      complex6.subtract(2124.3);
      complex8.multiply(complex7);
      complex1.asin();
      complex4.readResolve();
      complex6.subtract((-6.3890560989306495));
      Complex complex10 = Complex.ZERO;
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(1.7920535293737774);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.multiply((-2649));
      Complex complex3 = complex1.ZERO.sqrt();
      complex3.INF.sinh();
      Complex complex4 = complex0.sinh();
      complex1.pow(complex4);
      complex4.multiply((-2649));
      complex4.toString();
      Complex complex5 = Complex.NaN;
      complex5.ZERO.cos();
      complex0.tanh();
      complex2.createComplex(3524.71463204955, (-2033.594));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1945.881923));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.sqrt();
      complex2.isNaN();
      Complex complex3 = Complex.ZERO;
      complex3.readResolve();
      complex3.equals(complex2);
      complex3.createComplex(2127.10638215, 3.7944631664558904E-85);
      Complex.valueOf(3.7944631664558904E-85, (-234.8));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.atan();
      complex1.tanh();
      Complex.valueOf((-397.0));
      complex2.divide((-397.0));
      Complex.valueOf((-96.01573120984564), Double.POSITIVE_INFINITY);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-157));
      complex0.abs();
      Complex complex2 = Complex.valueOf((-1125.1724), (double) (-157));
      complex0.exp();
      Complex complex3 = complex2.asin();
      complex3.getReal();
      complex1.divide(complex3);
      Complex complex4 = Complex.valueOf(1.5645672698520312E274);
      complex4.asin();
      complex4.createComplex((-54.3543), (-4620.50764));
      Complex.valueOf((-54.3543));
      complex3.isNaN();
      Complex complex5 = complex3.sqrt1z();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-2269.861797), (-2269.861797));
      Complex complex1 = complex0.I.divide(941.8319384);
      Complex complex2 = complex1.NaN.tanh();
      complex1.cos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.negate();
      complex4.cos();
      Complex complex5 = complex3.sqrt();
      complex4.asin();
      complex0.asin();
      complex2.negate();
      complex5.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1945.881923));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex((-1945.881923), (-1945.881923));
      Complex complex4 = Complex.valueOf((-1945.881923));
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex2.negate();
      complex6.getField();
      Complex complex7 = complex5.subtract(complex1);
      complex0.abs();
      Complex complex8 = complex2.add(complex1);
      Complex complex9 = Complex.INF;
      complex1.equals(complex9);
      Complex.valueOf((-1945.881923));
      Complex complex10 = complex7.tan();
      complex2.log();
      complex5.hashCode();
      complex6.acos();
      complex10.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1945.881923));
      complex0.log();
      Complex complex1 = complex0.reciprocal();
      // Undeclared exception!
      complex1.nthRoot(2146448804);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.log();
      complex1.NaN.getArgument();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.add(complex2);
      complex1.tanh();
      Complex.valueOf((-397.0));
      complex4.getField();
      Complex complex5 = Complex.ZERO;
      complex0.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(198.0, (-5.412881689012608E-8));
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.log();
      Complex complex8 = Complex.INF;
      complex8.hashCode();
      complex0.acos();
      Complex complex9 = Complex.ZERO;
      complex4.multiply(complex9);
      complex7.sinh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.log();
      complex1.NaN.getArgument();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.add(complex2);
      complex1.tanh();
      Complex.valueOf((-397.0));
      complex4.getField();
      Complex complex5 = Complex.ZERO;
      complex0.equals(complex2);
      complex2.createComplex((-234.8), Double.NaN);
      Complex.valueOf((-234.8), (-77.87));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1945.881923));
      complex0.INF.tan();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.sqrt();
      complex2.isNaN();
      complex0.I.divide(2564.8);
      Complex.valueOf(2089.88935997, (-1945.881923));
      complex0.getField();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex0.cosh();
      complex0.getReal();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-1722.3512421759044), (-1722.3512421759044));
      Complex complex1 = complex0.multiply(4333);
      complex0.abs();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 4333);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.asin();
      complex1.tan();
      complex4.readResolve();
      Complex complex5 = Complex.ONE;
      Complex.valueOf((-826.8));
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.cos();
      Complex complex8 = new Complex(1.4198992252349854, 4333);
      complex8.multiply(complex3);
      complex7.tanh();
      complex0.hashCode();
      Complex complex9 = complex6.multiply((-2.3313931141476297E13));
      complex3.hashCode();
      complex9.subtract(20.0);
      Complex complex10 = Complex.ZERO;
      Complex.valueOf(2435.7724858553115);
      complex10.asin();
      complex3.readResolve();
      complex8.subtract((double) 1353);
      Complex complex11 = Complex.ZERO;
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.cosh();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(0.7709939225418828, (-31.473219381454978));
      complex0.getArgument();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.cosh();
      complex1.getReal();
      complex1.divide(complex0);
      complex3.asin();
      complex4.createComplex(1700.526610237587, 1.676321029663086);
      Complex.valueOf((-20.0));
      complex4.isNaN();
      complex4.sqrt1z();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.log();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.asin();
      complex2.sqrt();
      complex0.isNaN();
      complex1.divide(Double.NaN);
      Complex.valueOf(2089.88935997, 2.5411510467529297);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-1820.269));
      Complex complex1 = complex0.atan();
      complex1.cosh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf(2.0, 2.0);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.tan();
      complex5.readResolve();
      complex1.divide(complex6);
      Complex complex7 = Complex.valueOf((-204.18531009));
      Complex complex8 = complex1.asin();
      complex7.cos();
      complex6.multiply(complex7);
      Complex complex9 = complex5.tanh();
      complex9.hashCode();
      Complex complex10 = complex4.multiply((-469.143992145237));
      Complex complex11 = Complex.ONE;
      complex11.hashCode();
      complex7.subtract(1.408559707497606E293);
      complex3.multiply(complex10);
      complex8.asin();
      Complex complex12 = Complex.valueOf(2.0);
      complex12.readResolve();
      Complex complex13 = Complex.I;
      complex13.subtract(2.0);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(208.9779, 2.0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.ONE;
      complex5.getField();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex3.atan();
      complex7.subtract(complex2);
      complex6.toString();
      Complex complex8 = Complex.valueOf(2.0, 96.655201573);
      complex8.acos();
      complex4.divide(3005.39);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1722.3512421759044), (-1722.3512421759044));
      complex0.ONE.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.reciprocal();
      complex2.nthRoot(2487);
      complex0.getReal();
      Complex complex3 = complex1.tanh();
      Complex.valueOf((double) 2487);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.getField();
      Complex complex5 = Complex.ZERO;
      complex0.equals("");
      Complex complex6 = complex3.createComplex(2.0, (-1722.3512421759044));
      complex6.ZERO.multiply(64);
      Complex.valueOf((-2201.0), 0.0);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.INF.sqrt();
      complex2.I.getField();
      Complex complex4 = complex2.ONE.multiply(complex1);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex6.I.cosh();
      Complex complex8 = complex5.cosh();
      complex8.INF.add(complex4);
      complex5.add(complex3);
      complex2.tan();
      complex3.getImaginary();
      Complex complex9 = complex5.multiply(complex7);
      complex9.asin();
      complex0.readResolve();
      Complex complex10 = Complex.ZERO;
      complex10.subtract(Double.NaN);
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.log();
      complex1.NaN.getArgument();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.add(complex2);
      Complex complex5 = complex3.subtract(complex0);
      complex2.negate();
      complex4.getField();
      complex1.subtract(complex2);
      Complex complex6 = new Complex(Double.NaN, Double.NaN);
      complex6.abs();
      Complex complex7 = complex5.add(complex3);
      complex0.equals(complex1);
      Complex.valueOf(Double.NaN);
      Complex complex8 = Complex.NaN;
      complex8.tan();
      Complex complex9 = new Complex(Double.NaN, Double.NaN);
      Complex complex10 = complex9.log();
      Complex complex11 = Complex.NaN;
      complex11.hashCode();
      complex1.acos();
      complex10.multiply(complex0);
      complex7.multiply((-676));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1945.881923));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.sqrt();
      complex2.nthRoot(692);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex0.add(complex2);
      complex6.subtract(complex0);
      complex2.add(complex6);
      complex2.sqrt();
      Complex complex8 = Complex.ZERO;
      complex8.equals(complex0);
      complex2.hashCode();
      complex7.multiply((-1945.881923));
      Complex.valueOf((-1722.3512421759044));
      complex0.tanh();
      complex6.getReal();
      complex3.isNaN();
      complex6.atan();
      complex3.getImaginary();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.log();
      complex1.NaN.getArgument();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.add(complex2);
      complex3.subtract(complex0);
      complex1.tanh();
      Complex.valueOf((-1279.5963130898804));
      Complex complex5 = Complex.valueOf((-397.0));
      complex4.getField();
      Complex complex6 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex2.createComplex((-234.8), Double.POSITIVE_INFINITY);
      Complex.valueOf((-234.8), (-77.87));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.ONE.log();
      complex3.NaN.reciprocal();
      complex0.I.nthRoot(2487);
      complex0.getReal();
      Complex complex6 = complex3.multiply(334);
      Complex complex7 = Complex.valueOf(3295.25, (double) 334);
      Complex complex8 = complex7.multiply(3295.25);
      complex8.sinh();
      complex2.reciprocal();
      Complex complex9 = complex3.conjugate();
      complex2.add(complex9);
      complex7.getReal();
      complex6.getField();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1820.269), 208.9779);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.divide((-2115.97606135));
      Complex complex3 = complex0.createComplex((-1820.269), 208.9779);
      Complex complex4 = complex1.divide(complex0);
      complex4.log();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex2.sin();
      complex0.abs();
      Complex complex7 = complex6.add(1.7078641226055994E-91);
      Complex complex8 = complex7.subtract(9.222671009756424E-306);
      Complex complex9 = complex4.asin();
      complex8.pow(complex9);
      complex9.atan();
      Complex.valueOf(208.9779);
      Complex complex10 = Complex.valueOf((-2115.97606135), (-1863.161151237728));
      complex10.hashCode();
      complex5.multiply(complex3);
      Complex.valueOf(1.5061679518016692E-187);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1137.55305861997);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.negate();
      complex2.sin();
      Complex complex3 = complex1.exp();
      Complex complex4 = Complex.valueOf((-1279.5963130898804), (-1820.269));
      Complex complex5 = complex0.divide((-1279.5963130898804));
      complex1.createComplex(2051.84247, 1.8279051206232177E83);
      complex3.divide(complex0);
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.atan();
      Complex complex9 = complex6.sin();
      complex4.abs();
      Complex complex10 = complex9.add((-3176.6994131));
      complex2.subtract(1945.881923);
      complex8.getImaginary();
      Complex complex11 = complex3.asin();
      Complex complex12 = Complex.valueOf(1795.682684);
      complex12.pow(complex5);
      complex11.atan();
      complex7.add(complex4);
      complex10.hashCode();
      complex11.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1722.3512421759044));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.divide(complex2);
      complex2.hashCode();
      double double0 = 20.0;
      complex0.add(20.0);
      try { 
        complex3.nthRoot((-1607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,607
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-663.78054));
      complex0.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.cosh();
      complex1.getReal();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = Complex.INF;
      complex5.asin();
      Complex complex6 = complex5.createComplex(7.530840351477639E-188, 1782.6199);
      Complex.valueOf(7.530840351477639E-188);
      complex0.isNaN();
      complex1.sqrt1z();
      complex5.negate();
      complex6.acos();
      try { 
        complex4.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1722.3512421759044), (-1722.3512421759044));
      complex0.ONE.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.cosh();
      complex1.getReal();
      Complex complex3 = complex1.divide(complex2);
      complex3.I.asin();
      complex3.createComplex(1700.526610237587, (-20.0));
      Complex.valueOf(1722.3512421759044);
      Complex complex4 = Complex.valueOf((-1722.3512421759044));
      complex1.tan();
      Complex complex5 = Complex.NaN;
      complex5.log();
      Complex complex6 = Complex.I;
      complex6.hashCode();
      complex5.acos();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex0.ONE.atan();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = Complex.valueOf(4.723718452167613E-4, 4.723718452167613E-4);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex6.tan();
      complex6.readResolve();
      complex7.divide(complex1);
      Complex complex8 = Complex.valueOf((-204.18531009));
      complex3.asin();
      complex0.cos();
      complex6.multiply(complex5);
      Complex complex9 = complex6.tanh();
      complex9.hashCode();
      Complex complex10 = complex1.multiply(4.723718452167613E-4);
      complex5.hashCode();
      Complex complex11 = complex10.subtract(4.723718452167613E-4);
      complex9.multiply(complex4);
      complex2.asin();
      complex11.readResolve();
      complex8.subtract((-1.0));
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-638.240839526));
      Complex complex2 = complex1.multiply(4333);
      complex1.I.abs();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.log();
      complex2.reciprocal();
      complex4.nthRoot(2487);
      complex2.getReal();
      Complex complex5 = complex0.tanh();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf((-638.240839526));
      complex6.getField();
      Complex complex7 = Complex.ZERO;
      complex4.equals(complex5);
      complex0.createComplex(2487, (-869.16433));
      Complex.valueOf(1.0, 1.0);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-638.240839526));
      Complex complex2 = complex1.negate();
      Complex complex3 = new Complex((-638.240839526), (-638.240839526));
      Complex complex4 = complex3.sin();
      Complex complex5 = complex1.exp();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex3.divide((-140.281941805));
      Complex complex7 = complex4.createComplex((-638.240839526), (-2.3313931141476297E13));
      Complex complex8 = Complex.valueOf(1.8279051206232177E83);
      Complex complex9 = complex2.divide(complex8);
      Complex complex10 = complex6.log();
      complex8.atan();
      complex2.sin();
      complex0.abs();
      Complex complex11 = complex10.add((-1965.319717398304));
      complex11.subtract((-2382.509180879406));
      Complex complex12 = Complex.ONE;
      complex12.getImaginary();
      Complex complex13 = Complex.NaN;
      complex13.asin();
      complex9.pow(complex7);
      complex10.atan();
      complex2.add(complex7);
      complex5.hashCode();
      complex13.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.INF.tanh();
      complex2.multiply(1353);
      complex0.abs();
      Complex complex3 = Complex.valueOf(1.4198992252349854, (-2.3313931141476297E13));
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.asin();
      complex5.tan();
      complex1.readResolve();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = Complex.valueOf((double) 4333);
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.cos();
      complex8.multiply(complex6);
      complex7.tanh();
      complex9.hashCode();
      complex3.multiply(2.1190686225891113);
      complex6.hashCode();
      complex6.subtract(2124.3);
      complex8.multiply(complex7);
      complex1.asin();
      complex4.readResolve();
      complex6.subtract((-6.3890560989306495));
      Complex complex10 = Complex.ZERO;
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-157));
      complex0.abs();
      Complex complex2 = Complex.valueOf((-1125.1724), (double) (-157));
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex0.tan();
      complex4.readResolve();
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = Complex.valueOf(0.5403023058681398);
      complex5.asin();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex8.multiply(complex4);
      Complex complex10 = new Complex(4203.9, (-157));
      complex10.tanh();
      complex7.hashCode();
      Complex complex11 = complex1.multiply(0.5403023058681398);
      complex11.hashCode();
      Complex complex12 = complex9.subtract((double) 4333);
      Complex complex13 = complex12.multiply(complex2);
      complex13.asin();
      complex6.readResolve();
      complex13.subtract(1723.5);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(4333);
      complex1.I.abs();
      Complex.valueOf(1.0, 1.0);
      Complex complex3 = Complex.valueOf((double) 4333, (-638.240839526));
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.ZERO.tan();
      Complex complex6 = (Complex)complex5.readResolve();
      Complex complex7 = complex4.INF.divide(complex1);
      Complex complex8 = Complex.valueOf(1.0);
      Complex complex9 = complex1.ZERO.asin();
      complex0.nthRoot(1363);
      complex2.subtract(complex3);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.acos();
      Complex complex12 = complex11.acos();
      Complex complex13 = complex7.add(complex10);
      complex4.subtract(complex9);
      Complex complex14 = complex7.add(complex8);
      complex10.sqrt();
      Complex complex15 = (Complex)complex8.readResolve();
      complex0.equals(complex15);
      complex2.hashCode();
      complex13.multiply(1711.509972);
      Complex.valueOf(2018.4059446257);
      Complex complex16 = Complex.I;
      complex16.tanh();
      complex2.getReal();
      complex14.isNaN();
      complex10.atan();
      complex6.getImaginary();
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1125.1724));
      Complex complex1 = Complex.valueOf(6.283185307179586, (-1125.1724));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.subtract(complex0);
      complex4.divide(0.0);
      Complex complex5 = Complex.valueOf((-1125.1724), (-1125.1724));
      Complex complex6 = complex5.atan();
      complex5.getReal();
      Complex complex7 = complex6.subtract(complex3);
      complex5.pow(complex7);
      complex6.equals(complex4);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.exp();
      complex0.INF.getArgument();
      complex0.INF.readResolve();
      Complex complex2 = complex0.reciprocal();
      complex0.INF.asin();
      Complex complex3 = complex2.I.add(complex1);
      Complex complex4 = complex2.tanh();
      complex4.ZERO.atan();
      Complex complex5 = complex3.I.multiply(2240.99978444483);
      complex5.I.cos();
      Complex complex6 = Complex.valueOf(0.0, 1108.0);
      complex6.divide(complex0);
      complex2.isNaN();
      complex6.multiply(0);
      complex0.hashCode();
      Complex complex7 = complex1.sqrt1z();
      complex7.ZERO.getField();
      complex0.sinh();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.log();
      complex1.NaN.getArgument();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.add(complex2);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex2.multiply((-2243));
      Complex complex7 = complex6.multiply(972.7892);
      complex7.ONE.sinh();
      Complex complex8 = complex5.reciprocal();
      complex8.I.conjugate();
      complex4.add(complex3);
      complex4.getReal();
      complex7.getField();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.pow(1798.9215245569767);
      complex3.NaN.cosh();
      complex2.acos();
      Complex complex4 = complex1.sqrt();
      complex4.getReal();
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8559980428862584E-230, 6.283185307179586);
      Complex complex1 = complex0.ZERO.sin();
      complex0.NaN.tanh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.INF.asin();
      complex1.I.getArgument();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.divide(1.5707963267948966);
      complex5.I.add(complex2);
      Complex.valueOf(1.4649717807769775, 1.8559980428862584E-230);
      Complex complex6 = complex0.subtract(1.8559980428862584E-230);
      complex6.I.log();
      complex6.isInfinite();
      complex3.add(complex2);
      Complex complex7 = new Complex(2277.27217, 1.5707963267948966);
      complex0.divide(complex7);
      Complex.valueOf(1.4649717807769775, 678.0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.reciprocal();
      complex0.ZERO.pow(complex1);
      Complex complex2 = complex1.NaN.divide(complex0);
      complex0.ZERO.hashCode();
      complex0.I.add(0.0);
      complex0.nthRoot(258);
      complex2.sin();
      complex0.pow((double) 258);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      complex0.INF.getArgument();
      Complex complex1 = complex0.NaN.createComplex(1.5707963267948966, 0.7853981633974483);
      Complex complex2 = Complex.valueOf((-1299.89807), (-1299.89807));
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex2.reciprocal();
      complex0.getReal();
      complex2.getReal();
      complex2.NaN.multiply(complex3);
      complex1.getReal();
      complex1.I.tanh();
      try { 
        complex4.nthRoot((-1665));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,665
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      int int0 = 0;
      complex1.I.conjugate();
      try { 
        complex1.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(916.1);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.INF.multiply((-2027));
      complex2.getField();
      complex0.readResolve();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-187.1));
      Complex complex1 = Complex.ONE;
      complex0.INF.subtract(complex1);
      double double0 = 0.0;
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = Complex.valueOf(0.0, 399.771);
      complex4.toString();
      int int0 = (-1023);
      complex2.I.pow(complex3);
      try { 
        complex2.ZERO.nthRoot((-1023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,023
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.abs();
      complex0.getReal();
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1.5707963267948966, 0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex2 = new Complex(1037.089914273037, 0.0);
      Complex complex3 = complex0.divide(complex2);
      complex3.I.negate();
      complex2.getField();
      Complex complex4 = complex3.subtract(complex2);
      complex4.abs();
      complex4.ZERO.add(complex2);
      complex3.equals((Object) null);
      Complex.valueOf(1037.0899142734852);
      complex2.I.tan();
      complex0.ZERO.log();
      complex2.hashCode();
      complex4.acos();
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(230.8058411);
      Complex complex1 = complex0.NaN.subtract(1956.561);
      complex0.I.getArgument();
      complex0.NaN.abs();
      complex1.ONE.asin();
      Complex complex2 = complex0.subtract(0.0);
      complex2.asin();
      Complex complex3 = complex1.NaN.divide(complex2);
      complex2.INF.multiply(0.0);
      complex2.ONE.getArgument();
      complex1.isNaN();
      complex2.getReal();
      Complex complex4 = complex1.atan();
      complex4.ZERO.sqrt1z();
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex5.tan();
      Complex complex6 = Complex.valueOf(1.5707963267948966, 230.8058411);
      complex6.INF.negate();
      Complex complex7 = complex6.cos();
      Complex complex8 = Complex.ONE;
      complex7.conjugate();
      Complex complex9 = complex7.add(complex8);
      complex9.I.atan();
      complex6.INF.reciprocal();
      complex9.INF.cosh();
      Complex complex10 = complex7.ZERO.asin();
      complex3.createComplex(1956.561, 230.8058411);
      Complex.valueOf(0.0);
      complex10.log();
      complex10.log();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      complex0.ONE.multiply((-2649));
      Complex complex2 = complex1.ZERO.sqrt();
      complex2.INF.sinh();
      Complex complex3 = complex0.sinh();
      complex1.pow(complex3);
      complex3.multiply((-2649));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-638.240839526));
      complex1.multiply(4333);
      complex1.I.abs();
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.ZERO.tan();
      complex5.readResolve();
      complex4.INF.divide(complex1);
      Complex complex6 = Complex.valueOf(1.0);
      complex1.ZERO.asin();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex6.I.multiply(complex7);
      Complex complex9 = complex1.tanh();
      complex9.ONE.hashCode();
      Complex complex10 = complex0.multiply(2124.3);
      complex5.hashCode();
      complex6.subtract((-1.0));
      complex10.multiply(complex2);
      Complex complex11 = complex10.asin();
      complex11.INF.readResolve();
      complex8.subtract((-1.0));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.INF.log();
      complex1.INF.acos();
      complex0.getField();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1722.3512421759044), (-1722.3512421759044));
      complex0.ONE.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.cosh();
      complex1.getReal();
      Complex complex3 = complex1.divide(complex2);
      complex3.I.asin();
      complex3.createComplex(1700.526610237587, (-20.0));
      Complex complex4 = Complex.valueOf(1722.3512421759044);
      complex2.isNaN();
      complex4.sqrt1z();
      complex1.negate();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(3582.639801863239);
      Complex complex1 = new Complex(3582.639801863239, 3582.639801863239);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.add(complex1);
      complex2.ONE.hashCode();
      complex3.tan();
      complex3.NaN.getField();
      complex2.abs();
      complex2.cos();
      Complex complex4 = Complex.INF;
      complex1.ONE.tanh();
      complex1.divide(complex4);
      Complex.valueOf(3582.639801863239);
      complex1.isInfinite();
      Complex.valueOf(0.0, 3582.639801863239);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = complex0.multiply((-1));
      complex1.NaN.multiply(0.0);
      complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(4896.20753881, 4896.20753881);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.NaN.tan();
      complex3.INF.atan();
      Complex complex4 = complex2.I.add(4896.20753881);
      Complex complex5 = complex2.I.subtract(complex0);
      complex5.INF.getArgument();
      complex1.INF.createComplex(970.00936, 4896.20753881);
      Complex complex6 = complex0.atan();
      complex4.I.tanh();
      complex6.readResolve();
      complex0.conjugate();
      complex4.equals(complex0);
      Complex.valueOf(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.getArgument();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.add((-341.896633));
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex3.ZERO.sqrt1z();
      complex5.I.sinh();
      complex2.ONE.toString();
      complex5.atan();
      Complex complex6 = complex3.add(complex1);
      Complex complex7 = complex5.NaN.pow(complex4);
      complex6.ONE.nthRoot(649);
      complex1.negate();
      Complex complex8 = complex5.divide(complex2);
      complex8.ZERO.cosh();
      Complex complex9 = complex8.atan();
      complex8.NaN.readResolve();
      complex1.NaN.divide(complex7);
      Complex complex10 = complex5.ZERO.pow(0.0);
      complex10.ONE.readResolve();
      Complex complex11 = complex5.add(339.63338191);
      Complex complex12 = complex11.NaN.atan();
      complex12.ZERO.negate();
      complex11.asin();
      Complex complex13 = complex5.add(complex3);
      complex2.getArgument();
      complex5.getReal();
      Complex complex14 = complex9.conjugate();
      complex14.I.exp();
      complex13.isInfinite();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.reciprocal();
      complex1.log();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.divide((-2010.67064302833));
      Complex complex3 = complex1.NaN.subtract(0.0);
      complex1.tan();
      complex2.negate();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.negate();
      complex3.atan();
      complex1.add(complex4);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.readResolve();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.pow(3061.793);
      complex2.INF.sin();
      complex2.atan();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.divide(3061.793);
      complex4.ONE.subtract(complex2);
      complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(824.998, 824.998);
      complex0.INF.negate();
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.getField();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex0.ONE.readResolve();
      Complex complex3 = complex2.cosh();
      complex3.INF.readResolve();
      Complex complex4 = complex3.createComplex((-1170.3894982), 6.283185307179586);
      Complex complex5 = complex4.subtract(complex1);
      complex5.NaN.divide(6.283185307179586);
      Complex complex6 = complex3.ZERO.subtract(complex1);
      Complex complex7 = complex6.I.cos();
      complex7.ZERO.abs();
      Complex complex8 = Complex.valueOf(824.998);
      Complex complex9 = complex8.ZERO.tan();
      complex8.ZERO.nthRoot(3669);
      Complex complex10 = complex8.NaN.subtract(complex9);
      complex8.ZERO.acos();
      Complex complex11 = complex0.acos();
      complex4.add(complex10);
      Complex complex12 = complex11.subtract(complex8);
      complex11.add(complex12);
      complex4.sqrt();
      complex8.equals(complex4);
      complex11.hashCode();
      complex8.multiply((-1170.3894982));
      Complex.valueOf((double) 3669);
      complex3.I.tanh();
      complex9.getReal();
      complex5.isNaN();
      complex11.atan();
      complex1.getImaginary();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1570.0289303145894, 1067.39804825186);
      Complex complex1 = complex0.ONE.atan();
      complex1.ONE.getArgument();
      complex0.sin();
      complex0.INF.acos();
      complex0.ONE.sin();
      complex0.NaN.reciprocal();
      Complex complex2 = complex0.tanh();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sin();
      complex3.I.exp();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex1.ZERO.divide((-2115.97606135));
      complex5.ONE.createComplex(1.8279051206232177E83, 1.8279051206232177E83);
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = complex5.atan();
      complex6.INF.sin();
      complex1.abs();
      complex2.add((-3176.6994131));
      complex4.subtract(1.8279051206232177E83);
      complex2.getImaginary();
      complex7.asin();
      Complex complex9 = complex8.pow(complex5);
      complex9.atan();
      complex3.add(complex7);
      complex8.hashCode();
      complex8.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      complex0.INF.abs();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex2.log();
      complex0.nthRoot(2504);
      complex4.hashCode();
      Complex complex5 = Complex.valueOf(5308.08102325);
      complex1.equals(complex0);
      complex1.multiply(0);
      complex5.pow(complex3);
      Complex complex6 = complex2.sqrt();
      complex3.ZERO.sqrt();
      Complex complex7 = complex3.tan();
      complex0.ONE.getArgument();
      complex1.getImaginary();
      Complex complex8 = complex5.add(complex7);
      complex6.ONE.multiply(7);
      Complex complex9 = complex8.reciprocal();
      complex9.NaN.cos();
      complex9.abs();
      Complex complex10 = complex0.cos();
      complex10.INF.add(902.54);
      complex6.cosh();
      complex1.subtract(9.739345931419228E280);
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = complex0.tanh();
      complex1.sinh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.multiply(7);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.valueOf((double) 7, 2.4295239448547363);
      Complex complex6 = complex4.I.cosh();
      Complex complex7 = complex3.pow(complex1);
      complex0.negate();
      complex7.NaN.atan();
      complex4.getReal();
      complex6.negate();
      Complex complex8 = complex6.add(complex2);
      Complex complex9 = complex0.add(complex2);
      complex9.cos();
      complex9.ZERO.abs();
      complex1.ZERO.pow(0.0);
      Complex complex10 = complex8.sqrt1z();
      complex6.log();
      complex7.subtract((double) 7);
      complex9.getField();
      complex10.atan();
      complex5.getArgument();
      complex7.multiply(complex2);
      complex10.createComplex(0.0, 5.727787111340131E-8);
      Complex.valueOf(0.0, 0.0);
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.INF.sqrt();
      complex2.I.getField();
      Complex complex4 = complex2.ONE.multiply(complex1);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex5 = complex1.negate();
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex.valueOf(Double.NaN);
      complex6.I.cosh();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.INF.add(complex4);
      complex5.add(complex3);
      Complex complex9 = complex2.tan();
      complex3.getImaginary();
      complex9.getField();
      complex1.getImaginary();
      complex0.getArgument();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1945.881923));
      complex0.ONE.asin();
      Complex complex1 = complex0.sqrt();
      complex1.isNaN();
      Complex.valueOf(2089.88935997, (-1945.881923));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(3872.163213112573);
      complex0.NaN.sin();
      Complex.valueOf(3872.163213112573);
      Complex complex1 = complex0.sinh();
      complex1.readResolve();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1479.430583, 1479.430583);
      Complex complex1 = complex0.tanh();
      complex1.I.exp();
      complex1.hashCode();
      Complex complex2 = complex0.multiply(1479.430583);
      Complex complex3 = complex2.multiply((-844));
      complex0.readResolve();
      complex0.multiply(0);
      Complex complex4 = complex2.multiply(complex3);
      complex4.multiply(0.0);
      Complex complex5 = complex0.asin();
      complex5.ONE.tanh();
      complex5.sin();
      complex0.negate();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex2.ZERO.atan();
      complex4.toString();
      Complex complex5 = complex1.add(0.0);
      Complex complex6 = complex1.ZERO.conjugate();
      complex5.getField();
      complex5.getReal();
      Complex complex7 = complex0.exp();
      complex5.multiply(complex6);
      Complex complex8 = complex6.tan();
      complex7.ONE.createComplex(2.6991427376823027E-152, 0);
      complex8.cosh();
      complex7.getField();
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply((-2344));
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex0.INF.add(1.0);
      Complex complex5 = complex1.divide(1.0);
      Complex complex6 = complex5.NaN.log();
      complex6.sqrt();
      Complex complex7 = complex0.exp();
      complex3.sin();
      complex7.getField();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex8.exp();
      complex9.getField();
      complex1.log();
      complex1.getReal();
      complex9.isNaN();
      Complex complex10 = complex2.sqrt1z();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex1.hashCode();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex2.ZERO.atan();
      complex3.INF.cos();
      complex3.nthRoot(257);
      complex3.ONE.hashCode();
      Complex complex4 = complex0.subtract(0.0);
      complex4.NaN.toString();
      complex1.hashCode();
      Complex complex5 = complex0.sqrt1z();
      complex5.getImaginary();
      complex5.isNaN();
      complex5.getArgument();
      Complex complex6 = complex0.I.divide(0.0);
      complex6.ONE.sqrt1z();
      complex4.ONE.divide(complex5);
      Complex complex7 = complex5.subtract(complex1);
      complex7.NaN.getArgument();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(928.2);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.INF.tanh();
      complex2.I.getField();
      Complex complex3 = complex1.tanh();
      complex0.toString();
      Complex complex4 = complex0.pow((-935.0614732363491));
      complex0.getImaginary();
      Complex.valueOf((-2293.9078931235244), 2.2229342460632324);
      Complex complex5 = complex1.createComplex((-2293.9078931235244), 2.2229342460632324);
      complex5.I.tanh();
      complex5.I.exp();
      Complex complex6 = complex3.reciprocal();
      complex6.INF.add(complex4);
      complex6.NaN.toString();
      Complex complex7 = complex3.atan();
      complex4.nthRoot(1);
      complex7.isInfinite();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex3.I.sqrt1z();
      complex4.ONE.log();
      complex3.NaN.reciprocal();
      complex0.I.nthRoot(2487);
      complex0.getReal();
      Complex complex5 = complex3.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(0.0);
      complex6.NaN.getField();
      Complex complex7 = Complex.ZERO;
      complex2.equals(complex7);
      complex0.createComplex(2.0, 757.9209905083);
      Complex.valueOf((double) 2487, Double.POSITIVE_INFINITY);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ONE.pow(279.98863923);
      complex0.conjugate();
      complex2.INF.readResolve();
      Complex complex4 = complex2.NaN.sqrt();
      Complex complex5 = Complex.valueOf(279.98863923, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.asin();
      complex6.readResolve();
      Complex complex8 = complex6.I.log();
      Complex complex9 = complex4.INF.acos();
      complex2.hashCode();
      Complex complex10 = complex2.ONE.add(complex5);
      Complex complex11 = complex4.ONE.divide(0.0);
      Complex complex12 = complex11.I.negate();
      Complex complex13 = complex12.log();
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      Complex complex14 = complex10.ZERO.sinh();
      assertEquals(280.98863923, complex10.getReal(), 0.01);
      
      Complex complex15 = complex2.createComplex((-896.075), 279.98863923);
      Complex complex16 = complex4.exp();
      Complex complex17 = complex3.add(0.0);
      assertEquals(1.0, complex17.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.equals((Object)complex14));
      
      complex15.getImaginary();
      complex8.add((-896.075));
      complex9.add(complex15);
      Complex complex18 = complex1.multiply(complex9);
      complex16.getArgument();
      assertSame(complex2, complex11);
      assertSame(complex16, complex18);
      
      Complex complex19 = complex7.conjugate();
      assertSame(complex19, complex9);
      assertFalse(complex19.equals((Object)complex10));
      
      complex5.isNaN();
      assertFalse(complex5.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getField();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }
}
