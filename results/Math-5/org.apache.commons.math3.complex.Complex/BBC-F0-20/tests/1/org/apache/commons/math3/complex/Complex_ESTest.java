/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:43:29 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.I.subtract((-20.0));
      complex0.INF.cos();
      Complex complex5 = complex2.NaN.divide(complex3);
      complex4.sqrt1z();
      complex5.ZERO.cos();
      complex0.INF.toString();
      complex0.abs();
      Complex complex6 = complex0.createComplex(1.0, 426.8727727044825);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.INF.asin();
      complex1.tan();
      complex1.negate();
      complex8.ONE.getArgument();
      Complex complex9 = complex8.ZERO.sinh();
      Complex complex10 = complex9.ONE.divide(426.8727727044825);
      Complex complex11 = Complex.INF;
      complex10.ZERO.subtract(complex11);
      complex1.ZERO.toString();
      Complex complex12 = Complex.valueOf(0.9565214585586138, 1.0);
      complex12.cos();
      complex8.add(complex1);
      Complex complex13 = complex6.divide(426.8727727044825);
      complex13.NaN.asin();
      complex1.sin();
      int int0 = 0;
      try { 
        complex12.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-14.609462219816349), (-14.609462219816349));
      Complex complex1 = complex0.tanh();
      complex1.sqrt1z();
      complex0.tan();
      Complex complex2 = Complex.valueOf((-20.0));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-14.609462219816349), (-14.609462219816349));
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-4729.26000706005));
      complex1.divide(complex0);
      Complex complex2 = new Complex((-2174.53879), Double.POSITIVE_INFINITY);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0010774947102163424, 20.0);
      Complex complex1 = complex0.tan();
      complex1.atan();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.INF.pow(complex1);
      Complex complex2 = Complex.valueOf((-3678.6615179161));
      complex2.INF.abs();
      complex2.I.createComplex((-770.692718), Double.NaN);
      Complex complex3 = complex0.multiply(complex2);
      complex3.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.INF.add((-770.692718));
      complex6.ONE.sqrt();
      complex2.exp();
      complex5.NaN.conjugate();
      complex2.exp();
      complex5.createComplex(1433.880144246, 2156.83);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-341.94459516), Double.POSITIVE_INFINITY);
      complex0.NaN.add((-20.0));
      complex0.multiply((-1116));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.equals(complex0);
      Complex complex2 = complex0.add(complex1);
      complex0.getArgument();
      Complex complex3 = Complex.valueOf((-1665.342), (-1238.0014536141707));
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex0.createComplex(1.5707963267948966, 0.0);
      Complex complex8 = Complex.valueOf((-1238.0014536141707), 1140.053420795651);
      complex8.getArgument();
      complex8.abs();
      complex7.isInfinite();
      Complex complex9 = complex8.add((-4.768920119497491E-8));
      complex4.getImaginary();
      complex1.nthRoot(1);
      Complex complex10 = complex0.multiply(1);
      complex2.subtract(1682.9644682579208);
      complex6.negate();
      complex8.tanh();
      Complex.valueOf(0.0, 3.557407724654902);
      complex8.readResolve();
      complex10.multiply(complex5);
      complex5.acos();
      complex4.cos();
      complex3.getField();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      complex0.ZERO.nthRoot(37);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-341.94459516), Double.POSITIVE_INFINITY);
      complex0.multiply(8.4846783);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-341.94459516), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-354.3469684726096), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(complex0);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.tanh();
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1710);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.tanh();
      complex1.pow(complex0);
      Complex complex2 = Complex.ONE;
      complex2.toString();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      complex0.pow(complex1);
      Complex complex2 = Complex.valueOf(2147.42709, Double.POSITIVE_INFINITY);
      complex2.tanh();
      complex0.multiply(0);
      Complex complex3 = Complex.valueOf(4472.161522771);
      complex1.negate();
      Complex complex4 = complex2.asin();
      complex3.abs();
      Complex complex5 = complex0.conjugate();
      complex4.tan();
      complex3.cos();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.019569741253664E-293), 9.737824992739076E291);
      Complex complex1 = Complex.NaN;
      complex1.I.sqrt();
      Complex complex2 = complex1.reciprocal();
      complex0.log();
      complex1.tan();
      complex0.subtract(complex2);
      Complex complex3 = Complex.valueOf(0.0920940132578934, 2021.5);
      complex3.toString();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(4106.873413385);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.add(4106.873413385);
      complex2.tanh();
      Complex complex3 = Complex.ONE;
      complex0.abs();
      Complex complex4 = Complex.valueOf(2021.5, 2021.5);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex3.log();
      complex1.tan();
      complex5.subtract(complex2);
      complex1.multiply(complex6);
      Complex complex7 = complex3.divide((-1708.021692995586));
      complex3.cosh();
      Complex complex8 = Complex.valueOf((-1753.0590660094067), 4106.873413385);
      complex8.NaN.getField();
      complex8.exp();
      Complex complex9 = Complex.ZERO;
      complex1.tanh();
      Complex complex10 = Complex.valueOf((-1753.0590660094067), 4106.873413385);
      complex7.multiply(complex10);
      Complex complex11 = Complex.INF;
      Complex complex12 = Complex.valueOf((-1753.0590660094067), 445.29876);
      complex12.getArgument();
      Complex complex13 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1.0269233640424235E-292));
      Complex complex1 = new Complex(Double.NaN);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-524.76851689));
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = Complex.ZERO;
      complex1.conjugate();
      complex0.log();
      Complex complex3 = Complex.valueOf((-524.76851689));
      complex3.reciprocal();
      Complex complex4 = Complex.ZERO;
      try { 
        complex4.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-2038.1437193450581));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract((-2038.1437193450581));
      Complex complex3 = complex2.multiply(4106.873413385);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.add(4106.873413385);
      Complex complex6 = complex4.tanh();
      complex2.exp();
      complex2.abs();
      Complex complex7 = Complex.valueOf(2021.5, 0.05024668787478346);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex3.pow(complex7);
      Complex complex10 = new Complex(650.8142654575);
      Complex complex11 = Complex.valueOf(0.0);
      complex6.multiply(complex3);
      complex6.acos();
      Complex complex12 = complex11.divide((-1859.28297416859));
      complex4.cosh();
      complex11.log();
      Complex complex13 = Complex.valueOf(20.0);
      complex12.reciprocal();
      complex10.subtract(complex11);
      Complex complex14 = new Complex((-2038.1437193450581), 1.2097692489624023);
      complex5.pow(complex14);
      complex9.multiply(0.0);
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-524.76851689));
      complex0.multiply((-1329));
      Complex complex1 = new Complex((-1049.5360809780734));
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex3.INF.multiply(complex1);
      complex4.NaN.multiply(20.0);
      Complex complex5 = complex1.I.atan();
      double double0 = 0.5;
      complex1.acos();
      complex2.atan();
      Complex complex6 = complex2.multiply(0.5);
      complex6.ONE.getArgument();
      Complex complex7 = complex2.ONE.asin();
      complex7.NaN.hashCode();
      complex5.ONE.subtract(5.2249837964645906E-8);
      complex3.NaN.toString();
      complex2.negate();
      Complex complex8 = complex2.subtract(complex0);
      try { 
        complex8.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-2029.0));
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.INF;
      complex6.abs();
      Complex complex7 = Complex.valueOf((-2029.0), 0.678390383720398);
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex4.log();
      Complex complex10 = complex9.tan();
      complex10.I.pow(complex1);
      Complex complex11 = new Complex(0.0);
      complex11.ZERO.divide(Double.POSITIVE_INFINITY);
      complex1.subtract(complex11);
      Complex complex12 = complex8.multiply(complex4);
      complex12.NaN.acos();
      complex3.divide(1.0);
      complex5.cosh();
      Complex.valueOf(Double.NaN, 1.0);
      complex7.exp();
      Complex complex13 = Complex.ZERO;
      complex6.add(complex13);
      complex5.tanh();
      Complex complex14 = new Complex(545.521545987449, 0.678390383720398);
      complex14.multiply(complex2);
      Complex complex15 = Complex.INF;
      complex4.getArgument();
      complex14.cos();
      complex4.getArgument();
      complex0.getReal();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(233.2145, 233.2145);
      Complex complex1 = new Complex(367.07557020779257, 367.07557020779257);
      complex0.NaN.subtract(complex1);
      complex0.sin();
      Complex.valueOf(233.2145, 2.453212819091277E-4);
      Complex complex2 = complex0.cosh();
      complex2.sin();
      Complex complex3 = complex0.log();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-2029.0));
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.tanh();
      complex2.getField();
      Complex complex3 = complex1.subtract(Double.NaN);
      complex3.divide((-1556.013526665106));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.atan();
      complex3.sqrt1z();
      complex5.log();
      Complex.valueOf((-0.9999996135913021), 0.42863214015960693);
      Complex complex6 = Complex.INF;
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-524.76851689));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex((-524.76851689));
      // Undeclared exception!
      complex1.nthRoot(2146540135);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.acos();
      Complex complex2 = complex1.sqrt1z();
      complex2.ONE.conjugate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.pow((-4812.48818036329));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.conjugate();
      complex5.sqrt();
      complex3.log();
      complex6.reciprocal();
      complex4.subtract(complex0);
      complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.reciprocal();
      complex3.sinh();
      Complex complex5 = complex3.INF.divide((-3249.1));
      Complex.valueOf((-3249.1), (-3249.1));
      complex5.I.hashCode();
      complex5.ZERO.hashCode();
      Complex complex6 = Complex.valueOf((-3249.1), (-3249.1));
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex0.negate();
      complex1.divide(complex2);
      complex7.pow(0.3779001068282551);
      complex8.equals(complex4);
      Complex complex9 = complex2.sin();
      Complex complex10 = complex9.NaN.multiply(complex2);
      complex9.toString();
      complex10.NaN.pow((-1.0488538406930105E-262));
      Complex complex11 = complex4.log();
      complex1.toString();
      Complex complex12 = complex4.divide(complex9);
      complex12.INF.reciprocal();
      complex5.acos();
      complex7.tan();
      Complex complex13 = complex6.conjugate();
      Complex complex14 = complex11.sinh();
      complex14.createComplex((-2.4642682615194644E-4), (-1.0488538406930105E-262));
      complex13.pow(complex14);
      complex13.asin();
      complex6.cosh();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-524.7685168899573));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = (Complex)complex3.I.readResolve();
      complex4.divide(complex3);
      Complex complex5 = complex1.INF.cos();
      complex5.I.atan();
      complex1.ZERO.asin();
      Complex complex6 = complex1.asin();
      complex6.I.toString();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.valueOf((-524.7685168899573));
      complex8.sin();
      Complex complex9 = complex3.pow(0.5839145257379263);
      Complex complex10 = complex9.conjugate();
      try { 
        complex10.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-2029.0));
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = new Complex((-2029.0), Double.NaN);
      complex5.abs();
      complex4.abs();
      Complex complex6 = Complex.valueOf((-2.3814619551682855E-8), 1.0);
      complex5.reciprocal();
      Complex complex7 = complex3.log();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.tan();
      Complex complex10 = complex2.subtract(complex4);
      complex3.multiply(complex9);
      Complex complex11 = complex0.divide((-1.1819540733893871E-7));
      complex1.cosh();
      Complex complex12 = Complex.valueOf(2.3472546699189522E-8, (-2203.1357540225217));
      complex12.ONE.negate();
      complex1.exp();
      complex7.add(complex9);
      complex10.tanh();
      Complex complex13 = complex11.multiply(complex3);
      complex13.readResolve();
      complex6.subtract(complex0);
      complex11.acos();
      complex1.hashCode();
      Complex.valueOf(794.26, (-1.1819540733893871E-7));
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply((-133.3350041));
      Complex complex3 = complex2.add((-133.3350041));
      Complex complex4 = complex1.tanh();
      complex3.exp();
      complex1.abs();
      Complex complex5 = Complex.valueOf(2021.5, 1.5430806348152437);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex1.log();
      Complex complex8 = complex3.tan();
      complex8.subtract(complex5);
      Complex complex9 = complex3.multiply(complex6);
      Complex complex10 = complex3.divide(1.0);
      complex4.cosh();
      Complex complex11 = Complex.valueOf(0.39893341064453125, (-133.3350041));
      complex11.exp();
      Complex complex12 = complex10.add(complex11);
      Complex complex13 = complex9.tanh();
      complex12.multiply(complex5);
      complex13.readResolve();
      complex1.subtract(complex3);
      complex11.acos();
      complex7.hashCode();
      Complex.valueOf(1.98818938195077E-8, 869.7249163);
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2275.0529509453786, (-6.824454861992054E-31));
      complex0.getField();
      Complex complex1 = complex0.subtract(2275.0529509453786);
      Complex complex2 = complex1.divide(236.7);
      complex0.readResolve();
      Complex complex3 = Complex.INF;
      complex3.INF.readResolve();
      Complex complex4 = complex3.createComplex(17, 0.6846787643425747);
      Complex complex5 = complex3.divide(complex1);
      complex5.divide((-6.824454861992054E-31));
      complex4.getReal();
      complex0.isNaN();
      complex2.pow(17.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4106.873413385);
      Complex complex1 = complex0.sin();
      complex1.I.createComplex(5116.232940056591, 4106.873413385);
      complex1.INF.subtract(4106.873413385);
      Complex complex2 = complex0.multiply(4106.873413385);
      complex2.ONE.add(4106.873413385);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.exp();
      complex4.abs();
      Complex complex5 = Complex.valueOf(2021.5, 2021.5);
      Complex complex6 = complex3.reciprocal();
      complex3.ZERO.log();
      Complex complex7 = complex5.INF.tan();
      complex3.ZERO.subtract(complex5);
      complex6.multiply(complex2);
      complex3.divide(0.0);
      complex5.cosh();
      Complex complex8 = Complex.valueOf((-984.2), 2021.5);
      complex7.log();
      complex2.conjugate();
      complex5.getArgument();
      complex8.cos();
      complex0.getArgument();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2275.0529509453786, (-6.824454861992054E-31));
      complex0.getField();
      Complex complex1 = complex0.subtract(2275.0529509453786);
      Complex complex2 = complex1.divide(236.7);
      Complex complex3 = complex2.multiply(17);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.exp();
      complex4.add(complex2);
      complex2.tanh();
      Complex complex7 = complex5.multiply(complex6);
      complex5.readResolve();
      complex5.subtract(complex3);
      Complex complex8 = Complex.I;
      complex7.hashCode();
      Complex.valueOf((-2702.906809017566), 1.2107245465244239);
      Complex complex9 = Complex.valueOf((-2.5376410971635055), 236.7);
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1.465853927556772));
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.negate();
      complex3.nthRoot(684);
      complex1.multiply(2590);
      Complex complex9 = complex6.acos();
      Complex complex10 = complex4.negate();
      complex9.asin();
      Complex complex11 = Complex.ONE;
      complex11.cosh();
      Complex complex12 = Complex.ZERO;
      complex12.sin();
      complex8.exp();
      complex11.cosh();
      complex1.pow((-2742.03));
      complex2.tanh();
      Complex complex13 = Complex.INF;
      complex13.asin();
      complex3.sqrt();
      complex12.negate();
      Complex.valueOf((-870.41872), 0.0);
      complex8.abs();
      complex10.reciprocal();
      Complex.valueOf((-3720.50248), (-2742.03));
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2029.0));
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.pow(complex2);
      complex2.sqrt();
      complex3.nthRoot(2806);
      Complex complex4 = complex1.divide((double) 2806);
      Complex complex5 = new Complex((-2029.0));
      Complex complex6 = complex5.exp();
      Complex complex7 = complex1.log();
      complex4.multiply(1457);
      complex0.getReal();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.sinh();
      complex7.atan();
      Complex complex10 = complex1.negate();
      Complex complex11 = complex4.reciprocal();
      complex6.sin();
      complex8.conjugate();
      complex10.abs();
      Complex complex12 = Complex.ZERO;
      complex9.atan();
      Complex.valueOf(290.268, 5.259099728747365E-8);
      complex12.getField();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.multiply(complex0);
      complex3.subtract(complex1);
      Complex complex4 = complex0.multiply(125);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.divide(complex3);
      complex1.multiply(complex5);
      complex4.hashCode();
      complex6.sinh();
      complex5.divide((double) 7);
      Complex complex7 = new Complex((-2.4642682615194644E-4));
      complex7.exp();
      Complex complex8 = complex7.log();
      complex8.multiply(848);
      complex2.getReal();
      Complex complex9 = complex1.sinh();
      complex7.pow((-2.4642682615194644E-4));
      Complex.valueOf(3603.8912036871);
      complex9.nthRoot(848);
      Complex complex10 = new Complex(125);
      complex10.log();
      complex0.divide((double) 848);
      complex10.isInfinite();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.negate();
      complex0.ZERO.nthRoot(1465);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.add(complex2);
      complex3.ZERO.abs();
      complex2.tanh();
      complex2.I.add(complex1);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex1.negate();
      complex0.nthRoot(684);
      complex1.multiply(1465);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex4.cosh();
      complex9.ONE.sin();
      complex8.exp();
      Complex complex10 = complex6.cosh();
      complex10.NaN.pow(0.0);
      complex10.tanh();
      complex6.asin();
      Complex complex11 = complex7.sqrt();
      complex11.negate();
      Complex complex12 = Complex.valueOf(0.0, (-870.41872));
      complex12.I.abs();
      complex11.reciprocal();
      Complex.valueOf((double) 684, 1.0);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2029.0));
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = new Complex((-2029.0), Double.NaN);
      complex5.abs();
      complex4.abs();
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = complex0.tanh();
      complex5.multiply(Double.NaN);
      complex5.abs();
      complex2.sin();
      Complex complex8 = complex6.subtract(complex2);
      complex3.createComplex((-6369.0674203), (-6369.0674203));
      Complex complex9 = complex8.tan();
      Complex complex10 = Complex.I;
      complex9.divide(complex10);
      complex7.getField();
      Complex complex11 = Complex.NaN;
      complex11.getReal();
      complex7.asin();
      complex6.conjugate();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1.465853927556772));
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex2.sqrt();
      complex2.INF.nthRoot(2590);
      Complex complex4 = complex3.divide((-1.465853927556772));
      Complex complex5 = new Complex((-1.465853927556772));
      complex5.exp();
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.multiply(740);
      complex6.getReal();
      Complex complex8 = complex7.sinh();
      complex2.atan();
      complex5.negate();
      Complex complex9 = complex1.reciprocal();
      complex0.sin();
      complex0.conjugate();
      complex3.abs();
      Complex complex10 = Complex.ZERO;
      complex9.atan();
      Complex.valueOf((-1.465853927556772), 2747.0063359);
      complex8.getField();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4106.873413385);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.createComplex(5116.232940056591, 4106.873413385);
      Complex complex3 = complex1.INF.subtract(4106.873413385);
      Complex complex4 = complex0.multiply(4106.873413385);
      Complex complex5 = complex4.ONE.add(4106.873413385);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex2.exp();
      complex0.abs();
      Complex.valueOf(1274.158, 4106.873413385);
      complex4.reciprocal();
      complex3.log();
      complex1.tan();
      Complex complex8 = complex3.subtract(complex0);
      complex8.multiply(complex6);
      Complex complex9 = complex5.divide((-17.909));
      Complex complex10 = complex1.cosh();
      Complex complex11 = Complex.valueOf(4106.873413385, (-2021.5));
      complex3.exp();
      complex9.add(complex11);
      complex0.tanh();
      complex2.multiply(complex11);
      complex7.readResolve();
      complex6.subtract(complex10);
      complex1.acos();
      complex4.hashCode();
      Complex.valueOf(0.0, (-773.728));
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2275.0529509453786, (-6.824454861992054E-31));
      complex0.getField();
      Complex complex1 = complex0.subtract(2275.0529509453786);
      Complex complex2 = complex1.divide(236.7);
      Complex complex3 = complex2.multiply(17);
      Complex complex4 = complex1.atan();
      complex4.sqrt1z();
      Complex complex5 = complex3.log();
      Complex complex6 = complex3.conjugate();
      complex5.getArgument();
      complex3.cos();
      complex6.getArgument();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-2029.0));
      Complex complex1 = Complex.NaN;
      complex1.NaN.getArgument();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex2.sqrt();
      complex2.INF.nthRoot(2590);
      complex0.divide(Double.NaN);
      Complex complex4 = complex3.multiply(1341);
      complex2.atan();
      Complex complex5 = Complex.ZERO;
      complex4.log();
      complex4.conjugate();
      complex2.getArgument();
      complex4.cos();
      complex1.getArgument();
      Complex complex6 = Complex.NaN;
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4106.873413385);
      Complex complex1 = complex0.sin();
      complex1.I.createComplex(5116.232940056591, 4106.873413385);
      complex1.INF.subtract(4106.873413385);
      Complex complex2 = complex0.multiply(4106.873413385);
      Complex complex3 = complex2.ONE.add(4106.873413385);
      complex3.add(4106.873413385);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.exp();
      complex5.abs();
      Complex complex6 = Complex.valueOf(2021.5, 2021.5);
      complex4.reciprocal();
      complex4.ZERO.log();
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex4.ZERO.subtract(complex6);
      complex1.multiply(Double.NaN);
      complex6.asin();
      complex7.nthRoot(1431655765);
      Complex complex9 = complex4.log();
      complex1.divide(0.9999965692767655);
      complex9.isInfinite();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4106.873413385);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.createComplex(5116.232940056591, 4106.873413385);
      Complex complex3 = complex1.INF.subtract(4106.873413385);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex1.sqrt();
      complex5.abs();
      Complex complex7 = Complex.valueOf(Double.NaN, 4106.873413385);
      complex7.abs();
      complex6.add(complex5);
      Complex complex8 = complex6.tanh();
      complex7.multiply(6.283185307179586);
      complex0.abs();
      Complex complex9 = Complex.valueOf(1499.514494, 85.575069495);
      complex9.sin();
      Complex complex10 = Complex.I;
      Complex complex11 = complex8.subtract(complex10);
      Complex complex12 = complex6.createComplex(4455.880642, Double.NaN);
      Complex complex13 = complex3.tan();
      complex13.asin();
      complex11.divide(complex10);
      complex12.getField();
      complex2.getReal();
      complex0.asin();
      Complex complex14 = complex5.conjugate();
      complex14.multiply(37);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2029.0));
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.NaN.cos();
      complex2.sqrt();
      Complex complex3 = complex0.I.pow(Double.NaN);
      complex0.asin();
      complex0.asin();
      Complex complex4 = complex0.pow(complex3);
      try { 
        complex4.nthRoot((-2372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,372
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4106.873413385);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.conjugate();
      complex3.tan();
      complex0.asin();
      int int0 = (-139);
      try { 
        complex1.nthRoot((-139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -139
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.createComplex(1.0004193873496718, 1.1047391891479492);
      Complex complex2 = complex0.subtract(1.1047391891479492);
      complex2.multiply((-3195.2303));
      Complex complex3 = complex0.add(1.1047391891479492);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.exp();
      complex1.abs();
      Complex complex6 = Complex.valueOf(1107.6954371, 1.1047391891479492);
      Complex complex7 = complex6.reciprocal();
      complex6.log();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.subtract(complex7);
      Complex complex10 = complex4.multiply(complex7);
      complex6.divide((-1783.009));
      complex5.cosh();
      Complex.valueOf(2021.5, 1072.07362498);
      Complex.valueOf((-3116.928));
      Complex complex11 = complex10.exp();
      complex6.add(complex11);
      Complex complex12 = complex7.tanh();
      complex2.multiply(complex8);
      complex5.readResolve();
      complex2.subtract(complex9);
      complex10.acos();
      complex10.hashCode();
      Complex.valueOf(1756.4013592639592, 2021.5);
      complex12.atan();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-2029.0));
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex2.sqrt();
      complex2.INF.nthRoot(2590);
      Complex complex4 = complex0.I.pow((-1.1197236522467887E-7));
      complex0.asin();
      Complex complex5 = complex0.asin();
      Complex complex6 = Complex.I;
      complex6.sin();
      complex0.subtract(complex5);
      complex6.createComplex((-1649.4723005800906), Double.NaN);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex2.divide(complex3);
      complex7.getField();
      Complex complex9 = Complex.valueOf((double) 2590, 530.925822967);
      complex9.getReal();
      Complex complex10 = complex4.asin();
      complex10.INF.cos();
      Complex complex11 = complex10.conjugate();
      complex11.sinh();
      complex4.multiply(8.504948422097802E-8);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = 5.6550495386976275E-9;
      Complex complex0 = new Complex(5.6550495386976275E-9);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.INF;
      complex3.conjugate();
      Complex complex4 = complex1.tan();
      complex2.multiply(5.6550495386976275E-9);
      complex4.asin();
      try { 
        complex1.nthRoot((-122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -122
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4106.873413385);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.createComplex(5116.232940056591, 4106.873413385);
      complex1.INF.subtract(4106.873413385);
      Complex complex3 = complex0.multiply(4106.873413385);
      Complex complex4 = complex3.ONE.add(4106.873413385);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.exp();
      complex6.abs();
      Complex complex7 = Complex.valueOf(2021.5, 2021.5);
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex5.ZERO.log();
      complex7.INF.tan();
      complex5.ZERO.subtract(complex7);
      Complex complex10 = complex8.multiply(complex3);
      complex5.divide(0.0);
      complex7.cosh();
      Complex complex11 = Complex.valueOf((-984.2), 2021.5);
      complex11.ONE.exp();
      Complex complex12 = complex10.add(complex6);
      Complex complex13 = complex9.tanh();
      complex13.I.multiply(complex4);
      complex7.readResolve();
      complex2.subtract(complex0);
      complex12.acos();
      complex3.hashCode();
      Complex.valueOf((-984.2), 0.0);
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.add(complex1);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-720);
      Complex complex1 = complex0.multiply((-720));
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ZERO.pow((double) (-720));
      complex3.INF.getArgument();
      Complex complex4 = Complex.valueOf((double) (-720), (-3269.012125));
      Complex complex5 = complex4.atan();
      complex5.INF.getArgument();
      double double0 = 0.0;
      Complex complex6 = complex2.ONE.createComplex(0.0, 0.0);
      complex6.ONE.abs();
      complex0.isInfinite();
      try { 
        complex2.ONE.nthRoot((-2999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,999
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = (-4281.1);
      Complex complex0 = new Complex((-4281.1));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.I.divide(complex3);
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex5.NaN.createComplex((-4281.1), (-4281.1));
      complex6.INF.readResolve();
      Complex complex7 = complex0.ZERO.multiply(0.0);
      complex7.I.acos();
      Complex complex8 = complex2.ONE.acos();
      complex4.NaN.acos();
      try { 
        complex8.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.multiply((-658));
      complex0.getImaginary();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ZERO.negate();
      Complex.valueOf(Double.NaN);
      Complex complex5 = complex3.exp();
      complex3.ONE.multiply((-658));
      Complex complex6 = complex4.ZERO.negate();
      complex6.multiply(complex4);
      complex2.ZERO.multiply((double) (-658));
      Complex complex7 = complex3.log();
      complex7.sinh();
      complex0.isNaN();
      complex1.cosh();
      complex7.INF.reciprocal();
      complex7.getReal();
      complex7.isInfinite();
      complex2.add((-1543.91589309));
      complex4.subtract((double) (-658));
      Complex complex8 = complex5.acos();
      Complex complex9 = Complex.valueOf((double) (-658));
      Complex complex10 = complex8.exp();
      Complex.valueOf(0.0, 4.8935021740786486E-8);
      Complex complex11 = complex10.createComplex(Double.NaN, 0.0);
      complex11.multiply((-4566.233));
      complex1.pow(complex11);
      complex2.getImaginary();
      complex9.multiply(3.8603349913851996E-97);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-2029.0));
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.NaN.cos();
      complex2.sqrt();
      complex2.INF.nthRoot(2590);
      Complex complex3 = complex0.I.pow((-1.1197236522467887E-7));
      complex0.asin();
      complex0.asin();
      Complex complex4 = complex0.pow(complex3);
      complex4.ONE.toString();
      Complex.valueOf(Double.NaN);
      try { 
        complex4.nthRoot((-2372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,372
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.valueOf(1727.6102821087575);
      Complex complex5 = complex4.exp();
      complex0.ZERO.subtract(complex1);
      Complex.valueOf(1727.6102821087575, 0.0);
      complex1.equals(complex4);
      complex4.multiply(complex0);
      Complex complex6 = Complex.valueOf((-1569.855));
      complex4.getReal();
      complex2.getField();
      Complex complex7 = complex2.conjugate();
      complex7.sinh();
      complex1.INF.pow(1727.6102821087575);
      Complex.valueOf((-1875.9), (-1.0));
      Object object0 = new Object();
      complex5.multiply(111);
      complex7.equals(object0);
      complex6.exp();
      complex0.abs();
      complex2.INF.getField();
      complex3.log();
      complex5.cosh();
      complex2.isNaN();
      complex3.hashCode();
      complex5.exp();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.conjugate();
      Complex complex1 = complex0.atan();
      complex0.I.multiply(20.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex4.ONE.subtract(complex1);
      complex3.NaN.toString();
      complex3.NaN.hashCode();
      complex3.I.add(5.8759898326913254E166);
      Complex complex6 = complex2.NaN.pow(20.0);
      Complex complex7 = complex3.reciprocal();
      complex2.isInfinite();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.log();
      complex4.pow(complex9);
      complex5.tanh();
      complex9.exp();
      complex1.hashCode();
      complex6.isNaN();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      complex0.pow((-3750.5523186352));
      complex1.ONE.sin();
      Complex complex3 = complex2.pow(0.0);
      complex3.NaN.conjugate();
      complex3.sqrt();
      complex0.log();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = Double.NaN;
      double double1 = 0.0;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = new Complex(Double.NaN, 0.0);
      Complex complex3 = complex0.pow(complex2);
      complex3.I.cosh();
      int int0 = (-2589);
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex4.ONE.multiply((-2589));
      complex5.ONE.exp();
      complex5.I.sqrt();
      try { 
        complex0.nthRoot((-2589));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,589
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.tanh();
      complex0.equals(complex1);
      complex3.add(complex0);
      complex1.I.getArgument();
      Complex complex4 = Complex.valueOf((-1665.342), 0.0);
      Complex complex5 = complex2.add(complex1);
      Complex complex6 = complex5.ONE.acos();
      complex5.atan();
      complex6.ONE.createComplex(0.0, (-29.2047));
      complex5.ONE.getArgument();
      complex5.NaN.abs();
      complex2.isInfinite();
      Complex complex7 = complex4.add(0.0);
      complex0.getImaginary();
      complex0.ONE.nthRoot(643);
      Complex complex8 = complex7.multiply(643);
      Complex complex9 = complex7.subtract(0.0);
      Complex complex10 = complex8.INF.negate();
      complex9.tanh();
      Complex.valueOf(0.0, 6.283185307179586);
      complex7.readResolve();
      complex7.multiply(complex4);
      Complex complex11 = complex3.acos();
      complex11.INF.cos();
      complex8.getField();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt1z();
      complex0.isInfinite();
      complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.toString();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1829.603);
      Complex complex1 = complex0.subtract(1829.603);
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex2.ONE.multiply(0);
      complex1.ONE.getArgument();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.INF.add(1829.603);
      complex4.toString();
      complex5.conjugate();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.ONE.negate();
      complex3.multiply((-1777));
      complex3.isInfinite();
      complex5.pow(complex9);
      complex7.add(complex0);
      Complex complex10 = complex3.sqrt1z();
      complex10.conjugate();
      complex2.acos();
      Complex complex11 = complex0.tan();
      Complex.valueOf(0.5679514408111572, 1829.603);
      complex11.sqrt();
      complex6.tanh();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      complex0.INF.exp();
      complex0.toString();
      Complex complex2 = complex1.divide(complex0);
      ComplexField complexField0 = complex0.getField();
      complex1.equals(complexField0);
      Complex complex3 = complex1.asin();
      complex3.toString();
      complex0.nthRoot(127);
      complex0.nthRoot(1156);
      complex3.getReal();
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2275.0529509453786, (-6.824454861992054E-31));
      complex0.I.atan();
      Complex.valueOf((-6.824454861992054E-31));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ZERO.multiply(1);
      complex0.INF.getField();
      Complex complex3 = complex2.acos();
      complex3.ONE.subtract(298.88842925);
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex4.NaN.multiply(complex0);
      complex5.NaN.readResolve();
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = complex6.ONE.sin();
      complex7.ONE.subtract((-6.824454861992054E-31));
      complex0.createComplex((-6.824454861992054E-31), (-869.64089792772));
      Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.0, 1625.266702298);
      Complex complex3 = complex0.I.multiply(complex2);
      complex3.sqrt1z();
      complex3.NaN.subtract(1.0);
      Complex complex4 = complex1.add(0.0);
      complex4.multiply(0.0);
      complex2.ZERO.exp();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.ZERO.multiply(complex1);
      complex6.asin();
      complex6.I.hashCode();
      Complex complex7 = complex2.ZERO.sqrt();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.I.pow(complex3);
      complex9.I.getArgument();
      complex3.getImaginary();
      Complex complex10 = complex4.sinh();
      Complex complex11 = complex10.NaN.multiply(1999);
      complex7.INF.readResolve();
      Complex complex12 = complex2.INF.negate();
      complex12.I.asin();
      complex1.getField();
      Complex.valueOf(1625.266702298);
      Complex complex13 = complex7.log();
      Complex complex14 = complex13.pow(complex1);
      Complex complex15 = new Complex(0.0);
      complex14.multiply(complex15);
      complex11.divide(Double.POSITIVE_INFINITY);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ONE.asin();
      complex2.I.hashCode();
      Complex complex4 = complex0.NaN.pow(complex2);
      complex4.NaN.pow(2137.67959251329);
      complex1.getArgument();
      Complex complex5 = complex0.ZERO.divide(0.0);
      Complex complex6 = complex5.I.add(Double.NaN);
      complex5.INF.abs();
      complex1.readResolve();
      Complex complex7 = complex0.add(Double.NaN);
      Complex complex8 = complex0.ZERO.pow(complex6);
      complex8.multiply(0.0);
      complex8.NaN.negate();
      complex0.I.add(0.0);
      complex7.NaN.exp();
      complex4.equals(complex6);
      complex0.toString();
      Complex complex9 = complex3.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex10 = complex1.add(complex2);
      complex7.hashCode();
      complex10.isInfinite();
      complex3.isInfinite();
      complex9.add(complex7);
      Complex.valueOf(1.0973020465397083E-7, (-758.497135));
      Complex.valueOf(0.0);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex1.ONE.subtract(2.0623086887184633E-280);
      complex3.I.conjugate();
      complex3.NaN.tanh();
      complex0.toString();
      Complex complex4 = Complex.valueOf((-1472.465), (-1472.465));
      Complex complex5 = complex4.NaN.add(complex2);
      Complex complex6 = complex4.divide((-1185.2));
      complex6.INF.getArgument();
      complex5.getReal();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex.valueOf((-3170.421578354));
      Complex complex2 = complex0.INF.multiply((-5.848862070736576E-9));
      Complex.valueOf((-3439.37));
      complex1.isNaN();
      complex0.cosh();
      Complex complex3 = complex1.conjugate();
      complex3.multiply(1426.823);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-1360.996816));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.valueOf((-1360.996816));
      Complex.valueOf((double) 2067);
      complex2.pow(complex1);
      Complex complex3 = complex2.ONE.add((double) 2067);
      Complex complex4 = complex0.INF.multiply(2067);
      Complex complex5 = complex4.NaN.multiply((-1360.996816));
      complex0.I.abs();
      complex5.sinh();
      Complex complex6 = complex5.multiply(2067);
      complex6.NaN.getField();
      complex0.readResolve();
      Complex complex7 = complex0.pow((double) 2067);
      Complex complex8 = complex7.NaN.log();
      complex8.INF.log();
      complex7.NaN.multiply(2067);
      Complex complex9 = complex7.INF.pow(complex4);
      complex4.ZERO.hashCode();
      complex7.ONE.toString();
      Complex complex10 = complex1.INF.cos();
      complex7.ZERO.multiply(2067);
      Complex complex11 = complex5.sin();
      Complex complex12 = complex11.ONE.asin();
      complex7.conjugate();
      complex1.getArgument();
      complex10.isInfinite();
      Complex.valueOf((-698.374589));
      complex5.ONE.multiply(complex3);
      complex11.createComplex(2067, 98.13740477537);
      complex12.add(complex8);
      complex3.pow(complex0);
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      complex0.toString();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.tanh();
      complex1.NaN.acos();
      complex0.divide(complex1);
      complex0.getImaginary();
      complex1.hashCode();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-524.7685168899573));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.I.atan();
      complex3.I.readResolve();
      Complex complex4 = complex1.INF.cos();
      complex4.I.atan();
      Complex complex5 = complex1.ZERO.asin();
      complex1.asin();
      Complex complex6 = complex5.ZERO.asin();
      complex5.I.getArgument();
      Complex complex7 = complex1.INF.asin();
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex1.atan();
      complex9.negate();
      complex7.ONE.subtract(1.5707963267948966);
      complex1.ZERO.readResolve();
      complex0.getArgument();
      Complex complex10 = complex0.add(complex7);
      complex7.hashCode();
      complex10.reciprocal();
      Complex complex11 = Complex.valueOf(1286.24418);
      complex0.add(complex11);
      Complex complex12 = Complex.valueOf(1.5707963267948966);
      complex7.multiply(complex6);
      complex12.conjugate();
      complex12.conjugate();
      complex8.abs();
      complex7.divide(complex1);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(955.540762956, (-302.11325893846));
      complex0.ZERO.subtract(0.0);
      complex0.ONE.hashCode();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.ONE.subtract(0.0);
      complex3.ONE.add(complex1);
      complex2.ZERO.hashCode();
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = Complex.valueOf((-302.11325893846), 0.0);
      complex2.INF.getArgument();
      complex0.sqrt1z();
      Complex.valueOf(733.0);
      complex2.getField();
      Complex complex5 = complex4.asin();
      complex3.tanh();
      complex5.nthRoot(800);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex1.cos();
      complex4.I.readResolve();
      complex3.createComplex(0.0, 0.0);
      Complex complex5 = complex0.divide(complex4);
      complex5.INF.divide(1.0);
      complex1.getReal();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.ZERO.divide(0.0);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex2.createComplex(0.0, 0.0);
      complex2.multiply(complex3);
      Complex.valueOf(507.50010782433, 1693.15873);
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex1.multiply(complex0);
      complex7.NaN.sinh();
      Complex complex8 = complex7.INF.multiply(complex4);
      complex7.NaN.sqrt();
      complex6.conjugate();
      complex8.nthRoot(1748);
      complex6.pow(0.0);
      try { 
        complex3.nthRoot((-709));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -709
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.tanh();
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = Complex.valueOf(2.0, 615.76177);
      Complex complex3 = complex1.INF.pow(complex2);
      complex3.ZERO.atan();
      complex1.ONE.toString();
      complex0.I.tanh();
      complex0.NaN.conjugate();
      Complex complex4 = complex0.multiply(0.0);
      complex4.add((-709.5));
      complex0.sinh();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.pow(1.0);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex1.NaN.atan();
      complex3.NaN.multiply(complex2);
      complex0.getField();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(5.6550495386976275E-9);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = Complex.valueOf(5.6550495386976275E-9);
      Complex complex3 = complex0.tanh();
      complex1.I.pow(complex2);
      Complex complex4 = complex1.INF.sqrt();
      complex0.abs();
      complex3.abs();
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex6.NaN.multiply(5.6550495386976275E-9);
      complex7.I.abs();
      complex6.ONE.sin();
      Complex complex8 = complex3.subtract(complex0);
      complex0.NaN.createComplex(873.63606, 5.6550495386976275E-9);
      Complex complex9 = complex8.I.tan();
      complex9.INF.divide(complex4);
      complex6.getField();
      complex6.getReal();
      complex5.asin();
      complex1.conjugate();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.pow(0.0);
      complex1.I.sinh();
      complex1.toString();
      complex0.hashCode();
      Complex complex2 = complex0.I.conjugate();
      complex0.nthRoot(1);
      complex2.getReal();
      complex0.abs();
      complex2.ZERO.subtract((-1523.2659));
      Complex.valueOf(2886.467031774, Double.NaN);
      complex0.INF.cos();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ONE.add(complex1);
      Complex complex5 = complex3.subtract(Double.NaN);
      Complex complex6 = complex2.I.divide(2184.14498039);
      complex2.ZERO.hashCode();
      complex6.ZERO.nthRoot(1);
      Complex complex7 = complex5.ONE.asin();
      complex7.ZERO.exp();
      complex4.multiply(1);
      complex4.ONE.pow(0.0);
      complex4.I.acos();
      Complex complex8 = complex2.sqrt();
      complex4.negate();
      Complex complex9 = complex8.pow(complex6);
      complex9.divide(0.0);
      complex3.createComplex(2311.2892, 1925.9808043705);
      complex0.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.divide(complex1);
      complex2.ZERO.tanh();
      Complex complex3 = complex2.NaN.sqrt();
      complex2.ZERO.getArgument();
      complex0.isInfinite();
      Complex complex4 = complex0.I.subtract((-20.0));
      complex2.readResolve();
      complex1.conjugate();
      complex1.acos();
      complex3.nthRoot(1297);
      Complex complex5 = complex2.negate();
      complex5.sin();
      complex5.I.createComplex(610.72378, 0.0);
      complex5.I.multiply(731);
      complex0.add((double) 1297);
      complex2.divide(0.0);
      complex3.pow(complex1);
      complex4.getArgument();
      Complex complex6 = complex2.add(2.189226237170704E-9);
      complex0.I.sin();
      complex5.pow(30.36600554);
      complex0.log();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ZERO.log();
      complex1.ONE.getArgument();
      complex0.nthRoot(2687);
      complex0.abs();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.sinh();
      complex4.I.readResolve();
      Complex complex5 = complex0.ONE.subtract(complex3);
      Complex complex6 = complex2.conjugate();
      complex0.ZERO.readResolve();
      complex1.multiply(0.0);
      Complex complex7 = complex1.pow((-3435.1800136));
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = complex8.INF.sin();
      complex0.NaN.nthRoot(2687);
      Complex complex11 = complex5.sqrt1z();
      complex6.sqrt();
      complex2.cosh();
      complex4.divide(Double.NaN);
      complex11.divide(complex7);
      complex9.hashCode();
      complex4.getField();
      complex5.divide(complex10);
      Complex.valueOf(2179.0, (-1936.7));
      complex7.sqrt1z();
      complex1.sinh();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex1.INF.asin();
      complex0.I.pow(complex1);
      int int0 = (-796);
      Complex complex4 = complex3.NaN.multiply((-796));
      complex4.I.getArgument();
      complex3.ZERO.multiply(0.0);
      complex2.I.divide(complex0);
      try { 
        complex3.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cos();
      complex0.ONE.getField();
      Complex complex2 = complex0.INF.subtract(0.0);
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.NaN.multiply(1118);
      complex1.ZERO.atan();
      complex0.sqrt1z();
      complex3.log();
      complex1.conjugate();
      complex3.getArgument();
      complex3.cos();
      complex0.getArgument();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.I.readResolve();
      complex0.INF.divide(complex1);
      Complex complex2 = Complex.valueOf((-1639.67496));
      Complex complex3 = complex1.add(6.243669516810509E102);
      complex3.NaN.add(1.7396889119023863E293);
      complex0.abs();
      Complex complex4 = complex3.add(1.0);
      Complex complex5 = Complex.valueOf(9.699937202692456E-8);
      complex5.ZERO.acos();
      complex1.I.multiply(6.243669516810509E102);
      complex2.ONE.acos();
      complex1.NaN.getArgument();
      complex2.isInfinite();
      Complex complex6 = complex4.sinh();
      complex4.ONE.asin();
      complex6.tan();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.ONE.conjugate();
      complex3.tan();
      Complex complex5 = complex2.INF.multiply((double) 753);
      complex5.INF.asin();
      complex0.nthRoot(753);
      complex2.log();
      complex4.divide((double) 753);
      complex5.isInfinite();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ZERO.subtract(complex2);
      Complex complex5 = complex3.multiply(7);
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.ONE.divide(complex5);
      Complex complex8 = complex6.NaN.multiply(complex3);
      complex8.ZERO.hashCode();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex6.divide((double) 7);
      Complex complex11 = complex9.exp();
      complex8.NaN.log();
      Complex complex12 = complex9.NaN.multiply(848);
      complex10.getReal();
      complex11.sinh();
      Complex complex13 = complex8.pow(1.397885799407959);
      Complex complex14 = complex0.atan();
      Complex complex15 = complex14.INF.negate();
      assertEquals(Double.NEGATIVE_INFINITY, complex15.getImaginary(), 0.01);
      assertTrue(complex15.isInfinite());
      
      Complex complex16 = complex0.reciprocal();
      Complex complex17 = complex16.I.sin();
      assertEquals(1.1752011936438014, complex17.getImaginary(), 0.01);
      assertSame(complex16, complex7);
      
      Complex complex18 = complex11.conjugate();
      double double0 = complex18.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex19 = complex6.sqrt1z();
      assertSame(complex19, complex13);
      
      Complex complex20 = complex12.atan();
      assertSame(complex20, complex10);
      
      Complex complex21 = Complex.valueOf(2747.0063359, Double.NaN);
      assertSame(complex21, complex14);
      
      complex6.getField();
      double double1 = complex18.getImaginary();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(-0.0, double1, 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.3087568535221258, complex18.getReal(), 0.01);
  }
}
