/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:01:55 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = 2.579867270991543E291;
      Complex complex0 = Complex.valueOf((-529.3463059753242), 2.579867270991543E291);
      Complex complex1 = complex0.I.multiply((-384));
      Complex complex2 = complex0.asin();
      complex2.multiply((-384));
      complex0.getField();
      Complex complex3 = complex1.divide(complex0);
      complex0.INF.add(complex3);
      Complex complex4 = complex0.sqrt();
      try { 
        complex4.nthRoot((-384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -384
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      Complex complex2 = complex1.conjugate();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.sqrt();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.createComplex((-20.0), (-20.0));
      complex3.tan();
      Complex complex4 = Complex.ONE;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3777.941545986822, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.multiply((-1371.1150683039));
      Complex complex3 = complex2.subtract(complex0);
      complex1.ONE.conjugate();
      Complex complex4 = complex0.add(complex1);
      complex4.NaN.createComplex(0.23065607194134152, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.divide((-1371.1150683039));
      complex5.divide(complex1);
      complex5.getArgument();
      Complex complex6 = complex0.cos();
      complex6.INF.tanh();
      Complex complex7 = complex6.INF.add((-1371.1150683039));
      Complex complex8 = complex5.multiply((-1371.1150683039));
      Complex complex9 = complex8.ZERO.tanh();
      complex9.I.sqrt();
      complex7.NaN.pow(0.23065607194134152);
      Complex.valueOf((-4788.96051));
      Complex complex10 = complex8.I.exp();
      complex10.INF.divide((-1.5707963267948966));
      complex5.toString();
      complex3.ONE.getArgument();
      complex8.readResolve();
      complex10.pow(complex4);
      complex3.cosh();
      complex0.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = new Complex(1.0157402);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = new Complex((-20.0), 0.0);
      complex2.tanh();
      Complex complex6 = complex4.multiply((-2057));
      complex6.asin();
      complex2.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.add(1.1247213964487372E264);
      complex0.multiply(complex0);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(382.1104224599611, Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      complex1.I.sqrt1z();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      Complex complex4 = complex3.tan();
      complex4.NaN.subtract(20.0);
      Complex complex5 = Complex.valueOf(20.0);
      Complex.valueOf(0.0);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.sqrt();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-1825.16));
      complex0.I.divide(Double.POSITIVE_INFINITY);
      complex0.nthRoot(2065);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-541.523));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.acos();
      complex1.INF.abs();
      Complex complex6 = complex0.sinh();
      complex1.acos();
      Complex.valueOf(4384.053399385216);
      Complex.valueOf((-541.523));
      Complex complex7 = new Complex(1127.9287, 0.3594330038102771);
      complex5.sinh();
      complex6.tanh();
      complex4.sqrt();
      Complex complex8 = Complex.INF;
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 11.645848027885563;
      Complex complex1 = Complex.valueOf(11.645848027885563);
      try { 
        complex1.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.NaN.divide(complex0);
      Complex complex2 = new Complex(20.0, 20.0);
      Complex complex3 = complex2.tanh();
      complex2.multiply((-2041));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(11.645848027885563);
      Complex.valueOf(11.645848027885563);
      Complex complex2 = new Complex(2.0, Double.NaN);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex0 = new Complex(1431.562042, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-1532.6262));
      Complex complex2 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.pow(4.1905679587096103E-8);
      complex0.NaN.divide(complex1);
      complex0.ZERO.multiply(Double.NaN);
      complex0.multiply(1674.162231110964);
      complex2.sqrt1z();
      Complex complex3 = Complex.ONE;
      complex2.createComplex(4.1905679587096103E-8, 1674.162231110964);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.841563119484623E171, 9.841563119484623E171);
      complex0.NaN.hashCode();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.pow(complex1);
      complex2.INF.hashCode();
      complex0.nthRoot(409);
      Complex complex3 = complex1.INF.subtract((double) 409);
      complex0.NaN.nthRoot(409);
      Complex complex4 = complex2.pow(complex1);
      complex1.multiply(complex2);
      Complex.valueOf(0.0);
      complex2.isInfinite();
      complex1.toString();
      Complex complex5 = complex4.divide(9.841563119484623E171);
      complex2.multiply(9.841563119484623E171);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex2.add(complex6);
      complex7.INF.hashCode();
      Complex complex8 = complex5.NaN.tan();
      complex1.multiply(0.0);
      Complex complex9 = complex2.multiply(9.841563119484623E171);
      Complex complex10 = complex3.atan();
      complex5.hashCode();
      Complex complex11 = complex5.atan();
      complex10.conjugate();
      Complex complex12 = complex8.subtract(9.841563119484623E171);
      complex9.divide(complex11);
      complex12.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.reciprocal();
      complex3.ZERO.toString();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.INF.negate();
      complex5.INF.multiply(1.828536033630371);
      complex0.cos();
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.tanh();
      complex1.nthRoot(1731);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 0.6379399299621582);
      complex2.pow(814.3460613343334);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, (-728.5052099462865));
      Complex complex2 = complex1.sinh();
      complex2.ZERO.abs();
      Complex complex3 = complex0.multiply(3505);
      Complex complex4 = complex3.add((-728.5052099462865));
      complex3.NaN.multiply(3505);
      complex4.tan();
      complex0.INF.sin();
      complex1.ZERO.cosh();
      Complex.valueOf(1394.41797714);
      complex4.ONE.getArgument();
      Complex complex5 = complex3.I.cosh();
      complex5.ZERO.getArgument();
      complex2.getField();
      complex0.equals(complex1);
      complex1.reciprocal();
      complex1.getImaginary();
      complex0.isNaN();
      complex5.reciprocal();
      complex3.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(complex2);
      complex3.cosh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex4.acos();
      Complex.valueOf(11.645848027885563);
      Complex complex7 = new Complex(11.645848027885563, 11.645848027885563);
      Complex complex8 = Complex.valueOf(0.38109784554181547, 0.0);
      Complex complex9 = complex3.add(complex5);
      complex8.readResolve();
      Object object0 = complex9.readResolve();
      complex6.equals(object0);
      complex5.reciprocal();
      complex2.multiply(11.645848027885563);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-477.13884924), 1994.735677);
      Complex complex1 = complex0.multiply(2462.2370311305);
      Complex complex2 = complex0.acos();
      complex1.pow(complex0);
      complex2.getField();
      complex2.createComplex((-477.13884924), 20.0);
      complex2.toString();
      Complex complex3 = new Complex(2803262.5913526695, (-1097.408961818299));
      complex3.add(complex0);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.multiply(0.0);
      complex2.ONE.acos();
      complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(6.283185307179586);
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex2.divide((-3719.5836020464));
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex4.tanh();
      Complex.valueOf((-1060.1112107888696), 20.0);
      complex4.multiply(37);
      complex6.toString();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-728.5052099462865));
      complex0.toString();
      Complex complex2 = complex0.createComplex((-728.5052099462865), 1.0303966192973381E-205);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = new Complex((-1825.16));
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex3.pow(complex1);
      Complex.valueOf((-1391.8767), (-20.0));
      complex7.getField();
      complex8.createComplex((-1825.16), 0.0);
      complex7.toString();
      complex6.add(complex2);
      complex5.negate();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-777.075077));
      Complex complex1 = Complex.valueOf((-3716.341719691), (-3716.341719691));
      complex1.toString();
      complex0.getField();
      complex0.readResolve();
      complex1.pow(1657.93);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(907.504108488189);
      complex1.multiply(4272.590176520392);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.tanh();
      complex3.tan();
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(20.0);
      Complex complex2 = complex0.divide(complex1);
      complex2.readResolve();
      complex2.multiply(0.0);
      complex0.sqrt1z();
      complex0.getImaginary();
      complex1.divide(complex0);
      complex2.getReal();
      Complex complex3 = new Complex(2281.813837);
      complex3.sinh();
      Complex complex4 = Complex.ZERO;
      complex4.multiply((-2136));
      Complex complex5 = Complex.ZERO;
      complex0.multiply(complex2);
      Complex complex6 = Complex.ONE;
      complex6.abs();
      Complex complex7 = Complex.NaN;
      complex4.subtract(Double.NaN);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.pow(4.1905679587096103E-8);
      Complex complex3 = complex0.NaN.divide(complex1);
      complex0.multiply(1674.162231110964);
      Complex complex4 = Complex.NaN;
      complex4.getImaginary();
      Complex complex5 = complex2.divide(complex3);
      complex4.getReal();
      complex3.multiply(1507);
      complex2.nthRoot(1507);
      complex5.asin();
      Complex.valueOf(4.1905679587096103E-8, (double) 37);
      Complex.valueOf(Double.NaN, 313.564875935601);
      complex1.multiply(1507);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.pow(4.1905679587096103E-8);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = (Complex)complex2.INF.readResolve();
      Complex complex5 = complex0.multiply(1674.162231110964);
      Complex complex6 = Complex.NaN;
      complex6.getImaginary();
      Complex complex7 = complex4.divide(complex3);
      complex6.getReal();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex3.multiply(1507);
      complex2.nthRoot(1507);
      complex7.asin();
      Complex complex10 = Complex.valueOf(4.1905679587096103E-8, (double) 37);
      Complex complex11 = Complex.valueOf((double) 1507);
      complex9.sinh();
      complex10.divide(Double.NaN);
      complex11.tanh();
      complex5.sqrt();
      Complex complex12 = complex0.multiply(20.0);
      complex9.readResolve();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex13.sqrt1z();
      complex12.tan();
      complex14.add(complex8);
      Complex complex15 = Complex.INF;
      complex3.equals(complex2);
      complex0.atan();
      complex14.log();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      complex0.INF.negate();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex1.getReal();
      complex1.sinh();
      Complex complex3 = complex0.multiply(1507);
      Complex complex4 = Complex.ZERO;
      complex1.multiply(complex2);
      complex3.abs();
      Complex complex5 = Complex.NaN;
      complex4.subtract(3.00259722187927E-202);
      complex3.cos();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.075077), (-777.075077));
      Complex complex1 = complex0.INF.divide((-3716.341719691));
      complex0.ONE.subtract(complex1);
      complex0.subtract((-1071.63339347048));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      complex0.nthRoot(2041);
      complex1.isNaN();
      complex0.divide(complex1);
      complex0.INF.multiply((double) 2041);
      Complex complex2 = complex0.log();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.tan();
      complex0.multiply(complex1);
      Complex complex4 = complex3.subtract(0.0);
      complex4.ONE.getArgument();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex2.NaN.sqrt1z();
      complex4.INF.nthRoot(1317);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = Complex.I;
      complex3.equals(complex6);
      complex3.subtract(complex2);
      Complex complex7 = Complex.valueOf((-1467.6754218341148));
      Complex complex8 = Complex.valueOf((double) 1317, 0.2873004975600133);
      complex2.divide((double) 1317);
      complex5.tanh();
      Complex complex9 = complex5.sin();
      complex2.conjugate();
      complex7.isInfinite();
      complex6.exp();
      complex3.readResolve();
      complex4.cos();
      complex6.negate();
      complex9.atan();
      complex7.multiply(2.338504554475615E-6);
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(879.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt1z();
      complex0.getImaginary();
      Complex complex3 = complex1.divide(complex2);
      complex2.getReal();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf((-5.422734194929351E-4));
      Complex complex6 = complex5.multiply(1507);
      complex0.nthRoot(1487);
      complex4.asin();
      complex1.exp();
      Complex complex7 = Complex.valueOf(1.1671272667059652E211, (-2.1275002921718894E-6));
      Complex complex8 = complex6.atan();
      complex8.getField();
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex0.sin();
      complex10.subtract((double) 37);
      complex0.getField();
      complex3.equals("out of bounds significance level {0}, must be between {1} and {2}");
      Complex complex11 = Complex.valueOf(0.0, 6.582528756725438E-8);
      complex11.reciprocal();
      complex9.getImaginary();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.divide(complex1);
      complex0.multiply(1674.162231110964);
      complex2.createComplex(4.1905679587096103E-8, (-1423.33));
      complex0.hashCode();
      Complex complex3 = complex1.multiply(Double.NaN);
      complex3.isNaN();
      complex1.tanh();
      complex0.multiply(7);
      complex2.toString();
      complex1.getField();
      complex3.abs();
      complex1.createComplex((-1423.33), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.pow(4.1905679587096103E-8);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = (Complex)complex2.INF.readResolve();
      Complex complex5 = complex0.multiply(1674.162231110964);
      Complex complex6 = complex2.sqrt1z();
      complex6.getImaginary();
      Complex complex7 = complex4.divide(complex3);
      complex6.getReal();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex3.multiply(1507);
      complex2.nthRoot(1507);
      complex7.asin();
      Complex complex10 = Complex.valueOf(4.1905679587096103E-8, (double) 37);
      Complex complex11 = complex2.atan();
      complex4.getField();
      complex11.cosh();
      Complex complex12 = complex10.sin();
      Complex complex13 = complex0.subtract(1674.162231110964);
      complex9.sinh();
      complex9.readResolve();
      complex12.tan();
      complex10.negate();
      complex1.log();
      complex4.asin();
      complex11.getImaginary();
      complex13.abs();
      complex8.createComplex(4.1905679587096103E-8, (-1316.122));
      complex10.tan();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(683.45);
      Complex complex2 = Complex.valueOf(683.45);
      Complex complex3 = complex2.divide(complex1);
      complex1.readResolve();
      Complex complex4 = complex1.multiply((-777.075077));
      Complex complex5 = complex1.sqrt1z();
      complex0.getImaginary();
      Complex complex6 = complex4.divide(complex3);
      complex1.getReal();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex0.multiply(1507);
      complex4.nthRoot(1507);
      complex0.asin();
      Complex complex9 = Complex.valueOf(683.45, Double.NaN);
      Complex complex10 = complex8.atan();
      complex10.getField();
      Complex complex11 = complex5.cosh();
      complex7.sin();
      Complex complex12 = complex9.subtract(0.0);
      complex5.sinh();
      complex11.readResolve();
      Complex complex13 = complex4.tan();
      complex4.negate();
      complex6.log();
      complex8.asin();
      Complex complex14 = Complex.ZERO;
      complex14.getImaginary();
      complex6.abs();
      Complex complex15 = complex12.createComplex(0.0, (-1316.122));
      complex15.I.atan();
      complex13.tan();
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = 0.8761597860397947;
      Complex complex0 = Complex.valueOf(0.8761597860397947, 0.8761597860397947);
      complex0.ZERO.negate();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = complex0.multiply(0.5573811531066895);
      complex1.ZERO.cosh();
      Complex complex2 = complex0.multiply(818);
      complex0.equals(complex2);
      complex2.ZERO.cosh();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex2.add((-54.8345211923833));
      complex5.ZERO.exp();
      complex5.ONE.add(Double.NaN);
      Complex complex6 = complex1.add(complex4);
      complex6.I.multiply(2146220555);
      complex0.INF.acos();
      try { 
        complex3.INF.nthRoot((-158));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -158
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex2.NaN.sqrt1z();
      complex4.INF.nthRoot(1317);
      complex1.I.reciprocal();
      complex1.equals(complex0);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = Complex.valueOf((-1467.6754218341148));
      Complex.valueOf(271.0065804, 0.2873004975600133);
      complex0.divide((-2536.265863));
      complex6.tanh();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.ZERO.conjugate();
      complex3.isInfinite();
      complex0.exp();
      complex8.readResolve();
      complex8.cos();
      Complex complex9 = complex3.negate();
      complex9.atan();
      complex5.multiply((-1.0));
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.pow(4.1905679587096103E-8);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = (Complex)complex2.INF.readResolve();
      Complex complex5 = complex0.multiply(1674.162231110964);
      Complex complex6 = complex2.sqrt1z();
      complex6.getImaginary();
      Complex complex7 = complex4.divide(complex3);
      complex6.getReal();
      complex5.sinh();
      Complex complex8 = complex3.multiply(1507);
      complex2.nthRoot(1507);
      Complex complex9 = complex7.asin();
      complex9.ZERO.exp();
      Complex complex10 = Complex.valueOf(4.1905679587096103E-8, (double) 37);
      Complex complex11 = complex2.atan();
      complex4.getField();
      complex11.cosh();
      Complex complex12 = complex10.sin();
      Complex complex13 = complex0.subtract(1674.162231110964);
      complex12.getField();
      complex0.equals(complex7);
      complex13.reciprocal();
      complex8.getImaginary();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1699.178716898354, 1699.178716898354);
      Complex complex1 = complex0.cos();
      complex0.abs();
      Complex complex2 = complex1.add(2403.001586333366);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(2144.03938892279, 2144.03938892279);
      complex0.getImaginary();
      complex0.toString();
      Complex complex1 = complex0.createComplex(0.9999999999999978, (-267.5688044005));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.pow(complex2);
      complex2.divide(complex3);
      Complex complex4 = complex1.acos();
      complex0.sinh();
      Complex complex5 = complex3.tan();
      complex4.acos();
      Complex.valueOf((-267.5688044005));
      complex4.sinh();
      Complex complex6 = complex5.divide(0.9999999999999978);
      complex6.sinh();
      complex3.tanh();
      Complex complex7 = complex2.sqrt();
      complex1.multiply(0.9999999999999978);
      complex5.readResolve();
      Complex.valueOf(0.9999999999999978, (-633.4));
      complex7.sqrt1z();
      complex7.tan();
      Complex complex8 = new Complex(2144.03938892279, 2600.126038);
      complex0.reciprocal();
      Complex complex9 = Complex.valueOf(1615.0091274213796, 2144.03938892279);
      complex9.sqrt1z();
      complex5.add(2109.8832513216);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-728.5052099462865), 88.18131301);
      Complex complex2 = complex1.sinh();
      complex0.abs();
      Complex complex3 = complex1.sin();
      complex2.cosh();
      Complex.valueOf(1.0);
      complex1.getField();
      Object object0 = new Object();
      complex3.equals(object0);
      complex1.reciprocal();
      complex2.getImaginary();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-728.5052099462865));
      complex0.toString();
      Complex complex1 = complex0.createComplex((-728.5052099462865), 1.0303966192973381E-205);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex((-1825.16));
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex7.acos();
      Complex.valueOf(2.1424166787650852E-78);
      complex3.sinh();
      Complex complex10 = complex4.divide((-1825.16));
      complex7.tanh();
      complex6.sqrt();
      complex1.multiply(3826.33);
      complex10.readResolve();
      complex9.sqrt1z();
      complex6.tan();
      Complex complex11 = complex1.add(complex7);
      Complex complex12 = Complex.INF;
      complex8.equals(complex5);
      complex1.acos();
      complex0.atan();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1738.065166));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.INF.divide((-1738.065166));
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.I.divide(complex0);
      complex0.isNaN();
      Complex complex5 = complex0.atan();
      complex5.reciprocal();
      Complex complex6 = Complex.valueOf((-1738.065166));
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex2.divide(0.0);
      complex2.tanh();
      complex5.sqrt();
      Complex complex9 = complex8.multiply((-1.0));
      complex4.readResolve();
      complex9.sqrt1z();
      Complex complex10 = complex7.tan();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      complex11.add(complex0);
      Complex complex12 = Complex.INF;
      complex0.equals(complex10);
      Complex complex13 = complex11.acos();
      complex13.atan();
      Complex.valueOf(3.645999732952202E-9);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(879.0);
      complex0.negate();
      Complex complex1 = complex0.createComplex(20.0, 20.0);
      complex0.hashCode();
      Complex complex2 = complex0.multiply(20.0);
      complex2.isNaN();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.multiply((-795.4637795544));
      complex4.createComplex((-8.153674897746392), 65.304);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex1.tan();
      complex0.abs();
      Complex complex2 = Complex.valueOf(1.0);
      complex1.I.toString();
      complex2.createComplex(1.0, 406.1724166864);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.I.sinh();
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex5.sin();
      complex10.INF.acos();
      complex3.cosh();
      Complex complex11 = new Complex(1.0686607360839844);
      complex11.getField();
      complex9.equals(complex5);
      complex0.reciprocal();
      complex6.getImaginary();
      complex7.isNaN();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, (-728.5052099462865));
      Complex complex2 = complex1.sinh();
      complex2.ZERO.abs();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex3.divide(8.751606149833694E244);
      complex5.tanh();
      Complex complex6 = complex2.sqrt();
      complex4.multiply(0.0);
      complex5.readResolve();
      Complex complex7 = Complex.ZERO;
      complex7.sqrt1z();
      complex3.tan();
      Complex complex8 = Complex.ONE;
      complex8.add(complex5);
      complex3.equals(complex6);
      complex3.acos();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.075077), (-777.075077));
      Complex complex1 = complex0.tanh();
      complex1.nthRoot(4995);
      complex1.isInfinite();
      Complex complex2 = Complex.INF;
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ZERO.pow((-532.2095745445658));
      Complex.valueOf((-307.234376005091), (-307.234376005091));
      Complex complex3 = complex1.ZERO.tanh();
      complex0.NaN.negate();
      Complex complex4 = complex3.I.multiply(complex1);
      complex4.NaN.abs();
      complex4.ZERO.abs();
      complex0.readResolve();
      complex0.toString();
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.valueOf(485.75046, (-2095.5978560937942));
      complex6.multiply(485.75046);
      complex5.add(485.75046);
      complex1.I.readResolve();
      Complex complex7 = complex5.INF.negate();
      complex7.NaN.reciprocal();
      complex1.ONE.sqrt();
      complex5.toString();
      Complex complex8 = complex2.tan();
      complex8.ZERO.pow((-361.07));
      complex0.cosh();
      complex6.exp();
      complex6.cos();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.I.atan();
      complex0.ZERO.exp();
      int int0 = 1073741824;
      // Undeclared exception!
      complex0.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(3455.29026833851, 3455.29026833851);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.atan();
      complex3.INF.subtract(complex2);
      complex0.ONE.toString();
      complex1.ZERO.hashCode();
      Complex complex5 = complex0.asin();
      complex5.ZERO.sqrt1z();
      complex5.ONE.sin();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.ZERO.divide(complex2);
      complex7.INF.pow((-5.968586877433824E-8));
      Complex complex9 = complex8.NaN.acos();
      complex9.I.getField();
      Complex complex10 = (Complex)complex4.readResolve();
      Complex complex11 = complex6.atan();
      complex11.ONE.hashCode();
      complex4.multiply(1);
      Complex complex12 = complex7.sin();
      complex12.getArgument();
      complex10.add(complex8);
      complex12.reciprocal();
      Complex complex13 = new Complex(Double.NaN);
      complex13.sqrt1z();
      complex2.add(3455.29026833851);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex1.tan();
      Complex complex2 = complex0.cos();
      complex2.abs();
      Complex complex3 = Complex.valueOf(2166.66);
      complex1.I.toString();
      complex3.createComplex(1.5430806348152437, 406.1724166864);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.NaN.pow(complex1);
      Complex complex6 = complex0.divide(complex1);
      complex6.acos();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.INF.tan();
      complex8.ONE.acos();
      Complex complex9 = Complex.valueOf((-1267.9805652245));
      complex1.ONE.sinh();
      complex9.ZERO.divide(0.0);
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.NaN.sqrt();
      Complex complex12 = complex11.multiply(765.57183);
      complex11.I.readResolve();
      complex1.sqrt1z();
      Complex complex13 = Complex.ZERO;
      complex13.getField();
      Complex complex14 = Complex.INF;
      complex14.getImaginary();
      Complex complex15 = Complex.INF;
      Object object0 = complex12.readResolve();
      complex7.equals(object0);
      complex5.acos();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex1.tan();
      Complex complex2 = complex0.cos();
      complex2.abs();
      Complex complex3 = Complex.valueOf(2166.66);
      complex1.I.toString();
      complex3.createComplex(1.5430806348152437, 406.1724166864);
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.NaN.pow(complex1);
      Complex complex6 = complex0.divide(complex1);
      complex6.acos();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = Complex.valueOf((-1267.9805652245));
      complex1.ONE.sinh();
      complex10.ZERO.divide(0.0);
      Complex complex11 = complex1.tanh();
      complex4.sin();
      Object object0 = new Object();
      complex11.log();
      complex3.equals("(0.0, 1.0)");
      Complex complex12 = Complex.I;
      complex12.hashCode();
      complex12.negate();
      complex11.multiply(complex10);
      complex11.pow(2166.66);
      complex5.tan();
      complex4.divide(complex9);
      complex11.divide(406.1724166864);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(3455.29026833851, 3455.29026833851);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.sin();
      complex3.I.atan();
      Complex complex4 = complex3.INF.subtract(complex2);
      complex0.ONE.toString();
      complex1.ZERO.hashCode();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex5.ONE.sin();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex0.exp();
      complex9.ZERO.divide(complex2);
      Complex complex10 = complex7.pow((-1125.460736591819));
      Complex complex11 = complex10.acos();
      complex2.getField();
      complex0.readResolve();
      complex8.atan();
      complex7.hashCode();
      complex2.multiply(1);
      complex6.sin();
      complex3.getArgument();
      Complex complex12 = Complex.valueOf((-5.968586877433824E-8), Double.POSITIVE_INFINITY);
      complex12.getField();
      complex11.getImaginary();
      Complex complex13 = Complex.INF;
      Object object0 = new Object();
      complex11.equals(object0);
      complex4.acos();
      complex13.atan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.tanh();
      complex2.tan();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.createComplex(0.0, (-1880.45375));
      complex3.getImaginary();
      complex4.pow(0.42990362644195557);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1058.549536425), (-1058.549536425));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sinh();
      complex0.readResolve();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf(831.8413483);
      Complex complex5 = complex4.negate();
      complex2.log();
      complex2.asin();
      complex3.getImaginary();
      complex1.abs();
      complex5.createComplex(2549.44, 1.0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(2144.03938892279, 2144.03938892279);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(1835.031774609);
      Complex complex3 = complex1.add(complex0);
      complex2.subtract(complex3);
      Complex complex4 = Complex.valueOf(785.301987);
      complex4.negate();
      complex4.createComplex(785.301987, 0.0);
      complex2.hashCode();
      Complex complex5 = Complex.I;
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex1.tan();
      Complex complex2 = complex0.cos();
      complex2.abs();
      Complex complex3 = Complex.valueOf(2166.66);
      complex1.I.toString();
      Complex complex4 = complex3.createComplex(1.5430806348152437, 406.1724166864);
      Complex complex5 = complex3.ZERO.reciprocal();
      complex5.NaN.pow(complex1);
      Complex complex6 = complex0.divide(complex1);
      complex6.acos();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.INF.tan();
      complex8.ONE.acos();
      Complex complex9 = Complex.valueOf((-1267.9805652245));
      complex1.ONE.sinh();
      complex9.ZERO.divide(0.0);
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.NaN.sqrt();
      Complex complex12 = complex11.multiply(765.57183);
      Object object0 = complex11.I.readResolve();
      complex1.sqrt1z();
      complex5.tan();
      Complex complex13 = complex4.add(complex0);
      Complex complex14 = Complex.INF;
      complex7.equals(object0);
      complex13.acos();
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex2.log();
      complex1.equals(complex5);
      complex4.hashCode();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex5.multiply(complex4);
      complex1.pow(0.0);
      Complex complex8 = new Complex(0.0, 0.0);
      complex8.tan();
      complex7.divide(complex5);
      complex7.divide((-1480.0));
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(2144.03938892279, 2144.03938892279);
      complex0.getImaginary();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(2.5656438408686705E-4, (-1438.98608974421));
      complex0.equals("2z(=@Tn5y}B~S");
      complex1.acos();
      complex0.atan();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-3285.3958720037), (-3285.3958720037));
      Complex complex2 = Complex.INF;
      complex0.asin();
      Complex complex3 = complex2.conjugate();
      complex3.ONE.acos();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = new Complex((-3285.3958720037), 0.0);
      Complex complex6 = complex1.tan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex0.subtract(0.0);
      complex5.sin();
      complex7.abs();
      Complex complex10 = complex1.tan();
      complex2.cosh();
      complex3.readResolve();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex6.tanh();
      complex0.multiply(complex9);
      complex11.tan();
      complex9.add(162.0);
      complex2.add(complex0);
      complex11.negate();
      complex4.createComplex((-2417.97), 1372.4109);
      complex8.hashCode();
      Complex complex13 = Complex.I;
      complex10.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-3285.3958720037), (-3285.3958720037));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.conjugate();
      complex4.ONE.acos();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex0.divide(complex1);
      complex2.getReal();
      Complex complex7 = complex4.I.multiply(1507);
      complex3.tan();
      complex5.multiply(complex1);
      complex7.createComplex(1507, Double.POSITIVE_INFINITY);
      complex3.getImaginary();
      complex2.pow(complex6);
      complex5.multiply((-326773));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-1006.9735), (-1006.9735));
      double double0 = 0.0;
      Complex complex1 = complex0.INF.add(0.0);
      complex1.ONE.pow(complex0);
      complex0.getArgument();
      Complex complex2 = complex0.atan();
      complex2.sqrt();
      Complex complex3 = new Complex((-20.0), 0.0);
      Complex complex4 = complex3.multiply(complex0);
      complex0.equals(complex3);
      Complex complex5 = complex0.multiply((-3407));
      Complex complex6 = complex5.I.subtract(complex3);
      complex4.NaN.sin();
      Complex complex7 = complex3.log();
      complex4.tan();
      complex7.subtract(0.0);
      complex7.ONE.acos();
      complex4.multiply(1462.58413);
      try { 
        complex6.nthRoot((-3407));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,407
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-306);
      complex0.I.getField();
      Complex complex1 = new Complex((-306));
      Complex complex2 = complex1.tan();
      complex2.createComplex((-306), (-306));
      complex0.pow(complex1);
      try { 
        complex0.ZERO.nthRoot((-306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -306
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-3285.3958720037), (-3285.3958720037));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex0.divide(complex1);
      complex2.getReal();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex4.I.multiply(1507);
      complex9.NaN.nthRoot(1507);
      Complex complex10 = complex9.I.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-3285.3958720037));
      Complex complex11 = complex10.ONE.atan();
      complex11.I.getField();
      complex8.I.cosh();
      complex0.sin();
      Complex complex12 = complex5.subtract((-3285.3958720037));
      complex5.sinh();
      complex12.INF.readResolve();
      Complex complex13 = complex5.tan();
      complex3.negate();
      complex1.log();
      complex3.asin();
      complex13.getImaginary();
      complex7.abs();
      complex6.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.pow(4.1905679587096103E-8);
      complex0.NaN.divide(complex1);
      complex2.INF.readResolve();
      complex0.multiply(1674.162231110964);
      Complex complex3 = complex2.sqrt1z();
      complex3.getImaginary();
      complex3.INF.nthRoot(37);
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex3.acos();
      complex1.ONE.sqrt1z();
      Complex.valueOf(1872.91, 6.283185307179586);
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex6.ONE.add((-1.0200858727747717E-8));
      complex7.ZERO.hashCode();
      complex3.hashCode();
      Complex complex8 = complex0.tan();
      Complex complex9 = Complex.valueOf((-1.0), (-2.5656438408686705E-4));
      Complex complex10 = complex8.subtract((-1.0));
      Complex complex11 = complex10.INF.sin();
      Object object0 = new Object();
      complex4.ONE.log();
      complex0.equals(object0);
      complex4.hashCode();
      Complex complex12 = complex3.negate();
      complex2.multiply(complex9);
      complex11.pow(4.1905679587096103E-8);
      complex12.tan();
      complex1.divide(complex2);
      complex3.divide((-1480.0));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(662.39);
      Complex complex1 = Complex.valueOf(662.39, 0.0);
      complex1.getArgument();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex2.ONE.sqrt();
      complex0.I.multiply(complex3);
      Complex complex4 = complex0.multiply(8.938334752179552E-9);
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex4.createComplex(0.0, 0.0);
      Complex complex7 = complex4.I.negate();
      Complex complex8 = complex7.NaN.pow(complex5);
      Complex complex9 = complex6.subtract(complex4);
      Complex complex10 = complex2.createComplex(0.0, 662.39);
      complex10.ZERO.negate();
      complex10.NaN.sinh();
      complex10.ZERO.readResolve();
      Complex complex11 = complex0.exp();
      complex11.NaN.getField();
      complex10.INF.abs();
      Complex complex12 = complex4.tan();
      Complex complex13 = complex9.pow(complex12);
      complex13.ONE.tanh();
      complex6.cos();
      complex2.multiply(complex13);
      complex9.cos();
      Complex complex14 = complex10.negate();
      complex14.NaN.cosh();
      Complex.valueOf(0.0);
      try { 
        complex8.nthRoot((-1540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,540
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-635.8));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.ZERO.multiply(1495.0);
      complex0.readResolve();
      Complex complex3 = Complex.valueOf((-635.8));
      complex3.ONE.nthRoot(663);
      Complex complex4 = complex0.NaN.sqrt();
      complex4.ZERO.conjugate();
      complex3.NaN.divide((-111.330700805451));
      Complex complex5 = complex0.acos();
      complex1.ONE.atan();
      complex5.sinh();
      complex1.I.sinh();
      complex1.ZERO.log();
      complex5.readResolve();
      Complex complex6 = complex5.ZERO.sinh();
      complex6.INF.cosh();
      complex5.isNaN();
      complex0.ONE.exp();
      Complex complex7 = complex5.divide(complex2);
      complex7.ONE.subtract((-111.330700805451));
      Complex complex8 = complex3.exp();
      complex8.I.negate();
      complex1.toString();
      complex6.hashCode();
      complex4.createComplex((-853.47194721), (-635.8));
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.asin();
      complex1.tan();
      Complex complex2 = complex0.cos();
      complex2.abs();
      Complex complex3 = Complex.valueOf(2166.66);
      complex1.I.toString();
      Complex complex4 = complex3.createComplex(1.5430806348152437, 406.1724166864);
      Complex complex5 = complex3.ZERO.reciprocal();
      complex5.NaN.pow(complex1);
      Complex complex6 = complex0.divide(complex1);
      complex6.acos();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.INF.tan();
      complex8.ONE.acos();
      Complex complex9 = Complex.valueOf((-1267.9805652245));
      complex1.ONE.sinh();
      complex9.ZERO.divide(0.0);
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex10.NaN.sqrt();
      complex11.multiply(765.57183);
      complex11.I.readResolve();
      complex1.sqrt1z();
      complex5.tan();
      complex4.add(complex0);
      Complex complex12 = complex2.reciprocal();
      complex12.sqrt1z();
      complex2.add((-4433.0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex2.tan();
      complex2.add(complex1);
      Complex complex4 = complex0.divide(complex1);
      complex4.ONE.sinh();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.ONE.add(complex2);
      complex2.INF.negate();
      complex5.ZERO.getField();
      complex6.I.nthRoot(3870);
      complex5.isInfinite();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.tan();
      complex3.abs();
      Complex complex9 = complex1.acos();
      complex2.readResolve();
      complex2.getReal();
      Complex complex10 = complex7.reciprocal();
      complex10.ONE.acos();
      complex0.nthRoot(876);
      complex8.divide(complex9);
      complex4.tanh();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-2126.73898423084));
      Complex complex1 = complex0.ONE.divide((-2126.73898423084));
      complex0.ZERO.pow((-2126.73898423084));
      complex0.INF.readResolve();
      Complex complex2 = complex1.pow(2586.087309);
      complex2.INF.sin();
      complex2.getField();
      Complex complex3 = complex0.log();
      complex3.multiply(complex0);
      Complex.valueOf(0.0);
      try { 
        complex1.nthRoot((-876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -876
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(945.60175467, 945.60175467);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.INF.getField();
      complex0.I.createComplex(945.60175467, 945.60175467);
      complex0.abs();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.ZERO.log();
      complex0.I.hashCode();
      complex1.NaN.abs();
      Complex complex3 = Complex.ONE;
      complex0.ZERO.sqrt1z();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.atan();
      complex3.ZERO.sin();
      Complex complex7 = complex6.I.exp();
      complex5.INF.toString();
      Complex complex8 = complex5.NaN.multiply(complex0);
      Complex complex9 = complex0.divide(complex3);
      Complex complex10 = complex9.ZERO.log();
      complex3.I.divide(complex9);
      complex9.readResolve();
      Complex.valueOf(945.60175467, 945.60175467);
      Complex complex11 = complex3.add(complex4);
      complex11.NaN.multiply(complex8);
      complex11.getArgument();
      complex2.getArgument();
      complex1.getImaginary();
      complex7.sqrt1z();
      complex1.atan();
      complex10.sqrt1z();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.sinh();
      complex0.NaN.add((-103.199706354));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.I.exp();
      complex3.NaN.multiply((-1459.657988389218));
      Complex complex6 = complex1.INF.add((double) 584);
      complex6.abs();
      complex1.multiply(0.6286087036132812);
      complex5.ZERO.nthRoot(584);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex1.sqrt();
      complex4.ONE.subtract(complex2);
      complex8.NaN.sinh();
      complex0.multiply((double) 584);
      complex0.subtract((-1688.58973457804));
      complex4.isInfinite();
      complex4.getArgument();
      complex0.cos();
      Complex complex9 = complex7.multiply(584);
      complex9.NaN.nthRoot(1442);
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex0.ONE.divide(complex1);
      complex0.NaN.acos();
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(3455.29026833851, 3455.29026833851);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.atan();
      complex3.INF.subtract(complex2);
      complex0.ONE.toString();
      complex1.ZERO.hashCode();
      Complex complex5 = complex0.asin();
      complex5.ZERO.sqrt1z();
      complex5.ONE.sin();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.ZERO.divide(complex2);
      Complex complex9 = complex7.INF.pow((-5.968586877433824E-8));
      Complex complex10 = complex8.NaN.acos();
      complex10.I.getField();
      complex4.readResolve();
      Complex complex11 = complex6.atan();
      complex11.ONE.hashCode();
      complex4.multiply(1);
      Complex complex12 = complex7.sin();
      complex12.getArgument();
      complex7.getField();
      complex6.getImaginary();
      Complex complex13 = Complex.INF;
      complex9.equals(complex13);
      complex1.acos();
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(879.0);
      Complex complex1 = complex0.negate();
      complex0.createComplex(20.0, 20.0);
      complex0.hashCode();
      Complex complex2 = complex0.multiply(20.0);
      complex2.isNaN();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.multiply(7);
      complex3.toString();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.ONE.tanh();
      complex0.INF.add(6.283185307179586);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.subtract((-1360.5553001));
      Complex complex6 = complex0.createComplex(0.42990362644195557, 0.0);
      Complex complex7 = complex3.tan();
      complex7.NaN.sinh();
      complex2.NaN.subtract(1372.4109);
      Complex complex8 = complex4.INF.sin();
      complex6.abs();
      Complex complex9 = complex2.NaN.tan();
      Complex complex10 = complex5.cosh();
      complex1.readResolve();
      complex2.tan();
      Complex complex11 = complex10.tanh();
      complex11.multiply(complex9);
      complex3.tan();
      complex5.add(785.301987);
      complex2.add(complex11);
      complex0.negate();
      complex7.createComplex(0.0, (-2417.97));
      complex11.hashCode();
      Complex complex12 = Complex.I;
      complex8.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      complex1.hashCode();
      Complex complex2 = complex1.NaN.tanh();
      complex1.ONE.hashCode();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.subtract(complex2);
      Complex complex4 = complex3.divide(2796.80277899421);
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex6.I.pow(0.0);
      complex3.cosh();
      complex2.exp();
      complex7.exp();
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3510.8376561908385, 0.5573811531066895);
      complex0.multiply(6.283185307179586);
      Complex complex2 = complex0.divide(complex1);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(533.437992755528, 0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      complex0.readResolve();
      Complex complex2 = complex0.sin();
      complex0.sinh();
      Complex complex3 = Complex.valueOf(533.437992755528);
      complex3.NaN.asin();
      Complex complex4 = complex1.sin();
      Object object0 = new Object();
      complex4.ZERO.abs();
      complex4.INF.readResolve();
      complex2.equals(object0);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex0.sinh();
      complex4.getField();
      Complex complex7 = complex4.INF.conjugate();
      complex7.ZERO.sqrt();
      complex6.INF.tanh();
      Complex complex8 = complex4.add(complex1);
      complex1.log();
      complex2.add(complex5);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.I.log();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = Complex.ZERO;
      complex4.INF.add(complex3);
      complex3.NaN.subtract(complex4);
      complex1.INF.atan();
      complex0.getField();
      complex0.cosh();
      complex2.add(0.6415454149246216);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1738.065166));
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.INF.divide(1.4454470027638629E283);
      complex2.I.tanh();
      complex2.I.divide(complex0);
      complex0.isNaN();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.reciprocal();
      complex4.ONE.acos();
      Complex complex5 = complex0.acos();
      complex5.pow(complex4);
      complex0.pow(complex4);
      complex0.reciprocal();
      complex3.hashCode();
      Complex.valueOf((-1738.065166), 0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.toString();
      complex0.INF.hashCode();
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.add((double) 1);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.I.divide(complex5);
      Complex complex7 = complex6.NaN.sin();
      complex7.ONE.hashCode();
      Complex complex8 = complex3.multiply(complex1);
      Complex complex9 = complex0.asin();
      complex8.ONE.readResolve();
      complex9.INF.nthRoot(1);
      complex8.acos();
      Complex complex10 = complex0.cos();
      complex2.INF.getField();
      complex3.nthRoot(1);
      complex0.NaN.negate();
      complex8.nthRoot(1);
      complex2.toString();
      complex2.getField();
      complex10.isNaN();
      complex9.divide(0.0);
      complex10.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.conjugate();
      Complex.valueOf((-113.8526), 507.8463113852869);
      Complex complex3 = complex0.multiply(complex1);
      complex1.subtract(complex3);
      complex3.conjugate();
      Complex complex4 = complex3.asin();
      complex3.tanh();
      complex2.subtract(complex0);
      complex4.abs();
      complex1.sinh();
      Complex complex5 = complex4.tan();
      try { 
        complex5.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.841563119484623E171, 9.841563119484623E171);
      complex0.NaN.hashCode();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.pow(complex1);
      complex2.INF.hashCode();
      complex0.nthRoot(409);
      Complex complex3 = new Complex(9.841563119484623E171, 9.841563119484623E171);
      Complex complex4 = complex1.INF.subtract((double) 409);
      complex3.NaN.nthRoot(409);
      Complex complex5 = complex2.pow(complex3);
      complex1.multiply(complex2);
      Complex.valueOf(0.0);
      complex2.isInfinite();
      complex1.toString();
      Complex complex6 = complex5.divide(9.841563119484623E171);
      complex3.multiply(9.841563119484623E171);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex2.add(complex7);
      complex8.INF.hashCode();
      Complex complex9 = complex6.NaN.tan();
      complex1.multiply(0.0);
      Complex complex10 = complex2.multiply(9.841563119484623E171);
      Complex complex11 = complex4.atan();
      complex6.hashCode();
      Complex complex12 = complex6.atan();
      complex11.conjugate();
      Complex complex13 = complex9.subtract(9.841563119484623E171);
      complex10.divide(complex12);
      complex13.subtract(0.0);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.asin();
      complex1.ZERO.readResolve();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex1.INF.abs();
      complex2.ZERO.createComplex(Double.POSITIVE_INFINITY, 0.0);
      try { 
        complex0.nthRoot((-311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -311
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 1.3242245776666673E-186;
      complex0.ONE.subtract(1.3242245776666673E-186);
      Complex complex1 = null;
      Complex complex2 = complex0.ONE.sinh();
      try { 
        complex2.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex((-848.4615671137), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex1.INF.cosh();
      complex4.I.cos();
      complex4.NaN.divide(complex2);
      complex0.INF.cosh();
      Complex complex5 = complex0.atan();
      complex2.ONE.abs();
      complex5.ONE.negate();
      complex5.divide(0.0);
      complex2.divide((-848.4615671137));
      Complex complex6 = complex3.ZERO.tanh();
      complex1.ONE.asin();
      complex3.sqrt();
      double double1 = 1086.414574769;
      complex6.subtract((-390.6567157));
      Complex complex7 = complex1.I.pow(complex4);
      try { 
        complex7.nthRoot((-83));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -83
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4435.68547691), (-4435.68547691));
      Complex complex1 = complex0.sqrt();
      complex1.NaN.exp();
      Complex complex2 = complex0.I.subtract(4385.747);
      complex2.I.getArgument();
      complex0.getArgument();
      Complex complex3 = complex1.ZERO.createComplex((-377.0), (-377.0));
      Complex complex4 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.add((-4435.68547691));
      complex0.ONE.sqrt();
      Complex complex6 = complex5.INF.divide(complex0);
      complex3.I.sqrt1z();
      complex5.ONE.subtract((-2.356194490192345));
      complex5.INF.sqrt1z();
      complex3.isNaN();
      Complex complex7 = complex0.conjugate();
      complex7.pow((-98.989));
      complex3.abs();
      Complex complex8 = complex3.divide(533.1585130146568);
      complex8.I.exp();
      complex2.readResolve();
      complex7.hashCode();
      complex3.toString();
      complex6.pow((-2.356194490192345));
      complex4.multiply(3309);
      complex4.add(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1849.757563842815, 2567.166874842);
      Complex complex1 = Complex.valueOf(1849.757563842815, 3108.899737967705);
      complex1.I.exp();
      Complex complex2 = complex0.sin();
      complex0.getField();
      complex0.multiply(complex2);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.asin();
      complex0.pow((-1.6149279479975042E-9));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-1058.549536425), (-1058.549536425));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-3922.575541419), (-3922.575541419));
      Complex complex1 = complex0.multiply((-3922.575541419));
      Complex complex2 = complex1.INF.reciprocal();
      complex1.getField();
      Complex complex3 = complex0.cosh();
      complex3.INF.abs();
      complex1.I.multiply(complex2);
      complex0.getReal();
      Complex complex4 = complex3.add((-3922.575541419));
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.ONE.add(complex4);
      complex6.ONE.hashCode();
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.pow(complex4);
      complex5.I.getField();
      Complex complex8 = complex1.NaN.divide(complex4);
      Complex complex9 = complex8.ZERO.conjugate();
      complex8.I.nthRoot(1424);
      Complex complex10 = complex7.sin();
      complex10.ZERO.add(complex7);
      Complex complex11 = complex1.sqrt1z();
      assertEquals((-1.5386598878138542E7), complex11.getImaginary(), 0.01);
      
      complex4.hashCode();
      List<Complex> list0 = complex1.nthRoot(1424);
      assertEquals(1424, list0.size());
      assertFalse(list0.contains(complex2));
      
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.INF.acos();
      Complex complex12 = complex8.NaN.asin();
      Complex complex13 = complex5.sqrt();
      List<Complex> list1 = complex13.NaN.nthRoot(1424);
      assertTrue(list1.contains(complex5));
      
      Complex complex14 = complex7.atan();
      complex14.NaN.abs();
      Complex complex15 = complex9.tan();
      complex15.ONE.readResolve();
      assertSame(complex8, complex12);
      
      complex1.isNaN();
      Complex complex16 = complex14.divide(complex13);
      complex16.hashCode();
      complex13.multiply(complex14);
      Complex complex17 = complex13.sinh();
      assertSame(complex17, complex14);
      assertNotSame(complex5, complex7);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(3425.818, 3425.818);
      complex1.NaN.add(774.556769894);
      double double0 = (-3893.84311886);
      Complex complex2 = complex0.multiply((-3893.84311886));
      int int0 = (-889);
      try { 
        complex2.nthRoot((-889));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -889
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.pow(complex1);
      complex4.getField();
      Complex complex5 = complex4.createComplex(0.0, 0.0);
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex6 = complex3.add(complex1);
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex7 = complex2.divide(complex6);
      complex7.ONE.log();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex8 = complex5.tanh();
      assertTrue(complex8.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.075077), (-777.075077));
      Complex complex1 = complex0.INF.divide((-3716.341719691));
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      
      Complex complex2 = complex0.subtract((-1071.63339347048));
      assertEquals(294.5583164704801, complex2.getReal(), 0.01);
      assertEquals((-777.075077), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(0.23556607961654663);
      Complex complex2 = complex0.negate();
      complex0.ZERO.hashCode();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex2.exp();
      complex4.divide(20.0);
      complex1.getField();
      Complex complex5 = complex2.multiply(complex0);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      complex4.negate();
      Complex complex6 = complex1.multiply(complex4);
      assertEquals(3.57212288873525, complex6.getReal(), 0.01);
      assertEquals(2.293633730066915, complex6.getImaginary(), 0.01);
      
      complex4.exp();
      double double0 = complex3.getReal();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex7 = Complex.I;
      complex3.multiply(complex7);
      Complex complex8 = complex1.multiply((-1100));
      assertEquals(-0.0, complex8.getReal(), 0.01);
  }
}
