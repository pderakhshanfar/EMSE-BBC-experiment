/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:50:05 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = new Complex(795.258563, 795.258563);
      Complex complex2 = complex0.divide(complex1);
      complex2.ZERO.add(2610.69305973);
      complex2.getArgument();
      Complex complex3 = complex2.ZERO.exp();
      complex3.INF.cosh();
      complex0.ONE.getArgument();
      Complex complex4 = complex0.divide(1.5869022483809747E-256);
      complex4.I.sinh();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex4.add(1.5869022483809747E-256);
      Complex complex9 = complex5.sin();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex10.exp();
      complex2.toString();
      complex7.divide(795.258563);
      complex8.subtract(complex4);
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      complex1.ONE.toString();
      complex1.I.readResolve();
      complex0.readResolve();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex2.I.cosh();
      complex2.acos();
      complex2.NaN.negate();
      Complex complex5 = complex4.I.divide(1.2858802448614707E-252);
      Complex complex6 = complex0.createComplex(1001566.6263461385, 1001566.6263461385);
      complex6.ZERO.readResolve();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex7.I.sqrt();
      complex8.NaN.sinh();
      Complex complex9 = complex2.ONE.log();
      complex9.ZERO.getArgument();
      complex5.ZERO.cos();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex1.NaN.pow(1.2858802448614707E-252);
      complex11.ONE.add(complex9);
      Complex complex12 = complex2.subtract((-30.86048808026675));
      Complex complex13 = complex12.divide(complex0);
      complex13.NaN.log();
      Complex complex14 = complex3.cos();
      complex14.ONE.getField();
      complex13.subtract(complex0);
      Complex complex15 = complex5.sqrt1z();
      Complex complex16 = Complex.valueOf((-1355.14));
      complex0.abs();
      complex14.subtract(0.0);
      Complex complex17 = complex16.conjugate();
      complex17.I.sqrt1z();
      complex10.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.multiply(0.0);
      Complex complex2 = complex0.multiply(20.0);
      Complex complex3 = complex2.tan();
      complex3.I.subtract(complex1);
      Complex complex4 = new Complex(977.0443148833265, 926.3132252578538);
      complex1.createComplex(2699.989159, 926.3132252578538);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex1.ONE.multiply(20.0);
      complex2.NaN.tanh();
      Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 1833.0);
      Complex complex2 = new Complex(5023.7, 1833.0);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex2.createComplex(5023.7, 6.283185307179586);
      Complex complex6 = complex3.subtract((-2432.67400002132));
      complex3.log();
      Complex complex7 = new Complex((-2119.099919518731), 5023.7);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex7.asin();
      complex6.reciprocal();
      complex8.hashCode();
      complex9.getArgument();
      Complex complex10 = complex1.multiply(0);
      complex5.cos();
      Complex complex11 = Complex.ZERO;
      complex11.tanh();
      complex4.add(0.495672345161438);
      complex10.getReal();
      complex5.sqrt();
      complex9.tan();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-804.5374980810967));
      complex0.abs();
      complex0.multiply(Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1005.9428294237));
      Complex complex1 = complex0.createComplex(1267.1317467, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      complex2.I.exp();
      Complex complex3 = complex1.subtract(1267.1317467);
      complex3.I.negate();
      complex3.multiply((-1));
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1814.056886588804);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.sqrt();
      complex2.ONE.readResolve();
      Complex complex3 = complex0.I.pow(2433.17);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex3.I.sqrt1z();
      complex2.abs();
      complex3.ONE.sin();
      Complex complex6 = complex2.createComplex(Double.NaN, Double.NaN);
      complex6.NaN.atan();
      Complex complex7 = complex1.sinh();
      complex7.I.sinh();
      Complex complex8 = complex3.acos();
      complex1.getField();
      complex8.cosh();
      Complex complex9 = complex1.divide(2433.17);
      Complex complex10 = complex9.INF.asin();
      complex9.pow(complex4);
      Complex complex11 = Complex.valueOf(Double.NaN, 1814.056886588804);
      complex11.hashCode();
      Complex.valueOf(259.453, 304.52442);
      complex9.pow((-2823524.409642237));
      Complex complex12 = complex9.add(1814.056886588804);
      Complex complex13 = complex12.NaN.sin();
      complex5.readResolve();
      complex10.acos();
      complex13.sinh();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-28.410957517209177));
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.pow((-28.410957517209177));
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex((-28.410957517209177), Double.POSITIVE_INFINITY);
      complex1.acos();
      Complex complex2 = Complex.NaN;
      complex2.NaN.add(complex1);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.I;
      complex4.I.cosh();
      complex3.pow(complex0);
      Complex complex5 = Complex.INF;
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(7.7376967, 7.7376967);
      Complex complex1 = new Complex(3096.296199215305, (-20.0));
      complex1.divide(complex1);
      complex0.add(7.7376967);
      complex0.getReal();
      complex1.cos();
      complex0.sqrt();
      Complex complex2 = complex1.tan();
      complex2.ZERO.pow(complex1);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.multiply(8.61333169428533E-94);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.I;
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-28.410957517209177));
      Object object0 = complex0.readResolve();
      complex0.readResolve();
      complex0.equals(object0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-804.5374980810967));
      complex0.isNaN();
      Complex complex1 = new Complex((-20.0), 855.80338);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.INF;
      complex2.divide(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.divide(complex4);
      complex3.toString();
      Complex complex6 = Complex.INF;
      complex5.hashCode();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.multiply(8.61333169428533E-94);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.pow(complex3);
      complex2.reciprocal();
      complex4.nthRoot(3687);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = Complex.INF;
      complex1.ONE.readResolve();
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = Complex.valueOf(6138.7528);
      Complex complex4 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.I;
      complex4.multiply((-2813));
      complex3.cos();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-804.5374980810967));
      complex0.isNaN();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.createComplex((-804.5374980810967), 2.0);
      Complex complex3 = complex1.sinh();
      complex3.getArgument();
      complex0.tanh();
      complex2.getImaginary();
      Complex complex4 = Complex.I;
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex2.I.sqrt1z();
      complex1.ZERO.reciprocal();
      complex3.NaN.getArgument();
      complex4.multiply((-805.0));
      Complex.valueOf((-805.0), Double.NaN);
      Complex complex5 = Complex.ONE;
      complex5.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1005.9428294237));
      Complex complex1 = complex0.createComplex(1267.1317467, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.NaN.sinh();
      complex0.INF.getArgument();
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex0.negate();
      Complex complex3 = Complex.I;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-804.5374980810967));
      complex0.isNaN();
      complex0.log();
      double double0 = 1147.2334;
      Complex.valueOf(1147.2334);
      Complex complex1 = Complex.I;
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.2906999044), (-32.0857386885));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.pow((-32.0857386885));
      complex2.sinh();
      complex1.conjugate();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.pow((-777.2906999044));
      Complex complex5 = complex2.createComplex((-32.0857386885), 319.5935);
      Complex complex6 = complex4.cos();
      complex5.divide(complex4);
      complex6.sinh();
      Complex complex7 = Complex.valueOf(319.5935, 319.5935);
      complex7.atan();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.cos();
      complex9.add(0.09200321713892956);
      complex3.readResolve();
      Complex.valueOf((-32.0857386885), 319.5935);
      complex3.acos();
      complex9.abs();
      complex4.multiply((-2324));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.2906999044), (-32.0857386885));
      complex0.NaN.log();
      Complex complex1 = complex0.pow((-32.0857386885));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.pow((-220.02550578));
      Complex complex6 = complex5.createComplex(2444.4994509, (-777.2906999044));
      Complex complex7 = complex4.cos();
      complex5.divide(complex6);
      complex7.sinh();
      Complex complex8 = Complex.valueOf((-220.02550578), 1428.913);
      complex2.atan();
      Complex complex9 = Complex.INF;
      complex1.cos();
      Complex complex10 = complex8.add(0.09200321713892956);
      complex4.readResolve();
      Complex.valueOf(319.5935, (-777.2906999044));
      Complex complex11 = complex6.acos();
      complex11.abs();
      Complex.valueOf(20508.78705508625, 453.8200489823);
      complex2.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3048.11081);
      complex0.isNaN();
      Complex complex1 = complex0.log();
      complex0.readResolve();
      Complex complex2 = Complex.I;
      complex2.acos();
      Complex complex3 = complex0.subtract(3048.11081);
      Complex complex4 = complex2.cosh();
      complex2.exp();
      Complex complex5 = new Complex(3048.11081, Double.NaN);
      complex1.add(complex5);
      complex3.tanh();
      complex2.add(3048.11081);
      complex4.add((-4392.9664));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1782.1102));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = new Complex(2512.356564921, (-32.0857386885));
      Complex complex4 = complex3.tan();
      complex2.subtract(complex1);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.divide((-1782.1102));
      Complex complex7 = complex1.log();
      Complex complex8 = Complex.ONE;
      complex8.cosh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.log();
      complex4.exp();
      Complex complex11 = complex5.divide(complex6);
      Complex.valueOf((-2204.009073929), (-1005.9428294237));
      complex11.sin();
      complex1.pow((-2204.009073929));
      Complex complex12 = complex7.conjugate();
      complex3.abs();
      Complex.valueOf((-2746.715));
      complex6.getField();
      complex10.negate();
      complex12.sin();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1005.9428294237));
      Complex complex1 = complex0.createComplex(1267.1317467, Double.POSITIVE_INFINITY);
      complex0.NaN.sinh();
      complex0.INF.getArgument();
      Complex complex2 = complex1.tanh();
      complex0.getImaginary();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.add(1267.1317467);
      Complex complex5 = complex4.add(complex3);
      complex5.I.toString();
      complex2.getReal();
      complex3.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1005.9428294237));
      Complex complex1 = complex0.createComplex(1267.1317467, Double.POSITIVE_INFINITY);
      complex0.INF.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.multiply((-1.0));
      Complex complex4 = Complex.ZERO;
      complex2.readResolve();
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.subtract((-1820.0));
      complex6.cosh();
      Complex complex8 = complex7.exp();
      complex6.add(complex8);
      complex3.tanh();
      complex8.add((-1792.08061995261));
      complex5.divide((-1.0));
      Complex complex9 = Complex.ONE;
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.2906999044), (-32.0857386885));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = Complex.valueOf((-32.0857386885));
      Complex complex3 = complex0.multiply(complex2);
      complex2.nthRoot(3498);
      complex2.toString();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.createComplex(3498, 3498);
      complex5.hashCode();
      Complex complex6 = complex3.exp();
      complex4.add(complex6);
      Complex complex7 = complex0.cos();
      complex4.exp();
      complex1.getReal();
      complex7.subtract(complex0);
      complex2.abs();
      Complex.valueOf((double) 3498);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-804.5374980810967));
      complex0.isNaN();
      Complex complex1 = complex0.log();
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.valueOf(3.100337132168414, (-458.68881829983));
      complex3.I.add(complex5);
      Complex complex6 = complex4.exp();
      complex0.add(complex6);
      complex3.tanh();
      complex0.tanh();
      complex2.add(Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex(1789.84261753);
      complex7.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.sin();
      complex8.divide(3.100337132168414);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-2823.223371));
      Complex complex1 = Complex.valueOf(1.3180771991576186E280, (-2823.223371));
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf((-2823.223371));
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex1.multiply((-2823.223371));
      Complex complex6 = Complex.ZERO;
      complex6.readResolve();
      Complex complex7 = complex3.acos();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.subtract(7.085856407729326E45);
      complex6.cosh();
      Complex complex10 = complex7.exp();
      complex9.add(complex1);
      complex5.tanh();
      complex4.add((-2823.223371));
      complex10.divide(6.643105496829061E-69);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3048.11081);
      Complex complex1 = Complex.I;
      complex1.isNaN();
      Complex complex2 = complex0.log();
      complex0.readResolve();
      Complex complex3 = complex0.acos();
      complex3.subtract(2.380738071335498E-8);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex3.exp();
      complex2.add(complex5);
      complex3.tanh();
      complex5.add(2.380738071335498E-8);
      complex4.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1005.9428294237));
      complex0.createComplex(1267.1317467, Double.POSITIVE_INFINITY);
      complex0.INF.getArgument();
      Complex complex1 = complex0.sinh();
      complex1.tanh();
      complex1.isNaN();
      double double0 = 1029.4946271867059;
      Complex complex2 = Complex.valueOf(1029.4946271867059);
      // Undeclared exception!
      complex2.nthRoot(2049870754);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.2906999044), (-32.0857386885));
      Complex complex1 = complex0.createComplex(8.41775291139466E22, Double.POSITIVE_INFINITY);
      complex1.getArgument();
      Complex complex2 = complex0.sinh();
      complex2.isNaN();
      complex0.getImaginary();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.pow((-32.0857386885));
      Complex complex5 = complex4.add((-2100.9681440593));
      Complex complex6 = complex0.log();
      complex3.add(complex1);
      complex0.toString();
      complex5.getReal();
      complex2.sqrt();
      complex5.tan();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1005.9428294237));
      Complex complex1 = complex0.createComplex((-1005.9428294237), Double.POSITIVE_INFINITY);
      complex0.INF.getArgument();
      Complex complex2 = complex1.multiply(complex0);
      complex2.nthRoot(3498);
      complex1.toString();
      complex2.log();
      Complex complex3 = complex2.acos();
      complex3.tanh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.acos();
      complex5.log();
      complex4.toString();
      complex2.multiply(0.7853981633974483);
      complex0.tan();
      complex3.sinh();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(3048.11081, 3048.11081);
      Complex complex1 = complex0.reciprocal();
      complex1.readResolve();
      Complex complex2 = new Complex(3048.11081);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.log();
      Complex complex5 = Complex.valueOf(2539.787581589939);
      Complex complex6 = complex3.pow(8.41775291139466E22);
      complex3.add(0.0);
      complex0.cosh();
      Complex complex7 = complex0.createComplex(6.283185307179586, 8.41775291139466E22);
      complex4.hashCode();
      complex7.exp();
      Complex complex8 = Complex.ZERO;
      complex5.add(complex8);
      complex2.cos();
      complex1.exp();
      complex2.getReal();
      Complex complex9 = complex2.subtract(complex7);
      complex3.abs();
      complex9.acos();
      complex6.isNaN();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.2906999044), (-32.0857386885));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.pow((-32.0857386885));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex2.pow((-777.2906999044));
      Complex complex7 = complex2.createComplex((-32.0857386885), 319.5935);
      complex6.cos();
      Complex complex8 = complex7.divide(complex6);
      complex2.createComplex(319.5935, (-777.2906999044));
      complex5.subtract((-2119.099919518731));
      Complex complex9 = complex7.log();
      Complex complex10 = complex9.cos();
      complex10.asin();
      complex8.reciprocal();
      complex3.hashCode();
      complex4.getArgument();
      complex3.multiply(0);
      complex1.cos();
      Complex complex11 = complex9.tanh();
      complex11.add(319.5935);
      complex9.divide((-2119.099919518731));
      Complex complex12 = new Complex(Double.NaN, 20.0);
      complex12.subtract(1.0);
      Complex complex13 = Complex.ZERO;
      complex10.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.7376967, 3.141592653589793);
      Complex complex1 = new Complex(7.7376967);
      complex0.NaN.subtract(complex1);
      Complex complex2 = complex0.multiply(1974.8);
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf(4430.541323936515, 0.0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex2.log();
      Complex complex8 = complex6.pow(complex2);
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = Complex.valueOf(4430.541323936515, (-4478.8899));
      Complex complex11 = complex10.createComplex(4430.541323936515, 9.253781621373885E29);
      Complex complex12 = complex9.pow(2.0);
      complex11.cos();
      Complex complex13 = complex8.tan();
      complex12.cosh();
      complex7.abs();
      complex6.subtract(1547.21057472);
      complex0.sqrt1z();
      Complex complex14 = complex5.sin();
      complex5.isInfinite();
      complex14.negate();
      Complex complex15 = Complex.I;
      complex13.readResolve();
      complex10.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1005.9428294237), (-1005.9428294237));
      Complex complex1 = complex0.createComplex(1267.1317467, Double.POSITIVE_INFINITY);
      complex0.INF.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.tanh();
      complex2.isNaN();
      complex0.getImaginary();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = Complex.valueOf((-1005.9428294237));
      complex5.pow((-603150.3375306852));
      complex5.add(Double.POSITIVE_INFINITY);
      complex1.log();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.add(complex6);
      complex4.toString();
      complex3.getReal();
      complex6.I.toString();
      Complex complex8 = Complex.I;
      complex8.tan();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-804.5374980810967));
      complex0.isNaN();
      Complex complex1 = complex0.log();
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      complex0.ZERO.acos();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex4.cos();
      complex7.pow(complex0);
      complex0.pow(complex6);
      complex2.isInfinite();
      complex1.abs();
      complex6.getArgument();
      Complex complex8 = complex0.atan();
      complex8.reciprocal();
      complex8.sinh();
      Complex complex9 = Complex.ZERO;
      complex9.tan();
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.nthRoot(22);
      Complex complex1 = complex0.INF.divide(1.0);
      complex0.toString();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.multiply(1.0);
      Complex complex4 = complex3.ZERO.pow((double) 22);
      complex2.ONE.sinh();
      Complex complex5 = complex4.conjugate();
      complex5.ZERO.sqrt1z();
      complex4.ONE.pow((double) 22);
      Complex complex6 = complex0.createComplex(1.0, 1.0);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex6.NaN.divide(complex1);
      Complex complex9 = complex8.I.createComplex(1.0, 1.0);
      Complex complex10 = complex9.NaN.subtract((-2119.099919518731));
      Complex complex11 = complex2.log();
      Complex complex12 = complex11.ZERO.cos();
      complex12.INF.asin();
      Complex complex13 = complex7.reciprocal();
      complex13.ZERO.hashCode();
      complex11.ONE.getArgument();
      Complex complex14 = complex7.multiply(0);
      complex7.cos();
      Complex complex15 = complex10.tanh();
      complex14.add((-4337.946036073207));
      complex15.divide(20.0);
      complex10.subtract((double) 22);
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf(4430.541323936515, 0.0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex2.log();
      Complex complex8 = complex6.pow(complex2);
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = Complex.valueOf(4430.541323936515, (-4478.8899));
      Complex complex11 = complex10.createComplex(4430.541323936515, 9.253781621373885E29);
      Complex complex12 = complex9.pow(2.0);
      complex11.cos();
      Complex complex13 = complex8.tan();
      complex12.cosh();
      complex7.abs();
      complex6.subtract(1547.21057472);
      complex0.sqrt1z();
      Complex complex14 = complex5.sin();
      complex5.isInfinite();
      complex14.negate();
      Complex complex15 = Complex.I;
      complex13.readResolve();
      Object object0 = complex14.readResolve();
      complex10.equals(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.ZERO.createComplex(1315.54360439, 1033.970256);
      Complex complex3 = complex0.pow((-1417.7001577046838));
      Complex complex4 = complex0.createComplex((-55.0), (-55.0));
      Complex complex5 = complex3.cos();
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = complex1.createComplex((-55.0), (-1417.7001577046838));
      Complex complex8 = complex4.subtract(2.72972449891179E-45);
      Complex complex9 = complex0.log();
      complex5.cos();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex10.reciprocal();
      complex11.hashCode();
      complex1.getArgument();
      Complex complex12 = complex5.multiply(4421);
      complex6.cos();
      Complex complex13 = complex9.cos();
      complex7.pow(complex4);
      complex13.pow(complex1);
      complex3.isInfinite();
      complex13.abs();
      complex12.getArgument();
      Complex complex14 = Complex.ONE;
      complex14.atan();
      complex10.reciprocal();
      complex8.sinh();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.nthRoot(22);
      Complex complex1 = complex0.INF.divide(1.0);
      complex0.toString();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.multiply(1.0);
      Complex complex4 = complex3.ZERO.pow((double) 22);
      Complex complex5 = complex2.ONE.sinh();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.ZERO.sqrt1z();
      complex4.sqrt1z();
      Complex complex8 = complex5.multiply(complex1);
      Complex complex9 = complex5.pow(complex7);
      Complex complex10 = complex9.subtract(0.5624021291732788);
      Complex complex11 = new Complex(4.192622496534835E12);
      complex11.atan();
      complex5.isNaN();
      Complex complex12 = Complex.I;
      complex12.isInfinite();
      complex10.pow((double) 22);
      Complex complex13 = new Complex(1973.070102814453, 4.192622496534835E12);
      complex8.pow(complex13);
      complex2.getImaginary();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1005.9428294237));
      Complex complex1 = complex0.createComplex(1267.1317467, (-4144.50168645968));
      Complex complex2 = complex0.reciprocal();
      complex2.readResolve();
      Complex complex3 = Complex.valueOf((-4144.50168645968), (-0.09088450866185192));
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.log();
      Complex complex6 = Complex.valueOf(1267.1317467);
      complex0.pow((-363.9728021923776));
      Complex complex7 = complex1.add((-4144.50168645968));
      complex5.cosh();
      Complex.valueOf((-1005.9428294237));
      complex6.hashCode();
      complex7.exp();
      complex0.add(complex1);
      Complex complex8 = complex0.cos();
      complex8.exp();
      complex0.getReal();
      Complex complex9 = new Complex((-4144.50168645968));
      Complex complex10 = complex9.subtract(complex0);
      complex6.abs();
      Complex complex11 = new Complex(3312399.0, 492.93);
      complex11.acos();
      complex10.cos();
      Complex.valueOf((-363.9728021923776));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = (Complex)complex1.ONE.readResolve();
      complex1.INF.subtract(complex0);
      complex0.hashCode();
      complex0.getArgument();
      Complex complex3 = complex0.atan();
      complex3.multiply(0.0);
      complex3.add(0.0);
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.valueOf(1952.50622747, 2.0);
      complex5.add(complex4);
      complex0.toString();
      complex2.getReal();
      complex4.sqrt();
      Complex complex6 = complex5.tan();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-804.5374980810967));
      complex0.isNaN();
      Complex complex1 = complex0.log();
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.add((-20.0));
      Complex complex7 = complex4.log();
      complex0.add(complex7);
      complex6.toString();
      complex2.getReal();
      complex5.sqrt();
      complex0.tan();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.2906999044), (-32.0857386885));
      complex0.NaN.log();
      Complex complex1 = Complex.valueOf((-32.0857386885));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.multiply((-1820.0));
      Complex complex4 = Complex.ZERO;
      complex4.readResolve();
      complex3.acos();
      Complex complex5 = complex0.subtract((-1792.08061995261));
      Complex complex6 = complex5.cosh();
      complex0.exp();
      complex3.add(complex0);
      complex3.tanh();
      complex1.add((-1820.0));
      complex6.divide(Double.POSITIVE_INFINITY);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.2906999044), (-32.0857386885));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = Complex.valueOf((-32.0857386885));
      Complex complex3 = complex0.multiply(complex2);
      complex2.nthRoot(3498);
      complex2.toString();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.acos();
      complex4.tanh();
      Complex complex6 = complex3.acos();
      complex5.log();
      complex1.toString();
      complex1.multiply((-777.2906999044));
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf(4430.541323936515, 0.0);
      Complex complex3 = complex0.NaN.log();
      complex0.isNaN();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.reciprocal();
      complex5.hashCode();
      complex4.getArgument();
      complex2.multiply((-1489));
      Complex complex6 = complex1.cos();
      complex0.cos();
      Complex complex7 = complex4.pow(complex1);
      Complex complex8 = complex7.pow(complex4);
      complex4.isInfinite();
      complex3.abs();
      complex6.getArgument();
      Complex complex9 = Complex.I;
      complex9.atan();
      complex2.reciprocal();
      Complex complex10 = Complex.INF;
      complex10.sinh();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.sqrt1z();
      complex0.INF.sqrt1z();
      complex2.I.sqrt1z();
      complex2.ZERO.pow(0.0);
      Complex complex3 = complex1.ZERO.reciprocal();
      complex3.NaN.readResolve();
      Complex complex4 = complex0.conjugate();
      complex4.NaN.log();
      Complex.valueOf((-1171.4177739363606));
      Complex complex5 = complex2.pow(152.3117065278919);
      complex0.add(152.3117065278919);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.createComplex(152.3117065278919, 152.3117065278919);
      complex1.hashCode();
      complex0.exp();
      complex7.add(complex4);
      complex5.I.sin();
      Complex complex8 = complex1.cos();
      complex8.ZERO.exp();
      complex8.getReal();
      Complex complex9 = complex2.subtract(complex8);
      complex5.abs();
      complex2.acos();
      complex9.divide((-0.27424545633251773));
      Complex.valueOf(563.4992283476, 563.4992283476);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.619010749352923E-8));
      Complex complex1 = Complex.valueOf(9.396000024637834E-209, 1843.34293);
      Complex.valueOf(3136.09);
      Complex complex2 = complex0.I.add(complex1);
      complex2.ZERO.nthRoot(1);
      complex0.acos();
      complex1.ONE.getField();
      Complex complex3 = complex1.add(800.540390492915);
      complex3.ONE.log();
      Complex complex4 = complex3.INF.tanh();
      complex0.abs();
      Complex complex5 = complex0.divide(858.145844);
      complex5.getField();
      Complex complex6 = complex3.INF.cos();
      complex0.asin();
      complex3.add(complex4);
      complex1.sin();
      complex0.sqrt1z();
      Complex complex7 = Complex.ZERO;
      complex6.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3011.7310738));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.I.multiply((-2619));
      complex2.tanh();
      Complex complex3 = complex1.ZERO.conjugate();
      complex3.I.tanh();
      complex1.ZERO.multiply(complex2);
      complex3.INF.reciprocal();
      complex0.isInfinite();
      complex0.getArgument();
      complex2.ZERO.asin();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-884.56659518));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.multiply(359);
      Complex complex3 = complex2.INF.multiply((-884.56659518));
      complex3.I.cosh();
      Complex complex4 = complex0.I.add(complex1);
      complex4.ONE.getArgument();
      Complex complex5 = Complex.valueOf((-884.56659518), (-884.56659518));
      Complex complex6 = Complex.valueOf(1666.01196);
      complex6.ONE.log();
      Complex complex7 = new Complex((-884.56659518));
      complex1.INF.reciprocal();
      Complex complex8 = complex0.subtract(complex7);
      Complex complex9 = complex8.INF.log();
      complex9.ZERO.hashCode();
      Complex complex10 = complex8.INF.divide(complex1);
      complex8.NaN.multiply((-884.56659518));
      complex1.abs();
      complex8.tanh();
      complex4.INF.multiply(1);
      Complex complex11 = complex0.exp();
      complex11.hashCode();
      complex4.abs();
      Complex complex12 = complex3.cos();
      complex12.INF.sin();
      complex7.ZERO.exp();
      Complex complex13 = complex5.asin();
      complex13.ZERO.subtract((double) 359);
      complex13.ZERO.createComplex(1.0, 0.0);
      complex10.multiply(17);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-2823.223371));
      Complex complex1 = complex0.ONE.multiply(190);
      Complex complex2 = Complex.valueOf((-2823.223371));
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex1.NaN.tan();
      complex1.I.divide(complex2);
      complex2.ZERO.subtract(complex4);
      complex3.I.getArgument();
      complex0.readResolve();
      complex0.ONE.pow(0.0);
      Complex complex6 = complex1.subtract((double) 190);
      complex6.abs();
      complex2.cos();
      Complex complex7 = complex5.asin();
      complex1.nthRoot(190);
      complex1.getField();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.nthRoot(22);
      Complex complex1 = complex0.INF.divide(1.0);
      complex0.toString();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.multiply(1.0);
      Complex complex4 = complex3.ZERO.pow((double) 22);
      Complex complex5 = complex2.ONE.sinh();
      Complex complex6 = complex4.conjugate();
      complex6.ZERO.sqrt1z();
      complex4.ONE.pow((double) 22);
      Complex complex7 = complex0.createComplex(1.0, 1.0);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex7.NaN.divide(complex1);
      Complex complex10 = complex9.I.createComplex(1.0, 1.0);
      Complex complex11 = complex10.NaN.subtract((-2119.099919518731));
      Complex complex12 = complex2.log();
      Complex complex13 = complex12.ZERO.cos();
      Complex complex14 = complex13.INF.asin();
      Complex complex15 = complex8.reciprocal();
      complex15.ZERO.hashCode();
      complex12.ONE.getArgument();
      Complex complex16 = complex8.multiply(0);
      complex8.cos();
      complex9.cos();
      Complex complex17 = complex8.pow(complex5);
      complex14.pow(complex11);
      complex9.isInfinite();
      complex1.abs();
      complex12.ONE.getArgument();
      complex17.atan();
      complex13.reciprocal();
      complex9.sinh();
      complex16.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(892.10336414);
      Complex complex1 = complex0.sqrt1z();
      complex1.NaN.toString();
      complex1.I.hashCode();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex3.ONE.pow(complex2);
      complex3.divide(complex2);
      Complex complex5 = complex4.INF.acos();
      complex5.I.negate();
      Complex complex6 = complex5.I.add(892.10336414);
      complex6.acos();
      Complex complex7 = complex0.acos();
      complex0.isNaN();
      complex7.NaN.log();
      complex3.ONE.getField();
      try { 
        complex3.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2260.3485491476004));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex0.sin();
      complex4.INF.divide(complex1);
      complex0.hashCode();
      complex3.I.add(complex0);
      Complex complex5 = complex3.I.subtract((-2285.3919979));
      complex5.I.getField();
      complex4.getField();
      complex2.I.multiply((-2260.3485491476004));
      complex0.isInfinite();
      complex3.exp();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.sqrt();
      complex1.ONE.readResolve();
      complex1.INF.subtract(complex0);
      complex0.hashCode();
      complex0.getArgument();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.multiply(0.0);
      complex3.ONE.createComplex(0.0, 0.0);
      complex3.add(0.0);
      Object object0 = new Object();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-777.2906999044), (-32.0857386885));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = Complex.valueOf((-32.0857386885));
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.ONE.multiply((-1820.0));
      Complex.valueOf(0.0);
      complex4.INF.sqrt1z();
      Complex complex5 = complex2.INF.log();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.INF.add(complex1);
      Complex.valueOf(0.10555580258369446);
      complex7.I.cos();
      complex7.ONE.sin();
      complex2.getArgument();
      Complex complex8 = complex5.tanh();
      complex5.isInfinite();
      Complex complex9 = Complex.valueOf(0.0, 1652.34);
      Complex complex10 = complex9.ZERO.sqrt1z();
      complex10.I.log();
      complex3.toString();
      complex3.asin();
      complex8.negate();
      complex0.sin();
      complex9.pow(0.0);
      Complex complex11 = Complex.I;
      complex10.multiply(complex11);
      complex9.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0156621983963848E77);
      Complex complex1 = complex0.ONE.sin();
      complex1.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex0.ZERO.conjugate();
      Complex.valueOf((-1.0), 20.0);
      complex2.INF.add(2.0156621983963848E77);
      complex0.getReal();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex0.NaN.createComplex(2.0156621983963848E77, 20.0);
      Complex complex6 = complex3.divide(complex5);
      complex4.NaN.pow(497.539967);
      complex4.acos();
      complex2.tanh();
      complex1.hashCode();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.I.multiply(0);
      Complex complex3 = complex2.NaN.multiply(complex0);
      complex3.I.sin();
      Complex complex4 = complex1.ONE.tan();
      complex4.I.toString();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = Complex.valueOf(0.0);
      complex1.isNaN();
      Complex complex8 = complex0.cosh();
      complex8.NaN.divide(complex1);
      Complex complex9 = complex6.asin();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex10.I.sin();
      complex4.ONE.reciprocal();
      Complex complex12 = complex9.I.multiply(0.0);
      complex8.getField();
      complex6.divide(complex9);
      complex10.cosh();
      Complex complex13 = Complex.valueOf(0.0, (-1030.5691906));
      Complex.valueOf((-2564.552));
      complex7.hashCode();
      Complex complex14 = complex12.reciprocal();
      complex14.sinh();
      Complex complex15 = complex13.exp();
      complex10.sqrt();
      complex5.log();
      complex15.pow(complex11);
      complex0.add((-20.0));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.5607312917709351, Double.POSITIVE_INFINITY);
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1076);
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ONE.createComplex(0.0, 1076);
      Complex complex5 = complex3.ONE.tan();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex6.INF.subtract((-409.24660456436));
      complex4.I.multiply((-409.24660456436));
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex0.INF.sqrt();
      complex9.ONE.getArgument();
      Complex complex10 = complex1.multiply(1315);
      Complex complex11 = complex3.ONE.tan();
      complex11.INF.multiply((double) 1076);
      Complex complex12 = complex2.subtract(complex10);
      complex3.negate();
      complex3.pow(0.0);
      Complex complex13 = complex2.negate();
      Complex complex14 = complex13.NaN.subtract(complex5);
      complex13.tanh();
      complex4.tan();
      complex12.sinh();
      complex3.hashCode();
      Complex complex15 = complex13.subtract((-409.24660456436));
      Complex complex16 = complex13.subtract((-409.24660456436));
      Complex complex17 = complex14.log();
      complex6.equals(complex1);
      complex17.tan();
      complex17.subtract(complex15);
      complex8.pow(complex16);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.conjugate();
      complex5.ZERO.getField();
      complex5.sqrt1z();
      Complex complex6 = complex1.acos();
      Complex complex7 = Complex.valueOf(0.6338034868240356);
      complex2.I.add(complex7);
      complex2.abs();
      complex1.ONE.cos();
      Complex complex8 = complex6.NaN.tan();
      complex8.I.acos();
      Complex complex9 = complex5.sinh();
      complex9.log();
      Complex complex10 = complex9.ONE.pow(complex4);
      complex2.NaN.sqrt1z();
      complex6.createComplex(0.05046287178993225, 0.6338034868240356);
      complex10.ONE.pow(Double.NaN);
      complex6.cos();
      Complex complex11 = complex2.tan();
      complex11.ZERO.cosh();
      complex0.abs();
      Complex complex12 = complex0.ONE.subtract(0.6338034868240356);
      complex7.sqrt1z();
      Complex complex13 = complex3.sin();
      complex7.abs();
      complex13.multiply(1);
      complex6.isInfinite();
      complex0.negate();
      complex12.getField();
      Complex complex14 = Complex.I;
      Object object0 = complex14.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = (-929.5817317);
      Complex complex0 = Complex.valueOf((-929.5817317));
      complex0.I.cos();
      double double1 = 747.6621138279281;
      Complex complex1 = Complex.valueOf((-929.5817317), 747.6621138279281);
      Complex complex2 = complex1.I.multiply(complex0);
      complex2.ZERO.sqrt1z();
      complex0.I.cosh();
      complex1.ONE.multiply(complex2);
      int int0 = (-237);
      try { 
        complex0.nthRoot((-237));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -237
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1005.9428294237));
      Complex complex1 = complex0.createComplex(1267.1317467, Double.POSITIVE_INFINITY);
      complex0.INF.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.tanh();
      complex2.isNaN();
      complex0.getImaginary();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.add(1267.1317467);
      complex6.I.log();
      Complex complex7 = complex5.add(complex4);
      complex7.I.toString();
      complex3.getReal();
      complex4.sqrt();
      complex1.tan();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1770.8839);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.NaN.exp();
      complex2.ONE.abs();
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex0.ZERO.acos();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex9.ONE.acos();
      complex10.ONE.multiply((-4246));
      Complex complex11 = complex7.ZERO.asin();
      complex4.log();
      complex0.sin();
      complex4.getImaginary();
      complex4.negate();
      complex1.abs();
      Complex complex12 = complex2.sin();
      Complex.valueOf(2218.0, 1770.8839);
      complex3.multiply(166);
      Complex complex13 = complex3.sqrt();
      complex2.ONE.toString();
      Complex complex14 = complex5.pow(6.283185307179586);
      complex5.abs();
      complex13.nthRoot(166);
      complex12.add(complex4);
      complex5.exp();
      complex8.isInfinite();
      Complex complex15 = complex11.multiply(complex14);
      complex12.add(complex15);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.INF.createComplex(0.0, 0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.add(complex1);
      complex5.ONE.getArgument();
      complex0.toString();
      Complex complex6 = complex0.add(1953.7736160033105);
      Complex complex7 = complex1.I.sqrt1z();
      complex7.NaN.sinh();
      Complex complex8 = complex6.NaN.log();
      complex8.add(complex4);
      Complex.valueOf(0.35745590925216675, (-504.148));
      complex2.getReal();
      Complex complex9 = complex0.add(903.4891761266);
      Complex complex10 = Complex.valueOf(Double.NaN);
      Complex complex11 = complex10.I.subtract(Double.NaN);
      complex9.I.cos();
      complex9.divide(complex1);
      complex9.hashCode();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex11.tanh();
      complex13.NaN.hashCode();
      complex12.acos();
      complex13.getReal();
      Complex.valueOf(Double.NaN, (-504.148));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1718.39501);
      complex0.ZERO.acos();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex0.tan();
      complex4.ZERO.divide(0.6808650493621826);
      complex4.I.sqrt();
      complex4.INF.hashCode();
      Complex complex5 = complex0.divide(complex4);
      complex5.I.toString();
      Complex complex6 = complex5.createComplex(0.0, 0.0);
      complex6.ZERO.toString();
      complex6.I.sqrt();
      Complex complex7 = complex4.log();
      Complex complex8 = complex7.I.asin();
      complex0.getImaginary();
      complex0.subtract(complex1);
      Complex complex9 = complex3.add(Double.POSITIVE_INFINITY);
      complex9.ONE.getArgument();
      complex3.multiply(complex9);
      Complex.valueOf((-414.49437075567766), Double.POSITIVE_INFINITY);
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(3752.220690424677);
      Complex complex1 = Complex.NaN;
      complex1.NaN.subtract(3752.220690424677);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.createComplex(3752.220690424677, (-524.37078071951));
      complex2.I.tan();
      Complex complex3 = Complex.valueOf(3752.220690424677);
      complex3.INF.exp();
      Complex complex4 = new Complex(3752.220690424677);
      complex0.NaN.pow(complex4);
      Complex complex5 = complex0.sinh();
      complex5.I.multiply((-1366.8223131894));
      complex2.multiply(3752.220690424677);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.sqrt1z();
      complex0.INF.sqrt1z();
      Complex complex3 = complex2.I.sqrt1z();
      complex2.ZERO.pow(0.0);
      Complex complex4 = complex1.ZERO.reciprocal();
      complex4.NaN.readResolve();
      Complex complex5 = complex0.conjugate();
      complex5.NaN.log();
      Complex.valueOf((-1171.4177739363606));
      Complex complex6 = complex2.pow(152.3117065278919);
      Complex complex7 = complex0.add(152.3117065278919);
      complex7.cosh();
      Complex complex8 = complex5.createComplex(152.3117065278919, 152.3117065278919);
      complex1.hashCode();
      complex0.exp();
      complex8.add(complex5);
      Complex complex9 = complex1.cos();
      complex9.ZERO.exp();
      complex9.getReal();
      complex2.subtract(complex9);
      complex6.abs();
      complex2.acos();
      complex3.cos();
      Complex.valueOf(993.74314816);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2323.233902));
      complex0.hashCode();
      complex0.NaN.hashCode();
      Complex complex1 = complex0.acos();
      complex1.I.createComplex((-2323.233902), 0.0);
      complex1.log();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(0.0, (-2323.233902));
      complex3.NaN.asin();
      complex3.ZERO.readResolve();
      complex2.ZERO.conjugate();
      complex2.multiply(complex0);
      complex2.INF.asin();
      complex0.cos();
      Complex complex4 = complex2.divide(0.0);
      complex0.getField();
      complex2.isInfinite();
      complex4.sinh();
      complex3.sinh();
      complex3.subtract(495.78858);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(441.0, 441.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.pow(441.0);
      complex0.ONE.toString();
      complex1.log();
      complex2.divide(4618.2659);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.8414709568023682);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.pow(0.8414709568023682);
      Complex complex3 = complex1.ZERO.pow(0.0);
      Complex complex4 = complex0.subtract(0.8414709568023682);
      Complex complex5 = complex0.reciprocal();
      complex5.INF.subtract((-1.0));
      Complex complex6 = Complex.valueOf(0.8414709568023682, (-1239.72120951));
      complex6.conjugate();
      complex0.add(0.8414709568023682);
      Complex complex7 = complex4.multiply(complex1);
      complex0.ZERO.log();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex0.NaN.conjugate();
      complex8.multiply(complex0);
      Complex complex10 = complex7.NaN.acos();
      complex4.ONE.add(complex8);
      complex8.ZERO.toString();
      complex7.subtract(complex8);
      Complex complex11 = complex9.divide(0.8414709568023682);
      complex11.tanh();
      complex2.equals(complex3);
      complex10.ONE.add(complex1);
      Complex complex12 = complex0.conjugate();
      complex12.add(complex10);
      complex6.cosh();
      complex1.isNaN();
      complex10.sqrt1z();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.ZERO.createComplex(1315.54360439, 1033.970256);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = complex4.I.pow(complex2);
      Complex complex6 = complex0.subtract(0.5624021291732788);
      complex0.INF.atan();
      complex1.isNaN();
      complex1.isInfinite();
      Complex complex7 = complex6.pow(1033.970256);
      complex7.I.pow(complex2);
      complex5.getImaginary();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.ONE.subtract(1867.76);
      Complex complex2 = complex1.INF.negate();
      complex2.divide(complex0);
      Complex complex3 = complex1.ONE.multiply((-1778.737));
      complex3.INF.nthRoot(1);
      Complex complex4 = complex0.multiply(0);
      Complex complex5 = complex4.add(1867.76);
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex1.ZERO.add(2.0);
      complex8.sin();
      complex7.ONE.conjugate();
      Complex complex9 = complex6.subtract(1440.461713);
      complex9.ONE.abs();
      complex0.isNaN();
      complex1.equals(complex0);
      complex4.sqrt();
      complex7.getReal();
      complex4.sqrt();
      Complex complex10 = complex5.atan();
      complex10.ONE.hashCode();
      complex4.createComplex(1110.2924933552, 477.7886745528);
      Complex complex11 = Complex.valueOf(4210.28, (double) 1);
      complex11.ONE.nthRoot(667);
      complex10.multiply(17);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      complex1.INF.nthRoot(1);
      Complex complex2 = complex0.createComplex(28.2562411, 2075.97701479464);
      Complex complex3 = complex2.NaN.divide(complex1);
      complex0.getArgument();
      complex1.NaN.nthRoot(1140);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.ZERO.subtract(complex3);
      complex5.nthRoot(1);
      complex0.NaN.abs();
      complex0.createComplex(2075.97701479464, (-574.394549015));
      complex2.isNaN();
      Complex complex6 = new Complex(1286.25, 6.283185307179586);
      Complex complex7 = complex6.ONE.reciprocal();
      complex3.equals(complex6);
      complex7.nthRoot(1);
      complex2.conjugate();
      complex1.add(complex5);
      complex2.asin();
      complex4.add(complex7);
      complex0.negate();
      Complex.valueOf((double) 1, 0.0);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.I.log();
      complex0.I.add((-383.017));
      complex0.getArgument();
      complex0.getField();
      complex0.NaN.hashCode();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.conjugate();
      complex5.INF.nthRoot(2413);
      complex0.INF.cosh();
      complex4.I.readResolve();
      complex1.I.getArgument();
      Complex complex6 = complex4.multiply(0.0);
      Complex complex7 = complex6.multiply(462);
      Complex complex8 = complex7.ONE.pow(1.2479464696643861E-47);
      complex7.INF.createComplex(0.0, (-2647.1154709));
      Complex.valueOf(0.0);
      complex7.sqrt1z();
      Complex complex9 = complex1.divide(complex7);
      complex9.ONE.pow(0.0);
      complex8.INF.toString();
      complex9.ZERO.toString();
      Complex complex10 = complex8.sinh();
      complex10.INF.hashCode();
      Complex complex11 = complex0.pow(complex9);
      complex3.divide(206.6912638007);
      complex11.subtract((double) 2413);
      complex3.multiply((-9.161340309319204E252));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      complex1.tan();
      Complex complex2 = complex0.divide(0.0);
      complex2.ONE.multiply(complex1);
      complex1.reciprocal();
      Complex complex3 = complex1.log();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.nthRoot(1);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.createComplex(1, 0.0);
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex2.ONE.asin();
      Complex complex5 = complex0.NaN.sin();
      Complex complex6 = complex1.NaN.divide(0.0);
      Complex complex7 = complex1.NaN.sqrt();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.ONE.atan();
      complex9.INF.divide(0.0);
      complex7.NaN.toString();
      complex7.NaN.toString();
      Complex complex10 = complex9.ZERO.sin();
      complex10.subtract(complex2);
      complex1.equals(complex8);
      complex8.getField();
      Complex complex11 = complex8.sinh();
      complex11.ONE.abs();
      Complex complex12 = complex5.cos();
      complex12.INF.divide(complex6);
      complex7.negate();
      complex4.add(complex2);
      complex2.getReal();
      complex3.exp();
      complex9.getImaginary();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-2294.0));
      Complex complex1 = complex0.I.asin();
      complex1.ONE.nthRoot(2909);
      complex1.toString();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.tanh();
      complex2.acos();
      complex0.log();
      complex2.toString();
      Complex complex5 = complex4.multiply(321.3474932119668);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex.valueOf(4430.541323936515, 0.0);
      Complex complex2 = complex0.NaN.log();
      complex0.isNaN();
      complex2.add((-820.10984354151));
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex0.hashCode();
      Complex.valueOf(52.183140327203);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.acos();
      complex1.ONE.sinh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.sqrt1z();
      complex2.isNaN();
      complex3.getArgument();
      complex2.getArgument();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(1);
      complex0.INF.hashCode();
      complex1.multiply(1);
      complex1.NaN.abs();
      complex1.I.hashCode();
      Complex complex2 = complex0.pow(0.03831886500120163);
      Complex complex3 = complex2.NaN.divide(Double.NaN);
      Complex complex4 = complex3.ONE.cos();
      complex0.ONE.tanh();
      complex0.divide(0.03831886500120163);
      complex2.INF.pow((double) 1);
      Complex complex5 = complex4.tanh();
      complex5.ZERO.exp();
      complex2.pow(complex1);
      complex1.hashCode();
      complex5.sin();
      Complex complex6 = complex1.negate();
      complex5.hashCode();
      complex2.nthRoot(1);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-804.5374980810967));
      complex0.isNaN();
      Complex complex1 = complex0.log();
      complex1.ZERO.readResolve();
      complex0.ZERO.acos();
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.exp();
      complex0.add(complex4);
      Complex complex5 = complex2.tanh();
      complex2.add(Double.POSITIVE_INFINITY);
      complex5.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-3412.93));
      Complex complex1 = Complex.valueOf((-3412.93), (-3412.93));
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex2.sinh();
      complex3.INF.divide(complex0);
      complex1.I.toString();
      Complex complex4 = complex1.multiply((-3412.93));
      complex2.ZERO.hashCode();
      complex4.NaN.atan();
      Complex complex5 = complex0.add((-3412.93));
      complex5.getImaginary();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.asin();
      complex3.createComplex((-1.686490951669855E-7), (-3083.59587));
      Complex complex8 = Complex.valueOf((-4.25782656420497E-8));
      Complex complex9 = complex8.INF.cos();
      Complex complex10 = complex5.exp();
      complex10.tanh();
      complex10.INF.cosh();
      Complex complex11 = complex9.I.pow((-3083.59587));
      complex11.NaN.divide(1148.5906216126);
      complex9.ONE.exp();
      Complex complex12 = complex2.subtract(complex5);
      complex1.sqrt1z();
      Complex complex13 = complex7.ONE.negate();
      complex13.NaN.multiply(complex3);
      complex2.hashCode();
      complex8.multiply(complex3);
      complex12.INF.cos();
      complex5.tanh();
      complex1.negate();
      complex12.asin();
      complex10.cosh();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.sinh();
      Complex.valueOf((-735.451632040895));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.divide(705.758);
      complex0.reciprocal();
      Complex complex3 = complex0.sin();
      complex0.readResolve();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.NaN.negate();
      Complex.valueOf(705.758, 705.758);
      Complex complex9 = complex0.exp();
      complex4.hashCode();
      Complex complex10 = complex9.log();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex10.add(complex11);
      complex10.I.acos();
      complex12.NaN.sqrt1z();
      Complex complex13 = complex10.conjugate();
      Complex.valueOf(0.0);
      complex13.cosh();
      complex2.equals((Object) null);
      complex10.tanh();
      complex6.sinh();
      complex7.getReal();
      complex8.abs();
      complex7.exp();
      complex10.negate();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      complex0.I.hashCode();
      Complex complex2 = complex0.log();
      complex0.abs();
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.ONE.reciprocal();
      complex1.getArgument();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex0.pow(9.92958982547828E-153);
      Complex complex8 = complex7.NaN.atan();
      complex8.ZERO.toString();
      Complex complex9 = complex3.sqrt();
      complex9.ZERO.subtract(complex7);
      complex9.INF.asin();
      Complex complex10 = complex9.INF.atan();
      complex10.ONE.subtract(complex9);
      Complex complex11 = complex8.sin();
      Complex complex12 = complex11.ONE.multiply(complex2);
      Complex complex13 = complex11.tanh();
      Complex complex14 = complex8.subtract(complex2);
      complex14.INF.add(complex1);
      Complex complex15 = complex4.cos();
      complex15.NaN.toString();
      complex13.multiply(complex3);
      complex12.ZERO.getArgument();
      complex3.getField();
      complex6.getArgument();
      complex12.tan();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.INF.conjugate();
      complex0.INF.pow(complex1);
      Complex complex4 = complex1.multiply(186);
      complex4.I.multiply(0.0);
      complex0.NaN.pow(complex3);
      try { 
        complex1.ZERO.nthRoot((-1279));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,279
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.subtract(complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      complex0.hashCode();
      assertFalse(complex0.equals((Object)complex2));
  }
}
