/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:00:08 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.6033771876085207E-109, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
      Complex.valueOf(8.5555986, 1.6033771876085207E-109);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.valueOf((-2691.92568898901), Double.POSITIVE_INFINITY);
      complex1.ONE.abs();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-1.6059226011778748E112), Double.POSITIVE_INFINITY);
      complex1.asin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = new Complex(0.003);
      complex4.divide(complex5);
      Complex complex6 = complex3.sqrt1z();
      complex3.sin();
      Complex.valueOf((-6.226950161026087E-113), (-634.5178823732459));
      Complex complex7 = new Complex(0.01934296265244484, 1932.3);
      complex1.add(complex6);
      complex6.cos();
      complex7.abs();
      Complex complex8 = Complex.INF;
      complex2.multiply((-659.4522));
      Complex complex9 = Complex.NaN;
      complex9.pow((-634.5178823732459));
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.nthRoot(1217);
      complex1.abs();
      Complex complex2 = complex0.createComplex(1.6033771876085207E-109, 1.0);
      complex0.asin();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.INF;
      complex4.divide(complex0);
      Complex complex5 = complex1.divide(complex2);
      complex5.sqrt1z();
      Complex complex6 = new Complex((-20.0), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex1.nthRoot(1206);
      complex0.abs();
      Complex complex2 = complex0.createComplex(294.72504219787, 1206);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.divide(complex6);
      complex4.divide(complex5);
      complex7.sqrt1z();
      Complex.valueOf(1.1174279267498045E-159, (-1.6059226011778748E112));
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, (-1192.99234377));
      Complex complex9 = complex2.cos();
      Complex complex10 = complex5.atan();
      complex10.multiply(1163.8621367);
      complex8.subtract(complex2);
      complex9.abs();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6059226011778748E112), (-1.6059226011778748E112));
      Complex complex1 = complex0.multiply(236);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.I.sin();
      complex1.ONE.readResolve();
      Complex complex3 = complex0.INF.negate();
      complex3.NaN.getArgument();
      Complex complex4 = complex3.INF.add((-2010.1523516));
      complex4.ONE.toString();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ONE.multiply(382);
      complex6.asin();
      Complex complex7 = complex6.I.divide(Double.NaN);
      Complex complex8 = complex5.log();
      complex0.NaN.multiply(complex8);
      Complex complex9 = complex6.acos();
      Complex complex10 = complex9.sin();
      complex9.INF.add(complex8);
      Complex complex11 = complex10.I.tanh();
      complex8.readResolve();
      complex9.abs();
      Complex complex12 = complex7.reciprocal();
      complex3.sin();
      complex9.sqrt();
      Complex complex13 = complex11.tan();
      Complex complex14 = complex13.multiply(complex12);
      complex14.I.multiply(complex13);
      Complex complex15 = complex13.tanh();
      complex8.pow(complex15);
      complex10.sinh();
      Complex complex16 = complex1.sqrt1z();
      Complex complex17 = complex13.reciprocal();
      complex16.pow(complex4);
      complex12.sin();
      complex11.createComplex((-1142.3169671052574), Double.NaN);
      complex17.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(162.72541, 162.72541);
      complex0.abs();
      Complex complex1 = Complex.valueOf(19.40588182684204);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = new Complex(0.0012928715507796635);
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex1.ZERO.sin();
      Complex complex7 = complex2.asin();
      complex7.ZERO.toString();
      complex0.ONE.divide(complex1);
      complex3.abs();
      complex0.tan();
      complex6.ZERO.add(0.0012928715507796635);
      complex4.subtract(0.0012928715507796635);
      Complex complex8 = complex6.subtract(complex5);
      complex2.asin();
      complex8.cosh();
      Complex complex9 = new Complex(162.72541);
      complex5.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.5403023058681398);
      complex0.conjugate();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.add(complex0);
      Complex.valueOf((-754.440147324088));
      complex0.NaN.multiply((-754.440147324088));
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.asin();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2324.52587846985);
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.ZERO.exp();
      complex3.INF.log();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.ONE.multiply(Double.NaN);
      Complex complex8 = complex6.INF.multiply(Double.NaN);
      Complex complex9 = complex2.ONE.log();
      complex9.INF.subtract(complex7);
      Complex complex10 = complex8.add(complex5);
      complex10.NaN.reciprocal();
      Complex complex11 = complex2.tanh();
      complex11.tan();
      complex11.readResolve();
      complex0.sin();
      complex1.toString();
      Complex complex12 = complex3.multiply((-1.0));
      complex0.tan();
      Complex.valueOf((-4901.7439));
      complex12.add(complex8);
      complex11.multiply(1597);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1813));
      complex1.abs();
      complex0.toString();
      Complex complex2 = complex1.sqrt();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2000.4941696112));
      Complex complex1 = Complex.valueOf(20.0, (-2713.9964620266087));
      Complex complex2 = complex1.sqrt();
      Complex.valueOf((-590.73434247172));
      complex2.reciprocal();
      complex0.abs();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5529124364751804E9));
      complex0.I.add(Double.NaN);
      Complex complex1 = Complex.valueOf((-1.5529124364751804E9), (-1.5529124364751804E9));
      Complex complex2 = complex1.sqrt();
      complex2.conjugate();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.reciprocal();
      try { 
        complex4.nthRoot((-3871));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,871
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = (-740.7013104914613);
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.abs();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.readResolve();
      complex0.abs();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.ZERO.add(complex2);
      complex3.ONE.abs();
      complex0.getArgument();
      Complex complex4 = complex1.subtract(0.5249826908111572);
      complex4.ONE.readResolve();
      complex2.ZERO.pow(Double.NaN);
      Complex complex5 = complex4.asin();
      complex5.ONE.subtract(Double.NaN);
      Complex complex6 = complex1.cos();
      complex2.acos();
      complex6.log();
      Complex complex7 = complex2.exp();
      complex0.sinh();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5529124364751804E9));
      Complex.valueOf((-1.5529124364751804E9), 2.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.conjugate();
      complex2.reciprocal();
      complex0.abs();
      Complex complex3 = new Complex((-1.0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.tanh();
      complex2.add(complex1);
      Complex complex3 = Complex.valueOf((-754.440147324088));
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      complex3.pow(complex4);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      ((Complex) object0).NaN.sqrt();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.divide(complex1);
      complex2.ZERO.pow((-1.8186531860919786E-4));
      complex1.equals(complex0);
      Complex complex3 = new Complex((-2841.0));
      complex0.negate();
      Complex complex4 = complex1.sqrt();
      complex4.abs();
      Complex complex5 = complex4.subtract(complex0);
      complex2.add(complex5);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5529124364751804E9));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.valueOf((-1.5529124364751804E9), (-1.5529124364751804E9));
      Complex complex3 = complex0.sqrt();
      complex1.I.conjugate();
      Complex complex4 = complex3.reciprocal();
      complex3.ONE.nthRoot(1206);
      complex4.abs();
      Complex complex5 = complex4.createComplex(1163.8621367, (-1.5529124364751804E9));
      Complex complex6 = complex3.asin();
      Complex complex7 = Complex.ZERO;
      complex2.divide(complex7);
      complex7.sqrt1z();
      Complex.valueOf(1461.0, 2.5376195763497104E-5);
      Complex complex8 = complex5.cos();
      complex8.ZERO.atan();
      complex5.multiply((double) 1206);
      complex5.subtract(complex3);
      complex1.readResolve();
      Complex complex9 = Complex.valueOf(1069.075502, (-9.799351869734466E-8));
      complex6.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-1.8186531860919786E-4), (-1.8186531860919786E-4));
      complex2.subtract(complex0);
      Complex complex3 = new Complex(361.2);
      complex0.subtract(complex3);
      Complex complex4 = Complex.valueOf((-2701.59069));
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.valueOf((-2701.59069), 2366.71346);
      complex6.NaN.subtract(complex7);
      Complex complex8 = Complex.I;
      complex6.equals(complex1);
      Complex complex9 = Complex.NaN;
      complex9.negate();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-1.8186531860919786E-4), (-1.8186531860919786E-4));
      Complex complex1 = complex0.tan();
      complex0.readResolve();
      Complex complex2 = complex1.divide(complex0);
      complex0.negate();
      complex2.log();
      complex2.equals(complex1);
      Complex complex3 = new Complex((-3648.61), 1325.4265269029);
      complex3.log();
      Complex complex4 = complex3.subtract(904.8660842875);
      complex3.nthRoot(175);
      Complex complex5 = complex4.divide((double) 175);
      Complex complex6 = new Complex(904.8660842875, 8.849812639395597E201);
      complex6.getImaginary();
      complex6.sqrt1z();
      Complex complex7 = complex5.negate();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.log();
      complex3.equals(complex0);
      Complex complex5 = complex4.log();
      complex5.subtract(Double.NaN);
      complex4.nthRoot(153);
      complex5.divide((-816.9636));
      complex0.getImaginary();
      complex1.sqrt1z();
      complex2.negate();
      Complex complex6 = Complex.INF;
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(623486.70693017, Double.NaN);
      complex0.add(complex2);
      complex2.I.negate();
      complex0.nthRoot(72);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.27175258531951174, 0.27175258531951174);
      complex0.ZERO.pow(complex1);
      Complex complex2 = Complex.valueOf(116.28, 3703.8925399357067);
      Complex complex3 = Complex.INF;
      complex3.subtract(complex2);
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(1325.4265269029);
      Complex complex1 = complex0.asin();
      complex1.pow(complex0);
      Complex complex2 = complex1.multiply(447);
      complex2.subtract(676.90322617216);
      Complex complex3 = complex0.createComplex((-2095.85663204), 447);
      Complex complex4 = Complex.INF;
      complex3.pow((double) 447);
      Complex complex5 = new Complex((-2095.85663204));
      Complex complex6 = complex4.acos();
      Complex complex7 = complex4.createComplex(1.5529124364751804E9, 20.0);
      complex6.pow((-7.81295459930537E-72));
      complex6.createComplex(6.283185307179586, 447);
      Complex complex8 = complex4.multiply(complex0);
      complex8.atan();
      complex7.tan();
      Complex complex9 = Complex.I;
      try { 
        complex9.nthRoot((-4814));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,814
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-742.2711003362567));
      Complex complex1 = new Complex(0.6816387176513672, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.divide(complex1);
      complex1.multiply(988);
      Complex complex4 = complex2.subtract(1.5529124364751804E9);
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex3.sqrt();
      complex6.divide(complex4);
      Complex complex7 = Complex.INF;
      complex1.negate();
      complex5.sinh();
      complex7.tanh();
      complex6.divide(0.6816387176513672);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-999.35556725637));
      Complex complex2 = complex0.pow(complex1);
      complex1.toString();
      Complex complex3 = complex1.sqrt();
      complex1.divide(complex0);
      Complex.valueOf((-999.35556725637));
      complex1.negate();
      complex3.sinh();
      try { 
        complex2.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex0.INF.multiply(1);
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex1.INF.subtract(0.0);
      complex0.ONE.pow(complex4);
      complex0.ONE.toString();
      complex0.sqrt();
      Complex.valueOf((-1.0));
      complex2.equals(complex1);
      try { 
        complex1.nthRoot((-4808));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,808
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.sin();
      complex3.I.toString();
      complex3.tan();
      Complex complex5 = complex4.log();
      complex5.I.tanh();
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex.valueOf(555.15914367207, Double.POSITIVE_INFINITY);
      complex0.divide(complex1);
      Complex complex2 = complex1.multiply(1466);
      Complex complex3 = complex2.createComplex(555.15914367207, 507.21493284);
      complex0.pow((double) 1466);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.createComplex((-1.0), (-1034.29));
      complex0.atan();
      Object object0 = new Object();
      complex2.equals(object0);
      complex4.nthRoot(1466);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(1325.4265269029);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.INF.subtract(complex1);
      complex1.divide(complex2);
      Complex complex4 = complex2.multiply(1466);
      Complex complex5 = complex3.createComplex((-2821.056549), 2.075769060297565E143);
      complex3.pow((-2821.056549));
      Complex complex6 = complex5.sqrt();
      complex0.divide(complex6);
      Complex.valueOf(1325.4265269029);
      complex4.negate();
      complex6.sinh();
      complex2.tanh();
      complex0.createComplex(1466, (-616403.349605412));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex0.multiply(1466);
      complex1.createComplex((-1562.98106994), 357.5);
      Complex complex2 = complex1.pow(357.5);
      Complex complex3 = Complex.valueOf(Double.NaN, 2422.2773737992);
      Complex complex4 = new Complex(Double.NaN);
      complex2.createComplex(357.5, Double.NaN);
      complex3.atan();
      Object object0 = new Object();
      complex3.equals(object0);
      complex0.nthRoot(1039);
      Complex complex5 = Complex.NaN;
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      complex1.multiply((-754.440147324088));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 713.2744973394;
      Complex complex0 = new Complex(0.0, 713.2744973394);
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.NaN.toString();
      double double2 = 2.0;
      Complex complex2 = new Complex(2.0);
      complex2.ONE.hashCode();
      Complex complex3 = complex2.NaN.subtract(2.0);
      complex3.NaN.abs();
      complex0.ONE.multiply(complex2);
      Complex complex4 = complex0.I.conjugate();
      complex4.INF.getField();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = new Complex(64.398605871, (-1756754.4782178837));
      complex2.INF.cosh();
      Complex complex3 = complex1.subtract(complex2);
      complex3.ZERO.multiply(780);
      complex1.reciprocal();
      complex0.divide((-2032.21642762441));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(210.84044039252);
      Complex complex1 = Complex.valueOf(361.2, (-1131.3827726));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.subtract(complex2);
      complex3.reciprocal();
      complex3.divide((-285.8356804968));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.abs();
      Complex complex1 = complex0.INF.conjugate();
      complex1.INF.getField();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.createComplex(2958.0150226776486, 2958.0150226776486);
      Complex complex7 = complex6.ZERO.atan();
      complex7.ZERO.divide((-1400.46));
      complex6.ONE.tan();
      complex7.multiply(1);
      complex6.sin();
      Complex.valueOf(1.2472476068464461E224);
      Complex complex8 = Complex.valueOf(6.283185307179586);
      complex6.sqrt();
      complex2.ZERO.divide(complex8);
      complex4.pow(1.7278449535369873);
      complex5.tan();
      Complex complex9 = complex3.createComplex(0.0, 6.283185307179586);
      Complex complex10 = complex9.createComplex(2958.0150226776486, 2958.0150226776486);
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.145412771487496E-7);
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.NaN.exp();
      complex0.INF.add(complex4);
      Complex.valueOf(1.145412771487496E-7, 1.0);
      Complex complex5 = complex3.I.cosh();
      complex5.readResolve();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex1.ONE.multiply(37);
      complex7.NaN.multiply(complex5);
      Complex complex8 = complex6.subtract(1.145412771487496E-7);
      Complex complex9 = complex6.add(complex0);
      complex9.acos();
      Complex complex10 = complex9.NaN.subtract(complex0);
      Complex complex11 = complex10.subtract(complex8);
      complex9.toString();
      complex2.toString();
      complex2.acos();
      Complex.valueOf(946.4472181677);
      complex8.getReal();
      complex0.subtract(complex8);
      complex9.readResolve();
      complex11.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(471.0, 471.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.NaN.divide(complex3);
      complex2.I.nthRoot(3975);
      complex4.readResolve();
      Complex complex6 = complex3.exp();
      complex3.multiply(471.0);
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex5.sin();
      Complex complex9 = Complex.valueOf(5220.2956, 743.3203391935302);
      Complex complex10 = complex8.add((double) 3975);
      Complex complex11 = complex8.tanh();
      complex0.hashCode();
      complex10.pow(complex7);
      complex9.pow(0.0);
      try { 
        complex11.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = complex3.INF.multiply(1);
      complex4.cos();
      Complex complex5 = complex1.INF.subtract(0.0);
      Complex complex6 = complex0.ONE.pow(complex5);
      Complex complex7 = complex0.divide((-798.7606003535907));
      complex1.atan();
      complex7.cos();
      Complex.valueOf(1.2472476068464461E224, (double) 1);
      complex6.multiply(1);
      Complex complex8 = Complex.valueOf(1.2472476068464461E224, (-2.3561940846199336));
      complex8.reciprocal();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-743.3203391935302));
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex4.multiply((-1.0));
      complex4.multiply(0.0);
      complex3.divide(complex6);
      Complex complex7 = complex5.sin();
      Complex.valueOf((-1260.397217679001), 0.0);
      complex4.add((-1.0007875838036382));
      complex1.tanh();
      complex3.hashCode();
      complex3.pow(complex7);
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.pow(1087.4702);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-555.15914367207), (-555.15914367207));
      Complex complex1 = Complex.valueOf(0.0, 2540.412302235);
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.INF.multiply(1466);
      Complex complex3 = complex0.createComplex(3.1032646539290307, (-2821.056549));
      Complex complex4 = complex3.pow((-555.15914367207));
      complex0.acos();
      complex4.createComplex((-2481.7438128139097), 3.1032646539290307);
      complex1.atan();
      Complex complex5 = Complex.ONE;
      complex4.equals(complex5);
      try { 
        complex4.nthRoot((-2042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,042
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(1325.4265269029);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex.valueOf(1325.4265269029);
      complex2.isInfinite();
      complex2.NaN.sin();
      Complex complex4 = complex3.multiply(0);
      complex4.I.hashCode();
      complex1.INF.createComplex(0, 0);
      complex1.ONE.asin();
      Complex complex5 = Complex.valueOf(1152.04, (-2701.59069));
      complex5.createComplex((-4946.19670895), (-4946.19670895));
      complex4.pow((double) 0);
      complex1.multiply(complex4);
      complex0.tan();
      // Undeclared exception!
      complex1.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide((-999.35556725637));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf((-999.35556725637), (-999.35556725637));
      complex2.multiply(130);
      Complex complex4 = new Complex((-999.35556725637), 130);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(471.0, 471.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply(2046);
      Complex complex4 = complex0.multiply(1);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.subtract(1.5529124364751804E9);
      complex3.pow(complex2);
      complex5.toString();
      Complex complex7 = complex6.sqrt();
      complex3.divide(complex6);
      Complex.valueOf((double) 1);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.negate();
      complex7.sinh();
      complex2.tanh();
      complex9.createComplex(2046, (-616403.349605412));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(1325.4265269029);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = Complex.valueOf(1325.4265269029);
      complex2.isInfinite();
      Complex complex5 = complex2.NaN.sin();
      Complex complex6 = complex3.multiply(0);
      complex6.I.hashCode();
      complex1.INF.createComplex(0, 0);
      complex1.ONE.asin();
      complex2.createComplex(1325.4265269029, 1.573691633515306E-8);
      Complex complex7 = complex4.pow((double) 0);
      complex7.multiply(complex4);
      complex5.tan();
      Complex complex8 = Complex.valueOf(1.573691633515306E-8);
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(471.0, 471.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.reciprocal();
      complex4.ZERO.sinh();
      Complex complex5 = complex4.NaN.divide(complex3);
      complex2.I.nthRoot(3975);
      Complex complex6 = (Complex)complex4.readResolve();
      complex6.sin();
      Complex.valueOf(471.0, (-5400.638827065066));
      complex5.add(0.0);
      Complex complex7 = complex2.tanh();
      complex6.hashCode();
      complex7.pow(complex6);
      complex2.multiply(complex6);
      Complex complex8 = Complex.valueOf((-4258.1629633878));
      complex1.add(complex8);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.5045560598373413);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.I.pow(374.8523756936231);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.I.multiply(0.0);
      complex0.NaN.toString();
      complex0.multiply(9);
      complex2.NaN.subtract((double) 9);
      complex3.negate();
      complex2.abs();
      Complex complex4 = new Complex(0.0, 9);
      complex1.negate();
      complex3.multiply(0.4762049835947182);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sinh();
      Complex complex1 = Complex.valueOf(1214.0, (-7.882636631967997));
      Complex complex2 = complex1.multiply(60265.72075584096);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = Complex.NaN;
      complex5.sin();
      Complex complex6 = Complex.valueOf(1214.0, 634.1);
      Complex complex7 = Complex.valueOf(2332.029347511538);
      complex7.add(0.0);
      complex6.tanh();
      complex2.hashCode();
      complex0.pow(complex5);
      complex4.multiply(complex7);
      complex1.multiply((-3116));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(3.329140840363789E115);
      complex0.ONE.getArgument();
      complex0.equals((Object) null);
      Complex complex1 = new Complex(0.0, 1055.6969919824462);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.divide(0.0);
      complex0.getArgument();
      complex0.isInfinite();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex5.ZERO.multiply(complex0);
      complex6.ONE.divide(3.329140840363789E115);
      Complex complex7 = Complex.NaN;
      complex4.cosh();
      complex2.exp();
      complex3.cos();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.cosh();
      complex0.sqrt1z();
      complex3.NaN.add(complex2);
      complex2.tanh();
      Complex complex4 = complex2.createComplex((-5.207000323380292E-8), Double.POSITIVE_INFINITY);
      complex3.divide((-1199.199969));
      Complex.valueOf((-5.207000323380292E-8));
      Complex complex5 = complex4.conjugate();
      Complex complex6 = new Complex((-1199.199969));
      Complex complex7 = complex6.negate();
      complex1.hashCode();
      Complex complex8 = complex7.subtract(complex6);
      Complex complex9 = complex8.pow(0.14568935085105728);
      complex9.acos();
      complex7.getField();
      complex5.add(complex0);
      Complex complex10 = complex5.createComplex((-5.207000323380292E-8), Double.POSITIVE_INFINITY);
      complex10.INF.log();
      complex9.tan();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(471.0, 471.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.ZERO.exp();
      complex0.reciprocal();
      complex3.createComplex((-1239.98087), 136.0);
      Complex complex4 = complex0.pow((double) 3975);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex2.createComplex((-186.46), 1639.943597689652);
      complex5.pow((-505.26012194));
      complex1.multiply(complex2);
      complex6.tan();
      complex0.nthRoot(3975);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(210.84044039252);
      Complex complex1 = complex0.multiply((-285.8356804968));
      complex1.reciprocal();
      Complex complex2 = complex1.add(7.82494078472695E-9);
      Complex complex3 = complex0.sin();
      complex3.conjugate();
      complex3.conjugate();
      complex2.pow(7.82494078472695E-9);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-2287.54654));
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.tanh();
      complex1.add(complex4);
      Complex complex5 = Complex.I;
      complex5.multiply(0.7615941559557649);
      Complex complex6 = complex2.multiply((-2287.54654));
      Complex complex7 = complex6.divide(complex4);
      complex2.sin();
      Complex complex8 = Complex.valueOf((-1340.8073386182557), (-1382.40242));
      complex8.add((-1.0));
      complex1.tanh();
      complex0.hashCode();
      Complex complex9 = complex2.pow(complex7);
      complex9.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-41.88068), (-41.88068));
      Complex complex1 = Complex.valueOf(471.0, 1278.308834);
      Complex complex2 = Complex.valueOf(471.0, (-301.9045));
      Complex complex3 = complex1.divide(complex2);
      complex1.multiply(2313);
      Complex complex4 = complex3.createComplex(1466, (-2821.056549));
      Complex complex5 = complex2.pow(3846.3498);
      complex3.acos();
      complex5.createComplex(3846.3498, 1639.943597689652);
      Complex complex6 = complex5.pow((-301.9045));
      complex6.multiply(complex4);
      Complex complex7 = complex4.tan();
      Complex complex8 = new Complex(0.41997434161402614, 3.078097095112753E-4);
      complex8.nthRoot(1466);
      Complex complex9 = complex7.atan();
      complex9.nthRoot(1466);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(471.0, 471.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.ZERO.exp();
      complex3.createComplex((-5.207000323380292E-8), (-1756754.4782178837));
      Complex complex4 = complex0.divide(3.078097095112753E-4);
      Complex.valueOf(2162.0);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex2.negate();
      complex2.hashCode();
      complex3.subtract(complex1);
      complex5.pow((-1660.2845300365));
      complex6.acos();
      complex0.getField();
      Complex complex7 = new Complex(4312.542113);
      complex7.add(complex4);
      complex3.createComplex((-20.0), (-3669.66466));
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.conjugate();
      Complex complex1 = Complex.valueOf(1235.4548);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.pow(complex0);
      complex2.getReal();
      complex2.I.getArgument();
      Complex complex4 = complex3.multiply(complex0);
      complex4.ZERO.subtract(0.0);
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex6.ZERO.pow(1235.4548);
      complex7.NaN.multiply(0.0);
      Complex complex8 = complex6.tan();
      Complex complex9 = complex5.multiply((-1401.0));
      complex9.I.abs();
      complex9.getArgument();
      complex6.tan();
      complex3.getImaginary();
      complex5.abs();
      complex1.INF.tan();
      Complex complex10 = Complex.valueOf(0.0, 1763.302);
      complex8.divide(complex10);
      complex0.sin();
      complex1.tan();
      Complex.valueOf(1.5707963267948966, 2.9032581477488686E284);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sinh();
      complex0.divide((-999.35556725637));
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.toString();
      Complex complex1 = new Complex((-1135.265253538275), 1.770547866821289);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = complex3.negate();
      complex4.ONE.add((-1822.9));
      Complex complex5 = complex4.negate();
      complex1.ONE.sqrt();
      complex3.I.atan();
      Complex complex6 = complex2.ONE.tanh();
      complex6.readResolve();
      complex0.exp();
      Complex complex7 = complex4.ZERO.sqrt1z();
      complex7.ONE.log();
      complex3.ZERO.readResolve();
      Complex.valueOf((-1207.1399), (-1135.265253538275));
      complex3.nthRoot(426);
      complex5.tan();
      complex3.negate();
      complex5.isNaN();
      complex1.I.tanh();
      Complex complex8 = complex2.pow(0.0);
      complex8.NaN.cos();
      complex8.ZERO.sqrt();
      complex1.readResolve();
      Complex.valueOf((-2733.20454543));
      Complex complex9 = complex5.divide((double) 426);
      complex9.INF.subtract(complex5);
      complex9.subtract(complex3);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(812.18995007, 812.18995007);
      complex0.readResolve();
      Complex complex1 = new Complex(812.18995007);
      Complex complex2 = complex0.subtract(complex1);
      complex2.INF.hashCode();
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.I.multiply(2057);
      complex4.I.sqrt1z();
      Complex complex5 = complex2.INF.divide((-830.455034510431));
      complex1.ZERO.abs();
      Complex complex6 = complex1.I.multiply((-1.0));
      complex6.NaN.multiply(447);
      complex2.I.abs();
      complex1.readResolve();
      complex2.asin();
      Complex complex7 = complex5.divide(complex0);
      Complex complex8 = complex6.subtract(complex3);
      Complex complex9 = complex0.asin();
      complex9.I.tan();
      complex8.getImaginary();
      complex2.exp();
      Complex complex10 = Complex.valueOf((double) 447, 0.0);
      complex6.log();
      complex7.atan();
      complex10.toString();
      Complex.valueOf((-1546.8956));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = complex3.INF.multiply(1);
      complex4.cos();
      Complex complex5 = complex1.INF.subtract(0.0);
      complex0.ONE.pow(complex5);
      complex0.ONE.toString();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.I.divide(complex5);
      Complex.valueOf((-1.0));
      Complex complex8 = complex0.negate();
      complex8.sinh();
      Complex complex9 = complex0.tanh();
      complex9.ZERO.add(0.0);
      complex9.subtract(complex8);
      complex8.sin();
      complex3.conjugate();
      complex7.conjugate();
      complex0.pow((-1667.2));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      complex1.readResolve();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex1.divide(0.4349733591079712);
      Object object1 = new Object();
      complex0.equals(object1);
      Complex complex4 = complex0.INF.multiply(7);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.INF.tanh();
      complex4.log();
      Complex complex7 = complex0.divide((-2802.2405323));
      Complex complex8 = complex7.INF.conjugate();
      Complex complex9 = complex8.ONE.divide(0.4349733591079712);
      complex9.cosh();
      complex4.ZERO.sqrt1z();
      Complex complex10 = complex0.sin();
      Complex.valueOf(0.4349733591079712);
      complex10.pow(complex3);
      complex10.sin();
      complex6.log();
      complex1.equals(object0);
      Complex.valueOf(4.359610133382778E-28);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-2.792046157580119E-8));
      Complex complex1 = complex0.INF.divide(0.0);
      complex0.NaN.sqrt1z();
      Complex complex2 = complex0.NaN.createComplex(6.33097561889469E-211, (-20.0));
      Complex complex3 = complex0.sqrt1z();
      complex1.multiply(complex0);
      Complex complex4 = complex0.ONE.add(complex1);
      Complex complex5 = complex2.tan();
      complex5.ONE.readResolve();
      complex0.abs();
      complex3.NaN.multiply((-2405));
      Complex complex6 = complex1.multiply(1988);
      complex3.log();
      Complex complex7 = complex0.ZERO.divide((double) 1988);
      complex5.getArgument();
      complex6.asin();
      Complex complex8 = complex5.conjugate();
      complex8.add(Double.POSITIVE_INFINITY);
      complex1.sqrt();
      complex1.pow(complex7);
      complex4.atan();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.asin();
      Complex complex1 = Complex.valueOf((-2701.59069), 361.2);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.subtract(complex0);
      complex3.ZERO.reciprocal();
      Complex complex4 = complex3.divide(361.2);
      Complex complex5 = complex4.ONE.atan();
      complex3.INF.cos();
      Complex.valueOf(361.2, 361.2);
      complex1.multiply(472);
      complex5.reciprocal();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.5045560598373413, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.I.multiply(0.0);
      complex0.NaN.toString();
      complex0.multiply(9);
      complex2.NaN.subtract((double) 9);
      Complex complex4 = complex3.negate();
      complex2.abs();
      complex4.acos();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.480706118857055E-9), (-6.480706118857055E-9));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.NaN.add(Double.POSITIVE_INFINITY);
      complex1.ONE.readResolve();
      complex0.ONE.abs();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.I.pow(Double.POSITIVE_INFINITY);
      complex4.I.atan();
      complex4.NaN.sin();
      Complex complex5 = complex3.INF.multiply((-269));
      complex5.I.cos();
      Complex complex6 = complex5.NaN.subtract(complex2);
      complex6.NaN.getField();
      complex5.NaN.reciprocal();
      Complex complex7 = complex3.exp();
      Complex.valueOf(20.0);
      complex7.exp();
      complex7.pow(complex1);
      complex1.hashCode();
      complex0.sinh();
      Complex complex8 = Complex.valueOf(1.2167897656061312E23, 1.0);
      complex8.NaN.cos();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.asin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ONE.tanh();
      complex3.ONE.createComplex((-5.207000323380292E-8), (-5.207000323380292E-8));
      complex4.divide((-1199.199969));
      Complex.valueOf((-5.207000323380292E-8));
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex2.negate();
      complex6.INF.hashCode();
      Complex complex7 = complex5.subtract(complex1);
      Complex complex8 = complex0.pow((-5.207000323380292E-8));
      complex4.acos();
      complex7.getField();
      Complex complex9 = complex3.add(complex8);
      complex9.I.createComplex((-1199.199969), 0.0);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.pow(497.097315135);
      Complex complex3 = complex2.INF.subtract((-2936.4448));
      Complex complex4 = complex1.INF.sqrt1z();
      Complex complex5 = complex4.divide(complex0);
      complex4.ZERO.toString();
      complex1.NaN.readResolve();
      Complex complex6 = complex0.pow(complex1);
      complex6.ZERO.toString();
      complex1.ZERO.exp();
      complex1.NaN.toString();
      Complex complex7 = complex6.I.createComplex(2605.799409158632, 2605.799409158632);
      Complex complex8 = complex1.divide(complex6);
      complex7.NaN.getArgument();
      complex6.log();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex0.ZERO.sqrt1z();
      Complex complex11 = complex5.createComplex(Double.NaN, 11.6);
      Complex complex12 = complex11.ONE.pow(0.0);
      complex9.tanh();
      complex9.ONE.hashCode();
      Complex complex13 = complex9.subtract(497.097315135);
      complex8.multiply(complex13);
      complex12.divide(complex13);
      complex12.sinh();
      complex5.asin();
      complex2.subtract(complex6);
      complex8.tanh();
      complex10.asin();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.4291517981101049E-8), 0.0);
      Complex complex2 = complex0.INF.add(complex1);
      complex2.ZERO.tan();
      complex0.INF.reciprocal();
      Complex complex3 = complex0.sqrt();
      complex0.sqrt();
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.multiply((-1));
      Complex complex3 = complex2.INF.multiply((-3677));
      Complex complex4 = complex2.cos();
      complex4.ONE.add(complex1);
      complex1.ZERO.hashCode();
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex5.INF.multiply(complex6);
      Complex complex8 = complex7.ONE.divide(0.0);
      complex7.I.divide(complex6);
      Complex complex9 = complex1.log();
      Complex.valueOf((double) (-3677));
      Complex complex10 = complex9.createComplex(0.0, (-1923.0999931));
      complex8.NaN.divide(complex0);
      complex10.ZERO.sqrt1z();
      complex10.ZERO.cos();
      complex8.negate();
      complex0.I.toString();
      complex5.getReal();
      complex3.abs();
      complex0.divide(0.0);
      complex5.isNaN();
      complex0.abs();
      Complex.valueOf((-1923.0999931));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      complex1.tan();
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex2.NaN.sqrt();
      Complex complex6 = complex2.I.multiply(824);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex2.multiply(849);
      complex6.ONE.readResolve();
      Complex complex9 = complex8.ZERO.pow((double) 849);
      complex4.ONE.readResolve();
      Complex complex10 = complex7.INF.sinh();
      Complex complex11 = complex5.divide(3026.02);
      Complex complex12 = complex10.INF.multiply(complex2);
      complex7.I.sqrt1z();
      complex4.asin();
      Complex complex13 = complex10.negate();
      complex7.pow(complex6);
      complex11.getReal();
      complex6.sqrt();
      complex9.add(3026.02);
      complex12.isInfinite();
      complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4403.60352, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex3.NaN.divide(0.0);
      Complex complex5 = complex2.INF.pow(0.0);
      Complex complex6 = complex1.cosh();
      complex1.add(0.0);
      Complex.valueOf((-4807.6), (-198.4873916));
      complex5.add(0.0);
      Complex complex7 = complex2.cosh();
      complex7.I.subtract(complex4);
      complex5.cos();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex5.multiply(complex8);
      complex2.INF.abs();
      Complex complex10 = complex9.I.multiply((-1521));
      complex10.I.exp();
      complex9.INF.abs();
      complex6.getImaginary();
      complex6.add(0.0);
      complex8.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ONE.abs();
      int int0 = (-2685);
      try { 
        complex0.nthRoot((-2685));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,685
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-2748.0), 20.0);
      complex0.ONE.pow((-2748.0));
      complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = Complex.valueOf(9.390740355567705E62, 0.0);
      Complex complex4 = complex3.add(20.0);
      complex4.NaN.subtract((-432.0));
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.NaN.sqrt1z();
      complex6.NaN.log();
      Complex complex7 = complex2.ZERO.multiply(1226);
      Complex complex8 = complex0.add(0.0);
      Complex complex9 = complex8.ONE.sqrt1z();
      complex9.INF.acos();
      complex0.conjugate();
      Complex complex10 = complex2.pow(0.0);
      complex10.pow(complex9);
      complex1.subtract(0.0);
      complex2.equals(complex7);
      complex8.pow(complex7);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-1691.20536), (-1691.20536));
      Complex complex1 = new Complex((-1691.20536));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.sin();
      complex3.sin();
      Complex complex4 = complex1.NaN.divide((-1691.20536));
      complex4.ZERO.sqrt1z();
      Complex complex5 = complex1.createComplex((-1691.20536), 640.192942);
      Complex complex6 = complex5.conjugate();
      complex5.add(complex4);
      complex6.createComplex(2.318267822265625, 0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-743.3203391935302));
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.tanh();
      complex4.ZERO.add(complex3);
      Complex complex5 = complex4.INF.multiply((-743.3203391935302));
      complex5.NaN.multiply(0.0);
      Complex complex6 = complex2.ONE.divide(complex4);
      Complex complex7 = complex1.ONE.sin();
      Complex.valueOf((-1.0), 3.5869215528816054E-262);
      complex0.I.add(0.0);
      Complex complex8 = complex4.tanh();
      complex2.hashCode();
      Complex complex9 = complex6.pow(complex8);
      complex7.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.abs();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.readResolve();
      complex0.abs();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.ZERO.add(complex2);
      complex3.ONE.abs();
      complex0.getArgument();
      Complex complex4 = complex1.subtract(0.5249826908111572);
      complex4.ONE.readResolve();
      Complex complex5 = complex4.asin();
      complex5.ONE.subtract(Double.NaN);
      Complex complex6 = complex1.cos();
      complex2.acos();
      complex6.log();
      Complex complex7 = complex2.exp();
      complex0.isInfinite();
      complex0.sinh();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.NaN.multiply(complex1);
      complex0.INF.atan();
      int int0 = (-2964);
      complex0.hashCode();
      try { 
        complex0.nthRoot((-2964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,964
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.readResolve();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.valueOf(0.0);
      complex2.ZERO.readResolve();
      Complex complex6 = complex5.ZERO.atan();
      complex6.I.sqrt1z();
      Complex complex7 = complex0.NaN.tan();
      complex7.I.getArgument();
      Complex complex8 = complex6.I.multiply((-1.0));
      complex1.pow(0.0);
      Object object0 = new Object();
      complex5.equals(object0);
      complex6.subtract(complex4);
      complex4.pow(complex0);
      complex3.negate();
      complex8.isNaN();
      complex2.tan();
      complex0.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.81860282490643E125);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.ONE.multiply(1.2904307529671472E-176);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.cos();
      complex3.ONE.reciprocal();
      complex3.ONE.cos();
      Complex complex4 = complex1.I.exp();
      complex1.getArgument();
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex6.INF.multiply(0.0);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.divide(complex8);
      complex9.abs();
      Complex complex10 = complex9.subtract(0.0);
      complex10.toString();
      Complex complex11 = complex5.ONE.add(501.6);
      complex6.INF.toString();
      complex4.ONE.acos();
      complex6.hashCode();
      complex7.ONE.negate();
      complex4.sqrt1z();
      complex11.NaN.toString();
      complex6.exp();
      complex4.isInfinite();
      complex3.cosh();
      Complex complex12 = complex0.multiply(complex8);
      complex12.ZERO.conjugate();
      complex11.asin();
      complex7.subtract(0.0);
      complex5.sin();
      complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-555.15914367207), (-555.15914367207));
      Complex complex1 = Complex.valueOf(0.0, 2540.412302235);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.INF.multiply(1466);
      Complex complex4 = complex0.createComplex(1.9887375831604004, (-2821.056549));
      Complex complex5 = complex4.pow((-555.15914367207));
      Complex complex6 = complex0.acos();
      Complex complex7 = complex2.createComplex(1639.943597689652, 0.0);
      complex7.pow(0.0);
      complex3.multiply(complex5);
      complex6.tan();
      complex1.nthRoot(1466);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(3.329140840363789E115);
      complex0.ONE.getArgument();
      complex0.equals((Object) null);
      Complex complex1 = new Complex(0.0, 1055.6969919824462);
      Complex complex2 = complex0.subtract(complex1);
      complex2.ZERO.divide(0.0);
      complex0.getArgument();
      complex0.isInfinite();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex4.ZERO.multiply(complex0);
      complex5.ONE.divide(3.329140840363789E115);
      Complex.valueOf(0.0, 3.329140840363789E115);
      complex3.cosh();
      complex3.nthRoot(2061);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(1551.73441175578);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.INF.tan();
      int int0 = (-4621);
      Complex complex3 = complex0.ZERO.reciprocal();
      Complex complex4 = complex3.NaN.divide(complex0);
      complex4.getArgument();
      try { 
        complex0.I.nthRoot((-4621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,621
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-92.111242806));
      complex0.readResolve();
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.sqrt1z();
      complex0.hashCode();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.ZERO.sinh();
      complex1.ONE.subtract(complex0);
      complex3.nthRoot(504);
      Complex complex6 = complex0.I.add(0.01742541790008545);
      complex6.ONE.cosh();
      complex6.I.sqrt();
      complex1.getImaginary();
      Complex complex7 = complex2.sqrt1z();
      complex7.ZERO.toString();
      Complex complex8 = complex0.pow(complex5);
      Complex complex9 = complex8.conjugate();
      Complex complex10 = Complex.NaN;
      complex4.I.subtract(complex10);
      complex8.subtract(0.0);
      complex0.toString();
      Object object0 = new Object();
      complex7.equals(object0);
      complex6.multiply(complex9);
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.exp();
      complex1.ZERO.readResolve();
      Complex complex4 = complex0.ONE.pow(complex1);
      complex0.toString();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.asin();
      complex1.NaN.multiply(1486);
      Complex complex7 = Complex.valueOf(4.656972469326391E285);
      Complex complex8 = Complex.valueOf(1978.0514062339082, (-4.7989172862560625E-8));
      Complex complex9 = complex8.ONE.pow(complex3);
      complex8.NaN.nthRoot(1486);
      complex9.I.nthRoot(1486);
      complex6.NaN.getField();
      complex2.I.add(4.656972469326391E285);
      Complex complex10 = Complex.valueOf((-167.847624971664), (-167.847624971664));
      complex10.ZERO.reciprocal();
      complex3.readResolve();
      complex10.nthRoot(1422);
      complex5.getField();
      complex5.multiply((-2236));
      complex4.tan();
      complex7.sinh();
      Complex complex11 = Complex.valueOf(1342.0, 6.184953843236509E-8);
      complex11.NaN.abs();
      complex8.sqrt();
      complex11.subtract(complex3);
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(210.84044039252);
      Complex complex1 = complex0.multiply((-285.8356804968));
      Complex complex2 = complex1.reciprocal();
      complex2.createComplex(298.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.tanh();
      complex0.hashCode();
      Complex complex2 = complex1.subtract(complex0);
      complex2.INF.abs();
      Complex complex3 = complex0.divide(582.72);
      complex0.subtract(complex1);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex4.ZERO.acos();
      complex5.log();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.I.subtract(complex3);
      complex7.I.multiply(complex5);
      Complex complex8 = complex6.NaN.cos();
      complex8.NaN.sqrt();
      complex8.ZERO.acos();
      complex0.divide(776.4825184465);
      complex8.ONE.subtract(0.0);
      complex6.atan();
      complex3.getField();
      complex2.exp();
      complex1.INF.atan();
      complex3.hashCode();
      complex3.ZERO.negate();
      Complex complex9 = complex2.cos();
      complex9.ZERO.multiply(589);
      Complex complex10 = complex6.acos();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3132.817631513237);
      Complex complex1 = complex0.tanh();
      complex0.nthRoot(493);
      complex1.getField();
      Complex complex2 = complex1.createComplex((-4996.96), 493);
      Complex complex3 = complex2.log();
      complex3.NaN.subtract(2003.960554);
      complex3.cos();
      complex3.acos();
      complex1.sqrt1z();
      Complex complex4 = complex2.ONE.tan();
      complex1.getArgument();
      complex2.atan();
      complex4.tan();
      complex3.getArgument();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.NaN.sqrt();
      complex2.I.cos();
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex4.NaN.add(complex2);
      complex4.INF.multiply(complex5);
      complex5.ZERO.multiply(0.0);
      complex5.ZERO.hashCode();
      complex0.getImaginary();
      complex1.getArgument();
      complex0.INF.getArgument();
      Complex.valueOf(3.141592653589793, 5417.79632905);
      complex2.ONE.readResolve();
      complex0.getImaginary();
      complex2.ONE.getArgument();
      complex0.readResolve();
      complex2.hashCode();
      Complex complex6 = complex1.subtract(3.141592653589793);
      Complex complex7 = complex0.NaN.cos();
      complex0.equals("F)4z");
      complex6.acos();
      Complex complex8 = complex0.createComplex(0.0, 0.0);
      complex8.INF.divide(0.0);
      complex4.isInfinite();
      complex4.conjugate();
      complex3.asin();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(1325.4265269029);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = Complex.valueOf(1325.4265269029);
      complex4.I.toString();
      complex2.isInfinite();
      complex2.NaN.sin();
      Complex complex5 = complex3.multiply(0);
      complex5.I.hashCode();
      complex1.INF.createComplex(518.8351408269767, 518.8351408269767);
      complex1.ONE.asin();
      complex2.createComplex(Double.NaN, 1.573691633515306E-8);
      Complex complex6 = complex4.atan();
      complex0.equals(complex3);
      complex4.exp();
      complex1.cos();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1));
      complex1.toString();
      Complex complex2 = Complex.valueOf((-1.0200858727747717E-8));
      Complex complex3 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex4 = complex2.INF.tan();
      complex1.readResolve();
      complex2.acos();
      complex3.ZERO.sinh();
      complex0.toString();
      complex4.acos();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(471.0, 471.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.NaN.divide(complex3);
      List<Complex> list0 = complex2.I.nthRoot(3975);
      assertEquals(3975, list0.size());
      
      complex4.readResolve();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex3.I.tan();
      assertEquals(0.7615941559557649, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex6.multiply((-1439));
      assertEquals(0.0010615711252653928, complex1.getReal(), 0.01);
      assertEquals((-0.0010615711252653928), complex1.getImaginary(), 0.01);
      assertTrue(complex6.equals((Object)complex8));
      assertSame(complex2, complex5);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = Complex.valueOf(471.0);
      assertEquals(471.0, complex10.getReal(), 0.01);
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = new Complex(0.6389714479446411, (-3184.00380983));
      Complex complex4 = complex0.NaN.divide(complex3);
      complex4.divide((-3184.00380983));
      Complex.valueOf((-3184.00380983));
      complex0.readResolve();
      complex2.ONE.exp();
      int int0 = (-482);
      try { 
        complex4.nthRoot((-482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -482
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      assertTrue(complex1.isNaN());
      
      Complex complex2 = complex0.ONE.createComplex(0.0, 1833.1402676333);
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = Complex.valueOf(1666.80823645284, 1666.80823645284);
      assertEquals(1666.80823645284, complex4.getReal(), 0.01);
      
      complex0.hashCode();
      Complex complex5 = complex2.add(complex0);
      assertTrue(complex5.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex3));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1975.2443292036846);
      Complex complex1 = Complex.valueOf(208.6280794173874, (-1061.57457755569));
      Complex complex2 = complex0.NaN.divide(complex1);
      assertEquals((-1061.57457755569), complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(208.6280794173874, complex1.getReal(), 0.01);
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      
      Complex complex3 = complex0.createComplex(1975.2443292036846, 1975.2443292036846);
      assertEquals(1975.2443292036846, complex0.getReal(), 0.01);
      assertEquals(1975.2443292036846, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1975.2443292036846, complex3.getImaginary(), 0.01);
  }
}
