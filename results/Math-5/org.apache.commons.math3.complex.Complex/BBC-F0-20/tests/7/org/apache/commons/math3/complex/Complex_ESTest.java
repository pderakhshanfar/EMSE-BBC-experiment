/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:51:15 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract((-689.80290311));
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.tanh();
      Complex complex2 = Complex.valueOf((-1779.3999595));
      complex2.nthRoot(1314);
      complex2.nthRoot(1314);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.6480542736638855, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.log();
      Complex complex1 = complex0.negate();
      complex1.I.createComplex((-2.7701207091668264E-285), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.divide(complex0);
      complex2.INF.hashCode();
      complex2.INF.toString();
      Complex complex3 = complex2.INF.tan();
      complex3.ZERO.asin();
      complex0.ZERO.cos();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.ONE.pow(1453.50472768249);
      complex5.ONE.pow(complex1);
      Complex complex6 = complex1.add((-1988.6860272));
      complex6.pow(complex0);
      complex1.atan();
      complex4.acos();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
      Complex complex1 = Complex.valueOf(20.0, 4.5055022172222453E114);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1630.1312748, 2028.22184854763);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.I.exp();
      complex4.NaN.reciprocal();
      complex4.INF.divide(complex3);
      complex4.ONE.add(complex2);
      Complex complex5 = complex0.tan();
      complex5.INF.subtract(2028.22184854763);
      Complex complex6 = complex1.exp();
      complex6.NaN.reciprocal();
      complex6.sin();
      try { 
        complex5.nthRoot((-1313));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,313
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.getArgument();
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.ONE.divide(complex0);
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.I.tan();
      complex3.ONE.multiply(complex1);
      complex4.INF.createComplex(0.0, Double.NaN);
      complex3.sqrt();
      complex2.multiply((-2715));
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-199.33901157453056), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide((-199.33901157453056));
      complex1.tan();
      complex1.pow(complex0);
      Complex complex2 = complex1.multiply(513);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(955.3593404815199, (-20.0));
      complex0.divide((-20.0));
      complex1.tan();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-199.33901157453056));
      Complex complex1 = complex0.divide((-199.33901157453056));
      complex1.tan();
      Complex.valueOf((-199.33901157453056), Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex((-1455.0), (-1455.0));
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-199.33901157453056), Double.POSITIVE_INFINITY);
      complex0.isNaN();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = (-199.33901157453056);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf((-199.33901157453056), Double.POSITIVE_INFINITY);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(2.7701207091668264E-285);
      Complex complex1 = complex0.divide(2.7701207091668264E-285);
      complex0.cosh();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.multiply((-1125));
      Complex complex2 = Complex.INF;
      complex1.acos();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex4.createComplex((-1.0), (-1.0));
      complex2.divide(complex5);
      complex0.exp();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(2.770970558184228E-8);
      Complex complex1 = new Complex(20.0);
      complex0.pow((double) 1198);
      complex1.readResolve();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf((-1309.6), 365.82818199012);
      complex3.readResolve();
      Complex complex4 = Complex.ONE;
      complex0.equals(complex4);
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-199.33901157453056), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide((-199.33901157453056));
      complex1.ZERO.tan();
      Complex complex2 = complex1.INF.add(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex0.tan();
      complex4.INF.pow(complex0);
      Complex.valueOf((-199.33901157453056));
      complex3.pow((-199.33901157453056));
      Complex complex5 = (Complex)complex2.readResolve();
      complex5.createComplex(9.697418238031897E-8, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = (-544.29466139708);
      double double1 = (-4344.517350896358);
      Complex complex0 = Complex.valueOf((-544.29466139708), (-4344.517350896358));
      complex0.NaN.sqrt();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(1, Double.POSITIVE_INFINITY);
      complex0.nthRoot(367);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-199.33901157453056), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide((-199.33901157453056));
      Complex complex2 = complex1.ZERO.tan();
      complex1.INF.add(Double.POSITIVE_INFINITY);
      Complex complex3 = (Complex)complex1.readResolve();
      complex1.subtract(complex0);
      complex2.multiply(complex0);
      complex3.nthRoot(109);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-199.33901157453056), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-3520.9129609811566), 2632.03571400109);
      Complex complex2 = Complex.I;
      complex2.multiply((-3520.9129609811566));
      complex0.multiply(complex2);
      Complex.valueOf((-3520.9129609811566));
      Complex complex3 = Complex.I;
      complex3.nthRoot(2228);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(1549.0);
      Complex complex3 = Complex.valueOf(1549.0);
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.I.conjugate();
      complex4.hashCode();
      complex0.getReal();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.getImaginary();
      complex6.subtract(complex4);
      complex3.toString();
      complex6.toString();
      Complex complex7 = complex5.tanh();
      complex7.getField();
      Object object0 = complex2.readResolve();
      complex5.equals(object0);
      Complex complex8 = Complex.ONE;
      complex6.sqrt1z();
      complex0.cos();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-199.33901157453056), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-2238.1902));
      Complex complex2 = Complex.valueOf((-199.33901157453056));
      Complex complex3 = Complex.valueOf(7.37567604176979E-8, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.conjugate();
      complex0.hashCode();
      complex4.getReal();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.multiply(complex0);
      complex6.ONE.divide(complex5);
      complex6.ONE.abs();
      Complex complex7 = complex5.multiply((-2238.1902));
      complex3.negate();
      complex5.sinh();
      complex7.divide(complex0);
      Complex complex8 = complex2.pow(complex3);
      Complex complex9 = Complex.valueOf(2235.518875, Double.POSITIVE_INFINITY);
      complex9.reciprocal();
      complex8.multiply(20.0);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(2.7701207091668264E-285);
      Complex.valueOf((-7.488022803661722E-19), (-7.488022803661722E-19));
      complex2.tan();
      Complex complex3 = Complex.valueOf(2.7701207091668264E-285);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.sinh();
      complex4.divide(complex2);
      Complex complex6 = new Complex((-20.0), (-20.0));
      complex6.getField();
      Complex complex7 = complex5.reciprocal();
      complex7.divide(Double.NaN);
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-199.33901157453056), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide((-199.33901157453056));
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.INF.add(Double.POSITIVE_INFINITY);
      Complex complex4 = (Complex)complex1.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-199.33901157453056));
      Complex complex5 = complex2.conjugate();
      complex4.hashCode();
      complex3.getReal();
      Complex complex6 = Complex.valueOf(3947.6539741665);
      complex6.abs();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, 8.25673801176584E-159);
      complex7.multiply(complex6);
      Complex complex8 = new Complex((-1686.208821097));
      complex8.multiply(3685.06782699006);
      complex4.negate();
      complex0.sinh();
      complex2.divide(complex7);
      complex5.pow(complex3);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = (-199.33901157453056);
      Complex complex0 = Complex.valueOf((-199.33901157453056), (-199.33901157453056));
      Complex complex1 = complex0.divide((-199.33901157453056));
      complex1.ZERO.tan();
      complex1.INF.add((-199.33901157453056));
      complex1.readResolve();
      Complex complex2 = complex0.tan();
      complex2.INF.pow(complex0);
      int int0 = 2146847792;
      // Undeclared exception!
      complex2.ZERO.nthRoot(2146847792);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(1549.0);
      Complex.valueOf(1549.0);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.pow(0.0);
      complex0.readResolve();
      complex2.equals(complex3);
      Complex complex4 = Complex.ONE;
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1255.407297), (-1255.407297));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.multiply((-1255.407297));
      complex2.getReal();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.I.sinh();
      complex4.abs();
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = complex5.multiply((-1255.407297));
      Complex complex7 = complex6.negate();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.sinh();
      complex7.divide(complex4);
      complex2.pow(complex7);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1693.69525735706);
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.reciprocal();
      complex1.reciprocal();
      complex3.abs();
      Complex complex6 = Complex.valueOf(1.1752011936438014, 1.1752011936438014);
      Complex complex7 = complex6.cos();
      Object object0 = complex2.readResolve();
      complex7.I.tan();
      complex0.subtract(1.1752011936438014);
      complex7.equals(object0);
      complex0.subtract(complex5);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      complex1.divide(complex2);
      Complex complex3 = Complex.valueOf(1549.0);
      Complex complex4 = complex1.log();
      Complex complex5 = complex3.multiply(complex1);
      complex5.tan();
      Complex complex6 = complex2.createComplex(1.5707963255659942, 1725.214445106196);
      complex0.hashCode();
      complex1.getImaginary();
      Complex complex7 = complex0.subtract(complex3);
      Complex complex8 = new Complex(0.0);
      complex8.toString();
      complex7.toString();
      Complex complex9 = complex0.tanh();
      complex9.getField();
      complex1.sqrt();
      complex4.sqrt1z();
      complex4.subtract(complex3);
      complex7.asin();
      complex2.isInfinite();
      complex6.cosh();
      complex7.atan();
      complex2.getImaginary();
      Complex complex10 = Complex.ZERO;
      complex10.createComplex(0.04743316493689553, (-3361.83516363));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.multiply((-1125));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.sqrt();
      complex2.add((-1.0));
      complex3.nthRoot(2526);
      complex3.sinh();
      complex0.acos();
      Complex complex4 = new Complex(1652.3, 1861.778016);
      complex4.sin();
      Complex.valueOf(1.0537591246531136E255);
      complex0.pow((double) 2526);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.7701207091668264E-285, (-371.440039));
      Complex complex2 = complex1.multiply((-633.326091692543));
      Complex complex3 = Complex.valueOf(2.7701207091668264E-285);
      Complex complex4 = Complex.valueOf((-620.339), 1932.92809709);
      complex0.conjugate();
      complex3.hashCode();
      complex4.getReal();
      Complex complex5 = Complex.valueOf(1.5707963255659942);
      complex5.abs();
      complex2.add(complex0);
      Complex complex6 = complex0.subtract(1453.8487595510605);
      Complex complex7 = complex5.add(complex6);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.ONE.divide(complex0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.I;
      complex1.I.tan();
      complex5.INF.createComplex(1.0, Double.NaN);
      complex5.hashCode();
      complex1.getImaginary();
      Complex complex6 = complex3.subtract(complex1);
      complex6.I.toString();
      complex6.toString();
      Complex complex7 = complex4.tanh();
      complex3.getField();
      complex0.sqrt();
      complex7.sqrt1z();
      complex2.subtract(complex0);
      Complex complex8 = Complex.valueOf(1.0);
      complex8.subtract(1.0);
      Complex complex9 = Complex.valueOf((-1.0), (-1093.053396609));
      complex7.equals(complex9);
      complex7.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex2.INF.conjugate();
      complex1.I.sin();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.reciprocal();
      complex3.reciprocal();
      complex5.abs();
      Complex complex6 = complex1.cos();
      complex4.readResolve();
      complex4.isInfinite();
      complex3.cosh();
      complex3.atan();
      complex0.getImaginary();
      complex6.createComplex((-20.0), 1878.063132503);
      complex5.createComplex(0.14586809552964697, (-1832.4));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-2503.4));
      Complex complex1 = Complex.valueOf((-2503.4));
      complex0.ZERO.nthRoot(1);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.I.multiply(complex2);
      complex0.INF.conjugate();
      Complex complex4 = complex1.conjugate();
      complex4.INF.multiply(1);
      Complex complex5 = complex2.divide(complex4);
      complex0.tan();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex0.subtract(complex2);
      complex7.NaN.tan();
      complex7.ZERO.asin();
      Complex complex8 = complex3.tan();
      complex8.sqrt1z();
      complex4.conjugate();
      Complex complex9 = complex5.multiply(complex3);
      complex4.tanh();
      complex0.multiply(complex9);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-275.9144894));
      Complex complex2 = new Complex(3.3664990715562672E72, Double.NaN);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.pow(complex0);
      Complex.valueOf((-275.9144894), 2.8557016344085205E-8);
      complex1.sqrt();
      Complex complex5 = Complex.ZERO;
      complex5.add(Double.NaN);
      complex4.nthRoot(695);
      Complex complex6 = Complex.valueOf((-275.9144894), (double) 695);
      complex6.sinh();
      Complex complex7 = complex0.acos();
      complex7.sin();
      Complex.valueOf(193.41897957);
      complex2.pow((-380.9416));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.add(3.19462030745197E44);
      Complex complex2 = complex1.ZERO.asin();
      complex2.multiply(3.0);
      Complex complex3 = Complex.valueOf(131.1, (-2734.0831));
      Complex complex4 = new Complex((-1337.202273), (-656.2));
      complex3.negate();
      Complex complex5 = new Complex(3.19462030745197E44, 177.0247);
      complex0.divide(complex5);
      Complex complex6 = new Complex(1332.434937439591, (-1857.44598982));
      complex6.abs();
      complex5.pow(complex3);
      complex1.reciprocal();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.add(45.40007);
      Complex complex3 = complex0.pow(45.40007);
      complex0.add(complex2);
      Complex complex4 = complex3.subtract((-3388.06592));
      complex3.add(complex0);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.multiply(complex1);
      complex1.I.tan();
      Complex complex7 = complex6.INF.createComplex(1.0, Double.NaN);
      complex6.hashCode();
      complex1.getImaginary();
      complex6.ONE.multiply(Double.NaN);
      Complex complex8 = complex4.subtract(complex1);
      complex8.I.toString();
      complex8.toString();
      Complex complex9 = complex5.tanh();
      complex4.getField();
      Complex complex10 = complex0.sqrt();
      complex4.NaN.pow(complex0);
      complex3.getField();
      complex5.sinh();
      complex4.multiply(complex2);
      complex10.reciprocal();
      complex7.abs();
      complex1.cos();
      complex9.equals(complex8);
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.ONE.divide(complex0);
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.I.tan();
      Complex complex6 = complex2.INF.createComplex(1.0, Double.NaN);
      complex4.hashCode();
      complex1.getImaginary();
      complex4.hashCode();
      complex6.getReal();
      Complex.valueOf(1811.6640515703923);
      complex5.abs();
      Complex complex7 = new Complex(0.5920095443725586, 1.0);
      complex7.multiply(complex6);
      complex6.multiply(1210.3);
      Complex complex8 = Complex.valueOf(3376.315346279135, Double.NaN);
      Complex complex9 = new Complex(Double.NaN, 3376.315346279135);
      complex6.negate();
      Complex complex10 = new Complex(1.0, 3376.315346279135);
      complex4.divide(complex9);
      complex3.abs();
      Complex complex11 = complex8.pow(complex3);
      complex9.reciprocal();
      complex11.conjugate();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(2.7701207091668264E-285);
      Complex complex3 = Complex.valueOf(1.5707963255659942);
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex3.subtract(complex4);
      complex5.toString();
      complex2.toString();
      Complex complex7 = Complex.valueOf(2.7701207091668264E-285);
      Complex complex8 = complex7.tanh();
      complex7.getField();
      Complex complex9 = complex7.sqrt();
      complex6.sqrt1z();
      complex2.subtract(complex5);
      Complex complex10 = complex5.asin();
      complex2.isInfinite();
      complex10.ONE.getField();
      complex0.cosh();
      Complex complex11 = complex4.atan();
      complex11.I.readResolve();
      complex8.getImaginary();
      complex10.cos();
      Complex complex12 = complex6.atan();
      complex5.subtract(Double.NaN);
      complex3.subtract(complex9);
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-18.676993596), (-18.676993596));
      complex0.NaN.negate();
      Complex complex1 = complex0.asin();
      complex1.getField();
      Complex complex2 = complex1.divide((-18.676993596));
      Complex complex3 = Complex.valueOf((-18.676993596), (-1057.88816694));
      Complex complex4 = complex1.divide(complex2);
      complex2.divide(6.283185307179586);
      complex4.log();
      complex3.multiply(4972);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(1.0303966192973381E-205, 1.0303966192973381E-205);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex1.add(2.0);
      complex4.I.hashCode();
      Complex complex5 = complex0.reciprocal();
      complex5.I.log();
      complex3.ONE.tanh();
      complex1.tan();
      complex3.asin();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1186.417789, 1.1933437776279623E-7);
      complex0.getField();
      complex0.divide(1.1933437776279623E-7);
      complex0.add(3.19462030745197E44);
      complex0.readResolve();
      Complex.valueOf(3.19462030745197E44);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(1453.8487595510605, 1453.8487595510605);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.multiply(1453.8487595510605);
      Complex complex3 = complex0.multiply(complex1);
      complex3.getImaginary();
      Complex complex4 = complex1.reciprocal();
      complex4.sqrt();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex0.sqrt();
      complex5.ZERO.abs();
      complex5.ONE.cos();
      complex5.NaN.tanh();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.valueOf(3064.8, 3064.8);
      Complex complex9 = complex7.I.asin();
      complex9.I.sqrt();
      Complex.valueOf(3064.8);
      complex0.createComplex(0.0, 36.45);
      Complex complex10 = complex3.sqrt();
      complex8.cosh();
      complex7.multiply((-1560));
      complex6.readResolve();
      complex2.asin();
      complex10.createComplex((-468.23370557670717), (-468.23370557670717));
      Complex.valueOf((-5.656854249492381), 1060.1263556);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(0.4380109073229193, 0.4380109073229193);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.pow(0.4380109073229193);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.multiply(complex1);
      Complex.valueOf(0.4380109073229193, Double.NaN);
      complex6.INF.createComplex(1.0, Double.NaN);
      complex6.hashCode();
      complex1.getImaginary();
      Complex complex7 = complex4.subtract(complex1);
      complex7.I.toString();
      complex7.toString();
      Complex complex8 = complex5.tanh();
      complex4.getField();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex2.subtract(complex0);
      complex11.ONE.asin();
      complex4.isInfinite();
      Complex complex12 = complex2.cosh();
      complex12.ONE.atan();
      complex4.getImaginary();
      complex3.cos();
      complex11.atan();
      complex6.subtract((-4021.0));
      complex9.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(2.7701207091668264E-285);
      Complex complex3 = Complex.valueOf(1.5707963255659942);
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.conjugate();
      complex1.hashCode();
      complex2.getReal();
      Complex.valueOf((-6.437492120743254E-9));
      complex2.abs();
      complex4.multiply(complex2);
      complex3.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex(2.7701207091668264E-285, 2.7701207091668264E-285);
      Complex complex6 = complex5.negate();
      Complex complex7 = new Complex(2.7701207091668264E-285, 0.0);
      complex1.divide(complex3);
      complex3.abs();
      complex6.pow(complex2);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(9.739345931419228E280, 1.1933437776279623E-7);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.divide(9.739345931419228E280);
      complex0.INF.readResolve();
      Complex complex2 = Complex.valueOf(1131.402);
      complex2.pow(1.2289023836765196E-9);
      Complex complex3 = complex2.subtract(complex1);
      complex2.getArgument();
      complex0.subtract(0.0);
      Complex complex4 = new Complex(1.2289023836765196E-9);
      Complex complex5 = complex4.subtract(1.5707963267948966);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.reciprocal();
      complex7.equals(complexField0);
      Complex complex8 = new Complex((-0.621406333784182));
      complex8.nthRoot(4987);
      Complex.valueOf(3484.4084202849, Double.NaN);
      complex3.hashCode();
      Complex complex9 = complex7.asin();
      complex3.acos();
      complex9.getImaginary();
      complex5.reciprocal();
      complex7.sqrt();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-440.61216793), (-1662.61998237));
      complex0.getField();
      Complex complex1 = complex0.divide(227.7516);
      complex1.readResolve();
      Complex complex2 = Complex.valueOf((-1662.61998237));
      Complex complex3 = complex2.pow(1131.402);
      Complex complex4 = complex2.subtract(complex0);
      complex0.getArgument();
      Complex complex5 = complex0.subtract((-1.8298521015577627));
      Complex complex6 = new Complex((-1.8298521015577627));
      Complex complex7 = Complex.valueOf(227.7516, (-748.799325532));
      Complex complex8 = complex7.subtract(1.5707963267948966);
      Complex complex9 = complex8.reciprocal();
      complex6.reciprocal();
      complex3.equals(complex1);
      Complex complex10 = new Complex(2794.66062477);
      complex4.nthRoot(4987);
      complex9.hashCode();
      complex8.asin();
      Complex complex11 = Complex.NaN;
      complex11.acos();
      complex5.getImaginary();
      Complex complex12 = Complex.ZERO;
      complex12.reciprocal();
      complex3.sqrt();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(648.770201584);
      Complex complex2 = complex1.ZERO.atan();
      complex2.I.cos();
      complex0.getReal();
      Complex complex3 = complex1.cosh();
      complex3.INF.multiply(2509);
      complex0.NaN.pow(complex2);
      complex0.sin();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(754.30795, (-3613.253));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex0.tanh();
      complex5.NaN.add(complex0);
      Complex complex6 = complex5.NaN.conjugate();
      complex5.equals(complex0);
      Complex.valueOf(754.30795, 1.0988372954605789E-8);
      complex0.subtract((-1302.23484432));
      Complex complex7 = Complex.valueOf((-1302.23484432), 3.7621956910836314);
      Complex complex8 = complex7.divide(complex4);
      complex8.INF.exp();
      Complex complex9 = complex4.pow(20.0);
      complex0.I.multiply((-1275.4101));
      complex9.I.atan();
      Complex complex10 = complex6.acos();
      complex6.isInfinite();
      complex2.add(520.0);
      complex10.getField();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(1549.0);
      Complex complex3 = Complex.valueOf(0.4920966625213623);
      complex2.getField();
      complex1.toString();
      complex2.sin();
      Complex complex4 = complex1.multiply(1110);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.divide(0.4920966625213623);
      complex3.sin();
      Complex complex7 = complex6.sqrt1z();
      complex3.abs();
      Complex complex8 = new Complex(0.0);
      Complex complex9 = complex7.divide(complex8);
      complex9.atan();
      complex5.atan();
      complex9.tanh();
      complex8.toString();
      complex7.toString();
      complex4.abs();
      Complex.valueOf((double) 1110, (double) 1110);
      Complex.valueOf((double) 1110, (-820.04));
      Complex complex10 = new Complex(0.4920966625213623, 0.4920966625213623);
      Complex complex11 = complex10.add(complex7);
      Complex.valueOf(0.0, (double) 670);
      complex11.nthRoot(670);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(3396.30004281308, (-1.2297127301923986E-8));
      Complex complex1 = complex0.I.conjugate();
      complex0.getImaginary();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex3.pow(0.41421356237309515);
      Complex complex5 = Complex.valueOf(172.2695, 4165.090851877546);
      Complex complex6 = complex4.conjugate();
      complex1.hashCode();
      complex3.getReal();
      Complex complex7 = Complex.valueOf(20.0);
      Complex complex8 = complex2.multiply(complex0);
      complex7.multiply((-436.3327881918435));
      Complex.valueOf(3396.30004281308, (-1464.0));
      complex4.negate();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.sinh();
      complex10.divide(complex8);
      complex5.abs();
      complex0.pow(complex6);
      complex10.readResolve();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.NaN.asin();
      complex0.cos();
      Complex complex2 = Complex.INF;
      complex2.atan();
      complex2.sinh();
      complex1.pow((-2378.8));
      Complex complex3 = new Complex((-2378.8));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.multiply(complex1);
      complex1.I.tan();
      complex6.INF.createComplex(1.0, Double.NaN);
      complex6.hashCode();
      complex1.getImaginary();
      Complex complex7 = complex4.subtract(complex1);
      complex7.I.toString();
      complex7.toString();
      Complex complex8 = complex5.tanh();
      complex4.getField();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex2.subtract(complex0);
      complex11.ONE.asin();
      complex4.isInfinite();
      Complex complex12 = complex2.cosh();
      complex12.ONE.atan();
      complex4.getImaginary();
      complex3.cos();
      complex11.atan();
      complex6.subtract((-4021.0));
      complex9.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf(2.0, 2.0);
      complex3.sqrt();
      complex3.ONE.add((-1689.15782123));
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.createComplex((-787.390296691), 1910.056582494);
      Complex complex6 = complex4.log();
      complex6.NaN.multiply(complex1);
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = complex0.I.multiply(48);
      Complex complex2 = (Complex)complex1.ONE.readResolve();
      Complex complex3 = complex0.multiply((-649.770201584));
      Complex complex4 = complex3.ZERO.add(0.0);
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex5.NaN.pow(0.0);
      complex6.INF.getField();
      Complex complex7 = Complex.valueOf(0.0, (-649.770201584));
      complex3.ONE.add(complex7);
      Complex complex8 = complex5.ZERO.tanh();
      complex4.NaN.readResolve();
      complex0.getReal();
      complex6.asin();
      Complex complex9 = complex7.multiply((-2271.98513191354));
      Complex.valueOf((-228.38));
      Complex complex10 = complex8.pow((-649.770201584));
      Complex complex11 = complex8.subtract(complex7);
      complex1.INF.getArgument();
      Complex complex12 = Complex.valueOf(2.0);
      complex2.subtract(complex12);
      complex9.asin();
      complex1.isInfinite();
      complex5.cosh();
      complex11.atan();
      complex1.getImaginary();
      Complex complex13 = complex8.cos();
      complex13.atan();
      complex12.sinh();
      complex10.pow((-1366.5));
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.ONE.divide(complex0);
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.multiply(complex1);
      complex1.I.tan();
      complex5.INF.createComplex(1.0, Double.NaN);
      complex5.hashCode();
      complex1.getImaginary();
      Complex complex6 = complex3.subtract(complex1);
      complex6.I.toString();
      complex6.toString();
      Complex complex7 = complex4.tanh();
      complex3.getField();
      complex0.sqrt();
      complex7.sqrt1z();
      Complex complex8 = complex4.subtract(0.0);
      complex8.reciprocal();
      complex7.reciprocal();
      Complex complex9 = new Complex(1.0, Double.NaN);
      complex9.equals(complex2);
      try { 
        complex4.nthRoot((-2081));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,081
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.ONE.reciprocal();
      complex1.subtract(complex2);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.acos();
      complex3.ONE.add(2290.8213302);
      Complex complex5 = Complex.valueOf(3.851445905038431E134, 2.0);
      complex4.I.cos();
      Complex complex6 = Complex.valueOf(1.2530567646026611);
      complex6.cos();
      Complex complex7 = complex2.atan();
      complex5.getImaginary();
      complex4.pow(3.851445905038431E134);
      complex6.tan();
      complex2.equals(complex3);
      complex3.divide(0.0);
      Complex complex8 = complex7.createComplex(2.0, 1.2530567646026611);
      complex8.getReal();
      Complex.valueOf(0.41421356237309515);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-440.61216793), (-1662.61998237));
      complex0.ONE.hashCode();
      Complex complex1 = complex0.multiply((-1));
      complex1.toString();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex2 = Complex.valueOf(1067.5);
      Complex complex3 = complex2.INF.tan();
      complex3.NaN.readResolve();
      complex2.ONE.pow(complex1);
      Complex complex4 = complex3.sinh();
      complex4.ZERO.tan();
      complex1.NaN.createComplex(2759.8715718997, (-366.18));
      complex2.ZERO.sqrt();
      complex0.ZERO.cosh();
      Complex complex5 = complex2.multiply((-1));
      complex1.readResolve();
      complex5.asin();
      complex4.createComplex((-0.9946151502808314), (-440.61216793));
      Complex.valueOf(4.5199654318611534E-10, 1060.1263556);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.add((-1689.15782123));
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.sinh();
      complex4.getField();
      complex2.negate();
      complex1.tan();
      complex0.sin();
      complex2.readResolve();
      Complex complex5 = new Complex(2.0, 2.0);
      complex4.subtract(291.97870840478);
      complex4.NaN.reciprocal();
      Complex complex6 = new Complex(291.97870840478, 2.1906094551086426);
      complex3.subtract(complex6);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.acos();
      complex1.createComplex(8.1061387, 0.0);
      Complex complex2 = new Complex((-2094.0), 2118.1367534098);
      complex2.divide((-1.5707963255659942));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sinh();
      try { 
        complex4.nthRoot((-2165));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,165
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.acos();
      complex0.ONE.reciprocal();
      complex0.NaN.asin();
      complex0.hashCode();
      complex0.asin();
      Complex complex2 = complex1.acos();
      complex0.getImaginary();
      complex2.reciprocal();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(9.739345931419228E280, 1.1933437776279623E-7);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.divide(9.739345931419228E280);
      complex0.INF.readResolve();
      Complex complex2 = Complex.valueOf(1131.402);
      complex2.pow(1.2289023836765196E-9);
      Complex complex3 = complex2.subtract(complex1);
      complex2.getArgument();
      complex0.subtract(0.0);
      Complex complex4 = new Complex(1.2289023836765196E-9);
      Complex complex5 = complex4.subtract(1.5707963267948966);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.reciprocal();
      complex7.equals(complexField0);
      Complex complex8 = new Complex((-0.621406333784182));
      complex8.nthRoot(4987);
      complex3.hashCode();
      Complex complex9 = complex7.asin();
      complex3.acos();
      complex9.getImaginary();
      complex5.reciprocal();
      complex7.sqrt();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = complex0.I.multiply(48);
      complex1.ONE.readResolve();
      Complex complex2 = complex0.multiply((-649.770201584));
      Complex complex3 = complex2.ZERO.add(0.0);
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex4.NaN.pow(0.0);
      complex5.INF.getField();
      Complex complex6 = Complex.valueOf(0.0, (-649.770201584));
      complex2.ONE.add(complex6);
      complex4.ZERO.tanh();
      complex3.NaN.readResolve();
      complex0.getReal();
      complex5.asin();
      complex6.multiply((-2271.98513191354));
      complex0.add((-649.770201584));
      complex6.readResolve();
      Complex.valueOf((-228.38));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(1549.0);
      Complex complex3 = Complex.valueOf(0.4920966625213623);
      complex3.pow(4165.090851877546);
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.I.conjugate();
      complex4.hashCode();
      complex0.getReal();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.multiply(complex6);
      complex7.multiply((-1464.0));
      Complex complex8 = complex7.subtract(0.4920966625213623);
      complex2.reciprocal();
      complex8.reciprocal();
      Object object0 = new Object();
      complex5.equals(object0);
      // Undeclared exception!
      complex2.nthRoot(1017951728);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.multiply(complex1);
      complex1.I.tan();
      complex6.INF.createComplex(1.0, Double.NaN);
      complex6.hashCode();
      complex1.getImaginary();
      Complex complex7 = complex4.subtract(complex1);
      complex7.I.toString();
      complex7.toString();
      Complex complex8 = complex5.tanh();
      complex4.getField();
      Complex complex9 = complex0.sqrt();
      complex8.sqrt1z();
      Complex complex10 = complex2.subtract(complex0);
      complex10.ONE.asin();
      complex4.isInfinite();
      Complex complex11 = complex2.cosh();
      complex11.ONE.atan();
      complex4.getImaginary();
      complex3.cos();
      Complex complex12 = complex10.atan();
      complex2.sinh();
      complex0.pow((-1366.5));
      complex12.cos();
      complex9.NaN.getField();
      complex8.reciprocal();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.reciprocal();
      complex1.sin();
      Complex complex3 = complex1.I.exp();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.pow(1.557407724654902);
      Complex.valueOf((-20.0), 1.557407724654902);
      Complex complex6 = complex4.conjugate();
      complex5.hashCode();
      complex0.getReal();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.multiply(complex6);
      complex3.multiply((-3.0287143914420064E-8));
      Complex.valueOf((-3.0287143914420064E-8), 0.0);
      Complex complex8 = complex5.negate();
      complex5.NaN.reciprocal();
      Complex complex9 = complex2.sinh();
      Complex complex10 = Complex.INF;
      complex9.divide(complex10);
      complex8.abs();
      Complex complex11 = Complex.valueOf((-1463.0), (-1464.0));
      complex11.pow(complex2);
      complex7.readResolve();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = new Complex((-4.5199654318611534E-10));
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.I.pow((-4.5199654318611534E-10));
      complex0.I.atan();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(1549.0);
      Complex complex3 = Complex.valueOf(0.4920966625213623);
      complex3.pow(4165.090851877546);
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex4.I.conjugate();
      complex4.hashCode();
      complex0.getReal();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.multiply(complex5);
      complex6.multiply((-1464.0));
      Complex complex7 = Complex.valueOf(1549.0, 0.0);
      complex0.ONE.negate();
      complex7.sinh();
      complex1.divide(complex6);
      complex3.abs();
      Complex complex8 = complex2.pow(complex0);
      complex8.readResolve();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 2.406976727302894E-69;
      double double1 = (-1.9220613500411237E-289);
      Complex complex0 = Complex.valueOf(2.406976727302894E-69, (-1.9220613500411237E-289));
      Complex complex1 = complex0.sinh();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.NaN.negate();
      complex2.ONE.cosh();
      int int0 = 0;
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(2593.273471740006);
      Complex complex1 = complex0.negate();
      complex1.sqrt();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.sqrt();
      complex3.ZERO.add(0.0);
      Complex complex4 = complex2.log();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.ONE.conjugate();
      complex6.ZERO.readResolve();
      complex5.NaN.add(849.0);
      complex0.hashCode();
      Complex complex7 = Complex.valueOf(2593.273471740006, 0.0);
      complex7.NaN.cosh();
      complex7.ZERO.multiply(676);
      complex2.tanh();
      complex4.tan();
      complex3.getArgument();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(3396.30004281308, (-1.2297127301923986E-8));
      complex0.I.conjugate();
      complex0.getImaginary();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.pow(complex0);
      complex1.getField();
      complex1.ONE.toString();
      complex1.I.sin();
      complex0.ZERO.multiply(670);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex2.sqrt1z();
      complex5.ZERO.abs();
      complex0.NaN.divide(complex5);
      complex2.atan();
      Complex complex6 = complex3.atan();
      complex6.ONE.tanh();
      complex0.toString();
      complex0.toString();
      complex3.abs();
      Complex.valueOf((-1.2297127301923986E-8), 0.0);
      Complex.valueOf(0.0, 826.397);
      complex2.add(complex4);
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-1085.0), (-1085.0));
      Complex complex1 = Complex.ZERO;
      complex0.I.add(complex1);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex0.multiply(25);
      Complex complex5 = complex4.I.conjugate();
      complex5.ZERO.getField();
      Complex complex6 = complex4.I.cos();
      complex6.INF.asin();
      complex0.NaN.divide(complex5);
      complex4.isInfinite();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.cosh();
      complex4.ZERO.pow((-1085.0));
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = complex7.multiply(complex4);
      complex10.getImaginary();
      Complex complex11 = complex4.cosh();
      Complex complex12 = complex11.exp();
      complex12.I.conjugate();
      Complex complex13 = complex9.cosh();
      complex13.I.negate();
      complex13.createComplex(0.0, 1.0033721426962048E-8);
      Complex.valueOf((double) 25);
      complex3.asin();
      complex4.toString();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1418.2659626194127);
      Complex complex1 = complex0.ZERO.exp();
      complex1.I.abs();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.valueOf((-340.1765974), 1.0);
      Complex complex5 = complex4.ZERO.subtract(complex0);
      complex5.NaN.tanh();
      Complex complex6 = complex2.add(complex0);
      Complex complex7 = complex0.I.divide(complex1);
      complex7.INF.getArgument();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex0.add(complex2);
      Complex complex11 = complex10.add(complex6);
      complex11.ZERO.getField();
      complex6.pow(complex4);
      complex2.tanh();
      Complex complex12 = complex3.INF.cosh();
      complex12.ZERO.tan();
      complex9.getField();
      Complex complex13 = complex9.conjugate();
      Complex complex14 = complex13.NaN.multiply(0.10993985831737518);
      complex14.divide(2002.67700138);
      Complex complex15 = complex13.NaN.exp();
      complex15.I.multiply(0.10993985831737518);
      complex3.conjugate();
      complex6.getReal();
      complex9.isNaN();
      complex7.sqrt1z();
      complex7.asin();
      complex5.subtract((-1.0));
      complex8.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(1.2289023836765196E-9, (-585.811761683));
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.toString();
      Complex complex2 = complex0.tanh();
      complex2.getArgument();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex0.sqrt();
      complex5.ZERO.abs();
      Complex complex6 = complex5.ONE.cos();
      complex5.NaN.tanh();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex7.asin();
      Complex complex9 = Complex.valueOf(3064.8, 3064.8);
      complex8.I.asin();
      Complex.valueOf(3064.8);
      Complex complex10 = complex0.NaN.sinh();
      Complex complex11 = complex2.I.divide(complex8);
      complex11.INF.divide(complex0);
      complex1.sinh();
      complex8.getField();
      complex6.negate();
      complex9.tan();
      complex8.sin();
      complex3.add(1.0950722694396973);
      complex10.readResolve();
      Complex complex12 = new Complex(3064.8, 0.0);
      complex12.ZERO.subtract(0.42161011695861816);
      complex2.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.divide((-628.2527));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf((-628.2527), 0.0);
      complex3.ZERO.sin();
      complex1.INF.toString();
      complex0.NaN.getArgument();
      complex0.getReal();
      Complex complex4 = complex0.I.conjugate();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.createComplex(0.0, Double.NaN);
      Complex complex8 = complex7.ONE.cos();
      complex8.getField();
      Complex complex9 = Complex.valueOf((-628.2527), (-1839.0));
      complex6.getReal();
      Complex.valueOf((-628.2527));
      Complex complex10 = complex9.ZERO.pow((-1839.0));
      complex10.ONE.multiply(0);
      Complex complex11 = complex9.NaN.sqrt();
      complex11.INF.negate();
      complex7.isNaN();
      complex9.NaN.readResolve();
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex12.divide(complex5);
      complex4.add(complex9);
      Complex.valueOf(2400.99);
      Complex complex13 = complex1.cosh();
      complex13.NaN.negate();
      complex2.abs();
      complex3.cosh();
      complex5.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex1.cosh();
      Complex complex2 = complex1.ZERO.sinh();
      complex1.NaN.cosh();
      complex0.sqrt1z();
      complex0.acos();
      complex2.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.3443336486816406, 1.3443336486816406);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex2.add(complex1);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex0.NaN.createComplex((-8.160628910742724E110), 1485.7342337697);
      complex3.nthRoot(962);
      Complex complex8 = complex4.multiply((-234));
      Complex complex9 = complex2.tan();
      Complex complex10 = complex9.INF.multiply((double) (-234));
      complex10.sqrt1z();
      complex3.multiply(complex2);
      Complex complex11 = complex6.log();
      complex11.INF.abs();
      complex8.exp();
      try { 
        complex7.nthRoot((-234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -234
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex0.hashCode();
      Complex complex2 = complex1.I.add(0.0);
      complex2.NaN.toString();
      complex1.NaN.acos();
      complex1.ZERO.exp();
      complex1.isNaN();
      complex1.toString();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1949.1145582778));
      Complex complex1 = complex0.INF.sinh();
      complex0.ONE.conjugate();
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex0.multiply(complex2);
      complex1.ONE.negate();
      Complex complex4 = complex3.createComplex(1224.1737756661184, (-1949.1145582778));
      complex2.getImaginary();
      complex0.readResolve();
      Complex complex5 = complex0.multiply(complex1);
      complex1.readResolve();
      complex5.getImaginary();
      Complex complex6 = complex1.log();
      Complex.valueOf(1224.1737756661184, (-1949.1145582778));
      Complex complex7 = complex4.divide(complex5);
      complex7.NaN.sin();
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.add(45.40007);
      complex2.NaN.pow(550.15756);
      complex0.ZERO.add(complex1);
      complex2.ZERO.subtract(45.40007);
      complex0.add(complex1);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.log();
      complex1.ONE.getArgument();
      complex1.NaN.getField();
      Complex complex2 = Complex.ZERO;
      complex0.ONE.divide(complex2);
      complex0.I.getField();
      complex1.I.add(783.29640346407);
      int int0 = (-3578);
      try { 
        complex0.nthRoot((-3578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,578
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.getImaginary();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.tan();
      complex3.cosh();
      complex0.readResolve();
      Complex complex4 = complex2.reciprocal();
      complex0.acos();
      complex4.INF.subtract(0.0);
      try { 
        complex1.NaN.nthRoot((-2619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,619
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = complex0.I.multiply(48);
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.multiply((-649.770201584));
      Complex complex3 = complex2.ZERO.add(0.0);
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex4.NaN.pow(0.0);
      complex5.INF.getField();
      Complex complex6 = Complex.valueOf(0.0, (-649.770201584));
      complex2.ONE.add(complex6);
      Complex complex7 = complex4.ZERO.tanh();
      complex3.NaN.readResolve();
      complex0.getReal();
      complex5.asin();
      complex6.multiply((-2271.98513191354));
      Complex.valueOf((-228.38));
      Complex complex8 = complex7.pow((-649.770201584));
      complex7.subtract(complex6);
      complex1.INF.getArgument();
      complex8.ONE.subtract((-3900.47));
      complex7.I.subtract(3467.0);
      complex7.reciprocal();
      complex3.reciprocal();
      complex4.equals(object0);
      try { 
        complex5.nthRoot((-2721));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,721
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex3.ONE.divide((-222.39174842));
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex0.cos();
      complex3.NaN.nthRoot(1879);
      complex0.readResolve();
      Complex complex7 = complex4.multiply((-426));
      complex4.NaN.add(complex2);
      complex2.isInfinite();
      complex7.sinh();
      complex7.getField();
      complex6.reciprocal();
      complex3.tanh();
      complex4.ONE.pow(complex0);
      Complex complex8 = complex0.NaN.tan();
      complex8.toString();
      complex2.readResolve();
      complex0.log();
      complex5.divide(complex6);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.negate();
      complex3.I.createComplex(1555.04692979, 1555.04692979);
      Complex complex4 = complex1.ONE.createComplex(1555.04692979, (-4562.7988861852145));
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex0.ONE.conjugate();
      Complex complex7 = complex0.sin();
      complex7.isInfinite();
      complex2.ZERO.log();
      Complex.valueOf((-1543.882129831079), 1555.04692979);
      complex1.ONE.abs();
      complex1.readResolve();
      complex4.INF.divide(complex6);
      Complex complex8 = complex0.sin();
      Complex complex9 = complex2.pow(complex8);
      complex9.I.sqrt1z();
      complex7.pow(complex0);
      Complex complex10 = complex3.add(complex5);
      complex1.getArgument();
      complex8.tanh();
      complex2.isInfinite();
      complex10.log();
      complex2.add(-0.0);
      complex3.log();
      complex5.cosh();
      Complex complex11 = complex6.multiply((-65));
      complex11.subtract((-3005.6103));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(9.739345931419228E280, 1.1933437776279623E-7);
      complex0.getField();
      Complex complex1 = complex0.divide(9.739345931419228E280);
      complex1.I.add(1131.402);
      complex1.readResolve();
      Complex.valueOf(2363.411212064599);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2201.3561902322);
      Complex complex2 = complex0.INF.add(0.5512100458145142);
      Complex.valueOf(0.5512100458145142, 0.5512100458145142);
      complex1.NaN.conjugate();
      complex1.toString();
      complex1.getArgument();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.cos();
      complex4.NaN.divide((-2290.657));
      Complex complex5 = Complex.valueOf(0.0, (-2290.657));
      Complex complex6 = complex4.subtract(complex2);
      complex2.hashCode();
      complex2.sinh();
      complex6.atan();
      complex5.subtract(0.0);
      complex6.reciprocal();
      complex3.tanh();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.512169809356372E50));
      Complex complex1 = complex0.ONE.acos();
      complex0.ZERO.abs();
      Complex complex2 = complex1.ONE.createComplex(268.0, (-8.335545536862392E-8));
      Complex complex3 = Complex.valueOf((-7.512169809356372E50), 268.0);
      Complex complex4 = complex0.INF.pow(complex3);
      Complex complex5 = complex3.NaN.atan();
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex4.ONE.log();
      complex4.INF.getField();
      complex1.ZERO.divide(complex2);
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex2.tan();
      Complex complex10 = complex9.tanh();
      complex10.add((-8.335545536862392E-8));
      Complex.valueOf((-8.335545536862392E-8));
      Complex complex11 = complex7.subtract(complex3);
      complex8.I.multiply(456);
      Complex complex12 = complex2.multiply(complex11);
      complex12.I.pow(complex6);
      complex7.createComplex(0.0, (-8.335545536862392E-8));
      Complex complex13 = complex8.multiply((-3004));
      Complex.valueOf(0.0, 268.0);
      complex13.ONE.sqrt();
      complex10.getReal();
      Complex complex14 = complex7.exp();
      complex14.toString();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = Complex.valueOf((-3384.44200264975), (-166.6688));
      complex3.ONE.asin();
      complex0.INF.nthRoot(2820);
      complex0.divide(2079.3053);
      Complex complex4 = Complex.valueOf(0.0, 1035.6250931814623);
      Complex complex5 = complex4.NaN.divide(0.0);
      complex5.INF.tanh();
      complex4.isNaN();
      complex1.subtract(complex0);
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.pow(294.6875334);
      Complex complex3 = complex2.add(complex1);
      complex3.I.hashCode();
      complex3.ZERO.add(294.6875334);
      complex0.ZERO.getArgument();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.I.acos();
      complex2.getImaginary();
      complex5.ZERO.pow(complex1);
      Complex complex6 = complex1.pow(complex0);
      try { 
        complex6.ONE.nthRoot((-796));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -796
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-440.61216793), (-1662.61998237));
      complex0.ONE.hashCode();
      Complex complex1 = complex0.multiply((-1));
      complex1.toString();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex2 = Complex.valueOf(1067.5);
      Complex complex3 = complex2.INF.tan();
      complex3.NaN.readResolve();
      Complex complex4 = complex2.ONE.pow(complex1);
      Complex complex5 = complex3.sinh();
      complex5.ZERO.tan();
      complex2.ZERO.sqrt();
      complex0.ZERO.cosh();
      Complex complex6 = complex2.multiply((-1));
      complex1.readResolve();
      Complex complex7 = complex4.subtract(complex3);
      complex4.acos();
      Complex.valueOf(3.851445905038431E134, Double.POSITIVE_INFINITY);
      complex1.cos();
      complex0.atan();
      complex6.getImaginary();
      complex4.pow(1067.5);
      complex7.tan();
      complex4.equals((Object) null);
      complex4.divide((-1667.32745));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.createComplex(0.0, (-1798.98361013347));
      complex1.ONE.hashCode();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = Complex.valueOf(1271.1841674751, 0.0);
      complex0.NaN.getField();
      complex5.INF.toString();
      complex5.ZERO.multiply(complex2);
      complex5.ZERO.readResolve();
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex6.ZERO.tanh();
      complex7.ONE.multiply((-694));
      complex7.INF.readResolve();
      complex2.acos();
      complex2.cosh();
      complex1.createComplex(0.0, (-9.920197743470107E-8));
      Complex complex8 = complex2.add(353.3);
      complex0.cosh();
      complex8.subtract(0.0);
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.acos();
      complex0.ONE.reciprocal();
      complex0.NaN.asin();
      complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-1218.42), (-3218.154063));
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf(2.0, 2.0);
      Complex complex4 = complex3.sqrt();
      assertEquals(0.6435942529055826, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.ONE.add((-1689.15782123));
      List<Complex> list0 = complex2.nthRoot(2526);
      assertEquals(2526, list0.size());
      
      complex0.sinh();
      Complex complex6 = complex5.acos();
      assertEquals(3.141592653589793, complex6.getReal(), 0.01);
      assertEquals((-8.124540259611607), complex6.getImaginary(), 0.01);
      
      complex5.sin();
      Complex.valueOf(2.0);
      Complex complex7 = complex0.pow((double) 2526);
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.abs();
      Complex complex1 = complex0.divide(0.0);
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.multiply(2914);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.sqrt();
      complex6.INF.pow(681.7021774432231);
      Complex complex7 = complex6.ZERO.sqrt1z();
      complex7.I.acos();
      Complex complex8 = complex6.INF.multiply(0.0);
      complex8.INF.subtract(complex4);
      complex1.cos();
      try { 
        complex3.nthRoot((-542));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -542
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.multiply((-1125));
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.tan();
      complex1.ZERO.getField();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ONE.sinh();
      complex5.ZERO.divide(complex3);
      complex1.getField();
      Complex complex6 = complex2.createComplex(0.0, 6.283185307179586);
      complex6.divide(2180.470681353623);
      int int0 = (-2165);
      complex3.sinh();
      try { 
        complex6.nthRoot((-2165));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,165
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-2172.09));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.sin();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex2.getReal(), 0.01);
      
      complex0.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      assertTrue(complex3.equals((Object)complex0));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1122.66736988, (-20.0));
      Complex complex1 = complex0.createComplex((-1.0), 0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1122.66736988, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.I.exp();
      assertEquals(0.8414709848078965, complex4.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex6 = complex3.I.tan();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex0.sqrt();
      complex8.I.getField();
      complex0.sinh();
      Complex complex9 = complex6.multiply(complex7);
      Complex complex10 = complex8.reciprocal();
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      
      double double0 = complex3.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex11 = complex9.cos();
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertSame(complex9, complex5);
      assertSame(complex11, complex10);
      assertEquals(0.7615941559557649, complex6.getImaginary(), 0.01);
      assertSame(complex1, complex2);
      assertNotSame(complex11, complex7);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      assertSame(complex2, complex1);
  }
}
