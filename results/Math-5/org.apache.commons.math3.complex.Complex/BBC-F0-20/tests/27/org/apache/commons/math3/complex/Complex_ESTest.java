/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:24:36 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1309.46445074), 2.677136737066629E238);
      Complex complex1 = Complex.ONE;
      complex1.abs();
      Complex complex2 = complex1.NaN.multiply(1.0);
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex1.NaN.asin();
      complex0.asin();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.INF.cos();
      complex5.I.multiply((-2530));
      complex6.asin();
      Complex complex7 = complex0.multiply(complex1);
      complex7.NaN.sqrt1z();
      complex5.subtract(complex3);
      complex0.sqrt();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = (-1448.2312749);
      Complex complex0 = Complex.valueOf((-1448.2312749));
      Complex complex1 = complex0.ZERO.cos();
      complex1.ONE.hashCode();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.INF.getArgument();
      complex2.cos();
      complex2.ONE.subtract((-1448.2312749));
      Complex complex3 = new Complex((-1045.8516), 2.0599991793068063E262);
      complex3.ONE.conjugate();
      Complex.valueOf((-2416.012011101855));
      Complex complex4 = complex0.divide(complex3);
      complex3.acos();
      complex4.NaN.createComplex((-4423.93598690026), 2.0599991793068063E262);
      Complex complex5 = complex3.sqrt1z();
      try { 
        complex5.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.acos();
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.multiply(complex0);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.960668706590162E-8, 3.960668706590162E-8);
      complex0.INF.tanh();
      Complex complex1 = new Complex(3.960668706590162E-8, 60.7);
      Complex complex2 = complex1.subtract(3.960668706590162E-8);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.I.add(60.7);
      complex4.ONE.readResolve();
      complex2.NaN.subtract(3.960668706590162E-8);
      complex3.ONE.sqrt();
      complex3.ZERO.add(3.960668706590162E-8);
      Complex complex5 = Complex.valueOf(60.7);
      complex1.getArgument();
      complex0.ZERO.sqrt();
      Complex complex6 = complex5.ONE.subtract(complex0);
      Complex complex7 = Complex.valueOf(1.2050528526306152, 2531.665495);
      Complex complex8 = complex7.I.divide((double) 1017);
      complex8.I.pow(complex7);
      complex2.nthRoot(1017);
      complex3.sqrt();
      complex0.conjugate();
      complex5.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY, 3.960668706590162E-8);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0624985110080394E-7), 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(876.11);
      complex0.ONE.subtract(2682.2690724047934);
      complex0.toString();
      complex0.multiply(876.11);
      complex0.subtract(2682.2690724047934);
      Complex complex1 = Complex.valueOf(2682.2690724047934, Double.POSITIVE_INFINITY);
      complex1.ONE.tan();
      complex1.ONE.getField();
      complex1.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = new Complex((-20.0), (-1.0128633727463388E-7));
      complex2.tanh();
      Complex complex3 = Complex.I;
      complex3.NaN.subtract((-380.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0, 2.0);
      Complex complex2 = complex1.tanh();
      complex2.I.exp();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(19.9042, Double.NaN);
      Complex complex1 = complex0.tanh();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.sin();
      Complex complex2 = complex1.reciprocal();
      Complex.valueOf(2024.07067);
      Complex complex3 = complex0.multiply(739);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf((-838.0295868));
      Complex complex7 = complex6.add(complex3);
      Complex complex8 = Complex.valueOf((double) 739);
      Complex complex9 = complex8.cos();
      Complex complex10 = complex8.multiply(739);
      complex5.asin();
      complex7.pow(complex2);
      Complex complex11 = complex7.add(complex10);
      Complex complex12 = complex4.createComplex(374.0, (-993));
      complex12.subtract(2.0);
      Complex complex13 = complex9.subtract(1417.6171212836123);
      complex13.multiply(1);
      Complex complex14 = complex11.sqrt1z();
      complex14.ONE.readResolve();
      complex4.add(complex5);
      complex0.tanh();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.add(9.848636053777669E237);
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.ONE.add(complex0);
      complex0.getField();
      complex0.abs();
      Complex complex3 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex4.INF.tanh();
      complex6.NaN.getField();
      Complex complex8 = complex4.NaN.negate();
      Complex complex9 = complex8.ZERO.sqrt();
      complex9.INF.acos();
      Complex complex10 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex10.NaN.hashCode();
      complex3.createComplex(354.8671867294651, 9.848636053777669E237);
      complex5.reciprocal();
      Complex complex11 = complex4.sqrt1z();
      complex11.getArgument();
      Complex complex12 = complex5.subtract(354.8671867294651);
      complex12.ONE.multiply(complex10);
      Complex complex13 = complex9.multiply(37);
      complex13.I.acos();
      complex8.pow(complex1);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add(Double.NaN);
      complex0.reciprocal();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = (-902.4885808498717);
      Complex complex0 = Complex.valueOf((-902.4885808498717), 0.4145383834838867);
      int int0 = 731;
      Complex.valueOf(2083.3);
      complex0.ONE.asin();
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-1185.7589709));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex2.NaN.subtract(complex1);
      Complex complex5 = complex1.NaN.asin();
      complex4.ONE.multiply(complex0);
      Complex complex6 = Complex.valueOf(2257.1218, Double.POSITIVE_INFINITY);
      complex1.readResolve();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex3.log();
      complex4.toString();
      complex3.subtract(complex0);
      complex8.atan();
      Complex complex9 = Complex.valueOf((-264.012));
      complex9.pow(complex6);
      complex8.subtract((-1874.410878532));
      Complex complex10 = complex4.conjugate();
      Complex complex11 = Complex.valueOf((-1185.7589709), (-1874.410878532));
      complex10.multiply(complex11);
      Complex complex12 = complex8.cos();
      complex12.toString();
      complex3.multiply(complex7);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2100.038890196), (-2100.038890196));
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.valueOf((-2100.038890196), (-20.0));
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.exp();
      Complex complex1 = null;
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex((-20.0), (-20.0));
      Complex complex5 = complex4.pow((-242.66));
      Complex.valueOf((-20.0), Double.NaN);
      complex3.pow(complex3);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.multiply(complex1);
      Complex complex8 = new Complex((-242.66), 1696.943129);
      Complex.valueOf((-242.66));
      complex1.abs();
      complex7.getField();
      complex5.getReal();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.I;
      complex10.cosh();
      complex2.tanh();
      Complex complex11 = new Complex(0.0, 0.13260120495623307);
      complex11.abs();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2517.0, 2.24669039465627E188);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.valueOf((-1.0), (-448.3791301));
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-2045.395185359), (-2045.395185359));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.NaN.pow(complex0);
      complex3.INF.abs();
      Complex complex4 = complex0.sqrt();
      complex0.INF.subtract(complex3);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ZERO.tan();
      complex5.ONE.tan();
      Complex complex6 = complex4.asin();
      complex5.INF.asin();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex7.NaN.sin();
      complex1.ONE.exp();
      Complex complex10 = complex2.divide(2692.77868941157);
      complex7.equals(complex10);
      Complex complex11 = complex0.sin();
      Complex complex12 = complex11.negate();
      complex12.sinh();
      complex10.pow(complex11);
      Complex complex13 = complex9.asin();
      Complex complex14 = complex8.asin();
      complex11.log();
      complex4.I.multiply(0);
      complex14.log();
      complex11.multiply(complex14);
      complex7.tanh();
      complex13.divide((-2045.395185359));
      complex8.subtract((-306.96660325953667));
      complex11.nthRoot(42);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.add((-3614.1809103909904));
      complex2.add(complex4);
      Complex complex5 = complex4.multiply(4.64358213070668);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.divide(complex6);
      Complex complex8 = complex5.multiply(complex3);
      complex7.log();
      complex3.toString();
      complex8.atan();
      Complex complex9 = complex6.multiply(complex4);
      Complex complex10 = complex7.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.NaN;
      complex1.pow(complex2);
      complex11.multiply(complex1);
      complex7.createComplex(2.3732438087463374, 2715.763);
      complex11.acos();
      complex1.isNaN();
      complex10.abs();
      complex8.getField();
      complex0.getReal();
      Complex complex12 = Complex.NaN;
      complex4.cosh();
      complex3.tanh();
      complex9.abs();
      Complex complex13 = new Complex(1.0);
      complex13.abs();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2.373243808746338, 2.7487849807248755E-43);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.log();
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex(2.373243808746338, 2.373243808746338);
      Complex complex7 = complex6.cosh();
      complex3.cosh();
      complex5.exp();
      complex7.reciprocal();
      Complex complex8 = new Complex((-7.043545052852817E-9));
      complex2.exp();
      complex3.asin();
      complex6.tan();
      Complex complex9 = Complex.INF;
      complex4.isNaN();
      Complex.valueOf(8.518544447611021E-7);
      Complex.valueOf(8.518544447611021E-7, 1599.106105239624);
      complex3.equals("");
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex0.multiply((-403.0579815496457));
      complex0.subtract((-266.740001512));
      complex2.ONE.subtract(complex1);
      Complex complex4 = complex2.subtract((-20.0));
      complex4.multiply((-266.740001512));
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex3.log();
      complex5.reciprocal();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(3928.352469);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply(3928.352469);
      Complex complex4 = complex0.subtract((-564.0));
      Complex complex5 = complex0.subtract((-564.0));
      Complex complex6 = complex3.divide(complex0);
      Complex complex7 = complex1.multiply(complex2);
      Complex complex8 = complex6.log();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = Complex.NaN;
      Complex complex11 = new Complex((-20.0), (-564.0));
      Complex complex12 = new Complex((-266.740001512));
      complex12.cosh();
      complex1.hashCode();
      Complex complex13 = complex5.cosh();
      complex4.exp();
      complex8.reciprocal();
      Complex complex14 = new Complex(252.41685779003);
      complex6.exp();
      complex9.asin();
      complex1.tan();
      Complex complex15 = Complex.INF;
      complex5.isNaN();
      Complex.valueOf((-2408.933951349501));
      Complex.valueOf(Double.NaN, (-2408.933951349501));
      complex14.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.I.add((-1.0));
      complex0.tan();
      complex0.ONE.toString();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(complex0);
      complex2.getImaginary();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.divide(complex0);
      complex1.multiply(complex0);
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex(0.0, 1.8639413286837387);
      complex1.cosh();
      Complex complex6 = new Complex(0.0);
      complex6.hashCode();
      complex0.cosh();
      complex4.exp();
      complex2.reciprocal();
      Complex complex7 = new Complex((-1233.7519297050594));
      Complex complex8 = Complex.ONE;
      complex0.asin();
      Complex complex9 = complex5.tan();
      Complex complex10 = Complex.INF;
      complex3.isNaN();
      Complex.valueOf((-1233.7519297050594));
      Complex.valueOf(1326.39, 1.3509137630462646);
      Complex complex11 = Complex.I;
      complex9.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.multiply((-20.0));
      Complex complex3 = complex0.multiply((-403.0579815496457));
      complex0.subtract((-266.740001512));
      Complex complex4 = complex2.subtract((-20.0));
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex5.multiply(complex4);
      complex6.log();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = Complex.NaN;
      Complex complex9 = new Complex((-266.740001512), (-403.0579815496457));
      complex9.cosh();
      complex8.hashCode();
      complex5.cosh();
      complex3.exp();
      complex3.tan();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.divide(3217.43574);
      Complex complex3 = complex2.ZERO.multiply(3217.43574);
      Complex complex4 = complex2.ZERO.pow(complex1);
      Complex complex5 = complex1.NaN.add(3217.43574);
      Complex complex6 = complex5.NaN.add(complex2);
      Complex complex7 = complex1.multiply(2.373243808746338);
      Complex complex8 = complex3.divide(complex6);
      complex2.multiply(complex8);
      Complex complex9 = complex3.log();
      complex6.toString();
      complex3.atan();
      complex9.multiply(complex2);
      Complex complex10 = complex1.pow((-6.259620482221904E-8));
      Complex complex11 = Complex.NaN;
      complex11.pow(complex8);
      complex3.multiply(complex4);
      Complex complex12 = complex10.createComplex((-4784.31946045), (-6.259620482221904E-8));
      complex9.acos();
      complex12.isNaN();
      complex5.abs();
      complex7.getField();
      complex9.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(4.59067403470505E-4);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.add((-1491.579639484));
      Complex complex5 = complex4.add(complex0);
      complex5.I.sqrt();
      Complex complex6 = complex3.multiply((-1491.579639484));
      complex6.divide(complex3);
      Complex complex7 = complex4.multiply(complex3);
      Complex complex8 = complex4.log();
      complex8.toString();
      Complex complex9 = complex2.atan();
      complex4.multiply(complex6);
      Complex complex10 = Complex.valueOf(1940.6031);
      complex10.pow(4.59067403470505E-4);
      Complex complex11 = Complex.NaN;
      complex9.pow(complex1);
      Complex complex12 = complex8.multiply(complex2);
      Complex complex13 = new Complex(2807.0, 4.59067403470505E-4);
      complex7.pow(complex4);
      complex13.createComplex(0.0, 2807.0);
      complex3.acos();
      complex3.isNaN();
      complex8.abs();
      complex2.getField();
      complex12.getReal();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex13.cosh();
      complex0.tanh();
      complex15.abs();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-75.2355));
      Complex complex2 = Complex.I;
      complex2.pow(complex0);
      complex1.divide((-75.2355));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-751.325807102), (-751.325807102));
      Complex complex1 = complex0.sqrt();
      Complex.valueOf(986.1479);
      Complex complex2 = Complex.valueOf(986.1479, 1.0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = Complex.NaN;
      complex5.toString();
      complex1.toString();
      complex2.atan();
      complex0.multiply(complex3);
      complex2.pow(986.1479);
      Complex.valueOf((-2846.38361880614), (-517.865409975118));
      Complex complex6 = complex3.pow(complex2);
      complex1.nthRoot(17);
      complex2.nthRoot(17);
      complex4.reciprocal();
      complex6.add((-751.325807102));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      complex0.readResolve();
      complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.cos();
      complex0.getField();
      complex2.multiply(complex0);
      complex0.pow(Double.POSITIVE_INFINITY);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1810);
      Complex complex2 = complex0.NaN.multiply((double) 1810);
      Complex complex3 = complex2.NaN.subtract((double) 1810);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex1.log();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex(1810, 1810);
      Complex complex9 = complex6.cosh();
      complex2.hashCode();
      complex9.cosh();
      complex0.exp();
      complex5.reciprocal();
      Complex complex10 = new Complex(1810);
      complex2.exp();
      complex5.asin();
      Complex complex11 = Complex.valueOf((double) 1810, (double) 1810);
      complex11.tan();
      Complex complex12 = Complex.INF;
      Complex complex13 = Complex.ONE;
      complex13.isNaN();
      Complex complex14 = Complex.INF;
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.toString();
      complex0.I.tan();
      double double0 = (-0.9060367009005804);
      Complex complex1 = complex0.createComplex((-0.9060367009005804), (-0.9060367009005804));
      complex0.asin();
      complex1.exp();
      double double1 = (-2178.31138264642);
      double double2 = 1191.899550841;
      Complex.valueOf(1191.899550841, 20.0);
      Complex complex2 = Complex.INF;
      complex2.sqrt();
      Complex complex3 = Complex.valueOf(986.1479);
      try { 
        complex3.NaN.nthRoot((-1805));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,805
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = Complex.valueOf((-6.259620482221904E-8), Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.log();
      complex4.toString();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex4.multiply(complex6);
      Complex complex8 = complex7.pow((-6.259620482221904E-8));
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex1.pow(complex0);
      Complex complex11 = complex4.multiply(complex3);
      Complex complex12 = complex4.createComplex(Double.POSITIVE_INFINITY, (-6.259620482221904E-8));
      complex2.acos();
      complex8.isNaN();
      complex0.abs();
      complex8.getField();
      complex12.getReal();
      Complex complex13 = Complex.NaN;
      complex6.cosh();
      complex3.tanh();
      complex11.abs();
      complex2.abs();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 1057.348761949);
      complex1.nthRoot(295);
      Complex complex2 = complex1.add(1057.348761949);
      complex2.hashCode();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1810);
      Complex complex2 = complex0.NaN.multiply((double) 1810);
      Complex complex3 = complex1.createComplex((-192.855352338562), (-192.855352338562));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.add((-4.8402541351522003E-36));
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex0.multiply((-4.8402541351522003E-36));
      Complex complex8 = complex7.subtract((double) 1810);
      Complex complex9 = complex6.subtract((-6.259620482221904E-8));
      complex8.divide(complex2);
      Complex complex10 = complex0.multiply(complex5);
      complex5.log();
      complex3.reciprocal();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex7.cosh();
      complex10.hashCode();
      complex4.cosh();
      complex8.exp();
      complex5.reciprocal();
      Complex complex13 = new Complex(2.373243808746338);
      Complex complex14 = complex9.exp();
      complex14.asin();
      complex12.tan();
      Complex complex15 = Complex.INF;
      complex2.isNaN();
      Complex complex16 = Complex.NaN;
      complex16.negate();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.toString();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.multiply((-20.0));
      Complex complex3 = complex0.multiply((-403.0579815496457));
      complex0.subtract((-266.740001512));
      Complex complex4 = complex2.subtract((-20.0));
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex6.log();
      complex1.reciprocal();
      Complex complex8 = Complex.NaN;
      Complex complex9 = new Complex((-266.740001512), (-403.0579815496457));
      complex9.cosh();
      complex8.hashCode();
      complex5.cosh();
      complex3.exp();
      complex7.reciprocal();
      Complex complex10 = new Complex((-403.0579815496457));
      complex7.exp();
      Complex complex11 = complex10.asin();
      complex11.tan();
      Complex complex12 = Complex.INF;
      complex6.isNaN();
      Complex complex13 = Complex.INF;
      complex13.negate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      complex0.hashCode();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1810);
      complex0.NaN.multiply((double) 1810);
      Complex complex2 = complex1.createComplex((-192.855352338562), (-192.855352338562));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.exp();
      Complex complex5 = Complex.valueOf((-846.02699977), (-2178.31138264642));
      Complex complex6 = complex4.sqrt();
      Complex complex7 = Complex.valueOf((-2178.31138264642));
      Complex complex8 = Complex.valueOf((-192.855352338562), 986.1479);
      Complex complex9 = complex8.atan();
      complex9.subtract(complex8);
      complex0.toString();
      complex2.toString();
      complex0.atan();
      complex4.multiply(complex1);
      Complex complex10 = complex8.pow(986.1479);
      Complex complex11 = Complex.valueOf(986.1479, (-846.02699977));
      Complex complex12 = complex8.pow(complex11);
      complex8.multiply(complex6);
      complex2.createComplex(37.0, 37.0);
      Complex complex13 = complex7.acos();
      complex0.isNaN();
      complex8.abs();
      complex8.getField();
      complex5.getReal();
      complex0.cosh();
      complex3.tanh();
      complex10.abs();
      complex12.abs();
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.subtract(2754.8564285359);
      Complex complex2 = complex1.ONE.add(2754.8564285359);
      complex0.nthRoot(37);
      complex2.INF.nthRoot(267);
      complex1.ONE.divide(2754.8564285359);
      complex2.add(complex0);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.subtract(0.4311734437942505);
      Complex complex5 = complex4.subtract((double) 37);
      complex1.divide(complex3);
      complex1.multiply(complex3);
      complex4.log();
      Complex complex6 = complex5.reciprocal();
      complex6.NaN.asin();
      complex6.sinh();
      complex6.readResolve();
      Complex complex7 = new Complex(6.513425781583774E233, (-2581.0871411050002));
      complex3.equals("");
      Complex complex8 = Complex.ZERO;
      complex8.subtract(6.513425781583774E233);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.pow(0.0);
      complex2.sqrt();
      Complex complex4 = Complex.valueOf(3673.649634613);
      complex0.abs();
      Complex complex5 = complex4.subtract(complex3);
      complex5.subtract((-2738.0));
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex4.createComplex(3673.649634613, Double.NaN);
      complex4.sinh();
      complex3.exp();
      complex7.add((-1.0));
      complex6.atan();
      Complex complex8 = Complex.I;
      Complex complex9 = new Complex((-1130.179042053525));
      complex8.equals(complex9);
      Complex complex10 = Complex.INF;
      complex8.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1810);
      Complex complex2 = complex0.NaN.multiply((double) 1810);
      Complex complex3 = complex2.pow((double) 1810);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = Complex.valueOf((-1288.2518762553293));
      complex4.abs();
      complex2.subtract(complex0);
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex6.subtract(1.6392211531196959E13);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex0.createComplex(1810, 1810);
      complex2.sinh();
      complex5.exp();
      complex6.add(1.0);
      Complex complex9 = complex1.atan();
      complex7.equals(complex9);
      Complex complex10 = Complex.INF;
      complex8.subtract((-192.855352338562));
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      complex1.I.sinh();
      complex0.log();
      complex1.subtract(759.24054575);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = new Complex(0.0, 759.24054575);
      complex0.divide(complex3);
      complex2.multiply(complex3);
      Complex complex4 = Complex.INF;
      complex4.log();
      Complex complex5 = complex0.reciprocal();
      complex3.sinh();
      complex0.readResolve();
      Complex complex6 = new Complex((-3278.762), (-3278.762));
      complex5.equals("Eq[oBD?q+@0oR");
      complex3.subtract(0.9715162566482856);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.divide(3217.43574);
      Complex complex3 = complex2.ZERO.multiply(3217.43574);
      Complex complex4 = complex2.ZERO.pow(complex1);
      Complex complex5 = complex1.NaN.add(3217.43574);
      Complex complex6 = complex5.NaN.add(complex2);
      complex1.multiply(2.373243808746338);
      Complex complex7 = complex4.subtract(2.373243808746338);
      Complex complex8 = complex3.subtract((-6.259620482221904E-8));
      Complex complex9 = complex3.divide(complex6);
      complex2.multiply(complex9);
      Complex complex10 = complex3.log();
      complex9.toString();
      complex6.toString();
      complex3.atan();
      complex10.multiply(complex2);
      Complex complex11 = complex8.pow((-6.259620482221904E-8));
      Complex complex12 = Complex.NaN;
      complex12.pow(complex9);
      complex3.multiply(complex4);
      Complex complex13 = complex11.createComplex((-4784.31946045), (-6.259620482221904E-8));
      complex10.acos();
      complex13.isNaN();
      complex5.abs();
      complex7.getField();
      complex9.getReal();
      Complex complex14 = Complex.NaN;
      complex14.cosh();
      complex10.tanh();
      complex12.abs();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-521.21761));
      Complex complex2 = complex1.multiply((-521.21761));
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex2.add(1143.6523553398908);
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex4.multiply((-521.21761));
      Complex complex7 = complex4.subtract(1143.6523553398908);
      Complex complex8 = complex1.subtract((-1227.741566));
      Complex complex9 = complex5.divide(complex1);
      complex4.multiply(complex9);
      Complex complex10 = complex2.log();
      complex2.reciprocal();
      Complex complex11 = Complex.NaN;
      complex6.cosh();
      complex8.hashCode();
      complex9.cosh();
      complex7.exp();
      Complex complex12 = Complex.NaN;
      complex12.reciprocal();
      Complex complex13 = new Complex(1.149964403116449);
      complex10.exp();
      complex10.asin();
      Complex.valueOf(1143.6523553398908);
      Complex complex14 = Complex.INF;
      Complex complex15 = Complex.I;
      complex15.isNaN();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      complex1.I.sinh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.pow(0.0);
      Complex complex4 = complex2.sqrt();
      Complex.valueOf(0.0);
      complex4.abs();
      Complex complex5 = complex4.I.subtract(complex3);
      Complex complex6 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex0.NaN.sqrt();
      Complex complex7 = complex6.I.createComplex(0.0, 1.0);
      complex4.ZERO.sinh();
      complex6.exp();
      Complex complex8 = complex0.ZERO.add(0.0);
      complex7.atan();
      complex8.exp();
      complex5.asin();
      complex2.tan();
      Complex complex9 = Complex.INF;
      complex4.isNaN();
      Complex complex10 = Complex.ONE;
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.ONE.cosh();
      complex3.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf((-192.855352338562), 1.0);
      complex2.divide(complex4);
      complex1.toString();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = Complex.valueOf(1.0);
      complex6.ONE.getField();
      Complex complex7 = complex4.cosh();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.pow((-192.855352338562));
      complex5.log();
      complex7.getArgument();
      complex9.nthRoot(575);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(39);
      complex0.add((double) 39);
      Complex complex1 = Complex.valueOf((double) 39, 606.8777);
      Complex complex2 = new Complex(606.8777);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = new Complex(1663.31193, 4166.81);
      complex4.toString();
      Complex complex5 = new Complex(39, 4166.81);
      complex5.pow(complex3);
      Complex complex6 = Complex.valueOf(876.265032804864);
      complex6.cosh();
      complex1.pow((-1299.93));
      Complex complex7 = complex3.log();
      complex7.getArgument();
      complex5.nthRoot(378);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.subtract(2754.8564285359);
      Complex complex2 = new Complex(2754.8564285359, 2754.8564285359);
      complex0.nthRoot(37);
      Complex complex3 = complex1.ONE.divide(2754.8564285359);
      complex2.add(complex0);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.I.createComplex(37, 2754.8564285359);
      Complex complex6 = complex4.ONE.asin();
      Complex complex7 = complex2.exp();
      Complex complex8 = Complex.valueOf((double) 37, (double) 37);
      Complex complex9 = complex7.NaN.sqrt();
      Complex.valueOf(986.1479);
      Complex complex10 = complex9.asin();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex7.subtract(complex9);
      complex4.toString();
      complex4.toString();
      Complex complex13 = complex0.atan();
      complex10.multiply(complex0);
      complex8.pow(986.1479);
      Complex complex14 = complex6.pow(complex5);
      complex12.multiply(complex9);
      Complex complex15 = complex5.createComplex(986.1479, 37);
      complex14.acos();
      complex15.isNaN();
      complex3.abs();
      complex4.getField();
      complex8.getReal();
      Complex complex16 = complex12.cosh();
      complex11.tanh();
      complex13.abs();
      complex16.abs();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.toString();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.multiply((-20.0));
      complex0.getReal();
      Complex complex3 = complex0.reciprocal();
      complex3.INF.tan();
      Complex complex4 = complex3.NaN.add(0.0);
      complex4.ZERO.cos();
      Complex complex5 = complex1.tan();
      complex0.conjugate();
      complex5.sinh();
      Complex complex6 = Complex.valueOf(2340.0, 0.9999301800418876);
      Complex complex7 = complex6.divide(complex2);
      complex2.toString();
      complex1.pow(complex0);
      Complex complex8 = Complex.valueOf((-1299.93));
      complex8.cosh();
      complex8.pow((-2225.10027));
      complex2.log();
      complex7.getArgument();
      Complex complex9 = new Complex(2340.0);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.divide(3217.43574);
      complex2.ZERO.multiply(3217.43574);
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex1.NaN.add(3217.43574);
      complex4.NaN.add(complex2);
      Complex complex5 = complex4.NaN.reciprocal();
      complex5.tan();
      complex2.getImaginary();
      Complex complex6 = complex0.add(complex3);
      complex6.INF.acos();
      Complex complex7 = complex1.atan();
      Complex complex8 = Complex.valueOf((-1.0), (-0.4746346971000853));
      complex0.ONE.tan();
      Complex complex9 = complex7.pow(0.0);
      complex8.I.sqrt1z();
      complex7.pow(175.04037089816077);
      Complex complex10 = complex1.negate();
      complex9.I.toString();
      Complex complex11 = complex9.multiply(complex8);
      Complex complex12 = complex8.ZERO.sqrt1z();
      complex12.ZERO.conjugate();
      complex12.ONE.cos();
      complex11.multiply(547);
      Complex complex13 = complex12.divide(0.0);
      complex13.NaN.pow(complex3);
      complex10.reciprocal();
      Complex.valueOf(175.04037089816077, 3217.43574);
      complex1.add(2315.7308349);
      complex12.multiply(1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.pow(0.0);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex6.exp();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex7.sqrt();
      Complex.valueOf(986.1479);
      Complex complex9 = complex7.asin();
      complex2.atan();
      Complex complex10 = complex8.subtract(complex9);
      complex9.toString();
      complex1.toString();
      Complex complex11 = complex5.atan();
      Complex complex12 = complex9.multiply(complex7);
      Complex complex13 = complex12.pow(986.1479);
      complex8.pow(complex7);
      Complex complex14 = Complex.I;
      complex14.multiply(complex12);
      Complex complex15 = complex13.createComplex(986.1479, 1.8996465013507338);
      complex15.acos();
      Complex complex16 = new Complex(1.8996465013507338, (-2660.216951068));
      complex16.isNaN();
      complex10.abs();
      complex16.getField();
      complex0.getReal();
      complex8.cosh();
      complex11.tanh();
      complex14.abs();
      Complex complex17 = Complex.valueOf(2.7464946196290243, 1.8996465013507338);
      complex12.equals(complex17);
      complex14.toString();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getField();
      Complex complex1 = Complex.valueOf(486.1061);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.valueOf(0.7615941559557649, (-2032.219310192));
      complex4.reciprocal();
      Complex complex5 = complex1.cosh();
      complex3.hashCode();
      complex5.cosh();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.exp();
      complex1.asin();
      complex4.tan();
      complex8.isNaN();
      complex3.negate();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.NaN.multiply(20.0);
      Complex complex2 = complex1.I.reciprocal();
      complex1.readResolve();
      complex0.I.abs();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.ZERO.multiply(20.0);
      Complex complex6 = complex0.add(0.0);
      Complex complex7 = complex6.ONE.subtract(complex3);
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex7.ONE.cosh();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex10.INF.tanh();
      complex0.INF.hashCode();
      Complex complex12 = complex0.pow(complex11);
      Complex complex13 = complex8.conjugate();
      complex0.sinh();
      Complex complex14 = complex13.divide(complex9);
      complex12.toString();
      complex5.pow(complex2);
      complex14.cosh();
      complex4.pow(1.0);
      complex0.log();
      complex2.getArgument();
      complex4.nthRoot(2086);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(2476.8153548077, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-1791));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex4.ONE.add(complex2);
      complex4.NaN.abs();
      complex1.ZERO.abs();
      complex6.INF.multiply(complex0);
      complex6.readResolve();
      complex1.ONE.add(complex3);
      complex1.getArgument();
      complex0.NaN.toString();
      Complex complex7 = complex0.multiply((-305));
      complex2.getField();
      Complex complex8 = complex2.sqrt1z();
      complex8.NaN.acos();
      complex8.acos();
      complex1.readResolve();
      complex0.getField();
      Complex complex9 = new Complex(833.32482, (-4946.373156415));
      complex9.INF.tanh();
      complex9.add(complex5);
      complex0.pow(complex7);
      complex7.add(complex6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1810);
      Complex complex2 = complex0.NaN.multiply((-3535.15079484225));
      Complex complex3 = complex2.NaN.subtract((double) 1810);
      Complex complex4 = complex1.INF.subtract((-3535.15079484225));
      Complex complex5 = complex0.I.divide(complex2);
      Complex complex6 = complex1.ONE.multiply(complex0);
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = complex4.ZERO.reciprocal();
      Complex complex9 = complex8.ZERO.cosh();
      complex0.hashCode();
      complex4.cosh();
      complex1.pow(complex5);
      complex2.conjugate();
      Complex complex10 = complex3.sinh();
      complex4.divide(complex3);
      complex6.toString();
      complex9.pow(complex7);
      complex10.cosh();
      Complex complex11 = Complex.I;
      complex11.pow((double) 1810);
      complex3.log();
      complex4.getArgument();
      complex5.nthRoot(158);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.toString();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.multiply((-20.0));
      complex0.getReal();
      Complex complex3 = complex0.reciprocal();
      complex3.INF.tan();
      Complex complex4 = complex3.NaN.add(0.0);
      complex4.ZERO.cos();
      Complex complex5 = complex3.tan();
      complex0.conjugate();
      complex5.sinh();
      Complex complex6 = Complex.valueOf(2340.0, 0.9999301800418876);
      Complex complex7 = complex6.divide(complex2);
      complex2.toString();
      complex1.pow(complex0);
      Complex complex8 = Complex.valueOf((-1299.93));
      complex8.cosh();
      Complex complex9 = complex8.pow((-2225.10027));
      complex2.log();
      complex7.getArgument();
      complex9.nthRoot(575);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow((double) 39);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf((double) 39);
      complex1.abs();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.subtract(1106.0);
      complex5.sqrt();
      Complex complex8 = complex4.createComplex(2340.0, (-191.4459883988));
      complex7.exp();
      complex5.add(2340.0);
      complex8.atan();
      complex2.tan();
      complex4.isInfinite();
      Complex complex9 = new Complex((-401.6959721586801));
      complex9.getImaginary();
      Complex.valueOf((-191.4459883988), 6.283185307179586);
      Complex complex10 = Complex.valueOf((-1464.8516), 0.6070232391357422);
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.I.sinh();
      complex2.ONE.sinh();
      complex0.log();
      // Undeclared exception!
      complex1.nthRoot(5112);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(2476.8153548077, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sqrt();
      complex2.NaN.abs();
      Complex complex3 = complex0.ZERO.negate();
      complex3.ZERO.negate();
      complex3.ONE.add(complex1);
      complex3.NaN.abs();
      Complex complex4 = complex0.ONE.multiply(833.32482);
      complex0.ZERO.abs();
      Complex complex5 = complex4.INF.multiply(complex0);
      complex4.readResolve();
      complex0.ONE.add(complex2);
      complex0.getArgument();
      complex4.NaN.toString();
      Complex complex6 = complex0.multiply((-305));
      complex6.ZERO.pow(complex2);
      complex4.I.conjugate();
      Complex complex7 = complex0.sinh();
      complex7.ZERO.divide(complex6);
      complex7.toString();
      Complex complex8 = complex5.pow(complex0);
      Complex complex9 = complex8.INF.cosh();
      complex9.ONE.pow(1.5707963267948966);
      complex4.log();
      complex4.getArgument();
      try { 
        complex0.nthRoot((-1791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,791
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex1.cos();
      complex3.readResolve();
      Complex complex5 = complex4.multiply(1.5707963267948966);
      complex0.nthRoot(1235);
      complex4.getField();
      Complex complex6 = new Complex((-676.81), 758024.2234846735);
      complex6.getField();
      Complex complex7 = complex3.multiply(complex5);
      Complex.valueOf((-676.81));
      complex2.pow(complex7);
      Complex complex8 = Complex.ONE;
      complex6.sqrt();
      complex4.subtract(complex6);
      Complex complex9 = Complex.INF;
      Object object0 = new Object();
      complex9.equals(object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.INF.divide(complex1);
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.I.sinh();
      Object object0 = complex0.readResolve();
      complex1.tan();
      complex3.isInfinite();
      complex3.getImaginary();
      Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      object0.hashCode();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      complex1.I.sinh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.pow(0.0);
      Complex complex4 = complex2.sqrt();
      Complex.valueOf(0.0);
      complex4.abs();
      complex4.I.subtract(complex3);
      Complex complex5 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex0.NaN.sqrt();
      Complex complex6 = complex5.I.createComplex(0.0, 1.0);
      complex4.ZERO.sinh();
      Complex complex7 = complex5.exp();
      complex0.ZERO.add(0.0);
      complex6.atan();
      complex2.equals(complex7);
      Complex complex8 = Complex.INF;
      complex8.subtract((-656.1353984377996));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1.0), 2730.1138403);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.ZERO.cos();
      complex3.NaN.pow(Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.isInfinite();
      Complex complex4 = complex3.negate();
      complex4.ZERO.multiply(484);
      complex1.createComplex(68.05796, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.I.tan();
      complex6.I.asin();
      complex2.cos();
      complex3.acos();
      Complex complex7 = complex0.tanh();
      Complex.valueOf(2974.62763632816, 0.0);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.I;
      complex0.NaN.subtract(complex1);
      Complex complex2 = complex0.NaN.negate();
      Object object0 = new Object();
      complex0.NaN.sin();
      complex0.equals(object0);
      Complex complex3 = Complex.NaN;
      complex1.pow(complex3);
      Complex complex4 = complex2.atan();
      complex2.ZERO.sqrt();
      complex3.sqrt();
      Complex.valueOf((-4161.149817144102));
      complex4.getField();
      complex4.getField();
      complex2.multiply((-3531));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2876.0329099), (-23.61929768138585));
      Complex complex1 = complex0.NaN.multiply((-2876.0329099));
      complex1.I.negate();
      Complex.valueOf((-23.61929768138585));
      complex0.add((-2876.0329099));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.ONE.log();
      Complex complex6 = complex4.ONE.add((-2876.0329099));
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex4.ONE.multiply(709);
      complex8.NaN.sqrt1z();
      complex0.multiply((-23.61929768138585));
      complex0.abs();
      complex3.getField();
      complex5.subtract((-23.61929768138585));
      complex5.getImaginary();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1810);
      Complex complex2 = complex0.NaN.multiply((-3535.15079484225));
      complex2.NaN.subtract((double) 1810);
      Complex complex3 = complex1.INF.subtract((-3535.15079484225));
      complex0.I.divide(complex2);
      Complex complex4 = complex1.ONE.multiply(complex0);
      complex4.ONE.log();
      Complex complex5 = complex3.ZERO.reciprocal();
      complex5.ZERO.cosh();
      complex0.hashCode();
      Complex complex6 = complex3.cosh();
      complex6.I.exp();
      complex4.ZERO.reciprocal();
      complex6.ONE.exp();
      complex6.asin();
      complex4.tan();
      complex5.isNaN();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.subtract(2754.8564285359);
      Complex complex2 = complex1.ONE.add(2754.8564285359);
      complex0.nthRoot(37);
      Complex complex3 = complex1.ONE.divide(2754.8564285359);
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex1.cosh();
      complex5.I.createComplex(37, 2754.8564285359);
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex2.exp();
      Complex complex8 = Complex.valueOf((double) 37, (double) 37);
      Complex complex9 = complex7.NaN.sqrt();
      Complex complex10 = Complex.valueOf(986.1479);
      Complex complex11 = complex10.ZERO.asin();
      Complex complex12 = complex11.atan();
      complex12.I.subtract(complex5);
      complex10.NaN.toString();
      complex10.I.toString();
      complex10.atan();
      Complex complex13 = complex4.multiply(complex0);
      Complex complex14 = complex6.pow(2754.8564285359);
      Complex complex15 = complex14.ZERO.pow(complex3);
      complex2.ZERO.multiply(complex1);
      Complex complex16 = complex13.createComplex(37, 986.1479);
      complex4.acos();
      complex2.isNaN();
      complex6.NaN.abs();
      complex13.getField();
      complex5.getReal();
      complex10.cosh();
      Complex complex17 = complex6.tanh();
      complex17.abs();
      complex9.equals(complex8);
      complex15.toString();
      complex16.reciprocal();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.atan();
      complex1.INF.exp();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = Complex.valueOf(0.0);
      complex0.abs();
      complex0.readResolve();
      complex3.NaN.multiply(0);
      Complex complex4 = complex2.subtract(Double.NaN);
      Complex complex5 = complex2.conjugate();
      complex5.NaN.sinh();
      complex3.ONE.tan();
      Complex complex6 = complex0.INF.add(complex3);
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex3.multiply((-1896));
      Complex.valueOf(Double.NaN, 2022.61503462);
      complex8.INF.conjugate();
      complex0.abs();
      complex7.createComplex(1.401987075805664, 0.0);
      Complex complex9 = Complex.valueOf(20.0);
      complex6.divide(complex9);
      complex4.multiply(1.401987075805664);
      Complex complex10 = Complex.valueOf((-3511.365126532));
      complex10.getArgument();
      Complex complex11 = complex9.sqrt1z();
      complex11.multiply(0.052318163216114044);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = Complex.valueOf(1028.416465011622);
      complex0.ZERO.tanh();
      Complex complex4 = complex0.INF.divide(0.0);
      Complex complex5 = complex0.INF.sqrt1z();
      complex5.I.readResolve();
      complex0.getReal();
      Complex complex6 = complex5.ZERO.cosh();
      complex6.hashCode();
      Complex complex7 = complex3.subtract(0.0);
      Complex complex8 = complex5.pow(complex7);
      Complex complex9 = complex7.NaN.reciprocal();
      Complex complex10 = complex8.ONE.negate();
      complex6.INF.readResolve();
      complex10.INF.tanh();
      complex3.divide(complex0);
      complex6.ONE.add(complex10);
      complex10.getField();
      Complex complex11 = complex9.exp();
      complex11.sqrt();
      complex2.createComplex(1994.09214357646, 0.0);
      complex9.acos();
      complex6.subtract(complex4);
      complex10.getImaginary();
      complex8.getArgument();
      complex7.add(complex10);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-1106.9646));
      Complex complex1 = Complex.I;
      complex0.I.getField();
      Complex complex2 = complex0.divide(complex1);
      complex2.INF.subtract(-0.0);
      complex0.ZERO.abs();
      complex2.ZERO.tanh();
      Complex complex3 = complex0.ZERO.negate();
      complex3.ZERO.sin();
      complex0.toString();
      complex0.negate();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.pow((-20.0));
      Complex complex2 = complex0.ONE.add((-20.0));
      complex2.NaN.abs();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex3.NaN.tanh();
      complex0.tan();
      Complex complex5 = complex3.conjugate();
      complex5.subtract(0.0);
      Complex complex6 = complex2.sin();
      complex6.ONE.pow(complex4);
      complex2.readResolve();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      complex1.NaN.cos();
      complex1.INF.add((-1975.6823842));
      Complex complex2 = complex0.sin();
      complex0.asin();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.NaN.sin();
      complex0.isInfinite();
      Complex complex4 = complex1.divide((-656.1353984377996));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, (-305.09));
      Complex complex6 = complex5.ONE.cosh();
      complex5.negate();
      complex1.getArgument();
      complex1.add((-305.09));
      complex4.I.divide(complex2);
      complex2.readResolve();
      Complex complex7 = complex4.exp();
      complex3.conjugate();
      complex6.divide((-656.1353984377996));
      complex3.cosh();
      complex0.tanh();
      Object object0 = new Object();
      complex7.equals(object0);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = Complex.valueOf((-1265.769815));
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex0.NaN.pow(complex3);
      Complex complex6 = complex5.INF.add(complex3);
      Complex complex7 = complex6.INF.cos();
      complex7.ONE.toString();
      Complex complex8 = complex1.ONE.sin();
      complex6.INF.add(complex1);
      Complex complex9 = complex2.ONE.add(complex4);
      complex0.getImaginary();
      complex3.nthRoot(7);
      complex2.multiply(7);
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex8.tanh();
      Complex complex12 = complex10.pow(complex0);
      complex11.equals("Q&4Lk");
      complex12.sin();
      complex9.negate();
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      complex1.I.sinh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.pow(0.0);
      Complex complex4 = complex2.sqrt();
      Complex.valueOf(0.0);
      complex4.abs();
      complex4.I.subtract(complex3);
      Complex complex5 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex0.NaN.sqrt();
      Complex complex6 = complex5.I.createComplex(0.0, 1.0);
      complex4.ZERO.sinh();
      complex5.exp();
      complex0.ZERO.add(0.0);
      Complex complex7 = complex6.atan();
      complex6.tan();
      complex4.isInfinite();
      complex2.getImaginary();
      Complex.valueOf((-20.0), 6.283185307179586);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.ZERO.sqrt();
      complex1.INF.reciprocal();
      complex3.I.acos();
      complex0.getField();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex4 = complex0.multiply(1691);
      complex4.NaN.add((-476.546737721722));
      Complex complex5 = Complex.valueOf((double) 1691);
      Complex complex6 = complex5.multiply(1691);
      complex2.getImaginary();
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.getField();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex3.I.cos();
      complex5.I.getField();
      complex2.ONE.asin();
      Complex complex6 = complex0.sqrt1z();
      complex6.sqrt1z();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex6.multiply(0.0);
      complex8.INF.getArgument();
      complex8.getField();
      Complex complex9 = complex6.INF.divide((-2985.0));
      Complex complex10 = complex6.multiply(2192);
      complex7.multiply(0.0);
      complex1.acos();
      Complex complex11 = complex8.negate();
      complex11.ONE.createComplex((-2.462631860370667E-9), 0.0);
      complex9.getField();
      complex4.exp();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
      complex0.nthRoot(17);
      Complex complex1 = complex0.add(2457.04718);
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf((double) 17, 0.0);
      Complex complex4 = complex3.NaN.sqrt1z();
      complex4.NaN.hashCode();
      Complex complex5 = complex4.NaN.sin();
      complex5.abs();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.INF.divide(complex6);
      complex7.I.toString();
      complex1.hashCode();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex2.add(complex9);
      complex1.acos();
      complex8.readResolve();
      complex3.createComplex((-20.0), (-1591.6));
      complex3.getReal();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.NaN.multiply(20.0);
      complex1.I.reciprocal();
      complex1.readResolve();
      complex0.I.abs();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.acos();
      complex0.ZERO.multiply(20.0);
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.ONE.subtract(complex2);
      complex5.ONE.negate();
      complex5.ONE.cosh();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.tanh();
      complex0.INF.hashCode();
      complex1.getField();
      complex3.INF.sqrt1z();
      Complex complex8 = complex6.acos();
      complex6.readResolve();
      complex3.getField();
      complex1.add(complex7);
      try { 
        complex8.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-211.2119223557438), (-2448.9117888016));
      Complex complex1 = complex0.cos();
      complex0.abs();
      Complex complex2 = complex1.divide((-5198.199838463));
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex1.divide(complex0);
      complex2.ONE.asin();
      Complex complex5 = complex4.subtract((-856.0));
      complex1.ZERO.sqrt();
      complex1.reciprocal();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex5.multiply(complex4);
      Complex complex8 = complex7.reciprocal();
      complex4.divide((-211.2119223557438));
      complex6.getReal();
      complex8.getField();
      complex2.subtract((-5198.199838463));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-3505.148), (-3505.148));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.cosh();
      complex2.ZERO.toString();
      Complex complex3 = complex1.subtract(0.0);
      Complex complex4 = complex3.NaN.log();
      complex4.NaN.cos();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.pow(2695.93378135297);
      Complex complex2 = complex1.multiply(complex0);
      complex0.I.readResolve();
      complex0.ONE.add(3926.511132052);
      complex0.nthRoot(2125);
      complex0.negate();
      Complex complex3 = complex2.atan();
      complex0.ZERO.multiply(3926.511132052);
      complex0.INF.nthRoot(3587);
      complex3.getImaginary();
      Complex complex4 = complex2.log();
      complex1.getReal();
      Complex complex5 = complex0.negate();
      complex5.sqrt1z();
      complex3.readResolve();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(2.9410015940087773E-8, 2.9410015940087773E-8);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.multiply(2.9410015940087773E-8);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      complex4.INF.createComplex(6.283185307179586, 0.0);
      complex4.ONE.abs();
      complex1.isNaN();
      complex0.atan();
      Complex complex5 = complex2.sqrt1z();
      complex5.NaN.pow(complex0);
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isNaN();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.cosh();
      complex1.NaN.abs();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex1.multiply((-4322.024));
      Complex complex5 = complex2.I.createComplex(0.0, 1.0);
      Complex complex6 = complex2.cos();
      complex0.I.getArgument();
      Complex complex7 = complex6.ONE.pow(1.5707963267948966);
      Complex complex8 = complex6.log();
      Complex complex9 = complex8.ONE.atan();
      complex8.isNaN();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex10.NaN.add(0.0);
      Complex complex12 = complex11.ONE.asin();
      complex6.log();
      complex5.sinh();
      Complex complex13 = complex3.multiply(complex4);
      Complex complex14 = complex2.acos();
      Complex complex15 = complex7.atan();
      complex15.multiply(complex2);
      complex13.acos();
      Complex complex16 = Complex.NaN;
      complex9.add(complex16);
      Complex complex17 = complex10.createComplex((-1643.3448436751), 0.0);
      complex12.getArgument();
      Complex complex18 = complex17.pow(0.0);
      complex18.getReal();
      complex18.negate();
      complex14.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(77.358037, 0.0);
      complex0.I.toString();
      Complex complex1 = complex0.NaN.multiply(682.2002072);
      complex1.NaN.abs();
      complex1.ZERO.tan();
      Complex complex2 = complex1.ONE.sqrt();
      complex0.getField();
      complex1.NaN.multiply(1);
      Complex complex3 = complex0.acos();
      complex2.I.sqrt1z();
      Complex complex4 = complex2.I.add(complex0);
      complex4.INF.subtract((-995.96664582561));
      complex4.ZERO.sqrt();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex2.cosh();
      complex3.isNaN();
      complex7.multiply(1143.24);
      complex6.sqrt1z();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(39);
      Complex complex1 = complex0.add((double) 39);
      complex1.multiply((double) 39);
      complex0.getField();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.acos();
      complex0.NaN.atan();
      complex2.INF.sinh();
      int int0 = (-3439);
      Complex complex3 = complex0.multiply((-3439));
      complex3.INF.readResolve();
      complex3.getArgument();
      try { 
        complex1.nthRoot((-3439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,439
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1247.9623015123314);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.NaN.cos();
      complex2.readResolve();
      Complex complex4 = complex2.NaN.multiply(1247.9623015123314);
      complex0.nthRoot(1657);
      complex1.getField();
      complex1.getField();
      Complex complex5 = complex4.multiply(complex2);
      Complex.valueOf(1247.9623015123314);
      Complex complex6 = complex2.pow(complex0);
      complex6.INF.divide(complex1);
      complex6.INF.sqrt();
      complex4.subtract(complex3);
      complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(2476.8153548077, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-1791));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.I.sqrt();
      complex3.NaN.abs();
      Complex complex4 = complex1.ZERO.negate();
      complex4.ZERO.negate();
      complex4.ONE.add(complex2);
      complex4.NaN.abs();
      Complex complex5 = complex1.ONE.multiply(833.32482);
      complex1.ZERO.abs();
      Complex complex6 = complex5.INF.multiply(complex0);
      complex5.readResolve();
      complex1.ONE.add(complex3);
      complex1.getArgument();
      complex5.NaN.toString();
      Complex complex7 = complex0.multiply((-305));
      complex7.ZERO.pow(complex3);
      complex5.I.conjugate();
      Complex complex8 = complex1.sinh();
      complex8.ZERO.divide(complex7);
      complex8.toString();
      Complex complex9 = complex6.pow(complex1);
      Complex complex10 = complex9.INF.cosh();
      complex10.ONE.pow(0.7853981633974483);
      complex5.log();
      complex5.getArgument();
      try { 
        complex0.nthRoot((-1791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,791
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
      Complex complex1 = Complex.valueOf((-3269.1593949), 0.0);
      Complex complex2 = complex1.NaN.divide((-3269.1593949));
      Complex complex3 = complex1.INF.cosh();
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex4.I.exp();
      complex2.I.abs();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex8.ZERO.log();
      Complex.valueOf(0.31845372915267944, 0.0);
      Complex complex10 = complex8.pow(0.0);
      complex10.ZERO.abs();
      Complex complex11 = complex7.conjugate();
      Complex complex12 = complex5.asin();
      complex3.readResolve();
      complex11.sin();
      complex9.pow(complex12);
      complex7.I.conjugate();
      complex2.getArgument();
      Complex complex13 = complex11.sinh();
      complex5.isInfinite();
      complex7.acos();
      Complex complex14 = complex1.divide(complex12);
      complex8.pow((-3269.1593949));
      complex11.getImaginary();
      complex1.readResolve();
      complex9.divide(complex12);
      complex13.cosh();
      complex2.equals(complex14);
      Complex.valueOf(2.1705221445447534E-29);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6358739137649536, 0.6358739137649536);
      Complex complex1 = complex0.createComplex(0.6358739137649536, Double.NaN);
      Complex complex2 = complex0.multiply(Double.NaN);
      complex1.sqrt1z();
      complex2.INF.sqrt1z();
      complex2.ZERO.pow(complex1);
      Complex.valueOf(1.0303966192973381E-205);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.toString();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.multiply((-20.0));
      complex0.getReal();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.NaN.add(0.0);
      complex3.tan();
      Complex complex5 = complex1.subtract(4049.87);
      complex5.log();
      Complex complex6 = complex4.acos();
      complex2.sin();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex0.pow(0.0);
      Complex complex3 = complex0.conjugate();
      complex3.ONE.nthRoot(1387);
      complex0.toString();
      complex0.hashCode();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.divide(3217.43574);
      complex2.ZERO.multiply(3217.43574);
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex1.NaN.add(3217.43574);
      complex4.NaN.add(complex2);
      Complex complex5 = complex4.NaN.reciprocal();
      complex5.tan();
      complex2.getImaginary();
      Complex complex6 = complex0.add(complex3);
      complex6.INF.acos();
      Complex complex7 = complex1.atan();
      Complex complex8 = Complex.valueOf((-1.0), 0.0);
      complex0.ONE.tan();
      Complex complex9 = complex7.pow(0.0);
      complex8.I.sqrt1z();
      complex7.pow(175.04037089816077);
      Complex complex10 = complex1.negate();
      complex9.I.toString();
      Complex complex11 = complex9.multiply(complex8);
      Complex complex12 = complex8.ZERO.sqrt1z();
      complex12.ZERO.conjugate();
      complex12.ONE.cos();
      complex11.multiply(547);
      Complex complex13 = complex12.divide(0.0);
      complex13.NaN.pow(complex3);
      Complex complex14 = complex10.reciprocal();
      complex14.exp();
      complex1.add(2315.7308349);
      complex12.multiply(1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.INF.pow(766.998733076651);
      Complex complex3 = complex2.INF.reciprocal();
      complex1.INF.tanh();
      complex1.exp();
      Complex complex4 = complex1.INF.atan();
      Complex complex5 = Complex.valueOf(766.998733076651, 1460.10538754225);
      Complex complex6 = complex5.I.divide(766.998733076651);
      complex3.ONE.createComplex(766.998733076651, 1460.10538754225);
      complex5.ONE.readResolve();
      complex3.isInfinite();
      Complex complex7 = complex1.tanh();
      complex1.NaN.sin();
      Complex complex8 = complex7.INF.log();
      complex8.I.add(complex7);
      Complex complex9 = complex7.log();
      complex6.add(complex9);
      Complex complex10 = complex7.log();
      complex10.I.cosh();
      Complex complex11 = complex3.atan();
      complex11.ZERO.exp();
      complex4.NaN.reciprocal();
      Complex complex12 = complex4.sinh();
      complex12.log();
      complex5.multiply(989);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.021716833114624, 1.021716833114624);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.NaN.atan();
      complex2.I.readResolve();
      double double0 = (-4673.89875708077);
      complex2.I.tan();
      try { 
        complex1.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.tan();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.NaN.multiply(0.0);
      Complex complex4 = complex1.ONE.cosh();
      assertEquals(1.5430806348152437, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.I.exp();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex5.NaN.divide(0.0);
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex6.NaN.subtract(complex0);
      Complex complex10 = complex9.sin();
      Complex complex11 = complex0.INF.multiply((-1055));
      complex6.NaN.sin();
      Complex complex12 = complex11.acos();
      Complex complex13 = complex10.NaN.atan();
      Complex.valueOf((-4368.38667787265));
      Complex complex14 = complex0.ONE.multiply(2.6475448608398438);
      complex6.isInfinite();
      Complex complex15 = complex5.I.atan();
      Complex complex16 = complex10.ZERO.multiply(complex14);
      Complex complex17 = complex0.subtract(complex10);
      Complex complex18 = complex17.subtract(complex8);
      Complex complex19 = complex17.I.atan();
      complex19.ZERO.subtract(complex3);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      complex0.isNaN();
      Complex complex20 = complex5.add(complex10);
      complex20.abs();
      complex7.createComplex(0.0, (-1055));
      Complex complex21 = complex16.cos();
      assertEquals(1.0, complex21.getReal(), 0.01);
      assertTrue(complex16.equals((Object)complex2));
      assertEquals(2.6475448608398438, complex14.getReal(), 0.01);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex22 = Complex.ZERO;
      Complex complex23 = complex18.subtract(complex22);
      assertSame(complex17, complex13);
      assertSame(complex23, complex20);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(1.557407724654902, complex8.getImaginary(), 0.01);
      
      complex15.toString();
      assertEquals(0.5403023058681398, complex5.getReal(), 0.01);
      assertFalse(complex15.equals((Object)complex21));
      assertSame(complex15, complex12);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.divide(complex1);
      assertTrue(complex1.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.ONE.cosh();
      Complex complex4 = complex3.I.sinh();
      assertEquals(1.5430806348152437, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex5 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex5);
      assertTrue(boolean0);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.subtract(0.0);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
  }
}
