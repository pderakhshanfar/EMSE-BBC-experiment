/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:52:54 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.divide(9.924030156169606E118);
      Complex complex2 = complex1.ZERO.tan();
      complex2.ONE.pow(9.924030156169606E118);
      Complex complex3 = new Complex(9.924030156169606E118, (-20.0));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(911.999, 2266.87242);
      Complex complex2 = complex0.divide(complex1);
      complex2.subtract(2.0829952491625585E-8);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.getField();
      complex0.cos();
      complex1.cosh();
      Complex complex2 = complex0.divide(9.924030156169606E118);
      complex2.add(952.30934066767);
      Complex complex3 = complex0.log();
      complex3.log();
      complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4041.186744576, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex1.atan();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.25769591331481934, 20.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.INF;
      complex2.reciprocal();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.sqrt();
      complex4.abs();
      Complex complex5 = complex1.sinh();
      complex4.sin();
      complex0.tan();
      complex5.atan();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.getField();
      Complex complex2 = complex1.createComplex((-20.0), (-20.0));
      complex2.readResolve();
      complex2.tanh();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.ZERO;
      complex2.I.pow(complex0);
      complex2.INF.log();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = Complex.valueOf((-62.0));
      complex1.cosh();
      complex1.toString();
      Complex complex5 = complex4.multiply(1352);
      Complex complex6 = complex5.ZERO.cosh();
      Complex.valueOf((-62.0));
      complex5.sin();
      complex3.sinh();
      complex6.subtract(complex1);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1107.0222), 3023.55733893496);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.valueOf(1.9722796756250217E-108, (-2965.5888212665454));
      complex2.multiply(complex1);
      Complex complex5 = Complex.NaN;
      complex2.sqrt();
      Complex complex6 = complex4.multiply(6.283185307179586);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.tan();
      complex8.atan();
      complex0.exp();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.pow(complex1);
      complex0.readResolve();
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1.3166970112139726E161);
      Complex complex1 = new Complex(1.3166970112139726E161, 1711.951101067339);
      complex0.pow(complex1);
      complex0.isNaN();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.INF.conjugate();
      Complex complex2 = Complex.I;
      complex1.cosh();
      complex2.multiply(37);
      double double0 = 20.0;
      Complex complex3 = Complex.valueOf((-687.4060320719124), 20.0);
      Complex complex4 = complex3.multiply(complex0);
      try { 
        complex4.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.equals(complex2);
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex3.conjugate();
      complex3.getImaginary();
      Complex complex5 = complex3.sin();
      Complex complex6 = new Complex(20.0);
      complex6.hashCode();
      Complex complex7 = complex6.reciprocal();
      complex1.sqrt();
      complex7.multiply((-1.0));
      complex6.sinh();
      complex1.toString();
      complex5.tan();
      complex2.atan();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      complex0.getArgument();
      complex0.getReal();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide(complex2);
      complex4.log();
      complex4.readResolve();
      complex3.divide(0.7853981633974483);
      Complex complex6 = Complex.valueOf(0.0, 6.283185307179586);
      complex6.nthRoot(37);
      Complex.valueOf((-3710.044943934));
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex5.exp();
      complex7.getImaginary();
      complex1.sin();
      complex3.pow(6.283185307179586);
      Complex complex9 = Complex.valueOf(1113.9302248);
      complex9.cosh();
      complex4.NaN.toString();
      Complex complex10 = new Complex(37);
      complex0.isNaN();
      complex7.sqrt();
      Complex complex11 = complex8.tan();
      Complex.valueOf((-1.976524624939355E-8), (-1999.642));
      Complex.valueOf(1113.9302248, 0.0);
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.pow(2.369567535529528);
      Complex complex1 = complex0.sqrt();
      complex0.readResolve();
      complex1.equals(complex0);
      Complex.valueOf(0.42416930198669434, 4880.782480518);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 1.3166970112139726E161;
      Complex complex0 = new Complex(1953.2, 1953.2);
      Complex complex1 = Complex.valueOf(1953.2);
      Complex complex2 = complex0.pow(complex1);
      complex1.createComplex(2318.62681229239, 2318.62681229239);
      complex0.readResolve();
      Complex complex3 = complex1.asin();
      complex2.tanh();
      int int0 = 0;
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1020);
      complex1.readResolve();
      complex0.atan();
      Complex complex2 = new Complex(3744.31);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.acos();
      complex4.NaN.createComplex((-1467.5623973), 1.3166970112139726E161);
      complex0.hashCode();
      complex3.readResolve();
      Complex complex5 = new Complex(1.747018414872141E-8, 1.3166970112139726E161);
      Complex complex6 = new Complex((-6579226.113280985), 1020);
      Complex complex7 = Complex.I;
      complex4.nthRoot(1020);
      complex3.getField();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1.3166970112139726E161);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf(1.3166970112139726E161, 1.3166970112139726E161);
      complex3.hashCode();
      complex2.readResolve();
      Complex complex4 = new Complex(2565.000411945578, 829.96555287);
      Complex complex5 = new Complex(1560.7598131676493, (-26.77091));
      Complex complex6 = Complex.I;
      complex6.nthRoot(2743);
      complex3.getField();
      complex3.getField();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      complex1.getArgument();
      complex0.getReal();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.INF;
      complex3.divide(complex1);
      Complex complex5 = complex0.log();
      complex2.readResolve();
      Complex complex6 = new Complex(1656.57307, Double.NaN);
      complex6.divide((-139.61287903849941));
      Complex.valueOf(6.283185307179586, 0.0);
      Complex complex7 = Complex.ONE;
      complex7.nthRoot(37);
      Complex complex8 = Complex.valueOf((-0.8021676593671387));
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex9.exp();
      complex7.getImaginary();
      Complex complex11 = complex5.sin();
      complex1.hashCode();
      Complex complex12 = Complex.valueOf(4.556060380835955E71);
      Complex complex13 = complex12.reciprocal();
      complex2.sqrt();
      complex10.multiply(716.1531357945162);
      complex13.sinh();
      complex4.toString();
      complex2.tan();
      Complex complex14 = Complex.INF;
      complex14.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      complex0.getArgument();
      complex0.getReal();
      Complex complex2 = complex1.cos();
      complex2.I.cosh();
      complex1.I.log();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex1.ONE.divide(0.0);
      Complex complex4 = complex1.createComplex(Double.POSITIVE_INFINITY, 2266.995324999015);
      complex4.I.divide(9.924030156169606E118);
      complex1.ZERO.cos();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(906.51719015315, 906.51719015315);
      Complex complex1 = new Complex(6.283185307179586, 831.05);
      Complex complex2 = complex0.multiply(complex1);
      complex2.multiply((-1819.7769383));
      complex0.cosh();
      Complex complex3 = Complex.INF;
      complex3.isNaN();
      complex3.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1314.83343), (-1314.83343));
      complex0.INF.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.createComplex((-2515.0), (-2515.0));
      Complex complex3 = complex2.ONE.exp();
      complex2.nthRoot(37);
      complex1.NaN.abs();
      Complex complex4 = complex1.INF.multiply((-2515.0));
      complex1.abs();
      complex1.I.nthRoot(37);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex1.cos();
      Complex.valueOf(1859.4552689675354, (-1314.83343));
      Complex complex7 = complex0.sqrt1z();
      Complex.valueOf(Double.NaN, (-1617.6321405937642));
      complex4.divide(complex7);
      complex5.ONE.sqrt1z();
      Complex complex8 = Complex.valueOf(1.0238355945704727);
      complex8.NaN.subtract(1.0238355945704727);
      Complex complex9 = complex6.divide((-2515.0));
      complex9.ZERO.acos();
      Complex complex10 = complex5.cos();
      Complex complex11 = complex5.subtract(complex1);
      Complex complex12 = complex5.pow(complex10);
      complex12.NaN.pow((-1314.83343));
      Complex.valueOf(1859.4552689675354, Double.NaN);
      Complex complex13 = complex5.sqrt1z();
      complex13.I.createComplex((-2515.0), 0.07065082485316443);
      complex1.tan();
      Complex.valueOf((-1314.83343));
      complex11.multiply(complex3);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex0.readResolve();
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex((-4160.46));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.multiply((-1.9220613500411237E-289));
      Complex complex6 = Complex.ONE;
      complex6.abs();
      complex1.createComplex((-22.186), Double.NaN);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      complex1.getArgument();
      complex0.getReal();
      Complex complex2 = complex1.cos();
      complex0.cosh();
      Complex.valueOf((-20.0));
      Complex complex3 = complex2.divide((-1505.9500600688));
      complex1.divide((-3953.43112836));
      double double0 = 2266.995324999015;
      Complex complex4 = complex2.createComplex(3116.29031089011, 2266.995324999015);
      Complex complex5 = Complex.I;
      complex5.divide((-20.0));
      Complex complex6 = new Complex((-1505.9500600688), 6.283185307179586);
      complex3.pow((-3953.43112836));
      Complex complex7 = new Complex(2266.995324999015, 511.1858011955708);
      complex7.log();
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(0.42416930198669434, 0.42416930198669434);
      Complex complex1 = complex0.NaN.pow(0.42416930198669434);
      Complex complex2 = complex1.I.divide(complex0);
      complex2.ONE.asin();
      complex0.cosh();
      Complex complex3 = complex1.multiply(1);
      Complex complex4 = complex3.multiply((double) 1);
      complex2.cosh();
      complex4.isNaN();
      try { 
        complex4.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1314.83343));
      Complex complex1 = complex0.multiply(1047);
      complex0.readResolve();
      Complex complex2 = complex1.atan();
      Complex complex3 = new Complex(1047);
      Complex complex4 = complex2.tanh();
      complex4.acos();
      Complex.valueOf(15553.703270929263, 15553.703270929263);
      int int0 = 37;
      // Undeclared exception!
      complex2.nthRoot(1852628642);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      complex0.getArgument();
      complex0.getReal();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex1.I.log();
      Complex complex5 = complex4.ZERO.divide(0.7853981633974483);
      complex1.ONE.divide(0.0);
      Complex complex6 = complex1.createComplex(Double.POSITIVE_INFINITY, 2266.995324999015);
      complex6.divide(0.0);
      complex2.cos();
      complex5.pow((-652.4827));
      Complex complex7 = Complex.valueOf((-652.4827), Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.pow(complex6);
      Complex complex9 = complex3.log();
      complex8.subtract(complex9);
      complex6.log();
      complex6.sin();
      complex7.multiply(0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(0.42416930198669434, 0.42416930198669434);
      complex0.divide(complex0);
      complex0.cosh();
      Complex complex1 = Complex.INF;
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.getField();
      complex0.getArgument();
      complex1.getReal();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex6 = complex5.divide(complex0);
      Complex complex7 = complex4.log();
      complex7.readResolve();
      complex6.divide(0.7853981633974483);
      Complex complex8 = Complex.valueOf(0.7853981633974483, 0.0);
      complex0.nthRoot(255);
      Complex complex9 = Complex.valueOf((double) 37);
      Complex complex10 = complex3.conjugate();
      complex7.exp();
      complex6.getImaginary();
      complex4.sin();
      complex2.hashCode();
      Complex complex11 = complex10.reciprocal();
      complex11.sqrt();
      complex9.multiply((-3710.044943934));
      complex6.sinh();
      complex8.toString();
      complex11.tan();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.NaN.pow(0.42416930198669434);
      Complex complex2 = new Complex(0.42416930198669434);
      complex2.nthRoot(1);
      Complex complex3 = complex0.cosh();
      complex3.ZERO.tan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.reciprocal();
      complex5.NaN.sin();
      complex5.I.acos();
      Complex complex6 = complex1.divide((double) 1);
      complex1.I.sinh();
      complex3.pow(0.42416930198669434);
      complex5.hashCode();
      Complex complex7 = complex2.divide(complex5);
      complex7.atan();
      complex6.getImaginary();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3710.044943934), (-20.0));
      Complex complex1 = complex0.divide((-2631.71762454));
      Complex complex2 = complex1.ONE.createComplex(1022.795208, (-2631.71762454));
      complex1.ZERO.hashCode();
      Complex complex3 = complex2.NaN.pow(complex0);
      complex3.ONE.sqrt1z();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = Complex.valueOf((-20.0));
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex6 = complex2.cos();
      Complex complex7 = complex5.pow(complex0);
      complex7.ONE.getField();
      complex6.INF.sqrt();
      complex7.I.acos();
      Complex complex8 = complex0.log();
      Complex complex9 = complex6.exp();
      complex9.NaN.divide(complex3);
      Complex complex10 = complex2.pow(complex8);
      complex10.nthRoot(931);
      complex0.readResolve();
      complex5.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      complex0.getArgument();
      complex0.getReal();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = Complex.INF;
      complex3.divide(complex1);
      complex3.log();
      complex3.readResolve();
      Complex complex4 = complex2.divide(0.7853981633974483);
      Complex complex5 = Complex.valueOf(0.0, 6.283185307179586);
      complex5.nthRoot(37);
      Complex.valueOf((-3710.044943934));
      Complex complex6 = new Complex(2728.11530575, Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.multiply(37);
      Complex complex8 = complex1.log();
      Complex complex9 = complex0.sqrt();
      complex8.cosh();
      complex4.hashCode();
      complex7.asin();
      Complex.valueOf(372.393672678656, 0.0);
      Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      complex6.toString();
      Complex complex10 = complex2.pow(complex9);
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.NaN.pow(0.42416930198669434);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex2.log();
      complex5.readResolve();
      complex4.divide((-5770.98));
      Complex complex6 = Complex.valueOf((-5770.98), 2896.9344);
      complex0.nthRoot(511);
      Complex complex7 = Complex.valueOf((-3710.044943934));
      complex1.conjugate();
      complex5.exp();
      complex0.getImaginary();
      complex0.sin();
      Complex complex8 = complex7.reciprocal();
      complex7.sqrt();
      complex4.readResolve();
      complex6.multiply(2.366314656322868E-8);
      complex8.sinh();
      complex7.toString();
      Complex complex9 = Complex.valueOf((double) 37, (-2361.0));
      complex9.tan();
      Complex complex10 = Complex.valueOf((-3710.044943934), (-4675.22));
      complex10.atan();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      complex0.INF.readResolve();
      Object object0 = new Object();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.atan();
      Complex complex4 = new Complex(2.0);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex3.acos();
      complex6.hashCode();
      Complex complex7 = (Complex)complex1.readResolve();
      complex0.asin();
      Complex complex8 = complex7.tanh();
      Complex complex9 = Complex.valueOf(2.0, 2.0);
      complex9.tan();
      Complex complex10 = Complex.I;
      complex8.reciprocal();
      complex6.acos();
      Complex complex11 = new Complex(2.0);
      complex3.subtract(complex5);
      complex6.multiply((-1.9220613500411237E-289));
      complex3.equals(complex6);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.NaN.pow(0.42416930198669434);
      Complex complex3 = complex2.I.divide(complex0);
      complex3.nthRoot(1);
      Complex complex4 = Complex.valueOf(0.42416930198669434, 1095.75539265);
      complex4.nthRoot(37);
      complex4.equals(complex2);
      Complex complex5 = Complex.valueOf(6.283185307179586);
      complex5.conjugate();
      Complex complex6 = complex3.exp();
      complex2.getImaginary();
      Complex complex7 = complex5.sin();
      complex1.hashCode();
      complex5.reciprocal();
      complex6.sqrt();
      complex3.readResolve();
      Complex complex8 = complex4.multiply((double) 1);
      complex7.sinh();
      complex8.toString();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex0.getReal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.atan();
      complex1.negate();
      Complex complex6 = Complex.ONE;
      complex3.tanh();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.acos();
      complex8.hashCode();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      complex9.readResolve();
      Complex complex10 = Complex.ZERO;
      complex0.subtract(complex8);
      complex5.multiply((-3689));
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.log();
      complex9.sqrt();
      complex12.cosh();
      complex3.asin();
      Complex complex13 = Complex.I;
      complex13.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      complex0.getArgument();
      complex0.getReal();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.7853981633974483);
      Complex complex4 = complex3.log();
      complex0.readResolve();
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(0.7853981633974483, Double.POSITIVE_INFINITY);
      complex2.nthRoot(37);
      Object object0 = new Object();
      complex6.equals(object0);
      Complex complex7 = Complex.valueOf(350.472);
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex7.exp();
      complex4.getImaginary();
      complex6.sin();
      complex9.hashCode();
      complex4.reciprocal();
      Complex complex10 = complex8.sqrt();
      complex10.tan();
      complex10.readResolve();
      complex6.multiply(0.7853981633974483);
      Complex complex11 = complex2.sinh();
      complex11.toString();
      complex9.tan();
      Complex.valueOf(0.0);
      complex5.multiply(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.atan();
      Complex complex6 = new Complex(1.0);
      Complex complex7 = complex6.tanh();
      complex7.NaN.add(complex4);
      Complex complex8 = complex4.acos();
      complex8.hashCode();
      complex1.equals(complex8);
      Complex complex9 = Complex.valueOf((-6169.124640116812));
      complex2.conjugate();
      Complex complex10 = complex5.exp();
      complex9.getImaginary();
      Complex complex11 = complex3.sin();
      complex5.hashCode();
      complex5.reciprocal();
      complex3.sqrt();
      complex11.readResolve();
      complex5.multiply(20.0);
      complex3.sinh();
      complex10.toString();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      complex0.getArgument();
      complex0.getReal();
      Complex complex2 = complex1.cos();
      complex2.I.cosh();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex3.ZERO.divide(0.7853981633974483);
      Complex complex5 = complex1.ONE.divide(0.0);
      Complex complex6 = complex1.createComplex(Double.POSITIVE_INFINITY, 2266.995324999015);
      Complex complex7 = complex6.I.divide(9.924030156169606E118);
      complex1.ZERO.cos();
      Complex complex8 = complex5.pow((-1.998183061531611E-9));
      complex8.NaN.log();
      complex3.I.pow(complex4);
      complex7.log();
      Complex complex9 = complex4.subtract(complex6);
      Complex complex10 = complex9.log();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1314.83343));
      Complex complex1 = complex0.multiply(1047);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.INF.divide((-1314.83343));
      complex2.INF.add(complex1);
      Complex complex4 = complex2.ONE.atan();
      complex4.ZERO.add(complex2);
      complex3.ZERO.toString();
      Complex.valueOf(0.0);
      complex1.subtract(complex4);
      Complex complex5 = Complex.NaN;
      complex5.nthRoot(1);
      complex0.multiply((-1.0));
      complex4.isNaN();
      complex0.multiply(1);
      complex1.log();
      complex4.sqrt();
      Complex complex6 = Complex.valueOf((-1.0));
      complex6.cosh();
      complex0.asin();
      complex2.toString();
      complex3.nthRoot(27);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      complex0.getArgument();
      complex0.getReal();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(0.7853981633974483, 1953.7755322234);
      Complex complex4 = complex3.divide(0.7853981633974483);
      Complex complex5 = new Complex(0.0, 3680.0);
      Complex complex6 = complex5.add(complex4);
      complex5.atan();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.add(complex6);
      complex8.toString();
      Complex.valueOf((-1331.5599));
      Complex complex9 = complex0.subtract(complex2);
      complex0.nthRoot(1);
      Complex complex10 = complex5.multiply((-4114.390655680607));
      complex2.isNaN();
      complex3.exp();
      complex9.divide(3680.0);
      Complex complex11 = Complex.I;
      complex11.readResolve();
      Complex complex12 = complex5.sinh();
      complex0.sqrt();
      complex1.conjugate();
      complex12.conjugate();
      complex4.add(complex10);
      complex12.abs();
      complex5.pow((-3000.7364154148));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1314.83343));
      Complex complex1 = complex0.multiply(1047);
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.equals(complex2);
      Complex complex3 = complex0.sqrt1z();
      complex2.cosh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.divide((-1314.83343));
      Complex complex6 = complex4.divide((-20.0));
      complex3.createComplex(2618.8755, 2266.995324999015);
      Complex complex7 = complex4.divide(2618.8755);
      Complex complex8 = complex4.cos();
      complex1.pow((double) 1047);
      complex4.log();
      Complex complex9 = complex0.pow(complex6);
      complex9.INF.acos();
      Complex complex10 = complex5.log();
      complex8.subtract(complex7);
      complex10.log();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.add(1.3810978455418157);
      complex0.ONE.acos();
      Complex complex3 = complex0.I.tanh();
      complex1.I.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.multiply(complex1);
      complex4.I.multiply(1930);
      complex2.divide(complex3);
      complex0.ONE.nthRoot(3173);
      Complex.valueOf((-517.78299383655), (-8.999821367768787E-8));
      Complex complex5 = Complex.valueOf((-969.6471));
      complex1.multiply(complex5);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(205.0578958671432, 0.2679491924311228);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.ZERO.divide(6.283185307179586);
      Complex complex4 = complex0.sin();
      complex4.ZERO.createComplex(0.2679491924311228, 625.66267);
      Complex complex5 = Complex.valueOf(0.2679491924311228);
      Complex complex6 = complex4.add(complex5);
      complex6.NaN.subtract(625.66267);
      complex6.ONE.getField();
      Complex complex7 = complex0.acos();
      complex7.ZERO.hashCode();
      Complex complex8 = Complex.valueOf(667.0);
      Complex complex9 = complex7.ZERO.multiply(complex8);
      Complex complex10 = complex9.INF.sinh();
      complex0.log();
      complex1.isInfinite();
      complex0.tanh();
      complex9.toString();
      complex1.createComplex((-1383.2032), 0.2679491924311228);
      complex7.atan();
      complex6.divide(complex9);
      complex3.createComplex(6.283185307179586, (-1383.2032));
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      complex0.ONE.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.INF;
      complex3.atan();
      Complex complex4 = new Complex(1.0);
      complex4.tanh();
      Complex complex5 = complex3.acos();
      complex5.hashCode();
      complex3.readResolve();
      complex5.asin();
      Complex complex6 = complex2.subtract(complex5);
      complex6.multiply(0);
      complex6.log();
      complex6.sqrt();
      Complex complex7 = complex4.cosh();
      complex7.asin();
      Complex complex8 = Complex.valueOf((double) 0, 1783.7);
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.getField();
      complex0.getArgument();
      complex0.getReal();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.divide((-1866.6965377721));
      Complex complex7 = complex2.divide(Double.NaN);
      Complex complex8 = complex6.createComplex((-1286.1287), (-20.0));
      Complex complex9 = complex2.divide(1934.278015306921);
      complex5.cos();
      complex5.pow((-20.0));
      Complex complex10 = complex7.log();
      complex9.pow(complex8);
      Complex complex11 = Complex.INF;
      complex11.log();
      complex10.subtract(complex8);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      complex0.ONE.sqrt1z();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.INF.acos();
      complex0.hashCode();
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = complex5.asin();
      complex1.subtract(complex0);
      complex7.exp();
      complex0.divide((-1276.09));
      complex6.readResolve();
      complex5.sinh();
      Complex complex8 = Complex.ONE;
      complex8.sqrt();
      Complex complex9 = complex6.conjugate();
      complex9.ONE.cos();
      complex5.conjugate();
      Complex complex10 = complex4.add(complex6);
      complex10.abs();
      complex1.pow(Double.NaN);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1095.75539265, 3413.99797);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex2.ONE.add(1.943514969662872E-141);
      Complex complex5 = complex1.INF.negate();
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = complex1.ONE.sqrt1z();
      Complex complex8 = complex1.ONE.sqrt1z();
      complex2.tan();
      complex6.ONE.toString();
      complex2.add(complex1);
      complex7.divide(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex2.createComplex(2266.995324999015, 2.0);
      complex9.divide(96.0908);
      Complex complex10 = complex4.cos();
      complex6.pow(96.0908);
      Complex complex11 = Complex.ZERO;
      complex11.log();
      Complex complex12 = Complex.I;
      complex12.pow(complex8);
      complex7.log();
      complex3.subtract(complex10);
      Complex complex13 = Complex.I;
      Complex complex14 = complex13.log();
      complex14.add(3413.99797);
      complex10.createComplex(96.0908, (-512.6));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(1095.75539265, 3413.99797);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.ONE.negate();
      complex0.getReal();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex2.log();
      complex5.divide(7.954954738209617E24);
      Complex complex7 = complex6.divide(2.0);
      Complex complex8 = complex7.createComplex(0.21530038118362427, 6.283185307179586);
      complex6.divide(1849.0);
      Complex complex9 = complex8.cos();
      complex2.pow((-1.998183061531611E-9));
      complex4.log();
      complex9.pow(complex3);
      complex2.log();
      complex5.subtract(complex3);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-2.4459728627968634E222));
      Complex complex1 = complex0.multiply(25);
      complex1.readResolve();
      Complex complex2 = Complex.valueOf(850.013, 1.0);
      complex0.equals(complex2);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.divide((-2.4459728627968634E222));
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex5.atan();
      complex6.add(complex3);
      complex6.toString();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.subtract(complex5);
      complex5.nthRoot(25);
      Complex complex9 = complex6.multiply(Double.POSITIVE_INFINITY);
      complex8.isNaN();
      complex1.exp();
      complex3.divide((double) 1);
      Complex complex10 = Complex.NaN;
      complex10.readResolve();
      complex4.sinh();
      complex2.sqrt();
      complex1.conjugate();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.conjugate();
      complex7.add(complex12);
      complex9.abs();
      Complex complex13 = Complex.INF;
      complex13.pow((-2.4459728627968634E222));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-570.62789853), 2.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = Complex.ZERO;
      complex0.INF.subtract(complex2);
      Object object0 = complex2.readResolve();
      Complex complex3 = Complex.valueOf(2748.875, 1.0);
      Complex complex4 = complex3.sinh();
      complex0.sqrt();
      complex2.conjugate();
      complex1.conjugate();
      complex0.add(complex2);
      Complex complex5 = Complex.ZERO;
      complex5.abs();
      complex3.pow((-103.0));
      complex4.asin();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1314.83343));
      Complex complex1 = complex0.multiply(1047);
      complex0.equals(complex0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.INF.divide((-1314.83343));
      complex2.INF.add(complex1);
      Complex complex4 = complex2.ONE.atan();
      complex4.ZERO.add(complex2);
      complex3.ZERO.toString();
      Complex complex5 = Complex.valueOf(0.0);
      complex0.INF.subtract(complex5);
      complex3.I.nthRoot(1);
      complex2.multiply(0.0);
      complex5.isNaN();
      complex2.exp();
      complex5.divide((double) 1047);
      Complex complex6 = complex0.multiply(2.4459728627968634E222);
      complex6.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      complex0.getArgument();
      complex0.getReal();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.cosh();
      complex2.equals((Object) null);
      Complex complex4 = complex3.pow(0.7853981633974483);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.add(Double.NaN);
      Complex complex7 = complex4.pow(complex6);
      complex5.atan();
      complex2.acos();
      complex7.acos();
      complex7.divide(1209.7823571681);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = (Complex)complex0.INF.readResolve();
      Object object0 = new Object();
      complex2.log();
      Complex complex3 = Complex.valueOf((-1.6001563011916016E-8));
      Complex complex4 = complex3.divide((-1.6001563011916016E-8));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.divide((-1.6001563011916016E-8));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.createComplex((-2835.36), 2266.995324999015);
      complex6.divide((-0.5606386358794273));
      Complex complex9 = complex6.cos();
      complex8.pow((-1.0));
      complex6.log();
      complex8.pow(complex1);
      complex7.log();
      complex4.subtract(complex9);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(1095.75539265, 3413.99797);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex2.ONE.add(1.943514969662872E-141);
      Complex complex5 = complex1.INF.negate();
      Complex complex6 = complex5.I.sinh();
      complex1.ONE.sqrt1z();
      Complex complex7 = complex1.ONE.sqrt1z();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex2.add(complex1);
      Complex complex10 = complex0.divide(complex9);
      Complex complex11 = complex8.NaN.log();
      complex11.INF.readResolve();
      complex10.divide(0.0);
      Complex complex12 = Complex.valueOf(1095.75539265, 1095.75539265);
      complex12.nthRoot(37);
      complex0.equals(complex8);
      Complex complex13 = Complex.valueOf(2724.246605578);
      complex6.ZERO.conjugate();
      complex2.exp();
      complex10.getImaginary();
      Complex complex14 = complex10.sin();
      complex14.I.hashCode();
      Complex complex15 = complex13.reciprocal();
      complex6.sqrt();
      complex3.readResolve();
      complex1.multiply(0.0);
      complex15.sinh();
      complex7.toString();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2666.750421961757);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.tanh();
      complex1.INF.negate();
      complex1.add(complex0);
      complex4.createComplex((-4554.6610683432), 0.0);
      complex2.cos();
      complex3.isNaN();
      complex4.I.exp();
      complex4.multiply((-555));
      try { 
        complex1.nthRoot((-555));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -555
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2808.7278226624, (-938.1568626548));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.createComplex((-48.55612942788414), 0.0);
      complex2.I.add(0.0);
      complex4.ZERO.readResolve();
      Complex complex5 = complex1.divide(complex2);
      complex2.I.cosh();
      complex4.sin();
      Complex complex6 = Complex.valueOf((-843.185762406));
      complex3.pow(complex1);
      complex6.getImaginary();
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-2.4459728627968634E222));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.negate();
      complex2.ZERO.pow(complex1);
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex1.NaN.tanh();
      complex4.ZERO.add(complex3);
      complex3.ZERO.asin();
      Complex complex5 = complex4.NaN.tan();
      complex5.NaN.tan();
      Complex.valueOf((-2.4459728627968634E222));
      Complex complex6 = complex0.I.multiply((-103));
      complex6.reciprocal();
      Complex complex7 = complex6.INF.multiply(complex0);
      complex0.getImaginary();
      complex0.abs();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex3.add(complex0);
      Complex complex11 = complex6.cosh();
      complex11.conjugate();
      complex8.ZERO.multiply(1);
      complex7.getField();
      complex0.multiply(complex9);
      Complex complex12 = complex8.pow(complex4);
      complex8.getImaginary();
      complex6.tanh();
      complex10.add(complex12);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1575.580319);
      complex0.getImaginary();
      Complex complex1 = complex0.sin();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-570.62789853), 2.0);
      complex0.ZERO.log();
      Complex complex1 = Complex.ZERO;
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.multiply(776.144);
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.tanh();
      complex0.INF.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex1.NaN.add((-652.4827));
      Complex complex3 = complex1.pow(complex0);
      complex3.ONE.atan();
      complex0.acos();
      complex2.acos();
      complex2.divide((-717.612));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2748.875));
      Complex complex1 = complex0.multiply((-1273.5002340116));
      complex0.INF.reciprocal();
      Complex complex2 = complex1.I.multiply((-1829));
      Complex complex3 = complex2.NaN.cosh();
      complex2.I.divide((-1275.8626055034917));
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = complex0.tanh();
      complex0.ONE.tan();
      complex5.ZERO.divide(complex4);
      complex5.INF.divide((-2748.875));
      complex5.NaN.multiply(complex3);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = Complex.valueOf((-2748.875), (-2748.875));
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex8.NaN.multiply(0);
      Complex complex10 = complex0.negate();
      complex10.multiply((-1829));
      complex6.conjugate();
      complex9.divide((-2748.875));
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.pow(complex1);
      complex0.getImaginary();
      Complex complex3 = complex0.sinh();
      complex3.I.pow((-1.0));
      complex3.ONE.sin();
      complex0.getArgument();
      Complex complex4 = complex1.subtract((-1.506211451453));
      Complex complex5 = complex4.INF.sin();
      complex5.NaN.tan();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex1.NaN.multiply(4643.418868714191);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.INF.sqrt();
      complex6.INF.cosh();
      complex6.ZERO.cosh();
      complex9.NaN.abs();
      Complex complex10 = Complex.valueOf(0.0, 1105.287142455456);
      Complex complex11 = complex6.add(complex8);
      complex2.readResolve();
      complex10.I.exp();
      complex8.I.conjugate();
      complex10.multiply(0.0);
      complex9.pow((-1.0));
      complex11.ZERO.multiply(4643.418868714191);
      Complex complex12 = complex9.multiply((-1.0));
      complex12.tanh();
      complex7.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(163.705, 0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.sin();
      complex2.I.divide(complex1);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex1.ZERO.divide(complex0);
      complex1.ONE.subtract(complex2);
      Complex complex5 = complex0.atan();
      complex4.INF.subtract(0.35266298055648804);
      complex5.ONE.divide((-2.3639110433141897E-8));
      complex5.INF.cos();
      Complex complex6 = complex5.I.pow(complex3);
      complex4.getReal();
      Complex complex7 = complex3.pow(0.0);
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex7.cos();
      complex0.createComplex(0.0, 0.0);
      complex8.getField();
      complex8.getReal();
      complex5.sqrt();
      complex0.tan();
      complex9.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.I.multiply(0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = Complex.valueOf(5567.5036, (double) 0);
      complex0.sqrt();
      complex0.ZERO.abs();
      complex1.INF.hashCode();
      Complex complex5 = complex0.divide((-2.7943366835352838E-8));
      complex1.sinh();
      Complex complex6 = complex2.createComplex((-479.01773063), 0);
      Complex complex7 = complex5.log();
      complex6.ONE.tan();
      complex2.ZERO.abs();
      Complex complex8 = complex7.divide((-2.7943366835352838E-8));
      complex8.NaN.hashCode();
      Complex complex9 = Complex.valueOf(4457.791672427639);
      Complex complex10 = complex5.tanh();
      complex9.hashCode();
      Complex complex11 = complex6.multiply(0.0);
      complex10.abs();
      complex11.INF.tanh();
      complex4.exp();
      complex0.log();
      Complex.valueOf((-3399.1343373106397), (-2.7943366835352838E-8));
      Complex.valueOf(0.0);
      Complex complex12 = complex10.multiply(complex7);
      complex12.ZERO.add(complex3);
      complex12.getImaginary();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.INF.asin();
      int int0 = 913;
      complex1.ONE.nthRoot(913);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ZERO.toString();
      complex0.getImaginary();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.ZERO.asin();
      Complex complex2 = complex0.asin();
      complex2.sinh();
      Complex complex3 = complex2.subtract(0.0);
      complex3.isNaN();
      complex3.abs();
      complex3.hashCode();
      complex2.hashCode();
      complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-2.863180390093667E-9));
      Complex complex2 = complex1.I.conjugate();
      complex2.ONE.add((-2.863180390093667E-9));
      complex2.NaN.multiply(complex0);
      Complex complex3 = complex0.createComplex((-2.863180390093667E-9), (-2.863180390093667E-9));
      Complex complex4 = complex3.createComplex((-1214.373), (-2.863180390093667E-9));
      Complex complex5 = complex4.ZERO.subtract(complex0);
      complex5.NaN.createComplex((-2.863180390093667E-9), (-1214.373));
      Complex complex6 = complex5.NaN.createComplex((-1214.373), (-1214.373));
      complex6.NaN.reciprocal();
      Complex complex7 = complex4.tan();
      complex7.NaN.hashCode();
      complex4.hashCode();
      complex7.ZERO.cos();
      Complex complex8 = complex0.pow((-1214.373));
      complex0.I.divide(complex2);
      Complex complex9 = complex0.tan();
      complex9.INF.divide(592.0221603206077);
      complex7.isNaN();
      complex4.getImaginary();
      complex0.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.601222826656464E-7);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.conjugate();
      complex3.sinh();
      complex3.NaN.hashCode();
      Complex complex4 = complex2.ONE.multiply(complex0);
      Complex complex5 = Complex.valueOf(1.601222826656464E-7, (-3397.795086986516));
      Complex complex6 = Complex.valueOf(1.601222826656464E-7, 1.601222826656464E-7);
      Complex.valueOf((-2547.00152), (-656.021098));
      Complex complex7 = complex6.I.subtract((-450.4268));
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex1.add((-1276.5944226816046));
      complex9.pow(complex10);
      complex9.reciprocal();
      complex1.asin();
      complex7.cosh();
      complex5.subtract(0.0);
      complex4.createComplex(0.0, 1.601222826656464E-7);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-607.09765268836), (-607.09765268836));
      Complex complex1 = complex0.add(972.522449093);
      complex1.INF.tan();
      complex0.isNaN();
      Complex complex2 = complex0.sqrt();
      complex0.ZERO.getField();
      Complex complex3 = complex2.ONE.divide(2464.9938456426958);
      Complex complex4 = complex2.INF.add((-607.09765268836));
      Complex complex5 = complex0.sqrt();
      complex5.getField();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex3.I.asin();
      complex7.INF.conjugate();
      Complex complex8 = complex4.INF.exp();
      complex3.pow(0.0);
      complex4.readResolve();
      complex1.getField();
      complex0.abs();
      complex6.negate();
      complex8.tan();
      complex1.add(complex6);
      complex0.reciprocal();
      complex5.getImaginary();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(1241.06383);
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.valueOf(1241.06383);
      complex0.getField();
      Complex complex5 = complex0.I.atan();
      complex5.ONE.nthRoot(1);
      Complex complex6 = complex5.ONE.pow(complex2);
      complex5.ZERO.abs();
      Complex complex7 = complex4.pow(complex3);
      Complex complex8 = complex2.negate();
      complex8.NaN.atan();
      Complex complex9 = complex2.exp();
      complex9.atan();
      Complex complex10 = complex1.divide(complex0);
      complex10.subtract(complex6);
      complex2.pow(0.0);
      complex2.cos();
      complex7.isNaN();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 1585.27);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.INF.sin();
      complex3.INF.toString();
      complex0.ZERO.hashCode();
      complex0.getReal();
      Complex complex4 = complex0.subtract(2.0);
      Complex complex5 = complex4.sinh();
      complex5.ONE.reciprocal();
      complex1.NaN.pow((-20.0));
      Complex complex6 = complex5.atan();
      complex6.NaN.sin();
      complex5.toString();
      complex1.pow(complex4);
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.pow(0.0);
      complex0.ZERO.subtract(0.0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-606.0), 0.0);
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = complex3.ZERO.negate();
      complex4.getArgument();
      Complex complex5 = complex0.negate();
      complex5.getArgument();
      Complex complex6 = complex2.createComplex((-3.141592653589793), 0.0);
      complex6.pow((-1119.2326));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.atan();
      complex0.ONE.reciprocal();
      complex3.isInfinite();
      Complex complex4 = complex1.multiply(153);
      Complex complex5 = complex3.conjugate();
      complex5.ZERO.tanh();
      complex3.multiply(1795);
      complex4.INF.log();
      complex4.subtract((-2471.6632));
      complex1.sqrt();
      complex4.acos();
      complex2.divide((-942.1034904));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.multiply(667);
      complex1.INF.readResolve();
      complex0.I.multiply(1);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.ONE.cosh();
      complex2.I.sinh();
      complex0.getImaginary();
      complex3.sin();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex0.multiply(6.283185307179586);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex1.createComplex(1879.0, 1879.0);
      complex6.INF.multiply(240);
      complex1.INF.toString();
      complex4.I.getArgument();
      complex6.add((-234.569));
      complex4.toString();
      complex4.equals("(Infinity, Infinity)");
      Complex complex7 = complex2.sinh();
      complex7.INF.subtract(complex5);
      complex3.tan();
      complex4.NaN.multiply(complex7);
      complex4.exp();
      complex4.asin();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-392.75458));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.I.sqrt();
      complex0.I.cosh();
      complex0.getField();
      complex3.abs();
      Complex complex5 = complex3.ONE.add(complex2);
      complex5.ONE.subtract((-392.75458));
      Complex complex6 = complex1.multiply(complex4);
      complex6.asin();
      Complex complex7 = complex5.log();
      complex7.INF.sinh();
      Complex complex8 = complex0.divide(Double.NaN);
      complex8.ZERO.subtract(complex3);
      int int0 = (-2362);
      try { 
        complex5.nthRoot((-2362));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,362
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.cos();
      Complex.valueOf(2.0, 2.0);
      Complex.valueOf(3428.0925522935754);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double double0 = (-364.83148583261);
      Complex complex0 = Complex.valueOf((-364.83148583261));
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.exp();
      complex2.getImaginary();
      Complex complex4 = complex3.log();
      complex0.ZERO.sinh();
      try { 
        complex4.I.nthRoot((-556));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -556
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex3.NaN.atan();
      complex4.I.tanh();
      Complex complex5 = complex0.INF.acos();
      complex0.hashCode();
      complex0.readResolve();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex1.subtract(complex0);
      complex5.multiply(0);
      complex7.ONE.log();
      Complex complex8 = complex0.sqrt();
      complex8.cosh();
      complex6.asin();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.NaN.pow(0.42416930198669434);
      Complex complex3 = complex2.I.divide(complex0);
      complex3.nthRoot(1);
      Complex complex4 = complex0.cosh();
      complex4.ZERO.tan();
      Complex complex5 = Complex.I;
      complex2.ONE.divide(complex5);
      Complex complex6 = complex1.reciprocal();
      complex6.I.acos();
      Complex complex7 = complex1.divide(0.0);
      complex1.I.sinh();
      complex4.pow(0.42416930198669434);
      complex6.hashCode();
      Complex complex8 = complex3.divide(complex6);
      complex8.atan();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.INF.divide(0.0);
      Complex complex4 = complex0.I.subtract(Double.NaN);
      complex4.INF.add(0.0);
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex5.I.acos();
      complex6.NaN.cos();
      Complex complex7 = complex0.ZERO.sqrt1z();
      complex0.I.getField();
      complex3.INF.getField();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.tan();
      complex3.cos();
      Complex complex10 = complex7.divide(complex9);
      complex1.getArgument();
      complex8.atan();
      complex9.subtract(complex0);
      complex10.getField();
      Complex complex11 = Complex.valueOf(Double.NaN, 1139.134517392077);
      Complex complex12 = complex0.exp();
      complex12.getReal();
      Complex complex13 = complex1.sinh();
      complex13.ZERO.subtract(Double.NaN);
      Complex complex14 = complex12.sinh();
      Complex complex15 = complex11.negate();
      complex13.asin();
      complex15.abs();
      complex14.subtract(0.0);
      Complex.valueOf(Double.NaN, 3084.5);
      complex2.abs();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-1314.83343));
      Complex complex1 = complex0.multiply(1047);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.INF.divide((-1314.83343));
      complex2.INF.add(complex1);
      Complex complex4 = complex2.ONE.atan();
      complex4.ZERO.add(complex2);
      complex3.ZERO.toString();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.INF.subtract(complex5);
      complex3.I.nthRoot(1);
      Complex complex7 = complex2.multiply(0.0);
      complex5.isNaN();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex5.divide((double) 1047);
      complex3.readResolve();
      complex2.sinh();
      complex8.sqrt();
      complex3.conjugate();
      complex6.conjugate();
      complex7.add(complex5);
      complex9.abs();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-78.90871), (-78.90871));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.createComplex(2.0, 0.0);
      complex2.ONE.add((-1.0));
      Complex complex3 = complex1.atan();
      complex3.createComplex(0.0, (-78.90871));
      complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      complex1.NaN.cos();
      Complex complex2 = complex0.sin();
      complex0.nthRoot(1097);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.log();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      complex0.NaN.nthRoot(425);
      complex2.NaN.getArgument();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex3.ONE.multiply(96);
      assertEquals(96.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex3.I.hashCode();
      Complex complex6 = complex2.divide(0.0);
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex1.divide(complex2);
      complex8.ONE.negate();
      Complex complex9 = complex8.ONE.exp();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex9.getReal(), 0.01);
      
      Complex complex10 = complex8.subtract(609.46);
      Complex complex11 = complex10.multiply(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex11.I.multiply(Double.NaN);
      complex12.exp();
      complex1.asin();
      Complex complex13 = complex3.reciprocal();
      Complex complex14 = complex8.createComplex(609.46, 425);
      complex0.toString();
      Complex complex15 = complex13.tanh();
      complex6.sin();
      complex4.abs();
      Complex complex16 = complex4.tan();
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(36.071404402473284, complex16.getReal(), 0.01);
      
      List<Complex> list0 = complex12.nthRoot(96);
      assertTrue(list0.contains(complex15));
      
      Complex complex17 = complex14.subtract(688.9845838631);
      assertEquals((-79.52458386310002), complex17.getReal(), 0.01);
      
      Complex complex18 = complex13.pow(complex7);
      assertSame(complex7, complex13);
      
      complex12.getField();
      assertSame(complex11, complex18);
      
      complex10.reciprocal();
      Complex complex19 = complex2.asin();
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertEquals(0.0, complex19.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.I.reciprocal();
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.exp();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex5.getReal(), 0.01);
      
      Complex complex6 = Complex.valueOf((-4490.63), (-4490.63));
      assertFalse(complex6.isInfinite());
      
      Complex complex7 = complex0.divide(complex4);
      assertSame(complex4, complex1);
      assertNotSame(complex7, complex6);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
  }
}
