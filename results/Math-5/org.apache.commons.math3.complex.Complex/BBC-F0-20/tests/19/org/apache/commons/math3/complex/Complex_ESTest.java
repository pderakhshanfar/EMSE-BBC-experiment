/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:10:38 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-23.6444528938));
      Complex complex1 = Complex.valueOf(1.956199868121249E282);
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.getArgument();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.8382923511801317E183), 7.445620503219039E-119);
      complex0.abs();
      Complex complex1 = complex0.reciprocal();
      complex0.ZERO.multiply(37);
      complex0.divide(complex1);
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.I.pow((-695.0));
      complex0.toString();
      Complex complex4 = complex1.sin();
      complex0.cosh();
      Complex complex5 = complex2.INF.atan();
      Complex complex6 = complex2.multiply(0.8813735870195429);
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex7.ZERO.asin();
      complex8.NaN.log();
      complex5.I.negate();
      complex6.INF.nthRoot(402);
      complex5.INF.tanh();
      complex6.atan();
      complex3.ZERO.readResolve();
      Complex complex9 = complex3.add(complex6);
      complex3.conjugate();
      Complex complex10 = complex5.conjugate();
      complex10.tanh();
      Complex.valueOf((-1.8382923511801317E183), (-695.0));
      complex9.subtract((-695.0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.425402115319395E-188, 1.5707963267948966);
      complex0.NaN.tan();
      Complex complex1 = complex0.tanh();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(20.0);
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tanh();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ONE;
      complex1.tanh();
      Complex complex4 = complex0.divide(Double.NaN);
      complex4.ZERO.sin();
      Complex complex5 = Complex.ZERO;
      complex1.log();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-144.94155));
      Complex complex2 = complex1.cos();
      complex0.subtract(complex1);
      Complex complex3 = complex0.createComplex((-144.94155), (-4.27932550865546E-8));
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex2.add(complex3);
      Complex complex6 = complex4.ZERO.createComplex((-144.94155), (-4.27932550865546E-8));
      complex1.INF.divide(complex0);
      Complex complex7 = Complex.valueOf((-1.0));
      Complex complex8 = new Complex((-1.0));
      complex7.ZERO.multiply(complex8);
      complex7.INF.getField();
      Complex complex9 = complex4.tanh();
      complex6.ONE.negate();
      complex2.multiply(complex5);
      Complex complex10 = complex0.I.divide(complex2);
      complex10.ZERO.sqrt();
      complex9.readResolve();
      Complex complex11 = complex3.multiply((-55));
      complex11.ZERO.multiply(774);
      Complex complex12 = Complex.valueOf(2080.393352258707, 20.0);
      complex12.tan();
      complex9.divide(complex3);
      try { 
        complex6.nthRoot((-526));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -526
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-25.8195));
      Complex complex1 = Complex.valueOf((-2663.94264147036));
      complex1.multiply(complex0);
      Complex.valueOf((-25.8195));
      complex1.multiply(complex0);
      Complex complex2 = Complex.valueOf((-2663.94264147036), (-2663.94264147036));
      Complex complex3 = Complex.ONE;
      complex3.sin();
      Complex complex4 = complex2.tan();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 37;
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-209.408), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-1361.0));
      Complex complex1 = Complex.valueOf(7.648804350979522E12, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex.valueOf((-1361.0));
      complex1.multiply(3448);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1361.0));
      Complex complex1 = Complex.valueOf(7.648804350979522E12, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex2 = Complex.valueOf((-1361.0));
      Complex complex3 = new Complex(3006.275);
      Complex complex4 = new Complex((-3595.3147952011));
      complex1.multiply(complex4);
      Complex complex5 = complex2.multiply(complex3);
      Complex complex6 = Complex.valueOf(3006.275);
      complex6.ONE.tan();
      complex5.acos();
      Complex complex7 = Complex.I;
      complex7.asin();
      Complex complex8 = new Complex(7.648804350979522E12);
      complex2.add((-3666.2221135));
      complex1.subtract(2730.112963795266);
      complex1.multiply(0.6684302091598511);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1361.0));
      Complex complex1 = Complex.valueOf(7.648804350979522E12, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex2 = Complex.valueOf((-1361.0));
      Complex complex3 = new Complex(3006.275);
      Complex complex4 = new Complex((-3595.3147952011));
      complex1.multiply(complex4);
      Complex complex5 = complex2.multiply(complex3);
      Complex.valueOf(3006.275);
      Complex complex6 = complex5.acos();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.asin();
      Complex complex9 = new Complex(7.648804350979522E12);
      complex2.add((-3666.2221135));
      Complex complex10 = Complex.valueOf((-3666.2221135));
      complex10.subtract(Double.POSITIVE_INFINITY);
      complex8.sin();
      complex6.tan();
      Complex complex11 = Complex.I;
      Complex complex12 = Complex.valueOf(0.0);
      complex11.pow(complex12);
      Complex complex13 = Complex.valueOf(1852320.0);
      complex13.multiply(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      complex9.pow(1719.29751399211);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1361.0));
      Complex complex1 = Complex.valueOf(7.648804350979522E12, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(1149.9526);
      Complex complex3 = complex2.multiply(complex1);
      complex1.multiply(complex3);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.subtract(complex4);
      Complex complex5 = Complex.INF;
      complex5.divide(complex2);
      complex3.acos();
      Complex complex6 = new Complex(4861.78883561933, 3006.275);
      complex6.asin();
      Complex complex7 = new Complex(3006.275);
      complex2.add((-20.0));
      complex7.tanh();
      Complex complex8 = Complex.I;
      complex8.divide((-20.0));
      Complex complex9 = Complex.ZERO;
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(433.03092869, 433.03092869);
      Complex complex1 = Complex.valueOf(433.03092869, 1244.5);
      complex1.getField();
      Complex complex2 = Complex.valueOf(2.0);
      Complex complex3 = new Complex(1244.5);
      Complex complex4 = Complex.valueOf(1626.240022116295);
      Complex complex5 = complex2.multiply(complex4);
      complex0.multiply(complex3);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex4.divide(complex6);
      Complex complex8 = complex6.acos();
      Complex complex9 = complex7.asin();
      Complex complex10 = new Complex(433.03092869);
      complex10.add(433.03092869);
      complex2.readResolve();
      Complex complex11 = Complex.INF;
      complex11.subtract(6012.550083159393);
      complex8.sin();
      complex0.tan();
      complex0.pow(complex5);
      Complex complex12 = Complex.ONE;
      complex12.I.divide(2.0);
      complex4.conjugate();
      complex9.sqrt();
      complex7.subtract(complex10);
      complex11.exp();
      Complex.valueOf(514.1414628095);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.acos();
      complex3.asin();
      Complex complex4 = new Complex(Double.NaN);
      Complex complex5 = complex3.add(5.8015881615938497E-8);
      complex5.tanh();
      complex3.divide((-3666.2221));
      Complex complex6 = Complex.ZERO;
      complex3.multiply((-2045222521));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3006.275, 3006.275);
      Complex complex1 = complex0.add(1266.4);
      Complex complex2 = complex1.multiply(1414);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.multiply(complex3);
      Complex.valueOf((-20.0));
      complex2.divide(complex3);
      complex4.acos();
      complex4.asin();
      Complex complex5 = new Complex(1414);
      Complex complex6 = new Complex((-20.0), (-1161.6270619438));
      complex6.add(2776.66749);
      complex1.tanh();
      complex1.divide(1266.4);
      Complex complex7 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1361.0));
      Complex complex1 = Complex.valueOf(7.648804350979522E12, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex2 = Complex.valueOf((-1361.0));
      Complex complex3 = new Complex(3006.275);
      Complex complex4 = new Complex((-3595.3147952011));
      Complex complex5 = complex1.multiply(complex4);
      Complex complex6 = complex2.multiply(complex3);
      Complex.valueOf(3006.275);
      Complex complex7 = complex5.divide(complex4);
      complex6.acos();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.asin();
      Complex complex10 = new Complex((-661.515328348));
      complex2.add((-3666.2221135));
      Complex complex11 = complex7.subtract(2730.112963795266);
      complex11.sin();
      complex1.tan();
      complex1.pow(complex3);
      Complex complex12 = Complex.ONE;
      complex9.sqrt();
      complex0.subtract(complex1);
      Complex.valueOf(1244.5);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex.valueOf(3006.275, 3006.275);
      Complex complex0 = new Complex(1.708073418273571, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.tanh();
      complex2.ONE.atan();
      complex1.divide(3006.275);
      Complex complex3 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.cosh();
      Complex complex2 = Complex.ZERO;
      complex2.divide(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.subtract(complex3);
      complex2.conjugate();
      complex4.getArgument();
      complex0.readResolve();
      Complex complex5 = Complex.ONE;
      complex5.exp();
      complex1.nthRoot(1182);
      complex2.isNaN();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, (-20.0));
      complex6.divide(433.03092869);
      Complex complex7 = Complex.valueOf(5.807052689551411E-8);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1423.9317339031315);
      Complex complex2 = Complex.valueOf((-1420.87869557354), 433.03092869);
      complex2.getField();
      Complex complex3 = Complex.valueOf(1244.5);
      Complex complex4 = new Complex(25.8195);
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = complex5.multiply(complex1);
      Complex.valueOf(1423.9317339031315);
      complex2.divide(complex4);
      Complex complex7 = complex3.acos();
      Complex complex8 = new Complex(433.03092869, 20.0);
      Complex complex9 = complex8.asin();
      Complex complex10 = new Complex(1244.5);
      Complex complex11 = complex7.add(1423.9317339031315);
      Complex complex12 = Complex.I;
      complex12.subtract(1423.9317339031315);
      complex9.sin();
      Complex complex13 = complex10.tan();
      complex11.pow(complex5);
      Complex complex14 = Complex.ONE;
      complex13.sqrt();
      Complex complex15 = Complex.valueOf(1244.5);
      complex6.subtract(complex15);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(Double.NaN, (-1687.343087));
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ONE;
      complex1.tanh();
      complex0.divide((-1687.343087));
      Complex complex4 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-2751.49357);
      complex0.add((-2751.49357));
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex2.INF.tanh();
      complex0.I.divide(Double.POSITIVE_INFINITY);
      complex0.toString();
      Complex complex3 = complex1.NaN.cosh();
      complex3.INF.getField();
      complex0.multiply(1173);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.subtract(complex0);
      complex0.pow(0.7853981633974483);
      complex5.nthRoot(1173);
      complex5.multiply(1173);
      complex2.createComplex(3102.93556, 1173);
      Complex complex6 = complex1.tan();
      complex6.NaN.cosh();
      complex3.divide(388.0);
      complex1.reciprocal();
      complex6.multiply((-20.0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3006.275, 3006.275);
      Complex complex1 = complex0.add(3006.275);
      Complex complex2 = complex1.multiply(1415);
      Complex complex3 = complex0.negate();
      Complex complex4 = new Complex((-141.124286995728));
      Complex complex5 = complex4.subtract((-141.124286995728));
      complex1.atan();
      Complex complex6 = complex0.add(0.0);
      Complex complex7 = complex5.subtract(54.97455169876794);
      complex4.subtract(1196.3);
      Complex complex8 = complex6.sin();
      complex8.I.getField();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex7.sqrt();
      Complex complex11 = complex1.subtract(complex3);
      complex1.getReal();
      Complex complex12 = complex10.add(0.0);
      Complex complex13 = Complex.valueOf(3084.7231001, Double.NaN);
      complex13.multiply(complex9);
      complex2.sqrt();
      complex12.add(complex11);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      complex0.abs();
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.valueOf(2.0, 0.0);
      Complex complex6 = complex4.divide(complex5);
      complex6.acos();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex6.add(2.7050414085388184);
      complex6.subtract((-81.11435151936166));
      complex3.sin();
      complex6.tan();
      complex8.readResolve();
      complex6.equals(complex4);
      complex7.multiply(1150);
      complex4.tanh();
      Complex.valueOf((-2697.41), (-407.0));
      Complex complex9 = new Complex(2.0, 3.91155481338501E-8);
      complex1.divide(complex4);
      complex5.isNaN();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      complex1.ONE.nthRoot(721);
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.sqrt();
      complex1.INF.abs();
      Complex complex6 = complex4.ONE.exp();
      complex6.NaN.divide(Double.POSITIVE_INFINITY);
      complex5.INF.subtract(20.0);
      complex5.I.readResolve();
      complex5.ZERO.atan();
      Complex complex7 = complex4.ZERO.tan();
      Complex complex8 = complex7.NaN.pow(1.3539193155124791E110);
      Complex complex9 = complex0.conjugate();
      complex0.I.hashCode();
      complex0.abs();
      Complex.valueOf(2.61726605666378E-211, 1.9867963790893555);
      complex9.INF.log();
      complex9.createComplex(Double.NaN, 2291.6591544674);
      complex0.conjugate();
      complex8.cos();
      Complex complex10 = complex4.divide(20.0);
      complex9.exp();
      complex3.readResolve();
      complex5.multiply(721);
      complex5.acos();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.log();
      complex0.INF.pow(2018.32866);
      Complex complex1 = Complex.valueOf(2018.32866, 2018.32866);
      complex1.ONE.multiply(complex0);
      complex0.multiply(1194);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3271.58), 744.415777);
      Complex complex1 = complex0.pow((-3271.58));
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.pow(811.206795626);
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      complex0.INF.pow(2018.32866);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.divide(2.2159880120292917E-96);
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.ZERO;
      complex0.divide(complex1);
      complex3.asin();
      complex5.subtract(complex2);
      Complex complex6 = complex4.conjugate();
      complex6.readResolve();
      complex0.exp();
      // Undeclared exception!
      complex1.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.readResolve();
      Complex complex2 = Complex.valueOf(0.5936288833618164);
      Complex complex3 = complex2.ONE.divide(0.5936288833618164);
      Complex complex4 = complex2.ZERO.pow(complex1);
      complex4.INF.multiply(complex2);
      Complex complex5 = complex1.ONE.tanh();
      complex1.NaN.getField();
      Complex complex6 = complex1.multiply(0);
      complex6.INF.sqrt1z();
      Complex complex7 = complex6.atan();
      complex7.log();
      complex7.INF.abs();
      complex1.getField();
      Complex complex8 = complex3.exp();
      complex8.ZERO.tanh();
      complex1.INF.getField();
      Complex complex9 = complex7.asin();
      complex5.cosh();
      Complex complex10 = complex9.divide(complex1);
      complex5.toString();
      complex9.cosh();
      complex10.cosh();
      complex5.exp();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      complex1.NaN.conjugate();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex0.ONE.createComplex(0.17020416259765625, 0.0);
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = Complex.valueOf(7.820967281864741);
      Complex complex7 = Complex.valueOf(0.0, 0.17020416259765625);
      Complex complex8 = complex5.sinh();
      complex6.getArgument();
      Complex complex9 = complex3.negate();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.cos();
      complex0.nthRoot(3348);
      complex1.getArgument();
      complex9.hashCode();
      Complex complex12 = complex2.cosh();
      complex10.readResolve();
      Complex complex13 = Complex.ZERO;
      complex13.equals(complex0);
      complex4.getField();
      complex12.asin();
      complex2.add(0.14594155703515366);
      Complex complex14 = Complex.ONE;
      complex12.equals(complex14);
      complex12.getField();
      Complex complex15 = complex6.asin();
      complex15.INF.multiply(complex12);
      complex7.add(0.0);
      complex13.add(complex2);
      complex8.tanh();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-25.8195));
      complex0.getArgument();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(9.324622137237299E-90, 3.141592653589793);
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.divide(complex5);
      complex4.hashCode();
      complex0.pow(complex3);
      complex1.subtract(complex7);
      Complex.valueOf(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      complex0.exp();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex4.reciprocal();
      complex4.cos();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex3.subtract(6.283185307179586);
      Complex complex7 = Complex.valueOf((-285.5046938304));
      complex7.isInfinite();
      complex1.createComplex(6.283185307179586, 2.414213562373095);
      complex2.divide(6.283185307179586);
      Complex complex8 = new Complex((-20.0));
      complex8.cosh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = new Complex(3283.046823892371);
      complex4.divide(complex10);
      Complex complex11 = complex6.asin();
      complex2.pow(1209.983495);
      Complex complex12 = Complex.I;
      Complex complex13 = complex6.subtract(complex12);
      Complex complex14 = complex13.conjugate();
      Complex complex15 = complex5.exp();
      complex11.nthRoot(1365);
      complex1.cosh();
      complex14.isInfinite();
      complex13.divide(2370.397984468);
      complex15.readResolve();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-25.8195));
      complex0.getArgument();
      complex0.ONE.cos();
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(9.324622137237299E-90, 3.141592653589793);
      complex2.log();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex1.I.multiply(complex0);
      Complex complex5 = complex0.divide(complex1);
      complex5.INF.acos();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.NaN.add((-25.8195));
      complex7.ZERO.subtract((-2697.41));
      Complex complex8 = complex3.subtract((-893.5191684590138));
      Complex complex9 = complex4.sin();
      Complex complex10 = complex4.tan();
      Complex complex11 = complex6.sqrt();
      complex8.subtract(complex11);
      complex7.getReal();
      complex9.add((-5266.966636058668));
      Complex complex12 = complex9.cosh();
      complex12.multiply(complex2);
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1776.3544638927617, 1776.3544638927617);
      Complex complex1 = complex0.I.divide(1776.3544638927617);
      complex1.I.asin();
      Complex complex2 = complex0.ONE.multiply(Double.NaN);
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex1.ZERO.reciprocal();
      Complex complex5 = complex4.NaN.subtract(1776.3544638927617);
      complex5.NaN.getArgument();
      complex1.multiply(complex4);
      Complex complex6 = complex4.ONE.acos();
      complex6.I.cos();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.subtract(Double.NaN);
      complex8.INF.nthRoot(1378);
      Complex complex9 = complex5.log();
      complex3.getField();
      complex2.add(Double.NaN);
      complex4.negate();
      complex8.add(Double.NaN);
      complex9.negate();
      Complex complex10 = complex2.log();
      complex6.pow(2176.7901);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.11113807559013367);
      Complex complex2 = complex0.subtract((-1.557407724654902));
      Complex complex3 = complex2.atan();
      complex2.multiply((-1.557407724654902));
      Complex complex4 = complex1.divide((-148.9238));
      Complex complex5 = Complex.NaN;
      complex5.cosh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.valueOf((-148.9238));
      complex7.divide(complex0);
      complex4.asin();
      complex2.pow((-324.971));
      Complex complex8 = new Complex((-148.9238), (-1.0568403170659571E-8));
      Complex complex9 = complex8.subtract(complex5);
      complex1.conjugate();
      complex3.readResolve();
      complex2.exp();
      complex1.nthRoot(1182);
      complex2.cosh();
      complex9.isInfinite();
      complex1.divide(0.11113807559013367);
      Complex complex10 = Complex.ZERO;
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-25.8195));
      complex0.getArgument();
      complex0.ONE.cos();
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(9.324622137237299E-90, 3.141592653589793);
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex1.I.multiply(complex0);
      Complex complex6 = complex0.divide(complex1);
      complex6.INF.acos();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.NaN.add((-25.8195));
      Complex complex9 = complex8.ZERO.subtract((-2697.41));
      complex1.pow(complex7);
      Complex.valueOf((-25.8195));
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex1.sinh();
      complex11.I.getArgument();
      Complex complex12 = complex5.negate();
      Complex complex13 = complex12.ZERO.cos();
      complex10.nthRoot(37);
      complex10.getArgument();
      complex9.hashCode();
      complex10.cosh();
      complex12.readResolve();
      complex6.equals(complex1);
      complex2.getField();
      Complex complex14 = Complex.ONE;
      complex14.asin();
      complex2.add(0.0);
      complex4.add(complex13);
      complex2.tanh();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex3.multiply((-2612));
      complex4.pow((-3.4631935816990754E-243));
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex5.tan();
      Object object0 = complex1.readResolve();
      Complex complex9 = Complex.NaN;
      complex7.equals(object0);
      Object object1 = complex3.readResolve();
      complex7.equals(object1);
      complex4.subtract(complex0);
      complex4.toString();
      Complex complex10 = complex7.add(complex8);
      complex1.cos();
      complex10.cosh();
      complex6.equals("(NaN, NaN)");
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.sin();
      complex5.tan();
      complex4.sqrt();
      complex0.subtract(complex3);
      complex2.hashCode();
      complex3.getReal();
      Complex complex6 = complex5.add(0.92354517354354);
      complex5.cosh();
      try { 
        complex6.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex0.I.subtract(complex1);
      complex0.getArgument();
      complex0.add(1.0);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.divide(complex2);
      complex2.sqrt1z();
      Complex complex4 = complex2.createComplex(1185.27, (-3006.275));
      Complex complex5 = complex2.subtract(1411.41765773);
      complex4.multiply(1185.27);
      complex5.toString();
      Complex complex6 = new Complex((-3006.275), 1411.41765773);
      complex6.createComplex(Double.POSITIVE_INFINITY, 3594.12797600478);
      complex1.acos();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.valueOf(0.5403023058681398, 6.283185307179586);
      complex4.reciprocal();
      Complex complex5 = Complex.valueOf(0.5403023058681398);
      Complex complex6 = complex5.cos();
      complex5.conjugate();
      Complex complex7 = complex2.subtract(0.5403023058681398);
      Complex.valueOf(6.283185307179586);
      complex3.isInfinite();
      Complex complex8 = complex0.createComplex(0.5403023058681398, 2.414213562373095);
      complex6.nthRoot(1);
      complex8.atan();
      complex7.add((-1067.064552623));
      Object object0 = new Object();
      Complex.valueOf((-1067.064552623));
      complex2.readResolve();
      Complex complex9 = Complex.I;
      Object object1 = new Object();
      complex9.equals(object1);
      complex6.multiply(4);
      complex1.tanh();
      complex0.log();
      complex5.sqrt1z();
      complex8.divide(complex6);
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex0.I.subtract(complex1);
      complex0.exp();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex3.reciprocal();
      complex3.cos();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex2.subtract(6.283185307179586);
      Complex complex7 = Complex.valueOf((-285.5046938304));
      Complex.valueOf(2.0);
      Complex complex8 = Complex.valueOf((-285.5046938304), 9.340518184791696);
      complex6.sinh();
      complex4.getArgument();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex3.cos();
      Complex complex11 = new Complex(37, 37);
      complex11.nthRoot(37);
      complex11.getArgument();
      complex5.hashCode();
      Complex complex12 = complex8.cosh();
      complex10.readResolve();
      complex7.equals(complex12);
      complex12.getField();
      complex1.asin();
      complex3.add((-285.5046938304));
      complex3.add(complex0);
      complex9.tanh();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1065.38306), (-1065.38306));
      Complex complex1 = Complex.valueOf((-1065.38306), (-1065.38306));
      Complex complex2 = complex1.atan();
      complex2.acos();
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ONE.log();
      complex6.negate();
      complex4.INF.subtract(complex5);
      Complex complex7 = complex4.multiply(1098);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex4.INF.pow((-1065.38306));
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.ZERO.reciprocal();
      Complex complex12 = complex7.tan();
      complex12.ONE.readResolve();
      Complex complex13 = Complex.valueOf((-1065.38306), (double) 1098);
      complex1.equals(complex13);
      complex4.equals(complex8);
      complex11.subtract(complex9);
      complex11.toString();
      complex12.add(complex3);
      complex7.cos();
      complex7.cosh();
      complex1.equals("(NaN, NaN)");
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(1266.4);
      complex0.NaN.multiply(1415);
      Complex complex2 = complex0.negate();
      complex1.ZERO.subtract(9.064369278425328);
      Complex complex3 = complex1.I.atan();
      complex3.multiply(0.0);
      complex1.divide(9.064369278425328);
      complex0.cosh();
      complex0.divide(complex2);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.pow(3006.275);
      Complex complex6 = Complex.valueOf(0.0);
      complex0.conjugate();
      complex2.readResolve();
      complex4.exp();
      complex3.nthRoot(770);
      complex5.cosh();
      complex4.isInfinite();
      complex3.readResolve();
      complex6.cosh();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1065.38306), (-1065.38306));
      Complex complex1 = Complex.valueOf((-1065.38306), (-1065.38306));
      Complex complex2 = complex1.atan();
      complex2.acos();
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ONE.log();
      complex6.negate();
      complex4.INF.subtract(complex5);
      Complex complex7 = complex4.multiply(1098);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex4.INF.pow((-1065.38306));
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex10.ZERO.reciprocal();
      Complex complex12 = complex7.tan();
      Complex complex13 = Complex.NaN;
      complex1.equals(complex13);
      complex4.equals(complex8);
      complex11.subtract(complex9);
      complex11.toString();
      complex12.add(complex3);
      complex7.cos();
      Complex complex14 = complex7.cosh();
      complex14.subtract((double) 1098);
      complex0.subtract(complex9);
      Complex complex15 = new Complex(2.510812179067931E-272);
      complex15.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-25.8195));
      complex0.getArgument();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(9.324622137237299E-90, 3.141592653589793);
      Complex complex4 = complex3.log();
      Complex complex5 = complex0.multiply(complex3);
      complex2.I.multiply(complex0);
      Complex complex6 = complex0.divide(complex2);
      complex6.INF.acos();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.NaN.add((-25.8195));
      Complex complex9 = complex8.ZERO.subtract((-2697.41));
      Complex complex10 = complex2.pow(complex7);
      Complex complex11 = complex2.reciprocal();
      complex5.abs();
      Complex complex12 = complex10.subtract((-2697.41));
      complex12.readResolve();
      Complex complex13 = complex11.acos();
      Complex complex14 = complex9.multiply(3.141592653589793);
      complex13.negate();
      complex1.getField();
      complex14.getArgument();
      complex0.isInfinite();
      complex12.log();
      complex9.multiply(complex2);
      complex1.multiply(complex13);
      complex13.multiply(complex8);
      complex4.hashCode();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply((-593));
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.NaN.sqrt1z();
      complex3.ZERO.getField();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex3.subtract(647.98);
      complex1.isInfinite();
      Complex complex8 = complex3.createComplex(383.405884625, (-2447.606730712607));
      List<Complex> list0 = complex2.nthRoot(1);
      complex6.atan();
      Complex complex9 = complex8.add(383.405884625);
      Object object0 = new Object();
      complex4.equals(list0);
      complex8.multiply(2147483483);
      complex6.tanh();
      complex9.log();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-25.8195));
      complex0.getArgument();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.exp();
      complex2.pow(complex1);
      Complex complex3 = complex0.reciprocal();
      complex0.cos();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex0.subtract((-3636.4));
      complex2.isInfinite();
      Complex complex6 = complex4.createComplex((-20.0), (-3636.4));
      complex3.nthRoot(1);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.atan();
      complex8.add(2.165163304600171E75);
      Object object0 = new Object();
      Complex complex9 = Complex.ZERO;
      Object object1 = complex9.readResolve();
      complex8.equals(object1);
      Complex complex10 = complex0.multiply((-2467));
      complex10.tanh();
      complex4.log();
      Complex complex11 = complex5.sqrt1z();
      complex11.ONE.subtract(complex0);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-25.8195));
      complex0.getArgument();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(9.324622137237299E-90, 3.141592653589793);
      complex3.log();
      complex0.multiply(complex3);
      Complex complex4 = complex2.I.multiply(complex0);
      Complex complex5 = complex0.divide(complex2);
      complex5.INF.acos();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex6.NaN.add((-25.8195));
      Complex complex8 = complex7.ZERO.subtract((-2697.41));
      complex2.pow(complex6);
      Complex complex9 = Complex.valueOf((-25.8195));
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex2.sinh();
      complex11.I.getArgument();
      Complex complex12 = complex4.negate();
      complex12.ZERO.cos();
      complex10.nthRoot(37);
      complex10.getArgument();
      complex8.hashCode();
      complex10.cosh();
      Complex complex13 = (Complex)complex1.readResolve();
      complex2.equals(complex13);
      complex8.getField();
      complex9.asin();
      complex10.add(3.141592653589793);
      complex2.add(complex7);
      complex5.tanh();
      complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.valueOf(0.17020416259765625, 3006.275);
      complex4.hashCode();
      Complex complex5 = complex0.divide(complex3);
      complex1.hashCode();
      complex3.acos();
      complex5.pow(complex3);
      Complex complex6 = complex0.cos();
      complex3.createComplex((-1946.471842291577), (-1946.471842291577));
      complex3.conjugate();
      complex5.atan();
      complex6.abs();
      Complex complex7 = complex2.tanh();
      complex6.reciprocal();
      Complex complex8 = Complex.valueOf(1.5430806348152437, 7.160277784358221E73);
      complex8.negate();
      Complex.valueOf(7.160277784358221E73, (-2716.561));
      complex0.tanh();
      complex4.nthRoot(1);
      complex6.cos();
      complex7.sqrt();
      Complex complex9 = Complex.ONE;
      complex9.subtract((-1946.471842291577));
      Complex.valueOf(1.5430806348152437);
      complex7.getField();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.I.divide(complex0);
      complex1.getArgument();
      Complex complex2 = complex0.add(10.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.valueOf(97.1, 10.0);
      complex2.hashCode();
      Complex complex5 = complex3.divide(complex0);
      complex4.hashCode();
      complex0.acos();
      complex2.pow(complex1);
      Complex complex6 = complex3.cos();
      complex5.createComplex(97.1, (-983.574192));
      complex1.conjugate();
      complex1.atan();
      complex6.abs();
      complex3.tanh();
      Complex complex7 = new Complex((-983.574192), 0.7853981633974483);
      Complex complex8 = complex6.negate();
      Complex.valueOf(Double.NaN, 97.1);
      complex8.tanh();
      Complex complex9 = Complex.ZERO;
      complex9.isInfinite();
      int int0 = (-3861);
      try { 
        complex4.nthRoot((-3861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,861
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3006.275, 3006.275);
      Complex complex1 = complex0.add(1266.4);
      Complex complex2 = complex1.multiply(1415);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.valueOf(1266.4);
      complex2.atan();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.multiply(2508.97683992);
      Complex complex7 = complex5.divide(0.8729778189580061);
      complex1.cosh();
      Complex complex8 = complex2.divide(complex0);
      complex4.subtract(complex6);
      complex7.conjugate();
      complex4.readResolve();
      Complex complex9 = complex8.exp();
      complex9.nthRoot(1415);
      complex3.cosh();
      complex4.isInfinite();
      complex1.divide((-2800.313429032032));
      Complex complex10 = Complex.NaN;
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex1.hashCode();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex1.atan();
      complex8.abs();
      complex7.tanh();
      complex7.reciprocal();
      complex5.negate();
      Complex.valueOf(Double.NaN, 2833.09);
      Complex complex9 = complex2.tanh();
      complex4.isInfinite();
      complex6.nthRoot(1);
      complex4.cos();
      complex8.sqrt();
      complex1.subtract(71686.32828503512);
      Complex.valueOf(71686.32828503512);
      Complex complex10 = Complex.ONE;
      complex10.getField();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-25.8195));
      complex0.getArgument();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(9.324622137237299E-90, 3.141592653589793);
      complex3.log();
      complex0.multiply(complex3);
      Complex complex4 = complex2.I.multiply(complex0);
      Complex complex5 = complex0.divide(complex2);
      complex5.INF.acos();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex6.NaN.add((-25.8195));
      Complex complex8 = complex7.ZERO.subtract((-2697.41));
      Complex complex9 = complex2.pow(complex6);
      Complex complex10 = complex4.INF.exp();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex2.sinh();
      complex12.I.getArgument();
      Complex complex13 = complex4.negate();
      Complex complex14 = complex13.ZERO.cos();
      complex11.nthRoot(37);
      complex11.getArgument();
      complex8.hashCode();
      Complex complex15 = complex11.cosh();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      complex8.getField();
      complex10.asin();
      complex11.add(3.141592653589793);
      complex2.add(complex7);
      complex5.tanh();
      complex15.subtract(complex14);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex0.NaN.sqrt();
      complex2.ONE.multiply((-640));
      complex2.ZERO.log();
      Complex complex3 = complex2.subtract(2.0);
      Complex complex4 = complex3.ZERO.sinh();
      complex2.readResolve();
      complex1.ZERO.toString();
      complex0.ZERO.cos();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.divide(1313.965396934);
      complex5.sin();
      complex5.getImaginary();
      Complex complex7 = complex6.ONE.tanh();
      complex1.multiply((-2351.26));
      complex2.sinh();
      complex4.pow(complex6);
      complex4.multiply((-640));
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.I.divide(complex0);
      complex1.I.exp();
      Complex complex2 = complex0.pow(complex1);
      complex2.reciprocal();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex0.conjugate();
      complex4.subtract((-20.0));
      complex1.isInfinite();
      complex4.ONE.createComplex(0.0, 0.0);
      complex3.I.nthRoot(1);
      complex0.ONE.atan();
      Complex complex5 = complex4.add(1.537490712803659E-166);
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex6 = complex4.multiply(1);
      complex5.tanh();
      complex6.log();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-232.87248994077));
      Complex complex1 = new Complex((-232.87248994077));
      Complex complex2 = complex0.ZERO.add(complex1);
      complex0.toString();
      Complex complex3 = Complex.valueOf((-2757.0845896));
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.multiply(complex3);
      complex2.toString();
      complex2.log();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.conjugate();
      complex4.exp();
      Complex complex8 = complex4.conjugate();
      complex5.sqrt1z();
      complex8.sin();
      Complex complex9 = complex5.cosh();
      complex7.equals(complex6);
      complex9.multiply(938.6);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex5.INF.sinh();
      complex6.ZERO.reciprocal();
      complex4.ZERO.tanh();
      Complex complex7 = complex1.ONE.divide(complex3);
      complex4.NaN.sqrt1z();
      complex1.toString();
      Complex complex8 = complex0.exp();
      complex8.ZERO.add(0.0);
      Complex complex9 = Complex.I;
      complex9.ONE.add(6.283185307179586);
      complex8.I.subtract(complex9);
      Complex complex10 = complex2.exp();
      complex10.NaN.reciprocal();
      Complex complex11 = complex3.sinh();
      complex11.ONE.getField();
      Complex complex12 = complex11.sqrt1z();
      complex7.pow(2923.16191);
      complex12.isInfinite();
      complex7.multiply(37);
      Complex complex13 = complex12.add(1.0);
      complex13.sin();
      complex13.getArgument();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.NaN.asin();
      complex0.toString();
      Complex complex2 = complex0.atan();
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = Complex.valueOf(0.35060185194015503);
      Complex complex5 = complex0.I.sqrt1z();
      Complex complex6 = complex3.pow(complex4);
      Complex complex7 = complex0.NaN.createComplex(0.0, 1746.036);
      complex7.I.log();
      Complex complex8 = complex5.I.log();
      Complex complex9 = complex8.NaN.log();
      complex0.ONE.readResolve();
      complex0.getField();
      Complex complex10 = complex1.subtract(complex0);
      complex10.ZERO.subtract(1746.036);
      Complex complex11 = complex6.sqrt();
      complex3.I.toString();
      complex3.INF.log();
      Complex complex12 = complex6.sinh();
      complex12.NaN.conjugate();
      Complex complex13 = complex6.divide(complex5);
      complex6.ONE.multiply(complex10);
      complex11.getArgument();
      complex13.pow(complex4);
      complex4.getArgument();
      complex2.atan();
      complex4.getArgument();
      complex2.tan();
      complex9.add((-1.0));
      complex13.multiply((-1501));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      complex1.ONE.subtract(complex0);
      complex1.ZERO.tanh();
      complex0.isNaN();
      Complex complex2 = complex0.I.multiply((double) 1202);
      Complex complex3 = complex0.multiply(1202);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.NaN.createComplex(1202, 589.297538);
      complex5.I.readResolve();
      Complex complex6 = complex0.INF.cos();
      complex3.nthRoot(896);
      complex0.toString();
      Complex complex7 = complex2.reciprocal();
      complex7.NaN.atan();
      Complex.valueOf(945.23);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex6.subtract(complex8);
      complex0.add((-3067.473));
      complex9.reciprocal();
      complex9.getArgument();
      complex5.reciprocal();
      complex2.multiply((-3092));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply((-593));
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.NaN.sqrt1z();
      complex3.ZERO.getField();
      complex1.ZERO.hashCode();
      Complex complex4 = complex0.atan();
      complex4.negate();
      complex0.I.readResolve();
      complex0.getImaginary();
      Complex complex5 = complex1.INF.conjugate();
      complex2.divide((-1638.9984461));
      Complex complex6 = complex0.multiply(complex2);
      complex6.acos();
      double double0 = (-663.98365);
      Complex complex7 = complex2.INF.reciprocal();
      complex7.abs();
      Complex complex8 = complex5.ONE.subtract(0.0);
      try { 
        complex8.nthRoot((-593));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -593
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 1.6633478556884994E190);
      complex1.I.subtract(1.6633478556884994E190);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.INF.conjugate();
      complex4.ONE.readResolve();
      complex2.acos();
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex6.createComplex(Double.POSITIVE_INFINITY, 1.6633478556884994E190);
      complex9.NaN.hashCode();
      Complex complex10 = complex2.ONE.cosh();
      Complex complex11 = complex6.sqrt();
      complex11.reciprocal();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, 716.2760293);
      complex12.INF.readResolve();
      complex8.exp();
      Complex.valueOf(0.0);
      complex3.readResolve();
      complex8.cosh();
      Complex complex13 = Complex.valueOf(2.037139607241041E305, 1885.6879482218617);
      complex5.subtract(0.0);
      Object object0 = new Object();
      complex13.equals(object0);
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.subtract(complex1);
      complex0.getArgument();
      Complex complex3 = complex0.add(1.0);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.INF.hashCode();
      complex0.I.divide(complex5);
      complex5.ONE.hashCode();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex1.I.pow(complex0);
      Complex complex8 = complex1.INF.cos();
      complex7.INF.createComplex(1.0, 1.0);
      complex6.ZERO.conjugate();
      complex6.NaN.atan();
      complex0.abs();
      Complex complex9 = complex8.ONE.tanh();
      complex9.ONE.reciprocal();
      complex9.ZERO.negate();
      Complex complex10 = Complex.valueOf(0.0, 7.160277784358221E73);
      complex10.tanh();
      complex4.isInfinite();
      complex10.nthRoot(1);
      complex8.cos();
      Complex complex11 = complex2.sqrt();
      complex8.subtract(0.0);
      Complex.valueOf(1.0);
      complex11.getField();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.430029236134205E-9, 3.430029236134205E-9);
      complex0.ZERO.hashCode();
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      complex0.toString();
      complex0.toString();
      complex0.INF.add((-314.6165));
      Complex complex1 = Complex.valueOf(0.0, 1546.75657706);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.cos();
      complex2.ZERO.toString();
      Complex complex4 = complex0.sqrt1z();
      complex4.INF.cosh();
      Complex.valueOf(0.0);
      Complex complex5 = complex0.add(complex1);
      complex0.I.multiply(complex1);
      Complex complex6 = complex5.cosh();
      Complex complex7 = Complex.INF;
      complex7.NaN.nthRoot(24);
      Complex complex8 = complex0.add(complex7);
      complex8.I.cos();
      complex5.getImaginary();
      Complex complex9 = complex1.divide(complex6);
      complex3.asin();
      complex8.subtract(complex9);
      complex6.abs();
      complex9.isInfinite();
      Complex.valueOf(1546.75657706);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3006.275, 3006.275);
      Complex complex1 = complex0.add(1266.4);
      complex0.NaN.multiply(1415);
      Complex complex2 = complex0.negate();
      complex1.ZERO.subtract(0.0);
      Complex complex3 = complex1.I.atan();
      complex3.multiply(0.0);
      complex1.divide(0.0);
      complex0.cosh();
      complex1.divide(complex2);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.ZERO.pow(0.21687394380569458);
      Complex complex6 = complex1.subtract(complex4);
      complex4.conjugate();
      complex5.INF.readResolve();
      complex0.exp();
      complex2.nthRoot(2468);
      complex6.cosh();
      complex5.isInfinite();
      complex0.divide((-179.4534));
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.cosh();
      Complex.valueOf(0.5734702348709106, 0.5734702348709106);
      complex2.ZERO.add(2830.33);
      Complex complex3 = complex1.sin();
      complex3.ZERO.conjugate();
      complex0.sqrt1z();
      complex1.subtract(complex0);
      Complex complex4 = Complex.valueOf(2830.33, 1956.0362);
      complex4.getReal();
      complex2.getReal();
      complex0.sqrt();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-255.080333887));
      Complex complex1 = complex0.ZERO.sinh();
      complex1.ZERO.nthRoot(1);
      Complex complex2 = complex0.createComplex(2009.5146051232684, (-255.080333887));
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex1.cos();
      complex3.toString();
      complex1.getField();
      complex2.NaN.divide((-3302.74354151995));
      Complex complex5 = complex2.sin();
      complex1.cosh();
      Complex.valueOf((double) 1);
      complex5.pow(complex3);
      Complex complex6 = complex4.conjugate();
      complex6.pow((-356.284));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3271.58), 744.415777);
      complex0.multiply(1194);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1065.38306), (-1065.38306));
      Complex complex1 = Complex.valueOf((-1065.38306), (-1065.38306));
      Complex complex2 = complex1.atan();
      complex2.acos();
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ONE.log();
      complex6.negate();
      complex4.INF.subtract(complex5);
      Complex complex7 = complex4.multiply(1098);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex4.INF.pow((-1065.38306));
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex10.ZERO.reciprocal();
      Complex complex12 = complex7.tan();
      complex12.ONE.readResolve();
      Complex complex13 = Complex.NaN;
      complex1.equals(complex13);
      complex4.equals(complex8);
      complex11.subtract(complex9);
      complex11.toString();
      complex12.add(complex3);
      complex7.cos();
      complex7.cosh();
      complex1.equals("(NaN, NaN)");
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(689.033, 689.033);
      complex0.getArgument();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.reciprocal();
      complex2.ZERO.nthRoot(2158);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.NaN.pow(0.0);
      complex4.ZERO.hashCode();
      Complex complex5 = complex2.I.reciprocal();
      Complex complex6 = Complex.valueOf(689.033, 0.7853981633974483);
      complex2.getReal();
      complex2.toString();
      Complex complex7 = Complex.valueOf(689.033);
      Complex complex8 = complex7.ZERO.createComplex(0.7853981633974483, 0.0);
      Complex complex9 = complex3.reciprocal();
      complex4.nthRoot(2158);
      Complex complex10 = complex5.ONE.pow(complex6);
      complex5.getImaginary();
      complex9.I.getArgument();
      complex5.getReal();
      complex6.NaN.getField();
      complex2.abs();
      Complex complex11 = complex9.add(complex1);
      complex6.subtract(complex2);
      complex4.hashCode();
      complex4.subtract(complex8);
      complex1.nthRoot(147);
      complex6.pow(complex11);
      complex10.tanh();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = (-9.598330731102836E-8);
      Complex complex0 = new Complex((-9.598330731102836E-8), 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      double double1 = 0.0;
      Complex.valueOf((-9.598330731102836E-8), 0.0);
      complex0.ONE.tan();
      Complex complex3 = complex0.NaN.multiply(complex2);
      complex3.INF.sqrt();
      Complex complex4 = complex2.INF.tanh();
      double double2 = Double.POSITIVE_INFINITY;
      Complex complex5 = complex4.I.pow(Double.POSITIVE_INFINITY);
      complex5.NaN.exp();
      complex2.pow((-9.598330731102836E-8));
      try { 
        complex1.nthRoot((-310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -310
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex0.INF.divide(complex1);
      complex0.reciprocal();
      complex0.getReal();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.add(complex3);
      complex4.INF.reciprocal();
      complex4.ONE.multiply(0.0);
      complex2.toString();
      Complex complex5 = complex1.createComplex(0.0, 0.0);
      complex5.INF.acos();
      complex1.exp();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.multiply(35.77823911766916);
      complex0.isInfinite();
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.exp();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.8218180377739526E192);
      Complex complex1 = complex0.cos();
      complex0.NaN.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.ONE.add(complex1);
      complex4.ZERO.sqrt1z();
      Complex complex5 = complex0.atan();
      complex2.ZERO.abs();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.ONE.reciprocal();
      complex2.I.multiply(Double.NaN);
      complex9.ZERO.tan();
      Complex complex10 = complex1.NaN.divide((-939.363738));
      complex10.getArgument();
      Complex complex11 = complex9.multiply(3.8218180377739526E192);
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex12.I.atan();
      complex13.ZERO.asin();
      Complex complex14 = complex12.tan();
      complex14.NaN.sinh();
      complex2.ZERO.multiply(Double.NaN);
      Complex complex15 = complex1.sin();
      complex15.log();
      Complex complex16 = complex11.sinh();
      complex7.readResolve();
      complex12.isNaN();
      complex14.getImaginary();
      complex5.readResolve();
      complex16.cos();
      complex10.hashCode();
      complex10.getArgument();
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.abs();
      Complex complex2 = complex0.I.add(Double.POSITIVE_INFINITY);
      complex2.NaN.atan();
      complex2.I.cos();
      complex1.NaN.negate();
      complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.tanh();
      complex0.toString();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.negate();
      complex4.acos();
      complex3.getField();
      complex5.equals(complex3);
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.I.negate();
      complex0.hashCode();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex4.NaN.pow(0.0);
      Complex complex6 = complex5.NaN.sqrt();
      complex5.INF.sinh();
      Complex complex7 = complex3.ONE.negate();
      complex4.I.tan();
      complex2.I.hashCode();
      complex1.toString();
      complex2.abs();
      Complex complex8 = complex0.multiply(637);
      complex8.tan();
      Complex.valueOf(Double.NaN, 20.0);
      complex1.createComplex(Double.NaN, 2.4295239448547363);
      complex5.ONE.toString();
      complex3.sqrt1z();
      Complex complex9 = complex2.asin();
      Complex complex10 = new Complex(2.4295239448547363);
      Complex complex11 = complex9.subtract(complex10);
      Complex complex12 = complex7.atan();
      complex11.INF.sqrt1z();
      complex6.createComplex(Double.NaN, Double.NaN);
      Complex.valueOf(7.456824943331887E-9);
      complex11.asin();
      complex12.sin();
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-820.995933608442));
      Complex complex1 = Complex.I;
      complex0.ZERO.subtract((-820.995933608442));
      complex1.sin();
      complex0.I.divide(complex1);
      Complex complex2 = complex0.sqrt();
      complex2.ZERO.toString();
      Complex complex3 = Complex.valueOf((-820.995933608442));
      complex3.getReal();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.INF.tan();
      complex3.atan();
      Complex complex6 = complex1.multiply(17);
      Complex complex7 = complex3.negate();
      complex7.NaN.tan();
      complex6.getImaginary();
      complex5.add(4714.21018654747);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.tanh();
      complex1.ONE.tanh();
      complex2.ONE.getField();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt1z();
      complex0.ONE.sinh();
      complex0.ZERO.subtract(0.0);
      complex0.ZERO.hashCode();
      complex0.tanh();
      Complex complex1 = Complex.INF;
      complex1.ONE.asin();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.multiply(complex1);
      complex2.ONE.multiply(781.45619);
      Complex.valueOf(1.0187277793884277, 1779.6778861);
      complex3.I.createComplex(1779.6778861, 0.0);
      try { 
        complex2.nthRoot((-2027));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,027
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.nthRoot(1);
      complex0.abs();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      complex1.NaN.conjugate();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex3.NaN.sqrt1z();
      Complex complex4 = complex0.ONE.createComplex(0.17020416259765625, 0.0);
      complex0.NaN.subtract(0.17020416259765625);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex0.I.tan();
      complex6.I.sqrt();
      complex4.INF.subtract(complex0);
      complex4.INF.hashCode();
      complex0.getReal();
      complex5.ONE.add(0.17020416259765625);
      Complex complex7 = complex0.cosh();
      complex5.multiply(complex7);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-1644.7), (-1644.7));
      Complex complex1 = Complex.I;
      complex0.ONE.nthRoot(2309);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.ZERO.multiply(2309);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.I.pow((double) 2309);
      complex4.INF.readResolve();
      complex4.multiply(complex1);
      complex2.conjugate();
      complex2.cosh();
      complex5.sinh();
      complex1.getImaginary();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.divide(complex1);
      complex3.INF.divide(complex1);
      Complex complex4 = complex1.ZERO.divide(2080.45143147);
      complex0.I.divide(complex2);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.INF.createComplex(2080.45143147, 665.3);
      Complex complex7 = complex1.multiply(1410);
      Complex complex8 = complex7.I.subtract(2080.45143147);
      complex1.isNaN();
      complex7.NaN.add(complex8);
      complex4.abs();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex8.divide(complex7);
      complex10.hashCode();
      complex10.hashCode();
      complex6.cos();
      Complex complex11 = complex1.reciprocal();
      complex11.NaN.getArgument();
      Complex complex12 = complex11.NaN.pow(complex6);
      Complex complex13 = complex6.add(complex11);
      complex13.ONE.multiply(complex1);
      Complex complex14 = complex13.ZERO.add(Double.NaN);
      Complex complex15 = complex5.multiply(5678.8581382433);
      complex15.multiply(1410);
      complex14.multiply((-4294));
      Complex complex16 = complex14.createComplex((-2287.3866), (-2287.3866));
      complex12.add(complex15);
      complex9.asin();
      complex16.exp();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.ZERO.sin();
      complex1.ZERO.tanh();
      Complex complex2 = complex0.NaN.createComplex((-0.7), (-0.7));
      Complex complex3 = complex2.multiply((-264.0983887));
      complex0.getReal();
      Complex complex4 = complex0.subtract(1.0);
      complex3.readResolve();
      Complex complex5 = complex4.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.I.multiply(complex3);
      Complex complex7 = complex3.sin();
      Complex complex8 = complex4.cos();
      complex7.exp();
      complex8.tanh();
      complex5.toString();
      Complex complex9 = Complex.INF;
      complex2.equals(complex9);
      complex6.divide((-2962.5));
      complex9.add(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      complex1.INF.hashCode();
      Complex complex2 = complex0.NaN.createComplex(8.446532344375812E-242, 8.446532344375812E-242);
      complex0.acos();
      complex1.I.multiply(1);
      Complex complex3 = complex0.tanh();
      complex3.sin();
      complex1.getField();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.NaN.subtract((-1734.062088732));
      complex3.ZERO.readResolve();
      complex3.divide(1.0);
      Complex complex4 = complex0.conjugate();
      complex2.ONE.subtract(complex0);
      complex0.ONE.toString();
      Complex complex5 = complex4.INF.sin();
      complex5.INF.toString();
      complex5.ZERO.pow(complex4);
      Complex complex6 = complex4.ONE.cosh();
      complex6.I.tan();
      complex4.INF.negate();
      complex2.isInfinite();
      Complex complex7 = complex4.sin();
      Complex complex8 = new Complex(1.5395018670011342E-9);
      Complex complex9 = complex0.divide(complex8);
      complex9.NaN.readResolve();
      complex7.hashCode();
      Complex.valueOf(1.5395018670011342E-9, 278.58485694);
      complex1.log();
      complex7.cosh();
      complex0.negate();
      complex8.acos();
      complex3.toString();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals((Object) null);
      assertFalse(boolean0);
      
      Complex complex1 = complex0.cosh();
      complex0.isNaN();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex3.NaN.reciprocal();
      Complex complex7 = complex2.ZERO.acos();
      complex7.INF.reciprocal();
      List<Complex> list0 = complex0.nthRoot(1210);
      assertEquals(1210, list0.size());
      
      Complex complex8 = complex3.multiply(0.0);
      complex4.getReal();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex10.NaN.multiply((-1608));
      assertSame(complex11, complex6);
      
      String string0 = complex5.toString();
      assertEquals("(1.5707963267948966, -1.0)", string0);
      
      Complex complex12 = complex10.cos();
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      complex4.hashCode();
      complex1.getField();
      Complex complex13 = complex3.subtract(0.0);
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      Complex complex14 = complex3.sin();
      assertTrue(complex14.equals((Object)complex8));
      
      Complex complex15 = complex9.subtract(complex1);
      Complex complex16 = complex15.tanh();
      assertEquals(0.06927443451087252, complex16.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals((-1.0640273342616895), complex16.getReal(), 0.01);
      
      double double0 = complex4.getReal();
      assertEquals(0.7853981633974483, double0, 0.01);
      
      Object object0 = complex7.readResolve();
      assertFalse(object0.equals((Object)complex9));
  }
}
