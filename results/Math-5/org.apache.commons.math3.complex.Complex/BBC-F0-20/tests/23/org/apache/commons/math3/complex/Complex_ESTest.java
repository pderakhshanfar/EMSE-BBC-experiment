/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:19:13 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1, (-6.895681935288532E-38));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.createComplex(1, Double.POSITIVE_INFINITY);
      complex0.multiply(complex2);
      complex0.divide(complex2);
      complex1.subtract((double) 1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.7593452284747873E-8, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = new Complex(0.19062360414733082, (-6.895681935288532E-38));
      Complex complex5 = complex4.multiply((-1742.302519));
      complex1.tan();
      Complex complex6 = Complex.I;
      complex6.getArgument();
      complex1.sin();
      Complex complex7 = complex6.multiply(complex2);
      complex3.divide(complex5);
      complex2.multiply(complex7);
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.INF;
      complex9.multiply((-1669));
      Complex complex10 = Complex.NaN;
      complex10.add(complex9);
      complex7.readResolve();
      try { 
        complex6.nthRoot((-1669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,669
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-677.99), 20.0);
      complex0.readResolve();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.tan();
      complex3.INF.multiply(1907);
      complex0.INF.subtract(complex2);
      complex1.I.toString();
      Complex complex4 = complex3.NaN.divide(896.982601446);
      Complex complex5 = complex1.add(20.0);
      complex0.INF.conjugate();
      complex5.subtract(complex2);
      complex0.getField();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.NaN.reciprocal();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex0.multiply(complex5);
      complex9.ONE.add(896.982601446);
      complex9.subtract(complex4);
      complex8.NaN.subtract(complex7);
      Complex complex10 = complex6.multiply((-1131));
      complex8.multiply(20.0);
      complex3.exp();
      complex4.add(896.982601446);
      complex3.cosh();
      complex10.divide(2740.6771485);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(1100);
      Complex complex3 = complex2.INF.subtract(complex0);
      complex3.I.add((double) 1100);
      complex2.divide(complex0);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex4.ZERO.add(complex1);
      complex5.INF.cos();
      complex3.multiply((-1759));
      complex1.reciprocal();
      Complex complex6 = Complex.ONE;
      complex3.ONE.conjugate();
      Complex complex7 = complex1.divide(complex6);
      Complex complex8 = complex7.negate();
      complex0.ZERO.subtract((double) (-1759));
      complex0.ONE.cos();
      Complex complex9 = complex8.subtract(complex6);
      complex9.ONE.cosh();
      Complex complex10 = Complex.valueOf((-4.7208848667217906E221));
      complex0.pow(complex9);
      complex4.subtract((double) (-1759));
      complex6.log();
      complex0.sqrt1z();
      complex7.cos();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Object object0 = new Object();
      Complex complex2 = complex0.sqrt();
      Complex.valueOf((-20.0));
      complex2.log();
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex((-20.0), (-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      complex0.sqrt();
      Complex complex1 = complex0.sin();
      complex0.log();
      complex0.tan();
      complex0.add(Double.NaN);
      complex1.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.I.reciprocal();
      complex3.I.conjugate();
      complex4.getReal();
      Complex complex5 = complex0.conjugate();
      complex2.toString();
      complex5.sqrt();
      Complex complex6 = Complex.valueOf((-1263.0));
      complex6.isInfinite();
      Complex.valueOf(2.0, 2.0);
      complex1.add(complex0);
      Complex complex7 = complex3.createComplex(2.0, 0.0);
      complex4.log();
      complex6.cosh();
      complex3.getArgument();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex3.multiply((-1897.62433552094));
      Complex.valueOf(2.0, (-1897.62433552094));
      Complex complex10 = Complex.valueOf(2.0, (-24335.0));
      complex10.tanh();
      Complex complex11 = new Complex(0.0, Double.NaN);
      complex5.subtract(complex9);
      complex0.atan();
      complex7.sin();
      complex9.add(0.6471850872039795);
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1661.6883, 1661.6883);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex1.ONE.tanh();
      int int0 = 2146320323;
      // Undeclared exception!
      complex1.nthRoot(2146320323);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1661.6883, 1661.6883);
      Complex complex1 = complex0.cos();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.332900939354667E-277);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.reciprocal();
      complex3.add(1866.07077378134);
      Complex complex4 = Complex.valueOf(5.332900939354667E-277);
      Complex complex5 = complex2.negate();
      complex5.INF.createComplex(2490.24, 1866.07077378134);
      Complex complex6 = complex4.NaN.sin();
      complex0.sqrt();
      complex3.toString();
      Complex complex7 = complex4.pow(5.332900939354667E-277);
      Complex complex8 = complex7.add(complex3);
      Complex complex9 = complex8.asin();
      complex6.sinh();
      Complex complex10 = complex7.pow(1661.6883);
      complex10.NaN.nthRoot(17);
      Complex.valueOf(5.332900939354667E-277);
      complex5.createComplex(1866.07077378134, 5.332900939354667E-277);
      complex1.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1205.98735642481), (-1205.98735642481));
      complex0.nthRoot(1);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sinh();
      complex1.acos();
      Complex.valueOf((-1205.98735642481), (-3538.9856));
      complex1.divide(complex0);
      complex2.multiply(0.9999996579874446);
      Complex.valueOf((-20.0), (-8283623.019070671));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex1.NaN.hashCode();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      complex3.ZERO.reciprocal();
      Object object0 = new Object();
      complex2.equals(object0);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 8.187871486648885E-8);
      Complex complex1 = new Complex((-1.1380711874576983), 7.097454751809522E-192);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.log();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex6 = complex1.acos();
      Complex complex7 = complex0.multiply(2315.074668);
      complex2.tan();
      complex2.getArgument();
      complex2.multiply(8.187871486648885E-8);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex1.acos();
      complex5.getArgument();
      complex7.multiply(3.141592581644632);
      complex8.pow(0.0);
      complex4.readResolve();
      Complex complex10 = Complex.valueOf(7.097454751809522E-192, 3.141592581644632);
      complex9.ZERO.multiply(complex10);
      complex6.divide(5040.1614927);
      Complex complex11 = Complex.INF;
      complex3.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.multiply((-527));
      Complex complex4 = Complex.valueOf((double) (-527), (double) (-527));
      Complex complex5 = complex4.tan();
      complex2.getArgument();
      Complex complex6 = complex1.multiply((-395.797889));
      Complex complex7 = complex5.tan();
      complex7.getArgument();
      Complex complex8 = complex7.multiply((double) (-527));
      complex6.pow((-2492.237));
      complex8.readResolve();
      Complex complex9 = Complex.INF;
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 8.187871486648885E-8);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex(8.187871486648885E-8);
      complex2.add(complex3);
      Complex complex4 = complex1.add(798.57419512142);
      Complex complex5 = complex2.log();
      complex5.ONE.subtract(complex4);
      Complex complex6 = new Complex(0.0, 798.57419512142);
      complex4.tan();
      Complex.valueOf(0.0);
      complex5.readResolve();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(20.0);
      complex0.ONE.getArgument();
      complex0.INF.nthRoot(2855);
      complex0.abs();
      complex0.getReal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.ONE.getArgument();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf((-20.0));
      complex0.equals(complex3);
      Complex complex4 = complex2.ONE.sinh();
      Complex complex5 = complex1.multiply(0.0);
      complex5.ZERO.reciprocal();
      Complex.valueOf(2.218265110516721E156, (-570.86));
      Complex complex6 = complex3.subtract(complex2);
      complex6.toString();
      complex4.multiply(complex0);
      Complex complex7 = complex5.exp();
      Complex complex8 = complex5.ONE.add(0.0);
      complex8.ZERO.sin();
      Complex complex9 = complex7.ONE.exp();
      complex3.sinh();
      complex0.sinh();
      complex0.ZERO.abs();
      complex7.asin();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex10.conjugate();
      try { 
        complex11.I.nthRoot((-1159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,159
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5839.923417612);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 8.187871486648885E-8);
      Complex complex1 = new Complex((-20.0), 2559.1);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf(2559.1, 0.7237368419565787);
      Complex complex4 = complex1.conjugate();
      complex2.pow(20201.22321753826);
      Complex complex5 = complex1.log();
      complex4.exp();
      complex3.pow(0.3872397999813382);
      complex5.sin();
      Complex complex6 = complex5.tanh();
      complex6.nthRoot(1953);
      complex4.pow(1794.76);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3.8132522349698985));
      complex0.tan();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.exp();
      complex1.readResolve();
      Complex complex3 = complex0.cosh();
      complex2.hashCode();
      complex1.isNaN();
      Complex complex4 = complex3.conjugate();
      complex4.asin();
      Complex complex5 = complex0.tanh();
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex.valueOf(0.0);
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 8.187871486648885E-8);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex(8.187871486648885E-8);
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex1.add(798.57419512142);
      Complex complex6 = complex2.log();
      Complex complex7 = Complex.valueOf(798.57419512142, (-6.895681935288532E-38));
      Complex complex8 = complex5.acos();
      Complex complex9 = complex4.pow(complex2);
      Complex complex10 = complex8.multiply((-2738.3223573));
      Complex complex11 = complex8.tan();
      complex6.getArgument();
      complex5.multiply(0.0);
      complex3.tan();
      complex9.getArgument();
      complex7.multiply(0.0);
      complex2.pow(1.8792247772216797);
      complex11.readResolve();
      Complex complex12 = Complex.INF;
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.6688833714665126));
      Complex complex1 = Complex.ONE;
      complex1.NaN.hashCode();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.ZERO.add(complex0);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex3.ZERO.reciprocal();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.I.log();
      complex1.atan();
      complex5.toString();
      Complex complex6 = complex2.add(complex3);
      complex2.sin();
      complex6.sin();
      complex6.asin();
      complex1.nthRoot(379);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 8.187871486648885E-8);
      Complex complex1 = Complex.ONE;
      complex1.NaN.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.ZERO.add(complex0);
      Complex complex3 = complex1.add((-2738.3223573));
      Complex complex4 = complex0.I.log();
      Complex complex5 = complex3.exp();
      complex3.pow(8.187871486648885E-8);
      Complex complex6 = Complex.NaN;
      complex6.sin();
      complex3.tanh();
      complex1.ZERO.sqrt1z();
      complex4.nthRoot(1953);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.subtract(1617.73134250736);
      Complex complex9 = complex5.subtract(0.4932899475097656);
      complex1.exp();
      Complex complex10 = complex9.reciprocal();
      complex10.pow(complex5);
      Complex complex11 = new Complex(799.57419512142);
      complex11.cos();
      complex8.getImaginary();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(2356.1872050118322);
      complex0.reciprocal();
      Complex complex1 = Complex.valueOf(2356.1872050118322, 2356.1872050118322);
      complex1.log();
      Complex complex2 = complex0.atan();
      complex2.toString();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 8.187871486648885E-8);
      Complex complex1 = Complex.ONE;
      complex1.NaN.hashCode();
      Complex complex2 = Complex.ONE;
      complex2.ZERO.add(complex0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 5166.032713);
      complex3.atan();
      Complex complex4 = complex1.asin();
      complex4.negate();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(955.270755, 955.270755);
      Complex complex1 = complex0.multiply((-195.41407));
      Complex complex2 = complex1.divide(902.23135760778);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.valueOf((-2738.825558845378), 902.23135760778);
      Complex complex5 = complex4.log();
      complex2.atan();
      Complex.valueOf((-195.41407), 0.0014892406526607032);
      complex4.toString();
      Complex complex6 = Complex.ZERO;
      complex2.add(complex6);
      complex5.sin();
      complex5.sin();
      complex3.asin();
      complex3.subtract(940.2491834);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.INF;
      complex2.getArgument();
      complex0.abs();
      Complex complex3 = new Complex(0.0, (-20.0));
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.add(0.0);
      complex5.log();
      Complex.valueOf(0.7853981633974483, 1366.061418388282);
      Complex complex6 = complex3.acos();
      Complex complex7 = new Complex((-1203.913502384995));
      Complex complex8 = complex7.pow(complex1);
      Complex complex9 = complex4.multiply(1366.061418388282);
      Complex complex10 = Complex.ONE;
      complex8.getArgument();
      complex2.multiply(798.57419512142);
      complex6.pow((-2066.50900444));
      Complex.valueOf(2.116316283183901E-290);
      complex1.readResolve();
      Complex complex11 = Complex.ZERO;
      complex1.log();
      complex4.divide(complex9);
      complex10.subtract(1070.06879245);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      complex2.getArgument();
      complex1.multiply(Double.NaN);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.pow((-482.1546400233826));
      complex2.log();
      complex2.divide(complex4);
      complex0.sinh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.7613641572445654E170);
      Complex complex1 = complex0.acos();
      complex1.I.acos();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.INF;
      complex2.getArgument();
      complex0.abs();
      Complex complex3 = new Complex(3349.4008223604583, 0.7853981633974483);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.valueOf(2321.895821995, (-20.0));
      complex5.conjugate();
      Complex complex7 = complex3.pow((-4294.55804221));
      Complex complex8 = complex5.log();
      Complex complex9 = complex6.exp();
      complex8.pow(2.0023789405822754);
      complex8.sin();
      complex9.tanh();
      complex1.nthRoot(1953);
      Complex complex10 = complex5.pow((-4294.55804221));
      complex7.subtract((-3562.0));
      complex3.subtract(3349.4008223604583);
      complex10.exp();
      complex1.reciprocal();
      complex1.pow(complex6);
      complex10.cos();
      complex2.getImaginary();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-525.3919), (-525.3919));
      Complex complex1 = complex0.pow((-525.3919));
      Complex.valueOf(4103.0);
      complex0.multiply(complex1);
      Complex complex2 = complex1.pow((-525.3919));
      complex2.ONE.negate();
      complex2.ONE.asin();
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      complex3.INF.reciprocal();
      Complex complex4 = complex3.multiply(1421);
      Complex complex5 = Complex.valueOf(0.0, (-1120.8264));
      Complex complex6 = complex4.I.add(complex5);
      complex6.toString();
      complex4.I.getField();
      complex4.subtract(0.44503629207611084);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 8.187871486648885E-8);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex(8.187871486648885E-8);
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex1.add(798.57419512142);
      Complex complex6 = complex2.log();
      Complex complex7 = Complex.valueOf(798.57419512142, (-6.895681935288532E-38));
      Complex complex8 = complex7.acos();
      complex4.pow(complex2);
      complex8.multiply((-2738.3223573));
      complex8.tan();
      complex6.getArgument();
      complex5.multiply(0.0);
      complex8.pow(1.5800256583859738);
      Complex complex9 = Complex.valueOf(3.045626925379409);
      complex9.readResolve();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.log();
      complex6.divide(complex11);
      complex7.subtract((-6.895681935288532E-38));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.INF;
      complex2.getArgument();
      complex0.abs();
      Complex complex3 = new Complex(0.0, (-20.0));
      complex3.tan();
      Complex complex4 = Complex.valueOf((-3562.0), 2.0);
      Complex complex5 = complex4.conjugate();
      complex3.pow((-106.2031113));
      Complex complex6 = complex5.log();
      complex3.exp();
      complex4.pow(4.5374504961394207E266);
      complex3.sin();
      Complex complex7 = complex3.tanh();
      complex7.nthRoot(1953);
      Complex complex8 = complex7.pow((-106.2031113));
      Complex complex9 = complex6.subtract(1.0);
      complex9.subtract((-20.0));
      complex8.exp();
      complex8.reciprocal();
      complex2.pow(complex1);
      complex6.cos();
      complex7.getImaginary();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.multiply((-527));
      complex3.atan();
      complex0.toString();
      complex1.add(complex0);
      complex2.sin();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 8.187871486648885E-8);
      Complex complex1 = Complex.ONE;
      complex1.NaN.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.INF.tan();
      complex2.ZERO.add(complex0);
      complex1.add((-2738.3223573));
      Complex complex3 = complex0.I.log();
      Complex complex4 = Complex.valueOf(8.187871486648885E-8, 1187.0);
      complex4.I.acos();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.NaN.multiply(8.187871486648885E-8);
      complex6.INF.tan();
      complex1.NaN.getArgument();
      Complex complex7 = complex6.NaN.multiply(0.0);
      complex3.divide(0.2607102394104004);
      complex3.subtract(complex0);
      complex0.tan();
      complex5.asin();
      complex1.divide(complex4);
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex1.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(955.270755, 955.270755);
      Complex complex1 = complex0.multiply((-195.41407));
      Complex complex2 = Complex.valueOf(219.1792847031398, 955.270755);
      complex1.INF.atan();
      complex0.asin();
      complex2.conjugate();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(7498407.332489029);
      complex1.readResolve();
      Complex complex2 = complex1.NaN.multiply(7498407.332489029);
      complex1.INF.readResolve();
      Complex complex3 = complex1.sqrt1z();
      complex0.ZERO.sinh();
      Complex complex4 = complex2.multiply(7498407.332489029);
      complex2.toString();
      Complex complex5 = Complex.valueOf(7498407.332489029);
      complex4.getField();
      Complex complex6 = complex3.pow(7498407.332489029);
      complex6.conjugate();
      complex5.add(complex0);
      complex1.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.log();
      complex1.toString();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.add(0.36222589015960693);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex1.pow(0.36222589015960693);
      complex1.getImaginary();
      complex0.divide(Double.NaN);
      complex5.hashCode();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex6.I.cosh();
      complex1.getArgument();
      complex5.getReal();
      Complex complex8 = complex0.conjugate();
      complex3.toString();
      complex4.sqrt();
      complex2.isInfinite();
      Complex complex9 = Complex.valueOf(Double.NaN, 0.36222589015960693);
      complex9.add(complex6);
      Complex complex10 = new Complex(Double.NaN);
      Complex complex11 = complex7.INF.log();
      complex11.INF.cosh();
      complex10.NaN.getArgument();
      Complex complex12 = complex8.sinh();
      complex12.INF.multiply(0.36222589015960693);
      Complex complex13 = Complex.valueOf((-461.3), Double.NaN);
      complex13.I.tanh();
      complex7.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = complex0.subtract(complex9);
      complex14.atan();
      complex1.sin();
      complex13.add(0.6471850872039795);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.add((-2738.3223573));
      Complex complex4 = complex3.log();
      Complex.valueOf(1.840992392368355E-8, (-2045.570211202005));
      complex3.acos();
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(1187.0);
      Complex complex7 = complex2.multiply(0.7237368419565787);
      Complex complex8 = complex4.tan();
      complex8.getArgument();
      complex6.multiply(1187.0);
      complex7.pow((-2045.570211202005));
      complex2.readResolve();
      Complex complex9 = complex2.log();
      complex0.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.conjugate();
      complex0.sqrt();
      Complex complex2 = complex0.pow((-2326.482));
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.exp();
      complex1.pow((-2326.482));
      complex0.sin();
      complex4.tanh();
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.exp();
      complex2.ONE.acos();
      Complex complex3 = complex1.atan();
      complex3.I.reciprocal();
      complex0.reciprocal();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.reciprocal();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex5.exp();
      Complex complex9 = Complex.ONE;
      complex8.add(complex9);
      complex3.isNaN();
      Complex complex10 = Complex.INF;
      complex10.abs();
      complex7.sin();
      Complex.valueOf((-1.0), 253.77500040962);
      complex8.pow(complex9);
      complex8.cosh();
      Complex.valueOf(7.89187408872514E284);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.multiply((-527));
      Complex complex4 = complex0.atan();
      complex2.toString();
      Complex complex5 = complex0.add(complex3);
      complex4.sin();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.I.reciprocal();
      complex4.I.conjugate();
      complex5.getReal();
      Complex complex6 = complex0.conjugate();
      complex3.toString();
      complex6.sqrt();
      Complex complex7 = Complex.valueOf((-1263.0));
      complex7.isInfinite();
      Complex.valueOf(2.0, 2.0);
      complex2.add(complex1);
      Complex complex8 = complex4.createComplex(2.0, 0.0);
      complex5.log();
      complex7.cosh();
      complex4.getArgument();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex4.multiply((-1897.62433552094));
      Complex.valueOf(2.0, (-1897.62433552094));
      Complex complex11 = Complex.valueOf(2.0, (-24335.0));
      complex11.tanh();
      Complex complex12 = new Complex(0.0, 1.5707963267948966);
      complex6.subtract(complex10);
      complex1.atan();
      complex8.sin();
      complex10.add(0.6471850872039795);
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 8.187871486648885E-8);
      Complex complex1 = Complex.ONE;
      complex1.NaN.hashCode();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex1.add((-2738.3223573));
      Complex complex5 = complex0.multiply(2.718281828459045);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.ZERO;
      complex7.conjugate();
      complex6.INF.negate();
      Complex complex8 = complex1.exp();
      complex1.add(complex8);
      complex1.isNaN();
      complex1.abs();
      complex6.sin();
      Complex.valueOf(0.0, (-1143.46927));
      complex8.pow(complex5);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex3.ZERO.tanh();
      complex4.NaN.subtract(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      Complex complex5 = complex1.I.multiply((-3748.2425));
      complex2.subtract(complex5);
      Complex complex6 = complex1.I.tan();
      Complex complex7 = complex1.NaN.log();
      complex0.sqrt1z();
      Complex complex8 = complex1.exp();
      complex6.ZERO.multiply(4507);
      complex0.I.cos();
      complex6.getArgument();
      Complex complex9 = complex6.exp();
      complex9.INF.tanh();
      Complex complex10 = complex2.pow(complex7);
      Complex complex11 = complex1.sin();
      complex10.readResolve();
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex12.add(1.0);
      complex13.NaN.multiply(complex6);
      complex13.I.pow((-3748.2425));
      complex8.cos();
      Complex complex14 = Complex.valueOf((-3748.2425), (-3748.2425));
      complex14.conjugate();
      complex0.sinh();
      complex5.abs();
      complex13.pow(complex1);
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      complex2.NaN.getArgument();
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = complex1.sinh();
      complex2.I.add(0.0);
      Complex complex5 = complex4.negate();
      complex0.readResolve();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex5.ZERO.multiply(complex2);
      complex6.multiply(3951.568346390154);
      complex0.hashCode();
      complex0.I.add(complex1);
      complex4.ZERO.multiply(Double.NaN);
      complex5.INF.getField();
      complex4.isInfinite();
      complex6.cosh();
      complex5.createComplex(4400.61401, Double.NaN);
      Complex complex8 = complex0.pow(complex7);
      complex8.ONE.multiply(17);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.NaN.pow((-1.0));
      complex3.divide(complex2);
      complex2.ZERO.readResolve();
      complex0.getArgument();
      Object object0 = new Object();
      complex0.ZERO.acos();
      complex2.equals(object0);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.ZERO.exp();
      complex5.INF.tan();
      complex0.toString();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex6.NaN.sinh();
      complex1.isNaN();
      Complex complex8 = complex0.negate();
      complex8.NaN.multiply(complex5);
      complex4.readResolve();
      complex1.getReal();
      complex0.I.readResolve();
      Complex.valueOf(1.5707963267948966);
      Complex complex9 = complex4.sin();
      complex9.getArgument();
      complex9.negate();
      Complex complex10 = complex0.subtract(Double.NaN);
      complex10.I.add((-1.5707963267948966));
      Complex complex11 = complex4.cosh();
      complex11.ONE.add(complex7);
      complex11.ONE.pow(complex1);
      complex11.INF.add(complex2);
      Complex complex12 = complex2.asin();
      complex3.subtract(complex11);
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.log();
      complex1.I.toString();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex0.add(0.36222589015960693);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex1.pow(0.36222589015960693);
      complex1.getImaginary();
      complex0.divide(Double.NaN);
      complex5.hashCode();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex6.I.cosh();
      complex1.getArgument();
      complex5.getReal();
      Complex complex8 = complex0.conjugate();
      complex3.toString();
      complex4.sqrt();
      complex2.isInfinite();
      Complex complex9 = Complex.valueOf(Double.NaN, 0.36222589015960693);
      Complex complex10 = complex9.add(complex6);
      Complex complex11 = complex10.ZERO.createComplex(Double.NaN, 0.36222589015960693);
      Complex complex12 = complex7.INF.log();
      complex12.INF.cosh();
      complex11.NaN.getArgument();
      Complex complex13 = complex8.sinh();
      complex13.INF.multiply(0.36222589015960693);
      Complex complex14 = Complex.valueOf((-461.3), Double.NaN);
      complex14.I.tanh();
      complex7.divide(Double.POSITIVE_INFINITY);
      Complex complex15 = complex0.subtract(complex9);
      complex15.atan();
      complex1.sin();
      complex14.add(0.6471850872039795);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.add(complex1);
      Complex complex4 = complex3.add(complex0);
      complex0.NaN.getField();
      complex2.NaN.getArgument();
      Complex complex5 = complex1.add(1.0);
      complex5.ONE.toString();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex2.ZERO.log();
      Complex complex8 = complex1.NaN.acos();
      complex2.equals(complex1);
      Complex complex9 = complex0.add(complex4);
      complex2.toString();
      complex9.ONE.sin();
      Complex complex10 = complex6.exp();
      complex10.ONE.sqrt();
      complex8.abs();
      complex9.cos();
      complex3.isInfinite();
      complex7.divide(350.697976);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3429.011);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      complex2.tan();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex2.divide(1386.629);
      Complex complex6 = complex5.INF.conjugate();
      complex2.ONE.readResolve();
      complex6.I.atan();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex7.I.sqrt1z();
      complex9.I.multiply((-151));
      complex2.sqrt1z();
      complex3.NaN.divide(3429.011);
      Complex.valueOf(1386.629, 1386.629);
      complex7.divide(3429.011);
      complex4.getReal();
      complex8.hashCode();
      try { 
        complex1.nthRoot((-1191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,191
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.exp();
      complex2.ONE.acos();
      Complex complex3 = complex1.atan();
      complex3.I.reciprocal();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.reciprocal();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.tanh();
      complex3.getArgument();
      Complex complex8 = complex1.tan();
      complex5.I.cosh();
      complex8.NaN.sin();
      complex5.multiply((-527));
      complex7.atan();
      complex2.toString();
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1965.845358050444), (-1.1701113164306871E-7));
      complex0.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.subtract(complex1);
      complex1.ONE.reciprocal();
      Complex complex3 = complex0.INF.sin();
      complex2.subtract(complex0);
      Complex complex4 = complex2.add(1.6879660933816274E223);
      complex2.ZERO.sqrt();
      Complex complex5 = complex4.ONE.subtract((-2011.96754));
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex6.I.subtract(1903.41908);
      Complex complex8 = complex7.ZERO.add((-1965.845358050444));
      complex8.I.readResolve();
      complex7.INF.getField();
      complex5.ONE.log();
      complex1.getImaginary();
      Complex complex9 = Complex.valueOf(1693.6574598104767, (-8.222105281934058E-8));
      Complex complex10 = Complex.valueOf(1098.699696);
      complex10.I.log();
      Complex complex11 = complex1.cosh();
      complex3.isNaN();
      Complex complex12 = complex1.multiply((-2011.96754));
      Complex complex13 = complex5.tanh();
      complex13.multiply((-2341));
      complex11.tan();
      complex12.conjugate();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 1092.90088527736);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2136.0863693665, 2136.0863693665);
      Complex complex1 = complex0.createComplex((-6.746431126005811E-8), 2136.0863693665);
      Complex complex2 = complex1.ONE.multiply(0);
      Complex complex3 = complex1.acos();
      complex1.equals(complex0);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.reciprocal();
      complex0.multiply(0);
      complex4.equals(complex3);
      Complex complex6 = complex4.divide((-1952.5058448362));
      complex5.I.cosh();
      Complex complex7 = complex5.pow(complex0);
      Complex complex8 = complex7.pow(0.0);
      complex7.sin();
      complex1.subtract((-6.746431126005811E-8));
      complex2.isInfinite();
      complex6.abs();
      Complex complex9 = complex4.multiply(964);
      complex6.readResolve();
      Object object0 = complex0.readResolve();
      complex5.NaN.sin();
      complex9.equals(object0);
      complex8.pow((-1952.5058448362));
      complex6.sinh();
      complex6.toString();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2355.4948747);
      Complex complex1 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.tanh();
      complex3.I.abs();
      complex3.ONE.multiply(0.0);
      Complex complex4 = complex1.pow(complex0);
      complex4.NaN.multiply(1.0);
      Complex complex5 = complex4.ZERO.reciprocal();
      complex5.conjugate();
      complex3.INF.exp();
      Complex complex6 = complex2.ZERO.add(complex0);
      complex0.isNaN();
      complex1.I.abs();
      complex2.NaN.sin();
      Complex complex7 = Complex.valueOf(2131.0740779, 6.283185307179586);
      complex6.pow(complex7);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.exp();
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.add(complex3);
      Object object0 = new Object();
      Complex complex5 = complex4.ZERO.asin();
      complex4.cosh();
      Complex complex6 = complex5.log();
      complex6.NaN.pow(0.0);
      Complex complex7 = complex3.ONE.tan();
      complex3.equals(object0);
      complex7.INF.divide(complex3);
      Complex complex8 = complex4.add(complex3);
      complex7.toString();
      Complex complex9 = complex8.I.sqrt();
      complex7.ZERO.conjugate();
      complex8.I.sqrt1z();
      complex9.INF.negate();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex8.divide((-594.2661098402592));
      Complex complex12 = Complex.valueOf((-594.2661098402592));
      complex11.sqrt();
      complex11.getReal();
      complex11.INF.readResolve();
      complex12.ONE.nthRoot(1);
      Complex complex13 = complex2.negate();
      complex13.reciprocal();
      Complex complex14 = complex12.createComplex((-594.2661098402592), (-594.2661098402592));
      complex14.atan();
      complex8.pow((-0.00528650818474953));
      Complex complex15 = new Complex((-594.2661098402592));
      complex5.equals(complex15);
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.negate();
      complex1.isNaN();
      Complex complex2 = Complex.valueOf(0.0, 6.283185307179586);
      complex2.ONE.toString();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      Complex complex4 = new Complex(0.0, 0.0);
      complex3.ONE.abs();
      Complex.valueOf((-2460.814380848989));
      complex3.INF.divide((-1938.7091197056204));
      Complex complex5 = complex4.ONE.tan();
      complex5.ZERO.atan();
      complex3.equals(complex4);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1097.28181));
      complex0.getImaginary();
      Complex complex1 = complex0.exp();
      complex1.readResolve();
      Complex complex2 = complex0.NaN.reciprocal();
      complex2.I.pow(complex1);
      Complex complex3 = Complex.ONE;
      complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      complex0.ONE.asin();
      complex0.toString();
      complex1.ONE.abs();
      Complex complex2 = complex0.add(9.352382323649647E257);
      complex2.I.negate();
      complex2.ONE.readResolve();
      complex1.atan();
      complex2.getField();
      Complex complex3 = complex0.acos();
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.valueOf((-1286.574065253), (-735.871));
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.I.log();
      complex0.NaN.multiply((-735.871));
      Complex complex4 = complex1.INF.sin();
      complex4.I.cosh();
      complex0.I.divide(complex1);
      complex0.exp();
      complex0.hashCode();
      complex0.createComplex((-2163.63317619109), 0.0);
      Complex.valueOf((-735.871));
      complex3.acos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1411.251331299943), (-1411.251331299943));
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.NaN.reciprocal();
      complex3.INF.tan();
      complex0.NaN.subtract(complex1);
      complex0.INF.subtract(0.07341018319129944);
      complex0.ONE.reciprocal();
      Complex complex4 = complex0.createComplex(4.71524479659295E-8, 4.71524479659295E-8);
      Complex complex5 = Complex.valueOf((-1411.251331299943));
      Complex complex6 = complex4.sin();
      Complex complex7 = complex3.multiply(complex6);
      complex5.pow(complex2);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex1.I.divide(complex0);
      complex0.getImaginary();
      complex2.I.toString();
      Complex complex4 = complex0.INF.add(0.16690382361412048);
      complex4.NaN.createComplex(0.0, 0.0);
      Complex complex5 = complex4.I.atan();
      complex0.isNaN();
      complex4.NaN.reciprocal();
      complex3.I.getArgument();
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex3.acos();
      complex7.cosh();
      Complex.valueOf(1246.2569);
      complex1.INF.pow(0.0);
      Complex complex8 = complex1.add(0.0);
      complex8.ONE.abs();
      complex6.INF.acos();
      Complex.valueOf(0.0);
      complex7.abs();
      Complex complex9 = complex5.conjugate();
      complex9.log();
      complex4.reciprocal();
      complex3.createComplex(0.16690382361412048, 0.0);
      complex0.readResolve();
      complex6.subtract(complex2);
      complex8.tan();
      complex6.toString();
      complex7.equals("(0.0, 1.0)");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.INF.add(complex2);
      complex2.getArgument();
      complex2.abs();
      Complex complex4 = complex2.I.tan();
      complex4.conjugate();
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex5.INF.log();
      complex6.NaN.exp();
      complex5.pow(0.0);
      complex2.sin();
      Complex complex7 = complex1.tanh();
      complex2.nthRoot(1953);
      complex3.pow(0.0);
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex8.INF.subtract((-4191.095218532651));
      Complex complex10 = complex2.log();
      Complex complex11 = complex4.exp();
      complex11.reciprocal();
      complex11.I.pow(complex10);
      complex11.cos();
      complex7.getImaginary();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(349.815897999072, 349.815897999072);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.pow((-638.7267));
      complex2.INF.toString();
      complex2.NaN.createComplex((-638.7267), 1.3158882241538003E-241);
      Complex complex3 = complex0.I.multiply(complex1);
      complex3.log();
      complex3.ZERO.divide(complex1);
      complex0.getArgument();
      Complex complex4 = complex1.sqrt1z();
      complex4.I.sinh();
      Complex complex5 = complex4.add(349.815897999072);
      complex5.acos();
      Complex complex6 = complex4.I.cosh();
      complex1.ONE.toString();
      complex6.INF.getArgument();
      complex4.tanh();
      complex6.reciprocal();
      complex0.getField();
      complex0.getReal();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      complex1.INF.sinh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.I.add((-2419.11886921));
      complex0.acos();
      Complex complex5 = Complex.valueOf((-2419.11886921));
      complex5.ONE.hashCode();
      complex1.multiply((-862.337284));
      complex1.equals(complex3);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(995);
      Complex complex2 = complex1.tan();
      complex2.INF.asin();
      Complex complex3 = complex1.ONE.add((double) 995);
      Complex complex4 = complex3.INF.reciprocal();
      complex4.NaN.log();
      Complex complex5 = Complex.valueOf((double) 995);
      complex0.log();
      Complex complex6 = complex0.subtract((-852.3));
      Complex complex7 = complex0.createComplex((-852.3), (-455.73287201836));
      Complex complex8 = complex1.exp();
      complex8.INF.add(0.0);
      Complex complex9 = complex6.I.conjugate();
      Complex complex10 = complex6.pow(Double.NaN);
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex11.I.pow(complex5);
      Complex complex13 = complex10.I.subtract(complex11);
      complex0.ONE.reciprocal();
      complex13.getField();
      Complex complex14 = complex9.subtract((-455.73287201836));
      complex7.sqrt1z();
      complex11.abs();
      complex6.I.abs();
      complex14.divide(complex8);
      Complex complex15 = complex9.add(3746.0);
      complex3.multiply(complex15);
      complex12.asin();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 8.187871486648885E-8);
      Complex complex1 = Complex.ONE;
      complex1.NaN.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.ZERO.add(complex0);
      Complex complex3 = complex1.add((-2738.3223573));
      complex0.I.log();
      Complex complex4 = Complex.valueOf((-1143.46927), 1187.0);
      complex4.I.acos();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.NaN.multiply(8.187871486648885E-8);
      complex6.INF.tan();
      complex1.NaN.getArgument();
      complex6.NaN.multiply(0.0);
      Complex complex7 = complex5.NaN.pow(0.0);
      complex0.readResolve();
      complex7.log();
      complex3.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.conjugate();
      complex2.INF.asin();
      complex2.ZERO.tan();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.cosh();
      complex3.readResolve();
      Complex complex5 = Complex.valueOf((-491.4559089643));
      Complex complex6 = complex5.ONE.reciprocal();
      complex6.INF.divide(0.0);
      complex4.divide(complex5);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(2057.0);
      complex0.ONE.toString();
      Complex complex1 = new Complex((-375.6552), (-375.6552));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.acos();
      complex3.NaN.abs();
      complex3.I.add((-1.8981247089866317E-7));
      complex0.readResolve();
      complex3.abs();
      complex2.subtract((-375.6552));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-86.360770929), (-86.360770929));
      Complex complex1 = complex0.negate();
      complex0.equals(complex1);
      complex0.hashCode();
      complex0.equals(complex1);
      complex1.I.conjugate();
      Complex complex2 = complex0.multiply((-86.360770929));
      complex1.tanh();
      complex2.multiply(0.0);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex1.I.multiply(1749);
      Complex complex5 = complex4.INF.subtract(complex1);
      complex5.INF.multiply(20.0);
      Complex complex6 = complex0.conjugate();
      complex6.I.divide(1243.794105);
      Complex complex7 = complex6.I.divide((double) 1749);
      complex6.I.getField();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex1.tan();
      complex10.ZERO.acos();
      complex9.isInfinite();
      Complex complex11 = complex5.ONE.reciprocal();
      complex11.ONE.nthRoot(1749);
      complex8.ZERO.pow(complex5);
      complex0.abs();
      complex2.pow(complex5);
      complex1.isInfinite();
      Complex complex12 = complex9.cos();
      complex3.tanh();
      complex5.toString();
      complex7.subtract(complex3);
      complex12.tanh();
      complex7.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.NaN.acos();
      complex1.INF.readResolve();
      Complex complex4 = complex1.NaN.subtract(0.0);
      complex4.I.add(369.420575129);
      Complex complex5 = complex0.subtract(652.42685);
      Complex complex6 = Complex.valueOf((-47.1064));
      Complex complex7 = complex5.I.asin();
      complex7.INF.acos();
      complex2.readResolve();
      Complex complex8 = complex3.divide(0.0);
      complex8.isInfinite();
      complex4.asin();
      Complex complex9 = complex5.NaN.pow(complex6);
      Complex complex10 = new Complex(1393.331637);
      complex8.I.pow(complex10);
      complex9.ONE.cosh();
      Complex complex11 = complex0.acos();
      Complex complex12 = complex11.asin();
      complex5.getReal();
      complex3.abs();
      complex8.asin();
      complex12.multiply((-992));
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cos();
      complex1.tan();
      Complex complex2 = complex0.ZERO.exp();
      int int0 = (-1085);
      try { 
        complex2.ONE.nthRoot((-1085));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,085
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(2298.3526627);
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.isInfinite();
      complex0.getArgument();
      Complex complex1 = complex0.tanh();
      int int0 = 0;
      try { 
        complex1.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(703.29, 0.0);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ZERO.add(complex0);
      complex0.getReal();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex5.reciprocal();
      complex6.INF.getField();
      complex0.getImaginary();
      complex0.I.asin();
      Complex complex7 = complex1.I.cosh();
      Complex complex8 = complex0.tan();
      complex8.getImaginary();
      Complex complex9 = complex0.subtract(0.0);
      complex7.INF.multiply(complex4);
      complex4.pow(complex2);
      complex2.acos();
      Object object0 = complex9.readResolve();
      complex7.equals(object0);
      complex4.getArgument();
      complex8.sinh();
      Complex complex10 = complex4.add(703.29);
      try { 
        complex10.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(0.0);
      complex0.nthRoot(37);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.I.sin();
      complex2.I.tan();
      Complex complex4 = complex2.INF.tanh();
      complex4.ONE.abs();
      complex0.ONE.getField();
      Complex complex5 = complex2.subtract(complex1);
      Complex complex6 = complex5.I.acos();
      complex6.ONE.readResolve();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.ONE.divide(complex7);
      complex8.NaN.toString();
      complex6.ZERO.abs();
      complex5.isNaN();
      Complex complex9 = complex3.multiply(1146.7881862816);
      complex3.toString();
      Complex complex10 = complex5.pow(1146.7881862816);
      complex10.ZERO.hashCode();
      Complex complex11 = complex9.multiply(1146.7881862816);
      complex11.I.abs();
      complex0.getField();
      Complex.valueOf(1541.0, 0.0);
      complex3.sqrt();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex2.acos();
      Complex complex6 = complex2.cosh();
      Complex complex7 = Complex.valueOf(1400.462593, 1400.462593);
      Complex complex8 = complex2.INF.exp();
      complex2.equals("");
      Complex complex9 = complex5.NaN.tanh();
      complex5.getField();
      complex8.add(complex2);
      Complex complex10 = complex2.acos();
      complex10.INF.sin();
      Complex complex11 = complex5.log();
      Complex complex12 = complex11.ONE.sqrt1z();
      Complex complex13 = complex11.I.multiply(complex0);
      Complex complex14 = complex13.INF.add(complex11);
      Complex complex15 = complex10.subtract(1400.462593);
      double double0 = complex7.getImaginary();
      assertEquals(1400.462593, double0, 0.01);
      
      List<Complex> list0 = complex4.nthRoot(2465);
      assertEquals(1.4142135623730951, complex3.getReal(), 0.01);
      assertTrue(list0.contains(complex15));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      complex8.readResolve();
      assertTrue(complex8.equals((Object)complex0));
      
      double double1 = complex0.abs();
      assertEquals(Double.NaN, double1, 0.01);
      
      complex2.conjugate();
      Complex complex16 = complex0.add((-1514.88542842003));
      complex16.NaN.getArgument();
      Complex complex17 = complex5.tanh();
      Complex complex18 = complex7.divide(1400.462593);
      Complex complex19 = complex17.cosh();
      Complex complex20 = complex19.INF.sin();
      Complex complex21 = complex6.add(complex18);
      assertEquals(1.0, complex18.getReal(), 0.01);
      assertSame(complex21, complex15);
      assertEquals(1.0, complex18.getImaginary(), 0.01);
      
      complex14.getArgument();
      assertSame(complex14, complex13);
      
      Complex complex22 = complex20.pow(Double.NaN);
      assertFalse(complex1.equals((Object)complex12));
      assertTrue(complex20.equals((Object)complex9));
      assertSame(complex2, complex22);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-1465.20665));
      Complex complex2 = complex0.asin();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.I.tan();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex4.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.ONE.reciprocal();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex1.exp();
      assertTrue(complex7.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      double double0 = 639.895805;
      Complex complex0 = Complex.valueOf(639.895805);
      int int0 = 17;
      double double1 = (-85.173);
      complex0.I.createComplex((-85.173), 17);
      complex0.nthRoot(17);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.multiply(1499);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex1.ONE.acos();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      complex1.readResolve();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex0.cos();
      complex6.NaN.cosh();
      Complex complex7 = complex3.sinh();
      assertNotSame(complex7, complex3);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      
      Complex complex8 = Complex.valueOf((double) 1499);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
  }
}
