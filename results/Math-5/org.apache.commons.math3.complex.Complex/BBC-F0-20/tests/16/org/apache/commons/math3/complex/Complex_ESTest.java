/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:05:19 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(864.879173);
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex1.tanh();
      Complex.valueOf(864.879173, 2882.21);
      complex3.pow(complex2);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.tan();
      complex1.I.getArgument();
      complex0.multiply(complex3);
      complex1.readResolve();
      Complex complex6 = complex5.tan();
      complex6.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.1044092571980793E155);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex1.ZERO.nthRoot(338);
      Complex complex3 = Complex.valueOf(675.099, 3.7730204737910044E260);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = Complex.valueOf(3.7730204737910044E260, (-1942.3016));
      complex3.conjugate();
      Complex complex8 = complex7.multiply(complex0);
      Complex complex9 = complex0.sin();
      complex1.getField();
      complex2.subtract(1.1044092571980793E155);
      complex9.NaN.acos();
      complex8.readResolve();
      Complex complex10 = complex9.add(4600.22184010693);
      complex1.I.atan();
      Complex complex11 = complex6.cos();
      complex11.ZERO.pow(complex10);
      complex2.I.divide(1.1044092571980793E155);
      complex5.subtract(complex7);
      complex2.asin();
      complex6.divide((double) 338);
      Complex complex12 = Complex.valueOf(3.3791993048776982E-9);
      complex6.sqrt();
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1984128162292276E269, (-1.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.negate();
      complex1.ZERO.readResolve();
      Complex complex3 = complex0.multiply((-3963.1058683350284));
      Complex complex4 = complex0.multiply((-3963.1058683350284));
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex1.reciprocal();
      complex2.ONE.readResolve();
      Complex complex7 = complex1.tanh();
      complex7.I.add(0.539322018623352);
      complex1.tanh();
      Complex complex8 = complex3.sin();
      complex8.NaN.sinh();
      Complex complex9 = complex7.multiply(complex6);
      complex9.NaN.multiply(347);
      complex3.cos();
      complex2.I.divide(2.414213562373095);
      complex5.multiply(complex2);
      complex2.sqrt1z();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1775.414172503), (-20.0));
      complex1.NaN.exp();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      complex0.sinh();
      Complex complex3 = complex1.subtract((-694.808598796738));
      complex3.cosh();
      complex1.multiply((-694.808598796738));
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.tanh();
      Complex.valueOf(1.557407724654902);
      complex2.add(Double.POSITIVE_INFINITY);
      complex5.pow(complex2);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.multiply(complex1);
      complex6.cos();
      Complex.valueOf(1721.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.createComplex(Double.POSITIVE_INFINITY, 1.0048439428216648E-4);
      complex0.nthRoot(355);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-248.535285), 20.0);
      Complex complex2 = complex1.add(2060.23062604972);
      Complex complex3 = Complex.valueOf((-0.9299781181619255));
      complex3.tanh();
      Complex.valueOf(615.0, 2060.23062604972);
      complex2.pow(complex1);
      Complex complex4 = Complex.ONE;
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(3.4082234423358275, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(308);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-860.22367445));
      Complex.valueOf((-0.9299781181619255));
      complex1.tanh();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = Complex.INF;
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(5.855656168565179, 6.283185307179586);
      complex0.add(3.164186629229597E-8);
      Complex complex2 = Complex.valueOf(3.164186629229597E-8);
      complex2.ZERO.sinh();
      complex1.tanh();
      Complex complex3 = Complex.valueOf(1.9521772861480713, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ONE;
      complex4.pow(complex3);
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.valueOf((-790.11145241), (-790.11145241));
      complex6.tan();
      complex3.sqrt();
      complex5.atan();
      complex4.acos();
      complex6.toString();
      complex0.multiply((-1402.847967002));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 7.283185307179586);
      Complex complex1 = complex0.add(7.283185307179586);
      Complex.valueOf(7.283185307179586);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf(7.283185307179586, 2.0);
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.tan();
      Complex.valueOf(7.283185307179586, (-570.204773402866));
      complex6.INF.sqrt();
      complex4.readResolve();
      Complex complex7 = new Complex(20.0);
      complex7.tanh();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(340.44692);
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.valueOf(2872.6814576, 1661.92990508439);
      complex4.pow(complex2);
      Complex complex5 = Complex.INF;
      complex3.tan();
      complex2.sqrt();
      complex5.atan();
      complex1.acos();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.0));
      Complex complex1 = Complex.valueOf((-3.0), (-3.0));
      Complex complex2 = complex1.add(2993.09925);
      Complex complex3 = new Complex(2993.09925);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.pow(complex3);
      complex5.pow(complex2);
      Complex complex6 = Complex.ONE;
      complex5.tan();
      complex3.sqrt();
      complex1.atan();
      complex5.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-3.0));
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.exp();
      Complex complex5 = new Complex(1709.18741342, 6.283185307179586);
      complex5.subtract(900.0);
      complex5.getArgument();
      complex5.nthRoot(1833);
      complex5.multiply(1833);
      complex4.atan();
      Complex complex6 = Complex.INF;
      complex6.acos();
      complex2.asin();
      complex5.tanh();
      Complex complex7 = Complex.ONE;
      complex7.exp();
      Complex.valueOf(2348.243052361);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2076.816, 1.0);
      complex0.INF.divide((-785.9268938219312));
      Complex complex1 = Complex.valueOf(1.0);
      complex0.ONE.sinh();
      Complex complex2 = Complex.valueOf((-1043.36));
      complex0.subtract(0.9999998016652847);
      Complex complex3 = Complex.valueOf(2467.97829178, Double.NaN);
      Complex complex4 = complex1.pow(2076.816);
      complex4.ONE.divide(17.909);
      Complex complex5 = Complex.NaN;
      complex0.pow(complex5);
      Complex complex6 = Complex.valueOf(1.0, 2076.816);
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex1.exp();
      complex6.ONE.sqrt1z();
      complex3.divide(complex7);
      complex6.toString();
      Complex complex9 = complex8.cos();
      Complex complex10 = Complex.valueOf(2076.816);
      complex5.exp();
      complex7.add(complex10);
      complex9.asin();
      complex10.negate();
      complex1.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.I;
      complex3.sinh();
      Complex.valueOf(6.561827465611904E-7);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex1.sinh();
      Complex complex4 = new Complex(3610.00301441797, 3610.00301441797);
      complex4.add(20.0);
      Complex complex5 = new Complex((-2406.1473));
      complex3.tanh();
      Complex complex6 = new Complex(3610.00301441797);
      complex2.pow(complex6);
      complex6.pow(complex5);
      Complex complex7 = complex0.acos();
      complex3.tan();
      complex1.sqrt();
      Complex complex8 = Complex.valueOf(3610.00301441797, 3610.00301441797);
      complex8.atan();
      Complex complex9 = complex7.acos();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.subtract(complex0);
      complex0.equals(complex0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.NaN.exp();
      Complex complex2 = complex1.sinh();
      complex2.cosh();
      complex0.toString();
      complex0.getArgument();
      complex0.divide(0.0);
      complex0.subtract(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.I;
      Object object0 = complex4.readResolve();
      complex2.equals(object0);
      complex0.sin();
      // Undeclared exception!
      complex1.nthRoot(628983398);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.multiply(1421);
      Complex complex2 = new Complex(0.0, (-6770296.047150562));
      Complex complex3 = new Complex((-6.502346978395722));
      complex3.ZERO.pow((-6.502346978395722));
      Complex complex4 = Complex.valueOf((-6.502346978395722), 1938.4119507168423);
      complex4.tan();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.I.negate();
      complex3.reciprocal();
      Complex complex4 = Complex.valueOf(6.283185307179586);
      complex4.sin();
      complex4.exp();
      complex1.INF.nthRoot(1185);
      complex1.hashCode();
      complex1.cosh();
      complex2.add(1.5720402236645676E-8);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1839.87717622), (-1839.87717622));
      complex0.acos();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.divide((-1839.87717622));
      Complex complex5 = complex2.tan();
      complex2.NaN.readResolve();
      complex3.add(complex5);
      complex4.ZERO.pow(0.46302127838134766);
      complex5.readResolve();
      complex4.exp();
      complex1.exp();
      complex2.sinh();
      Complex.valueOf((-2132.6101585465003), 787.7);
      Complex complex6 = new Complex((-1908.535660606777), (-1839.87717622));
      complex0.tan();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(2.1452336456259667E285);
      Complex complex1 = complex0.divide(2.1452336456259667E285);
      Complex complex2 = complex0.tanh();
      complex0.ZERO.abs();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex2.multiply(1035);
      complex2.isNaN();
      complex1.INF.log();
      complex3.getArgument();
      Complex complex5 = complex2.log();
      complex5.tan();
      complex1.getImaginary();
      complex3.getField();
      Complex complex6 = new Complex(1035, Double.NaN);
      Complex complex7 = complex6.sin();
      complex7.INF.divide(466.7);
      Complex.valueOf(2046.1211025641, 1233.98914589);
      complex4.add(complex6);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.cosh();
      complex1.ONE.toString();
      Complex complex2 = complex1.I.add((-1233.98914589));
      Complex.valueOf(0.0);
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = (Complex)complex0.readResolve();
      Complex complex6 = complex4.tanh();
      complex5.sinh();
      complex6.add(0.0);
      complex4.atan();
      complex3.cosh();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.divide(1761.1);
      complex5.multiply((-1));
      Complex complex7 = complex2.add(complex1);
      Complex complex8 = complex4.add(complex3);
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex6.acos();
      complex10.subtract((-3.901826104778096E-9));
      complex9.equals(complex3);
      complex3.getReal();
      complex4.atan();
      Complex complex11 = new Complex(926.28, (-1.0));
      complex7.readResolve();
      Complex complex12 = Complex.I;
      complex10.add(1.3587863008979184E-4);
      Complex complex13 = complex2.atan();
      complex8.acos();
      complex13.toString();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.I.reciprocal();
      complex2.reciprocal();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      complex4.asin();
      complex1.atan();
      Complex complex6 = complex4.tan();
      complex5.asin();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.7615941559557649);
      complex1.atan();
      complex3.sinh();
      complex1.toString();
      complex1.atan();
      complex6.acos();
      complex7.toString();
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1839.87717622), (-1839.87717622));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.INF;
      complex0.divide((-1839.87717622));
      Complex complex3 = complex2.asin();
      complex1.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.asin();
      Complex complex6 = new Complex((-2695.4));
      Complex.valueOf(0.7615941559557649);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex0.sinh();
      complex8.toString();
      complex8.atan();
      complex1.acos();
      complex5.conjugate();
      complex7.toString();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(2.1452336456259667E285);
      Complex complex1 = complex0.divide(2.1452336456259667E285);
      Complex complex2 = complex0.tanh();
      complex0.ZERO.abs();
      Complex complex3 = Complex.INF;
      complex0.divide(2.1452336456259667E285);
      complex1.atan();
      complex1.tan();
      complex2.asin();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.add(2.1452336456259667E285);
      Complex complex6 = Complex.valueOf(0.0);
      complex6.atan();
      complex0.sinh();
      complex5.toString();
      complex4.add(0.0);
      Complex complex7 = complex5.acos();
      complex6.conjugate();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 2.1452336456259667E285;
      Complex complex0 = new Complex(2.1452336456259667E285);
      Complex complex1 = complex0.divide(2.1452336456259667E285);
      Complex complex2 = Complex.ONE;
      complex0.ZERO.abs();
      Complex complex3 = complex1.tanh();
      complex2.multiply(1035);
      complex2.isNaN();
      Complex complex4 = new Complex(2.1452336456259667E285);
      complex3.pow(complex4);
      Complex complex5 = complex4.sin();
      complex0.I.divide((-1.0));
      complex5.tan();
      Complex complex6 = complex5.I.add(complex1);
      Object object0 = complex6.I.readResolve();
      ((Complex) object0).I.exp();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.sinh();
      int int0 = 2147453692;
      // Undeclared exception!
      complex8.nthRoot(2147453692);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.I.reciprocal();
      complex2.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      complex4.asin();
      complex1.atan();
      Complex complex6 = complex4.tan();
      complex5.asin();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.7615941559557649);
      complex1.atan();
      complex3.sinh();
      complex1.toString();
      Complex complex8 = complex1.atan();
      complex6.acos();
      complex8.conjugate();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.INF;
      complex1.tanh();
      complex0.abs();
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex((-1020.273787663871), (-1020.273787663871));
      complex2.isNaN();
      Complex complex4 = complex3.multiply(0.9999973731445746);
      Complex complex5 = new Complex((-1021.598734));
      complex2.pow(complex5);
      Complex complex6 = complex4.sin();
      complex6.divide((double) 1035);
      Complex complex7 = new Complex(8.885765876316732);
      complex7.tan();
      Complex complex8 = Complex.NaN;
      complex8.add(complex0);
      complex7.readResolve();
      Complex complex9 = complex4.exp();
      complex1.getImaginary();
      complex9.sinh();
      Complex.valueOf(2233.062124696106, (double) 1035);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.I.reciprocal();
      complex2.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      complex4.asin();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex4.tan();
      complex7.ONE.multiply(Double.POSITIVE_INFINITY);
      complex5.asin();
      Complex complex8 = complex6.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.7615941559557649);
      complex1.atan();
      complex3.sinh();
      complex1.toString();
      complex4.add(400.6814914387134);
      complex1.atan();
      Complex.valueOf((-2696.319158826706), 20.0);
      complex8.tan();
      complex8.multiply(complex7);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2242.50888), (-538.0));
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = complex1.ZERO.log();
      Complex complex5 = complex4.ONE.multiply((-20.0));
      Complex complex6 = complex4.divide((-2242.50888));
      complex6.ONE.getArgument();
      complex6.ZERO.getField();
      complex6.ZERO.divide(complex1);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.NaN.tan();
      complex1.tan();
      complex0.acos();
      complex0.ZERO.toString();
      complex1.createComplex((-538.0), (-1066.219));
      Complex complex9 = complex2.divide(complex3);
      complex0.tan();
      complex5.I.subtract((-1066.219));
      complex5.cos();
      Complex complex10 = complex9.tanh();
      complex4.divide(complex8);
      complex0.ONE.reciprocal();
      Complex complex11 = Complex.valueOf((-2242.50888));
      complex10.equals(complex5);
      complex11.cosh();
      complex11.acos();
      complex0.add((-677.73409428675));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      Complex complex2 = Complex.valueOf(0.0, (-1485.8504689633342));
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex6.subtract(0.0);
      Complex complex9 = new Complex((-0.7429765791714795), (-1485.8504689633342));
      Complex complex10 = complex8.exp();
      complex3.abs();
      complex5.divide(6.283185307179586);
      Complex complex11 = complex6.pow(6.283185307179586);
      complex11.subtract(6.283185307179586);
      complex3.nthRoot(1651);
      complex2.getArgument();
      complex8.tanh();
      complex10.hashCode();
      Complex complex12 = new Complex(0.15841360999903875, (-1569.3893994156676));
      Complex complex13 = complex12.pow(complex7);
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.I.reciprocal();
      complex2.reciprocal();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      complex4.asin();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex4.tan();
      complex5.asin();
      Complex complex8 = complex6.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.7615941559557649);
      complex1.atan();
      complex3.sinh();
      complex1.toString();
      complex4.add(400.6814914387134);
      Complex complex9 = complex1.atan();
      complex7.acos();
      complex9.conjugate();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((double) (-145), (-1123.388272));
      complex1.reciprocal();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex1.NaN.exp();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.cosh();
      complex2.toString();
      Complex complex4 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.NaN;
      complex3.exp();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.reciprocal();
      complex4.readResolve();
      complex4.tanh();
      complex4.sinh();
      Complex complex8 = complex7.add((-1233.98914589));
      complex6.atan();
      complex8.acos();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = new Complex(2.2867766559333004E-7);
      complex0.pow(complex2);
      complex3.sin();
      Complex complex6 = complex1.divide(6.283185307179586);
      Complex complex7 = complex2.tan();
      complex1.INF.sqrt();
      Complex complex8 = complex2.add(complex6);
      Object object0 = new Object();
      complex7.exp();
      complex8.getImaginary();
      complex4.sinh();
      complex6.INF.pow((-1.0));
      Complex.valueOf((-393.756959606726), Double.POSITIVE_INFINITY);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.subtract((-527.29));
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.ONE.add((-527.29));
      Complex complex4 = complex2.I.negate();
      complex3.ZERO.divide(complex2);
      Complex complex5 = complex2.subtract(2.718281828459045);
      Complex complex6 = Complex.valueOf(350.9277290356815, 36.1438);
      complex0.divide(complex4);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = Complex.I;
      complex8.tanh();
      Complex complex9 = complex8.tanh();
      complex0.subtract(complex7);
      complex9.reciprocal();
      complex7.readResolve();
      complex9.atan();
      complex6.getField();
      complex1.cos();
      complex5.conjugate();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.185064946717304E-27);
      complex0.ONE.log();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.isNaN();
      Complex complex3 = complex0.cos();
      complex0.subtract(1.185064946717304E-27);
      Complex complex4 = new Complex((-1888.3941488), 1.185064946717304E-27);
      Complex complex5 = complex3.exp();
      complex2.abs();
      complex4.INF.toString();
      Complex complex6 = complex4.divide(20.0);
      Complex complex7 = complex4.pow(20.0);
      Complex complex8 = complex2.subtract(345.2384194781981);
      complex5.nthRoot(4089);
      complex7.getArgument();
      complex6.tanh();
      complex4.hashCode();
      Complex complex9 = Complex.valueOf(1.0142320772726397E304, 1.0142320772726397E304);
      complex5.pow(complex9);
      Complex complex10 = complex8.sqrt();
      complex10.divide(1143.79924501629);
      Complex.valueOf(254.2180271218149);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1839.87717622), (-1839.87717622));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.divide(1.895372379294713E-4);
      Complex complex5 = Complex.valueOf(1.895372379294713E-4, 1.895372379294713E-4);
      complex5.toString();
      Complex complex6 = new Complex(1.895372379294713E-4);
      complex6.ONE.multiply(1.895372379294713E-4);
      complex3.add(complex6);
      complex5.exp();
      Complex complex7 = complex1.multiply(complex4);
      complex4.acos();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      Complex complex2 = complex1.I.negate();
      complex2.INF.reciprocal();
      Complex.valueOf(6.283185307179586);
      complex0.sin();
      Complex complex3 = complex1.NaN.exp();
      complex0.hashCode();
      complex0.readResolve();
      Complex complex4 = new Complex((-4459120.583870002), 6.283185307179586);
      complex4.exp();
      complex2.getImaginary();
      Complex complex5 = complex3.sinh();
      Complex.valueOf((-1.0), (-1.0));
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.sinh();
      complex1.reciprocal();
      complex3.divide(6.283185307179586);
      complex1.asin();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.tan();
      complex0.asin();
      complex3.add(4819.0);
      Complex.valueOf((-1.0));
      Complex complex6 = complex2.atan();
      complex2.sinh();
      complex6.toString();
      Complex complex7 = Complex.valueOf((-772.0047595011958));
      complex7.add(7.221902646057552E211);
      complex7.atan();
      Complex complex8 = complex4.acos();
      complex8.conjugate();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6073861122131348);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.atan();
      complex1.ONE.add(complex2);
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = complex4.ONE.exp();
      complex5.NaN.pow(complex2);
      complex4.NaN.nthRoot(340);
      Complex complex6 = complex4.acos();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.divide((-3528.3197));
      complex4.toString();
      complex3.add(complex8);
      complex4.exp();
      complex6.multiply(complex3);
      complex5.acos();
      complex2.getField();
      Complex complex9 = complex0.exp();
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1839.87717622));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.divide((-1839.87717622));
      complex2.ONE.toString();
      complex0.readResolve();
      Complex complex5 = complex3.tanh();
      complex2.multiply((-1839.87717622));
      complex2.getField();
      Complex complex6 = complex1.sqrt();
      complex0.readResolve();
      Complex complex7 = complex6.add(3090.89);
      Complex complex8 = complex4.exp();
      Complex complex9 = complex6.multiply(complex2);
      Complex complex10 = Complex.ZERO;
      complex10.toString();
      Complex complex11 = Complex.valueOf((-1839.87717622), 3090.89);
      complex9.subtract(complex11);
      complex11.pow(complex7);
      complex5.getArgument();
      complex0.sqrt1z();
      complex8.createComplex(Double.NaN, 1.9069552421569824);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0016207555414490104);
      complex0.createComplex((-2975.3849563), (-2975.3849563));
      complex0.subtract(6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf(6.283185307179586, (-1188.04386626771));
      Complex complex4 = complex3.multiply(3679.754080682709);
      complex1.subtract((-1233.98914589));
      Complex complex5 = Complex.ZERO;
      complex5.pow((-1400.984907676));
      complex1.acos();
      Complex complex6 = Complex.INF;
      complex1.divide(complex2);
      complex4.cosh();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.I;
      complex8.negate();
      complex2.cos();
      complex1.divide((-1515.0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1839.87717622));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf((-1839.87717622), 1.0000006567151503);
      complex3.subtract(complex2);
      Complex complex5 = complex2.exp();
      Complex complex6 = Complex.valueOf(1.0000006567151503, 1211.79844);
      Complex complex7 = complex6.multiply((-1003));
      complex0.abs();
      complex5.getArgument();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex2.tan();
      Complex complex11 = complex1.pow(1839.87717622);
      complex7.divide(complex2);
      Complex complex12 = complex10.add(complex4);
      complex11.ZERO.tanh();
      complex8.toString();
      Complex complex13 = complex5.cosh();
      complex11.isNaN();
      complex13.add(complex9);
      Complex complex14 = complex12.tanh();
      complex14.ONE.exp();
      complex8.divide(complex1);
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.cosh();
      complex1.ONE.toString();
      Complex complex2 = complex1.I.add((-1233.98914589));
      Complex.valueOf((-1651.96));
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = (Complex)complex0.readResolve();
      Complex complex6 = complex4.tanh();
      complex5.sinh();
      Complex complex7 = complex6.add(0.0);
      complex4.atan();
      complex3.acos();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = complex4.NaN.divide((-1.0));
      complex5.I.asin();
      Complex complex6 = complex4.INF.atan();
      Complex complex7 = complex4.NaN.tan();
      Complex complex8 = complex3.asin();
      complex8.ZERO.add(344.94273974386);
      Complex.valueOf(3467.86364);
      complex4.getField();
      complex4.sqrt();
      Complex complex9 = Complex.ZERO;
      complex9.readResolve();
      Complex complex10 = Complex.NaN;
      complex10.add(20.0);
      Complex complex11 = Complex.valueOf(3467.86364, 344.94273974386);
      complex7.multiply(complex3);
      complex11.toString();
      complex6.subtract(complex2);
      Complex complex12 = complex5.pow(complex11);
      complex8.getArgument();
      complex12.sqrt1z();
      Complex complex13 = Complex.valueOf((-1.0));
      complex13.createComplex(1889.545, (-4128.892487));
      complex5.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex0.nthRoot(1629);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.tanh();
      Complex complex4 = new Complex(2.1452336456259667E285);
      complex4.sinh();
      complex1.getField();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex0.log();
      Complex complex7 = complex4.sqrt();
      complex7.ONE.log();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex2.pow(complex3);
      complex10.cos();
      Complex complex11 = Complex.valueOf((double) 4125, (-4474.458300097));
      complex4.tanh();
      Complex complex12 = complex9.add(0.0);
      complex0.abs();
      complex5.readResolve();
      complex4.createComplex(0.0, 4125);
      Complex complex13 = complex2.atan();
      Complex.valueOf(Double.POSITIVE_INFINITY, 2.2860509143963117E-8);
      complex13.pow(complex12);
      complex11.cos();
      complex8.tan();
      complex12.getField();
      complex0.isNaN();
      complex1.sqrt();
      complex9.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.41421356237309515);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide(0.41421356237309515);
      complex2.hashCode();
      Complex complex4 = complex0.tanh();
      complex4.abs();
      Complex complex5 = complex4.tanh();
      Complex complex6 = new Complex(1035, 1035);
      complex1.isNaN();
      complex5.multiply(20.0);
      Complex complex7 = new Complex(Double.NaN);
      complex3.pow(complex2);
      Complex complex8 = complex3.sin();
      complex5.divide(2233.062124696106);
      Complex complex9 = complex0.tan();
      complex9.add(complex5);
      complex7.readResolve();
      Complex complex10 = complex4.exp();
      complex10.getImaginary();
      complex3.sinh();
      Complex.valueOf(0.41421356237309515, 1123.14);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex1.NaN.exp();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex3.NaN.divide((-1.0));
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex3.INF.atan();
      complex1.readResolve();
      Complex complex7 = Complex.ZERO;
      complex6.multiply(complex0);
      complex7.divide(complex2);
      complex5.getImaginary();
      try { 
        complex3.nthRoot((-1418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,418
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(4819.0, 0.0);
      complex0.tan();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.asin();
      complex0.add(0.0);
      Complex.valueOf((-2251.955961366));
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.sinh();
      complex3.toString();
      Complex complex5 = complex2.add((-2077.534928992));
      Complex complex6 = complex5.atan();
      complex3.acos();
      complex6.conjugate();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.subtract((-527.29));
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.ONE.add((-527.29));
      Complex complex4 = complex2.I.negate();
      complex3.ZERO.divide(complex2);
      Complex complex5 = complex2.subtract(2.718281828459045);
      Complex complex6 = Complex.valueOf(350.9277290356815, 36.1438);
      complex0.divide(complex4);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = Complex.I;
      complex8.tanh();
      complex8.tanh();
      complex1.subtract((-2488.881531));
      Complex complex9 = new Complex((-2488.881531), (-4474.458300097));
      complex9.exp();
      complex9.abs();
      Complex complex10 = complex6.divide(20.0);
      complex8.NaN.pow(1365.503069);
      complex3.subtract(345.2384194781981);
      complex3.nthRoot(1651);
      complex7.getArgument();
      Complex complex11 = complex10.tanh();
      complex5.hashCode();
      complex8.pow(complex10);
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-6.79180673261558E-8));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = new Complex((-3012.46365394294), (-6.79180673261558E-8));
      complex0.multiply(complex2);
      complex0.conjugate();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.I.pow(complex4);
      Complex complex6 = complex3.I.negate();
      complex6.INF.toString();
      Complex complex7 = complex2.sinh();
      complex7.I.tanh();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex2.asin();
      Complex.valueOf((-6.79180673261558E-8));
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex10.tan();
      complex10.ONE.hashCode();
      Complex complex12 = new Complex((-2517.5079619), 0.0);
      complex9.INF.acos();
      Complex complex13 = complex11.multiply(complex12);
      Complex.valueOf(0.0, 0.0);
      Complex complex14 = complex3.cosh();
      complex14.ONE.sqrt1z();
      complex3.sqrt();
      complex9.getReal();
      complex1.add((-3012.46365394294));
      complex13.readResolve();
      complex11.cosh();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-1839.87717622));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.acos();
      complex3.divide((-1839.87717622));
      complex2.ONE.toString();
      complex1.add(complex2);
      Complex complex4 = complex1.exp();
      complex4.multiply(complex3);
      complex4.acos();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.INF.reciprocal();
      Complex.valueOf(6.283185307179586);
      complex0.sin();
      Complex complex4 = complex1.NaN.exp();
      complex0.hashCode();
      complex1.pow(6.283185307179586);
      complex4.cosh();
      complex3.add(6.283185307179586);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3119.901737167911));
      complex0.I.toString();
      Complex complex1 = complex0.exp();
      complex1.readResolve();
      Complex complex2 = complex0.conjugate();
      complex0.ONE.nthRoot(1);
      complex2.ZERO.subtract((-4.044932340334176E-9));
      complex1.getReal();
      Complex complex3 = complex0.tanh();
      complex1.hashCode();
      Complex complex4 = complex0.sin();
      complex4.cosh();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.divide(0.0);
      complex3.I.abs();
      complex0.ONE.add(complex4);
      complex3.subtract(complex5);
      Complex complex7 = complex0.cos();
      complex7.INF.getArgument();
      complex3.I.reciprocal();
      Complex complex8 = complex7.ZERO.log();
      complex3.acos();
      complex3.ZERO.pow(0.0);
      Complex complex9 = complex3.acos();
      complex1.reciprocal();
      complex6.isNaN();
      complex7.getArgument();
      Complex complex10 = complex9.add(5810.7);
      complex10.INF.add(1.0);
      complex10.getArgument();
      complex4.sinh();
      complex5.getArgument();
      complex8.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(7);
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.I.pow(complex1);
      complex1.INF.divide((double) 7);
      Complex complex4 = complex0.exp();
      complex2.isInfinite();
      Complex.valueOf((double) 7, 0.0);
      Complex complex5 = complex3.divide(complex4);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(1171.5275772, 20.0);
      complex0.INF.getArgument();
      Complex complex1 = complex0.createComplex((-1049.105504362783), (-895.98932129));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.pow((-1049.105504362783));
      complex3.ONE.add(0.45870959758758545);
      complex1.exp();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.NaN.negate();
      complex3.INF.pow(complex2);
      Complex complex5 = new Complex(0.0, 0.0);
      complex5.NaN.getArgument();
      Complex complex6 = complex3.ONE.pow(complex5);
      complex4.ONE.acos();
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex7.NaN.divide(Double.NaN);
      Complex complex9 = complex8.ZERO.createComplex(0.0, (-734.4203741));
      complex9.NaN.divide(complex5);
      Complex complex10 = complex0.divide(complex2);
      complex10.NaN.createComplex(0.0, 0.0);
      Complex.valueOf((-2375.38734669));
      Complex complex11 = complex4.atan();
      Complex.valueOf(0.0, 2.0);
      complex7.getArgument();
      complex3.equals((Object) null);
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(1871.3694356295, 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.sin();
      try { 
        complex2.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.ONE.reciprocal();
      complex3.NaN.abs();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.INF.multiply(complex4);
      complex3.acos();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.NaN.multiply((-3278));
      complex3.sinh();
      complex7.toString();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex9.I.cosh();
      complex0.isNaN();
      complex4.NaN.hashCode();
      Complex complex11 = complex4.ZERO.subtract(complex7);
      complex11.ZERO.conjugate();
      complex6.hashCode();
      Complex complex12 = complex10.ONE.subtract(complex7);
      complex12.I.getField();
      complex12.ZERO.multiply(complex4);
      complex9.sqrt();
      complex3.readResolve();
      Complex complex13 = complex6.subtract(complex9);
      complex8.multiply((-3278));
      complex8.getReal();
      Complex complex14 = complex0.atan();
      complex14.getReal();
      complex4.divide(0.0);
      complex13.tan();
      Complex.valueOf(0.0);
      complex10.equals(complex2);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex1.NaN.exp();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex3.NaN.divide((-1.0));
      complex4.I.asin();
      complex3.INF.atan();
      complex3.NaN.tan();
      Complex complex5 = complex2.asin();
      complex5.ZERO.add(344.94273974386);
      Complex complex6 = Complex.valueOf(3467.86364);
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.sinh();
      complex8.INF.toString();
      complex0.add(2068.5821);
      complex3.atan();
      complex3.acos();
      complex6.conjugate();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.add((-892.99092));
      Complex complex3 = complex2.INF.createComplex(0.0, (-826.8));
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.INF.exp();
      complex5.asin();
      Complex complex6 = complex0.INF.sqrt1z();
      complex6.INF.abs();
      Complex complex7 = complex6.INF.sin();
      complex2.hashCode();
      complex7.NaN.multiply(Double.POSITIVE_INFINITY);
      complex0.isInfinite();
      Complex complex8 = complex4.ONE.multiply(complex5);
      complex1.getImaginary();
      complex3.cosh();
      complex8.asin();
      Complex complex9 = complex7.sinh();
      complex5.toString();
      complex6.conjugate();
      complex0.equals(complex8);
      Complex complex10 = complex2.reciprocal();
      complex1.add(complex4);
      complex7.toString();
      complex10.isInfinite();
      complex0.subtract(0.0);
      complex3.exp();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ONE.multiply(1);
      Complex complex3 = complex2.cosh();
      complex3.ZERO.getArgument();
      Complex complex4 = complex1.ONE.log();
      complex1.getImaginary();
      Complex complex5 = complex4.sin();
      Complex.valueOf(0.0, 0.0);
      complex5.add(complex2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(2.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(93.7713312, 93.7713312);
      complex0.cos();
      complex0.add(complex1);
      complex1.multiply(2.0);
      Complex complex2 = complex1.createComplex(996.309074, 93.7713312);
      Complex complex3 = complex0.conjugate();
      complex3.NaN.exp();
      complex2.atan();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.tan();
      complex0.ONE.getField();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = Complex.valueOf(4581.596141221);
      Complex complex4 = complex0.subtract(1.0);
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex5.ONE.add(complex4);
      complex0.getField();
      Complex complex7 = complex2.multiply((-979));
      complex7.ZERO.atan();
      complex0.I.exp();
      complex5.ONE.subtract(0.0);
      Complex complex8 = complex5.subtract(complex1);
      Complex complex9 = complex8.I.acos();
      complex9.tanh();
      Complex complex10 = complex2.cosh();
      complex10.createComplex(0.0, 0.0);
      Complex complex11 = complex6.conjugate();
      Complex complex12 = complex11.ZERO.cos();
      complex3.cos();
      complex1.ZERO.tan();
      complex2.multiply((-1563.0));
      complex12.getArgument();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      complex1.nthRoot(4125);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.NaN.sinh();
      complex4.NaN.getField();
      Complex complex5 = complex0.ONE.sqrt();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex7.ZERO.cosh();
      complex8.atan();
      Complex complex9 = complex6.I.pow(complex5);
      complex6.NaN.cos();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex5.I.tanh();
      complex11.I.add(0.0);
      complex10.NaN.abs();
      complex1.NaN.readResolve();
      Complex complex12 = complex1.createComplex(558.8243450734, 4125);
      complex12.ONE.atan();
      Complex.valueOf(0.0, (double) 4125);
      Complex complex13 = complex10.pow(complex2);
      Complex complex14 = complex3.cos();
      complex14.I.tan();
      complex13.getField();
      complex5.isNaN();
      complex9.sqrt();
      complex10.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.subtract((-527.29));
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.ONE.add((-527.29));
      complex2.I.negate();
      Complex complex4 = complex3.ZERO.divide(complex2);
      Complex complex5 = complex4.ONE.subtract((-527.29));
      Complex complex6 = Complex.valueOf(350.9277290356815, (-4474.458300097));
      Complex complex7 = complex6.INF.divide(complex0);
      complex7.ZERO.sqrt();
      complex7.tanh();
      Complex complex8 = complex3.ONE.tanh();
      Complex complex9 = complex8.ZERO.subtract((-527.29));
      Complex complex10 = complex9.I.exp();
      complex10.I.abs();
      Complex complex11 = complex3.ZERO.divide(119.9);
      complex11.ONE.subtract(1.0);
      complex11.nthRoot(1600);
      complex0.getArgument();
      complex0.tanh();
      complex5.hashCode();
      complex8.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.multiply((-145));
      complex3.INF.tanh();
      Complex complex4 = complex3.NaN.multiply(complex2);
      complex0.divide((double) (-145));
      complex2.ZERO.add(complex1);
      Complex.valueOf(0.0, 0.0);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.divide(706.44);
      complex3.ZERO.divide(706.44);
      Complex complex4 = complex3.ZERO.multiply(1);
      complex4.ONE.add(complex2);
      Complex complex5 = complex3.I.add(complex0);
      complex5.NaN.tanh();
      complex3.acos();
      Complex complex6 = complex0.subtract(0.0);
      complex1.equals(complex0);
      complex1.getReal();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex0.createComplex(0.0, 0.0);
      complex8.I.readResolve();
      Complex complex9 = complex8.I.multiply(792);
      complex8.readResolve();
      complex1.abs();
      complex7.isInfinite();
      complex1.subtract(2782.5);
      complex3.createComplex(706.44, 0.0);
      complex9.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.ZERO.cosh();
      complex3.ONE.toString();
      Complex complex4 = complex3.I.add((-1233.98914589));
      Complex complex5 = complex0.ZERO.add(complex2);
      Complex.valueOf((-1651.96));
      Complex complex6 = complex5.createComplex(0.0, 0.0);
      complex6.I.tanh();
      Complex complex7 = complex5.I.divide(0.0);
      complex7.INF.readResolve();
      Complex complex8 = complex3.I.exp();
      complex0.multiply(0.0);
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex4.reciprocal();
      complex2.readResolve();
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex9.INF.multiply(0.0);
      complex12.ZERO.getField();
      complex11.NaN.sqrt();
      complex11.readResolve();
      complex9.ONE.add((-828.2193102352743));
      Complex complex13 = complex8.exp();
      complex13.NaN.multiply(complex2);
      complex9.toString();
      complex1.subtract(complex13);
      complex0.ZERO.pow(complex9);
      complex5.getArgument();
      complex5.sqrt1z();
      complex10.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(0.0, (-156.1));
      Complex complex3 = complex2.NaN.exp();
      complex3.ONE.divide(0.0);
      Complex complex4 = complex1.INF.cosh();
      complex1.readResolve();
      complex4.getArgument();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.INF.cos();
      complex7.I.getArgument();
      complex7.ONE.toString();
      complex7.I.atan();
      Complex complex8 = Complex.I;
      complex0.NaN.conjugate();
      Complex complex9 = Complex.valueOf((-661.151925498), 0.22079706192016602);
      complex8.I.nthRoot(1526);
      Complex complex10 = complex6.divide(complex8);
      complex9.getArgument();
      complex10.isInfinite();
      complex3.hashCode();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      double double1 = 700.9189508082355;
      complex0.INF.add(700.9189508082355);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.asin();
      complex2.NaN.sqrt1z();
      complex1.getField();
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = Complex.valueOf((-4.713790209541894E-139));
      complex1.I.abs();
      complex3.NaN.nthRoot(1);
      Complex complex4 = complex1.NaN.add((-1044.1015524));
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex5.ZERO.divide(complex2);
      complex0.getField();
      complex0.isInfinite();
      complex1.abs();
      complex5.NaN.subtract(complex4);
      complex0.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.divide(complex7);
      complex8.sqrt1z();
      complex1.I.getField();
      complex0.isNaN();
      complex3.getImaginary();
      complex6.subtract((-4.713790209541894E-139));
      complex2.createComplex(1, 243.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-830.0), 834.327);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cosh();
      complex2.ZERO.add(8.378574405736031E-247);
      Complex complex3 = complex2.ONE.subtract(4.634817120492781E-114);
      Complex complex4 = complex3.NaN.divide(complex1);
      complex1.hashCode();
      Complex complex5 = complex2.negate();
      complex1.ONE.pow(complex2);
      complex5.INF.tan();
      complex5.I.pow(complex4);
      Complex complex6 = complex1.add(complex0);
      complex6.ZERO.add(complex0);
      complex6.getField();
      Complex complex7 = Complex.valueOf((-517.0491974164765));
      Complex complex8 = complex7.ONE.divide((-830.0));
      Complex complex9 = complex7.I.conjugate();
      Complex complex10 = complex6.I.pow(8.378574405736031E-247);
      complex3.INF.divide(complex8);
      complex6.toString();
      complex10.ONE.sinh();
      complex5.isNaN();
      complex6.readResolve();
      complex0.readResolve();
      Complex complex11 = complex10.pow(complex5);
      complex11.abs();
      complex11.log();
      try { 
        complex9.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.NaN.cosh();
      complex1.I.toString();
      Complex complex3 = complex2.ZERO.asin();
      complex1.NaN.nthRoot(321);
      complex0.hashCode();
      Complex.valueOf((-3756.0149273));
      Complex complex4 = complex0.atan();
      complex4.I.sin();
      Complex complex5 = complex3.log();
      Complex complex6 = Complex.valueOf((double) 321);
      complex5.ZERO.getArgument();
      complex0.isInfinite();
      complex6.getField();
      Complex complex7 = complex4.INF.log();
      Complex complex8 = complex0.createComplex(321, (-437.0389489373));
      complex8.INF.log();
      Complex complex9 = Complex.valueOf(2373.486523);
      complex9.atan();
      complex4.isInfinite();
      Complex complex10 = complex8.multiply(0.0);
      complex10.I.divide(Double.NaN);
      complex6.getImaginary();
      Complex complex11 = complex6.sqrt1z();
      complex11.isNaN();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.negate();
      complex1.tanh();
      complex0.isInfinite();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = Complex.valueOf(1130.0, 1130.0);
      Complex complex4 = complex1.ONE.atan();
      Complex complex5 = complex2.reciprocal();
      complex2.ONE.getArgument();
      complex3.ZERO.divide(complex5);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex2.ZERO.exp();
      Complex complex8 = complex6.atan();
      complex3.acos();
      complex5.abs();
      complex6.cos();
      Complex.valueOf(1130.0, 0.1510767638683319);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.atan();
      complex10.ZERO.toString();
      complex0.I.divide(complex10);
      complex10.pow(0.0);
      complex10.INF.divide(6.283185307179586);
      complex1.conjugate();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex2.tan();
      complex12.sinh();
      complex7.getArgument();
      Complex complex13 = complex11.log();
      complex13.divide(complex11);
      complex9.nthRoot(188);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.ZERO.cosh();
      Complex complex3 = complex0.divide(complex2);
      complex3.INF.readResolve();
      complex1.abs();
      Complex complex4 = complex1.divide(complex0);
      complex1.tan();
      complex1.getArgument();
      Complex complex5 = complex0.add(complex3);
      complex4.getImaginary();
      complex4.ZERO.cos();
      Complex complex6 = complex3.add(1683.7911882);
      complex6.NaN.getField();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex7.I.asin();
      complex5.NaN.multiply(37);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex5.divide(complex9);
      complex8.pow(Double.NaN);
      complex0.divide(complex3);
      complex10.abs();
      complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(2.1452336456259667E285);
      Complex complex1 = complex0.divide(2.1452336456259667E285);
      complex0.hashCode();
      Complex complex2 = complex0.tanh();
      complex0.ZERO.abs();
      Complex complex3 = complex2.INF.tanh();
      complex2.multiply(1035);
      complex2.isNaN();
      complex0.multiply(0.0);
      Complex complex4 = new Complex(2.1452336456259667E285);
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex0.I.divide((-1.0));
      complex6.tan();
      Complex complex8 = complex6.I.add(complex1);
      complex8.I.readResolve();
      Complex complex9 = complex6.exp();
      complex5.getImaginary();
      complex9.sinh();
      Complex.valueOf(0.0, (-2068.69));
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-449.36087078);
      Complex complex1 = complex0.multiply((-449.36087078));
      Complex complex2 = complex1.INF.subtract((-449.36087078));
      Complex.valueOf((-449.36087078), 2711.739);
      complex2.INF.readResolve();
      Complex.valueOf(416.965);
      complex1.reciprocal();
      try { 
        complex1.nthRoot((-505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -505
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.I.divide(0.0);
      complex2.subtract(complex0);
      Complex complex3 = complex1.ZERO.sin();
      complex3.INF.multiply(1);
      complex0.toString();
      complex2.ZERO.exp();
      complex2.NaN.atan();
      complex0.getReal();
      complex1.add(complex2);
      Complex complex4 = complex1.cosh();
      complex0.abs();
      Complex complex5 = Complex.valueOf(0.0, (-1714.10800176));
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex7.multiply(0.0);
      complex6.sqrt();
      Complex complex9 = complex6.subtract(253.6);
      Complex complex10 = new Complex(1.1483560326413004E-7, 0.0);
      complex6.equals(complex10);
      Complex complex11 = complex10.multiply(1363);
      complex11.ZERO.sin();
      complex6.log();
      complex10.hashCode();
      complex10.subtract(complex9);
      complex8.multiply(37);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex((-2580.0), (-2580.0));
      complex0.getReal();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.multiply(1.0);
      Complex complex4 = complex3.INF.divide(214.699341643707);
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex4.I.tanh();
      assertEquals(1.557407724654902, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.tan();
      Complex complex8 = complex3.ONE.sinh();
      Complex complex9 = complex7.INF.sin();
      assertTrue(complex9.equals((Object)complex5));
      
      complex7.ONE.getField();
      complex7.ONE.readResolve();
      Complex complex10 = complex1.negate();
      Complex complex11 = Complex.valueOf((-2580.0), (-2580.0));
      Complex complex12 = complex3.subtract((-2580.0));
      complex7.getImaginary();
      Complex complex13 = complex3.sinh();
      Complex complex14 = complex0.multiply(complex12);
      complex12.isInfinite();
      Complex complex15 = complex0.subtract(complex13);
      complex15.INF.getField();
      complex8.getImaginary();
      Complex complex16 = complex7.divide(complex2);
      complex10.hashCode();
      Complex complex17 = complex16.sinh();
      assertEquals((-0.8896880005211341), complex17.getImaginary(), 0.01);
      
      Complex complex18 = complex0.createComplex(0.0, 1.0);
      complex18.INF.conjugate();
      Complex complex19 = complex14.createComplex(0.0, (-2580.0));
      Complex complex20 = complex1.cos();
      assertEquals(Double.NEGATIVE_INFINITY, complex20.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex11));
      
      complex0.tanh();
      Complex complex21 = complex13.negate();
      complex7.getImaginary();
      double double0 = complex21.abs();
      assertEquals(1.1752011936438014, double0, 0.01);
      
      Complex complex22 = complex3.add(1373.0);
      assertEquals(1374.0, complex22.getReal(), 0.01);
      
      boolean boolean0 = complex19.equals(complex3);
      assertEquals(2581.0, complex14.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-725.826134001));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.createComplex((-725.826134001), (-725.826134001));
      Complex complex3 = complex1.INF.subtract((-725.826134001));
      Complex complex4 = complex3.multiply(complex0);
      assertTrue(complex3.isInfinite());
      assertTrue(complex4.equals((Object)complex3));
      
      complex1.ZERO.getField();
      complex2.NaN.hashCode();
      Complex complex5 = complex1.asin();
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      
      Complex complex6 = complex2.cos();
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getReal(), 0.01);
      
      complex2.hashCode();
      Complex complex7 = complex0.multiply(1626);
      assertEquals((-1180193.2938856261), complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
  }
}
