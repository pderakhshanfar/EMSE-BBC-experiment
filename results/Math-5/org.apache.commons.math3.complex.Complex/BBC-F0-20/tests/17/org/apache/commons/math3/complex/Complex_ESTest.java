/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:06:16 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1534.726160448), 1242.0);
      Complex complex2 = Complex.valueOf((-1534.726160448), Double.POSITIVE_INFINITY);
      complex2.subtract((-1963.056279041837));
      Complex.valueOf(3.0227439688367925E-44, 0.0);
      Complex complex3 = complex0.pow((-515.0));
      Complex complex4 = complex0.createComplex((-1534.726160448), (-1325.446915689));
      Complex complex5 = complex2.multiply(complex3);
      Complex complex6 = complex5.multiply(1387);
      Complex complex7 = complex4.tan();
      Complex complex8 = Complex.valueOf((-7.938061814));
      complex5.getField();
      complex7.nthRoot(1314);
      complex7.sqrt();
      Complex complex9 = Complex.ZERO;
      complex4.abs();
      Complex complex10 = Complex.NaN;
      complex6.asin();
      Complex.valueOf(5.421426804919225E-295);
      complex8.add(complex3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(713.0, (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-829.1498119195066), 5.662495731848751E219);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.subtract((-829.1498119195066));
      complex1.toString();
      Complex complex5 = complex1.ZERO.reciprocal();
      Complex complex6 = complex0.exp();
      Complex complex7 = Complex.valueOf((-829.1498119195066));
      complex6.nthRoot(2157);
      Complex complex8 = complex2.pow(complex4);
      Complex complex9 = Complex.I;
      complex8.NaN.multiply(complex9);
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex2.log();
      complex11.ZERO.divide(complex5);
      Complex complex12 = complex0.acos();
      complex12.ONE.divide(complex7);
      complex1.atan();
      complex4.add(complex1);
      complex10.multiply(2157);
      complex1.atan();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(5.267478159657644E-18);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.add(complex2);
      complex0.cos();
      complex2.hashCode();
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.valueOf(5.267478159657644E-18);
      complex5.getArgument();
      Complex complex6 = complex5.multiply((-2522));
      Complex complex7 = complex6.subtract(2.689623698321582E-228);
      complex5.readResolve();
      complex2.tanh();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = Complex.ZERO;
      complex9.getField();
      Complex complex10 = complex7.atan();
      Complex complex11 = complex7.tan();
      complex8.getField();
      Complex complex12 = complex4.asin();
      Complex complex13 = complex10.atan();
      complex11.add(complex4);
      complex8.multiply(5.267478159657644E-18);
      complex7.divide(complex10);
      complex12.tan();
      complex13.toString();
      Complex complex14 = new Complex(5.267478159657644E-18, (-20.0));
      complex14.multiply((-1.0));
      complex2.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.sin();
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      complex2.I.cos();
      complex1.multiply(3.975449484028966E-31);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(1111.40568);
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-303.99804628), Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2664.49));
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex((-1793.798493876574));
      complex0.equals(complex2);
      complex1.cos();
      Complex.valueOf(2789.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      complex0.multiply(2327);
      complex0.createComplex(Double.POSITIVE_INFINITY, (-27.26894233301209));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 792.92;
      Complex complex0 = new Complex(792.92);
      try { 
        complex0.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-4.83901764243093E-296), (-4.83901764243093E-296));
      double double0 = (-11.203569);
      Complex complex1 = complex0.subtract((-4.83901764243093E-296));
      Complex complex2 = Complex.valueOf(1050.5604, 3841992.0);
      Complex complex3 = complex0.createComplex(1537.89357, 0.41421356237309515);
      complex3.multiply(complex2);
      Complex complex4 = complex3.multiply((-3892));
      Complex complex5 = Complex.INF;
      complex5.tan();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.getField();
      complex5.nthRoot(1387);
      complex4.sqrt();
      Complex complex7 = Complex.ZERO;
      complex3.abs();
      complex6.sin();
      Complex complex8 = Complex.NaN;
      try { 
        complex7.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4099.470723193273));
      Complex complex1 = complex0.I.tan();
      complex1.ONE.pow((-4099.470723193273));
      Complex complex2 = complex0.ZERO.multiply((-621));
      Complex complex3 = complex0.multiply(2164.8661791502);
      complex3.toString();
      Complex complex4 = complex1.subtract(171092.50893026378);
      Complex.valueOf((double) (-621));
      complex1.add(2401.24196642);
      Complex complex5 = Complex.valueOf(2401.24196642, (-8.794689652049879E-8));
      Complex complex6 = complex2.pow(complex5);
      complex6.NaN.pow((-20.0));
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-4.83901764243093E-296), (-4.83901764243093E-296));
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(3.7802628881590106E-288);
      Complex complex3 = new Complex((-4.83901764243093E-296), 3696.73);
      complex1.equals(complex3);
      Complex complex4 = complex1.cos();
      complex2.sqrt();
      Complex complex5 = new Complex(3.7802628881590106E-288, (-204.0));
      complex2.pow(171092.50893026);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(complex0);
      complex0.multiply(Double.NaN);
      Complex complex1 = new Complex(5.4679180659102885E135);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = complex0.subtract(2509.97392877);
      complex0.ONE.sinh();
      complex1.getImaginary();
      complex0.ZERO.atan();
      complex1.log();
      Complex complex2 = new Complex(2509.97392877, (-1452.523));
      Complex complex3 = complex2.tan();
      Complex.valueOf(2509.97392877);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 2509.97392877);
      complex4.abs();
      Complex complex5 = Complex.I;
      Complex.valueOf((-1452.523));
      Complex complex6 = Complex.valueOf((-1452.523));
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex4.tanh();
      complex4.getImaginary();
      complex3.conjugate();
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.INF;
      complex8.readResolve();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cosh();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.atan();
      complex2.isInfinite();
      Complex complex3 = complex1.divide((-1501.45));
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1203.23), (-1203.23));
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.readResolve();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = Complex.valueOf((-1203.23));
      complex3.NaN.tanh();
      Complex complex4 = complex0.sqrt1z();
      complex4.exp();
      complex0.ONE.reciprocal();
      Complex complex5 = complex0.createComplex((-779.845877), (-0.05417713522911072));
      complex5.INF.acos();
      Complex complex6 = complex1.log();
      complex6.negate();
      complex2.cos();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.divide(complex1);
      complex3.INF.getArgument();
      complex1.ZERO.acos();
      complex1.add(0.0);
      complex1.asin();
      Complex complex4 = complex2.atan();
      complex2.equals((Object) null);
      Complex complex5 = Complex.ONE;
      complex5.divide((-2508.97392877));
      complex0.cos();
      Complex.valueOf(0.7853981633974483);
      complex4.pow(6.283185307179586);
      Complex.valueOf(20.0);
      Complex complex6 = new Complex(2.0, Double.NaN);
      complex6.reciprocal();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1997.4, 20.0);
      complex0.divide(complex1);
      Complex complex2 = complex1.tan();
      complex2.NaN.readResolve();
      complex2.INF.add((-789.51));
      Complex complex3 = complex1.sqrt1z();
      complex0.multiply((-18.957159325759974));
      complex3.getField();
      Complex complex4 = new Complex((-4157.0), (-81.6148743));
      try { 
        complex4.nthRoot((-98));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -98
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.valueOf((-464.5), 865.297);
      complex2.ZERO.getArgument();
      Complex complex5 = complex0.multiply(934.0);
      Complex complex6 = complex0.tanh();
      complex2.getField();
      complex6.NaN.pow(1276.513281950984);
      Complex complex7 = Complex.valueOf(1295066.064438032, 934.0);
      complex6.ONE.subtract((-1655.0));
      complex7.ONE.subtract(5636.7608571921455);
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex8.NaN.createComplex(0.0, 0.0);
      complex9.INF.conjugate();
      complex8.NaN.acos();
      complex7.divide(complex2);
      Complex complex10 = complex0.acos();
      complex10.multiply(complex6);
      complex5.divide(complex2);
      Complex complex11 = complex3.negate();
      complex6.asin();
      Complex.valueOf(1295066.064438032, 2538.5738102226233);
      complex4.exp();
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-4.83901764243093E-296), 0.0);
      Complex complex1 = complex0.subtract((-11.203569));
      complex0.getField();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf(0.0, (-573.3712));
      Complex complex4 = complex1.divide(complex2);
      complex3.tan();
      Complex complex5 = Complex.INF;
      complex5.sqrt1z();
      Complex complex6 = Complex.ZERO;
      complex6.multiply((-3260.52885062438));
      Complex complex7 = Complex.NaN;
      complex7.getField();
      Complex complex8 = Complex.I;
      complex8.nthRoot(1023);
      complex3.sqrt();
      Complex complex9 = Complex.ZERO;
      complex3.abs();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.sin();
      Complex complex12 = complex11.subtract(complex4);
      complex4.asin();
      complex12.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.createComplex((-282.7842), 0.0);
      Complex complex1 = Complex.valueOf((-282.7842), 0.0);
      complex0.NaN.pow(complex1);
      Complex complex2 = complex0.multiply((-715.618));
      complex2.ZERO.getField();
      complex2.nthRoot(1);
      Complex complex3 = complex2.sqrt();
      complex3.ZERO.pow(Double.NaN);
      complex3.abs();
      complex2.sin();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 1.2773080633674971E271;
      Complex complex0 = new Complex(1.2773080633674971E271);
      Complex complex1 = new Complex(1.2773080633674971E271, (-3280.3));
      Complex complex2 = complex1.subtract((-3280.3));
      Complex complex3 = complex1.divide(complex2);
      Complex.valueOf((-20.0), (-3280.3));
      complex3.divide(complex2);
      complex2.tan();
      complex2.sqrt1z();
      complex2.multiply(2.138845797954471E-293);
      complex0.getField();
      try { 
        complex1.nthRoot((-1512));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,512
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-4.83901764243093E-296), 0.0);
      Complex complex1 = complex0.subtract((-1325.44692));
      complex1.getField();
      Complex complex2 = Complex.valueOf(1794.404834542654, 159.6);
      complex2.createComplex(2.414213562373095, (-412.902));
      Complex complex3 = Complex.valueOf(2390.87461776247, (-282.7842));
      complex3.ZERO.divide((-4.83901764243093E-296));
      Complex complex4 = complex3.pow(complex2);
      complex4.multiply((-1325.44692));
      Complex complex5 = Complex.NaN;
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-4.83901764243093E-296), 0.0);
      Complex complex1 = complex0.subtract((-1325.446915689));
      complex1.getField();
      Complex complex2 = Complex.valueOf(1806.1208529319197, 159.6);
      Complex complex3 = complex2.createComplex((-412.902), 1699.504256631197);
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex0.multiply(221);
      Complex complex6 = complex4.pow(3128.0);
      complex6.I.multiply(1188);
      complex2.reciprocal();
      complex6.tan();
      Complex.valueOf(2.414213562373095);
      complex1.abs();
      Complex complex7 = Complex.I;
      complex0.getImaginary();
      Complex.valueOf(Double.NaN);
      Complex complex8 = Complex.valueOf(20.0);
      Complex complex9 = new Complex(0.0);
      complex8.tanh();
      complex1.hashCode();
      complex9.divide(complex8);
      complex8.reciprocal();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-419.212933715));
      complex1.INF.multiply(complex0);
      Complex complex2 = complex0.createComplex((-282.7842), (-282.7842));
      Complex.valueOf(3280.389, 255.9497);
      Complex complex3 = complex2.pow(complex0);
      complex1.multiply(944.40161);
      complex2.getField();
      complex0.nthRoot(1239);
      complex1.sqrt();
      complex2.abs();
      complex3.sin();
      Complex complex4 = Complex.valueOf(255.9497);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.pow(0.0);
      Complex.valueOf(0.0);
      complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(2214.973927753584);
      Complex.valueOf(Double.NaN);
      Complex complex3 = new Complex(Double.NaN);
      complex2.hashCode();
      Complex complex4 = Complex.valueOf(1513.719032);
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.reciprocal();
      complex1.INF.getArgument();
      complex0.negate();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.NaN;
      complex4.multiply(396);
      complex3.atan();
      Complex complex5 = Complex.valueOf((-1597.0));
      complex1.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.divide(complex1);
      complex3.INF.getArgument();
      Complex complex4 = Complex.ONE;
      complex4.add(7.091500562953208E248);
      complex0.tan();
      complex1.getImaginary();
      Complex.valueOf((-607.9545885370524));
      Complex complex5 = Complex.valueOf((double) 1732);
      Complex complex6 = new Complex(0.0);
      Complex complex7 = complex5.tanh();
      complex3.hashCode();
      complex2.getImaginary();
      complex7.conjugate();
      complex0.divide((-607.9545885370524));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-4.83901764243093E-296), 0.0);
      Complex complex1 = complex0.subtract((-11.203569));
      complex0.getField();
      Complex.valueOf((-1325.446915689), (-11.203569));
      Complex complex2 = complex0.createComplex(0.41421356237309515, 159.6);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.multiply(1387);
      Complex complex5 = complex1.pow(158.37358862247825);
      complex2.reciprocal();
      complex3.tan();
      Complex complex6 = Complex.valueOf((double) 1387);
      complex4.abs();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.valueOf((-4.83901764243093E-296));
      complex8.nthRoot(7);
      complex4.atan();
      complex1.cos();
      complex5.asin();
      complex5.nthRoot(7);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.cos();
      complex1.NaN.sqrt1z();
      complex1.log();
      Complex complex2 = Complex.valueOf(2534.9833, 2534.9833);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.add(0.0);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex1.atan();
      Object object0 = complex0.readResolve();
      complex5.equals(object0);
      Complex complex7 = Complex.valueOf(1.042139023692827E22, 0.0);
      Complex complex8 = complex7.divide(1.042139023692827E22);
      Complex complex9 = complex1.cos();
      complex6.abs();
      Complex complex10 = complex4.reciprocal();
      complex10.hashCode();
      complex9.getField();
      complex9.subtract((-20.0));
      complex8.isNaN();
      complex3.cos();
      Complex complex11 = Complex.NaN;
      complex11.getArgument();
      Complex complex12 = Complex.NaN;
      complex12.acos();
      complex6.conjugate();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.divide(complex1);
      complex3.INF.getArgument();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.add(7.091500562953208E248);
      complex0.reciprocal();
      Complex complex6 = complex5.tan();
      Complex.valueOf(2.175685405731201);
      complex2.abs();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.getImaginary();
      Complex complex9 = Complex.valueOf((-412.902));
      Complex.valueOf(3457.147644);
      Complex complex10 = new Complex(2534.9833);
      complex6.tanh();
      complex9.hashCode();
      complex8.getImaginary();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-4.83901764243093E-296), 0.0);
      Complex complex1 = complex0.subtract((-1325.446915689));
      complex1.getField();
      Complex complex2 = Complex.valueOf(1794.404834542654, 159.6);
      Complex complex3 = complex2.createComplex(2.414213562373095, (-412.902));
      complex2.multiply(complex0);
      Complex complex4 = complex3.multiply(1387);
      complex2.pow(1742.52808);
      Complex complex5 = complex3.reciprocal();
      complex1.tan();
      Complex complex6 = Complex.valueOf(2.175685405731201);
      complex6.abs();
      complex3.pow(complex4);
      complex1.tanh();
      complex1.readResolve();
      complex4.divide(complex3);
      Complex complex7 = complex3.asin();
      Complex complex8 = Complex.ZERO;
      complex7.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.reciprocal();
      complex2.getArgument();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.log();
      Complex complex5 = complex2.multiply((-1.4291517981101049E-8));
      complex4.multiply(complex5);
      Complex complex6 = complex3.subtract(1211.82186726625);
      complex6.getField();
      Complex complex7 = complex1.sinh();
      complex4.cosh();
      complex3.tanh();
      Complex complex8 = complex7.sinh();
      Complex.valueOf(1.0, 0.0);
      complex3.pow(complex8);
      Complex complex9 = complex7.tanh();
      complex6.readResolve();
      complex9.divide(complex2);
      Complex complex10 = new Complex(1.0, (-1422.0164));
      complex10.asin();
      Complex complex11 = Complex.ZERO;
      complex10.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, 827.1);
      complex0.ZERO.divide(complex1);
      complex0.pow(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.INF.reciprocal();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.971384873120407E-4);
      Complex complex1 = Complex.valueOf(0.40611594915390015, 7.971384873120407E-4);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.INF.sinh();
      complex3.exp();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex2.ONE.divide(1.586013579247616E15);
      complex5.ONE.readResolve();
      Complex complex6 = complex5.tanh();
      complex6.I.sinh();
      Complex complex7 = complex1.ONE.tan();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.pow(1.2710331127772166E-8);
      complex8.subtract(complex9);
      complex7.ONE.conjugate();
      Complex complex11 = Complex.valueOf(7.971384873120407E-4, (-3829.504227137737));
      complex7.toString();
      Complex complex12 = complex4.log();
      complex0.abs();
      complex12.pow(complex10);
      try { 
        complex11.nthRoot((-600));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -600
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = complex0.subtract(2509.97392877);
      complex1.sinh();
      complex1.getImaginary();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex1.asin();
      complex6.atan();
      complex0.equals(complex5);
      Complex complex8 = complex5.divide(2509.97392877);
      Complex complex9 = complex8.cos();
      complex4.abs();
      Complex complex10 = complex7.reciprocal();
      complex3.hashCode();
      complex2.getField();
      complex10.subtract(Double.NaN);
      complex6.isNaN();
      complex0.cos();
      complex1.getArgument();
      complex9.acos();
      complex3.conjugate();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2560.2271);
      Complex complex2 = complex1.multiply(complex0);
      complex0.subtract(2560.2271);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.valueOf((-419.212933715), (-1816.7984));
      Complex complex5 = complex1.tan();
      Complex complex6 = Complex.ONE;
      complex6.sqrt1z();
      Complex complex7 = complex4.subtract(3410.2914);
      complex3.acos();
      complex5.tanh();
      Complex complex8 = complex7.sqrt1z();
      Complex.valueOf(2560.2271);
      Complex complex9 = complex7.add(2560.2271);
      complex9.getArgument();
      Complex complex10 = Complex.valueOf(5412.700454075229);
      Complex complex11 = Complex.ONE;
      complex8.acos();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex8.subtract(complex12);
      complex10.asin();
      complex2.createComplex((-1008.31270648), (-1008.31270648));
      complex11.equals("@y]$9[s");
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(0.0);
      complex2.ZERO.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sqrt();
      complex2.cos();
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = complex3.ZERO.cosh();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex2.asin();
      complex6.pow(0.0);
      Complex complex7 = complex5.add(complex1);
      complex6.getReal();
      Complex complex8 = complex0.pow(complex4);
      complex6.abs();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex4.pow(complex6);
      complex4.acos();
      complex8.exp();
      complex7.exp();
      complex10.cos();
      complex4.nthRoot(1609);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-419.212933715));
      complex1.INF.multiply(complex0);
      Complex complex2 = complex0.subtract((-1386.0));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.valueOf((-81.6148743), (-419.212933715));
      complex4.divide(complex3);
      complex2.tan();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex4.multiply(2.138845797954471E-293);
      complex1.getField();
      complex4.nthRoot(1211);
      complex6.sqrt();
      Complex complex7 = Complex.ZERO;
      complex7.abs();
      Complex complex8 = complex5.sin();
      complex8.NaN.subtract(complex7);
      Complex complex9 = complex5.asin();
      complex9.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.reciprocal();
      complex1.INF.getArgument();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.log();
      complex4.ZERO.multiply(1211.82186726625);
      complex4.ONE.multiply(complex1);
      Complex complex5 = complex2.subtract(0.0);
      complex5.NaN.getField();
      Complex complex6 = complex3.sinh();
      try { 
        complex6.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.subtract((-298.64194131));
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.INF;
      complex3.getImaginary();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.log();
      Complex.valueOf(0.0);
      Complex complex6 = complex4.add(2.0);
      Complex complex7 = complex5.asin();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, (-298.64194131));
      Complex complex9 = complex8.atan();
      Object object0 = complex6.readResolve();
      complex2.equals(object0);
      Complex complex10 = Complex.valueOf((-298.64194131));
      complex10.divide((-3219.0));
      complex7.cos();
      complex10.abs();
      Complex complex11 = complex6.reciprocal();
      complex1.hashCode();
      complex1.getField();
      complex11.subtract(2797.0);
      complex10.isNaN();
      complex3.cos();
      complex9.getArgument();
      complex5.acos();
      complex8.conjugate();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(2509.97392877);
      Complex complex3 = complex1.sinh();
      complex1.sqrt();
      Complex complex4 = complex2.cos();
      complex0.negate();
      Complex complex5 = Complex.I;
      complex5.cosh();
      Complex.valueOf(0.0, (-2689.428));
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.pow(2509.97392877);
      Complex complex8 = Complex.NaN;
      complex8.add(complex5);
      complex3.getReal();
      complex7.pow(complex0);
      Complex complex9 = new Complex(2509.97392877, (-1844.09074335722));
      complex9.abs();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex8.pow(complex7);
      complex3.acos();
      complex11.exp();
      Complex complex12 = complex11.exp();
      complex12.cos();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-419.212933715));
      complex1.INF.multiply(complex0);
      Complex complex2 = complex0.subtract((-1386.0));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.valueOf((-81.6148743), (-419.212933715));
      complex4.divide(complex3);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex4.sqrt1z();
      complex0.subtract((-81.6148743));
      complex5.nthRoot(2206);
      complex4.acos();
      complex2.multiply((-81.6148743));
      complex5.getField();
      // Undeclared exception!
      complex6.nthRoot(3980);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      complex1.I.reciprocal();
      complex1.INF.getArgument();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf((-1339.457), (-0.1666666567325592));
      Complex complex4 = complex0.createComplex((-0.1666666567325592), 1112.458);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.multiply(complex4);
      complex2.multiply(1471);
      Complex complex7 = complex6.pow((-652.67367));
      complex7.reciprocal();
      Complex complex8 = complex4.tan();
      Complex.valueOf(2.175685405731201);
      complex5.abs();
      Complex complex9 = Complex.I;
      complex8.getImaginary();
      Complex.valueOf(1.5707963267948966);
      Complex.valueOf(1190.7493);
      Complex complex10 = new Complex(0.7853981633974483);
      complex3.tanh();
      complex8.hashCode();
      complex8.getImaginary();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-4.83901764243093E-296), 0.0);
      Complex complex1 = complex0.subtract((-1325.446915689));
      complex1.getField();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.multiply(688.7178769189761);
      complex2.multiply(complex3);
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex4.subtract((-1325.446915689));
      complex4.getField();
      Complex complex6 = complex4.sinh();
      complex5.cosh();
      complex4.sinh();
      Complex.valueOf(6.283185307179586, 1211.82186726625);
      Complex complex7 = complex3.pow(complex6);
      complex0.tanh();
      complex5.readResolve();
      complex1.divide(complex7);
      Complex complex8 = new Complex(6.283185307179586, 0.0);
      Complex complex9 = complex8.asin();
      Complex complex10 = Complex.ZERO;
      complex3.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(0.0, 533.95);
      complex2.getImaginary();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.log();
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.I;
      complex6.add(1343.759408121);
      Complex complex7 = complex0.asin();
      complex4.atan();
      complex6.equals(complex1);
      Complex complex8 = complex6.divide(0.0);
      Complex complex9 = Complex.valueOf(0.0, 2381.88178097);
      Complex complex10 = complex9.cos();
      complex7.abs();
      Complex complex11 = complex10.reciprocal();
      complex0.hashCode();
      complex7.getField();
      Complex complex12 = complex3.subtract(2381.88178097);
      complex11.isNaN();
      Complex complex13 = Complex.I;
      complex13.cos();
      complex4.getArgument();
      complex12.acos();
      complex12.conjugate();
      complex8.sqrt();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-4.83901764243093E-296), 0.0);
      Complex complex1 = complex0.subtract((-1325.446915689));
      complex1.getField();
      Complex complex2 = Complex.valueOf(1794.404834542654, 159.6);
      Complex complex3 = complex2.createComplex(2.414213562373095, (-412.902));
      Complex complex4 = complex2.multiply(complex0);
      complex3.multiply(1387);
      complex2.pow(1742.52808);
      complex3.reciprocal();
      Complex complex5 = complex1.tan();
      Complex complex6 = Complex.valueOf(2.175685405731201);
      complex6.abs();
      Complex complex7 = Complex.I;
      complex7.getImaginary();
      Complex.valueOf(0.0);
      Complex.valueOf(1.0);
      Complex complex8 = new Complex(2.175685405731201);
      complex8.tanh();
      complex5.hashCode();
      complex4.getImaginary();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(0.0);
      complex2.ZERO.sinh();
      Complex complex3 = complex2.sqrt();
      complex2.cos();
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = complex3.ZERO.cosh();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex6.pow(0.0);
      Complex complex7 = complex5.add(complex1);
      complex6.getReal();
      Complex complex8 = complex0.pow(complex4);
      complex6.abs();
      Complex complex9 = Complex.INF;
      complex4.pow(complex6);
      complex4.acos();
      complex8.exp();
      complex7.exp();
      complex7.cos();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = complex0.subtract(2509.97392877);
      complex1.getImaginary();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.ZERO.negate();
      complex4.ZERO.log();
      complex4.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.NaN.asin();
      complex5.INF.atan();
      complex0.equals(complex1);
      Complex complex6 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.cos();
      complex7.reciprocal();
      complex7.hashCode();
      complex1.getField();
      complex6.subtract(2509.97392877);
      complex0.isNaN();
      complex7.abs();
      complex0.cosh();
      complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.ONE;
      complex8.subtract(complex7);
      complex3.sqrt();
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(1490.7387193648, 1490.7387193648);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.ONE.multiply(0.6123310327529907);
      complex4.ONE.reciprocal();
      Complex complex5 = complex1.atan();
      complex0.ONE.multiply(1);
      complex4.NaN.nthRoot(1);
      complex5.ONE.negate();
      complex4.getArgument();
      Complex complex6 = complex0.negate();
      complex6.ONE.sqrt1z();
      complex3.tanh();
      complex0.conjugate();
      complex3.pow(1490.7387193648);
      complex5.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(0.0);
      complex2.ZERO.sinh();
      complex2.subtract(0.0);
      complex1.divide(complex2);
      complex0.divide(complex2);
      complex1.tan();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.subtract((-1.1089952719756529E-7));
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.tanh();
      complex6.sqrt1z();
      Complex complex7 = Complex.valueOf((-2298.6477559790183));
      Complex complex8 = complex4.add(Double.NaN);
      complex7.getArgument();
      Complex.valueOf(1988.64456991326);
      complex0.acos();
      Complex complex9 = complex3.subtract(complex1);
      complex8.asin();
      complex9.createComplex(1058.7855285078, 0.0);
      Object object0 = complex6.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-419.212933715));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex1.cosh();
      Complex complex7 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex8 = complex3.pow(0.0);
      Complex complex9 = complex6.multiply(0.0);
      Complex complex10 = complex6.add(complex0);
      Complex complex11 = Complex.ONE;
      complex11.getReal();
      complex7.pow(complex10);
      complex9.abs();
      Complex complex12 = Complex.INF;
      complex12.I.pow(complex0);
      complex7.pow(complex0);
      complex8.getImaginary();
      complex5.acos();
      Complex complex13 = Complex.valueOf(4.452959749657883E-7);
      complex13.exp();
      complex7.cos();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.subtract((-2194.2424));
      Complex complex2 = complex1.sinh();
      complex2.getImaginary();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.log();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.negate();
      complex4.add(Double.NaN);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex3.atan();
      complex4.equals((Object) null);
      Complex complex9 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex6.cos();
      complex3.abs();
      complex9.reciprocal();
      complex6.hashCode();
      complex6.getField();
      complex4.subtract(Double.POSITIVE_INFINITY);
      complex10.isNaN();
      complex8.abs();
      Complex complex11 = complex4.cosh();
      complex0.multiply(1.8928981707279692E271);
      complex7.asin();
      complex11.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = Complex.valueOf(2509.97392877, 787.851338951412);
      complex2.getArgument();
      complex2.getField();
      Complex complex5 = complex0.reciprocal();
      complex3.tan();
      complex2.isNaN();
      complex0.sqrt1z();
      complex1.getArgument();
      complex1.atan();
      Complex complex6 = complex4.pow(complex5);
      complex3.divide(complex0);
      complex2.log();
      complex6.readResolve();
      complex5.nthRoot(41);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-419.212933715));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.subtract(730.1111617937);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide(complex2);
      complex3.divide(complex2);
      Complex complex6 = complex3.tan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.sqrt1z();
      complex4.subtract(730.1111617937);
      Complex complex9 = complex3.acos();
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex5.sqrt1z();
      Complex complex12 = Complex.valueOf(730.1111617937);
      complex11.add(0.0);
      complex2.getArgument();
      Complex.valueOf((-1696.2518508));
      complex6.acos();
      complex12.subtract(complex9);
      complex0.asin();
      complex6.createComplex(21.31298213098374, 0.45160030615905045);
      Complex complex13 = Complex.ZERO;
      Object object0 = complex13.readResolve();
      complex10.equals(object0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-419.212933715));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.NaN.subtract(0.0);
      complex0.INF.divide(complex1);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.INF.sqrt1z();
      complex6.ZERO.subtract((-419.212933715));
      Complex complex7 = complex4.acos();
      complex7.ZERO.tanh();
      complex0.sqrt1z();
      Complex complex8 = Complex.valueOf((-419.212933715));
      complex8.I.add(0.0);
      complex4.INF.getArgument();
      Complex.valueOf(1988.64456991326);
      complex7.ZERO.acos();
      complex4.subtract(complex3);
      complex4.asin();
      complex5.createComplex((-1388.7186), (-1388.7186));
      complex1.equals(complex7);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.abs();
      Complex complex1 = complex0.ONE.cosh();
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex1.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex0.atan();
      complex4.ZERO.sqrt1z();
      complex3.abs();
      complex4.getImaginary();
      complex2.cosh();
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow((-1202.70959911));
      complex0.readResolve();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.INF.sinh();
      complex3.toString();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.add(complex4);
      complex5.INF.cos();
      complex0.ONE.tan();
      Complex complex6 = complex4.subtract(0.0);
      Complex complex7 = complex6.acos();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.INF.subtract(complex2);
      Complex complex10 = complex9.add(0.0);
      complex10.NaN.exp();
      Complex.valueOf(3279.37997);
      complex0.getImaginary();
      complex5.getImaginary();
      Complex complex11 = complex7.asin();
      Complex.valueOf((-1489.0), 0.0);
      Complex complex12 = complex0.sqrt1z();
      complex12.INF.tan();
      complex5.multiply(64.10001598384);
      complex2.abs();
      Complex.valueOf(1.4142135623730951, 0.0);
      Complex complex13 = Complex.I;
      complex4.equals(complex13);
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.655990315697216E-10, 838.28614196);
      Complex complex1 = complex0.INF.cos();
      complex0.equals("Rwpe<HO0v");
      complex0.NaN.divide(complex1);
      Complex complex2 = complex0.createComplex(838.28614196, 2.655990315697216E-10);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.I.subtract(complex0);
      complex4.NaN.tan();
      complex0.ZERO.acos();
      complex2.reciprocal();
      complex0.ONE.toString();
      Complex complex5 = complex0.asin();
      complex5.ZERO.hashCode();
      complex5.cos();
      complex5.pow(2.655990315697216E-10);
      complex5.equals(complex1);
      complex5.negate();
      Complex complex6 = new Complex(1.8307188599677033E-8, (-1.0));
      complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1834.53798, 1834.53798);
      Complex complex1 = complex0.ZERO.pow(0.0);
      complex1.INF.add(0.0);
      complex1.ZERO.subtract(complex0);
      complex0.isNaN();
      complex0.hashCode();
      complex0.sinh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-41.6522753463));
      Complex complex1 = complex0.atan();
      complex0.multiply(396);
      complex1.atan();
      Complex complex2 = Complex.valueOf((double) 396);
      complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-419.212933715));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex0.INF.divide(complex1);
      Complex complex5 = complex4.I.divide(complex0);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.INF.sqrt1z();
      complex7.ZERO.subtract((-419.212933715));
      Complex complex8 = complex5.acos();
      complex8.ZERO.tanh();
      complex0.sqrt1z();
      Complex complex9 = Complex.valueOf((-419.212933715));
      complex9.I.add(0.0);
      complex5.INF.getArgument();
      Complex.valueOf(1988.64456991326);
      complex8.ZERO.acos();
      complex5.subtract(complex3);
      complex5.asin();
      complex6.createComplex((-1388.7186), (-1388.7186));
      complex1.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 787.851338951412);
      complex0.getArgument();
      complex0.getField();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex3.tan();
      complex2.isNaN();
      Complex complex6 = complex5.sqrt1z();
      complex5.getArgument();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex7.pow(complex0);
      complex8.ZERO.divide(complex3);
      complex2.log();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-894.34114576));
      Complex.valueOf(1.5007857288519654E-41);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex1.multiply(2.496872901916504);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.divide(complex0);
      complex3.INF.toString();
      Complex complex6 = Complex.valueOf(4554.38744);
      complex6.INF.subtract(complex4);
      Complex complex7 = complex6.INF.pow((-894.34114576));
      Complex.valueOf(0.0, (-20.0));
      complex6.INF.multiply(823);
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex3.add(complex5);
      complex9.ZERO.hashCode();
      Complex complex10 = complex8.ZERO.atan();
      complex3.ONE.add(0.0);
      complex8.ZERO.divide(0.0);
      complex5.toString();
      Complex complex11 = complex1.exp();
      complex11.INF.sinh();
      complex10.I.multiply(complex5);
      Complex complex12 = Complex.INF;
      complex12.I.readResolve();
      complex10.pow(complex12);
      complex7.cos();
      complex2.asin();
      complex5.conjugate();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.reciprocal();
      complex1.INF.getArgument();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.log();
      complex4.ZERO.multiply(1211.82186726625);
      Complex complex5 = complex4.ONE.multiply(complex1);
      Complex complex6 = complex2.subtract(0.0);
      complex6.NaN.getField();
      Complex complex7 = complex3.sinh();
      complex7.ZERO.cosh();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex8.sinh();
      Complex complex10 = Complex.valueOf(1211.82186726625, 0.7853981633974483);
      Complex complex11 = complex9.pow(complex10);
      complex11.ONE.tanh();
      complex8.readResolve();
      complex0.divide(complex6);
      complex1.asin();
      Complex complex12 = Complex.ZERO;
      complex2.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1958.1209317142);
      Complex complex1 = complex0.I.asin();
      complex1.divide(complex0);
      complex1.asin();
      Complex complex2 = Complex.valueOf(1958.1209317142);
      Complex complex3 = complex0.multiply(complex2);
      complex3.tanh();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(779);
      complex0.INF.toString();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex2.ZERO.cos();
      complex0.getReal();
      complex2.I.nthRoot(17);
      complex1.acos();
      double double0 = (-353.948);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex1.ZERO.createComplex(2282.29193234237, (-353.948));
      complex4.ZERO.asin();
      complex5.I.sqrt();
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      complex1.ZERO.sqrt1z();
      Complex.valueOf((-1421.5701684165));
      complex0.getArgument();
      complex0.abs();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.multiply(3816);
      complex2.ONE.asin();
      complex1.createComplex((-1421.5701684165), 0.0);
      Complex complex4 = complex2.pow((double) 3816);
      complex4.ZERO.hashCode();
      complex3.isInfinite();
      Complex complex5 = complex3.asin();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(2534.9833, 0.0);
      complex1.NaN.sqrt1z();
      Complex complex3 = complex1.divide(complex2);
      complex3.INF.getArgument();
      complex2.subtract((-1.0));
      complex1.NaN.getField();
      Complex complex4 = Complex.valueOf(2.0, 0.0);
      Complex complex5 = complex4.ONE.createComplex(0.0, 0.0);
      Complex complex6 = complex5.ONE.multiply(complex0);
      Complex complex7 = complex6.INF.multiply(1387);
      complex7.ZERO.pow(20.0);
      Complex complex8 = complex5.reciprocal();
      complex8.INF.tan();
      complex4.abs();
      complex2.getImaginary();
      Complex complex9 = Complex.valueOf((-2.4459827842685974E-8));
      Complex.valueOf(0.0);
      complex9.ONE.tanh();
      complex9.ZERO.hashCode();
      complex1.getImaginary();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.ONE.exp();
      complex3.NaN.multiply((-1864));
      Complex complex4 = complex2.NaN.exp();
      complex4.I.sqrt1z();
      Complex complex5 = complex1.multiply(323);
      Complex complex6 = complex1.ONE.reciprocal();
      complex6.pow((double) 323);
      Complex complex7 = complex0.tan();
      complex7.NaN.multiply((double) 323);
      complex5.acos();
      complex5.log();
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.0), 0.0);
      Complex complex2 = complex0.I.tan();
      complex2.sinh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex0.ZERO.multiply(0.0);
      Complex complex7 = complex6.NaN.acos();
      complex7.ONE.toString();
      complex7.I.log();
      complex5.ONE.readResolve();
      Complex complex8 = complex4.subtract(complex5);
      Complex complex9 = complex2.multiply(0.0);
      complex9.NaN.sqrt1z();
      complex6.ONE.subtract(0.0);
      Complex complex10 = complex8.ZERO.conjugate();
      complex3.subtract(complex9);
      Complex complex11 = complex8.reciprocal();
      complex11.INF.createComplex(0.0, 0.0);
      Object object0 = complex6.readResolve();
      complex11.equals(object0);
      complex4.reciprocal();
      Complex complex12 = complex0.sqrt1z();
      complex8.sqrt();
      complex10.toString();
      complex7.toString();
      complex12.subtract((-1.0));
      complex2.getArgument();
      complex11.hashCode();
      complex1.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2760.6837881719193), 7.55158797540476E185);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex1.NaN.add((-2760.6837881719193));
      Complex complex4 = complex1.add(7.55158797540476E185);
      complex3.I.acos();
      complex3.hashCode();
      complex3.multiply((-2760.6837881719193));
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex0.pow((-364.70728945));
      complex5.ONE.acos();
      complex5.I.createComplex(7.55158797540476E185, 0.0);
      Complex complex7 = complex1.cosh();
      complex7.ZERO.conjugate();
      complex2.pow(complex6);
      complex7.multiply(complex5);
      complex6.negate();
      complex7.pow(7.55158797540476E185);
      complex3.isInfinite();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(752.0);
      Complex complex1 = complex0.I.log();
      double double0 = 1643.3;
      Complex complex2 = Complex.valueOf((-1431.208417), 1643.3);
      complex2.ONE.pow(complex1);
      int int0 = (-2438);
      try { 
        complex2.ONE.nthRoot((-2438));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,438
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex1.ZERO.log();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex2.ONE.add(complex0);
      Complex complex5 = complex4.ONE.createComplex(Double.NaN, Double.NaN);
      Complex complex6 = complex0.NaN.add(complex1);
      Complex complex7 = complex6.ZERO.multiply(0.0);
      Complex complex8 = complex7.ONE.exp();
      complex8.NaN.multiply(Double.NaN);
      complex0.sinh();
      Complex complex9 = complex6.tan();
      complex4.add(114.3137453211);
      complex6.isNaN();
      Complex complex10 = complex6.ONE.subtract(0.0);
      complex10.NaN.subtract(complex0);
      complex5.getReal();
      complex8.divide(Double.NaN);
      complex5.acos();
      complex1.pow(complex9);
      complex5.acos();
      complex3.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf((-579.127261));
      Complex complex4 = Complex.valueOf((-4008.89721), 0.0);
      complex4.I.log();
      Complex complex5 = complex0.I.sqrt();
      complex3.ONE.abs();
      complex5.ZERO.tan();
      complex4.I.sqrt1z();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex6.divide((-4843.780868645));
      complex8.NaN.pow((-4008.89721));
      Complex complex9 = complex3.createComplex((-579.127261), (-1778.9721997));
      Complex complex10 = complex7.divide(complex6);
      Complex complex11 = complex0.subtract(complex9);
      complex11.sqrt();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.getArgument();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(1490.7387193648, 1490.7387193648);
      complex2.I.asin();
      Complex complex3 = complex2.ONE.multiply(0.6123310327529907);
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex1.atan();
      complex3.NaN.nthRoot(1);
      complex5.ONE.negate();
      complex3.getArgument();
      Complex complex6 = complex0.negate();
      complex6.ONE.sqrt1z();
      Complex complex7 = complex4.cos();
      complex7.ONE.getArgument();
      complex3.acos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1734.604861797915);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex2.ZERO.multiply(1);
      complex0.isInfinite();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.ONE.add(complex3);
      complex2.I.toString();
      complex3.ONE.divide(complex4);
      Complex complex5 = complex2.add((-871.416));
      complex2.I.cosh();
      Complex complex6 = complex1.divide(complex2);
      complex4.hashCode();
      Complex complex7 = complex3.log();
      Complex complex8 = complex1.sqrt1z();
      complex8.NaN.nthRoot(1);
      Complex complex9 = complex8.I.multiply(506.42219576935);
      complex9.INF.getArgument();
      Complex complex10 = complex9.ONE.tan();
      complex10.ONE.multiply(0.0);
      Complex complex11 = complex7.pow((-871.416));
      complex2.toString();
      complex11.subtract(complex6);
      complex6.ONE.getArgument();
      complex5.subtract(complex4);
      Complex complex12 = Complex.valueOf((-871.416), (double) 1);
      complex12.log();
      complex6.add(complex1);
      complex0.getImaginary();
      complex0.isNaN();
      complex6.hashCode();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.asin();
      complex1.INF.readResolve();
      complex2.I.asin();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex2.NaN.pow(1.2469532489776611);
      Complex complex5 = complex4.ONE.divide(1.2469532489776611);
      complex5.ONE.nthRoot(210);
      Complex complex6 = complex1.multiply(1.2469532489776611);
      Complex complex7 = complex0.ZERO.cosh();
      complex6.I.cosh();
      complex0.log();
      complex6.INF.nthRoot(1);
      Complex complex8 = complex1.divide(complex0);
      complex8.conjugate();
      Complex complex9 = complex6.sqrt1z();
      complex2.atan();
      complex9.abs();
      complex3.divide(complex2);
      complex7.pow(complex3);
      complex8.multiply(complex7);
      complex3.nthRoot(1);
      complex1.add(complex8);
      complex6.add(complex9);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex1.NaN.negate();
      complex4.ZERO.cosh();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex7.pow(0.0);
      Complex complex9 = complex1.multiply(0.0);
      Complex complex10 = complex1.add(complex8);
      complex4.getReal();
      Complex complex11 = complex2.pow(complex4);
      complex6.abs();
      Complex complex12 = Complex.INF;
      complex3.pow(complex12);
      complex6.getImaginary();
      complex11.acos();
      complex10.exp();
      complex9.exp();
      complex5.cos();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-4.83901764243093E-296), 0.0);
      complex0.NaN.add((-20.0));
      Complex complex1 = complex0.tan();
      complex0.nthRoot(1732);
      Complex complex2 = complex1.atan();
      complex0.cos();
      complex1.asin();
      complex2.nthRoot(1732);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-351.9491958573));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      complex0.NaN.sinh();
      Complex complex3 = complex0.NaN.multiply(4103);
      complex0.ZERO.getArgument();
      complex0.getField();
      Complex complex4 = complex2.NaN.divide(complex3);
      Complex complex5 = complex0.INF.add(complex3);
      complex5.NaN.atan();
      complex5.ZERO.getArgument();
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.ONE.cos();
      Complex complex6 = complex4.INF.subtract(complex0);
      complex6.NaN.conjugate();
      complex1.createComplex(0.0, 715.0);
      complex0.toString();
      complex3.abs();
      complex4.getImaginary();
      complex2.sqrt1z();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.atan();
      complex2.I.getArgument();
      Complex complex3 = complex1.sinh();
      complex3.I.getField();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.INF.conjugate();
      complex5.ZERO.atan();
      complex4.I.log();
      complex0.readResolve();
      complex3.multiply(complex0);
      complex0.ZERO.toString();
      complex1.toString();
      complex3.isNaN();
      Complex.valueOf(1.5707963267948966);
      complex3.multiply((-1346));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(1.2773080633674971E271);
      complex0.cosh();
      complex0.multiply(430);
      Complex.valueOf(283.704086, 1.2773080633674971E271);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex.valueOf((-204.0), 1122.456364);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      complex0.isNaN();
      Complex complex1 = new Complex(0.0);
      complex0.INF.multiply(complex1);
      complex0.getField();
      Complex complex2 = complex0.cosh();
      try { 
        complex2.ONE.nthRoot((-394));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -394
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.createComplex((-282.7842), 0.0);
      Complex complex1 = Complex.valueOf((-282.7842), 0.0);
      complex0.NaN.pow(complex1);
      Complex complex2 = complex0.multiply((-715.618));
      complex2.ZERO.getField();
      complex2.nthRoot(1);
      Complex complex3 = complex2.sqrt();
      complex3.abs();
      complex2.sin();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = complex0.subtract(2509.97392877);
      Complex complex2 = complex0.ONE.sinh();
      complex1.getImaginary();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ZERO.negate();
      complex5.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.NaN.asin();
      Complex complex7 = complex6.INF.atan();
      complex0.equals(complex1);
      Complex complex8 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.cos();
      complex9.I.abs();
      complex9.reciprocal();
      complex9.hashCode();
      complex1.getField();
      complex8.subtract(2509.97392877);
      complex2.isNaN();
      complex9.abs();
      complex0.cosh();
      complex3.multiply(1.0);
      complex7.asin();
      complex4.equals("");
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.I.divide(0.0);
      Complex complex6 = Complex.valueOf(0.0, (-490.6935));
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex3.cos();
      Complex complex9 = new Complex(2.6195174357581655E53);
      complex8.add(complex9);
      complex5.subtract(0.0);
      complex1.divide(complex5);
      Complex complex10 = complex0.subtract(Double.NaN);
      Complex.valueOf(770.61, 0.0);
      complex7.subtract(complex4);
      complex5.hashCode();
      Complex complex11 = complex6.divide(1575.7846269884697);
      complex11.sqrt1z();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1865.399);
      Complex complex2 = complex1.NaN.asin();
      complex1.ONE.multiply(1);
      complex0.abs();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ONE.tan();
      Complex complex4 = complex3.NaN.add(1865.399);
      complex2.nthRoot(1);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = Complex.valueOf(20.0);
      complex1.ONE.divide(complex2);
      Complex complex3 = complex0.NaN.cosh();
      complex0.I.subtract((-4.30293375386492E-21));
      Complex complex4 = complex3.NaN.conjugate();
      complex0.NaN.sin();
      complex0.negate();
      complex0.hashCode();
      complex3.sqrt1z();
      Complex complex5 = complex4.sin();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = complex3.ONE.sinh();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      complex2.ZERO.toString();
      Complex complex5 = complex2.ZERO.pow((double) 0);
      complex5.I.hashCode();
      complex0.isNaN();
      complex0.I.getField();
      complex2.getArgument();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex6.ZERO.pow(complex1);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.ONE.sqrt1z();
      Complex complex11 = complex3.ONE.acos();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      complex1.toString();
      complex8.ONE.getArgument();
      Complex complex12 = complex6.sqrt1z();
      Complex complex13 = complex12.NaN.divide(20.0);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      Complex complex14 = complex7.log();
      double double0 = complex2.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex15 = complex8.tanh();
      double double1 = complex8.abs();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = complex3.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex16 = complex2.subtract(209.541101);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex14.log();
      assertEquals(2.997383941848611, complex17.getReal(), 0.01);
      
      Complex complex18 = complex15.asin();
      assertNotSame(complex18, complex5);
      
      Complex complex19 = complex6.cosh();
      assertTrue(complex19.equals((Object)complex12));
      
      Complex complex20 = complex10.add(complex0);
      assertFalse(complex9.equals((Object)complex13));
      assertEquals(20.0, complex20.getImaginary(), 0.01);
      assertFalse(complex10.equals((Object)complex16));
      
      Complex complex21 = Complex.valueOf(2467.894);
      assertEquals(0.0, complex21.getImaginary(), 0.01);
  }
}
