/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:26:17 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(5.3832011494782624E-303, 2.3195229636950566E-16);
      complex0.nthRoot(2538);
      Complex complex1 = complex0.atan();
      complex1.I.add(complex0);
      complex0.sqrt();
      complex0.divide((-2219.4662));
      Complex complex2 = complex0.acos();
      complex2.tan();
      Complex complex3 = Complex.ONE;
      complex2.log();
      Complex complex4 = Complex.I;
      try { 
        complex4.nthRoot((-2182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,182
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-20.0));
      Complex complex2 = complex1.log();
      complex2.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(5.3832011494782624E-303, 2.3195229636950566E-16);
      complex0.sqrt();
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1951.3769), (-1951.3769));
      Complex complex1 = complex0.I.createComplex((-5976.99796286161), (-1951.3769));
      complex1.INF.subtract(172.81287494);
      complex1.ONE.asin();
      complex0.getField();
      Complex complex2 = complex0.cos();
      double double0 = 0.9994630267982765;
      Complex complex3 = complex2.NaN.add(0.9994630267982765);
      complex3.INF.divide(914.14412606);
      complex2.I.sin();
      try { 
        complex3.I.nthRoot((-1159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,159
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-4166.412652640884));
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.sqrt();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      complex1.sqrt();
      complex1.tan();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-4166.412652640884));
      Complex complex2 = complex1.log();
      Complex complex3 = new Complex((-4166.412652640884), (-4166.412652640884));
      Complex complex4 = complex2.sqrt();
      complex4.multiply(2144.90572);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.multiply((-732.2976011999697));
      complex0.NaN.conjugate();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3415.6), (-3415.6));
      complex0.ONE.tanh();
      Complex.valueOf((-3814.09), (-3415.6));
      complex1.INF.abs();
      Complex complex2 = complex0.NaN.add(complex1);
      complex0.conjugate();
      Complex complex3 = complex0.ZERO.sin();
      Complex complex4 = complex2.subtract((-2749.7));
      complex4.ONE.sin();
      complex2.INF.divide(complex3);
      complex4.sinh();
      Complex complex5 = new Complex((-2749.7), Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.asin();
      complex6.tanh();
      complex1.sqrt();
      complex0.I.conjugate();
      Complex complex7 = new Complex((-3415.6));
      complex1.tanh();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-4166.412652640884));
      Complex complex2 = complex1.log();
      Complex complex3 = new Complex((-4166.412652640884), (-4166.412652640884));
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.valueOf((-4166.412652640884));
      complex2.add(complex5);
      Complex complex6 = complex3.tanh();
      complex6.divide((-4166.412652640884));
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex0.createComplex((-4.608112855795952E276), 1.000000000000036);
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex2.pow(1.000000000000036);
      Complex complex7 = complex6.pow(complex5);
      complex0.sinh();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex7.atan();
      complex9.INF.exp();
      complex3.asin();
      complex4.ONE.sinh();
      complex6.ONE.pow((-3108.199945));
      Complex complex10 = complex8.createComplex((-3108.199945), (-4.608112855795952E276));
      complex10.INF.divide(complex4);
      complex6.pow(complex2);
      complex1.sqrt();
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-4166.412652640884));
      Complex complex2 = complex1.log();
      Complex complex3 = new Complex((-4166.412652640884), (-4166.412652640884));
      Complex complex4 = complex2.sqrt();
      complex4.multiply((-1688));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.I.asin();
      complex3.INF.getField();
      complex3.NaN.pow(complex0);
      complex2.readResolve();
      Complex complex4 = complex0.cos();
      complex4.subtract(complex1);
      Complex complex5 = complex4.pow((-2093.13));
      Complex complex6 = complex5.I.reciprocal();
      complex4.abs();
      Complex complex7 = Complex.valueOf(3.889885799962507E-216);
      complex7.ZERO.add(complex1);
      Complex complex8 = complex6.atan();
      complex6.ZERO.cosh();
      Complex.valueOf(3.889885799962507E-216, (-2093.13));
      complex8.I.atan();
      Complex complex9 = complex5.sin();
      complex9.abs();
      Complex complex10 = complex5.sinh();
      complex10.INF.cos();
      complex10.ZERO.getField();
      complex3.divide(complex0);
      complex9.pow(complex0);
      complex5.log();
      complex9.createComplex(3.889885799962507E-216, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.3832011494783595E-303);
      Complex complex1 = Complex.valueOf(5.3832011494783595E-303, 5.3832011494783595E-303);
      complex0.ONE.tanh();
      Complex complex2 = Complex.valueOf((-3814.09), 2949.019175157242);
      complex1.INF.abs();
      Complex complex3 = complex0.NaN.add(complex1);
      complex1.ZERO.negate();
      complex0.conjugate();
      Complex complex4 = complex0.ZERO.sin();
      Complex complex5 = complex3.subtract((-2749.7));
      complex3.INF.divide(complex4);
      complex5.sinh();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex4.asin();
      complex7.tanh();
      complex1.sqrt();
      Complex complex8 = complex0.I.conjugate();
      complex8.INF.add(complex6);
      complex7.reciprocal();
      complex2.exp();
      complex3.add(complex6);
      complex1.tanh();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(625.168552);
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex(625.168552, (-4166.412652640884));
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.tan();
      complex4.abs();
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ONE.divide((-1.0));
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.add(Double.NaN);
      Complex complex6 = complex5.ONE.pow(Double.NaN);
      complex0.I.multiply(10);
      complex4.ONE.getField();
      Complex complex7 = complex1.pow(complex0);
      Complex complex8 = complex7.acos();
      complex8.INF.multiply(complex2);
      Complex complex9 = complex1.multiply((-2142114938));
      complex9.ZERO.sinh();
      complex9.tan();
      Complex complex10 = complex6.divide(complex3);
      complex0.add(complex4);
      complex10.log();
      complex0.add((-411.999605977));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.log();
      complex2.ZERO.cosh();
      complex3.ONE.asin();
      Complex complex4 = complex3.INF.tanh();
      Complex.valueOf(2589.989201569116);
      complex4.NaN.sinh();
      Complex complex5 = complex0.tanh();
      complex0.getField();
      Complex complex6 = complex0.multiply((-20.0));
      complex5.tanh();
      complex0.NaN.pow(complex1);
      complex6.atan();
      Complex.valueOf((-1.0));
      complex2.multiply(3058.151824);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3094.257899078);
      complex0.NaN.add(complex1);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.ONE.atan();
      complex1.I.negate();
      complex1.I.pow(complex0);
      Complex complex2 = new Complex((-1514.4506117783), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(3.8581732071331E174, (-1463.38662381));
      Complex complex1 = complex0.subtract((-1463.38662381));
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf((-1463.38662381), (-1463.38662381));
      complex3.hashCode();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex2.tanh();
      Complex complex6 = Complex.valueOf((-56.1895576));
      complex1.acos();
      complex4.equals(complex0);
      complex2.subtract(complex1);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.subtract(complex5);
      complex6.I.hashCode();
      Complex complex9 = Complex.INF;
      Complex complex10 = Complex.NaN;
      complex10.multiply(0);
      complex6.abs();
      Complex complex11 = Complex.ONE;
      complex2.tan();
      complex8.multiply(17);
      Complex complex12 = new Complex(17, 17);
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(2395.620253614767, 2395.620253614767);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.NaN;
      complex2.ONE.createComplex(5616.203483459227, 971.295330447022);
      complex0.reciprocal();
      complex1.subtract(2395.620253614767);
      complex0.createComplex(2395.620253614767, 1864.38557976103);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.subtract(Double.NaN);
      complex2.INF.pow(961.689);
      complex1.getField();
      complex0.abs();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex5.NaN.atan();
      Complex.valueOf(961.689);
      complex5.ZERO.getArgument();
      complex1.cosh();
      Complex complex7 = complex3.subtract((-1045.9480168));
      complex7.ZERO.createComplex(3507.4, Double.NaN);
      complex1.conjugate();
      complex7.toString();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = (-2675.777513);
      Complex complex0 = new Complex((-2675.777513), Double.POSITIVE_INFINITY);
      int int0 = (-1219);
      try { 
        complex0.nthRoot((-1219));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,219
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      Complex complex1 = Complex.valueOf(313.50358021508);
      Complex complex2 = complex1.acos();
      Complex.valueOf((-4280.778387756));
      complex1.readResolve();
      Complex complex3 = Complex.I;
      complex3.equals(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.subtract(complex4);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex1.subtract(complex2);
      Complex complex8 = Complex.ZERO;
      complex1.abs();
      Complex complex9 = Complex.I;
      complex2.divide(complex6);
      complex4.tanh();
      complex7.tan();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.ZERO;
      complex0.abs();
      Complex complex4 = Complex.I;
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.subtract((-2723.6395829));
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.valueOf((-42.236195168), (-2723.6395829));
      complex5.hashCode();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex3.tanh();
      Complex.valueOf(235853.15473731243);
      Complex complex8 = complex2.acos();
      complex2.equals(complex4);
      Complex complex9 = complex0.subtract(complex7);
      complex8.asin();
      complex3.subtract(complex0);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex6.multiply(857);
      complex6.abs();
      complex9.sinh();
      complex7.tan();
      complex11.pow(1.1901862840583523E-7);
      complex9.divide(complex8);
      Complex complex12 = Complex.valueOf((-2859.530384489676), 782.83654);
      complex12.add(1628.8);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-4166.412652640884));
      Complex complex2 = complex0.log();
      complex1.cosh();
      complex0.subtract(complex1);
      complex0.ONE.abs();
      Complex complex3 = complex2.sqrt();
      complex1.tanh();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(1.0267179012298584);
      complex0.ZERO.reciprocal();
      complex0.atan();
      complex1.readResolve();
      Complex complex2 = Complex.valueOf(1988.70160707184, Double.POSITIVE_INFINITY);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, Double.NaN);
      complex0.hashCode();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf((-1.8981247089866317E-7));
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.valueOf((-485.64818));
      complex2.equals(complex6);
      Complex complex7 = complex1.subtract(complex5);
      Complex complex8 = complex6.asin();
      complex6.subtract(complex5);
      Complex complex9 = Complex.ZERO;
      complex6.abs();
      complex6.sinh();
      complex7.divide(complex9);
      complex3.tan();
      complex4.divide(complex1);
      complex5.getField();
      complex6.getImaginary();
      complex1.readResolve();
      Complex complex10 = complex8.pow(5.3832011494782624E-303);
      complex4.tan();
      complex9.multiply(4.459653141360536E-8);
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-4158.041387445));
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(2125.7);
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf(2125.7);
      Object object0 = complex5.readResolve();
      complex5.equals(object0);
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex3.subtract(complex6);
      Complex complex9 = Complex.ZERO;
      complex9.abs();
      complex8.sinh();
      Complex complex10 = complex6.divide(complex4);
      complex10.INF.tanh();
      complex9.tan();
      Complex complex11 = complex1.divide(complex6);
      complex7.getField();
      complex1.getImaginary();
      complex5.readResolve();
      complex11.pow((-485.64818));
      complex8.tan();
      complex11.multiply(1616.3451955769);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-16.775953823481448), (-1607.6062362545));
      complex0.toString();
      complex0.nthRoot(6);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.reciprocal();
      complex2.multiply(complex1);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex1.I.subtract((-2723.6395829));
      Complex complex4 = complex0.tan();
      Complex.valueOf((-2723.6395829), (-2723.6395829));
      complex0.NaN.hashCode();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.NaN.tanh();
      Complex.valueOf((-42.236195168));
      Complex complex7 = complex0.acos();
      complex0.equals(complex0);
      Complex complex8 = complex0.INF.subtract(complex0);
      complex0.asin();
      Complex complex9 = complex4.subtract(complex7);
      Complex complex10 = Complex.INF;
      complex10.multiply(0);
      complex3.abs();
      complex1.sinh();
      complex2.tan();
      complex9.divide(complex3);
      complex8.getField();
      complex6.getImaginary();
      complex8.readResolve();
      complex7.pow(9.178894515571301E-5);
      complex10.tan();
      complex10.multiply(3.013864047716197E-4);
      complex6.reciprocal();
      Complex.valueOf(Double.NaN, 3.013864047716197E-4);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-3.013864047716197E-4));
      Complex complex1 = complex0.ZERO.exp();
      complex1.ONE.asin();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.cos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.cosh();
      complex4.sinh();
      Complex complex5 = complex3.asin();
      Complex.valueOf((-1361.9771574224), (-3.013864047716197E-4));
      complex5.ONE.multiply(complex3);
      Complex complex6 = complex3.ONE.tanh();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex7.INF.tan();
      complex0.I.hashCode();
      Complex complex9 = complex8.ONE.sqrt();
      complex9.I.tan();
      complex0.add(complex3);
      complex9.asin();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.ONE.atan();
      complex1.I.pow(complex0);
      Complex complex2 = complex1.I.subtract((-2723.6395829));
      Complex complex3 = complex0.tan();
      Complex.valueOf((-2723.6395829), (-2723.6395829));
      complex0.NaN.hashCode();
      Complex complex4 = complex3.ZERO.sin();
      complex4.NaN.tanh();
      Complex.valueOf((-42.236195168));
      Complex complex5 = complex0.acos();
      complex0.equals(complex0);
      complex0.INF.subtract(complex0);
      complex0.asin();
      complex3.subtract(complex5);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.multiply(0);
      complex2.abs();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex5.tan();
      complex9.I.pow((double) 0);
      complex1.divide(complex8);
      complex0.getField();
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex10 = Complex.ONE;
      complex10.asin();
      complex7.conjugate();
      complex7.divide(800.47);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(5.3832011494782624E-303, (-1.8981247089866317E-7));
      complex1.hashCode();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.valueOf((-485.64818));
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.valueOf(5.3832011494782624E-303);
      complex6.equals(complex2);
      complex5.subtract(complex1);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex3.subtract(complex7);
      Complex complex9 = Complex.ZERO;
      complex3.abs();
      Complex complex10 = complex2.sinh();
      complex10.ONE.divide(complex0);
      Complex complex11 = complex1.tan();
      complex11.divide(complex1);
      complex2.getField();
      complex3.getImaginary();
      complex7.readResolve();
      complex0.pow((double) 0);
      complex0.tan();
      complex8.multiply((-224.61790380532233));
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.log();
      Complex complex1 = complex0.cosh();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.atan();
      complex2.I.pow(complex1);
      complex2.I.subtract((-2723.6395829));
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      complex1.NaN.hashCode();
      Complex complex5 = complex3.ZERO.sin();
      Complex complex6 = complex5.NaN.tanh();
      Complex.valueOf((-42.236195168));
      Complex complex7 = complex0.acos();
      complex0.equals(complex1);
      complex0.INF.subtract(complex1);
      Complex complex8 = complex1.asin();
      complex3.subtract(complex7);
      complex4.multiply(367);
      Complex complex9 = Complex.ZERO;
      complex1.abs();
      complex4.sinh();
      Complex complex10 = Complex.ZERO;
      complex6.divide(complex9);
      Complex complex11 = Complex.valueOf(20.0, (-1663.0057543));
      Complex complex12 = complex11.tan();
      Complex complex13 = complex2.divide(complex1);
      complex13.getField();
      complex8.getImaginary();
      complex6.readResolve();
      complex12.pow((-2723.6395829));
      Complex complex14 = Complex.NaN;
      complex14.tan();
      complex8.multiply(62.06293609839434);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.7853981633974483, 5.383201149478553E-303);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex(0, (-1659));
      Complex complex4 = complex3.multiply((-1659));
      Complex complex5 = complex2.tan();
      complex1.abs();
      complex4.sinh();
      complex5.tan();
      complex3.divide(complex5);
      complex2.getField();
      complex1.getImaginary();
      complex5.readResolve();
      complex1.pow(5.383201149478553E-303);
      Complex complex6 = Complex.I;
      complex6.hashCode();
      Complex complex7 = new Complex((-1659));
      complex7.createComplex((-1659), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.2298267863810133E-8), (-1607.6062362545));
      complex0.toString();
      Complex complex1 = Complex.valueOf(27.447147544757573);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex3.multiply((-362));
      Complex complex6 = Complex.ZERO;
      complex6.abs();
      Complex complex7 = complex1.sinh();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.divide(complex4);
      Complex complex10 = complex3.tan();
      Complex complex11 = complex1.divide(complex7);
      complex10.getField();
      complex10.getImaginary();
      complex8.readResolve();
      complex9.pow((-466.9));
      complex11.hashCode();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = Complex.INF;
      complex13.createComplex((-2619.75878), 93.80161905275804);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.atan();
      complex2.I.pow(complex1);
      complex2.I.subtract((-2723.6395829));
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      complex1.NaN.hashCode();
      Complex complex5 = complex3.ZERO.sin();
      complex5.NaN.tanh();
      Complex complex6 = Complex.valueOf((-42.236195168));
      Complex complex7 = complex0.acos();
      complex0.equals(complex1);
      complex0.INF.subtract(complex1);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex3.subtract(complex7);
      Complex complex10 = Complex.INF;
      complex10.multiply(0);
      complex8.abs();
      Complex complex11 = Complex.INF;
      complex11.sinh();
      complex4.tan();
      Complex complex12 = complex6.divide(complex2);
      complex8.getField();
      complex3.getImaginary();
      complex6.readResolve();
      complex2.pow(Double.NaN);
      complex12.hashCode();
      complex9.createComplex(704.486, 4.837304583291205);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex2.I.subtract((-2723.6395829));
      complex2.multiply(1083.0100135);
      Complex complex5 = complex2.log();
      complex5.NaN.pow(complex2);
      complex1.pow(1083.0100135);
      complex0.hashCode();
      complex3.ZERO.abs();
      Complex complex6 = Complex.valueOf((-3.8207793300052055E-8), 1083.0100135);
      complex6.reciprocal();
      complex4.tan();
      complex3.subtract(complex2);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(7.070450309820548E-99, 6.283185307179586);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.createComplex((-2661.74922), 7.070450309820548E-99);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex1.add((-287.0868400394));
      complex2.abs();
      Complex complex10 = complex9.negate();
      Complex complex11 = complex7.subtract(complex4);
      complex4.asin();
      complex10.sinh();
      Complex.valueOf((-287.0868400394), (-20.0));
      Complex.valueOf((-20.0));
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex7.subtract(complex12);
      complex3.cos();
      complex7.hashCode();
      complex11.tanh();
      complex12.add(complex4);
      complex10.getImaginary();
      complex13.getReal();
      complex8.toString();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.I.multiply(complex1);
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.I.tanh();
      complex0.ZERO.hashCode();
      complex0.NaN.getArgument();
      Complex complex4 = (Complex)complex0.readResolve();
      complex0.log();
      complex4.asin();
      complex0.cosh();
      complex4.subtract(complex3);
      Complex complex5 = Complex.NaN;
      complex1.sqrt1z();
      complex3.divide(Double.NaN);
      complex5.tanh();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1788.08696808421);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.tan();
      complex1.tanh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf((-947.487272), (-947.487272));
      complex0.equals("2~-tF+@m&Sb9`q;");
      Complex complex5 = complex4.sqrt();
      complex4.getField();
      Complex complex6 = complex5.add(complex4);
      complex5.getField();
      complex6.sqrt();
      complex5.subtract(0.0);
      complex1.readResolve();
      Complex complex7 = complex3.add(6.283185307179586);
      complex4.isInfinite();
      complex2.sinh();
      Complex complex8 = complex4.tan();
      Complex complex9 = Complex.valueOf(1.6497259279398893, 5.795621295524984E-9);
      Complex complex10 = complex4.divide(complex9);
      complex2.getField();
      complex10.getImaginary();
      complex6.readResolve();
      complex7.pow((-3.292458622014749E252));
      complex8.hashCode();
      complex2.createComplex((-28.0807238552), (-617.8387443));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(389.21629460802916);
      complex0.ONE.toString();
      Complex complex1 = complex0.I.acos();
      complex0.getArgument();
      Complex complex2 = complex0.sqrt1z();
      complex2.divide(complex0);
      complex0.INF.pow(complex1);
      complex2.NaN.hashCode();
      Complex complex3 = complex0.log();
      complex2.readResolve();
      complex3.equals("cannot access {0} method in percentile implementation {1}");
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.conjugate();
      complex5.I.acos();
      Complex complex6 = complex2.I.acos();
      Complex complex7 = complex3.sqrt();
      complex7.NaN.divide(complex5);
      complex2.reciprocal();
      complex4.getArgument();
      complex1.subtract(complex4);
      complex5.cos();
      complex5.abs();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.2881702184677124, 152.631176631376);
      Complex complex1 = new Complex(6.283185307179586);
      Complex complex2 = complex0.I.pow(complex1);
      complex0.ONE.sin();
      Complex complex3 = complex0.add((-3701.0287));
      complex2.pow((-1143.14));
      Complex complex4 = complex2.sin();
      complex0.reciprocal();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex3.sqrt1z();
      complex6.asin();
      Complex complex7 = complex5.divide(152.631176631376);
      complex4.getField();
      complex0.multiply(1415);
      complex7.multiply(1415);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.log();
      Complex complex2 = Complex.valueOf((-4158.041387445), 2.1863350868225098);
      Complex complex3 = complex2.pow(23.75045740878878);
      complex3.hashCode();
      complex3.reciprocal();
      Complex complex4 = complex2.tan();
      complex1.subtract(complex3);
      Complex complex5 = Complex.ONE;
      complex5.pow(complex4);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      complex2.I.pow(complex1);
      complex2.I.subtract((-2723.6395829));
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      complex1.NaN.hashCode();
      complex3.ZERO.sin();
      Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex5 = Complex.valueOf((-42.236195168));
      complex0.acos();
      complex5.isInfinite();
      Complex complex6 = Complex.I;
      complex6.NaN.asin();
      complex4.multiply(1426);
      complex4.tanh();
      Complex complex7 = Complex.ONE;
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((double) (-1659), 5.383201149478553E-303);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.multiply(0);
      complex1.ONE.tan();
      complex0.abs();
      Complex complex4 = complex1.sinh();
      complex1.tan();
      Complex complex5 = complex2.divide(complex0);
      complex3.getField();
      complex1.getImaginary();
      complex4.readResolve();
      complex1.pow(1.8981247089866317E-7);
      complex5.hashCode();
      complex4.createComplex(5.383201149478553E-303, 1249.1561);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(5.3832011494782624E-303, (-1.8981247089866317E-7));
      complex1.hashCode();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.valueOf((-485.64818));
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.valueOf(5.3832011494782624E-303);
      complex6.equals(complex2);
      complex5.subtract(complex1);
      Complex complex7 = complex4.asin();
      complex3.subtract(complex7);
      complex4.multiply(2201);
      Complex complex8 = Complex.ZERO;
      complex3.abs();
      Complex complex9 = complex2.sinh();
      Complex complex10 = Complex.ZERO;
      complex9.ONE.divide(complex10);
      Complex complex11 = complex1.tan();
      complex11.divide(complex1);
      complex2.getField();
      complex3.getImaginary();
      complex7.readResolve();
      complex0.pow((double) 0);
      complex7.hashCode();
      Complex complex12 = Complex.ZERO;
      complex12.createComplex(0.7853981633974483, 2201);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.I.pow(complex1);
      complex2.I.subtract((-2723.6395829));
      Complex complex4 = complex0.tan();
      complex4.multiply((-1659));
      complex3.tanh();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1.0));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.isNaN();
      Complex complex3 = complex1.subtract((-1.0));
      complex3.INF.abs();
      Complex complex4 = complex3.ZERO.pow(0.0);
      Complex complex5 = complex2.asin();
      Complex.valueOf((-5.021851606912854E-228));
      complex3.readResolve();
      Complex complex6 = complex1.I.tan();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex5.ZERO.sqrt1z();
      complex5.subtract(complex6);
      complex7.add(0.0);
      complex4.acos();
      complex8.multiply(1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.atan();
      complex2.I.pow(complex1);
      Complex complex3 = complex2.I.subtract((-2723.6395829));
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      complex1.NaN.hashCode();
      Complex complex6 = complex4.ZERO.sin();
      complex6.NaN.tanh();
      Complex.valueOf((-42.236195168));
      Complex complex7 = complex0.acos();
      complex0.equals(complex1);
      Complex complex8 = complex0.INF.subtract(complex1);
      Complex complex9 = complex1.asin();
      complex4.subtract(complex7);
      Complex complex10 = Complex.INF;
      complex10.multiply(0);
      complex3.abs();
      Complex complex11 = complex2.sinh();
      complex7.tan();
      complex2.divide(complex11);
      complex1.getField();
      complex0.getImaginary();
      complex1.readResolve();
      complex9.pow((-28.0807238552));
      complex5.hashCode();
      complex8.createComplex((-1.0), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1788.08696808421);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.tanh();
      complex0.subtract(complex3);
      complex2.isNaN();
      complex0.subtract((-3415.6));
      Complex complex4 = Complex.valueOf(1788.08696808421);
      complex4.abs();
      Complex complex5 = complex1.pow(0.0);
      complex5.asin();
      Complex complex6 = Complex.valueOf(0.0);
      complex1.readResolve();
      complex0.tan();
      Complex complex7 = complex0.tanh();
      complex4.sqrt1z();
      Complex complex8 = Complex.valueOf((-3415.6), 1.0);
      complex1.negate();
      Complex complex9 = complex6.multiply(966.164043402895);
      complex7.getReal();
      complex5.cosh();
      Complex complex10 = Complex.INF;
      complex10.isInfinite();
      complex6.exp();
      complex8.conjugate();
      complex9.isInfinite();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(0.0);
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-48.49032694952828), (-1.0));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf((-48.49032694952828), 2.1863350868225098);
      complex2.equals("&&[EivZ8DH}");
      Complex complex4 = complex1.sqrt();
      complex4.NaN.atan();
      complex4.getField();
      complex4.add(complex0);
      complex2.getField();
      complex2.sqrt();
      Complex complex5 = Complex.valueOf((-48.49032694952828), (-48.49032694952828));
      Complex.valueOf(6.283185307179586);
      complex5.subtract(242.62987564186037);
      complex3.readResolve();
      Complex complex6 = complex2.add(242.62987564186037);
      complex2.isInfinite();
      Complex complex7 = complex5.createComplex((-2.2798356346688802E-7), 242.62987564186037);
      Complex complex8 = new Complex((-3415.6), 2.1863350868225098);
      complex5.cos();
      complex0.tanh();
      complex6.nthRoot(1);
      complex0.toString();
      complex7.tan();
      complex0.multiply((-3415.6));
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2395.620253614767);
      Complex complex1 = complex0.asin();
      complex1.INF.cosh();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.divide(2395.620253614767);
      Complex complex4 = complex1.tanh();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = new Complex((-1375.1), (-1375.1));
      Complex.valueOf((-6.887556547891059E-9), (-1375.1));
      Complex complex2 = new Complex(Double.NaN, 2481.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1074.0025), (-1074.0025));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.cosh();
      complex2.ZERO.sqrt();
      Complex complex3 = complex2.NaN.createComplex((-1074.0025), (-1074.0025));
      Complex complex4 = complex3.NaN.sqrt();
      complex2.sinh();
      Complex complex5 = complex0.ZERO.cosh();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.add((-174.3));
      complex7.I.abs();
      complex7.hashCode();
      Complex complex8 = complex6.ONE.negate();
      Complex complex9 = complex6.INF.subtract(complex5);
      complex8.NaN.asin();
      Complex complex10 = complex5.sinh();
      Complex complex11 = Complex.valueOf((-1074.0025), (-452.146267964836));
      Complex complex12 = Complex.valueOf(0.0);
      complex12.INF.sqrt1z();
      Complex complex13 = complex5.subtract(complex11);
      complex13.cos();
      complex10.hashCode();
      complex6.nthRoot(807);
      complex9.toString();
      complex4.tan();
      complex12.multiply((-174.3));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-1074.0025), (-1074.0025));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.cosh();
      complex2.ZERO.sqrt();
      Complex complex3 = complex2.NaN.createComplex((-1074.0025), (-1074.0025));
      complex3.NaN.sqrt();
      complex2.sinh();
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.INF.add((-174.3));
      complex6.I.abs();
      complex6.hashCode();
      Complex complex7 = complex5.ONE.negate();
      complex5.INF.subtract(complex4);
      complex7.NaN.asin();
      Complex complex8 = complex4.sinh();
      Complex.valueOf((-1074.0025), (-452.146267964836));
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.INF.sqrt1z();
      complex2.isInfinite();
      Complex complex11 = new Complex((-174.3));
      complex11.createComplex(0.0, 0.0);
      complex10.tanh();
      complex3.nthRoot(1);
      complex8.toString();
      Complex complex12 = new Complex((-1074.0025), (-812.9261482));
      complex12.tan();
      complex0.multiply(310.62);
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2395.620253614767);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      complex3.add(0.0);
      Complex complex4 = complex1.log();
      Complex complex5 = complex3.multiply(2133.64327367153);
      Complex complex6 = new Complex(0.41421356237309515, 0.0);
      complex6.negate();
      complex4.multiply(2395.620253614767);
      complex2.getReal();
      complex6.cosh();
      complex3.isInfinite();
      complex3.exp();
      complex2.conjugate();
      complex5.isInfinite();
      Complex.valueOf((-1328.3123));
      complex0.multiply(2395.620253614767);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1.0));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.isNaN();
      Complex complex3 = complex1.subtract((-1.0));
      complex3.INF.abs();
      Complex complex4 = complex3.ZERO.pow(0.0);
      Complex complex5 = complex2.asin();
      Complex.valueOf((-5.021851606912854E-228));
      Complex complex6 = (Complex)complex3.readResolve();
      Complex complex7 = complex1.I.tan();
      complex7.NaN.tanh();
      Complex complex8 = complex5.ZERO.sqrt1z();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex9 = complex6.negate();
      complex2.multiply((-859.0));
      complex4.getReal();
      complex8.cosh();
      complex7.isInfinite();
      complex2.exp();
      Complex complex10 = complex9.conjugate();
      complex9.isInfinite();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.multiply(364.54134603374);
      Complex.valueOf((-5.021851606912854E-228));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1788.08696808421);
      Complex complex1 = complex0.ONE.sin();
      complex1.tan();
      complex1.tanh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf((-947.487272), (-947.487272));
      complex0.equals("2~-tF+@m&Sb9`q;");
      Complex complex4 = complex3.sqrt();
      complex3.getField();
      Complex complex5 = complex4.add(complex3);
      complex4.getField();
      complex5.sqrt();
      complex4.subtract(0.0);
      complex1.readResolve();
      Complex complex6 = complex2.add(6.283185307179586);
      complex3.isInfinite();
      Complex complex7 = complex0.createComplex(1.6497259279398893, 301.14526);
      Complex complex8 = new Complex((-3415.6), 2573.64071126235);
      complex8.tanh();
      complex0.nthRoot(1);
      complex5.toString();
      complex6.tan();
      complex7.multiply(1.7809526920318604);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-1074.0025), (-1074.0025));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.cosh();
      complex2.ZERO.sqrt();
      Complex complex3 = complex2.NaN.createComplex((-1074.0025), (-1074.0025));
      Complex complex4 = complex3.NaN.sqrt();
      complex2.sinh();
      Complex complex5 = complex0.ZERO.cosh();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.INF.add((-174.3));
      complex7.I.abs();
      complex7.hashCode();
      Complex complex8 = complex6.ONE.negate();
      complex6.INF.subtract(complex5);
      complex8.NaN.asin();
      Complex complex9 = complex5.sinh();
      Complex complex10 = Complex.valueOf((-1074.0025), (-452.146267964836));
      Complex complex11 = Complex.valueOf(0.0);
      complex11.INF.sqrt1z();
      Complex complex12 = complex5.subtract(complex10);
      complex12.cos();
      complex9.hashCode();
      Complex complex13 = complex8.tanh();
      Complex complex14 = Complex.valueOf(357.85592);
      complex4.add(complex14);
      complex13.getImaginary();
      Complex complex15 = Complex.I;
      complex15.getReal();
      complex13.toString();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.024714469909668, 1.4142135623730951);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.subtract(complex0);
      complex4.add(0.0);
      complex1.getField();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex2.divide((-20.0));
      Complex.valueOf(2.0871420565526932E-4, 2.0871420565526932E-4);
      complex5.log();
      Complex complex7 = complex2.add(complex6);
      complex7.sinh();
      Complex complex8 = complex6.createComplex(0.0, 1.024714469909668);
      complex1.nthRoot(684);
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.sin();
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-1290.5), (double) (-1659));
      Complex complex2 = Complex.ONE;
      complex2.log();
      Complex complex3 = Complex.valueOf(2647.30358411);
      Complex complex4 = Complex.INF;
      complex3.add(complex4);
      Complex complex5 = new Complex((-1290.5));
      double double0 = 1.0;
      complex5.createComplex(1.0, (-1659));
      try { 
        complex1.nthRoot((-1116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,116
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2395.620253614767);
      Complex complex1 = complex0.asin();
      complex1.INF.cosh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.add(0.0);
      complex0.getField();
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.divide(2395.620253614767);
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = Complex.valueOf((-452.783973));
      complex1.sqrt1z();
      complex4.subtract(complex0);
      complex3.cos();
      complex0.hashCode();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.add(complex0);
      complex3.getImaginary();
      complex6.getReal();
      complex3.toString();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-1074.0025), (-1074.0025));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.cosh();
      complex2.ZERO.sqrt();
      Complex complex3 = complex2.NaN.createComplex((-1074.0025), (-1074.0025));
      complex3.NaN.sqrt();
      complex2.sinh();
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.INF.add((-174.3));
      complex6.I.abs();
      complex6.hashCode();
      Complex complex7 = complex5.ONE.negate();
      Complex complex8 = complex5.INF.subtract(complex4);
      complex7.NaN.asin();
      complex4.sinh();
      Complex.valueOf((-1074.0025), (-452.146267964836));
      Complex complex9 = complex3.log();
      Complex complex10 = complex8.add(complex1);
      complex9.sinh();
      Complex complex11 = complex10.createComplex((-2193.0), (-2193.0));
      complex11.ONE.conjugate();
      complex6.nthRoot(684);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.tanh();
      complex0.nthRoot(405);
      Complex complex2 = complex1.divide((-3250.5249709205));
      complex2.isInfinite();
      complex0.log();
      Complex complex3 = complex1.multiply(0.7853981633974483);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.negate();
      complex3.multiply((double) 405);
      complex2.getReal();
      Complex complex6 = complex5.cosh();
      complex6.isInfinite();
      Complex complex7 = Complex.ONE;
      complex7.exp();
      complex5.conjugate();
      complex6.isInfinite();
      Complex.valueOf(Double.NaN);
      complex1.multiply((double) 405);
      Complex.valueOf(4698.444071919527);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf(3727.5057035593);
      Complex complex2 = complex1.ONE.createComplex(0.0, 0.0);
      complex2.I.readResolve();
      complex2.NaN.log();
      complex2.pow(3727.5057035593);
      Complex complex3 = complex1.I.exp();
      Complex complex4 = complex3.ZERO.reciprocal();
      complex0.I.toString();
      complex3.NaN.hashCode();
      complex4.ONE.tan();
      complex3.ZERO.readResolve();
      Complex complex5 = complex0.divide(3.5306502960727705E247);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex4.ZERO.atan();
      complex8.hashCode();
      complex8.I.divide(3.5306502960727705E247);
      complex3.getReal();
      complex5.getReal();
      Complex complex9 = complex5.divide(complex3);
      complex9.isNaN();
      complex0.getReal();
      Complex complex10 = complex4.exp();
      complex10.ZERO.getArgument();
      complex0.getArgument();
      Complex complex11 = complex1.sqrt();
      complex11.equals("(0.0, 1.0)");
      complex11.ONE.add(3.5306502960727705E247);
      complex0.isNaN();
      complex11.nthRoot(7);
      complex3.pow(complex7);
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.INF.sqrt1z();
      complex2.ONE.sin();
      complex2.ONE.readResolve();
      complex1.INF.hashCode();
      complex0.NaN.getField();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex3.I.multiply(complex0);
      complex4.NaN.abs();
      complex4.ONE.add(0.0);
      Complex complex5 = complex0.INF.multiply(complex1);
      complex5.ZERO.negate();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = Complex.ZERO;
      complex6.INF.add(2728.870726426071);
      complex7.I.cos();
      complex6.ZERO.divide(complex7);
      complex0.readResolve();
      complex3.readResolve();
      Complex complex8 = Complex.valueOf(0.0);
      complex1.readResolve();
      complex8.I.hashCode();
      Complex complex9 = complex0.createComplex(3.150242850860434E59, 0.0);
      complex9.acos();
      complex8.negate();
      complex0.readResolve();
      complex0.hashCode();
      complex3.sqrt1z();
      complex5.abs();
      complex8.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2723.6395829), (-2723.6395829));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.atan();
      complex2.I.pow(complex1);
      complex2.I.subtract((-2723.6395829));
      Complex complex3 = complex0.tan();
      Complex.valueOf((-2723.6395829), (-2723.6395829));
      complex1.NaN.hashCode();
      Complex complex4 = complex3.ZERO.sin();
      complex4.NaN.tanh();
      Complex complex5 = Complex.valueOf((-42.236195168));
      complex0.acos();
      complex0.equals(complex1);
      Complex complex6 = complex0.INF.subtract(complex1);
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex7.NaN.subtract(complex6);
      complex8.NaN.multiply(0);
      complex0.abs();
      complex5.sinh();
      Complex complex9 = complex0.tan();
      complex9.I.divide(complex3);
      complex9.ZERO.getField();
      complex5.getImaginary();
      complex1.readResolve();
      Complex complex10 = complex0.pow(0.0);
      complex0.hashCode();
      complex10.createComplex(3851.8080371533797, (-42.236195168));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.subtract(complex1);
      complex0.abs();
      complex1.subtract(0.0);
      int int0 = 0;
      Complex complex2 = complex1.ONE.sinh();
      double double0 = 1.2324256896972656;
      complex2.INF.multiply(1.2324256896972656);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.304245948791504);
      Complex complex1 = complex0.I.sqrt1z();
      complex0.isInfinite();
      Complex complex2 = complex1.createComplex(1.304245948791504, 0.0);
      Complex complex3 = complex1.I.acos();
      complex2.abs();
      complex1.sqrt();
      complex3.NaN.sqrt1z();
      Complex complex4 = complex2.ZERO.pow(1.304245948791504);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.I.subtract(6.283185307179586);
      Complex complex7 = complex6.ONE.sin();
      complex3.abs();
      Complex complex8 = complex5.NaN.pow(1.0);
      complex2.getReal();
      Complex complex9 = complex3.pow(1.304245948791504);
      complex9.I.toString();
      Complex.valueOf(1.304245948791504, 1.0);
      complex3.getImaginary();
      complex8.negate();
      Complex complex10 = complex1.acos();
      complex10.INF.pow(complex7);
      Complex complex11 = complex4.multiply(1745);
      try { 
        complex11.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.NaN.cos();
      complex4.I.abs();
      complex1.ZERO.add(complex2);
      complex1.INF.tanh();
      Complex complex5 = complex4.ONE.subtract(0.0);
      Complex complex6 = complex3.ZERO.sqrt1z();
      complex6.ZERO.cosh();
      complex0.hashCode();
      complex2.readResolve();
      complex2.INF.hashCode();
      Complex complex7 = complex2.log();
      complex7.exp();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2698.329571886318));
      complex0.INF.readResolve();
      complex0.ZERO.toString();
      Complex complex1 = complex0.ZERO.multiply(0);
      Complex complex2 = complex0.log();
      complex2.ONE.subtract(complex0);
      complex1.INF.getArgument();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.cosh();
      complex1.isNaN();
      Complex complex6 = complex2.atan();
      complex1.I.sin();
      Complex complex7 = complex6.INF.subtract(1328.734052804855);
      complex1.isInfinite();
      Complex complex8 = Complex.valueOf((double) 0);
      Complex complex9 = complex5.divide(0.0);
      complex9.ONE.sin();
      complex7.divide(2.1066884994506836);
      complex8.createComplex(0.0, (-6.712199323081945E-8));
      complex3.sqrt();
      complex4.subtract((-6.712199323081945E-8));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 2959;
      complex0.I.sqrt1z();
      complex0.ZERO.nthRoot(2959);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = Complex.valueOf((double) 2959);
      complex2.INF.getField();
      double double0 = Double.POSITIVE_INFINITY;
      complex2.NaN.hashCode();
      Complex complex4 = complex3.multiply(Double.POSITIVE_INFINITY);
      complex2.NaN.createComplex(2959, 1.3003096668152053E-295);
      complex0.reciprocal();
      // Undeclared exception!
      complex4.I.nthRoot(2959);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex0.INF.divide(complex1);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(2919.3837481);
      Complex complex2 = complex0.INF.multiply(complex1);
      complex0.getField();
      complex0.toString();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.negate();
      complex2.ONE.atan();
      Complex complex5 = complex3.NaN.createComplex(Double.NaN, 0.0);
      complex5.INF.negate();
      complex0.pow(1.1339195187304043E246);
      complex3.equals(complex0);
      complex1.sqrt1z();
      complex0.ONE.sqrt1z();
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex4.ONE.createComplex(Double.POSITIVE_INFINITY, 2848.28329367);
      Complex complex6 = Complex.valueOf(3445.829962294442);
      Complex complex7 = complex6.I.cos();
      complex7.multiply(6.283185307179586);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = complex9.tan();
      complex10.NaN.divide(complex9);
      complex10.I.tanh();
      Complex complex11 = complex10.ONE.pow(complex0);
      complex8.INF.divide(complex7);
      Complex complex12 = complex11.INF.sqrt();
      complex11.ONE.readResolve();
      complex3.ONE.sqrt1z();
      complex8.multiply(467);
      complex2.acos();
      complex12.add(complex2);
      complex5.pow(288.603687965);
      Complex complex13 = Complex.NaN;
      complex1.equals(complex13);
      Complex complex14 = complex2.tanh();
      complex14.NaN.readResolve();
      complex2.conjugate();
      complex1.getImaginary();
      complex5.negate();
      complex12.sin();
      complex9.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1.1357810855950775E-7));
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = Complex.valueOf(422.1519);
      Complex complex4 = complex3.ONE.add(complex1);
      complex4.I.sqrt1z();
      complex0.hashCode();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex6.INF.tan();
      complex0.getImaginary();
      Complex complex8 = complex2.cos();
      Complex complex9 = complex4.INF.asin();
      Complex complex10 = complex3.multiply(0.0);
      complex10.subtract(complex8);
      complex10.toString();
      Complex complex11 = complex4.cos();
      complex2.I.asin();
      Complex complex12 = complex2.conjugate();
      complex9.getImaginary();
      complex4.sin();
      complex0.multiply(complex6);
      complex12.createComplex(0.0, 0.0);
      Complex.valueOf((-2404.0));
      complex7.exp();
      complex10.sqrt1z();
      complex11.getArgument();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1.0));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.isNaN();
      Complex complex3 = complex1.subtract((-1.0));
      complex3.INF.abs();
      Complex complex4 = complex3.ZERO.pow(0.0);
      Complex complex5 = complex2.asin();
      Complex complex6 = Complex.valueOf((-5.021851606912854E-228));
      Object object0 = complex3.readResolve();
      Complex complex7 = complex1.I.tan();
      complex7.NaN.tanh();
      Complex complex8 = complex5.ZERO.sqrt1z();
      Complex complex9 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.equals(object0);
      complex5.sqrt();
      complex4.getField();
      complex1.add(complex3);
      complex8.getField();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex4.I.subtract((-1.4652759033760925E-8));
      complex2.readResolve();
      complex4.add(Double.POSITIVE_INFINITY);
      complex1.isInfinite();
      complex6.createComplex((-20.0), (-1.4652759033760925E-8));
      complex5.tanh();
      complex10.nthRoot(1);
      complex5.toString();
      Complex complex12 = complex2.tan();
      complex12.ZERO.multiply((-706.5));
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.readResolve();
      Complex complex1 = complex0.I.cosh();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.add(2415.9014953);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1462.80213440259));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tanh();
      complex2.NaN.subtract((-1462.80213440259));
      complex1.asin();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.multiply((-1462.80213440259));
      Complex complex6 = complex5.ONE.sqrt1z();
      Complex complex7 = complex6.ZERO.add((-1462.80213440259));
      complex4.sinh();
      complex4.getImaginary();
      Complex complex8 = complex6.pow(complex5);
      complex1.tanh();
      complex7.asin();
      Complex.valueOf(0.0, (-1462.80213440259));
      Complex complex9 = complex0.add((-20.0));
      Complex complex10 = complex9.exp();
      complex10.NaN.cosh();
      Complex complex11 = Complex.valueOf(0.0, (-20.0));
      Complex complex12 = complex7.sqrt1z();
      Complex complex13 = complex12.subtract(complex8);
      Complex complex14 = complex13.ONE.multiply((-5.433154287341921E-8));
      complex14.I.abs();
      complex4.abs();
      Complex.valueOf((-20.0), 0.0);
      complex9.reciprocal();
      complex11.conjugate();
      complex0.INF.divide(0.0);
      Complex.valueOf(338.350898909, 0.0);
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 766.647;
      Complex complex1 = complex0.add(766.647);
      complex1.ONE.exp();
      Complex complex2 = Complex.valueOf(766.647);
      complex0.NaN.hashCode();
      complex0.hashCode();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.divide(766.647);
      Complex complex5 = complex3.ZERO.cos();
      Complex complex6 = complex0.NaN.multiply(9.158530500130718E-9);
      complex4.ONE.hashCode();
      double double1 = (-140.8383239473);
      Complex complex7 = complex1.add((-140.8383239473));
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex8.cos();
      complex7.multiply(complex9);
      complex9.asin();
      complex6.getField();
      complex6.sin();
      complex5.add(complex1);
      complex7.asin();
      try { 
        complex3.ZERO.nthRoot((-1039));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,039
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex1.atan();
      complex1.NaN.sin();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = Complex.ONE;
      complex4.INF.abs();
      complex4.NaN.getArgument();
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex5.cos();
      complex6.ONE.getField();
      complex2.readResolve();
      complex3.ONE.reciprocal();
      complex3.add(complex2);
      try { 
        complex3.nthRoot((-1928));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,928
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-1074.0025), (-1074.0025));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.cosh();
      complex2.ZERO.sqrt();
      Complex complex3 = complex2.NaN.createComplex((-1074.0025), (-1074.0025));
      complex3.NaN.sqrt();
      complex2.sinh();
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.INF.add((-174.3));
      complex6.I.abs();
      complex6.hashCode();
      Complex complex7 = complex5.ONE.negate();
      Complex complex8 = complex5.INF.subtract(complex4);
      complex7.NaN.asin();
      Complex complex9 = complex4.sinh();
      Complex complex10 = Complex.valueOf((-1074.0025), (-452.146267964836));
      Complex complex11 = Complex.valueOf(0.0);
      complex11.INF.sqrt1z();
      Complex complex12 = complex4.subtract(complex10);
      complex12.cos();
      complex9.hashCode();
      Complex complex13 = complex7.tanh();
      complex1.add(complex4);
      complex13.getImaginary();
      complex8.getReal();
      complex4.toString();
      complex13.toString();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = Complex.valueOf((-1210.99261), 0.0);
      complex2.NaN.tanh();
      Complex complex4 = complex3.INF.subtract((-1210.99261));
      complex4.INF.createComplex((-1210.99261), 0.0);
      Complex complex5 = complex2.I.asin();
      complex5.ONE.sqrt();
      complex0.I.negate();
      Complex complex6 = complex4.ZERO.divide(complex1);
      complex6.toString();
      Complex complex7 = complex4.ONE.multiply(complex2);
      Complex complex8 = complex4.I.asin();
      Complex.valueOf(0.0);
      Complex complex9 = complex8.INF.cos();
      complex9.I.multiply(2.1991829872131348);
      complex8.NaN.subtract(0.0);
      Complex complex10 = complex0.ONE.multiply(0.0);
      Complex complex11 = complex7.I.subtract(0.0);
      complex11.ONE.conjugate();
      complex0.ZERO.divide((-1210.99261));
      Complex complex12 = complex0.sinh();
      complex12.INF.readResolve();
      complex0.acos();
      complex3.tanh();
      complex0.acos();
      complex0.tan();
      complex1.readResolve();
      complex6.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(5.6696103838614634E-8);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.createComplex(5.6696103838614634E-8, 0.0);
      complex0.ONE.asin();
      complex0.I.tanh();
      complex0.ZERO.toString();
      complex0.nthRoot(1409);
      Complex complex3 = complex0.multiply((double) 1409);
      complex2.INF.conjugate();
      Complex complex4 = complex3.subtract(5.6696103838614634E-8);
      Complex complex5 = complex4.tanh();
      complex2.sin();
      complex5.log();
      complex5.createComplex(5.6696103838614634E-8, 1409);
      complex3.nthRoot(1409);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.multiply(1);
      complex0.INF.asin();
      complex0.getField();
      Complex complex1 = Complex.valueOf(2123.0, (-2608.295119071297));
      Complex complex2 = complex1.sqrt();
      complex2.nthRoot(11);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex1.negate();
      complex1.isNaN();
      Complex complex6 = complex4.log();
      complex2.cos();
      complex6.subtract((double) 11);
      Complex.valueOf((double) 11, 2123.0);
      complex5.pow(complex0);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.2298267863810133E-8), (-1607.6062362545));
      complex0.toString();
      complex0.nthRoot(6);
      complex0.conjugate();
      Complex.valueOf(409.0, (-2.2298267863810133E-8));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1144.25767516398), 20.0);
      complex0.ONE.getField();
      Complex complex1 = new Complex(1182.0, 3025.007691278);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(3025.007691278, 0.0);
      Complex complex4 = complex3.ONE.cos();
      complex4.INF.hashCode();
      Complex complex5 = complex3.ONE.reciprocal();
      complex2.I.getArgument();
      Complex complex6 = complex5.I.exp();
      complex6.NaN.exp();
      complex0.multiply(5291);
      complex0.nthRoot(1);
      complex0.getReal();
      Complex complex7 = complex0.add(complex2);
      complex2.ONE.getField();
      complex7.isNaN();
      complex0.readResolve();
      Complex complex8 = Complex.valueOf((-1144.25767516398), 1223.3355);
      complex8.INF.readResolve();
      Complex complex9 = complex0.tanh();
      complex9.log();
      complex9.I.getField();
      complex9.INF.readResolve();
      Complex complex10 = complex6.atan();
      Complex complex11 = complex10.I.multiply(1);
      complex7.nthRoot(1);
      complex10.ONE.divide(3025.007691278);
      complex10.sinh();
      complex11.createComplex((-1144.25767516398), (-1144.25767516398));
      complex9.divide(1223.3355);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-4799.818473763));
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex3.NaN.cosh();
      Object object0 = complex1.readResolve();
      complex0.I.getField();
      complex1.ZERO.getField();
      complex0.equals(object0);
      complex0.subtract(complex1);
      complex2.add(complex0);
      complex0.asin();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.multiply((-1646));
      complex0.ONE.nthRoot(17);
      complex0.INF.abs();
      complex0.getField();
      complex0.toString();
      complex2.INF.getField();
      complex1.INF.nthRoot(17);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.divide((double) 17);
      Complex complex6 = complex5.INF.negate();
      complex6.reciprocal();
      Complex.valueOf((double) 17, (double) (-1646));
      Complex complex7 = complex4.exp();
      complex7.I.pow((double) 17);
      complex7.ZERO.readResolve();
      Complex complex8 = complex2.add(complex3);
      complex8.getArgument();
      Complex.valueOf((double) 17);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.readResolve();
      Complex complex1 = Complex.valueOf(0.0);
      int int0 = 0;
      try { 
        complex1.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(4298.790247, 4298.790247);
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.log();
      complex1.NaN.negate();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.INF.tan();
      Complex complex6 = complex2.INF.sin();
      complex1.ZERO.nthRoot(312);
      Complex complex7 = complex5.I.atan();
      complex4.I.add(0.0);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex4.INF.divide(complex3);
      Complex complex10 = complex9.INF.add(0.0);
      complex10.conjugate();
      assertEquals(1.1752011936438014, complex3.getImaginary(), 0.01);
      
      List<Complex> list0 = complex2.nthRoot(837);
      assertEquals(837, list0.size());
      
      Complex complex11 = complex1.add(complex6);
      Complex complex12 = complex4.atan();
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      Complex complex13 = complex8.conjugate();
      Complex complex14 = complex13.ZERO.tan();
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertTrue(complex14.equals((Object)complex12));
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex6.negate();
      complex15.multiply(complex0);
      Complex complex16 = complex6.tan();
      complex1.isNaN();
      Complex complex17 = complex2.tanh();
      assertEquals(Double.POSITIVE_INFINITY, complex17.getImaginary(), 0.01);
      assertTrue(complex17.equals((Object)complex11));
      
      Complex complex18 = complex15.conjugate();
      assertSame(complex18, complex16);
      
      complex15.getField();
      assertSame(complex15, complex7);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0950722694396973, 1.0950722694396973);
      Complex complex1 = complex0.I.subtract(1.0950722694396973);
      Complex complex2 = complex0.cosh();
      complex2.add(1.0950722694396973);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex3.sqrt1z();
      complex1.getReal();
      Complex complex5 = complex4.acos();
      assertEquals((-0.05958446009806791), complex5.getImaginary(), 0.01);
      
      String string0 = complex1.toString();
      assertEquals("(-1.0950722694396973, 1.0)", string0);
      
      Complex complex6 = complex2.conjugate();
      assertEquals((-1.1800443144572375), complex6.getImaginary(), 0.01);
      
      complex2.sqrt1z();
      complex1.isNaN();
      assertNotSame(complex0, complex4);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(9.92958982547828E-153);
      Complex complex2 = complex1.ONE.negate();
      complex2.INF.sin();
      complex2.NaN.nthRoot(1);
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex3.I.multiply(complex1);
      complex3.ZERO.createComplex(6.113879253864931E-8, 6.113879253864931E-8);
      Complex complex5 = complex0.sqrt1z();
      assertEquals(1.0, complex5.getReal(), 0.01);
      
      complex3.cosh();
      Complex complex6 = complex4.sqrt();
      assertTrue(complex6.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2395.620253614767);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex3.add(0.0);
      assertEquals((-2395.620253614767), complex4.getImaginary(), 0.01);
      
      complex0.getField();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ZERO.divide(2395.620253614767);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex6.NaN.log();
      Complex complex8 = complex6.I.add(complex7);
      Complex complex9 = complex8.NaN.sinh();
      complex9.INF.createComplex(2395.620253614767, 0.0);
      assertEquals(1.0, complex8.getImaginary(), 0.01);
      assertNotSame(complex9, complex2);
      assertFalse(complex9.equals((Object)complex8));
      
      List<Complex> list0 = complex1.nthRoot(684);
      assertEquals(684, list0.size());
      assertEquals(8.474544678850833, complex1.getImaginary(), 0.01);
      assertFalse(list0.contains(complex2));
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      complex0.hashCode();
      assertFalse(complex0.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      complex0.toString();
      Complex complex1 = complex0.cos();
      complex1.add(0.0);
      Complex complex2 = complex0.cos();
      complex1.createComplex((-2321.0584614129125), 0.0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.valueOf(2.0);
      complex4.getField();
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex6.cos();
      assertEquals((-1.0), complex6.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      double double0 = complex2.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex3.add(2.0);
      assertSame(complex9, complex4);
      
      Complex complex10 = complex8.cos();
      assertEquals(0.5, complex8.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
  }
}
