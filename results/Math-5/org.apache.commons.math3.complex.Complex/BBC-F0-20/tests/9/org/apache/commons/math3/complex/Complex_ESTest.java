/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:53:09 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-542.1714138958971), 3.9732235656972695E240);
      Complex complex1 = complex0.sqrt();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-3.4650891244084597E148));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.INF.reciprocal();
      complex1.sinh();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.log();
      complex5.readResolve();
      complex4.divide(complex5);
      Complex complex6 = complex0.NaN.subtract(complex1);
      Complex complex7 = Complex.valueOf((-3.4650891244084597E148));
      complex4.ZERO.log();
      complex4.pow((-4180.0));
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex8.multiply(1048);
      Complex complex10 = complex9.ONE.createComplex(2.1294407844543457, 1048);
      complex10.I.readResolve();
      complex5.nthRoot(1048);
      Complex complex11 = complex7.sin();
      complex9.toString();
      Complex complex12 = complex1.asin();
      complex1.NaN.pow(complex12);
      complex3.divide((-4180.0));
      complex8.readResolve();
      complex9.log();
      complex5.multiply(1048);
      complex8.add(complex11);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.5168480541429286E-241);
      Complex complex1 = complex0.reciprocal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(819.8186967969948);
      Complex complex2 = new Complex(819.8186967969948);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.createComplex((-20.0), 2183.0);
      Complex complex5 = new Complex((-20.0), 0.6563453674316406);
      complex1.isNaN();
      Complex complex6 = Complex.valueOf((-20.0), (-20.0));
      Complex complex7 = complex0.tan();
      complex7.multiply(complex2);
      complex4.acos();
      Complex complex8 = new Complex(6.283185307179586);
      Complex complex9 = complex8.subtract(complex3);
      complex9.asin();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ZERO.divide(Double.NaN);
      complex0.ONE.multiply(Double.NaN);
      complex0.divide(Double.NaN);
      complex0.reciprocal();
      complex1.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1001.28), (-1001.28));
      complex0.ONE.multiply(1054);
      Complex complex1 = new Complex(493.0700074, Double.NaN);
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.subtract((-864.032062244));
      complex2.ONE.hashCode();
      complex0.abs();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.pow(1416.0237557329326);
      Complex complex6 = complex5.cos();
      complex4.createComplex((-1001.28), 1416.0237557329326);
      Complex complex7 = complex3.add(complex4);
      Complex.valueOf(Double.NaN);
      complex7.NaN.sqrt1z();
      complex6.getField();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(20.0, 20.0);
      Complex complex2 = new Complex(1608.7842146, 1608.7842146);
      complex2.readResolve();
      complex1.isNaN();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.tan();
      complex3.multiply(complex1);
      complex1.acos();
      complex4.asin();
      Complex.valueOf(1608.7842146);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.log();
      complex4.add(1.0);
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.ZERO;
      complex5.divide(complex6);
      Complex complex7 = Complex.I;
      complex3.createComplex(20.0, (-3781.991));
      Complex complex8 = new Complex(2054.9325482414497, (-2602770.7272196147));
      complex2.isNaN();
      complex6.sin();
      Complex complex9 = complex2.tan();
      Complex complex10 = new Complex((-3781.991), Double.POSITIVE_INFINITY);
      complex10.multiply(complex6);
      complex9.acos();
      Complex complex11 = Complex.I;
      complex11.subtract(complex1);
      complex5.asin();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
      Complex complex2 = complex0.createComplex(1399.0, (-1433.9656799));
      Complex complex3 = new Complex((-159.7948409), 1629.065496);
      complex2.isNaN();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.tan();
      complex1.multiply(complex3);
      Complex complex6 = complex3.acos();
      Complex complex7 = Complex.valueOf(1399.0, Double.NaN);
      complex4.subtract(complex7);
      complex5.asin();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.8414709848078965);
      Complex complex1 = complex0.multiply(2147480621);
      Complex complex2 = complex1.acos();
      complex2.subtract(complex1);
      Complex complex3 = complex2.asin();
      complex3.divide(880.4);
      complex0.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      complex2.isNaN();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.tan();
      complex4.multiply(complex2);
      Complex complex5 = complex0.acos();
      complex5.INF.atan();
      complex4.subtract(complex5);
      complex3.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double1 = 188.63066;
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-1.8853982316037226E201), 1.0);
      complex0.pow(complex1);
      complex1.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.add(2806.9);
      Complex complex5 = Complex.NaN;
      complex4.I.pow(complex5);
      complex1.divide(complex3);
      Complex complex6 = complex0.createComplex((-1869.411711), (-1869.411711));
      Complex complex7 = new Complex((-18.38386822), (-607.474425833973));
      complex7.I.multiply(0);
      complex3.sin();
      complex7.tan();
      complex6.subtract(2806.9);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.429395906702892);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.acos();
      complex2.subtract(complex3);
      complex1.asin();
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.01243110525436412));
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf((-0.01243110525436412), (-0.01243110525436412));
      complex0.equals(complex2);
      Complex.valueOf((-0.01243110525436412));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-842.3950446976));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.NaN.cos();
      complex4.I.hashCode();
      Complex complex6 = complex4.NaN.pow(complex5);
      Complex complex7 = complex4.sqrt1z();
      complex0.log();
      complex3.add((-842.3950446976));
      complex3.divide(complex4);
      Complex complex8 = Complex.I;
      complex4.createComplex(983.9792519, Double.NaN);
      Complex complex9 = new Complex(0.20022669434547424, 20.0);
      Complex complex10 = Complex.INF;
      complex10.isNaN();
      complex4.sin();
      complex6.tan();
      complex7.multiply(complex4);
      Complex complex11 = Complex.ONE;
      complex11.acos();
      complex9.subtract(complex4);
      Complex complex12 = Complex.ZERO;
      complex12.asin();
      Complex complex13 = Complex.I;
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-2154.1701);
      Complex complex1 = complex0.ONE.divide((-2154.1701));
      complex1.INF.cosh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.add(complex2);
      complex4.sqrt1z();
      Complex.valueOf((-2154.1701));
      Complex complex5 = Complex.valueOf((-2154.1701), (-2154.1701));
      complex5.I.cosh();
      complex0.I.cosh();
      complex2.NaN.add(complex0);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex2.asin();
      complex7.NaN.sqrt();
      complex7.equals(complex6);
      complex5.negate();
      int int0 = 0;
      complex0.multiply(0);
      complex3.cosh();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(6.23514943204966E27, 6.23514943204966E27);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.I.acos();
      complex2.I.getField();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex3.tan();
      complex1.sqrt();
      Complex complex6 = complex4.createComplex(1192848.6243200002, (-32.9585831));
      Complex complex7 = complex6.pow(4042.0);
      complex6.cosh();
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex1.cos();
      complex9.negate();
      complex3.multiply(complex7);
      complex8.sqrt();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.acos();
      complex2.subtract(Double.NaN);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-842.3950446976));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      complex2.INF.log();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.NaN.cos();
      complex3.I.hashCode();
      Complex complex5 = complex3.NaN.pow(complex4);
      complex5.ZERO.add((-842.3950446976));
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex0.log();
      complex6.add(2183.0);
      Complex complex8 = new Complex((-842.3950446976));
      complex6.acos();
      complex3.tan();
      complex7.cosh();
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1491.0607804));
      Complex complex1 = Complex.I;
      complex1.getImaginary();
      Complex complex2 = Complex.ONE;
      Complex.valueOf(1.0);
      Complex complex3 = complex0.multiply(1818.9);
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.429395906702892);
      complex0.subtract(8.429395906702892);
      complex0.hashCode();
      Complex complex1 = complex0.divide((-42.3251012351543));
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-842.3950446976));
      Complex complex1 = Complex.NaN;
      complex0.INF.add(complex1);
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.INF;
      complex2.I.hashCode();
      complex2.NaN.pow(complex3);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.log();
      complex4.add(2183.0);
      complex5.divide(complex4);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.createComplex(20.0, 2183.0);
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.I;
      complex9.hashCode();
      Complex.valueOf((-842.3950446976), 20.0);
      complex7.tanh();
      complex7.exp();
      Complex.valueOf(0.0);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.atan();
      complex0.subtract(complex2);
      Complex complex3 = Complex.valueOf(0.0, (-50.49218492545195));
      complex2.add(1.8595146192596966E-16);
      complex3.multiply(17);
      Complex complex4 = Complex.ZERO;
      complex4.reciprocal();
      complex0.multiply(complex4);
      complex3.divide((double) 17);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(0.0, 2.5168480541429286E-241);
      complex2.log();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.acos();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.log();
      complex5.hashCode();
      complex5.subtract(616.7405444435203);
      complex1.hashCode();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.ZERO.atan();
      complex3.ZERO.getField();
      Complex complex4 = complex0.reciprocal();
      complex4.I.tan();
      Complex complex5 = complex4.ZERO.negate();
      double double0 = (-597.3);
      Complex complex6 = new Complex(1936.0, (-597.3));
      Complex complex7 = complex5.NaN.divide(complex6);
      complex7.INF.toString();
      Complex complex8 = complex5.ONE.pow(1856.2077662133834);
      Complex complex9 = complex8.ONE.cosh();
      complex9.NaN.hashCode();
      complex1.NaN.createComplex(1856.2077662133834, 1856.2077662133834);
      complex8.I.reciprocal();
      complex5.getArgument();
      Complex complex10 = complex0.sqrt1z();
      complex2.NaN.readResolve();
      Complex complex11 = complex10.pow(complex1);
      complex11.I.readResolve();
      complex11.cos();
      Complex.valueOf(0.7274315214671209, 1856.2077662133834);
      Complex complex12 = complex0.subtract(complex4);
      complex12.INF.sin();
      // Undeclared exception!
      complex10.nthRoot(1989238397);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-842.3950446976));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf((-842.3950446976), (-842.3950446976));
      complex4.I.hashCode();
      complex1.toString();
      complex1.acos();
      Complex complex6 = Complex.INF;
      complex2.hashCode();
      complex5.sqrt1z();
      Complex complex7 = complex3.log();
      Complex complex8 = complex7.add((-1126.155734));
      complex8.divide(complex5);
      Complex complex9 = Complex.I;
      complex7.hashCode();
      Complex complex10 = Complex.ZERO;
      complex9.tanh();
      complex0.divide((-1126.155734));
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1491.0607804));
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.log();
      complex0.toString();
      Complex complex3 = complex0.acos();
      complex1.cos();
      complex0.hashCode();
      complex3.sqrt1z();
      Complex complex4 = complex0.log();
      complex0.add(2183.0);
      Complex complex5 = Complex.NaN;
      complex0.divide(complex5);
      Complex complex6 = Complex.I;
      complex6.hashCode();
      Complex complex7 = Complex.ZERO;
      complex2.tanh();
      complex6.divide(2098.4505275801);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-842.3950446976));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.NaN.multiply(1);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.multiply(1);
      complex1.atan();
      complex2.getReal();
      complex2.getReal();
      Complex complex6 = complex5.subtract(complex0);
      complex5.add(1815.41134);
      Complex complex7 = Complex.ONE;
      String string0 = "b-\\uyK5WO";
      complex4.equals(string0);
      complex7.hashCode();
      complex1.getArgument();
      complex3.tanh();
      complex6.multiply(17);
      Complex complex8 = complex4.divide(Double.NaN);
      complex8.pow(1609.64148759);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1491.0607804));
      Complex complex1 = new Complex(0.0, (-1491.0607804));
      complex1.nthRoot(328);
      complex0.divide((double) 328);
      complex0.pow((-2112.9419578124));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(47.4574, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = new Complex(0.0, 2.5168480541429286E-241);
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf(616.7405444435203);
      Complex complex4 = complex3.acos();
      complex2.sqrt1z();
      Complex complex5 = complex2.log();
      complex4.hashCode();
      Complex complex6 = (Complex)complex0.readResolve();
      complex6.hashCode();
      Complex complex7 = Complex.ZERO;
      complex0.getArgument();
      complex6.tanh();
      complex0.ZERO.getArgument();
      complex0.multiply(1518500250);
      complex3.divide(6.283185307179586);
      complex4.pow(2.5168480541429286E-241);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-842.3950446976));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      complex2.NaN.multiply(1);
      complex2.INF.log();
      Complex complex3 = complex1.multiply((-2372));
      Complex complex4 = complex1.atan();
      complex2.getReal();
      complex1.getReal();
      complex3.subtract(complex1);
      Complex.valueOf((double) 1813, 6.283185307179586);
      Complex complex5 = complex4.add((-384.91));
      Complex complex6 = new Complex(Double.NaN, 1813);
      complex6.multiply(1813);
      complex3.reciprocal();
      complex5.multiply(complex0);
      Complex complex7 = Complex.ZERO;
      complex7.multiply(1);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2183.9033996857, (-817.3118012654));
      complex1.add(2308.0006434610564);
      Complex complex2 = Complex.I;
      complex0.I.atan();
      complex2.multiply(17);
      Complex.valueOf((double) 17, (-817.3118012654));
      complex0.multiply((-103));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(1235.619, 1235.619);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(1235.619);
      complex2.ONE.tan();
      complex1.pow((-20.0));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(343.1724528661539);
      Complex complex1 = complex0.I.subtract(1613.311106767574);
      Complex complex2 = complex1.NaN.log();
      complex1.pow(complex0);
      complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.negate();
      complex4.nthRoot(156);
      Complex complex5 = complex4.I.pow(343.1724528661539);
      complex5.ONE.sqrt();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex0.add(0.0);
      complex7.pow(complex4);
      complex2.I.tan();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex8.reciprocal();
      Complex.valueOf(1613.311106767574, (double) 156);
      Complex complex10 = complex9.add(1.0628208999425537);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex10.reciprocal();
      Complex complex13 = complex0.multiply(complex6);
      complex13.exp();
      complex8.multiply(865);
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.toString();
      Complex complex1 = complex0.pow(2.7472456017809066E228);
      complex0.I.multiply(1);
      Complex complex2 = complex0.I.atan();
      complex0.getReal();
      complex0.getReal();
      Complex complex3 = complex1.ONE.subtract(complex0);
      complex1.add((-1018.004835788));
      Complex complex4 = Complex.ONE;
      complex3.equals(complex4);
      complex4.hashCode();
      complex0.getArgument();
      Complex complex5 = complex0.tanh();
      complex5.multiply(1518500250);
      complex4.divide((-20.0));
      complex2.pow(1609.64148759);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(343.1724528661539);
      Complex complex1 = complex0.I.subtract(1613.311106767574);
      Complex complex2 = complex1.NaN.log();
      complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.negate();
      complex4.nthRoot(156);
      Complex complex5 = complex4.I.pow(343.1724528661539);
      Complex complex6 = complex5.ONE.sqrt();
      complex1.conjugate();
      Complex complex7 = complex0.add(0.0);
      complex7.pow(complex4);
      complex7.add(4450.87855);
      complex0.multiply(Integer.MAX_VALUE);
      complex1.reciprocal();
      complex6.multiply(complex2);
      Complex complex8 = complex4.multiply((-851));
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.divide(0.0);
      complex2.hashCode();
      complex1.multiply(complex0);
      Complex complex3 = complex1.multiply(774.9508852295);
      complex0.add(2.007428933605617E272);
      complex0.sinh();
      Complex complex4 = complex1.sqrt();
      complex2.sin();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex6.add(2.659776075359514E-185);
      Object object0 = new Object();
      complex1.equals(object0);
      complex7.hashCode();
      complex5.getArgument();
      Complex complex8 = new Complex((-20.0));
      complex8.tanh();
      complex1.multiply(Integer.MAX_VALUE);
      complex5.divide(2318.93);
      complex4.pow((-273.4108));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(47.4574, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.pow(complex2);
      complex3.abs();
      complex0.sqrt1z();
      Complex complex4 = complex1.negate();
      complex1.nthRoot(156);
      Complex complex5 = complex0.pow(1988.6);
      complex1.sqrt();
      Complex complex6 = complex3.conjugate();
      complex5.add(Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex((-1613.311106767574), (-1061.0364653));
      complex4.pow(complex7);
      complex3.tan();
      Complex complex8 = complex7.sqrt();
      complex6.reciprocal();
      Complex.valueOf((-383.2032152088), (-1613.311106767574));
      complex6.add((-383.2032152088));
      Complex complex9 = Complex.NaN;
      complex8.reciprocal();
      Complex complex10 = Complex.ONE;
      complex7.multiply(complex10);
      complex7.multiply(0);
      complex0.multiply((double) 156);
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(1.5809214115142822, 0.0);
      complex0.NaN.toString();
      Complex complex1 = complex0.multiply(148);
      Complex complex2 = complex1.atan();
      Complex complex3 = new Complex(1.5809214115142822);
      complex3.getReal();
      complex3.getReal();
      complex2.subtract(complex3);
      Complex.valueOf(1.5809214115142822, (-2046.0335451046));
      complex2.add(1.5809214115142822);
      Complex complex4 = new Complex(1325.25987441);
      complex4.multiply(0);
      complex4.reciprocal();
      Complex complex5 = Complex.valueOf(1433.8, (double) 148);
      Complex complex6 = Complex.valueOf((-2633.048));
      complex5.multiply(complex6);
      complex5.multiply((-513));
      complex0.tan();
      complex1.multiply(133);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(343.1724528661539);
      Complex complex1 = complex0.I.subtract(1613.311106767574);
      Complex complex2 = complex1.NaN.log();
      complex1.pow(complex0);
      complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.negate();
      complex4.nthRoot(156);
      complex0.sqrt1z();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.sinh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.sin();
      complex1.abs();
      complex7.NaN.sqrt();
      complex0.INF.sqrt();
      complex8.acos();
      Complex.valueOf(1613.311106767574);
      complex6.pow(complex1);
      complex5.sqrt1z();
      complex2.readResolve();
      complex4.getImaginary();
      complex2.tanh();
      complex8.getField();
      complex4.isNaN();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(1725.1209218);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.createComplex(1725.1209218, 1725.1209218);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 3056.0);
      complex3.hashCode();
      complex1.multiply(3056.0);
      Complex complex4 = complex3.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.sinh();
      complex5.sqrt();
      complex1.sin();
      complex3.exp();
      complex0.negate();
      Complex complex6 = new Complex((-1275.6811982113), (-58.9638));
      complex6.add(0.0);
      complex2.equals(complex4);
      complex3.hashCode();
      complex0.tanh();
      complex0.multiply(1518500250);
      complex3.divide(2.0);
      complex2.pow((-4.350745270980051E-10));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(47.4574, Double.POSITIVE_INFINITY);
      complex0.getField();
      complex0.sqrt();
      Complex complex1 = Complex.valueOf(47.4574);
      complex0.subtract(complex1);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex0.tanh();
      complex4.sinh();
      complex3.sin();
      complex0.abs();
      Complex complex8 = Complex.valueOf(1.0, 47.4574);
      complex8.acos();
      Complex.valueOf(6.283185307179586);
      Complex complex9 = complex6.pow(complex7);
      complex9.sqrt1z();
      complex3.readResolve();
      complex0.getImaginary();
      complex7.tanh();
      complex4.getField();
      complex9.isNaN();
      Complex complex10 = new Complex(842.3950446976, 3361.37358);
      complex10.add(complex2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(343.1724528661539);
      Complex complex1 = complex0.I.subtract(1613.311106767574);
      Complex complex2 = complex1.NaN.log();
      complex1.pow(complex0);
      complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.negate();
      complex4.nthRoot(156);
      Complex complex5 = complex3.tanh();
      complex4.sinh();
      complex3.sin();
      Complex complex6 = Complex.I;
      complex6.abs();
      complex1.acos();
      Complex.valueOf((-615.823443528));
      complex0.pow(complex5);
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = new Complex((-1056.0747490875));
      complex8.readResolve();
      complex5.getImaginary();
      Complex complex9 = complex8.tanh();
      complex9.getField();
      complex1.isNaN();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getField();
      Complex complex1 = new Complex(0.0, 1.5809214115142822);
      complex1.hashCode();
      complex1.multiply(complex0);
      Complex complex2 = new Complex((-3.158898981674071E-9), (-3.158898981674071E-9));
      Complex complex3 = complex2.multiply((-117766.33240617262));
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.add(2.5168480541429286E-241);
      Complex complex6 = complex3.sinh();
      complex6.sqrt();
      Complex complex7 = complex4.sin();
      complex5.exp();
      complex5.negate();
      complex4.add(2.5168480541429286E-241);
      Complex complex8 = Complex.INF;
      complex7.equals(complex8);
      complex3.hashCode();
      complex0.getArgument();
      complex1.tanh();
      complex5.multiply(1518500250);
      complex7.divide((-1.4993125093843105));
      complex4.pow((-577.835));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(47.4574, 1461.64755);
      complex0.toString();
      complex0.readResolve();
      complex0.abs();
      Complex complex1 = complex0.sinh();
      complex0.getField();
      complex1.toString();
      Complex complex2 = complex1.pow(491.85567526873);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.exp();
      complex0.readResolve();
      Complex complex5 = Complex.valueOf(2.6631035804748535);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.pow(complex4);
      Complex complex8 = complex7.sqrt1z();
      complex2.readResolve();
      complex5.getImaginary();
      Complex complex9 = complex7.tanh();
      Complex complex10 = Complex.NaN;
      complex3.getField();
      complex9.isNaN();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.acos();
      Object object0 = new Object();
      complex8.equals(object0);
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(47.4574, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = new Complex(0.0, 2.5168480541429286E-241);
      complex1.hashCode();
      Complex complex2 = complex1.multiply(complex0);
      complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex6.negate();
      complex3.add((-1018.004835788));
      complex0.equals(complex4);
      complex2.hashCode();
      complex7.getArgument();
      complex0.tanh();
      complex6.readResolve();
      Complex complex9 = Complex.I;
      Object object0 = new Object();
      complex8.equals(object0);
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(1235.619, 1235.619);
      Complex complex1 = complex0.reciprocal();
      complex0.multiply(complex1);
      complex1.multiply(865);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply((-5014));
      complex0.INF.nthRoot(126);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.ONE.atan();
      complex3.ONE.getField();
      complex1.subtract(1.1752011936438014);
      Complex complex4 = complex0.createComplex((-5014), 1.1752011936438014);
      complex2.sqrt();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex2.sqrt();
      complex7.ONE.multiply(137);
      Complex complex8 = complex6.ONE.exp();
      complex8.INF.getField();
      complex8.ZERO.add((-20.0));
      complex5.getField();
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex9.ZERO.sqrt();
      complex0.abs();
      complex9.reciprocal();
      complex2.getField();
      complex10.subtract((-885.7706884277));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.pow(1.2148524338631086);
      Complex complex3 = complex2.divide(1.2148524338631086);
      complex3.ZERO.exp();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.divide((-5952084.389664163));
      complex5.I.add(Double.NaN);
      Complex complex6 = complex1.ONE.multiply(complex0);
      complex1.I.getArgument();
      Complex complex7 = complex1.atan();
      complex7.ZERO.exp();
      Complex complex8 = complex7.INF.cosh();
      Complex complex9 = complex4.pow((-2391.235));
      Complex complex10 = complex9.NaN.exp();
      complex8.tanh();
      complex10.asin();
      complex1.getField();
      complex8.nthRoot(1963);
      complex7.multiply(complex0);
      complex6.pow(complex1);
      Complex complex11 = complex8.log();
      Complex complex12 = complex7.pow(complex11);
      complex12.ONE.multiply(1963);
      complex1.multiply(complex12);
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 47.4574);
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.multiply(complex3);
      complex4.sqrt();
      Complex complex5 = complex1.INF.sqrt();
      complex5.ONE.createComplex(Double.POSITIVE_INFINITY, 1206.1);
      complex1.ZERO.multiply(complex5);
      complex5.INF.asin();
      Complex complex6 = complex5.subtract(47.4574);
      Complex complex7 = complex6.ONE.subtract(complex2);
      complex7.ZERO.asin();
      complex0.ONE.atan();
      complex0.readResolve();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(complex8);
      Complex complex9 = complex8.sqrt();
      Complex.valueOf(47.4574, Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex10 = new Complex(0.0, 0.0);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(343.1724528661539);
      Complex complex1 = complex0.I.subtract(1613.311106767574);
      complex1.NaN.log();
      complex1.pow(complex0);
      complex0.abs();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.negate();
      complex3.nthRoot(156);
      Complex complex4 = complex3.I.pow(343.1724528661539);
      complex4.ONE.sqrt();
      complex0.subtract(complex4);
      Complex complex5 = Complex.valueOf((-5504.202960683044), 343.1724528661539);
      complex5.add((-2878.177386864));
      complex1.multiply(156);
      complex5.reciprocal();
      complex0.multiply(complex5);
      complex3.multiply(1141);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(343.1724528661539);
      Complex complex1 = complex0.I.subtract(1613.311106767574);
      Complex complex2 = complex1.NaN.log();
      complex1.pow(complex0);
      complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.negate();
      complex4.nthRoot(156);
      Complex complex5 = complex4.I.pow(343.1724528661539);
      complex5.ONE.sqrt();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex0.add(0.0);
      complex7.pow(complex4);
      complex2.I.tan();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex8.reciprocal();
      Complex.valueOf(1613.311106767574, (double) 156);
      Complex complex10 = complex9.add(1.0628208999425537);
      Complex complex11 = Complex.NaN;
      complex10.reciprocal();
      complex0.multiply(complex6);
      complex8.multiply(865);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.reciprocal();
      Complex.valueOf(0.0);
      complex3.multiply(complex2);
      complex1.sqrt();
      Complex complex4 = complex2.sqrt();
      complex2.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex7.subtract(complex5);
      complex3.asin();
      Complex complex11 = complex2.atan();
      complex3.readResolve();
      complex4.subtract(complex9);
      complex10.divide(complex11);
      Complex complex12 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex12.sqrt();
      Complex.valueOf((-1.3868909047401142E10), 1613.311106767574);
      complex5.getImaginary();
      complex11.getArgument();
      Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      complex10.add(complex9);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(47.4574, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = new Complex(0.0, 2.5168480541429286E-241);
      complex1.hashCode();
      Complex complex2 = complex1.multiply(complex0);
      complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex1.exp();
      complex6.negate();
      complex3.add((-1018.004835788));
      complex0.equals(complex4);
      complex2.hashCode();
      complex7.getArgument();
      Complex complex8 = complex0.tanh();
      complex1.multiply(1518500250);
      Complex complex9 = complex8.divide((-1.4993125093843105));
      complex9.pow(5.672812341879918E178);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.toString();
      Complex complex1 = complex0.pow(2.7472456017809066E228);
      complex1.abs();
      Complex complex2 = complex1.sinh();
      complex0.getField();
      complex2.toString();
      complex0.pow(Double.NaN);
      complex0.sqrt();
      complex1.ZERO.tanh();
      complex0.readResolve();
      Complex complex3 = new Complex(2.7472456017809066E228, 2.7472456017809066E228);
      complex2.pow(complex3);
      complex1.conjugate();
      Complex complex4 = Complex.valueOf((-1678.01063638178));
      complex0.atan();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(1.5809214115142822, 0.0);
      complex0.NaN.toString();
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.multiply((-2147483647));
      Complex complex2 = complex1.atan();
      complex1.getReal();
      complex0.getReal();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.subtract(complex3);
      Complex.valueOf((-3841.7068409783), 0.0);
      complex2.add((-729.58979643));
      complex2.multiply((-3365));
      complex4.reciprocal();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.ZERO;
      complex5.multiply(complex6);
      complex1.multiply((-3365));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.toString();
      Complex complex1 = complex0.pow(2.7472456017809066E228);
      Complex complex2 = complex0.I.multiply(1);
      complex0.I.atan();
      complex0.getReal();
      complex0.getReal();
      complex1.ONE.subtract(complex0);
      Complex.valueOf(2.7472456017809066E228, 1325.25987441);
      Complex complex3 = complex0.ZERO.add(0.0);
      complex3.ONE.cos();
      Complex complex4 = complex0.multiply(1813);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.multiply(complex4);
      complex4.INF.add(complex2);
      Complex complex7 = complex5.multiply(4216);
      complex7.sqrt();
      complex6.divide(0.04674194008111954);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1725.1209218, 1725.1209218);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.createComplex(1725.1209218, 1725.1209218);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.subtract(complex2);
      complex0.ZERO.cosh();
      Complex complex6 = complex2.sqrt1z();
      complex6.ZERO.sinh();
      complex6.ONE.sqrt1z();
      Complex complex7 = complex6.I.tanh();
      complex7.INF.sinh();
      Complex complex8 = complex0.sin();
      complex0.abs();
      Complex complex9 = complex5.acos();
      Complex.valueOf(5.707867001443433E-160);
      complex9.pow(complex0);
      Complex complex10 = Complex.valueOf(1725.1209218, 2439.6894043431357);
      complex10.NaN.readResolve();
      complex10.getImaginary();
      Complex complex11 = complex8.tanh();
      complex11.ZERO.getField();
      complex3.isNaN();
      complex8.acos();
      complex5.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(1.5809214115142822, 0.0);
      complex0.toString();
      complex0.readResolve();
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(1.5809214115142822, 0.0);
      complex2.getField();
      complex1.toString();
      Complex complex3 = complex1.pow((-876.4432113));
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.exp();
      complex4.readResolve();
      complex1.pow(complex4);
      Complex complex6 = complex4.divide(1.5809214115142822);
      complex6.I.abs();
      complex5.conjugate();
      Complex.valueOf(0.0);
      complex0.atan();
      complex3.hashCode();
      Complex complex7 = Complex.ZERO;
      complex2.add(complex7);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex(117766.33240617262, 0.0);
      Complex complex4 = complex3.acos();
      complex1.sqrt1z();
      Complex complex5 = Complex.I;
      complex5.log();
      complex5.hashCode();
      complex1.readResolve();
      complex0.exp();
      complex5.divide(complex2);
      complex3.readResolve();
      complex1.equals(complex2);
      complex4.multiply(117766.33240617262);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex0.getField();
      complex0.NaN.multiply(646);
      complex1.equals(complex2);
      complex2.hashCode();
      complex1.getArgument();
      Complex complex3 = complex1.tanh();
      complex3.multiply(556);
      complex1.divide(2.2036094805348692E-9);
      complex2.pow(0.40532032631947223);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(1725.1209218);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.createComplex(1725.1209218, 1725.1209218);
      complex2.pow(1725.1209218);
      complex0.multiply(1);
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.valueOf((-1.4993125093843105), (double) 1);
      complex4.getReal();
      complex2.getReal();
      complex2.subtract(complex4);
      Complex.valueOf(1122.601237491, (-503.0));
      complex3.add(3802.8548333385);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.multiply(2146239538);
      Complex complex7 = complex5.reciprocal();
      complex6.multiply(complex1);
      complex7.multiply(1813);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1.5809214115142822, 0.0);
      complex0.NaN.toString();
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.abs();
      complex0.ONE.sinh();
      complex0.getField();
      complex0.toString();
      complex0.pow(0.0);
      Complex complex2 = complex0.sqrt();
      complex2.NaN.exp();
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = Complex.valueOf(1.5809214115142822);
      Complex complex5 = complex3.pow(complex4);
      complex1.sqrt1z();
      complex1.readResolve();
      complex1.getImaginary();
      Complex complex6 = complex3.tanh();
      Complex complex7 = Complex.NaN;
      complex7.getField();
      complex7.isNaN();
      Complex complex8 = complex5.acos();
      complex4.equals(complex6);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = Complex.valueOf(0.0);
      complex0.multiply(complex1);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = Complex.valueOf(8.378574405736031E-247);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex2.exp();
      complex2.subtract(0.0);
      complex3.divide(complex6);
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(343.1724528661539);
      Complex complex1 = complex0.I.subtract(1613.311106767574);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = Complex.ZERO;
      complex0.abs();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.I.negate();
      complex5.nthRoot(156);
      Complex complex6 = complex5.I.pow(343.1724528661539);
      complex6.ONE.sqrt();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex0.add(0.0);
      Complex complex9 = complex8.pow(complex5);
      complex2.I.tan();
      Complex complex10 = complex8.I.sqrt();
      Complex complex11 = complex9.divide((-79.94736581));
      complex2.tanh();
      complex9.nthRoot(322);
      Complex complex12 = complex3.sin();
      complex2.log();
      Complex.valueOf(0.0);
      complex1.tan();
      complex10.getArgument();
      complex8.hashCode();
      complex12.acos();
      complex11.atan();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex0.subtract(complex1);
      complex1.getField();
      Complex complex2 = complex0.multiply((-4013));
      Complex complex3 = Complex.INF;
      complex3.abs();
      complex2.divide(complex0);
      complex2.tanh();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = complex2.ZERO.log();
      complex3.ONE.acos();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ZERO.log();
      complex1.hashCode();
      Complex complex6 = (Complex)complex4.ZERO.readResolve();
      complex5.equals((Object) null);
      Complex complex7 = Complex.ZERO;
      complex7.hashCode();
      complex6.getArgument();
      complex7.tanh();
      complex7.multiply(511);
      complex5.divide(671.9436145);
      complex5.pow(671.9436145);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sqrt1z();
      complex0.getField();
      Complex complex2 = new Complex(0.0, 0.0);
      complex0.NaN.hashCode();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.ONE.multiply((-3676.528319544));
      complex3.ONE.add(0.0);
      complex5.NaN.sinh();
      Complex complex6 = complex3.I.sqrt();
      Complex complex7 = complex4.NaN.sin();
      Complex complex8 = complex7.exp();
      complex8.I.negate();
      Complex complex9 = complex4.ONE.add(0.0);
      complex6.exp();
      complex5.divide(complex0);
      complex9.readResolve();
      Complex complex10 = Complex.I;
      complex3.equals(complex10);
      complex1.multiply(1973.510757706385);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1725.1209218);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.createComplex(1725.1209218, 1725.1209218);
      complex2.ONE.sqrt();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.subtract(complex2);
      complex0.ZERO.cosh();
      Complex complex5 = Complex.NaN;
      complex5.ZERO.sinh();
      complex5.ONE.sqrt1z();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex0.sin();
      complex0.abs();
      Complex complex9 = complex4.acos();
      Complex complex10 = Complex.NaN;
      complex9.pow(complex0);
      Complex complex11 = complex7.sqrt1z();
      complex11.NaN.readResolve();
      Complex complex12 = complex8.ZERO.acos();
      complex12.add(5.707867001443433E-160);
      complex11.getImaginary();
      complex8.tanh();
      Complex complex13 = Complex.valueOf(1.0, 1725.1209218);
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.tanh();
      Complex complex3 = complex2.ZERO.divide(0.5098485946655273);
      Complex complex4 = complex2.ZERO.cos();
      complex1.getImaginary();
      Complex complex5 = complex4.sinh();
      complex5.INF.tan();
      Complex complex6 = complex1.ONE.createComplex(0.7615941559557649, 96.0978144);
      Complex complex7 = complex3.subtract(complex2);
      Complex complex8 = complex1.exp();
      complex1.tan();
      Complex complex9 = complex7.sin();
      Complex complex10 = Complex.valueOf(0.7615941559557649);
      complex6.INF.divide(complex10);
      complex8.asin();
      Complex complex11 = Complex.valueOf(2814.35943963, 2.3609400272358744E-8);
      Complex complex12 = complex11.add((-3203.4845));
      complex2.log();
      Complex complex13 = complex5.sinh();
      Complex complex14 = complex5.asin();
      complex14.add(0.5098485946655273);
      complex8.pow(complex6);
      complex1.isInfinite();
      complex13.readResolve();
      Complex complex15 = complex9.sinh();
      complex5.sinh();
      complex7.readResolve();
      complex15.add(complex13);
      complex12.createComplex(931.47439755438, (-3632.400683));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sqrt1z();
      complex0.getField();
      Complex complex2 = new Complex(0.0, 0.0);
      complex0.NaN.hashCode();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.ONE.multiply((-3676.528319544));
      complex3.ONE.add(0.0);
      complex5.NaN.sinh();
      Complex complex6 = complex3.I.sqrt();
      Complex complex7 = complex4.NaN.sin();
      Complex complex8 = complex7.exp();
      complex8.I.negate();
      complex4.ONE.add(0.0);
      complex4.equals((Object) null);
      complex6.hashCode();
      complex1.getArgument();
      Complex complex9 = complex6.tanh();
      complex9.NaN.multiply(556);
      complex0.divide(0.0);
      complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.toString();
      Complex complex1 = complex0.pow(2.7472456017809066E228);
      complex0.I.multiply(1);
      complex0.I.atan();
      complex0.getReal();
      complex0.getReal();
      complex1.ONE.subtract(complex0);
      Complex.valueOf(2.7472456017809066E228, 1325.25987441);
      complex0.ZERO.add(0.0);
      Complex complex2 = complex0.multiply(1813);
      Complex complex3 = complex2.reciprocal();
      complex1.multiply(complex2);
      complex3.multiply(4216);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = Complex.valueOf(0.0);
      complex0.multiply(complex1);
      Complex complex2 = complex0.conjugate();
      Complex.valueOf(8.378574405736031E-247);
      Complex complex3 = Complex.valueOf(0.0);
      complex0.cos();
      complex1.exp();
      complex3.subtract(808.888068);
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.divide(20.0);
      Complex complex3 = Complex.valueOf((-4105.310670563932), 0.0);
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex1.ZERO.cosh();
      complex2.isNaN();
      complex0.getReal();
      complex1.abs();
      Complex complex8 = complex1.reciprocal();
      complex3.I.sqrt1z();
      complex8.getReal();
      Complex complex9 = complex1.add((-20.0));
      complex6.ZERO.sqrt1z();
      complex3.atan();
      complex9.I.sinh();
      complex7.isInfinite();
      Complex complex10 = complex4.pow(0.0);
      complex1.readResolve();
      complex9.isNaN();
      complex10.tanh();
      complex4.pow(complex3);
      complex6.toString();
      complex3.multiply(3517);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(343.1724528661539);
      Complex complex1 = complex0.I.subtract(1613.311106767574);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.pow(complex0);
      complex0.abs();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.I.negate();
      complex5.nthRoot(156);
      Complex complex6 = complex5.I.pow(343.1724528661539);
      complex6.ONE.sqrt();
      complex1.conjugate();
      Complex complex7 = complex0.add(0.0);
      complex7.pow(complex5);
      complex2.I.tan();
      Complex complex8 = complex7.I.sqrt();
      complex8.reciprocal();
      complex4.ZERO.log();
      Complex complex9 = complex3.tanh();
      complex9.ONE.pow(0.0);
      complex1.hashCode();
      complex4.subtract(0.0);
      complex1.getArgument();
      Complex complex10 = complex7.cosh();
      complex2.isInfinite();
      complex10.cosh();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.multiply(6.283185307179586);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex4.ONE.add(complex1);
      complex0.getImaginary();
      complex2.NaN.acos();
      Complex complex6 = complex2.ZERO.negate();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.NaN.subtract(0.0);
      complex0.I.add(complex2);
      complex8.ZERO.multiply(6.283185307179586);
      Complex complex9 = complex0.NaN.atan();
      complex4.readResolve();
      Complex complex10 = complex7.I.subtract(complex3);
      Complex complex11 = complex10.multiply(complex9);
      complex10.NaN.multiply(0.0);
      complex4.toString();
      complex8.getReal();
      complex5.negate();
      complex6.getArgument();
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(367.0, 367.0);
      Complex complex1 = new Complex(367.0);
      complex0.divide(complex1);
      Complex complex2 = Complex.valueOf(367.0, 367.0);
      complex0.ONE.negate();
      Complex complex3 = complex0.ONE.multiply(complex2);
      complex3.createComplex(367.0, 367.0);
      complex3.ONE.conjugate();
      Complex complex4 = complex0.ZERO.conjugate();
      complex3.ONE.divide((-1926.2767));
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ZERO.asin();
      complex6.INF.cos();
      Complex complex7 = Complex.valueOf((-1926.2767));
      Complex complex8 = complex7.INF.atan();
      complex8.NaN.toString();
      complex8.ONE.exp();
      complex5.getReal();
      Complex.valueOf((-2.052818130369225E159), 6.283185307179586);
      Complex complex9 = Complex.valueOf(6.283185307179586, 20.0);
      complex9.INF.multiply(7);
      complex4.equals(complex9);
      complex4.readResolve();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.divide(complex0);
      complex2.I.createComplex(0.0, 2.05047480130511E-9);
      Complex complex3 = complex2.NaN.subtract(2.05047480130511E-9);
      Complex complex4 = complex3.pow((-1384.9));
      complex4.conjugate();
      complex4.ZERO.subtract(3.5201699899499525E-100);
      Complex complex5 = complex0.tan();
      complex5.NaN.hashCode();
      complex5.NaN.sqrt1z();
      Complex complex6 = complex0.NaN.add(complex1);
      Complex complex7 = complex6.I.divide(complex3);
      Complex complex8 = complex0.INF.add(2.05047480130511E-9);
      complex8.ONE.subtract(complex5);
      Complex complex9 = Complex.valueOf(2.05047480130511E-9, 2.05047480130511E-9);
      complex9.nthRoot(109);
      complex0.toString();
      complex0.pow((-385.39));
      complex0.createComplex((-780.911778298), 2.05047480130511E-9);
      Complex complex10 = Complex.valueOf(0.0, (-780.911778298));
      Complex.valueOf(1846.658654);
      complex7.getField();
      complex10.multiply(complex3);
      Complex complex11 = complex10.multiply((double) 109);
      complex11.subtract(0.0);
      complex9.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2428.39246036683);
      Complex complex2 = complex0.divide(complex1);
      complex0.isNaN();
      Complex complex3 = complex1.I.pow(complex2);
      Complex complex4 = complex3.ZERO.cos();
      complex4.INF.hashCode();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.INF.pow(complex0);
      Complex complex7 = complex6.add(2428.39246036683);
      complex6.NaN.multiply(complex3);
      complex2.ZERO.negate();
      complex1.tan();
      Complex complex8 = complex5.ZERO.asin();
      complex8.INF.sin();
      complex2.isNaN();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex9.NaN.acos();
      Complex complex11 = complex0.multiply(complex9);
      complex11.ZERO.conjugate();
      complex2.log();
      complex11.toString();
      complex10.getArgument();
      Complex complex12 = Complex.INF;
      complex12.I.tanh();
      Complex complex13 = complex7.divide(complex12);
      complex0.NaN.subtract((-1026.5170248583074));
      complex9.getField();
      complex13.abs();
      complex7.isNaN();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.subtract(1855.3266);
      Complex complex3 = complex0.ZERO.multiply(1855.3266);
      complex0.negate();
      complex3.negate();
      Complex complex4 = complex2.pow(complex3);
      complex0.divide(1855.3266);
      Complex complex5 = complex4.cosh();
      complex5.ONE.conjugate();
      complex5.ZERO.conjugate();
      complex2.equals(complex5);
      complex2.pow(complex3);
      complex5.createComplex(0.0, 0.0);
      complex1.subtract(1855.3266);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.negate();
      complex1.I.toString();
      complex0.hashCode();
      complex1.abs();
      Complex complex2 = complex1.sinh();
      complex2.ZERO.sin();
      complex2.ONE.getField();
      complex2.INF.multiply(732.041188186649);
      complex2.abs();
      Complex complex3 = complex0.sqrt();
      complex3.hashCode();
      complex1.divide((-1.0));
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = (-3003.307986518);
      Complex complex0 = Complex.valueOf((-3003.307986518));
      double double1 = 0.0;
      complex0.NaN.abs();
      Complex complex1 = Complex.valueOf((-217.4931811), 0.0);
      complex0.multiply(complex1);
      double double2 = (-1381.1396687);
      Complex complex2 = complex0.ZERO.sinh();
      try { 
        complex2.ONE.nthRoot((-2740));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,740
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = 47.4574;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(47.4574, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.multiply(complex3);
      complex4.sqrt();
      Complex complex5 = complex1.INF.sqrt();
      complex5.ONE.createComplex(Double.POSITIVE_INFINITY, 1206.1);
      complex1.ZERO.multiply(complex5);
      complex5.INF.asin();
      Complex complex6 = complex5.subtract(47.4574);
      Complex complex7 = complex6.ONE.subtract(complex2);
      complex7.ZERO.asin();
      complex0.ONE.atan();
      complex0.readResolve();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.cosh();
      complex2.I.getField();
      complex2.NaN.divide(complex1);
      complex2.INF.reciprocal();
      complex1.NaN.getField();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex4.ZERO.subtract((-230.660743895));
      Complex complex6 = complex1.add(2.185301053838889E-9);
      Complex complex7 = complex1.divide((double) 1);
      complex6.readResolve();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.ONE.createComplex(2.185301053838889E-9, 0.0);
      complex9.INF.divide(0.0);
      Complex complex10 = complex6.tanh();
      complex10.INF.nthRoot(1);
      complex10.INF.sin();
      complex2.log();
      Complex complex11 = Complex.valueOf((double) 1);
      complex7.tan();
      complex8.getArgument();
      complex8.hashCode();
      complex11.acos();
      complex0.atan();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.cosh();
      complex1.INF.pow((-888.98106732406));
      complex0.subtract(complex1);
      complex1.subtract(0.0);
      complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3109.1508547);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.ZERO.createComplex(3109.1508547, 3109.1508547);
      complex0.ONE.acos();
      complex0.getReal();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex1.ZERO.acos();
      complex5.ZERO.divide(1796.45338);
      complex5.exp();
      complex6.NaN.multiply(0);
      Complex complex7 = complex4.add(0.0);
      complex7.I.subtract(complex0);
      complex6.asin();
      complex3.pow(0.0);
      complex3.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(1.5809214115142822, 0.0);
      complex0.NaN.toString();
      complex0.readResolve();
      complex0.abs();
      Complex complex1 = complex0.ONE.sinh();
      complex0.getField();
      complex0.toString();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex0.sqrt();
      complex3.NaN.exp();
      complex3.readResolve();
      complex2.pow(complex0);
      Complex complex4 = complex1.divide(1.5809214115142822);
      complex2.conjugate();
      Complex.valueOf(1.5809214115142822);
      complex0.atan();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4004.32);
      complex0.INF.multiply(4004.32);
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.NaN.sin();
      complex1.conjugate();
      Complex complex5 = complex3.multiply(0);
      Complex complex6 = complex3.ONE.subtract(4004.32);
      Complex complex7 = complex6.I.log();
      complex7.I.conjugate();
      complex6.NaN.getArgument();
      complex0.getReal();
      Complex complex8 = complex3.log();
      complex8.I.pow(4004.32);
      complex2.I.subtract((-3306.0));
      complex8.ONE.subtract(complex4);
      complex1.getArgument();
      complex5.pow((double) 0);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.I.pow(complex2);
      Complex complex4 = complex0.NaN.divide(0.0);
      Complex complex5 = complex2.ZERO.cosh();
      complex1.exp();
      complex3.ZERO.pow(complex1);
      Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex3.NaN.multiply((-1334.2852));
      Complex complex7 = Complex.valueOf((-1334.2852), 1.573691633515306E-8);
      Complex complex8 = complex0.pow(1.573691633515306E-8);
      complex8.INF.divide(complex4);
      complex6.hashCode();
      Complex complex9 = complex0.createComplex(594.4816954378066, 594.4816954378066);
      complex9.multiply(complex2);
      complex4.atan();
      complex7.readResolve();
      complex8.multiply(0.0);
      Complex complex10 = complex6.multiply(7.894935661289349E-8);
      complex10.I.createComplex((-1740.5967235), (-1740.5967235));
      Complex complex11 = complex5.reciprocal();
      complex3.pow(0.0);
      Complex complex12 = complex11.pow(0.0);
      complex12.NaN.reciprocal();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.6911921501159668);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.atan();
      complex0.equals("+.OlG[");
      complex3.tanh();
      complex2.nthRoot(340);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-854.761795803274));
      Complex complex1 = complex0.NaN.multiply(7);
      complex1.INF.asin();
      Complex complex2 = Complex.valueOf((-2650.7635470729983), (-814.0061382071095));
      complex2.I.getField();
      complex0.NaN.add(complex2);
      complex0.INF.reciprocal();
      complex0.readResolve();
      complex0.atan();
      complex0.createComplex((-1534.2431496924107), 0.0);
      Complex.valueOf(2437.88515728);
      Complex complex3 = Complex.valueOf((double) 7);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.atan();
      complex0.ZERO.toString();
      int int0 = 0;
      complex0.ONE.negate();
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.NaN.pow((-2330.6081342));
      complex1.ONE.divide(complex0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.multiply((-2806));
      Complex complex4 = complex2.acos();
      complex4.toString();
      Complex complex5 = complex3.pow(0.0);
      Complex complex6 = new Complex(1259.6, 6.283185307179586);
      complex5.ZERO.divide(complex6);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      complex0.getImaginary();
      complex0.conjugate();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex0.NaN.subtract(complex1);
      complex0.getField();
      complex0.NaN.multiply(646);
      complex0.ZERO.abs();
      complex1.ZERO.divide(complex0);
      complex0.tanh();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-831.7531324992495));
      complex0.sqrt();
      Complex.valueOf(2089.312306572, 1.0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = (-2706.642965558);
      Complex complex1 = Complex.valueOf((-2706.642965558));
      complex0.multiply(complex1);
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(392.269092293);
      complex0.conjugate();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.NaN.add((-1412.37));
      complex1.ZERO.getArgument();
      complex0.nthRoot(1);
      Complex complex2 = complex0.multiply((-1434.79960996003));
      complex2.getArgument();
      complex2.divide(complex0);
      complex2.pow(0.0);
      Complex.valueOf(0.0, (-1623.95));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.cos();
      complex0.isNaN();
      Complex complex3 = complex1.reciprocal();
      complex0.ZERO.toString();
      complex3.INF.nthRoot(736);
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.I.tanh();
      Complex complex6 = complex3.ZERO.multiply(complex2);
      complex6.multiply(736);
      Complex complex7 = complex4.cosh();
      complex7.NaN.subtract(complex3);
      complex1.sqrt();
      Complex complex8 = complex2.subtract(complex0);
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex4.sin();
      complex10.getImaginary();
      complex2.multiply(complex10);
      Complex complex11 = complex0.add(0.18654438853263855);
      complex9.exp();
      complex11.sqrt1z();
      complex8.nthRoot(736);
      Complex complex12 = complex7.atan();
      complex8.hashCode();
      complex12.equals("UNSUPPORTED_EXPANSION_MODE");
      complex7.divide(-0.0);
      complex10.log();
      complex5.multiply(-0.0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.ZERO.add(complex1);
      Complex complex2 = complex0.add(2223.7273915424616);
      complex2.NaN.sin();
      complex1.ZERO.multiply(249);
      try { 
        complex1.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getImaginary();
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      complex0.ZERO.hashCode();
      complex0.getField();
      complex0.getImaginary();
      complex1.toString();
      complex1.readResolve();
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(1725.1209218);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.createComplex(1725.1209218, 1725.1209218);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex0.ZERO.cosh();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex7.ONE.sqrt1z();
      assertTrue(complex9.equals((Object)complex8));
      
      Complex complex10 = complex7.I.tanh();
      Complex complex11 = complex10.INF.sinh();
      Complex complex12 = complex0.sin();
      complex0.abs();
      Complex complex13 = complex5.acos();
      Complex.valueOf(5.707867001443433E-160);
      Complex complex14 = complex13.pow(complex0);
      Complex complex15 = complex11.sqrt1z();
      complex15.NaN.readResolve();
      complex15.getImaginary();
      assertEquals((-1725.1207768826287), complex7.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex10.getImaginary(), 0.01);
      assertSame(complex15, complex14);
      
      Complex complex16 = complex12.tanh();
      complex16.ZERO.getField();
      assertEquals((-0.36009916341015236), complex16.getReal(), 0.01);
      
      complex3.isNaN();
      assertTrue(complex3.equals((Object)complex6));
      
      Complex complex17 = complex12.acos();
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertEquals(1.957351305998314, complex17.getReal(), 0.01);
  }
}
