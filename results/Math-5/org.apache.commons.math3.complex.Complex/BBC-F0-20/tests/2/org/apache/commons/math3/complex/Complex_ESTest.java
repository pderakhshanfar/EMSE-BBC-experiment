/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:45:23 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow((-1.054736327333046E-8));
      complex0.nthRoot(1588);
      Complex complex1 = new Complex(1588, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1871.4242), (-1871.4242));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.reciprocal();
      complex1.pow((-1871.4242));
      complex1.sqrt1z();
      complex3.atan();
      complex2.tan();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex1.pow((double) 657);
      Complex complex2 = new Complex(657, Double.POSITIVE_INFINITY);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 657);
      Complex complex1 = complex0.sinh();
      complex0.abs();
      Complex complex2 = complex0.pow((double) 657);
      complex0.sinh();
      Complex complex3 = complex0.pow(complex1);
      complex3.nthRoot(657);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex1.pow((-808.5));
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.tanh();
      complex5.pow((double) 3179);
      complex1.nthRoot(1);
      complex3.conjugate();
      complex2.hashCode();
      complex4.atan();
      complex6.sqrt1z();
      complex7.atan();
      Complex.valueOf(1081.340175279837);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 0.7051755524359092);
      Complex complex2 = complex1.sqrt();
      complex1.tanh();
      complex1.nthRoot(658);
      complex1.exp();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2156.141794));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.atan();
      complex2.nthRoot(308);
      complex2.pow((-405.28592220263));
      complex1.acos();
      complex1.atan();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2156.141794));
      Complex complex1 = complex0.sqrt();
      complex1.tanh();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(2.1587538719177246);
      Complex complex3 = complex0.createComplex(632.34512163908, Double.POSITIVE_INFINITY);
      Complex.valueOf(632.34512163908, (-2020.357028));
      complex3.multiply(1.0);
      complex2.asin();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.multiply((-3204.71636734));
      complex3.multiply(2.1260700143549306E-63);
      Complex complex6 = Complex.valueOf((-2.595456638706416E298), (-1545.0597028));
      complex6.abs();
      Complex.valueOf(0.4512746334075928, 0.005730746256283264);
      Complex complex7 = Complex.valueOf(1008.0);
      complex7.log();
      complex5.reciprocal();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2156.141794));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tanh();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = Complex.valueOf((-20.0));
      complex3.tanh();
      complex2.cosh();
      complex2.toString();
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(1861.46753084394, (-678.81));
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex0.abs();
      Complex complex2 = complex1.exp();
      complex1.abs();
      Complex complex3 = complex1.pow(953.1640403);
      Complex complex4 = complex3.divide(953.1640403);
      complex2.reciprocal();
      Complex complex5 = complex2.negate();
      complex0.pow(8.787501601904039E49);
      Complex complex6 = complex2.sinh();
      complex4.equals(complex5);
      complex6.asin();
      Complex.valueOf(457.0);
      complex3.pow(1781.0);
      Complex complex7 = complex6.pow(Double.NaN);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-2599.3054));
      Complex complex2 = complex1.divide(1506.4148308270635);
      complex2.sinh();
      Complex complex3 = complex1.exp();
      complex0.abs();
      Complex complex4 = complex3.pow((-1907.9182448));
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex1.divide(232.07638874207);
      Complex complex7 = complex6.pow(complex5);
      complex2.reciprocal();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex4.pow((-1294.733441));
      complex7.sinh();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex9.pow(2.0);
      complex0.equals(complex11);
      complex8.asin();
      complex7.tanh();
      Complex complex12 = complex11.createComplex((-7666169.099559018), (-808.5));
      complex10.getField();
      complex1.divide(complex9);
      complex12.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9502159892287607, (double) 681);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.exp();
      complex0.abs();
      Complex complex3 = complex0.pow((-612.3));
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex2.divide(681.0006629295058);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = Complex.valueOf((-8.332144758314943));
      complex7.reciprocal();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex3.pow((-4316670.906664039));
      complex8.sinh();
      complex9.pow(1.6525336989036362E59);
      complex4.getField();
      Complex complex10 = Complex.valueOf(2.0, (-1010.7233391861));
      complex5.equals(complex10);
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.tanh();
      Complex complex13 = Complex.ONE;
      complex12.pow(681.0006629295058);
      Complex complex14 = Complex.ZERO;
      complex14.equals(complex11);
      complex3.asin();
      complex7.tanh();
      Complex.valueOf(2.0);
      complex7.multiply((-612.3));
      complex14.conjugate();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.exp();
      complex0.abs();
      complex0.pow(0.0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.divide((-2221.10727));
      complex1.pow(complex2);
      Complex complex4 = complex0.reciprocal();
      complex4.negate();
      complex2.ONE.add(Double.NaN);
      Complex complex5 = complex0.pow((-3729.74703984351));
      Complex complex6 = complex3.sinh();
      complex4.tanh();
      complex5.pow(0.20010859661930044);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex7.NaN.getArgument();
      Object object0 = new Object();
      complex2.equals(object0);
      complex4.asin();
      complex6.tanh();
      Complex complex8 = new Complex(2840.3863, (-413.55071856));
      complex8.createComplex((-7666169.099559018), 0.20787957635076193);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.divide((-2191.25793));
      Complex complex3 = complex1.pow(complex0);
      complex3.NaN.atan();
      complex3.reciprocal();
      complex3.negate();
      complex1.pow(0.88137358701954);
      Complex complex4 = complex2.sinh();
      complex3.tanh();
      Complex complex5 = complex4.pow(0.0);
      Complex.valueOf((-3924.96), (-1880.0));
      complex2.equals(complex0);
      complex5.asin();
      Complex complex6 = Complex.ONE;
      complex6.tanh();
      Complex complex7 = new Complex(2.0, 1853.0170161332492);
      complex5.createComplex((-1605.7146596368), 2838.5179102619254);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-2430.9352), (-3625.0));
      Complex complex1 = complex0.sqrt();
      complex0.toString();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.multiply(complex2);
      complex0.sinh();
      complex0.pow(complex2);
      Complex complex5 = Complex.ZERO;
      complex3.sinh();
      Complex complex6 = complex1.subtract(2962.153232);
      Complex complex7 = complex2.createComplex(2962.153232, 1715.36008229);
      complex4.cosh();
      complex7.tanh();
      Complex complex8 = complex3.pow(6.283185307179586);
      Object object0 = complex5.readResolve();
      complex2.equals(object0);
      complex8.asin();
      complex6.tanh();
      complex8.createComplex(2962.153232, 0.1718502640724182);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.pow((double) 791);
      Complex complex2 = complex1.sinh();
      complex1.divide((-7666169.099559018));
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = Complex.ZERO;
      complex6.negate();
      complex3.pow(4.8157741914784915E-4);
      complex4.sinh();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.tanh();
      complex1.pow(0.0);
      complex7.equals(complex5);
      complex8.asin();
      complex1.tanh();
      complex5.createComplex((-668.1186593454), (-7666169.099559018));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.cos();
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.valueOf(2.2590636576955473E265, 2.2590636576955473E265);
      Complex complex6 = complex5.sinh();
      complex6.subtract(0.0);
      Complex complex7 = complex5.createComplex((-2251.0558), (-2251.0558));
      Complex complex8 = complex0.cosh();
      complex7.atan();
      complex1.sqrt1z();
      complex8.divide(9.023639664212642E195);
      complex1.acos();
      complex2.divide(complex1);
      complex6.multiply(complex3);
      Complex complex9 = Complex.I;
      complex9.NaN.abs();
      complex1.reciprocal();
      Complex complex10 = new Complex((-4995.83550118));
      complex2.cos();
      complex0.acos();
      Complex complex11 = Complex.valueOf(0.7071067811865476, (-1.4674008854895289));
      complex11.add(2962.153232);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add((-2809.96708));
      Complex complex3 = complex1.INF.subtract(complex0);
      complex2.ONE.conjugate();
      complex2.divide((-2809.96708));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      complex3.abs();
      complex3.hashCode();
      Complex complex6 = Complex.valueOf((-1444.8013), (-1948.9485629730245));
      complex4.atan();
      Complex complex7 = Complex.valueOf((-3719.0));
      complex5.getImaginary();
      complex7.tanh();
      complex4.nthRoot(37);
      Complex.valueOf((-1035.3157), (-4434.9985054));
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = Complex.ONE;
      complex2.readResolve();
      complex1.getImaginary();
      Complex.valueOf(2.0, (-1729.1422431));
      Complex complex3 = new Complex((-1729.1422431), Double.NaN);
      complex3.abs();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.add(complex0);
      complex2.nthRoot(717);
      complex2.sqrt();
      Complex complex3 = complex0.acos();
      Complex complex4 = new Complex(692);
      Complex complex5 = complex3.tanh();
      complex4.sinh();
      Complex complex6 = new Complex(717);
      Complex complex7 = Complex.valueOf(1.0);
      Complex complex8 = Complex.valueOf((double) 692);
      complex5.add(complex3);
      complex4.sin();
      complex5.exp();
      complex7.toString();
      complex8.divide((-2469.68686444));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex3.createComplex(31.090678155921466, Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex(62.184917944003864);
      complex5.cosh();
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex2.divide(0.7071067811865476);
      complex8.acos();
      Complex complex10 = Complex.ONE;
      complex10.divide(complex5);
      complex0.multiply(complex4);
      Complex complex11 = Complex.I;
      Complex complex12 = new Complex(2.3995001971821337E26, 0.0);
      complex12.reciprocal();
      complex4.log();
      Complex complex13 = complex7.cos();
      Complex complex14 = complex9.acos();
      Complex complex15 = Complex.ZERO;
      complex15.sin();
      complex6.abs();
      complex13.sin();
      complex14.add(complex6);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-2430.9352), (-3625.0));
      Complex complex1 = complex0.sqrt();
      complex0.toString();
      complex1.isNaN();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex1.asin();
      complex2.sinh();
      complex4.subtract(3.559671483107555E-143);
      Complex complex6 = complex0.createComplex((-2430.9352), (-803.7666832077821));
      Complex complex7 = complex3.cosh();
      complex6.atan();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex5.divide((-3625.0));
      complex8.acos();
      complex6.divide(complex4);
      complex9.multiply(complex7);
      Complex complex10 = Complex.I;
      complex6.reciprocal();
      Complex complex11 = complex10.log();
      complex0.cos();
      Complex complex12 = complex3.acos();
      complex11.sin();
      complex12.abs();
      complex6.divide(complex11);
      complex2.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-2430.9352), (-3625.0));
      Complex complex1 = complex0.sqrt();
      complex0.toString();
      complex1.isNaN();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf((-2430.9352));
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = complex0.asin();
      complex5.sinh();
      complex3.subtract((-3625.0));
      complex5.createComplex((-2430.9352), (-958.3096));
      complex3.cosh();
      Complex complex7 = complex6.sqrt1z();
      complex2.divide(0.5051454305648804);
      complex7.acos();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.divide(complex6);
      try { 
        complex9.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1649.0499032948912, 1649.0499032948912);
      complex0.ZERO.readResolve();
      complex0.ZERO.multiply(302);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply(1649.0499032948912);
      Complex complex3 = Complex.valueOf(1649.0499032948912);
      complex3.NaN.log();
      Complex complex4 = complex1.NaN.pow(complex3);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex3.sinh();
      complex2.subtract((double) 302);
      Complex complex7 = complex6.createComplex(1649.0499032948912, (-2.041262173879959E8));
      complex4.cosh();
      complex7.ONE.sqrt1z();
      Complex complex8 = complex3.divide((double) 302);
      complex7.acos();
      Complex complex9 = complex5.divide(complex3);
      Complex complex10 = complex6.multiply(complex8);
      complex4.reciprocal();
      complex9.log();
      complex8.cos();
      complex10.subtract(1649.0499032948912);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-2430.9352), (-3625.0));
      Complex complex1 = complex0.sqrt();
      complex0.toString();
      complex1.isNaN();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf((-2430.9352));
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = new Complex((-3625.0), (-3625.0));
      complex0.abs();
      complex7.sqrt();
      Complex complex8 = complex7.pow(complex4);
      complex6.toString();
      complex6.divide((-1077.225));
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.valueOf((-1077.225));
      complex10.hashCode();
      complex3.getImaginary();
      complex7.tanh();
      complex0.getImaginary();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(20.0);
      Complex complex2 = complex0.createComplex(20.0, 20.0);
      Complex complex3 = complex2.cosh();
      complex0.multiply(complex2);
      complex3.sin();
      complex0.hashCode();
      complex2.tan();
      Complex complex4 = complex1.multiply(1649.0499032948912);
      Complex.valueOf(2301.1901189, 2301.1901189);
      complex1.tan();
      complex0.reciprocal();
      complex4.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add((-2809.96708));
      complex2.ONE.subtract(complex1);
      complex1.INF.subtract(complex0);
      complex2.divide((-2809.96708));
      Complex complex3 = Complex.INF;
      complex3.cosh();
      Complex complex4 = new Complex((-2809.96708), Double.POSITIVE_INFINITY);
      complex4.multiply(757);
      Complex complex5 = Complex.valueOf((-1506.0), (-2.8245462428022094E-8));
      complex5.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(1.876664741413704E-7, 2.0);
      complex1.NaN.cosh();
      Complex complex2 = complex1.multiply(complex0);
      complex2.I.sin();
      complex2.negate();
      Complex complex3 = Complex.valueOf(1.876664741413704E-7);
      complex3.pow(complex1);
      complex0.toString();
      complex3.divide(1.876664741413704E-7);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.NaN;
      complex2.hashCode();
      complex2.atan();
      complex4.getImaginary();
      complex0.tanh();
      Complex complex6 = new Complex(Double.NaN);
      complex6.nthRoot(3821);
      Complex.valueOf(1363.927, Double.NaN);
      Complex complex7 = new Complex(1.04378856648378, 3625.0);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.add((-1860.0616706));
      Complex complex2 = complex0.I.multiply(1554);
      Complex complex3 = complex2.ZERO.cos();
      complex2.NaN.multiply(0.10330818930683922);
      complex0.isInfinite();
      Complex complex4 = complex0.I.pow(complex1);
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex5.INF.add(0.10330818930683922);
      complex6.ONE.sinh();
      complex2.toString();
      Complex complex7 = complex0.add(5438731.16711378);
      Complex complex8 = Complex.valueOf(0.10330818930683922, 2590.321679091173);
      Complex complex9 = complex7.ONE.pow(complex8);
      complex1.reciprocal();
      Complex complex10 = complex3.asin();
      complex10.add((-1860.0616706));
      complex2.tan();
      complex1.isInfinite();
      Complex complex11 = complex6.acos();
      complex9.nthRoot(1554);
      complex5.sin();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-2430.9352), (-3625.0));
      Complex complex1 = complex0.sqrt();
      complex0.toString();
      complex1.isNaN();
      Complex complex2 = complex1.sqrt1z();
      complex2.negate();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex3.tanh();
      complex0.abs();
      complex6.sqrt();
      Complex complex7 = complex0.cosh();
      complex6.pow(complex3);
      complex5.toString();
      complex5.divide((-1077.225));
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.NaN;
      complex9.hashCode();
      complex5.atan();
      complex7.getImaginary();
      Complex complex10 = complex6.tanh();
      complex6.nthRoot(780);
      Complex.valueOf(3539.03, 1.3399392455370071E-284);
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1077.225));
      complex1.nthRoot(551);
      complex0.getArgument();
      Complex complex2 = Complex.valueOf((double) 778, (-20.0));
      complex2.tan();
      complex1.reciprocal();
      complex0.subtract(45.88);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.add((-1.0));
      Complex complex6 = Complex.valueOf((-1.0), 3559.587908520799);
      complex6.multiply(complex2);
      Complex complex7 = complex1.sinh();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.divide(complex3);
      complex4.tanh();
      Complex complex10 = Complex.valueOf((-1.0), 3559.587908520799);
      complex10.getImaginary();
      complex7.abs();
      Complex complex11 = complex8.sqrt();
      complex11.ONE.divide(complex9);
      complex10.cosh();
      complex2.cos();
      complex11.readResolve();
      complex4.equals(complex2);
      complex8.getImaginary();
      complex0.abs();
      complex6.asin();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply((-272));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.multiply(Double.POSITIVE_INFINITY);
      complex2.INF.divide((double) (-272));
      Complex complex4 = complex0.sinh();
      complex0.getField();
      Complex complex5 = complex0.INF.negate();
      Complex complex6 = complex1.INF.add(complex4);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex5.ZERO.subtract(complex7);
      complex1.pow(2300.7668758880923);
      Complex complex9 = complex7.conjugate();
      complex5.nthRoot(765);
      Complex complex10 = complex9.reciprocal();
      complex10.I.asin();
      complex8.divide((-987.280472867879));
      complex3.tanh();
      Complex complex11 = new Complex(2300.7668758880923, 765);
      complex6.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.add((-1.0));
      Complex complex6 = Complex.valueOf((-1.0), 3559.587908520799);
      Complex complex7 = complex6.tan();
      complex5.subtract(complex2);
      complex4.subtract(complex3);
      Complex complex8 = Complex.INF;
      complex7.add(complex2);
      Complex complex9 = new Complex(2867.7674);
      Complex complex10 = complex5.cos();
      complex10.readResolve();
      Object object0 = new Object();
      complex5.equals(complex2);
      complex1.getImaginary();
      complex0.abs();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1649.0499032948912, 1649.0499032948912);
      complex0.ZERO.readResolve();
      complex0.ZERO.multiply(302);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply(1649.0499032948912);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.NaN.pow(complex3);
      Complex complex5 = Complex.valueOf(1649.0499032948912);
      complex2.readResolve();
      complex4.add(complex1);
      complex0.cos();
      complex5.readResolve();
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      Complex complex6 = new Complex(1.3430213928222656, 302);
      complex6.getImaginary();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.add(466.12);
      Complex complex3 = Complex.valueOf(3194.266385405, 3640.617761);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.sinh();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = Complex.valueOf(5.6217591301757816E-5);
      Complex complex9 = complex8.tanh();
      Complex complex10 = Complex.NaN;
      complex9.getImaginary();
      complex2.abs();
      complex7.sqrt();
      complex7.cosh();
      complex2.pow(complex9);
      complex5.toString();
      complex5.divide(6.283185307179586);
      complex2.hashCode();
      Complex.valueOf((-1.0), 1178.4);
      complex9.atan();
      complex4.getImaginary();
      complex2.tanh();
      Complex complex11 = new Complex(0.0);
      complex11.nthRoot(780);
      Complex.valueOf(466.12, 3194.266385405);
      Complex complex12 = complex6.reciprocal();
      complex12.ONE.createComplex(2928.7708677127, 2928.7708677127);
      complex3.divide((-410.5624701171536));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(27861.27649236458, 27861.27649236458);
      Complex complex2 = complex1.cosh();
      complex2.divide((-1377.008922202));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.acos();
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = complex2.multiply(complex4);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex1.log();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.cos();
      complex10.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY, 3430.720316064717);
      complex8.conjugate();
      complex9.isInfinite();
      complex5.atan();
      complex10.getReal();
      complex7.divide(27861.27649236458);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.ZERO;
      complex4.add((-1.0));
      Complex complex5 = Complex.valueOf((-1.0), 3559.587908520799);
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = complex1.sinh();
      Complex complex8 = Complex.ONE;
      complex8.divide(complex3);
      Complex complex9 = complex6.createComplex((-1648.653545247), Double.POSITIVE_INFINITY);
      complex0.subtract(complex3);
      Complex complex10 = complex4.tan();
      complex7.sqrt();
      complex9.pow(complex6);
      complex3.sin();
      Complex.valueOf(3559.587908520799, 3559.587908520799);
      Complex complex11 = Complex.INF;
      complex2.divide(complex10);
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex2.tanh();
      Complex complex6 = Complex.NaN;
      complex4.getImaginary();
      complex3.abs();
      Complex complex7 = complex1.sqrt();
      complex5.cosh();
      complex6.pow(complex4);
      complex4.toString();
      Complex complex8 = complex6.divide(0.0);
      complex8.hashCode();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.atan();
      Complex complex10 = Complex.NaN;
      complex10.getImaginary();
      complex10.tanh();
      complex9.nthRoot(780);
      Complex.valueOf(0.0, 1635.772782420748);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = (-739.61875897);
      Complex complex0 = Complex.valueOf((-739.61875897), 6.123233995736766E-17);
      Complex complex1 = Complex.valueOf(20.0, 6.123233995736766E-17);
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex0.NaN.exp();
      complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      complex1.multiply(complex2);
      try { 
        complex0.nthRoot((-1150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,150
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex((-2809.96708), (-2809.96708));
      Complex complex3 = complex2.NaN.tan();
      complex2.ONE.subtract(complex1);
      Complex complex4 = complex1.INF.subtract(complex0);
      complex4.I.add(complex0);
      complex0.cos();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex3.getImaginary();
      complex0.abs();
      Complex complex5 = Complex.valueOf(0.0);
      complex2.add(complex5);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.add((-2809.97));
      Complex complex3 = Complex.valueOf((-411.734), (-2809.97));
      complex3.tan();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.subtract(complex3);
      complex1.subtract(complex4);
      complex5.add(complex3);
      complex5.cos();
      complex2.readResolve();
      complex1.equals("O){g");
      complex0.getImaginary();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(4517.02, 2.0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.multiply(complex1);
      complex3.sin();
      Complex complex4 = complex3.negate();
      complex4.hashCode();
      complex1.tan();
      Complex complex5 = complex1.subtract(complex3);
      Complex complex6 = complex0.negate();
      complex6.pow(complex3);
      complex6.exp();
      Complex complex7 = Complex.valueOf(4517.02, 2.0);
      Complex complex8 = complex7.add(complex2);
      complex0.subtract(complex7);
      Complex.valueOf(2351.1686);
      Complex complex9 = complex1.multiply(complex5);
      Complex complex10 = Complex.valueOf((-1.0));
      complex10.atan();
      complex6.log();
      complex8.equals("=");
      complex9.multiply(7);
      Complex.valueOf((-0.9214892025260725));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add((-2809.96708));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.subtract(complex2);
      complex0.NaN.multiply(1587);
      complex3.subtract(complex0);
      Complex complex5 = Complex.ONE;
      complex5.ONE.cos();
      complex4.add(complex5);
      complex1.cos();
      complex3.readResolve();
      complex1.equals(complex0);
      complex1.getImaginary();
      Complex complex6 = new Complex((-2809.96708), 3642.916);
      complex6.ONE.readResolve();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1637.4435695610764, 1637.4435695610764);
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.ZERO.multiply(302);
      Complex complex3 = complex1.multiply(1637.4435695610764);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.NaN.pow(complex4);
      Complex complex6 = Complex.valueOf(1637.4435695610764);
      complex3.readResolve();
      complex4.sqrt();
      Complex complex7 = complex3.divide(Double.POSITIVE_INFINITY);
      complex2.cosh();
      complex0.I.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.multiply(17);
      complex3.log();
      complex8.divide(394.392112);
      complex6.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-145.16231671453), (-145.16231671453));
      Complex complex2 = complex0.subtract(complex1);
      complex2.ONE.tanh();
      Complex complex3 = complex1.multiply(411);
      complex1.reciprocal();
      Complex.valueOf((double) 224, (-389.0244));
      complex1.isNaN();
      complex3.tanh();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.multiply(183.01);
      Complex complex6 = complex4.createComplex(0.0, (-88.6706485));
      complex5.getField();
      complex6.sqrt();
      complex1.multiply(956.318798);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = Complex.valueOf(663.48986816398, 0.0);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex2.I.multiply(311);
      Complex complex5 = complex0.multiply(complex2);
      complex2.ZERO.readResolve();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex5.multiply(0.0);
      complex8.ZERO.divide(complex7);
      Complex complex9 = Complex.valueOf(0.0, Double.NaN);
      Complex complex10 = complex5.subtract(complex9);
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex10.divide(complex0);
      complex11.I.pow(0.0);
      complex11.divide((double) 311);
      complex12.isInfinite();
      complex11.divide(complex1);
      complex7.getImaginary();
      complex3.multiply(311);
      complex0.add(complex3);
      complex6.log();
      Complex complex13 = complex2.multiply(Double.NaN);
      complex13.I.subtract(Double.NaN);
      complex6.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.createComplex((-2809.96708), (-2809.96708));
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex1.pow(complex2);
      complex6.negate();
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex1.divide(complex7);
      complex4.tanh();
      complex3.getImaginary();
      complex0.abs();
      Complex complex10 = complex0.cosh();
      Complex complex11 = Complex.valueOf((-995.96393312155), 2809.96708);
      Complex complex12 = complex11.pow(complex10);
      complex7.toString();
      complex9.divide(2809.96708);
      complex8.hashCode();
      complex12.atan();
      complex4.getImaginary();
      complex5.tanh();
      complex5.nthRoot(780);
      Complex.valueOf((-2809.96708), 1649.0499032948912);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2142.74605303773);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.I.pow(complex0);
      complex2.ZERO.sin();
      Complex complex3 = complex2.add(2142.74605303773);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex0.subtract(complex2);
      complex0.add(complex6);
      complex0.cos();
      complex5.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex7 = Complex.valueOf(3.7906173667738715E-206, 2142.74605303773);
      complex7.getImaginary();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2142.74605303773);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex3.ZERO.sin();
      complex4.ZERO.createComplex(0.0, 2142.74605303773);
      complex1.I.subtract(complex2);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.NaN.sqrt();
      complex5.ZERO.pow(complex3);
      Complex complex7 = Complex.ONE;
      complex6.pow(complex2);
      Complex complex8 = complex2.cos();
      Complex complex9 = Complex.ZERO;
      complex8.divide(complex9);
      complex4.asin();
      complex3.getArgument();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.NaN.toString();
      complex0.isNaN();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.negate();
      complex2.multiply(complex0);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex2.tanh();
      complex6.getImaginary();
      complex1.abs();
      Complex complex7 = complex4.sqrt();
      complex3.cosh();
      complex2.pow(complex7);
      complex2.toString();
      complex7.divide((-1077.225));
      Complex complex8 = Complex.NaN;
      complex8.hashCode();
      complex1.atan();
      complex5.getImaginary();
      complex5.tanh();
      complex3.nthRoot(780);
      Complex.valueOf(1503.48, 117.91737951);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex0.NaN.hashCode();
      Complex complex2 = Complex.valueOf(2.4612985502035675E-155, (-2.3866331257845713E-8));
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = Complex.NaN;
      complex5.readResolve();
      Complex complex6 = Complex.valueOf(1345.2239173223406, (-2.3866331257845713E-8));
      complex5.multiply(0.0);
      Complex.valueOf(0.0, 2547.153);
      Complex complex7 = complex4.sqrt1z();
      complex7.divide(complex2);
      complex0.pow(0.0);
      complex2.divide(1226.0);
      Complex complex8 = Complex.NaN;
      complex8.isInfinite();
      Complex complex9 = Complex.ONE;
      complex8.divide(complex9);
      complex1.multiply(1923);
      Complex complex10 = Complex.ONE;
      complex10.add(complex5);
      complex1.log();
      Complex complex11 = complex6.divide(Double.NaN);
      complex6.pow(complex11);
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1649.0499032948912, 1649.0499032948912);
      complex0.ZERO.readResolve();
      complex0.ZERO.multiply(302);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply(1649.0499032948912);
      Complex complex3 = Complex.valueOf(1649.0499032948912);
      Complex complex4 = complex1.NaN.pow(complex3);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex3.sinh();
      complex2.subtract((double) 302);
      Complex complex7 = complex6.createComplex(1649.0499032948912, 1715.36008229);
      complex4.cosh();
      Complex complex8 = complex3.divide((double) 302);
      complex7.acos();
      Complex complex9 = complex5.divide(complex3);
      Complex complex10 = complex6.multiply(complex8);
      complex4.reciprocal();
      Complex complex11 = complex9.log();
      complex8.cos();
      complex0.acos();
      Complex.valueOf((-397.48366), 1715.36008229);
      complex6.conjugate();
      complex11.isInfinite();
      Complex complex12 = complex10.atan();
      complex3.getReal();
      complex12.divide((-397.48366));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(0.0);
      complex2.NaN.pow(complex1);
      complex0.ZERO.divide(complex1);
      complex2.NaN.conjugate();
      Complex complex3 = complex0.cos();
      Complex.valueOf(0.0);
      complex2.multiply(1554);
      complex0.ZERO.hashCode();
      Complex complex4 = complex3.INF.log();
      complex4.ZERO.reciprocal();
      Complex complex5 = complex4.NaN.divide(0.0);
      complex4.ZERO.readResolve();
      Complex.valueOf(0.0);
      complex4.readResolve();
      Complex complex6 = complex5.sqrt();
      complex4.divide(0.0);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex7.cosh();
      complex1.divide((double) 17);
      Complex complex8 = complex7.multiply(17);
      complex8.ZERO.multiply((-1389));
      complex6.log();
      Complex complex9 = Complex.INF;
      complex9.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex4.ZERO.createComplex(0.0, 2142.74605303773);
      complex1.I.subtract(complex2);
      Complex complex6 = complex0.tan();
      complex6.NaN.sqrt();
      complex6.ZERO.pow(complex3);
      complex3.INF.sin();
      Complex complex7 = Complex.valueOf(2868.5541, (-889.64499259));
      Complex complex8 = Complex.INF;
      complex7.divide(complex8);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.ZERO;
      complex4.add((-1.0));
      Complex complex5 = Complex.valueOf((-1.0), 3559.587908520799);
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = complex1.sinh();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.divide(complex3);
      Complex complex10 = complex4.tanh();
      Complex complex11 = Complex.NaN;
      complex11.getImaginary();
      complex7.abs();
      Complex complex12 = complex8.sqrt();
      complex11.cosh();
      Complex complex13 = complex10.pow(complex2);
      complex8.toString();
      complex4.divide(3559.587908520799);
      complex9.hashCode();
      Complex complex14 = Complex.valueOf(0.0, (-20.0));
      complex14.atan();
      complex6.getImaginary();
      complex5.tanh();
      complex12.nthRoot(780);
      Complex.valueOf(254.410578084658, (-779.0324728430319));
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2142.74605303773);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex4.ZERO.createComplex(0.0, 2142.74605303773);
      complex1.I.subtract(complex2);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = complex6.ZERO.pow(complex3);
      complex8.ONE.sqrt1z();
      complex6.INF.negate();
      Complex complex9 = complex7.INF.add(2693.5192);
      Complex complex10 = complex6.multiply(complex1);
      Complex complex11 = complex10.INF.sinh();
      complex10.ONE.divide(complex0);
      complex1.tanh();
      complex1.getImaginary();
      complex7.abs();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex2.cosh();
      complex13.ZERO.pow(complex0);
      complex13.toString();
      complex2.divide(Double.NaN);
      complex12.hashCode();
      Complex complex14 = complex9.atan();
      complex13.getImaginary();
      complex3.tanh();
      complex14.nthRoot(780);
      Complex.valueOf((-779.0324728430319), 5717.974084351929);
      complex5.divide(Double.NaN);
      complex11.negate();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(2.406976727302894E-69);
      complex0.getArgument();
      Complex complex1 = complex0.add(2.406976727302894E-69);
      Complex complex2 = complex1.acos();
      complex0.atan();
      Complex complex3 = complex2.reciprocal();
      complex3.conjugate();
      Complex complex4 = Complex.ONE;
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex2.NaN.log();
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex3.conjugate();
      complex4.ZERO.readResolve();
      Complex complex5 = complex0.log();
      complex5.ONE.cosh();
      double double0 = (-1226.0);
      Complex complex6 = complex5.add((-1226.0));
      complex0.negate();
      Complex complex7 = complex3.ONE.negate();
      complex7.ONE.asin();
      Complex complex8 = complex6.pow((-1226.0));
      complex8.ZERO.cos();
      complex5.getField();
      Complex complex9 = Complex.valueOf((-1226.0), (-1226.0));
      complex9.I.getArgument();
      complex5.toString();
      complex4.conjugate();
      complex5.I.sqrt1z();
      Complex complex10 = complex0.pow((-2619.7));
      complex5.getReal();
      complex10.sqrt1z();
      complex5.acos();
      try { 
        complex5.nthRoot((-2603));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,603
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(3891.3542537);
      complex0.ONE.multiply(0);
      Complex complex1 = Complex.valueOf((-4546.443990544826));
      complex1.ONE.sqrt();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex0.createComplex(0.04487626254558563, 3891.3542537);
      Complex complex4 = complex3.pow(0.04487626254558563);
      complex4.ZERO.multiply(complex0);
      complex4.ONE.divide(0.04487626254558563);
      Complex complex5 = Complex.valueOf(0.04487626254558563, (-4546.443990544826));
      Complex complex6 = complex5.subtract(complex2);
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex7.INF.atan();
      complex8.atan();
      complex8.ONE.tanh();
      complex5.conjugate();
      Complex complex9 = complex0.sinh();
      complex9.ZERO.tanh();
      complex2.getImaginary();
      Complex complex10 = complex9.sinh();
      Complex.valueOf((double) 0);
      complex5.negate();
      complex0.exp();
      complex9.asin();
      Complex.valueOf(5677.6814697066, (-286.14353));
      complex7.hashCode();
      complex3.getReal();
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.abs();
      complex0.getImaginary();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.pow((-20.0));
      complex1.ONE.divide(903.0);
      Complex complex4 = complex0.conjugate();
      complex4.ZERO.createComplex(0.0, 0.0);
      complex4.cosh();
      Complex complex5 = complex3.tan();
      complex5.ZERO.multiply(0.0);
      Complex.valueOf(0.0);
      complex2.isInfinite();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.INF.tan();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.acos();
      complex2.readResolve();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ONE.exp();
      complex4.INF.getArgument();
      complex4.ONE.readResolve();
      Complex complex5 = complex0.log();
      complex1.I.hashCode();
      Complex complex6 = complex5.NaN.multiply(complex0);
      complex6.cos();
      complex6.INF.abs();
      complex1.equals(complex2);
      complex2.isNaN();
      complex0.abs();
      complex6.add(complex2);
      complex6.abs();
      Complex complex7 = Complex.I;
      complex5.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.exp();
      Complex complex1 = complex0.createComplex(2.0, 0.255429208278656);
      complex1.INF.tanh();
      Complex.valueOf(3201.60336042);
      complex1.INF.asin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex3.INF.add(2.0);
      Complex complex5 = Complex.valueOf((-197.0), 688.93);
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex0.atan();
      complex6.ZERO.add((-197.0));
      Complex.valueOf((-197.0), 0.255429208278656);
      complex2.ZERO.multiply(643.072);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.toString();
      complex7.INF.subtract(3201.60336042);
      complex1.toString();
      Complex complex8 = complex7.pow(complex6);
      complex8.ONE.tan();
      complex1.toString();
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.atan();
      complex9.ZERO.multiply((-1784.375254906));
      Complex.valueOf(0.0, (-2980.25347035));
      complex0.subtract((-197.0));
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.NaN, 0.0);
      complex1.I.createComplex(0.0, 0.0);
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = Complex.NaN;
      complex2.NaN.getArgument();
      Complex complex4 = complex0.subtract(complex3);
      complex4.ONE.divide(complex2);
      Complex complex5 = complex0.tanh();
      complex5.NaN.cos();
      Complex complex6 = complex3.conjugate();
      complex6.log();
      int int0 = 2906;
      complex6.ONE.nthRoot(2906);
      Complex complex7 = complex2.ZERO.reciprocal();
      complex7.ONE.atan();
      Complex.valueOf(Double.NaN, (double) 2906);
      Complex complex8 = complex2.add((-1697.7086));
      Complex complex9 = complex4.negate();
      complex9.NaN.getArgument();
      Complex complex10 = complex8.sinh();
      complex10.NaN.createComplex(0.0, (-1697.7086));
      complex10.readResolve();
      Complex complex11 = complex10.ZERO.subtract(2.262354850769043);
      complex11.sqrt1z();
      Complex complex12 = complex0.sqrt();
      complex12.ZERO.negate();
      Complex complex13 = complex2.negate();
      complex13.NaN.reciprocal();
      complex9.reciprocal();
      // Undeclared exception!
      complex2.ONE.nthRoot(2906);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(2294.89333611, 2294.89333611);
      Complex complex1 = complex0.pow(2294.89333611);
      complex1.cos();
      Complex complex2 = Complex.valueOf(2294.89333611, 20.0);
      complex2.ZERO.divide((-4728.74461525487));
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.acos();
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = Complex.valueOf(0.0, 2660.169853946399);
      complex2.I.sqrt();
      double double0 = 1653.829353773;
      Complex complex3 = complex0.add(1653.829353773);
      complex3.INF.getField();
      complex3.acos();
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex4.I.acos();
      complex5.multiply(348);
      try { 
        complex4.I.nthRoot((-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -10
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.sin();
      complex2.ZERO.divide((-2007.02235651709));
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.I.negate();
      complex0.INF.getArgument();
      complex0.pow(0.0);
      complex0.readResolve();
      Complex complex5 = complex0.acos();
      complex0.I.pow((-2007.02235651709));
      Complex complex6 = complex0.multiply(9.770510970673519E-8);
      Complex.valueOf(9.770510970673519E-8);
      complex5.getField();
      complex4.getReal();
      complex3.sqrt1z();
      Complex complex7 = complex6.reciprocal();
      complex1.tanh();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.NaN.toString();
      complex0.isNaN();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
      complex2.NaN.cos();
      Complex complex4 = complex1.divide(complex2);
      complex4.INF.asin();
      complex1.getArgument();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1649.0499032948912, 1649.0499032948912);
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.ZERO.multiply(302);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.multiply(1649.0499032948912);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.NaN.pow(complex4);
      Complex.valueOf(1649.0499032948912);
      complex3.readResolve();
      complex4.sqrt();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex1.cosh();
      complex2.I.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.multiply(17);
      complex3.log();
      complex6.divide(394.392112);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.add(1.7984863104885375E-111);
      complex1.INF.sqrt1z();
      Complex.valueOf((-3231.412), (-709.07797864));
      Complex complex2 = Complex.valueOf(1.7984863104885375E-111);
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex3.ZERO.sqrt();
      complex4.INF.divide(2039.55108);
      complex2.divide((-709.07797864));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      complex1.ZERO.reciprocal();
      complex1.getArgument();
      complex0.ONE.subtract(0.0);
      Complex complex2 = complex0.ZERO.add(2.462968349456787);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.sin();
      complex4.sinh();
      complex4.ZERO.hashCode();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = complex6.divide(0.0);
      complex7.readResolve();
      complex7.exp();
      complex3.NaN.tanh();
      Complex complex8 = complex3.ZERO.subtract(complex0);
      Complex.valueOf((-2255.24228698823));
      Complex complex9 = complex3.acos();
      complex9.getImaginary();
      complex5.acos();
      complex2.sqrt1z();
      complex8.acos();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.pow(Double.NaN);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex1.divide((-1950.62062));
      complex4.readResolve();
      complex5.add(3074.92468979394);
      complex3.subtract((-266.378723));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.INF.divide(complex1);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(151.5173193, (-530.429));
      Complex complex1 = complex0.multiply(0);
      complex0.INF.sqrt1z();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex1.pow(0.0);
      Complex complex2 = complex0.subtract(151.5173193);
      complex2.createComplex(0.0, 969.057484801);
      Complex complex3 = complex1.tanh();
      complex3.INF.atan();
      complex2.getField();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = Complex.valueOf(663.48986816398, 0.0);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex2.I.multiply(311);
      Complex complex5 = complex0.multiply(complex2);
      complex2.ZERO.readResolve();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex5.multiply(0.0);
      complex8.ZERO.divide(complex7);
      Complex complex9 = Complex.valueOf(0.0, Double.NaN);
      Complex complex10 = complex5.subtract(complex9);
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex10.divide(complex0);
      complex11.I.pow(0.0);
      complex11.divide((double) 311);
      complex12.isInfinite();
      complex11.divide(complex1);
      complex7.getImaginary();
      complex3.multiply(311);
      complex0.add(complex3);
      complex6.log();
      complex2.multiply(Double.NaN);
      complex6.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.NaN;
      complex1.ZERO.conjugate();
      complex1.INF.pow(complex2);
      complex0.subtract(complex1);
      complex2.add(421.77765);
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(1.876664741413704E-7, 2.0);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.multiply(complex0);
      complex3.I.sin();
      Complex complex4 = complex3.negate();
      complex4.I.hashCode();
      Complex complex5 = complex1.tan();
      complex5.subtract(complex0);
      complex2.I.negate();
      complex2.INF.pow(complex4);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex2.add(complex6);
      complex6.ZERO.subtract(complex1);
      Complex.valueOf(2.0);
      complex6.INF.multiply(complex2);
      Complex complex8 = complex6.atan();
      complex7.log();
      complex1.equals(complex5);
      complex8.multiply(170);
      Complex.valueOf(1.876664741413704E-7);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(369.49194, (-1602.5027988));
      complex0.INF.multiply((-1387));
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
      complex0.pow((-979.4));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow((-1027.964314236367));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.sqrt1z();
      complex3.INF.sqrt1z();
      complex2.ONE.toString();
      Complex complex4 = complex2.add((-1027.964314236367));
      Complex complex5 = complex2.I.pow(complex1);
      Complex complex6 = complex5.ZERO.subtract(complex0);
      complex0.hashCode();
      Complex complex7 = complex1.cos();
      complex4.NaN.tan();
      Complex complex8 = complex1.I.createComplex((-1027.964314236367), 4427.0);
      complex8.I.divide(complex1);
      complex7.INF.divide((-1027.964314236367));
      complex4.getReal();
      Complex complex9 = complex7.cos();
      complex9.ONE.multiply(0);
      complex6.multiply(0.0);
      complex7.isInfinite();
      complex9.getArgument();
      complex5.getArgument();
      complex0.add((-879.07821499915));
      complex7.asin();
      Complex.valueOf((-2154.430916328564), (-1027.964314236367));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ONE.multiply((-523));
      Complex complex2 = complex0.sinh();
      complex2.INF.getField();
      Complex complex3 = complex0.sqrt();
      complex0.negate();
      complex2.createComplex((-20.0), 2863.29460540431);
      complex1.sin();
      complex3.exp();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(2.406976727302894E-69);
      complex0.getArgument();
      complex0.abs();
      complex0.subtract(2.406976727302894E-69);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.INF.add(complex2);
      complex3.I.subtract(complex2);
      complex1.log();
      Complex complex4 = complex0.subtract(complex1);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-2707.7344), (-2707.7344));
      complex0.ZERO.log();
      Complex complex1 = complex0.ZERO.asin();
      complex1.ONE.getArgument();
      complex0.NaN.add(complex1);
      Complex complex2 = complex1.ONE.subtract((-2707.7344));
      Complex complex3 = Complex.valueOf((-826.592966));
      complex3.I.divide(complex0);
      Complex complex4 = complex0.ONE.sinh();
      complex0.ONE.sin();
      Complex complex5 = complex4.INF.exp();
      complex5.ONE.pow(complex0);
      complex1.NaN.hashCode();
      Complex complex6 = complex0.createComplex((-2707.7344), 833.6071613026071);
      complex6.log();
      complex6.INF.exp();
      complex6.sqrt1z();
      complex2.getField();
      complex6.INF.asin();
      int int0 = (-1791);
      try { 
        complex6.nthRoot((-1791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,791
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2142.74605303773);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex3.ZERO.sin();
      complex4.ZERO.createComplex(0.0, 2142.74605303773);
      complex1.I.subtract(complex2);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex5.ZERO.pow(complex3);
      complex7.ONE.sqrt1z();
      complex5.INF.negate();
      Complex complex8 = complex6.INF.add(2693.5192);
      Complex complex9 = complex5.multiply(complex1);
      complex9.INF.sinh();
      complex9.ONE.divide(complex0);
      complex1.tanh();
      complex1.getImaginary();
      complex6.abs();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex2.cosh();
      complex11.ZERO.pow(complex0);
      complex11.toString();
      complex2.divide(Double.NaN);
      complex10.hashCode();
      Complex complex12 = complex8.atan();
      complex11.getImaginary();
      complex3.tanh();
      complex12.nthRoot(780);
      Complex complex13 = Complex.valueOf((-779.0324728430319), 5717.974084351929);
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.I.add(complex1);
      complex2.ONE.multiply((-4102));
      Complex complex4 = complex2.ONE.cosh();
      complex4.ZERO.asin();
      complex0.hashCode();
      Complex complex5 = complex0.tan();
      complex5.NaN.hashCode();
      complex5.ZERO.pow(complex3);
      complex5.I.readResolve();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex0.multiply(1);
      complex7.INF.nthRoot(972);
      Complex complex8 = complex1.exp();
      complex8.NaN.negate();
      complex6.multiply((double) 972);
      complex8.sqrt1z();
      complex7.createComplex(972, 1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.NaN.subtract(complex0);
      complex0.getField();
      complex2.readResolve();
      Complex complex4 = Complex.valueOf(198.67600857896502, 2.4621305031382827E-33);
      complex0.hashCode();
      Complex complex5 = complex3.ZERO.asin();
      Complex complex6 = complex0.ONE.acos();
      complex6.INF.multiply(complex0);
      Complex complex7 = complex0.log();
      complex7.NaN.negate();
      Complex complex8 = complex7.INF.pow(2.0458641052246094);
      Complex complex9 = complex8.ONE.sinh();
      complex9.INF.add(2.0458641052246094);
      complex7.abs();
      Complex complex10 = complex3.divide(complex9);
      Complex complex11 = complex7.sin();
      complex11.ZERO.getField();
      complex7.toString();
      Complex complex12 = complex3.add(complex2);
      complex5.equals(complex3);
      complex12.getReal();
      complex4.conjugate();
      complex1.pow(4.8410188461165925E-8);
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.ZERO.subtract(0.8109631538391113);
      complex0.getImaginary();
      complex0.getField();
      complex1.INF.add(complex2);
      complex0.getImaginary();
      complex1.isNaN();
      complex0.reciprocal();
      complex1.acos();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(1140.50808904922, 0.0);
      complex0.INF.multiply(0.0);
      Complex complex1 = complex0.createComplex(2175.6576977722375, (-4.571195152299358E262));
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.NaN.sqrt();
      complex5.INF.asin();
      Complex complex6 = complex5.INF.atan();
      complex6.NaN.reciprocal();
      complex3.I.sqrt();
      Complex complex7 = complex3.ONE.divide(2175.6576977722375);
      complex3.ZERO.subtract(complex7);
      Complex complex8 = Complex.valueOf(0.0, 1140.50808904922);
      complex8.tanh();
      Complex complex9 = complex3.sinh();
      complex9.ONE.pow(2175.6576977722375);
      complex0.atan();
      complex0.pow(complex2);
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add((-2809.96708));
      Complex complex3 = complex2.NaN.tan();
      complex2.ONE.subtract(complex1);
      Complex complex4 = complex1.INF.subtract(complex0);
      complex4.I.add(complex0);
      complex0.cos();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex3.getImaginary();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5197.45));
      Complex complex1 = complex0.INF.reciprocal();
      complex1.NaN.sinh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.INF.asin();
      complex0.NaN.toString();
      Complex complex4 = complex0.ZERO.cosh();
      complex0.getReal();
      complex0.isNaN();
      Complex complex5 = complex1.tan();
      complex5.getImaginary();
      complex0.nthRoot(3071);
      Complex complex6 = complex5.ONE.createComplex((-5197.45), (-5197.45));
      Complex complex7 = complex5.createComplex((-421.689), 0.0);
      complex7.ONE.hashCode();
      complex1.hashCode();
      complex7.divide(0.0);
      Complex complex8 = complex4.exp();
      complex8.NaN.add(complex6);
      Complex.valueOf(0.0, 942.012834885726);
      complex5.pow((-20.0));
      complex7.sqrt1z();
      complex3.readResolve();
      complex8.isInfinite();
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      complex1.ONE.createComplex(20.0, 20.0);
      complex0.INF.getField();
      complex0.toString();
      Complex complex2 = complex0.divide((-3.983067093146514E-8));
      Complex complex3 = complex2.INF.multiply(0);
      Complex complex4 = Complex.valueOf((-3.983067093146514E-8), 1647.6322621991);
      complex4.sqrt1z();
      Object object0 = new Object();
      complex3.equals(object0);
      complex2.hashCode();
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      complex0.ONE.sqrt();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.sin();
      complex1.getField();
      complex0.log();
      complex1.isNaN();
      complex2.hashCode();
      double double1 = 20.0;
      complex2.I.negate();
      try { 
        complex0.nthRoot((-178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -178
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      complex0.INF.divide(complex1);
      Complex complex2 = complex1.asin();
      complex2.I.tanh();
      Complex complex3 = complex2.INF.cos();
      complex2.I.nthRoot(1602);
      complex2.INF.conjugate();
      complex2.getImaginary();
      Complex complex4 = complex3.multiply(224);
      complex4.I.reciprocal();
      Complex complex5 = Complex.valueOf(Double.NaN, (-255.0));
      complex2.isNaN();
      complex5.tanh();
      complex0.exp();
      Complex complex6 = complex3.multiply(Double.NaN);
      complex6.I.createComplex(Double.NaN, (-1.607434968107079E-8));
      complex1.getField();
      complex0.sqrt();
      complex4.multiply(956.318798);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      complex0.ONE.nthRoot(2733);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.INF.sqrt();
      Complex.valueOf(25.277);
      Complex complex3 = complex2.I.atan();
      complex3.NaN.hashCode();
      complex2.readResolve();
      complex3.I.acos();
      complex2.I.conjugate();
      complex1.I.divide(complex0);
      complex0.cosh();
      complex0.add(1.7584857940673828);
      int int0 = (-4434);
      try { 
        complex0.nthRoot((-4434));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,434
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.multiply(0.0);
      complex2.I.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.ONE.multiply(complex3);
      complex0.INF.getArgument();
      complex4.ONE.sqrt();
      complex0.ZERO.nthRoot(1190);
      complex0.readResolve();
      complex0.isNaN();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-2.9013441705763093E-8));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.I.cosh();
      complex0.readResolve();
      complex0.log();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(0.0);
      Complex complex3 = complex2.NaN.pow(complex1);
      Complex complex4 = complex0.ZERO.divide(complex1);
      Complex complex5 = complex2.NaN.conjugate();
      Complex complex6 = complex0.cos();
      Complex complex7 = Complex.valueOf(0.0);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      complex2.multiply(1554);
      Complex complex8 = complex6.INF.log();
      complex8.ZERO.reciprocal();
      complex8.NaN.divide(0.0);
      complex8.ZERO.readResolve();
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex9.sinh();
      complex10.I.subtract((double) 1554);
      assertEquals(0.7716133340725972, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex6.createComplex(1554, 1554);
      complex11.cosh();
      Complex complex12 = complex0.divide((double) 1554);
      Complex complex13 = complex12.ZERO.acos();
      assertEquals(1.5707963267948966, complex13.getReal(), 0.01);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex12.ZERO.divide(complex11);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertNotSame(complex14, complex4);
      
      complex12.INF.multiply(complex1);
      assertTrue(complex12.equals((Object)complex4));
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      Complex complex15 = complex0.reciprocal();
      Complex complex16 = complex15.INF.log();
      complex16.INF.cos();
      assertTrue(complex16.isInfinite());
      
      Complex complex17 = complex5.INF.acos();
      Complex complex18 = Complex.valueOf(4572.8, 1204.321494);
      complex18.conjugate();
      complex5.isInfinite();
      Complex complex19 = complex15.atan();
      assertSame(complex19, complex15);
      
      complex3.getReal();
      Complex complex20 = complex5.divide((-20.0));
      assertFalse(complex20.equals((Object)complex14));
      assertSame(complex20, complex17);
      assertNotSame(complex20, complex18);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
