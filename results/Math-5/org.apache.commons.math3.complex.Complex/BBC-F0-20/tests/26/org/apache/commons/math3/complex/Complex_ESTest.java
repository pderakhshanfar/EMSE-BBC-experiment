/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:19:35 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.27635895265786437, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.tan();
      complex0.tan();
      Complex complex2 = Complex.valueOf((-1.0));
      complex2.nthRoot(178);
      complex1.acos();
      Complex complex3 = complex0.reciprocal();
      complex3.atan();
      Complex complex4 = new Complex(771.5283976013178);
      Complex complex5 = new Complex(1.0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.4217997464522202E-8, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(816.4813087539479, 1757.8168208856441);
      Complex.valueOf(816.4813087539479, 816.4813087539479);
      Complex complex1 = complex0.sinh();
      complex1.ZERO.hashCode();
      complex1.readResolve();
      Complex complex2 = complex0.createComplex(1757.8168208856441, Double.POSITIVE_INFINITY);
      complex2.getField();
      complex2.I.negate();
      Complex complex3 = Complex.ZERO;
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(816.4813087539479, 1757.8168208856441);
      Complex complex1 = Complex.valueOf(816.4813087539479, 816.4813087539479);
      Complex complex2 = complex0.sinh();
      complex2.ZERO.hashCode();
      complex2.readResolve();
      Complex complex3 = complex0.createComplex(1757.8168208856441, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.pow(complex2);
      complex3.NaN.cos();
      complex4.I.createComplex(816.4813087539479, 1757.8168208856441);
      complex3.multiply(1627);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.readResolve();
      Complex complex2 = complex1.createComplex((-1.608884086544153E-8), 1503.3);
      Complex complex3 = new Complex((-3130.0435465), Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.pow(complex3);
      complex4.multiply(complex1);
      Complex complex5 = complex1.divide((-3130.0435465));
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.createComplex((-3130.0435465), (-2.291749683541979E-9));
      complex3.abs();
      complex2.tan();
      complex6.tan();
      complex4.acos();
      Complex complex8 = new Complex((-1.608884086544153E-8));
      complex8.reciprocal();
      complex0.atan();
      complex3.multiply((-1728.27112));
      complex0.subtract((-1.608884086544153E-8));
      complex1.subtract(complex7);
      Complex complex9 = Complex.NaN;
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(816.4813087539479, 1757.8168208856441);
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      Complex complex2 = complex0.sinh();
      complex2.ZERO.hashCode();
      complex2.readResolve();
      Complex complex3 = complex0.createComplex((-3130.0435465), Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.pow(complex2);
      complex1.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex1.negate();
      complex3.getReal();
      Complex complex7 = complex6.tan();
      complex7.asin();
      complex3.multiply(complex1);
      Complex complex8 = new Complex(915.9800545);
      Complex complex9 = Complex.valueOf(1757.8168208856441);
      complex4.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(1393.42961807, Double.POSITIVE_INFINITY);
      complex0.INF.asin();
      complex0.readResolve();
      complex0.sqrt1z();
      complex0.divide(1393.42961807);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.I.pow(complex0);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.INF;
      complex0.abs();
      complex1.divide((-20.0));
      complex3.sinh();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.multiply(20.0);
      Complex.valueOf(20.0, (-20.0));
      complex4.reciprocal();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.cosh();
      Complex.valueOf((-1.9987622893254038E-7), 20.0);
      complex2.multiply(complex7);
      complex5.tanh();
      Complex complex8 = new Complex((-1.9987622893254038E-7));
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.isInfinite();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex3.ONE.add(1.080202341079712);
      Complex complex5 = complex4.ONE.tan();
      complex3.abs();
      complex3.divide(0.0);
      complex0.sinh();
      complex3.sqrt();
      complex4.multiply(Double.NaN);
      complex5.reciprocal();
      Complex complex6 = Complex.NaN;
      complex6.cosh();
      Complex complex7 = Complex.valueOf(0.0, 2.017054016756);
      complex7.multiply(complex1);
      complex3.tanh();
      Complex complex8 = new Complex(445.41938874);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.atan();
      Complex complex2 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex8.INF.reciprocal();
      Complex complex10 = complex9.INF.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.exp();
      complex8.NaN.multiply(360);
      complex6.toString();
      complex10.tanh();
      complex8.conjugate();
      complex5.multiply(979);
      complex4.sqrt1z();
      complex6.cosh();
      complex7.negate();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      try { 
        complex1.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-760.611666976838));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract(1788.601882383723);
      Complex complex2 = complex1.negate();
      complex2.ZERO.getField();
      complex2.ONE.tan();
      complex2.INF.sqrt();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.add(1788.601882383723);
      complex4.multiply(1788.601882383723);
      complex3.reciprocal();
      Complex complex5 = Complex.valueOf(1788.601882383723, (-1.0));
      int int0 = (-1934);
      try { 
        complex5.NaN.nthRoot((-1934));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,934
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(1.7768193998956956, 1.7768193998956956);
      Complex complex3 = complex2.divide(complex1);
      complex3.sin();
      Complex complex4 = complex1.createComplex(526.487866, 1.7768193998956956);
      Complex complex5 = complex4.negate();
      complex0.pow(Double.POSITIVE_INFINITY);
      complex5.sqrt1z();
      Complex complex6 = new Complex(1.7768193998956956, Double.POSITIVE_INFINITY);
      complex6.abs();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.divide(0.0);
      complex0.sinh();
      complex2.hashCode();
      complex3.sqrt();
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.INF;
      complex4.add(complex5);
      Complex complex6 = complex0.reciprocal();
      complex0.cosh();
      Complex.valueOf(738.22665, 1.0);
      Complex complex7 = Complex.valueOf(0.347847044467926);
      complex7.multiply(complex6);
      complex5.tanh();
      Complex.valueOf(0.003635041802980734);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.484557220949851E-8));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.add(complex1);
      complex2.NaN.getArgument();
      complex0.exp();
      Complex complex3 = complex0.reciprocal();
      complex0.pow(complex3);
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.asin();
      complex3.getField();
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.createComplex(1.1364731788635254, (-3984.9205344308243));
      Complex complex7 = Complex.valueOf((-3984.9205344308243), (-1803.6));
      complex6.sqrt1z();
      complex6.acos();
      complex7.ONE.sin();
      Complex.valueOf(4198.2034086008, (-1803.6));
      complex4.getArgument();
      complex2.log();
      Complex complex8 = complex5.pow(1460.004361801);
      complex7.sqrt1z();
      complex7.cos();
      complex8.abs();
      complex2.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-1240.0722005632), (-161.164847));
      Complex complex1 = complex0.NaN.tan();
      complex1.ONE.multiply(296);
      Complex complex2 = complex1.NaN.reciprocal();
      complex2.INF.conjugate();
      Complex complex3 = Complex.valueOf(1468.47889327095);
      Complex complex4 = complex3.multiply((-95));
      Complex complex5 = complex3.sin();
      complex4.ZERO.multiply(578.650239954463);
      complex5.ONE.reciprocal();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex0.log();
      complex6.add(complex4);
      Complex complex8 = Complex.valueOf(2.0, (-1746.05581101155));
      complex5.ONE.subtract(complex8);
      complex0.pow(2.0);
      Complex complex9 = complex7.acos();
      Complex complex10 = complex9.log();
      complex2.exp();
      complex3.readResolve();
      Complex complex11 = complex3.I.reciprocal();
      complex11.NaN.add(2.3810978455418157);
      complex5.divide((-2730.15908726));
      complex2.conjugate();
      complex10.divide(complex9);
      complex10.cos();
      complex7.createComplex(578.650239954463, 945.546919676);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(2.3832096207000712E160);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ONE.pow(complex0);
      complex0.abs();
      Complex complex3 = new Complex(2.3832096207000712E160, 2.0);
      Complex complex4 = complex0.multiply(complex3);
      complex4.ONE.tan();
      Complex complex5 = complex4.ZERO.exp();
      complex5.ZERO.asin();
      Complex complex6 = complex0.exp();
      complex6.ZERO.asin();
      complex0.getField();
      Complex complex7 = complex0.createComplex(2.3832096207000712E160, (-2226.457));
      complex0.ZERO.multiply(1572);
      complex7.multiply((-2.4970008E7));
      complex0.sqrt1z();
      Complex complex8 = Complex.valueOf((-4.189342715492133E-4));
      Complex complex9 = complex8.ZERO.sinh();
      complex0.sinh();
      Complex complex10 = complex0.asin();
      complex10.reciprocal();
      complex9.divide(6.283185307179586);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      complex1.add(complex0);
      Complex complex2 = complex0.add(6.283185307179586);
      Complex complex3 = complex1.tan();
      complex2.toString();
      complex3.abs();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.divide(1.080202341079712);
      Complex complex6 = complex3.sinh();
      complex2.hashCode();
      Complex complex7 = new Complex(20.0);
      complex7.sqrt();
      double double0 = 1230.425183869984;
      Complex complex8 = complex3.multiply(1230.425183869984);
      complex3.add(complex6);
      Complex.valueOf((-1911.354684817662));
      complex8.reciprocal();
      complex5.cosh();
      Complex.valueOf(1.557407724654902, 20.0);
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex((-20.0), 1215.3224336238284);
      Complex complex1 = Complex.valueOf(6.21656007, (-20.0));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.acos();
      complex2.getArgument();
      complex3.log();
      Complex.valueOf(0.30071593484716863);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.divide(3799.72292937694);
      complex1.sqrt1z();
      complex5.getReal();
      complex1.tan();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.createComplex((-3984.9205344308243), 1.1364731788635254);
      Complex complex5 = Complex.valueOf((-883.2216047575965), (-883.2216047575965));
      Complex complex6 = complex3.sqrt1z();
      complex6.acos();
      Complex complex7 = Complex.valueOf((-1803.6), (-1803.6));
      complex7.getArgument();
      complex1.log();
      Complex.valueOf(0.0);
      complex5.negate();
      complex1.divide((-883.2216047575965));
      Complex complex8 = complex4.sqrt1z();
      complex0.getReal();
      complex8.tan();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4027.95098);
      Complex complex1 = new Complex((-20.0), 2.7457984659996047E-8);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.sin();
      complex4.createComplex(1468.9482724157751, 2189.68861);
      Complex complex7 = complex2.negate();
      complex6.acos();
      complex7.cosh();
      Complex.valueOf(1.2060814228017875);
      Complex complex8 = Complex.valueOf(2.7457984659996047E-8);
      complex8.divide(4972.64);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.add((-20.0));
      complex2.NaN.subtract((-20.0));
      Complex complex4 = complex3.tan();
      complex1.toString();
      complex0.abs();
      complex2.cosh();
      Complex complex5 = complex2.divide((-520.3523908));
      Complex complex6 = complex5.sinh();
      complex5.hashCode();
      Complex complex7 = complex1.sqrt();
      complex7.multiply((-20.0));
      Complex complex8 = complex4.add(complex6);
      complex8.reciprocal();
      Complex complex9 = complex1.cosh();
      complex9.sqrt();
      Complex.valueOf((-520.3523908), (-1756.7202));
      Complex complex10 = new Complex((-20.0), 2.13777494430542);
      complex0.tanh();
      Complex.valueOf((-392.0));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(2.7457984659996047E-8);
      Complex complex1 = Complex.valueOf((-2549.8002001937), (-2635.4490454));
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.ONE.sin();
      Complex complex5 = complex3.asin();
      Complex complex6 = new Complex(2.7457984659996047E-8, (-246.336519));
      Object object0 = complex6.readResolve();
      complex0.equals(object0);
      complex2.divide(complex5);
      complex6.asin();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.nthRoot(570);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.ZERO.pow(complex1);
      Complex complex5 = complex3.INF.log();
      Complex complex6 = complex2.pow(complex3);
      complex0.abs();
      Complex complex7 = complex4.subtract(Double.NaN);
      complex4.INF.add(Double.NaN);
      Complex complex8 = complex6.multiply(complex7);
      Complex complex9 = complex8.NaN.tanh();
      complex9.ZERO.nthRoot(570);
      Complex complex10 = complex2.asin();
      complex3.multiply(complex1);
      Complex complex11 = complex3.cosh();
      complex11.NaN.negate();
      complex4.INF.sqrt();
      complex8.multiply(complex10);
      complex11.conjugate();
      complex6.log();
      complex5.log();
      complex6.pow((double) 570);
      complex3.cosh();
      Complex complex12 = Complex.valueOf((double) 570);
      complex9.add(complex12);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      Complex complex1 = Complex.valueOf(2867.137);
      Complex complex2 = new Complex(2867.137);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.sin();
      complex3.I.getField();
      complex3.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.negate();
      complex0.sqrt1z();
      Complex complex5 = complex2.acos();
      complex5.cosh();
      Complex complex6 = Complex.valueOf(1109.1118224876905);
      Complex complex7 = complex6.I.exp();
      complex4.INF.add(complex7);
      complex4.divide(Double.POSITIVE_INFINITY);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1253.906648624334));
      Complex complex1 = new Complex((-1253.906648624334));
      Complex complex2 = complex1.tanh();
      complex1.pow(complex0);
      Complex complex3 = complex2.pow(complex0);
      complex1.divide(complex2);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.sin();
      Complex complex6 = complex3.createComplex((-1253.906648624334), 4972.64);
      complex5.negate();
      complex3.sqrt1z();
      complex0.acos();
      complex6.cosh();
      Complex.valueOf((-1185.5434856241761));
      complex1.divide(2593.89);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = (Complex)complex0.readResolve();
      complex1.equals(complex0);
      Complex complex3 = complex2.divide(complex0);
      complex1.asin();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.I.abs();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.ZERO;
      complex4.NaN.pow(complex5);
      Complex complex6 = complex4.log();
      Complex complex7 = complex1.acos();
      complex7.I.multiply(complex1);
      complex3.I.pow(complex5);
      complex1.nthRoot(1222);
      complex1.sin();
      Complex complex8 = complex2.multiply(complex3);
      Complex complex9 = complex8.I.pow(complex5);
      Complex complex10 = complex2.negate();
      Complex complex11 = complex4.ONE.add(1.0);
      complex10.NaN.hashCode();
      Complex complex12 = complex11.NaN.exp();
      Complex complex13 = complex1.tan();
      complex10.log();
      Complex complex14 = complex13.NaN.subtract(complex11);
      complex10.asin();
      complex9.divide(complex3);
      Complex complex15 = complex9.divide((double) 1222);
      Complex.valueOf((-3062.0));
      Complex complex16 = complex6.sin();
      complex15.ONE.toString();
      complex16.I.acos();
      complex0.getField();
      complex14.tanh();
      Complex complex17 = complex12.subtract(complex15);
      complex16.sin();
      complex17.asin();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.divide((-2.1324678121885073E-10));
      Complex complex4 = Complex.valueOf((-2.1324678121885073E-10));
      complex3.conjugate();
      Complex complex5 = complex2.divide((-2.1324678121885073E-10));
      Complex complex6 = complex2.conjugate();
      complex6.I.divide(4.231000988846797E177);
      Complex complex7 = complex1.tan();
      complex7.I.cos();
      Complex complex8 = complex7.atan();
      complex7.pow(complex0);
      complex2.nthRoot(1575);
      complex5.createComplex((-2.1324678121885073E-10), (-1.3439737007122433E7));
      complex8.add(complex3);
      complex4.multiply(complex8);
      complex6.divide(complex8);
      complex0.createComplex(1.184154459111628E-8, 1575);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      complex0.equals(complex1);
      Complex complex2 = complex0.add(complex0);
      complex1.cos();
      complex1.sinh();
      complex0.nthRoot(902);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.equals(complex2);
      complex0.add(complex0);
      Complex complex3 = complex1.cos();
      complex2.sinh();
      Complex complex4 = Complex.ZERO;
      complex2.nthRoot(1);
      complex3.abs();
      complex3.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex0.equals(complex1);
      Complex complex2 = new Complex(0.5000000000042687, (-3088.9716));
      complex0.divide(complex2);
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.negate();
      complex5.getArgument();
      Complex complex6 = complex3.sinh();
      complex0.hashCode();
      Complex complex7 = complex0.tanh();
      Complex complex8 = Complex.valueOf((-3088.9716), 29.775642996580764);
      complex5.pow(complex8);
      complex3.log();
      complex2.pow(complex4);
      complex6.subtract((-3088.9716));
      complex6.equals(complex7);
      Complex complex9 = new Complex(0.1332872211933136);
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.ONE;
      complex4.hashCode();
      complex0.pow(complex3);
      complex3.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(2.7457984659996047E-8);
      Complex complex1 = Complex.valueOf((-2549.8002001937), (-2635.4490454));
      Complex complex2 = complex1.ZERO.sinh();
      complex1.ONE.tanh();
      Complex complex3 = complex1.tan();
      complex2.toString();
      complex3.abs();
      Complex complex4 = complex3.divide(complex2);
      complex3.cosh();
      Complex complex5 = complex4.divide(0.6228630542755127);
      complex3.sinh();
      complex1.hashCode();
      Complex complex6 = complex0.sqrt();
      complex3.multiply(1432.350813634935);
      complex6.add(complex3);
      Complex complex7 = complex2.cosh();
      Complex.valueOf(1712.4512567092145, 558.6);
      complex3.multiply(complex7);
      complex2.pow(3903.074303);
      complex5.tanh();
      Complex.valueOf(3.7621956910836314);
      Complex complex8 = complex4.divide(0.3594330038102771);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1213.0));
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.add(1.080202341079712);
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.NaN;
      complex6.toString();
      complex1.abs();
      Complex complex7 = complex1.divide(complex4);
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex3.divide(1313.85);
      Complex complex10 = complex8.sinh();
      complex5.hashCode();
      complex7.sqrt();
      Complex complex11 = complex7.multiply(1313.85);
      Complex complex12 = Complex.INF;
      Complex complex13 = complex12.add(complex9);
      complex13.cosh();
      Complex complex14 = Complex.valueOf((-961.52480427), 1.0);
      Complex complex15 = Complex.I;
      complex15.multiply(complex8);
      complex14.pow(1.3439737007122433E7);
      complex10.tanh();
      Complex.valueOf((-870.0557774777));
      complex11.divide(1313.85);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1240.309350465184));
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1240.309350465184));
      complex0.toString();
      complex0.sinh();
      complex0.sin();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-2005.403944959));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.I;
      complex2.ZERO.readResolve();
      Complex complex3 = complex2.I.add((-2005.403944959));
      Complex complex4 = Complex.ZERO;
      complex3.tanh();
      complex2.divide(complex0);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex0.NaN.cos();
      complex4.I.subtract((double) 17);
      complex0.divide(complex1);
      complex1.sin();
      Complex complex5 = Complex.valueOf(1468.9482724157751, (double) 17);
      complex1.createComplex(1.4199501303738373E-65, 4972.64);
      Complex.valueOf((double) 17, 1468.9482724157751);
      Complex complex6 = complex4.negate();
      complex3.sqrt1z();
      Complex complex7 = complex6.acos();
      complex2.getArgument();
      complex7.reciprocal();
      complex5.acos();
      // Undeclared exception!
      complex2.nthRoot(2045220093);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      int int0 = (-2976);
      Complex complex2 = complex0.ONE.multiply((-2976));
      complex2.INF.getArgument();
      complex0.ONE.add(complex1);
      double double0 = 0.0;
      Complex complex3 = Complex.valueOf(3589.753585, 0.0);
      try { 
        complex3.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(712.1101580112761);
      Complex.valueOf(712.1101580112761);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.multiply(883);
      complex1.abs();
      complex3.multiply(complex0);
      complex1.I.readResolve();
      Complex complex4 = complex2.createComplex(712.1101580112761, 883);
      complex4.exp();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.NaN.pow(complex1);
      Complex complex2 = Complex.valueOf((-845.427521427), 0.0);
      complex1.toString();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf((-1243.1407), 4594.3747540773);
      complex4.multiply(7);
      Complex.valueOf(3779093.7266838765, Double.POSITIVE_INFINITY);
      complex4.sqrt();
      Complex complex5 = new Complex(1548.83921964);
      complex4.cosh();
      Complex.valueOf(5.1079306249351287E-256);
      Complex complex6 = complex2.divide(1468.9482724157751);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex0.NaN.cos();
      complex4.I.subtract((double) 17);
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.cosh();
      complex6.divide((-3489.0));
      Complex complex8 = complex3.sinh();
      complex5.hashCode();
      complex6.sqrt();
      Complex complex9 = complex1.multiply(1212.6515308920332);
      complex7.add(complex0);
      complex3.cosh();
      Complex.valueOf((-3489.0), 1224.94649419);
      complex4.multiply(complex8);
      Complex complex10 = complex6.pow((-3132.96814));
      Complex complex11 = complex0.tanh();
      complex1.multiply((-961.52480427));
      complex11.asin();
      complex10.negate();
      complex9.multiply(complex1);
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3112.652));
      complex1.toString();
      Complex complex4 = complex2.multiply(935);
      complex4.ONE.conjugate();
      Complex complex5 = complex1.sqrt();
      complex5.cosh();
      Complex.valueOf((double) 935);
      complex1.divide((-1232.94));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(0.0, 1.6419797090870802E-8);
      Complex complex3 = Complex.NaN;
      complex1.sqrt1z();
      complex1.asin();
      complex1.sqrt();
      complex2.reciprocal();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1212.866746915222));
      Complex complex1 = complex0.subtract((-1212.866746915222));
      Complex complex2 = new Complex((-1212.866746915222));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.tan();
      complex1.nthRoot(913);
      complex0.exp();
      complex4.negate();
      complex3.abs();
      complex0.readResolve();
      complex4.toString();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex1.conjugate();
      complex3.getField();
      Complex complex7 = complex0.subtract(complex4);
      complex4.cosh();
      complex7.atan();
      Complex complex8 = complex6.divide(complex5);
      complex2.sqrt1z();
      complex6.pow(2195.12726287215);
      Complex complex9 = complex5.sinh();
      Complex complex10 = Complex.valueOf(0.0, 320.20874453663);
      complex5.getField();
      complex3.multiply(913);
      complex4.multiply((-1212.866746915222));
      complex10.getField();
      complex9.getReal();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex0.NaN.cos();
      complex4.I.subtract((double) 17);
      complex0.divide(complex1);
      Complex complex5 = complex1.sin();
      Complex.valueOf(1468.9482724157751, (double) 17);
      complex3.toString();
      Complex complex6 = Complex.NaN;
      complex6.multiply(17);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, (-991.1));
      complex7.sqrt();
      Complex complex8 = new Complex(4.737693450915584E247);
      complex8.cosh();
      Complex.valueOf(1468.9482724157751);
      complex1.divide((-256.8));
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1212.866746915222));
      Complex complex1 = complex0.subtract((-1212.866746915222));
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.I.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.8249680995941162);
      complex1.toString();
      complex2.multiply(0);
      complex1.sqrt();
      Complex complex4 = complex1.cosh();
      Complex.valueOf((-1212.866746915222));
      complex3.getImaginary();
      complex4.multiply((-541));
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-734.4743063976), (-734.4743063976));
      Complex complex1 = complex0.divide(1.0);
      complex1.readResolve();
      complex1.equals("l!y&f)O%tnlW:Oi");
      Complex complex2 = new Complex(1.0, 0.5000000000042687);
      complex2.divide(complex1);
      complex1.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.negate();
      complex3.ZERO.subtract((-734.4743063976));
      complex1.getArgument();
      complex0.sinh();
      complex3.hashCode();
      complex3.tanh();
      Complex.valueOf(0.5403023058681398, (-3075.3));
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex0.log();
      complex5.pow(complex0);
      complex4.subtract(0.0);
      complex6.equals("");
      Complex complex7 = Complex.valueOf((-2.356194490192345));
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.add((-1464.735));
      complex0.exp();
      Complex complex4 = complex1.reciprocal();
      complex0.sqrt();
      Complex complex5 = Complex.valueOf(1.1840553283691406, (-1.0754290375762232));
      Complex complex6 = complex0.subtract(1.0);
      complex4.sqrt1z();
      complex0.asin();
      Complex complex7 = new Complex(320.20874453663, 1.1840553283691406);
      complex7.sqrt();
      complex3.reciprocal();
      complex5.isNaN();
      complex6.pow(2390.2329868);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1059.7335, 1059.7335);
      complex0.sinh();
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(125.576, 1895.7);
      Complex complex3 = complex2.sin();
      complex2.asin();
      complex1.getField();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.acos();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex1.createComplex(1059.7335, 2921.60855794);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.0418684482574463);
      Complex complex8 = complex0.negate();
      complex8.sqrt1z();
      complex7.acos();
      complex8.getArgument();
      complex1.log();
      Complex.valueOf(1786.921309069);
      complex0.negate();
      complex2.divide(835.0);
      complex4.cosh();
      complex7.sqrt1z();
      complex6.getReal();
      Complex complex9 = new Complex(1786.921309069);
      complex3.sqrt1z();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(2.7457984659996047E-8);
      Complex complex1 = Complex.valueOf(6612.8120263176, 6612.8120263176);
      Complex complex2 = Complex.valueOf(6612.8120263176, 2.7457984659996047E-8);
      complex1.getField();
      complex0.readResolve();
      complex2.nthRoot(1396);
      complex1.isInfinite();
      Complex complex3 = complex2.tan();
      complex3.multiply(2.7457984659996047E-8);
      complex3.multiply(complex0);
      complex2.sin();
      complex3.atan();
      complex2.nthRoot(203);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex1.divide((-20.0));
      Complex complex4 = new Complex((-20.0));
      complex4.readResolve();
      complex2.equals("");
      Complex complex5 = new Complex(3105.0, (-20.0));
      complex2.divide(complex1);
      complex3.asin();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex2.negate();
      complex4.getArgument();
      Complex complex8 = complex6.sinh();
      complex0.hashCode();
      Complex complex9 = Complex.NaN;
      Complex.valueOf(3.141592653589793, (-1610.3));
      Complex complex10 = complex2.pow(complex5);
      complex7.log();
      Complex complex11 = complex1.pow(complex10);
      complex8.subtract((-20.0));
      Object object0 = complex3.readResolve();
      complex5.equals(object0);
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.divide(complex0);
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.sinh();
      complex0.hashCode();
      Complex complex4 = complex0.createComplex(1.1593703222523284E-8, 1.1593703222523284E-8);
      Complex complex5 = complex2.multiply(1);
      complex0.nthRoot(204);
      complex5.getField();
      complex1.add(complex3);
      Complex complex6 = Complex.valueOf(3.8174968984748894E-54, 0.0);
      Complex complex7 = complex4.sqrt();
      Complex complex8 = Complex.ZERO;
      complex8.isNaN();
      Complex complex9 = new Complex(1);
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.I;
      complex10.equals(complex11);
      Complex complex12 = complex0.cos();
      complex7.sinh();
      complex3.getReal();
      complex6.pow(0.0);
      complex12.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf(3.8174968984748894E-54, 3.8174968984748894E-54);
      complex3.add(3.8174968984748894E-54);
      Complex complex4 = Complex.valueOf(3.8174968984748894E-54, 3.8174968984748894E-54);
      complex4.toString();
      complex2.abs();
      complex4.divide(complex1);
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.divide(3.8174968984748894E-54);
      Complex complex7 = complex5.sinh();
      complex2.hashCode();
      complex7.sqrt();
      Complex complex8 = complex5.multiply((-2635.4490454));
      complex4.add(complex1);
      complex4.cosh();
      Complex complex9 = Complex.valueOf(Double.NaN, (-2623.0));
      Complex complex10 = complex5.multiply(complex4);
      complex8.pow((-961.52480427));
      complex9.tanh();
      complex6.multiply(4.800501435803201E-220);
      complex2.asin();
      Complex complex11 = complex10.negate();
      complex3.multiply(complex11);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex0.equals(complex1);
      Complex complex2 = new Complex(0.5000000000042687, (-3088.9716));
      complex0.divide(complex2);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.negate();
      complex6.getArgument();
      Complex complex7 = complex3.sinh();
      complex0.hashCode();
      Complex complex8 = complex4.tanh();
      Complex complex9 = Complex.valueOf((-3088.9716), 29.775642996580764);
      complex6.pow(complex9);
      complex3.log();
      complex2.pow(complex5);
      complex7.subtract((-3088.9716));
      complex7.equals(complex8);
      Complex complex10 = new Complex(0.1332872211933136);
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.INF.divide(2.1087465286254883);
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex4.add(complex5);
      complex1.cos();
      complex4.log();
      complex6.sinh();
      complex4.sin();
      complex2.divide(complex0);
      complex3.sqrt();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-734.4743063976), (-734.4743063976));
      Complex complex1 = complex0.INF.sinh();
      complex1.I.add(1.0);
      Complex complex2 = complex1.ONE.exp();
      complex2.ZERO.reciprocal();
      complex0.ZERO.sqrt();
      Complex complex3 = Complex.valueOf(0.0, 320.20874453663);
      Complex complex4 = Complex.NaN;
      complex4.INF.sqrt1z();
      complex3.createComplex(0.5795059204101562, Double.NaN);
      complex4.asin();
      Complex complex5 = complex0.sqrt();
      complex5.reciprocal();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = Complex.valueOf(6.283185307179586, 1.8249680995941162);
      complex0.toString();
      Complex complex2 = complex1.multiply(1);
      complex0.sqrt();
      complex2.cosh();
      Complex.valueOf((double) 1);
      complex2.divide((-658.287));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1212.866746915222));
      Complex complex1 = complex0.subtract((-1212.866746915222));
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.I.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.8249680995941162);
      complex1.toString();
      complex2.multiply(0);
      complex1.sqrt();
      complex1.cosh();
      Complex complex3 = Complex.valueOf((-1212.866746915222));
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.cos();
      complex3.I.hashCode();
      Complex complex4 = complex2.cos();
      complex4.ZERO.getArgument();
      complex4.ONE.multiply(1.397885799407959);
      Complex complex5 = complex4.NaN.divide(2.0);
      Complex complex6 = complex4.NaN.cosh();
      complex6.ZERO.tanh();
      complex1.add(complex2);
      complex0.readResolve();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sin();
      complex1.ONE.sqrt1z();
      Complex complex2 = complex1.ONE.divide(190.426);
      complex2.INF.negate();
      complex0.isNaN();
      complex0.isInfinite();
      complex0.tan();
      Complex complex3 = Complex.valueOf((-3499.94599));
      complex3.I.sqrt1z();
      Complex complex4 = Complex.valueOf(2.0);
      Complex complex5 = complex4.cos();
      complex1.sqrt1z();
      Complex complex6 = Complex.I;
      complex4.multiply(complex6);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1028.9969, 1028.9969);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.pow(1028.9969);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.cosh();
      complex2.abs();
      Complex.valueOf(1028.9969, 6.283185307179586);
      Complex complex6 = Complex.valueOf(0.0);
      complex1.INF.acos();
      complex1.hashCode();
      Complex.valueOf(1.0, 6.283185307179586);
      complex4.subtract(1028.9969);
      Complex complex7 = complex4.reciprocal();
      complex3.hashCode();
      complex1.getImaginary();
      complex4.ZERO.hashCode();
      complex7.subtract(1028.9969);
      complex1.atan();
      complex0.acos();
      complex6.multiply(0.0);
      Complex complex8 = complex5.multiply((-7.976060494035826));
      try { 
        complex8.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      complex1.INF.divide(2.1087465286254883);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex2 = new Complex(0.0, 0.5000000000042687);
      Complex complex3 = complex0.divide(complex2);
      complex2.I.asin();
      complex0.ZERO.atan();
      Complex complex4 = complex1.negate();
      complex0.getArgument();
      complex2.sinh();
      complex1.hashCode();
      Complex complex5 = complex4.tanh();
      Complex.valueOf(0.0, 0.0);
      complex5.pow(complex3);
      complex4.log();
      Complex complex6 = complex4.pow(complex3);
      Complex complex7 = complex2.subtract((-2169.4235));
      complex6.equals(complex0);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1156.9));
      Complex complex1 = complex0.INF.subtract((-1523.0));
      Complex complex2 = complex1.pow((-2065.7015));
      Complex complex3 = complex2.I.conjugate();
      complex3.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.acos();
      complex2.NaN.add(complex4);
      complex2.subtract(complex1);
      Complex complex5 = Complex.valueOf(354.1, 0.0);
      complex5.NaN.toString();
      Complex complex6 = complex0.INF.sinh();
      complex2.ONE.subtract(complex5);
      complex6.NaN.acos();
      complex2.I.readResolve();
      complex0.equals("(");
      try { 
        complex2.nthRoot((-1710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,710
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      complex0.I.divide(8.989677431456647E-8);
      complex0.add((-741.38));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.add(1.080202341079712);
      complex4.ONE.tan();
      complex1.toString();
      complex3.abs();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex3.divide(0.0);
      Complex complex8 = complex0.sinh();
      complex8.ZERO.hashCode();
      complex8.ZERO.sqrt();
      Complex complex9 = complex0.multiply(365.7689601079254);
      complex9.NaN.add(complex6);
      complex3.NaN.cosh();
      Complex.valueOf((-961.52480427), (-3132.96814));
      Complex complex10 = complex2.multiply(complex5);
      complex10.pow(3903.074303);
      Complex complex11 = complex6.tanh();
      Complex complex12 = complex7.multiply(0.0);
      Complex complex13 = complex12.I.asin();
      complex13.ONE.negate();
      complex11.multiply(complex0);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex4.I.subtract((double) 17);
      Complex complex6 = complex1.ZERO.subtract(complex4);
      Complex complex7 = complex5.tan();
      complex0.nthRoot(17);
      Complex complex8 = complex4.ONE.exp();
      Complex complex9 = complex0.ONE.negate();
      complex1.abs();
      complex3.readResolve();
      complex4.toString();
      Complex complex10 = complex6.acos();
      complex10.INF.conjugate();
      complex4.getField();
      Complex complex11 = complex2.subtract(complex5);
      complex9.ZERO.cosh();
      complex8.atan();
      Complex complex12 = complex9.divide(complex10);
      Complex complex13 = complex10.sqrt1z();
      complex13.INF.pow(0.0);
      Complex complex14 = complex7.sinh();
      Complex.valueOf((double) 17, (-20.0));
      complex5.INF.getField();
      complex7.multiply(752);
      complex14.multiply((-20.0));
      complex11.getField();
      complex12.getReal();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sqrt();
      complex2.ZERO.tanh();
      Complex complex3 = Complex.valueOf((-4072.824676112), 0.0);
      Complex complex4 = complex0.ZERO.divide(complex3);
      complex4.ONE.pow(4422.37901621);
      Complex.valueOf((-2537.0));
      complex0.sqrt1z();
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(305.8552452);
      complex0.INF.subtract(complex1);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.I.add(complex1);
      Complex complex2 = new Complex(0.4914994239807129, 1.0297303199768066);
      Complex complex3 = complex0.NaN.subtract(complex2);
      complex0.INF.readResolve();
      Complex complex4 = complex0.ONE.sin();
      complex2.ZERO.nthRoot(1853);
      complex0.toString();
      complex0.getImaginary();
      Complex complex5 = complex2.ONE.sqrt();
      complex5.I.tan();
      Complex complex6 = complex2.divide(complex3);
      complex6.ONE.atan();
      complex3.I.multiply(complex2);
      complex4.INF.readResolve();
      Complex.valueOf(1.0, (-3229.716107733879));
      Complex complex7 = complex3.add(1.8112388823726723E41);
      Complex complex8 = complex7.pow(0.0);
      Complex complex9 = Complex.valueOf(0.4914994239807129, 747.43687270858);
      complex9.ONE.abs();
      complex8.ZERO.log();
      complex7.sqrt();
      complex4.add((-1.3455801602048414E-30));
      complex0.toString();
      complex0.getArgument();
      complex2.subtract((-789.047550413095));
      complex2.isNaN();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(979.382593, 979.382593);
      complex0.INF.atan();
      Complex.valueOf(979.382593, 979.382593);
      Complex complex1 = complex0.divide(4443.282);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ZERO.multiply(37);
      complex3.INF.toString();
      complex2.readResolve();
      complex1.divide(complex4);
      complex4.pow(979.382593);
      complex1.divide(4443.282);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      complex1.sin();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex(3506.70176, (-1.2220826223585654E-9));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getField();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.INF.log();
      complex2.I.cosh();
      complex2.INF.sin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex4.INF.acos();
      Complex complex7 = complex0.NaN.divide(complex4);
      Complex complex8 = complex0.conjugate();
      complex8.NaN.hashCode();
      Complex complex9 = complex0.I.subtract(complex7);
      complex3.I.negate();
      complex6.NaN.atan();
      complex4.I.pow(complex9);
      complex9.ZERO.hashCode();
      complex0.hashCode();
      complex6.isInfinite();
      complex4.getReal();
      complex0.subtract(complex1);
      complex3.abs();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex10.I.sqrt1z();
      complex3.pow(complex9);
      complex7.sin();
      complex4.isNaN();
      complex8.toString();
      Complex complex12 = complex11.pow(complex5);
      complex12.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.ZERO.toString();
      complex1.ONE.subtract((double) (-1363));
      try { 
        complex0.ZERO.nthRoot((-1363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,363
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.createComplex((-3136.585), 8.43835682327257E26);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex1.INF.createComplex(2042.4111307227317, 2042.4111307227317);
      Complex complex4 = complex0.sqrt1z();
      complex4.INF.hashCode();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.I.negate();
      complex6.NaN.subtract(0.0);
      Complex complex7 = Complex.valueOf(6.283185307179586);
      complex7.createComplex(1.7966744899749756, 1.7966744899749756);
      Complex complex8 = new Complex(6.283185307179586, (-8.8627));
      Complex complex9 = complex7.divide(complex8);
      Complex complex10 = Complex.valueOf(6.283185307179586);
      complex8.multiply(0.0);
      complex9.acos();
      Complex complex11 = complex10.add(complex8);
      complex11.divide(complex3);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.toString();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex1.INF.conjugate();
      complex3.INF.multiply(429);
      Complex complex4 = complex0.cosh();
      complex4.INF.getField();
      Complex complex5 = complex4.atan();
      complex2.I.createComplex(3.846720258072078E-173, 429);
      complex5.NaN.abs();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-734.4743063976), (-734.4743063976));
      Complex complex1 = complex0.INF.sinh();
      complex1.I.add(1.0);
      Complex complex2 = complex1.ONE.exp();
      complex2.ZERO.reciprocal();
      complex0.ZERO.sqrt();
      Complex.valueOf(0.0, 320.20874453663);
      Complex complex3 = complex0.subtract((-734.4743063976));
      complex3.INF.sqrt1z();
      complex3.asin();
      Complex complex4 = complex0.sqrt();
      complex4.reciprocal();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(3.8174968984748894E-54);
      Complex complex1 = complex0.divide(3.8174968984748894E-54);
      complex1.ZERO.cosh();
      Complex complex2 = complex0.pow(3.8174968984748894E-54);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-475.1333), (-3.2117127164185917E-77));
      complex1.ONE.abs();
      Complex complex3 = complex0.INF.divide(complex1);
      complex3.ZERO.getArgument();
      complex1.ZERO.divide(complex0);
      Complex complex4 = complex3.NaN.subtract(0.0);
      complex4.ONE.createComplex((-1509.4040515), 4655.712607484694);
      Complex complex5 = complex4.ZERO.multiply(complex3);
      complex5.INF.toString();
      complex1.INF.log();
      complex5.INF.divide(complex0);
      complex4.INF.exp();
      complex3.ZERO.getArgument();
      Complex complex6 = complex0.NaN.pow(complex1);
      complex6.ONE.readResolve();
      complex3.hashCode();
      complex0.ZERO.sin();
      Complex complex7 = complex0.pow(5.619995933180841E214);
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex0.cosh();
      complex2.multiply(0.0);
      complex7.createComplex((-471.8994761), 108.9);
      complex8.getReal();
      Complex complex10 = Complex.valueOf((-471.8994761));
      complex10.INF.log();
      complex9.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.926216840507529E-230, 483.572);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.pow((-2177.7843258852));
      complex1.getImaginary();
      complex2.I.asin();
      Complex complex3 = complex0.divide(complex1);
      complex2.atan();
      Complex.valueOf((-0.0020679443805679404));
      Complex complex4 = complex0.divide(complex3);
      complex4.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
      complex0.abs();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex1.NaN.subtract(0.0);
      Complex complex6 = complex5.NaN.pow(complex1);
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.atan();
      complex2.ZERO.divide(complex1);
      complex7.I.createComplex((-2662.07681200908), 856.17925);
      Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex4.pow(complex1);
      Complex complex11 = complex4.ONE.multiply(0.0);
      complex11.INF.cos();
      complex10.subtract(complex4);
      complex4.pow(complex7);
      Complex complex12 = complex4.tanh();
      Complex complex13 = complex10.tan();
      complex13.I.getArgument();
      complex1.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1884.4));
      Complex.valueOf((-1884.4));
      Complex.valueOf((-2443.707452231875));
      complex7.isInfinite();
      complex9.multiply(0.0);
      complex12.atan();
      complex13.abs();
      complex6.getReal();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      complex1.NaN.getArgument();
      complex0.isInfinite();
      Complex complex2 = complex0.pow(complex1);
      complex2.hashCode();
      complex1.asin();
      complex0.tanh();
      complex0.add(0.0);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(533.747723);
      Complex complex1 = complex0.negate();
      complex1.subtract(complex0);
      Complex complex2 = complex0.NaN.cosh();
      complex2.ONE.sinh();
      complex2.ONE.getArgument();
      complex0.getReal();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex.valueOf((-1.718446464587963E12), 7.103148400942551E-238);
      complex0.getField();
      complex0.I.readResolve();
      complex0.INF.nthRoot(1447);
      complex0.isInfinite();
      complex0.tan();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
      complex0.sin();
      complex0.atan();
      complex0.nthRoot(1646);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3537.2851367056965), (-1405.72));
      Complex complex1 = new Complex(6.513425781583774E233);
      Complex complex2 = complex1.ZERO.subtract((-3537.2851367056965));
      complex2.exp();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.cosh();
      complex3.ZERO.pow((-1201.85180697));
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex0.sinh();
      complex1.ZERO.abs();
      complex7.tan();
      complex3.I.pow(6.513425781583774E233);
      complex4.isNaN();
      Complex complex8 = complex3.divide((-1782.95663325929));
      Complex complex9 = complex6.sqrt1z();
      complex9.INF.sqrt1z();
      complex6.reciprocal();
      complex0.getArgument();
      Complex complex10 = complex5.divide((-1201.85180697));
      complex8.negate();
      Complex complex11 = complex1.tanh();
      complex11.ZERO.sqrt();
      complex10.multiply(748);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex0.INF.tanh();
      Complex complex3 = complex1.ZERO.divide(0.0);
      Complex complex4 = complex1.INF.add(complex2);
      Complex complex5 = complex3.I.tan();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex.valueOf(1.0);
      Complex complex7 = complex6.subtract(887.102595316743);
      Complex complex8 = complex7.ONE.pow(887.102595316743);
      Complex complex9 = complex8.I.tanh();
      complex8.ZERO.sqrt1z();
      complex0.multiply(complex1);
      complex8.add(0.0);
      Complex complex10 = Complex.valueOf(887.102595316743);
      Complex complex11 = complex3.pow(0.0);
      complex11.atan();
      complex9.multiply(1563);
      complex4.getReal();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = Complex.ZERO;
      complex1.tan();
      Complex complex2 = complex0.multiply(complex1);
      complex1.subtract(complex2);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(2.7457984659996047E-8);
      Complex complex1 = Complex.valueOf((-2549.8002001937), (-2635.4490454));
      complex1.ZERO.sinh();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.ONE.sin();
      Complex complex4 = complex2.asin();
      complex0.NaN.getField();
      Complex complex5 = complex1.acos();
      complex0.I.tanh();
      Complex complex6 = complex0.createComplex(1.0418684482574463, 1.1364731788635254);
      Complex complex7 = Complex.valueOf((-1803.6), 1.0418684482574463);
      complex7.ZERO.negate();
      complex6.ONE.sqrt1z();
      Complex complex8 = complex0.acos();
      complex8.getArgument();
      complex1.log();
      Complex.valueOf((-2635.4490454));
      Complex complex9 = complex6.negate();
      complex6.I.divide(1.1364731788635254);
      complex6.cosh();
      complex6.sqrt1z();
      complex5.getReal();
      complex9.tan();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.NaN.pow(complex1);
      complex0.asin();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1185.8074104);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.multiply(complex1);
      complex3.I.cos();
      Complex complex4 = complex3.INF.negate();
      complex0.NaN.getArgument();
      complex3.multiply(757);
      Complex complex5 = complex2.negate();
      complex4.pow((-2317.685));
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      complex2.ZERO.add(0.0);
      complex0.getField();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(214.1, 1215.3224336238284);
      complex0.cosh();
      Complex complex1 = Complex.ONE;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.exp();
      complex1.sinh();
      complex2.hashCode();
      Complex complex3 = complex2.createComplex(0.0, 1.1593703222523284E-8);
      Complex complex4 = complex3.ZERO.multiply(1);
      List<Complex> list0 = complex3.ZERO.nthRoot(1);
      assertTrue(list0.contains(complex4));
      
      complex1.getField();
      Complex complex5 = complex2.add(complex1);
      Complex complex6 = Complex.valueOf(0.0, Double.NaN);
      Complex complex7 = complex6.sqrt();
      complex4.isNaN();
      Complex complex8 = new Complex(1.1593703222523284E-8);
      complex1.equals(complex8);
      assertFalse(complex8.equals((Object)complex4));
      
      Complex complex9 = complex5.cos();
      Complex complex10 = complex9.NaN.sinh();
      complex7.getReal();
      assertSame(complex6, complex10);
      assertSame(complex7, complex1);
      
      Complex complex11 = complex4.pow((-3123.5933576));
      Complex complex12 = complex2.pow(complex11);
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertNotSame(complex12, complex11);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.ONE.sqrt();
      complex0.NaN.hashCode();
      Complex complex2 = complex0.sqrt();
      complex0.getField();
      complex1.log();
      Complex complex3 = complex2.INF.tanh();
      complex2.ONE.sinh();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.I.subtract(6.283185307179586);
      assertEquals((-6.283185307179586), complex5.getReal(), 0.01);
      assertEquals(1.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.INF.divide(complex6);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      
      Complex complex8 = complex4.ONE.createComplex(3169.382, 6.283185307179586);
      Complex complex9 = complex4.exp();
      assertEquals(4.810477380965351, complex9.getReal(), 0.01);
      
      Complex complex10 = complex2.multiply(0.0);
      complex10.NaN.conjugate();
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      complex8.NaN.subtract(0.0);
      Complex complex11 = Complex.valueOf(0.0, Double.NaN);
      assertSame(complex11, complex3);
      assertNotSame(complex11, complex7);
      
      complex4.abs();
      complex8.getImaginary();
      Complex complex12 = complex1.pow(complex4);
      Complex complex13 = Complex.valueOf(1.5707963267948966, (-93.14));
      complex12.isInfinite();
      complex4.hashCode();
      complex2.multiply(complex8);
      assertEquals(1.1407411119831583, complex2.getImaginary(), 0.01);
      
      Complex complex14 = complex13.add(complex12);
      assertEquals(2.5707963267948966, complex14.getReal(), 0.01);
      
      complex1.sqrt();
      assertFalse(complex1.equals((Object)complex3));
  }
}
