/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:07:11 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1824.20665775), Double.POSITIVE_INFINITY);
      complex0.divide(complex1);
      complex1.multiply(1290);
      complex1.tanh();
      Complex complex2 = complex0.multiply(2.0);
      complex2.ONE.subtract((-458.7350746184997));
      Complex complex3 = Complex.valueOf(1.266589879989624, 6.283185307179586);
      complex3.divide(2.0);
      complex2.multiply(0.05);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 0.0);
      Complex complex2 = complex0.multiply(0.0);
      complex2.nthRoot(1991);
      Complex complex3 = complex2.atan();
      complex2.divide(complex3);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.multiply(1991);
      complex1.tanh();
      complex5.divide(complex3);
      complex0.multiply(1991);
      complex2.pow(complex3);
      complex4.sqrt1z();
      complex4.cos();
      Complex complex6 = Complex.ZERO;
      complex6.multiply(0.08513787388801575);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = (-1784.0);
      Complex complex0 = Complex.valueOf((-1784.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      complex1.I.tan();
      complex1.NaN.cos();
      complex1.ONE.cos();
      complex0.add(complex1);
      Complex complex2 = complex0.subtract(complex1);
      complex1.I.multiply(complex2);
      complex2.I.nthRoot(7);
      try { 
        complex0.nthRoot((-1006));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,006
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.19033591048004966), 2.847653455671381E184);
      Complex complex1 = complex0.reciprocal();
      complex1.abs();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-1.0), 299.748399588);
      complex2.isInfinite();
      complex1.divide(complex2);
      Complex complex3 = Complex.NaN;
      complex0.readResolve();
      complex3.tanh();
      complex1.log();
      complex1.multiply(7);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((double) 3727);
      Complex complex2 = complex1.acos();
      complex2.I.sqrt1z();
      Complex complex3 = Complex.valueOf((double) 3727);
      complex3.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.776104368314602E-8), 2.847653455671381E184);
      Complex complex1 = complex0.reciprocal();
      complex1.sqrt();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-507.3097), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 17;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.ZERO.multiply((double) 17);
      complex0.nthRoot(17);
      Complex complex4 = complex0.multiply(17);
      complex3.pow((-8135.999877089477));
      complex4.ZERO.cos();
      complex2.INF.nthRoot(1333);
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.ZERO.divide((-8135.999877089477));
      complex6.NaN.add((double) 17);
      try { 
        complex5.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.log();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.sin();
      Complex complex1 = Complex.valueOf((-106.261), Double.POSITIVE_INFINITY);
      complex1.ZERO.conjugate();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.ONE.log();
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(complex0);
      complex0.reciprocal();
      complex0.sinh();
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1826.5737102323), 2.169306470354036E242);
      complex0.NaN.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex3.NaN.subtract(complex1);
      complex4.I.hashCode();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.ZERO.exp();
      Complex complex7 = complex5.ONE.tan();
      Complex complex8 = complex7.negate();
      Complex.valueOf(2.169306470354036E242);
      Complex complex9 = complex0.divide((-1826.5737102323));
      complex1.pow(complex9);
      Complex complex10 = complex0.sqrt();
      complex4.ONE.getField();
      complex7.ONE.add((-1.1125366146669075E7));
      complex7.subtract((-1826.5737102323));
      Complex complex11 = complex4.asin();
      complex9.multiply(complex6);
      Complex complex12 = complex11.I.negate();
      complex12.NaN.reciprocal();
      Complex complex13 = complex5.exp();
      Complex complex14 = complex3.subtract(complex0);
      complex14.ZERO.asin();
      complex11.exp();
      complex10.abs();
      complex13.cosh();
      Complex complex15 = complex2.asin();
      complex4.cosh();
      complex8.multiply(972);
      complex1.multiply((double) 972);
      complex15.getField();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-4068));
      Complex complex2 = complex1.log();
      complex1.toString();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(978);
      Complex complex1 = Complex.ONE;
      complex0.readResolve();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.abs();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.NaN;
      complex2.getArgument();
      Complex complex6 = Complex.ONE;
      complex5.readResolve();
      Complex complex7 = complex0.subtract(complex3);
      complex7.equals(complex4);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.nthRoot(6);
      Complex complex2 = complex0.atan();
      complex2.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex0.reciprocal();
      complex5.reciprocal();
      complex0.sqrt();
      Complex.valueOf((-1621.029));
      complex4.add(complex5);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(28.0, Double.NaN);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex3.ZERO.pow(complex0);
      complex3.ZERO.abs();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex(0.0, 0.0);
      complex1.asin();
      complex0.log();
      Complex complex7 = Complex.NaN;
      complex7.getArgument();
      Complex complex8 = Complex.ONE;
      Object object0 = complex8.readResolve();
      ((Complex) object0).ZERO.subtract(complex4);
      complex2.equals(object0);
      complex6.negate();
      complex7.acos();
      complex6.createComplex(0.0, Double.NaN);
      complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3335.4710531901, 3335.4710531901);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex2.getField();
      complex1.conjugate();
      complex0.atan();
      Complex complex3 = Complex.valueOf((-778.589), 238160.4128);
      complex2.isInfinite();
      try { 
        complex3.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-25));
      Complex complex1 = Complex.valueOf(916.29217302, 4695.759234168584);
      complex1.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.subtract(Double.NaN);
      complex0.INF.log();
      complex0.conjugate();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3335.4710531901, 3335.4710531901);
      Complex complex1 = Complex.valueOf((-3738.74677));
      Complex complex2 = Complex.I;
      complex1.getField();
      Complex complex3 = complex1.conjugate();
      complex3.atan();
      Complex complex4 = Complex.valueOf((-4.776104368314602E-8), 2.847653455671381E184);
      complex2.isInfinite();
      complex1.getArgument();
      Complex complex5 = Complex.ONE;
      complex0.readResolve();
      complex4.equals("");
      Complex complex6 = complex2.negate();
      complex6.NaN.conjugate();
      complex6.ZERO.conjugate();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(complex0);
      Complex complex3 = complex1.conjugate();
      complex2.hashCode();
      Complex complex4 = complex0.conjugate();
      complex3.negate();
      complex0.atan();
      complex2.atan();
      complex3.getArgument();
      complex4.atan();
      complex0.tanh();
      Complex.valueOf((-1284.5576908));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cosh();
      Complex complex1 = complex0.multiply(1028);
      complex1.tanh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.valueOf((double) 1028, 907.0287020548958);
      complex4.isInfinite();
      complex0.divide(complex3);
      complex1.reciprocal();
      complex2.tanh();
      Complex complex5 = new Complex(1028, (-474.608721548314));
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.ONE;
      complex3.getArgument();
      Complex complex4 = complex2.atan();
      Complex.valueOf(0.0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.atan();
      complex6.getArgument();
      complex4.cos();
      complex1.atan();
      complex6.tanh();
      complex1.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex0.pow(0.0);
      complex2.reciprocal();
      Complex complex3 = complex0.ONE.conjugate();
      complex3.cos();
      Complex complex4 = complex3.ZERO.pow(complex1);
      complex3.ZERO.abs();
      Complex complex5 = Complex.I;
      complex5.multiply(complex1);
      complex4.getImaginary();
      Complex complex6 = complex0.log();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.asin();
      Complex complex9 = new Complex(Double.NaN, 0.0);
      complex0.getArgument();
      Object object0 = new Object();
      complex5.equals(object0);
      complex6.negate();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex0.pow(0.0);
      complex2.reciprocal();
      Complex complex3 = complex0.ONE.conjugate();
      complex3.cos();
      complex3.ZERO.pow(complex1);
      complex3.ZERO.abs();
      complex0.INF.acos();
      complex1.getImaginary();
      Complex complex4 = new Complex(0.0, 0.0);
      complex2.asin();
      Complex complex5 = complex1.log();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.valueOf(0.0);
      complex5.multiply(complex7);
      complex0.tan();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.cosh();
      complex3.getField();
      complex2.readResolve();
      complex3.multiply(complex4);
      complex0.hashCode();
      complex4.conjugate();
      complex0.negate();
      complex2.getArgument();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.atan();
      Complex.valueOf(Double.NaN);
      Complex complex7 = complex1.atan();
      complex5.getArgument();
      Complex complex8 = Complex.valueOf((-3630.93782), (-3630.93782));
      complex8.cos();
      complex7.atan();
      complex6.tanh();
      complex0.log();
      Complex.valueOf(1810.8750688058426);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      complex0.log();
      Complex complex2 = Complex.valueOf((double) 7, (-4.776104368314602E-8));
      complex0.isInfinite();
      Complex complex3 = complex0.divide(complex1);
      complex2.reciprocal();
      Complex complex4 = Complex.ONE;
      complex4.tanh();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(-0.0);
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.conjugate();
      complex3.hashCode();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex4.negate();
      complex6.getArgument();
      complex0.atan();
      Complex.valueOf(3.141592653589793);
      Complex complex7 = complex3.atan();
      complex4.getArgument();
      Complex complex8 = complex7.cos();
      complex5.atan();
      complex7.tanh();
      complex8.log();
      Complex.valueOf(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3335.4710531901, 3335.4710531901);
      Complex complex1 = complex0.subtract(259.211295629);
      complex0.pow(127.9052);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.pow(complex3);
      complex0.abs();
      complex6.acos();
      complex2.getImaginary();
      Complex complex7 = new Complex(0.0, (-1.6200461280649605E-4));
      complex0.asin();
      complex7.log();
      Complex complex8 = Complex.NaN;
      complex2.getArgument();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.INF;
      complex10.readResolve();
      complex0.equals(complex5);
      complex9.negate();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(345.08, 345.08);
      Complex complex1 = Complex.ZERO;
      complex1.NaN.add(complex0);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.ONE.subtract(345.08);
      complex4.I.pow(complex2);
      Complex complex5 = complex2.sin();
      complex5.INF.sinh();
      complex0.I.toString();
      Complex complex6 = complex0.asin();
      complex6.ZERO.readResolve();
      Complex complex7 = complex0.acos();
      complex7.INF.pow((-1799.8621351));
      Complex complex8 = complex1.cos();
      complex6.sqrt1z();
      Complex complex9 = complex8.createComplex(345.08, 345.08);
      complex9.INF.divide(complex1);
      complex9.NaN.getArgument();
      Complex complex10 = complex8.NaN.subtract(complex0);
      complex10.ONE.exp();
      complex2.ZERO.abs();
      complex3.conjugate();
      complex1.tanh();
      Complex complex11 = complex5.cosh();
      Complex complex12 = Complex.NaN;
      complex11.divide(complex12);
      complex8.tan();
      Complex.valueOf(Double.NaN, 0.0);
      Complex.valueOf(0.0, Double.NaN);
      complex9.tan();
      Complex complex13 = Complex.valueOf(345.08);
      complex3.subtract(complex13);
      try { 
        complex6.nthRoot((-3131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,131
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3656.904, 3656.904);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.add(complex0);
      complex2.conjugate();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.multiply(complex1);
      complex3.getImaginary();
      Complex complex6 = complex5.log();
      complex5.asin();
      Complex complex7 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex((-2948.76845), (-2366.43041300233));
      complex8.getArgument();
      complex6.equals("NORMALIZE_NAN");
      complex7.negate();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      Complex complex1 = complex0.NaN.divide((-425.636));
      complex1.ZERO.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex1.add((-425.636));
      complex2.hashCode();
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex5.divide((-911.82387515));
      complex5.getField();
      Complex complex8 = complex4.cos();
      complex6.nthRoot(443);
      complex6.getField();
      Complex complex9 = Complex.valueOf((double) 443, (double) 443);
      Complex complex10 = complex2.atan();
      complex8.sqrt1z();
      complex7.nthRoot(443);
      complex9.asin();
      complex10.sin();
      complex2.getField();
      complex5.conjugate();
      Complex complex11 = Complex.valueOf(709.9198044930398, 709.9198044930398);
      complex11.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(-0.0);
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.cosh();
      complex0.multiply(complex5);
      complex1.getImaginary();
      Complex complex6 = complex2.log();
      complex6.asin();
      Complex complex7 = new Complex(5.478858662370701E-5, (-474.2503));
      complex5.getArgument();
      complex3.equals(complex2);
      complex0.negate();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3335.4710531901, 3335.4710531901);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.multiply(2131);
      complex3.ONE.getArgument();
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.valueOf(4543.1423569718, (-2395.7845));
      complex1.isInfinite();
      Complex complex6 = Complex.valueOf((-3777.403956616583));
      Complex complex7 = complex2.divide(complex6);
      complex7.reciprocal();
      complex4.negate();
      complex5.tanh();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(647.8686999471697, (-20.0));
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.I;
      complex3.cosh();
      Complex complex4 = complex1.multiply(2572);
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf((-1368.0359715871), (-20.0));
      complex1.isInfinite();
      complex5.divide(complex3);
      complex6.reciprocal();
      complex2.negate();
      Complex complex7 = Complex.valueOf((-20.0), (-1368.0359715871));
      complex7.tanh();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(1028);
      Complex complex3 = complex2.tanh();
      Complex.valueOf(907.0287020548958, 2.2338151931762695);
      complex1.isInfinite();
      complex2.divide(complex3);
      complex3.reciprocal();
      complex1.negate();
      Complex complex4 = complex1.tanh();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.valueOf(2.147483144E9);
      Complex complex2 = complex0.reciprocal();
      complex2.getField();
      complex2.readResolve();
      Complex complex3 = complex2.multiply(complex0);
      complex2.hashCode();
      complex3.conjugate();
      Complex complex4 = complex2.negate();
      complex0.getArgument();
      complex0.atan();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.I.atan();
      complex3.getArgument();
      complex1.cos();
      Complex complex6 = complex2.atan();
      complex6.tanh();
      complex4.log();
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3335.4710531901, 3335.4710531901);
      Complex complex1 = Complex.valueOf((-3738.74677));
      Complex complex2 = Complex.valueOf(3335.4710531901, 2.847653455671381E184);
      complex1.getField();
      Complex complex3 = complex1.conjugate();
      complex3.atan();
      Complex complex4 = Complex.valueOf((-4.776104368314602E-8), 2.847653455671381E184);
      complex2.isInfinite();
      complex4.divide(complex0);
      Complex complex5 = complex4.reciprocal();
      complex1.tanh();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(2181.6257949131, 2181.6257949131);
      complex0.ZERO.exp();
      Complex complex1 = complex0.INF.tan();
      complex1.multiply((-1140));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.add((-2268.08144856594));
      complex0.createComplex((-2518.0), 2181.6257949131);
      Complex complex4 = new Complex((-1629.7926205), 2230.27);
      Complex complex5 = complex4.log();
      Complex complex6 = complex3.subtract(complex1);
      complex6.abs();
      Complex complex7 = new Complex((-1047.2972831523393));
      Complex complex8 = complex7.multiply((-1047.2972831523393));
      complex7.equals(complex6);
      Complex complex9 = complex5.divide(1943.487596409235);
      Complex complex10 = complex9.pow(complex8);
      complex1.tan();
      Complex complex11 = new Complex(1943.487596409235);
      complex11.equals(complex3);
      Complex complex12 = complex11.tanh();
      complex12.add(complex9);
      complex10.multiply((-1.000000000000519));
      Complex complex13 = new Complex((-1047.2972831523393), (-1140));
      complex13.sinh();
      complex2.log();
      complex8.divide(complex10);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(699.885830432439);
      Complex complex1 = new Complex(699.885830432439, 1.000000127115893);
      Complex complex2 = complex1.atan();
      complex2.getField();
      complex0.atan();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf(2514.5109050562, 1654.8089589368549);
      complex4.negate();
      complex3.add(complex1);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.I;
      complex6.readResolve();
      Complex complex7 = complex4.subtract(0.0);
      Complex.valueOf(1.000000127115893);
      complex5.tan();
      complex4.tanh();
      complex7.multiply(0);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-744.70266013));
      Complex complex1 = Complex.valueOf((-744.70266013), (-744.70266013));
      complex1.INF.getField();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.add((-2268.08144856594));
      complex1.createComplex((-2268.08144856594), 1815.198);
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.subtract(complex1);
      complex3.abs();
      Complex complex7 = complex4.multiply((-0.9525902127303727));
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      complex7.divide((-2268.08144856594));
      Complex complex8 = complex6.pow(complex0);
      complex2.tan();
      complex0.equals(complex6);
      Complex complex9 = Complex.valueOf(3103.4577711990037, 2.0);
      complex9.tanh();
      complex0.add(complex2);
      complex8.multiply((-2207.597));
      complex8.sinh();
      complex7.log();
      complex6.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-172.0), (-172.0));
      complex0.nthRoot(2627);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = Complex.NaN;
      complex0.cosh();
      complex2.acos();
      Complex complex5 = complex3.conjugate();
      complex5.tan();
      complex0.multiply(complex1);
      complex5.acos();
      Complex complex6 = Complex.valueOf((-172.0));
      complex6.multiply(1293);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = Complex.valueOf(699.885830432439, 699.885830432439);
      Complex complex3 = complex2.ONE.sqrt1z();
      complex1.isNaN();
      complex2.multiply((-20.0));
      Complex complex4 = complex3.tan();
      complex4.hashCode();
      complex2.negate();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-744.70266013));
      Complex complex1 = Complex.valueOf((-744.70266013), (-744.70266013));
      complex1.INF.getField();
      Complex complex2 = complex0.conjugate();
      Complex.valueOf(1.0143022354947225E63, (-4.776104368314602E-8));
      complex0.isInfinite();
      complex0.divide(complex2);
      Complex complex3 = complex2.reciprocal();
      complex3.I.negate();
      complex0.tanh();
      Complex complex4 = complex1.tanh();
      complex4.ZERO.multiply((-1));
      complex2.multiply(1633);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(2181.6257949131, 2181.6257949131);
      Complex complex1 = complex0.INF.tan();
      complex1.nthRoot(1312);
      Complex complex2 = complex1.NaN.divide(0.01934296265244484);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.divide(complex0);
      complex4.readResolve();
      complex2.add(0.01934296265244484);
      complex5.getImaginary();
      complex4.getReal();
      complex5.nthRoot(1305);
      complex6.hashCode();
      complex3.cos();
      complex3.readResolve();
      complex3.sin();
      Complex complex7 = Complex.valueOf(582.234147438);
      Complex complex8 = complex7.sin();
      Complex complex9 = (Complex)complex5.readResolve();
      complex8.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      // Undeclared exception!
      complex0.nthRoot(1072826908);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(2181.6257949131, 2181.6257949131);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.negate();
      complex2.multiply(complex1);
      complex2.tan();
      complex2.sinh();
      complex2.tanh();
      Complex complex3 = complex2.sin();
      complex3.subtract(2181.6257949131);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1175.5947), (-596.58466));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex((-1175.5947));
      complex0.reciprocal();
      complex2.getField();
      complex0.readResolve();
      Complex complex4 = complex1.multiply(complex0);
      complex1.hashCode();
      Complex complex5 = complex4.conjugate();
      complex4.negate();
      complex4.getArgument();
      complex3.atan();
      Complex complex6 = Complex.valueOf(3659.4879594);
      complex6.getArgument();
      complex5.cos();
      complex3.atan();
      Complex complex7 = complex5.conjugate();
      complex7.tan();
      Complex complex8 = new Complex(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3656.904, 3656.904);
      Complex complex1 = Complex.INF;
      complex0.ONE.multiply(complex1);
      Complex complex2 = Complex.valueOf(3656.904);
      Complex complex3 = complex0.ZERO.reciprocal();
      complex2.INF.getField();
      Complex complex4 = (Complex)complex0.readResolve();
      complex3.atan();
      complex4.readResolve();
      complex1.asin();
      Complex complex5 = new Complex((-829.002374), (-829.002374));
      Complex complex6 = Complex.ZERO;
      complex6.log();
      complex6.multiply(complex5);
      complex2.cos();
      Complex complex7 = Complex.NaN;
      complex7.asin();
      complex1.subtract(complex4);
      complex0.tan();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(2181.6257949131, 2181.6257949131);
      Complex complex1 = Complex.valueOf(2181.6257949131, 2181.6257949131);
      Complex complex2 = complex1.NaN.divide(0.01934296265244484);
      Complex complex3 = complex2.multiply(complex1);
      complex3.hashCode();
      Complex complex4 = complex1.conjugate();
      complex4.atan();
      Complex complex5 = Complex.valueOf((double) 1307);
      complex2.getArgument();
      Complex complex6 = Complex.ONE;
      complex5.atan();
      complex0.conjugate();
      complex1.tan();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.38574057817459106);
      Complex complex1 = complex0.divide((-474.2503));
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.NaN.conjugate();
      complex1.cosh();
      Complex complex4 = complex0.multiply(complex1);
      complex3.readResolve();
      Complex complex5 = complex0.sinh();
      complex4.sqrt();
      Complex.valueOf(0.38574057817459106, 3715.97490541);
      complex4.subtract(complex2);
      complex3.atan();
      complex5.multiply((-474.2503));
      complex5.tanh();
      try { 
        complex2.nthRoot((-2007));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,007
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.ONE.conjugate();
      complex4.cos();
      complex4.ZERO.pow(complex1);
      complex4.ZERO.abs();
      complex0.INF.acos();
      complex1.getImaginary();
      Complex complex5 = new Complex(0.0, 0.0);
      Complex complex6 = complex2.asin();
      complex1.log();
      Complex complex7 = Complex.NaN;
      complex7.getArgument();
      Complex complex8 = Complex.ONE;
      Object object0 = complex8.readResolve();
      complex3.equals(object0);
      complex5.negate();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(95.1241022, (-1205.2924521356783));
      complex0.I.nthRoot(3237);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(1731.21, 1731.21);
      Complex complex1 = complex0.asin();
      complex1.ZERO.exp();
      Complex complex2 = complex1.add(1731.21);
      Complex complex3 = complex2.INF.divide(complex0);
      complex3.atan();
      Complex complex4 = complex3.ZERO.conjugate();
      complex2.NaN.conjugate();
      complex2.cosh();
      complex2.atan();
      complex3.ONE.abs();
      Complex complex5 = complex0.log();
      complex5.negate();
      complex3.log();
      complex4.cos();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 631.152691920889);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex0.ONE.pow(1.6266362950862408E276);
      complex0.acos();
      Complex complex4 = complex3.conjugate();
      complex4.INF.subtract(0.0);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex0.I.acos();
      Complex complex7 = complex6.INF.reciprocal();
      complex3.getReal();
      complex4.getField();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex1.multiply(0.0);
      complex2.toString();
      complex4.sin();
      complex2.ONE.getArgument();
      complex9.tan();
      complex2.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex8.sqrt1z();
      Complex complex10 = complex5.tan();
      complex10.NaN.divide(complex1);
      complex7.getField();
      complex4.subtract(1.6266362950862408E276);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.I.tan();
      complex0.ONE.pow(complex1);
      complex0.hashCode();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.ZERO.pow(0.0);
      complex2.ZERO.cosh();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex4.NaN.sin();
      complex5.INF.sin();
      complex4.ONE.conjugate();
      complex4.ONE.getField();
      complex0.ZERO.hashCode();
      Complex complex6 = complex0.divide(complex2);
      complex3.ONE.reciprocal();
      try { 
        complex6.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-744.70266013));
      Complex complex1 = Complex.valueOf((-744.70266013), (-744.70266013));
      complex1.INF.getField();
      Complex complex2 = complex0.conjugate();
      Complex.valueOf(1.0143022354947225E63, (-4.776104368314602E-8));
      complex0.isInfinite();
      complex0.divide(complex2);
      Complex complex3 = complex2.reciprocal();
      complex3.I.negate();
      complex0.tanh();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.add((-1472.4));
      Complex complex2 = complex0.pow(1768.3676115);
      Complex complex3 = complex0.ZERO.add(0.0);
      complex3.I.abs();
      complex0.multiply((-3118));
      Complex complex4 = complex1.sqrt1z();
      complex4.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex0.readResolve();
      complex2.divide((double) (-3118));
      Complex complex5 = complex0.sqrt1z();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2570.353452));
      complex0.ONE.log();
      complex1.I.createComplex((-1049.092026), 740.2349);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.multiply((-2570.353452));
      Complex complex6 = Complex.ONE;
      complex5.divide(complex6);
      Complex complex7 = complex0.multiply(37);
      Complex complex8 = complex7.ONE.add((-2570.353452));
      complex7.I.conjugate();
      Complex complex9 = Complex.valueOf((-3509.931364524155));
      complex8.pow(complex9);
      complex3.nthRoot(2878);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(0.0);
      complex0.INF.log();
      complex0.ZERO.add(0.0);
      complex0.conjugate();
      complex0.log();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.ONE.conjugate();
      complex4.cos();
      complex4.ZERO.pow(complex1);
      complex4.ZERO.abs();
      Complex complex5 = complex0.INF.acos();
      complex5.ONE.readResolve();
      Complex complex6 = complex1.INF.sinh();
      complex6.ZERO.sqrt();
      Complex.valueOf(0.0, (-1624.6881));
      Complex complex7 = complex3.subtract(complex1);
      complex7.INF.atan();
      Complex complex8 = complex7.multiply(1547.7);
      complex2.tanh();
      try { 
        complex8.nthRoot((-211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -211
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-391.768));
      Complex complex1 = complex0.I.sqrt();
      complex0.getField();
      complex0.sqrt();
      complex1.sqrt();
      complex1.createComplex(0.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-1.2711589287782304E-7), (-1.2711589287782304E-7));
      complex0.ONE.atan();
      complex0.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex1.add(complex0);
      complex4.NaN.reciprocal();
      complex1.readResolve();
      complex1.subtract(0.0);
      Complex complex5 = Complex.valueOf((-1.2711589287782304E-7));
      Complex complex6 = complex3.tan();
      complex6.ZERO.tanh();
      complex2.multiply(0);
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-172.0), (-172.0));
      complex0.nthRoot(2627);
      complex0.isNaN();
      Complex complex1 = complex0.multiply((-172.0));
      Complex complex2 = complex1.NaN.tan();
      complex2.NaN.hashCode();
      complex0.negate();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.subtract(404.0);
      Complex complex4 = complex2.INF.add(complex0);
      complex3.exp();
      Complex complex5 = complex2.ONE.conjugate();
      complex5.NaN.getArgument();
      Complex complex6 = complex0.ZERO.asin();
      Complex complex7 = complex0.ONE.sqrt1z();
      complex0.hashCode();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex8.add(complex6);
      Complex complex10 = complex9.add(complex7);
      Complex complex11 = complex9.I.subtract(0.0);
      complex6.getImaginary();
      Complex complex12 = complex0.INF.exp();
      complex12.sqrt1z();
      complex6.equals((Object) null);
      complex9.conjugate();
      complex6.I.conjugate();
      complex1.ONE.sinh();
      Complex.valueOf(0.0);
      complex1.getArgument();
      Complex complex13 = complex1.add(complex9);
      complex0.getImaginary();
      Complex complex14 = complex10.tanh();
      complex14.ZERO.multiply(complex13);
      complex11.sin();
      complex13.negate();
      Complex.valueOf(0.0, 0.0);
      complex4.reciprocal();
      Complex complex15 = Complex.valueOf((-2480.0));
      complex5.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1781.671), (-1781.671));
      Complex complex1 = complex0.sin();
      complex1.ZERO.sinh();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.tanh();
      complex3.ONE.pow(complex1);
      complex4.ONE.exp();
      Complex complex5 = complex1.acos();
      complex2.divide(complex3);
      complex1.conjugate();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.ONE.log();
      complex2.sqrt();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex2.NaN.multiply(1379);
      complex5.tanh();
      complex4.INF.hashCode();
      complex2.getArgument();
      Complex complex6 = complex0.ZERO.tan();
      Complex complex7 = complex6.I.divide(complex2);
      complex0.readResolve();
      complex2.add(Double.NaN);
      complex1.getImaginary();
      complex7.getReal();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2462.3198028, (-1900.2180956));
      Complex complex1 = Complex.valueOf((-2083.6961764067523));
      Complex complex2 = complex1.tanh();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      Complex complex1 = complex0.NaN.divide((-425.636));
      complex1.ZERO.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex3.multiply(complex1);
      complex1.INF.add((-425.636));
      complex2.hashCode();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex2.INF.divide((-425.636));
      complex0.getField();
      complex5.ZERO.cos();
      complex4.INF.nthRoot(443);
      complex0.getField();
      Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex2.I.atan();
      Complex complex7 = complex2.sqrt1z();
      complex7.nthRoot(443);
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.sin();
      complex6.getField();
      complex9.conjugate();
      complex6.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      complex0.add(complex1);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(1005.1325294609);
      Complex complex2 = Complex.valueOf(975.4685659621294);
      complex2.ONE.sqrt();
      Complex complex3 = complex2.pow(975.4685659621294);
      complex3.ZERO.divide(975.4685659621294);
      Complex complex4 = complex1.atan();
      complex4.multiply(756);
      complex4.NaN.cos();
      Complex complex5 = complex0.cos();
      complex4.ONE.sinh();
      complex4.I.hashCode();
      complex5.NaN.getArgument();
      complex5.INF.getField();
      complex4.ONE.createComplex(1005.1325294609, 1005.1325294609);
      Complex complex6 = complex4.pow((-4.1691464781797555E-8));
      Complex complex7 = complex6.I.sinh();
      try { 
        complex7.ONE.nthRoot((-3050));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,050
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3656.904, 3656.904);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = Complex.valueOf(3656.904);
      complex0.ZERO.reciprocal();
      complex3.INF.getField();
      complex0.readResolve();
      complex0.INF.multiply(complex1);
      complex0.hashCode();
      Complex complex4 = complex0.conjugate();
      complex4.negate();
      complex0.getArgument();
      complex2.atan();
      Complex.valueOf(1119.0);
      complex3.getArgument();
      Complex complex5 = complex4.cos();
      complex5.ONE.atan();
      complex5.conjugate();
      complex4.tan();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-847.503828));
      complex0.getImaginary();
      Complex complex1 = complex0.atan();
      complex1.ONE.hashCode();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex1.cos();
      complex3.ZERO.abs();
      Complex complex4 = complex3.ONE.pow(0.0);
      complex4.ONE.negate();
      complex0.getArgument();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.I.subtract(complex0);
      complex1.INF.abs();
      complex0.ZERO.abs();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.add((-610.0));
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.NaN.abs();
      complex3.NaN.pow(complex5);
      Complex complex6 = complex0.ZERO.add(Double.NaN);
      Complex complex7 = complex6.I.divide(complex3);
      complex6.NaN.exp();
      Complex complex8 = complex7.NaN.multiply((-3958));
      complex6.ZERO.getArgument();
      Complex complex9 = complex0.add(1.0);
      complex9.NaN.cosh();
      complex9.I.pow(0.0);
      complex0.getArgument();
      complex7.INF.subtract(2305.25108316501);
      Complex complex10 = complex5.multiply(1);
      complex2.equals("");
      complex7.atan();
      complex6.INF.tanh();
      complex4.cosh();
      complex8.readResolve();
      complex4.asin();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-293.06729339987), (-1400.21740974062));
      complex0.pow((-293.06729339987));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(406.20119750941, 406.20119750941);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.I.subtract(406.20119750941);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.valueOf(406.20119750941);
      complex5.INF.exp();
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex6.I.log();
      complex7.I.pow(406.20119750941);
      complex2.multiply(complex3);
      complex2.sin();
      Complex complex8 = complex0.ONE.multiply(1729.90567181222);
      complex8.ZERO.divide(complex3);
      Complex.valueOf((-5.8180712702152444E212));
      complex2.conjugate();
      complex4.isInfinite();
      Complex.valueOf(1729.90567181222);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3335.4710531901, 3335.4710531901);
      Complex complex1 = complex0.exp();
      complex0.ONE.cosh();
      Complex complex2 = complex1.ONE.multiply(969);
      Complex complex3 = complex2.ZERO.tanh();
      complex3.INF.add((-2268.08144856594));
      complex2.NaN.createComplex((-2166.6264), (-2440.4348));
      Complex complex4 = complex1.log();
      Complex complex5 = complex1.subtract(complex2);
      complex5.ONE.abs();
      Complex complex6 = complex1.multiply(0.0);
      complex6.equals(complex4);
      complex6.divide(0.0);
      Complex complex7 = complex6.pow(complex4);
      complex7.tan();
      complex4.equals(complex7);
      complex1.tanh();
      complex0.add(complex7);
      complex7.multiply((-2166.6264));
      complex0.sinh();
      Complex complex8 = complex4.log();
      complex7.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex1.I.getField();
      double double0 = 2.2867884635925293;
      complex0.subtract(2.2867884635925293);
      complex0.isInfinite();
      int int0 = (-634);
      try { 
        complex0.nthRoot((-634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -634
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1.4152718164638451E-9));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.INF.subtract(3828.758025);
      complex2.INF.sqrt();
      Complex complex4 = complex2.ZERO.multiply(complex1);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.exp();
      complex6.tanh();
      Complex complex7 = complex5.add(1.0);
      Complex complex8 = complex7.INF.cos();
      complex8.ONE.getArgument();
      Complex complex9 = complex7.I.log();
      complex9.tanh();
      Complex.valueOf(20.0, (-1.4152718164638451E-9));
      complex4.isNaN();
      Complex complex10 = Complex.valueOf(1234.1, 20.0);
      Complex complex11 = complex10.INF.atan();
      complex11.INF.subtract(0.0);
      Complex complex12 = complex5.pow(complex10);
      Complex complex13 = complex12.ZERO.negate();
      complex13.NaN.log();
      complex7.INF.add(complex3);
      complex4.pow(2216.4);
      complex2.negate();
      complex1.createComplex(3828.758025, 0.0);
      Complex complex14 = Complex.valueOf((-877.6626));
      complex9.divide(complex14);
      complex2.add(complex12);
      Complex.valueOf(0.0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(6.283185307179586, 6.283185307179586);
      complex1.ZERO.abs();
      complex0.NaN.pow(6.283185307179586);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.NaN.multiply(826);
      complex0.add(complex1);
      complex2.abs();
      complex0.toString();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.pow(2.144047260284424);
      complex4.atan();
      complex5.cosh();
      complex3.subtract(927.21969);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      complex1.NaN.nthRoot(1);
      complex0.getReal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.INF.divide(complex4);
      complex1.readResolve();
      Complex complex7 = complex4.reciprocal();
      complex1.getReal();
      Complex complex8 = complex1.acos();
      complex8.I.abs();
      complex2.subtract(complex6);
      complex7.multiply(0.0);
      complex3.ZERO.exp();
      Complex complex9 = complex6.multiply(0);
      Complex complex10 = complex6.subtract(complex2);
      Complex complex11 = complex6.cosh();
      complex0.isNaN();
      complex10.toString();
      complex11.divide((double) 1);
      complex0.getArgument();
      complex9.acos();
      Complex complex12 = complex0.multiply(1.9926254749298096);
      complex12.add(1.5430806348152437);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-1719.2340065308965));
      Complex complex1 = complex0.cos();
      complex1.ONE.readResolve();
      try { 
        complex1.I.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.NaN.tan();
      complex4.NaN.divide(complex2);
      Complex complex5 = Complex.valueOf(20.0);
      complex0.multiply(complex3);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex3.I.exp();
      complex7.atan();
      complex6.I.readResolve();
      complex6.ONE.subtract(20.0);
      complex6.isNaN();
      Complex complex8 = Complex.valueOf((-20.0));
      complex5.readResolve();
      complex8.cos();
      complex8.subtract(20.0);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1251);
      complex1.NaN.readResolve();
      Complex complex2 = complex0.cos();
      complex0.ZERO.abs();
      complex1.NaN.readResolve();
      Complex complex3 = complex2.subtract(4945.9754949);
      complex2.ONE.subtract(complex1);
      complex3.INF.readResolve();
      complex3.ZERO.hashCode();
      Complex complex4 = complex2.divide(0.0);
      complex0.getField();
      complex3.getReal();
      complex0.getField();
      complex1.hashCode();
      complex0.multiply(complex1);
      Complex complex5 = complex1.log();
      complex5.sqrt1z();
      complex4.getReal();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(699.885830432439);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.ONE.acos();
      complex2.ONE.sqrt1z();
      Complex.valueOf((-3.060220883766096E-8), (-20.0));
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex6.ZERO.acos();
      complex7.ONE.conjugate();
      complex7.I.tan();
      complex0.multiply(complex5);
      complex5.acos();
      Complex.valueOf((-3.060220883766096E-8));
      complex4.multiply(514);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.createComplex(5.4468361834451975E-9, 5.4468361834451975E-9);
      complex1.toString();
      complex2.cosh();
      complex1.NaN.sqrt();
      Complex.valueOf(5.4468361834451975E-9, 5.4468361834451975E-9);
      complex1.cosh();
      Complex.valueOf((-2689.0));
      complex1.equals(complex2);
      Complex.valueOf((-2900.534911675));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.add((-347.21991051734483));
      complex3.NaN.divide(0.0);
      try { 
        complex3.ZERO.nthRoot((-1311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,311
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(2181.6257949131, 2181.6257949131);
      Complex complex1 = complex0.INF.tan();
      complex1.nthRoot(1312);
      Complex complex2 = complex1.NaN.divide(0.01934296265244484);
      complex1.NaN.atan();
      complex0.readResolve();
      Complex complex3 = complex0.asin();
      Complex complex4 = new Complex(28.0, 2181.6257949131);
      Complex complex5 = complex4.ZERO.sqrt();
      complex4.INF.log();
      complex3.ONE.multiply(complex4);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex4.asin();
      complex5.subtract(complex2);
      complex8.tan();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.multiply(complex0);
      complex2.I.tan();
      Complex complex3 = complex0.sinh();
      complex1.tanh();
      complex3.sin();
      complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex1.INF.multiply(complex5);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ZERO.sin();
      Complex complex9 = complex8.I.pow((-20.0));
      assertEquals(1.224646799147353E-15, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex7.INF.subtract(3249.1676);
      assertTrue(complex10.equals((Object)complex6));
      
      Complex complex11 = complex1.subtract(687.2405691);
      Complex complex12 = complex3.I.negate();
      Complex complex13 = complex12.ZERO.cosh();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      complex4.add((-90.214795260264));
      Complex complex14 = complex3.divide(687.2405691);
      Complex complex15 = complex2.add(687.2405691);
      assertTrue(complex15.equals((Object)complex7));
      
      Complex complex16 = complex3.reciprocal();
      Complex complex17 = complex16.ONE.multiply(0.0);
      complex17.negate();
      assertSame(complex16, complex14);
      
      complex11.readResolve();
      Complex complex18 = complex5.sqrt1z();
      assertEquals(1.8620958891185866, complex18.getReal(), 0.01);
      assertSame(complex4, complex11);
      assertSame(complex1, complex2);
      
      Complex complex19 = Complex.valueOf(0.0, 687.2405691);
      assertEquals(687.2405691, complex19.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(0.38574057817459106);
      Complex complex1 = complex0.divide((-474.2503));
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.multiply(complex1);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      complex0.getImaginary();
      Complex complex6 = complex0.log();
      Complex complex7 = complex4.asin();
      complex6.log();
      double double0 = complex7.getArgument();
      assertEquals((-5.178068567411758E-4), double0, 0.01);
      
      complex6.equals(complex4);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex8 = complex3.negate();
      assertTrue(complex8.isNaN());
      
      Complex complex9 = complex6.tanh();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals((-0.7409534497377515), complex9.getReal(), 0.01);
  }
}
