/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:24:18 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = new Complex(20.0, (-2081.6071766292));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.createComplex(2.055878162384033, 3267.5515849525236);
      Complex complex4 = Complex.valueOf(3267.5515849525236, (-1106.0609));
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.sin();
      complex3.abs();
      Complex.valueOf((-596.6889705));
      Complex complex7 = complex2.multiply(complex6);
      complex1.nthRoot(1);
      Complex complex8 = complex5.reciprocal();
      complex7.tan();
      Complex.valueOf(2.712977886199951);
      complex8.abs();
      complex1.tanh();
      Complex complex9 = Complex.valueOf((-2237.84097439349), 3267.552231711188);
      complex9.nthRoot(1);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.negate();
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = (-1075.316);
      Complex complex0 = Complex.valueOf((-1075.316));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.subtract(complex0);
      int int0 = 1749;
      complex2.ONE.nthRoot(1749);
      Complex complex3 = complex1.pow(complex0);
      complex1.INF.toString();
      Complex complex4 = complex2.ONE.cos();
      complex4.ONE.atan();
      Complex.valueOf(2.3718718327094683E-102, 2737.63204);
      complex3.nthRoot(2962);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex2.multiply(complex0);
      complex6.INF.multiply(1655);
      int int1 = (-1197);
      try { 
        complex5.nthRoot((-1197));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,197
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf((double) 2288);
      Complex complex4 = Complex.valueOf((double) 2288, Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.conjugate();
      complex4.abs();
      complex1.getField();
      Complex complex6 = complex3.subtract((-1920.93));
      Complex complex7 = complex4.multiply((double) (-2237));
      Complex complex8 = complex6.divide((-1781.0));
      complex8.nthRoot(50);
      complex0.subtract(complex2);
      complex5.tanh();
      complex7.sin();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tan();
      complex2.multiply(complex0);
      Complex complex3 = Complex.valueOf(1487.88431112, Double.POSITIVE_INFINITY);
      complex0.conjugate();
      complex2.multiply((-2237));
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.sqrt();
      complex5.tan();
      complex3.pow(1487.88431112);
      complex4.abs();
      complex5.getField();
      complex3.subtract(2.0);
      Complex complex6 = Complex.NaN;
      complex6.divide(Double.POSITIVE_INFINITY);
      try { 
        complex3.nthRoot((-2237));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,237
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.INF.hashCode();
      Complex complex2 = complex0.subtract(6.283185307179586);
      complex2.ONE.log();
      complex2.getField();
      Complex complex3 = complex1.multiply(complex2);
      complex2.I.cosh();
      Complex complex4 = complex1.atan();
      complex4.divide(complex1);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.ONE.multiply(complex0);
      complex6.conjugate();
      Complex complex7 = complex0.multiply(37);
      complex7.INF.sqrt();
      complex3.tan();
      Complex complex8 = complex4.pow((double) 37);
      complex8.INF.abs();
      complex0.getField();
      Complex complex9 = complex7.subtract((-5820.7421011));
      complex2.divide(Double.POSITIVE_INFINITY);
      complex7.nthRoot(1166);
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.INF.hashCode();
      Complex complex2 = complex0.subtract(6.283185307179586);
      complex2.I.getArgument();
      Complex complex3 = complex2.ONE.log();
      complex2.getField();
      Complex complex4 = complex1.multiply(complex2);
      complex2.I.cosh();
      Complex complex5 = complex1.atan();
      complex5.divide(complex1);
      Complex.valueOf(1231538.8780159147);
      Complex complex6 = complex4.ONE.multiply(complex0);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex0.multiply(37);
      complex8.INF.sqrt();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex5.pow((double) 37);
      complex10.I.add(complex9);
      complex10.INF.abs();
      complex3.getField();
      Complex complex11 = complex8.subtract((-5820.7421011));
      complex2.divide(Double.POSITIVE_INFINITY);
      complex6.pow(complex7);
      complex11.pow(complex5);
      complex11.cosh();
      complex3.negate();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex0.getField();
      complex0.sin();
      Complex.valueOf(2.3718718327094683E-102);
      Complex.valueOf(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = new Complex((-323.63535), 1.2628846168518066);
      complex4.nthRoot(1);
      Complex complex5 = complex4.reciprocal();
      complex5.tan();
      Complex complex6 = complex3.sinh();
      complex5.tanh();
      complex6.nthRoot(208);
      Complex complex7 = new Complex(0.0, (-2774.2223587382));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-1452);
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sin();
      Complex complex1 = Complex.valueOf((-28.50865), (-28.50865));
      Complex.valueOf(20.0);
      Complex complex2 = new Complex(742.051065504, (-20.0));
      complex1.multiply(complex2);
      Complex.valueOf((double) 1869);
      Complex complex3 = Complex.ONE;
      complex3.tan();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(972.9, 2.0);
      Complex complex1 = Complex.valueOf(0.0, 1.7396889119023863E293);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex2.INF.multiply(complex1);
      Complex complex5 = complex0.ZERO.asin();
      complex5.NaN.subtract(0.0);
      complex5.abs();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex3.negate();
      complex8.INF.conjugate();
      Complex complex9 = complex5.asin();
      complex9.ONE.pow((-339.5));
      Complex complex10 = complex9.ONE.log();
      Complex complex11 = complex0.createComplex(1.7396889119023863E293, 2.0);
      complex10.add(433.0);
      Complex complex12 = complex3.cos();
      complex12.divide(complex6);
      complex4.pow((-2603.29771235));
      complex11.nthRoot(684);
      complex7.pow(complex12);
      complex9.reciprocal();
      complex3.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4.3418021646459346E167, 785.0);
      Complex complex2 = complex1.negate();
      Complex complex3 = new Complex(4.3418021646459346E167, 4.3418021646459346E167);
      complex0.getField();
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = Complex.valueOf(3267.5515849525236, 20.0);
      Complex complex6 = Complex.valueOf(785.0, 817.11851001);
      complex6.cos();
      Complex complex7 = complex4.sin();
      complex1.abs();
      Complex complex8 = Complex.valueOf(4.3418021646459346E167);
      complex7.multiply(complex0);
      Complex complex9 = new Complex(20.0, 3227.05);
      complex9.nthRoot(1);
      complex2.reciprocal();
      complex5.tan();
      complex2.sinh();
      complex8.tanh();
      complex3.nthRoot(1);
      Complex complex10 = new Complex(1, 0.6144464015960693);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt();
      complex1.getField();
      Complex complex3 = complex0.subtract(complex2);
      double double0 = 817.11851001;
      Complex.valueOf(3267.5515849525236, 1.0);
      Complex complex4 = complex0.cos();
      complex4.sin();
      complex3.abs();
      double double1 = 2.3718718327094683E-102;
      Complex complex5 = Complex.valueOf((-1988.6365443650084));
      Complex complex6 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex5.multiply(complex6);
      complex1.nthRoot(2049870754);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.391824838015402E-9));
      Complex complex1 = complex0.add((-4.391824838015402E-9));
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.NaN.tan();
      complex3.I.sinh();
      complex1.abs();
      complex0.getField();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-5820.7421011));
      Complex complex1 = Complex.valueOf(3.804034213613942E-130, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex2.multiply(37);
      complex2.nthRoot(1);
      complex1.multiply(17);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex1.hashCode();
      complex0.getArgument();
      complex1.equals(complex0);
      Complex complex2 = complex0.reciprocal();
      complex2.multiply((-1267.467));
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.tan();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      complex1.ONE.hashCode();
      complex0.NaN.getArgument();
      Complex complex2 = complex1.multiply(Double.NaN);
      Complex.valueOf((double) 17);
      Complex.valueOf((-554.874282612));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.getReal();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.tan();
      complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.I;
      complex1.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.createComplex((-1375.316630264242), (-1.0));
      complex3.cosh();
      Complex complex8 = Complex.valueOf((-1.0));
      complex8.acos();
      Complex complex9 = complex7.atan();
      Complex complex10 = Complex.INF;
      complex10.reciprocal();
      Complex complex11 = Complex.I;
      Complex complex12 = Complex.NaN;
      Complex complex13 = Complex.I;
      Complex complex14 = Complex.valueOf(Double.NaN, 1438.180088725909);
      complex14.pow(complex5);
      Complex complex15 = new Complex((-1.0));
      complex15.subtract(complex14);
      Complex.valueOf((-6738747.135275127));
      complex9.add(complex7);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      complex1.ONE.hashCode();
      complex0.NaN.getArgument();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.reciprocal();
      complex3.tan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.pow(Double.NaN);
      Complex complex6 = complex5.acos();
      complex6.NaN.hashCode();
      complex3.cosh();
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex0.add(complex7);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1831.6412802, Double.NaN);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.multiply(complex2);
      complex1.NaN.add(complex2);
      complex1.ONE.readResolve();
      complex3.ZERO.cos();
      Complex complex4 = complex1.tan();
      complex4.NaN.subtract(1831.6412802);
      Complex complex5 = complex1.pow((-4438.526235417442));
      complex5.ONE.add(1831.6412802);
      Complex complex6 = Complex.valueOf((-4438.526235417442));
      complex2.ONE.subtract(1831.6412802);
      complex0.cosh();
      Complex complex7 = complex3.multiply(0);
      complex7.NaN.tan();
      Complex complex8 = complex6.sqrt1z();
      complex8.exp();
      complex6.I.cos();
      complex0.reciprocal();
      complex8.pow(complex0);
      complex3.multiply(408.166461429123);
      complex1.acos();
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.pow((-1375.316630264242));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.createComplex(1438.180088725909, (-1740.39467));
      complex2.sinh();
      Complex complex6 = complex2.add((-1375.316630264242));
      complex5.sin();
      Complex complex7 = complex3.createComplex(1875.419563119571, (-1375.316630264242));
      complex4.cosh();
      complex7.cos();
      complex1.nthRoot(917);
      complex4.atan();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.tan();
      complex3.pow((-2220.739));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.createComplex((-1740.39467), (-1037.087785819549));
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.add((-2220.739));
      Complex complex8 = complex4.sin();
      complex5.createComplex((-1740.39467), (-1375.316630264242));
      complex4.cosh();
      complex2.acos();
      complex8.atan();
      Complex complex9 = complex8.multiply(complex7);
      complex9.reciprocal();
      try { 
        complex8.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-2342.8036544592333));
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt();
      complex2.getField();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.cos();
      complex4.sin();
      complex3.multiply(complex1);
      Complex complex5 = Complex.valueOf((-2342.8036544592333), 2207.44712);
      complex5.nthRoot(1);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex7.tanh();
      complex8.I.getField();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.divide(complex0);
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.I;
      Complex complex13 = complex6.pow(complex2);
      complex12.subtract(complex9);
      complex10.multiply((-1111));
      Complex complex14 = Complex.INF;
      complex14.add(complex7);
      complex13.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex.valueOf(20.0);
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.pow(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.tan();
      complex2.nthRoot(1025);
      complex3.ONE.sinh();
      complex1.conjugate();
      complex3.cos();
      complex5.pow((-278.23412256));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = new Complex(4797.46675742736, (-5.7055442971184756E-8));
      Complex complex4 = complex2.multiply(715.759943);
      complex1.add((-0.7273029879115224));
      complex1.subtract(Double.NaN);
      complex3.tanh();
      Complex complex5 = Complex.I;
      complex5.toString();
      complex2.conjugate();
      complex4.conjugate();
      Complex complex6 = Complex.INF;
      complex6.isInfinite();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.34508460760116577);
      complex0.getReal();
      Complex complex2 = complex1.negate();
      complex0.sqrt();
      Complex complex3 = new Complex(0.34508460760116577);
      complex3.getField();
      complex2.subtract(complex1);
      complex0.cos();
      Complex complex4 = new Complex(226.81505746325962, 0.0);
      Complex complex5 = complex4.sin();
      complex5.multiply(complex4);
      int int0 = 1;
      double double0 = 2207.44712;
      Complex.valueOf(618.1372, 618.1372);
      complex4.nthRoot(2131734614);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 0.40741634368896484;
      Complex complex0 = new Complex(0.9127689912020085, 0.40741634368896484);
      complex0.sin();
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(978.2422);
      Complex complex1 = complex0.asin();
      complex1.getImaginary();
      complex1.ONE.toString();
      Complex complex2 = complex1.createComplex((-7.578904206952111), 20.0);
      Complex complex3 = Complex.valueOf((-7.578904206952111));
      complex3.ZERO.pow(complex1);
      complex3.ZERO.readResolve();
      complex0.NaN.reciprocal();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex4.sqrt1z();
      Complex.valueOf(147.299883133266, (-1.0));
      complex7.ZERO.tanh();
      Complex complex8 = Complex.valueOf((-1.0));
      complex4.add(complex1);
      Complex.valueOf(297.4, (-7.578904206952111));
      complex1.atan();
      complex3.sinh();
      complex6.tan();
      complex4.log();
      complex8.conjugate();
      complex3.getField();
      complex6.subtract(complex4);
      Complex.valueOf(2739.96, (-1.0));
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tan();
      complex0.getArgument();
      Complex complex3 = complex2.subtract(0.7853981633974483);
      Complex complex4 = complex2.divide(2791.0);
      Complex complex5 = complex3.multiply(complex1);
      complex2.readResolve();
      complex1.sinh();
      Complex complex6 = Complex.valueOf(20.0);
      complex6.asin();
      Complex complex7 = complex0.conjugate();
      Complex.valueOf(0.0, 647.31539);
      complex7.pow(complex5);
      complex4.multiply((-706));
      Complex complex8 = Complex.valueOf(647.31539);
      complex1.tan();
      Complex complex9 = Complex.ZERO;
      complex9.nthRoot(1326);
      complex0.conjugate();
      complex9.cos();
      complex8.pow(1331.3835535750086);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-2342.8036544592333), (-2342.8036544592333));
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tan();
      complex0.pow((-2342.8036544592333));
      Complex complex3 = Complex.INF;
      complex3.createComplex(2308.84810918135, (-1740.39467));
      Complex complex4 = complex2.sinh();
      Complex complex5 = new Complex((-2342.8036544592333), 2342.5183823);
      complex5.sin();
      Complex complex6 = complex0.multiply(complex3);
      complex6.reciprocal();
      complex3.tan();
      complex0.tanh();
      Complex complex7 = new Complex((-67.7472590907), 2096.7754045710335);
      complex7.multiply((-1120.0150396447));
      Complex complex8 = Complex.ONE;
      complex8.divide(Double.NaN);
      complex4.multiply((-4516));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.ZERO.tan();
      complex3.NaN.getArgument();
      complex2.I.subtract(4797.46675742736);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex4.multiply(complex3);
      complex3.nthRoot(1);
      complex2.reciprocal();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.NaN.conjugate();
      complex8.ZERO.cosh();
      complex5.tanh();
      complex4.nthRoot(1521);
      Complex complex9 = new Complex(647.31539);
      complex9.multiply((double) 1);
      complex2.divide(Double.NaN);
      complex6.multiply(1);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.pow((-20.0));
      Complex complex5 = Complex.INF;
      complex2.createComplex((-1740.39467), 174136.07525322537);
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.add((-1.493269878772608));
      Complex complex8 = complex4.sin();
      complex5.createComplex(1875.419563119571, (-1740.39467));
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex7.atan();
      Complex complex12 = Complex.ZERO;
      complex9.multiply(complex12);
      Complex complex13 = complex5.reciprocal();
      Complex complex14 = complex3.divide(complex5);
      complex7.NaN.atan();
      Complex complex15 = Complex.NaN;
      Complex complex16 = Complex.I;
      complex3.pow(complex0);
      Complex complex17 = complex8.subtract(complex9);
      complex10.add(complex0);
      Complex complex18 = Complex.INF;
      complex9.hashCode();
      complex11.atan();
      complex9.asin();
      complex5.subtract(complex18);
      complex17.multiply(91);
      complex13.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-2342.8036544592333));
      complex0.getReal();
      Complex complex1 = complex0.sqrt1z();
      complex1.toString();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.exp();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.cos();
      complex4.ZERO.subtract((-2161.0));
      Complex complex6 = complex3.createComplex(1.557407724654902, 1.976868146639626E196);
      complex6.ONE.cosh();
      Complex complex7 = complex0.tan();
      complex2.multiply(37);
      complex7.isInfinite();
      complex4.asin();
      complex5.atan();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-679.18263));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(37);
      Complex complex3 = Complex.valueOf((double) 37, (-590.0));
      complex3.atan();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex3.asin();
      Complex complex4 = new Complex(37, (-590.0));
      complex4.NaN.multiply(37);
      Complex complex5 = Complex.NaN;
      complex2.equals(complex5);
      complex0.pow((-2541.559292759));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6480542736638855);
      complex0.NaN.getField();
      complex0.ZERO.sin();
      Complex complex1 = complex0.INF.divide(0.6480542736638855);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf(0.6480542736638855);
      complex0.pow(complex3);
      Complex complex4 = complex2.add(310.0);
      complex4.NaN.hashCode();
      complex4.getField();
      Complex complex5 = complex1.pow(0.6480542736638855);
      complex2.INF.sinh();
      complex1.abs();
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = Complex.INF;
      complex6.ZERO.divide(complex7);
      Complex complex8 = complex5.multiply(310.0);
      Complex complex9 = complex1.acos();
      Complex complex10 = complex3.exp();
      Complex complex11 = complex10.INF.multiply((-3768));
      complex11.ONE.getArgument();
      complex3.negate();
      complex8.sinh();
      complex9.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.subtract(1363.661215554871);
      Complex complex12 = complex9.add(complex8);
      Complex complex13 = Complex.valueOf(310.0);
      complex3.readResolve();
      complex1.cosh();
      complex8.acos();
      complex0.atan();
      complex13.divide(complex12);
      complex12.cosh();
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.sqrt();
      complex1.getField();
      Complex.valueOf(0.0);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.createComplex((-20.0), 0.0);
      Complex complex8 = complex5.sinh();
      complex4.getArgument();
      ComplexField complexField0 = complex7.getField();
      complex3.readResolve();
      complex1.equals(complexField0);
      complex8.acos();
      Complex complex9 = complex6.conjugate();
      complex8.add((-3.141592653589793));
      Complex complex10 = Complex.INF;
      complex10.sqrt();
      complex8.subtract((-4025.0));
      complex9.multiply(2048801371);
      complex0.sqrt1z();
      complex3.subtract(5488728.963347538);
      Complex complex11 = new Complex(0.00971824862062931, 870.8241721);
      complex11.add((-4025.0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.tanh();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.tan();
      complex2.NaN.getArgument();
      Complex complex3 = complex1.I.subtract(4797.46675742736);
      Complex complex4 = complex3.NaN.divide(647.31539);
      Complex complex5 = complex0.I.multiply(complex4);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex6 = complex3.add(complex0);
      complex6.I.divide(complex4);
      complex5.ONE.cosh();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.ONE.cos();
      Complex complex9 = complex7.NaN.multiply(2343.52348);
      Complex complex10 = complex9.ZERO.add(1249.3201822773447);
      complex8.I.subtract((-1316.24508));
      complex3.tanh();
      complex10.toString();
      complex5.conjugate();
      Complex complex11 = new Complex((-269.736251503918), Double.NaN);
      complex11.conjugate();
      complex5.isInfinite();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.tanh();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.tan();
      complex2.NaN.getArgument();
      Complex complex3 = complex1.I.subtract(4797.46675742736);
      Complex complex4 = complex3.NaN.divide(647.31539);
      Complex complex5 = complex0.I.multiply(complex4);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex6 = complex3.add(complex0);
      complex6.I.divide(complex4);
      complex5.ONE.cosh();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.ONE.cos();
      Complex complex9 = complex7.NaN.multiply(2343.52348);
      complex9.ZERO.add(1249.3201822773447);
      complex8.I.subtract((-1316.24508));
      complex3.tanh();
      complex4.I.toString();
      Complex complex10 = new Complex(Double.NaN);
      complex5.conjugate();
      complex8.pow(647.31539);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2342.8036544592333));
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.pow((-1375.316630264242));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.createComplex(2308.84810918135, (-1740.39467));
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex2.add((-1375.316630264242));
      complex5.sin();
      complex3.createComplex(1875.419563119571, (-1375.316630264242));
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex7.acos();
      complex9.I.atan();
      Complex complex10 = complex0.multiply(complex1);
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex7.divide(complex4);
      Complex complex13 = Complex.NaN;
      Complex complex14 = Complex.I;
      complex14.pow(complex13);
      complex4.subtract(complex8);
      Complex complex15 = complex12.add(complex1);
      Complex complex16 = Complex.INF;
      complex16.hashCode();
      complex13.atan();
      complex1.asin();
      complex6.subtract(complex15);
      complex11.multiply(581);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.ZERO.tan();
      complex3.NaN.getArgument();
      Complex complex4 = complex2.I.subtract(4797.46675742736);
      Complex complex5 = complex4.NaN.divide(647.31539);
      Complex complex6 = complex0.I.multiply(complex5);
      Complex complex7 = (Complex)complex0.readResolve();
      complex2.sinh();
      Complex.valueOf(Double.NaN);
      complex4.asin();
      complex6.conjugate();
      double double0 = 1.3647976072949433E-7;
      Complex complex8 = Complex.valueOf(1.3647976072949433E-7, 1.043905258178711);
      complex8.pow(complex7);
      Complex complex9 = complex4.multiply((-706));
      Complex.valueOf((-601.6541411755942));
      complex9.tan();
      try { 
        complex1.nthRoot((-507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -507
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-792.9560907), (-792.9560907));
      Complex complex1 = complex0.negate();
      complex0.getArgument();
      Complex complex2 = complex1.sqrt();
      complex0.getField();
      double double0 = (-1.5705878834522098);
      Complex complex3 = Complex.valueOf((-2.356194490192345), (-1.5705878834522098));
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex2.cos();
      Complex complex6 = new Complex(5507.364889393456);
      complex6.sin();
      Complex complex7 = complex0.multiply(complex3);
      complex5.nthRoot(7);
      complex7.reciprocal();
      complex0.tan();
      Complex complex8 = complex4.tanh();
      try { 
        complex8.nthRoot((-1096));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,096
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(1.4667462996896319);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.pow(1506.190077);
      Complex complex5 = complex1.createComplex(20.0, (-2110.0618242));
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex0.add((-1740.39467));
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.sin();
      Complex complex10 = new Complex((-1230.004277));
      Complex complex11 = complex10.createComplex(4.1688668231074923E-4, 7.05874338229857);
      Complex complex12 = complex9.cosh();
      Complex complex13 = complex4.acos();
      complex7.multiply(complex9);
      complex3.reciprocal();
      complex2.divide(complex13);
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex0.pow(complex3);
      complex1.subtract(complex8);
      complex15.add(complex11);
      complex12.hashCode();
      complex1.atan();
      complex6.asin();
      complex5.subtract(complex12);
      complex13.multiply(4508);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.sqrt();
      complex1.getField();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.I.cos();
      complex4.ZERO.sin();
      Complex complex5 = complex3.ONE.multiply(complex1);
      complex1.nthRoot(1);
      Complex complex6 = complex1.reciprocal();
      complex3.tan();
      complex0.tanh();
      Complex complex7 = complex5.add(0.0);
      Complex complex8 = complex6.subtract((-799.8));
      complex8.ONE.multiply(1);
      Complex complex9 = new Complex(1249.3201822773447);
      Complex complex10 = complex9.tanh();
      complex10.toString();
      complex6.conjugate();
      complex9.conjugate();
      complex7.isInfinite();
      Complex complex11 = Complex.ONE;
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 860.381920364);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.divide((-1182.9759187909));
      complex0.I.getField();
      complex2.I.multiply(1418);
      Complex complex3 = complex2.atan();
      complex3.I.getField();
      complex0.INF.getField();
      complex0.multiply(complex1);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.divide(complex4);
      complex5.isInfinite();
      complex3.log();
      complex4.equals("");
      complex4.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-792.9560907), (-792.9560907));
      Complex complex1 = complex0.ZERO.multiply((-792.9560907));
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ONE.tan();
      complex4.I.pow((-792.9560907));
      complex3.createComplex((-1740.39467), (-792.9560907));
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ONE.add((-1230.004277));
      Complex complex7 = complex4.INF.sin();
      Complex complex8 = complex6.ZERO.createComplex((-1230.004277), (-1230.004277));
      complex5.cosh();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex4.I.multiply(complex5);
      Complex complex11 = complex9.ZERO.reciprocal();
      Complex complex12 = complex4.NaN.divide(complex6);
      Complex complex13 = Complex.NaN;
      complex9.I.pow(complex13);
      Object object0 = new Object();
      complex8.equals(object0);
      complex7.multiply(complex11);
      Complex complex14 = Complex.ZERO;
      complex14.acos();
      complex2.acos();
      complex12.subtract((-0.7273029879115224));
      complex4.divide(complex10);
      Complex complex15 = Complex.valueOf(56.36091254, (-0.7273029879115224));
      complex15.cos();
      complex5.abs();
      complex6.multiply(complex1);
      Complex complex16 = Complex.valueOf((-1.0422166724310955E-4), 1940.0);
      complex4.add(complex16);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(507.771862471);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.cosh();
      complex2.ONE.abs();
      Complex complex3 = complex2.pow(464.70787902);
      complex1.I.nthRoot(1);
      Complex complex4 = complex3.ONE.acos();
      complex4.NaN.nthRoot(27);
      complex2.getReal();
      Complex complex5 = complex0.ONE.exp();
      Complex complex6 = complex4.ZERO.sqrt();
      complex5.ONE.getField();
      complex6.INF.cosh();
      complex2.abs();
      Complex complex7 = complex1.cosh();
      complex3.tanh();
      Complex complex8 = complex7.subtract(complex1);
      complex4.reciprocal();
      Complex complex9 = complex4.INF.multiply(complex8);
      Complex complex10 = complex9.INF.add(516.55);
      Complex complex11 = complex0.sin();
      Complex complex12 = complex11.multiply(complex7);
      Complex complex13 = Complex.INF;
      Complex complex14 = complex4.subtract(complex13);
      complex6.add(complex14);
      complex3.hashCode();
      Complex complex15 = complex11.atan();
      complex14.asin();
      complex12.subtract(complex10);
      complex15.multiply(4214);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.tanh();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.tan();
      complex2.NaN.getArgument();
      Complex complex3 = complex1.I.subtract(4797.46675742736);
      Complex complex4 = complex3.asin();
      complex1.conjugate();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = Complex.I;
      complex8.reciprocal();
      complex4.asin();
      complex2.getArgument();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, 4797.46675742736);
      Complex complex11 = complex10.multiply(934);
      complex9.acos();
      Complex.valueOf(2.1076716069929933E-95, Double.POSITIVE_INFINITY);
      Complex complex12 = complex4.reciprocal();
      complex4.log();
      complex11.subtract(0.0);
      Complex complex13 = complex7.cos();
      complex8.add(complex3);
      complex4.nthRoot(626);
      complex5.add(complex13);
      complex11.acos();
      Complex.valueOf(4.780892502168074E-25, 4797.46675742736);
      complex12.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
      Complex complex1 = complex0.add(0.0);
      complex0.getImaginary();
      Complex complex2 = complex0.negate();
      complex2.I.sinh();
      Complex complex3 = complex2.log();
      complex3.toString();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5545.775948205, 5545.775948205);
      Complex complex1 = Complex.ZERO;
      complex0.I.multiply(complex1);
      complex0.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.asin();
      complex3.multiply(5545.775948205);
      complex1.INF.exp();
      Complex complex4 = complex1.sqrt1z();
      complex1.NaN.log();
      complex4.getReal();
      Complex complex5 = complex2.sin();
      complex2.tan();
      complex5.toString();
      complex2.isInfinite();
      complex1.hashCode();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.14650559425354, Double.NaN);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.I.getArgument();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.I.multiply(1.14650559425354);
      complex4.ZERO.createComplex(Double.NaN, 2.4611679969129262E-8);
      Complex.valueOf((-20.0), (-1674.6561));
      complex4.INF.getField();
      complex1.ONE.add(Double.NaN);
      complex1.ONE.getArgument();
      Complex complex5 = complex1.I.sinh();
      Complex complex6 = complex0.tan();
      complex6.asin();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex5.conjugate();
      complex5.hashCode();
      complex3.multiply(792);
      Complex complex9 = complex8.subtract(1348.03265918);
      complex9.I.add(complex1);
      complex2.ONE.subtract(0.0);
      complex9.INF.conjugate();
      complex7.ONE.sinh();
      Complex complex10 = complex7.atan();
      complex10.hashCode();
      Complex complex11 = complex10.NaN.cosh();
      complex7.sin();
      complex3.isNaN();
      complex1.subtract(1348.03265918);
      complex11.negate();
      Complex.valueOf(Double.NaN, (-296.3));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(417.297346329);
      Complex complex1 = complex0.tanh();
      complex1.INF.tan();
      Complex complex2 = complex1.cos();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.INF.getArgument();
      complex1.ONE.add(0.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex3.INF.add(complex1);
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Complex.valueOf(0.0);
      complex5.sinh();
      Complex.valueOf(0.7853981633974483);
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex1.divide(0.0);
      complex7.add(0.0);
      complex6.atan();
      Complex complex8 = complex0.multiply(0);
      Complex complex9 = complex5.multiply(7);
      complex9.ONE.hashCode();
      complex4.subtract(complex8);
      complex4.divide(complex8);
      complex3.pow(complex7);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.ZERO.reciprocal();
      complex3.ZERO.log();
      Complex complex4 = complex2.ZERO.pow((-2264.07576515758));
      complex3.sqrt1z();
      complex0.getImaginary();
      complex2.equals(complex0);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex1.sqrt();
      complex6.log();
      Complex complex7 = complex1.I.acos();
      Complex complex8 = Complex.valueOf((-2264.07576515758), 0.0);
      Complex complex9 = Complex.ZERO;
      complex8.pow(complex9);
      complex8.toString();
      complex7.ONE.subtract(complex8);
      complex5.readResolve();
      complex2.nthRoot(1);
      complex1.exp();
      Complex complex10 = Complex.valueOf((-2264.07576515758));
      complex4.sinh();
      complex6.sin();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.asin();
      complex1.sin();
      Complex complex3 = complex2.NaN.multiply(0);
      Complex complex4 = complex3.INF.multiply(complex0);
      complex4.INF.conjugate();
      Complex complex5 = complex1.divide((double) 0);
      complex5.INF.sqrt();
      complex0.getReal();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.I.negate();
      complex8.tanh();
      complex8.INF.cos();
      Complex complex9 = complex0.asin();
      complex9.ONE.exp();
      complex1.add(complex2);
      complex9.getField();
      Complex complex10 = complex9.multiply(Double.NaN);
      complex1.subtract(complex7);
      complex10.I.conjugate();
      complex9.equals(complex10);
      complex4.subtract(complex10);
      complex7.getArgument();
      complex7.acos();
      Complex.valueOf((double) 0);
      complex0.negate();
      Complex complex11 = complex0.negate();
      complex0.tan();
      complex0.sqrt1z();
      complex6.sqrt();
      complex11.abs();
      complex3.subtract(133.9096730514);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 860.381920364);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.divide((-1182.9759187909));
      complex0.I.getField();
      complex2.I.multiply(1418);
      Complex complex3 = complex2.atan();
      complex3.I.getField();
      complex0.multiply(complex1);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.divide(complex4);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ZERO.nthRoot(673);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.multiply((-1260));
      complex2.hashCode();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.I.cos();
      Complex.valueOf(0.0);
      Complex complex5 = complex0.createComplex(0.0, (-276.1392378103));
      complex5.INF.readResolve();
      complex5.I.conjugate();
      complex0.NaN.getField();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.INF.reciprocal();
      complex7.ZERO.pow(0.0);
      complex4.negate();
      Complex complex8 = complex6.conjugate();
      complex8.ONE.multiply((-1260));
      complex8.INF.sqrt();
      complex8.getReal();
      complex8.getReal();
      complex2.cosh();
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(116.82708);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.I.multiply(1.6861720085144043);
      Complex complex3 = complex1.multiply(218);
      complex2.INF.tan();
      complex3.nthRoot(218);
      Complex complex4 = complex3.I.multiply(1.6861720085144043);
      complex2.ONE.nthRoot(218);
      Complex complex5 = complex2.ONE.subtract(0.0);
      Complex complex6 = complex2.I.multiply(116.82708);
      Complex complex7 = complex0.pow(116.82708);
      complex7.I.getArgument();
      complex5.INF.sqrt();
      complex7.ZERO.tanh();
      Complex complex8 = complex7.cosh();
      complex8.NaN.readResolve();
      complex8.I.pow(20.0);
      Complex complex9 = complex2.multiply(1.6861720085144043);
      complex9.hashCode();
      Complex complex10 = complex9.pow(116.82708);
      complex0.ONE.sin();
      Object object0 = new Object();
      complex10.equals(object0);
      complex4.conjugate();
      complex5.getField();
      Complex complex11 = complex6.sin();
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
      Complex complex1 = complex0.pow(0.0);
      complex1.NaN.abs();
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.createComplex(0.0, 2361.215);
      Complex complex3 = complex2.ONE.subtract(0.0);
      complex3.ZERO.sin();
      complex3.I.multiply(314);
      complex2.readResolve();
      complex2.I.multiply((-1827.322151));
      complex1.abs();
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex1.I.add((-1827.322151));
      complex5.I.log();
      Complex complex6 = complex1.pow(2361.215);
      Complex complex7 = complex6.I.cos();
      complex2.getReal();
      complex0.abs();
      complex7.toString();
      complex0.INF.tanh();
      complex0.I.acos();
      Complex complex8 = Complex.valueOf((-485.0), 2.0);
      Complex complex9 = complex0.log();
      complex8.sqrt1z();
      complex4.multiply(0);
      complex9.getImaginary();
      complex8.add(complex7);
      complex7.acos();
      complex9.add(837.0594963);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf((-1055.16225));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double double0 = (-73.9);
      Complex complex0 = Complex.valueOf((-73.9), 0.0);
      complex0.NaN.multiply((-73.9));
      Complex complex1 = complex0.conjugate();
      complex0.I.createComplex(0.0, (-73.9));
      complex1.I.readResolve();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.subtract(complex1);
      complex3.INF.toString();
      Complex complex4 = complex3.sinh();
      complex2.INF.pow(complex1);
      complex2.INF.asin();
      complex4.INF.conjugate();
      Complex complex5 = complex4.pow(complex0);
      complex5.multiply(371);
      Complex.valueOf(778.0);
      complex2.tan();
      try { 
        complex1.ONE.nthRoot((-551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -551
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.5968599319458008);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex1.tan();
      complex4.NaN.getArgument();
      complex2.ONE.createComplex(Double.NaN, 0.0);
      complex4.equals(complex1);
      Complex complex5 = complex1.I.acos();
      Complex complex6 = complex5.ZERO.cos();
      complex1.getField();
      Complex complex7 = complex6.I.subtract(complex4);
      Complex complex8 = complex2.NaN.conjugate();
      Complex complex9 = complex1.I.add(complex4);
      complex2.subtract(0.5968599319458008);
      complex1.getArgument();
      Complex complex10 = complex1.sqrt();
      complex6.INF.abs();
      Complex complex11 = complex6.ONE.acos();
      complex10.ZERO.add(Double.NaN);
      complex11.ONE.abs();
      complex10.INF.cos();
      complex10.I.tanh();
      Complex complex12 = complex1.cos();
      Object object0 = new Object();
      complex6.equals(object0);
      complex2.atan();
      Complex complex13 = complex9.log();
      complex13.ONE.multiply((-1862));
      complex8.nthRoot(429);
      complex12.conjugate();
      complex3.toString();
      complex0.isInfinite();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.tanh();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.tan();
      complex2.NaN.getArgument();
      Complex complex3 = complex1.I.subtract(4797.46675742736);
      Complex complex4 = complex3.NaN.divide(647.31539);
      Complex complex5 = complex0.I.multiply(complex4);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex6.I.divide(complex4);
      Complex complex8 = complex5.ONE.cosh();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex9.NaN.multiply(2343.52348);
      complex11.ZERO.add(1249.3201822773447);
      complex10.I.subtract((-1316.24508));
      complex3.tanh();
      complex4.I.toString();
      complex7.conjugate();
      Complex complex12 = complex5.conjugate();
      complex8.isInfinite();
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double double0 = (-170.39084);
      Complex complex0 = Complex.valueOf((-170.39084));
      Complex complex1 = Complex.valueOf((-1.930436269002062E-8));
      Complex complex2 = complex1.I.cos();
      complex2.sqrt();
      Complex complex3 = complex0.acos();
      complex0.ZERO.pow(complex1);
      try { 
        complex3.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1135.4082483082);
      Complex complex1 = complex0.cosh();
      complex1.NaN.pow((-670.7590604984));
      complex0.isInfinite();
      Complex complex2 = complex0.divide(complex1);
      complex2.INF.sinh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex0.divide(complex1);
      complex2.getField();
      complex2.sqrt();
      complex3.NaN.toString();
      complex0.multiply(384.0186080947372);
      complex1.subtract(complex0);
      complex4.atan();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.ONE.getArgument();
      complex1.readResolve();
      Complex complex2 = complex1.ZERO.multiply((-1.0));
      complex0.ONE.hashCode();
      Complex complex3 = complex1.createComplex((-1.0), 6.283185307179586);
      Complex complex4 = complex2.I.cos();
      complex4.NaN.subtract(complex3);
      complex3.divide(20.0);
      complex0.readResolve();
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex1.cos();
      complex3.cos();
      complex2.subtract((-1.0));
      complex3.getField();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex3.reciprocal();
      complex10.ZERO.add(Double.POSITIVE_INFINITY);
      Complex complex11 = complex3.multiply((-596));
      complex3.sinh();
      Complex complex12 = complex9.conjugate();
      Complex complex13 = complex12.acos();
      complex8.sqrt();
      complex11.hashCode();
      complex2.negate();
      Complex complex14 = complex3.sqrt();
      complex14.abs();
      complex13.sinh();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.cosh();
      Complex complex1 = complex0.NaN.subtract(2.2638862982382794E248);
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex4.I.divide(2.2638862982382794E248);
      complex0.sinh();
      Complex complex7 = complex2.sinh();
      complex7.I.getField();
      Complex complex8 = complex1.exp();
      complex8.INF.multiply(0.0);
      complex7.ONE.divide((-2512.94454814));
      complex1.getReal();
      complex0.getField();
      complex2.pow(2.2638862982382794E248);
      complex2.divide(complex6);
      Complex complex9 = complex3.cos();
      complex9.ZERO.add(complex5);
      complex5.conjugate();
      Complex.valueOf(0.0, (-975.531615948));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1299.1871565262, (-1046.95));
      Complex complex1 = Complex.valueOf((-1046.95), 1299.1871565262);
      complex1.ONE.sqrt1z();
      Complex complex2 = complex0.I.add(complex1);
      complex2.ONE.multiply(1299.1871565262);
      Complex complex3 = complex2.INF.atan();
      complex2.ONE.exp();
      Complex.valueOf(1299.1871565262);
      complex0.readResolve();
      complex0.ZERO.subtract(complex2);
      complex3.ZERO.cosh();
      Complex complex4 = complex0.multiply((-1046.95));
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex complex6 = complex4.sqrt();
      complex4.cosh();
      complex5.asin();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.I.add(1613.369525915113);
      complex2.INF.divide((-898.111));
      complex2.isInfinite();
      Complex complex4 = complex1.cosh();
      complex4.INF.add((-451.3891979364221));
      complex3.pow(1613.369525915113);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(507.771862471);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.cosh();
      complex2.ONE.abs();
      Complex complex3 = complex2.pow(464.70787902);
      complex1.I.nthRoot(1);
      Complex complex4 = complex3.ONE.acos();
      complex4.NaN.nthRoot(27);
      complex2.getReal();
      Complex complex5 = complex0.ONE.exp();
      Complex complex6 = complex4.ZERO.sqrt();
      complex5.ONE.getField();
      complex2.abs();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex7.subtract(complex1);
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = complex4.INF.multiply(complex9);
      complex11.INF.add(516.55);
      Complex complex12 = complex0.sin();
      complex12.multiply(complex7);
      complex8.equals(complex7);
      complex6.multiply(complex8);
      Complex complex13 = complex2.acos();
      complex6.ZERO.acos();
      complex8.subtract(464.70787902);
      complex6.divide(complex13);
      complex3.cos();
      complex1.abs();
      complex1.multiply(complex10);
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.tan();
      complex3.getArgument();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex3.I.add(complex2);
      Complex complex6 = complex4.sqrt1z();
      complex6.ONE.multiply(161);
      complex0.I.log();
      Complex complex7 = complex3.sinh();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex2.negate();
      Complex complex10 = complex9.negate();
      complex10.ONE.sinh();
      Complex complex11 = Complex.valueOf((-1670.0));
      Complex complex12 = complex11.NaN.pow(Double.NaN);
      complex3.NaN.sqrt();
      Complex complex13 = complex7.I.subtract(complex9);
      complex13.conjugate();
      Complex complex14 = complex0.I.subtract(0.0);
      complex3.isNaN();
      complex3.readResolve();
      complex2.add(complex7);
      complex14.hashCode();
      complex5.cos();
      Complex complex15 = complex1.acos();
      complex8.add(complex15);
      Complex complex16 = complex4.negate();
      Complex complex17 = complex12.asin();
      complex16.multiply(complex17);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 224.089836868243);
      complex0.ONE.divide(complex1);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.NaN.subtract(complex0);
      complex3.sqrt1z();
      complex0.ZERO.hashCode();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.I.subtract(complex4);
      Complex complex6 = complex0.sqrt();
      complex5.NaN.asin();
      complex0.isNaN();
      complex6.getReal();
      complex5.multiply(0.0);
      complex0.hashCode();
      complex3.multiply(568);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex1.ZERO.conjugate();
      complex0.ONE.multiply(complex1);
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex3.INF.multiply(1);
      complex0.I.hashCode();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex0.INF.cos();
      complex7.sqrt1z();
      Complex complex8 = complex5.NaN.reciprocal();
      complex8.NaN.asin();
      complex6.NaN.getArgument();
      complex4.ZERO.sqrt();
      Complex complex9 = complex5.multiply(934);
      Complex complex10 = complex9.acos();
      Complex.valueOf(Double.NaN, 4.780892502168074E-25);
      complex9.reciprocal();
      Complex complex11 = complex0.log();
      complex6.subtract(4.780892502168074E-25);
      Complex complex12 = complex4.cos();
      complex12.add(complex10);
      complex7.nthRoot(626);
      complex0.add(complex12);
      complex0.acos();
      Complex complex13 = Complex.valueOf((-26.2448025504), 2.02598237991333);
      complex11.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-2342.8036544592333));
      complex0.getReal();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex2.I.subtract(662.1973963554344);
      complex3.ONE.multiply(complex0);
      double double0 = 0.0;
      complex2.I.pow(0.0);
      Complex complex4 = complex1.pow(662.1973963554344);
      complex4.add(complex0);
      Complex complex5 = complex1.log();
      complex5.INF.subtract((-870.195891));
      try { 
        complex5.nthRoot((-1815));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,815
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(362.0);
      Complex complex1 = Complex.NaN;
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.I.multiply(complex1);
      complex2.ONE.negate();
      Complex complex3 = complex1.NaN.subtract(362.0);
      complex1.pow(complex3);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.pow(362.0);
      complex5.ONE.nthRoot(1737);
      complex4.pow(complex1);
      Complex complex6 = complex1.add(362.0);
      complex1.INF.abs();
      complex6.toString();
      complex3.acos();
      complex5.isInfinite();
      Complex complex7 = complex2.tan();
      complex7.NaN.negate();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.ONE.atan();
      complex3.NaN.toString();
      complex1.INF.asin();
      Complex complex4 = complex0.sin();
      try { 
        complex4.ZERO.nthRoot((-3615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,615
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      complex2.ZERO.nthRoot(1);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.NaN.add(complex1);
      complex1.abs();
      complex1.hashCode();
      complex2.abs();
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex3.add(2029.0);
      complex6.ZERO.cos();
      Complex complex7 = complex4.sqrt1z();
      complex7.INF.divide(1.4142135623730951);
      complex1.cosh();
      complex3.log();
      Complex complex8 = complex1.conjugate();
      complex8.abs();
      complex8.ONE.toString();
      Complex.valueOf((double) 1);
      Complex complex9 = Complex.valueOf(582.6, 1.0);
      Complex complex10 = complex2.negate();
      complex10.reciprocal();
      Complex complex11 = complex4.divide((double) 1);
      Complex complex12 = complex11.ZERO.multiply(complex9);
      Complex.valueOf(1.4142135623730951);
      complex9.pow(0.0);
      complex10.divide(2.1076716069929933E-95);
      complex12.cosh();
      complex2.tanh();
      Complex complex13 = Complex.valueOf(Double.NaN, (-270.026210706506));
      complex5.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ZERO.multiply(1);
      complex1.INF.divide((double) 1);
      complex1.ONE.add((-2.529950530235105E-8));
      Complex complex3 = new Complex((-2546.306227045615));
      complex2.divide(complex3);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.negate();
      complex5.ONE.log();
      complex3.isNaN();
      complex4.getReal();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-792.9560907), (-792.9560907));
      Complex complex1 = complex0.ZERO.multiply((-792.9560907));
      complex1.NaN.tanh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.I.pow(1506.190077);
      Complex complex5 = complex2.createComplex((-1740.39467), (-792.9560907));
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.ONE.add((-1230.004277));
      complex3.INF.sin();
      complex7.ZERO.createComplex((-1230.004277), (-1230.004277));
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex0.acos();
      complex3.I.multiply(complex6);
      Complex complex10 = complex9.ZERO.reciprocal();
      complex3.NaN.divide(complex7);
      Complex complex11 = Complex.NaN;
      complex9.I.pow(complex11);
      complex5.subtract(complex1);
      complex9.add(complex3);
      complex1.hashCode();
      complex8.atan();
      Complex complex12 = complex6.asin();
      complex12.I.subtract(complex4);
      complex10.multiply(581);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.pow(0.0);
      complex0.I.getField();
      Complex complex2 = complex0.add(0.0);
      Complex.valueOf(7.232201430620959E-8);
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex3.I.sinh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex0.INF.createComplex(0.0, (-20.0));
      complex6.ZERO.sinh();
      complex4.INF.getArgument();
      complex3.getField();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex complex7 = complex3.acos();
      Complex complex8 = complex7.conjugate();
      complex3.add(0.0);
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex9.NaN.subtract(0.7853981633974483);
      complex10.ONE.multiply((-46));
      complex5.sqrt1z();
      complex5.subtract(7.232201430620959E-8);
      complex5.add(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-2697.7977806));
      complex0.multiply((-812));
      complex0.isInfinite();
      complex0.I.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.ZERO.conjugate();
      complex3.ONE.add((-2697.7977806));
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.I.multiply((-2697.7977806));
      complex0.ZERO.nthRoot(1);
      complex4.readResolve();
      complex0.isInfinite();
      complex0.sqrt1z();
      complex5.ZERO.pow((-1674.9));
      Complex complex6 = complex0.divide(complex4);
      complex6.NaN.subtract((-679.7146469));
      Complex complex7 = complex4.createComplex(1, 0.6573580503463745);
      Complex.valueOf((-834.0));
      complex7.tanh();
      complex5.sin();
      Complex.valueOf((-1971.78));
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.toString();
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      Complex complex3 = complex1.ONE.subtract(8.098545495417704E274);
      complex0.getImaginary();
      complex3.getField();
      Complex complex4 = complex3.divide(398.7333543998);
      Complex complex5 = complex4.cos();
      complex5.NaN.subtract(complex3);
      complex0.ONE.pow(398.7333543998);
      complex4.NaN.pow(2.4240442814945802E83);
      Complex complex6 = Complex.NaN;
      Complex.valueOf(0.0);
      complex0.ZERO.divide(complex6);
      Complex complex7 = new Complex((-2407.9747338436));
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex1.pow(0.0);
      complex9.ONE.acos();
      complex2.divide(complex1);
      Complex complex10 = complex8.tanh();
      complex10.INF.log();
      try { 
        complex4.I.nthRoot((-640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -640
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getImaginary();
      Complex complex1 = Complex.ONE;
      complex1.I.getField();
      complex1.hashCode();
      complex0.add(complex1);
      Complex complex2 = complex1.pow(complex0);
      complex2.log();
      complex0.readResolve();
      complex1.cos();
      complex0.divide(0.0);
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-381.5135616));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.subtract(complex0);
      assertTrue(complex2.isInfinite());
      
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex0.NaN.add(complex1);
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex4.ONE.sqrt();
      String string0 = complex0.toString();
      assertEquals("(-381.5135616, 0.0)", string0);
      
      complex3.ONE.getField();
      complex1.getField();
      complex0.getArgument();
      Complex complex7 = complex3.multiply(3.141592653589793);
      Complex complex8 = complex7.I.reciprocal();
      Complex complex9 = complex8.sqrt();
      assertEquals((-0.7071067811865475), complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex4.ZERO.asin();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex0.multiply((-4112.59893));
      complex11.ONE.multiply((-885.235115));
      Complex complex12 = complex5.divide(3.141592653589793);
      complex12.I.log();
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      assertEquals(0.3183098861837907, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      
      Complex complex13 = complex8.divide(complex0);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex6));
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(381.51225102834775, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex13.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex5));
      assertEquals(3.141592653589793, complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.I.sqrt();
      complex1.INF.negate();
      complex2.ONE.toString();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex0.exp();
      complex4.exp();
      complex2.reciprocal();
      Complex complex5 = complex0.subtract(complex2);
      complex5.INF.createComplex((-5518.9), (-5518.9));
      complex5.getArgument();
      complex1.cos();
      complex1.isInfinite();
      Complex complex6 = complex3.reciprocal();
      complex4.add(complex6);
      complex1.ZERO.conjugate();
      Complex complex7 = complex5.add(0.7853981633974483);
      try { 
        complex7.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex1 = complex0.sin();
      complex1.hashCode();
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.sqrt();
      complex1.getField();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.I.cos();
      complex4.ZERO.sin();
      complex3.ONE.multiply(complex1);
      int int0 = 1;
      complex1.nthRoot(1);
      Complex complex5 = complex1.reciprocal();
      complex3.tan();
      complex0.tanh();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
