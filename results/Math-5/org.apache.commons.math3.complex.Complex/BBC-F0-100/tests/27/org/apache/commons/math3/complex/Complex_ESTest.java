/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:25:30 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.5514886814233806E203));
      Complex complex2 = complex1.divide((-110.297027083));
      Complex complex3 = complex1.pow(1399.8126400705);
      Complex complex4 = complex1.sin();
      complex4.tan();
      complex2.multiply(complex1);
      complex3.getField();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt1z();
      complex2.tan();
      Complex complex3 = complex2.divide(20.0);
      complex3.multiply(complex1);
      Complex complex4 = complex3.tan();
      complex4.getArgument();
      Complex complex5 = new Complex((-1.0), (-20.0));
      complex5.tan();
      Complex complex6 = Complex.I;
      complex6.INF.getField();
      Complex complex7 = Complex.valueOf(20.0, (-5.253258132241335E-8));
      complex0.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4582.828103542289), (-4582.828103542289));
      complex0.asin();
      Complex complex1 = new Complex(26.869074806, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1574.233, 1574.233);
      complex0.ONE.tanh();
      Complex complex1 = Complex.valueOf(1574.233, Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.divide((-20.0));
      complex1.INF.hashCode();
      complex0.ZERO.abs();
      Complex complex2 = complex0.createComplex((-20.0), (-15.41));
      Complex complex3 = complex2.I.sinh();
      complex0.NaN.subtract(complex1);
      Complex complex4 = complex2.negate();
      complex2.sin();
      Complex complex5 = complex2.I.add((-15.41));
      complex3.add(0.0);
      Complex complex6 = complex3.pow(0.0);
      Complex complex7 = complex6.sin();
      complex3.getField();
      complex1.log();
      complex1.cos();
      complex5.log();
      complex4.tanh();
      complex7.subtract((-4.200462685323402E7));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.pow(2932.9993884973237);
      complex3.cos();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(0.3982778787612915, Double.NaN);
      complex0.ONE.negate();
      Complex.valueOf(0.3982778787612915, 800.0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4569.1436), (-4569.1436));
      Complex complex1 = complex0.asin();
      complex1.hashCode();
      complex1.ONE.sqrt();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.multiply(Double.NaN);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      complex0.NaN.pow(complex1);
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = new Complex(0.0);
      complex4.asin();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-517.7041989132779));
      complex0.tan();
      Complex complex2 = complex0.subtract((-8.18804507680012E74));
      Complex.valueOf(571.0933335, 571.0933335);
      complex2.acos();
      complex2.nthRoot(1829);
      complex1.divide(complex0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.INF.conjugate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.divide((-480.60568895666125));
      complex4.INF.reciprocal();
      complex4.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = Complex.valueOf((-33.75859008514275), 0.0);
      complex3.NaN.add(complex2);
      Complex complex4 = complex0.divide(Double.NaN);
      complex4.pow((-33.75859008514275));
      complex1.cos();
      complex4.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 2.2036094805348692E-9);
      Complex complex2 = Complex.valueOf(2.2036094805348692E-9, 20.0);
      complex0.sqrt();
      complex0.asin();
      Complex complex3 = Complex.NaN;
      complex0.log();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      complex0.nthRoot(1007);
      Complex complex1 = complex0.divide((-482.13));
      Complex complex2 = complex1.pow((-482.13));
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex3.pow(Double.POSITIVE_INFINITY);
      complex2.ZERO.nthRoot(124);
      complex2.multiply((-2573.570255));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(1574.233, 1574.233);
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex((-692.50689), Double.POSITIVE_INFINITY);
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(1582.218903654899);
      Complex complex1 = Complex.NaN;
      complex1.equals(complex0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.valueOf(2930.8, 2555.7989147329117);
      complex3.add(Double.NaN);
      complex2.abs();
      Complex complex4 = Complex.INF;
      complex4.tanh();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(1574.233, 1574.233);
      Complex complex1 = Complex.valueOf(1574.233, Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1110.13726271), (-1110.13726271));
      Complex complex1 = new Complex((-1110.13726271), 1.3134287685114547E204);
      Complex complex2 = complex0.NaN.sqrt();
      complex1.INF.getField();
      complex2.INF.abs();
      complex0.equals(complex1);
      Complex complex3 = complex2.createComplex((-1110.13726271), 1.3134287685114547E204);
      complex3.INF.getField();
      Complex complex4 = complex0.tan();
      complex0.NaN.tanh();
      Complex complex5 = complex2.multiply((-20.0));
      complex5.negate();
      complex1.toString();
      complex4.divide(complex5);
      Complex.valueOf((-1110.13726271));
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.3540347218513489);
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf((-232.03674531), (-232.03674531));
      Complex complex4 = complex3.multiply(complex1);
      complex4.acos();
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.cosh();
      complex6.createComplex(1083.4, Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.exp();
      Complex complex9 = complex0.add(complex7);
      complex8.readResolve();
      complex0.sqrt1z();
      complex6.subtract(2.0);
      complex9.divide(2.3744537810969657);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.I.readResolve();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.cosh();
      Complex complex2 = complex0.createComplex((-2182.24434614), (-20.0));
      complex0.exp();
      Complex complex3 = complex1.add(complex2);
      complex3.readResolve();
      complex1.sqrt1z();
      complex2.subtract(1262.99);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.INF.multiply(6.283185307179586);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex3.multiply(complex4);
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex5.INF.subtract(complex1);
      complex4.divide(Double.POSITIVE_INFINITY);
      complex5.cosh();
      complex6.createComplex(1083.4, (-4671.0));
      complex6.exp();
      Complex complex9 = complex7.add(complex3);
      complex9.INF.readResolve();
      complex5.sqrt1z();
      complex8.subtract(1262.99);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1690.934, Double.POSITIVE_INFINITY);
      complex1.conjugate();
      complex1.multiply(107);
      Complex complex2 = Complex.ZERO;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-595.455425), 1574.233);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sqrt();
      complex3.readResolve();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.add(1574.233);
      complex2.atan();
      complex0.abs();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4043786616805493E-54);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(1574.233, 1574.233);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(107);
      complex2.exp();
      Complex complex3 = Complex.ZERO;
      complex1.conjugate();
      complex2.createComplex(107, 657.398078791);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1574.233);
      Complex complex1 = Complex.NaN;
      complex1.equals(complex0);
      Complex complex2 = complex1.sqrt();
      complex1.abs();
      Complex.valueOf(Double.NaN);
      complex2.add(1574.233);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.createComplex((-20.0), 2.432550290565648E-8);
      complex2.INF.hashCode();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.log();
      complex1.I.multiply((-20.0));
      Complex complex5 = Complex.valueOf(0.6280876398086548, (-5.763495903609913E-231));
      complex4.pow(complex5);
      Complex complex6 = complex4.I.cos();
      complex6.NaN.subtract(complex1);
      complex6.sin();
      Complex complex7 = Complex.valueOf((-20.0));
      complex1.abs();
      complex7.toString();
      Complex complex8 = Complex.valueOf(0.6639155149459839, 273.4645597144644);
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex9.ZERO.multiply(1288);
      complex7.getReal();
      Complex complex11 = complex5.createComplex(1833.94, 0.6280876398086548);
      complex11.add(complex10);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = complex0.add(1277.899653);
      complex1.INF.toString();
      Complex complex2 = complex0.multiply(2145827367);
      Complex complex3 = complex2.sqrt();
      complex0.readResolve();
      complex3.add((-1.3824992526093461E-8));
      complex0.atan();
      complex3.abs();
      complex3.tanh();
      complex2.divide(complex3);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-20.0));
      complex1.ZERO.toString();
      complex1.ZERO.getArgument();
      complex0.abs();
      Complex complex2 = Complex.ONE;
      complex1.multiply(1980);
      Complex complex3 = Complex.valueOf((-20.0), (double) 1980);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.divide(complex4);
      complex5.readResolve();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = 1137.2224;
      Complex complex0 = new Complex(1574.233, 1137.2224);
      Complex complex1 = Complex.NaN;
      complex1.isInfinite();
      complex1.abs();
      Complex complex2 = new Complex(Double.NaN);
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.ZERO;
      complex3.tan();
      Complex.valueOf(Double.NaN, (-2343.243));
      try { 
        complex0.nthRoot((-1099));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,099
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(1574.233);
      Complex complex1 = Complex.NaN;
      complex1.equals(complex0);
      Complex complex2 = complex1.sqrt();
      complex1.abs();
      Complex.valueOf(2555.7989147329117, Double.NaN);
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.NaN;
      complex3.tan();
      Complex.valueOf((-1103.1297294799826), (-2343.243));
      try { 
        complex2.nthRoot((-1099));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,099
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = Complex.ONE;
      complex1.equals(complex2);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.sqrt();
      complex4.abs();
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      complex5.asin();
      complex1.reciprocal();
      Complex complex7 = Complex.ONE;
      complex7.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.12211392819881439);
      complex2.nthRoot(186);
      complex6.multiply(complex3);
      Complex complex8 = Complex.I;
      complex8.divide(complex3);
      Complex complex9 = complex8.reciprocal();
      complex9.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex1.divide((-867.6987150072));
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex0.pow(complex1);
      complex5.ONE.add(complex3);
      complex5.INF.divide(0.0);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.ONE.divide((-867.6987150072));
      complex6.NaN.hashCode();
      complex4.readResolve();
      complex1.cos();
      complex7.multiply(complex4);
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.2591702832450833E7);
      Complex complex1 = Complex.ONE;
      complex1.toString();
      Complex complex2 = Complex.valueOf(1277.899653, (-3180.285));
      Complex complex3 = Complex.ONE;
      complex3.getField();
      Complex complex4 = complex0.subtract(2.2591702832450833E7);
      complex4.divide(complex0);
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = new Complex(0.195302888546214);
      complex2.log();
      complex5.sin();
      complex0.getField();
      Complex complex7 = new Complex(884.8988794584);
      complex7.sin();
      complex0.getField();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(2.1388855055770415E-7);
      Complex complex1 = complex0.sqrt1z();
      complex1.I.add(757.11093541);
      Complex complex2 = Complex.INF;
      complex2.ZERO.createComplex((-1164931.4951845454), 2.1388855055770415E-7);
      Complex complex3 = complex2.sqrt();
      complex2.abs();
      Complex complex4 = Complex.valueOf((-4256.395186868534), Double.POSITIVE_INFINITY);
      complex4.reciprocal();
      Complex complex5 = complex0.tan();
      Complex.valueOf(544.0, 0.592);
      complex3.nthRoot(156);
      Complex complex6 = complex2.multiply(complex4);
      complex6.readResolve();
      Complex complex7 = complex3.divide(complex1);
      complex7.reciprocal();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide((-867.6987150072));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = Complex.NaN;
      Complex.valueOf((-1.3824992526093461E-8), 0.0);
      Complex complex6 = complex1.divide((-1.3824992526093461E-8));
      complex5.hashCode();
      complex5.abs();
      complex0.multiply((-876));
      complex6.divide(complex0);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex4.asin();
      complex2.conjugate();
      complex0.createComplex((-1.4300075619643524E-298), (-1.0));
      complex4.isNaN();
      Complex complex9 = complex7.multiply((-876));
      complex9.tanh();
      complex0.reciprocal();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.equals(complex0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sqrt();
      complex0.abs();
      Complex complex3 = complex2.sin();
      complex0.pow(complex3);
      complex1.asin();
      Complex complex4 = complex1.multiply((-2147483647));
      complex2.isNaN();
      Complex complex5 = complex1.divide(complex2);
      Complex.valueOf((-3004.5463));
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex5.add(complex1);
      Complex complex6 = complex2.multiply(complex4);
      Complex complex7 = Complex.I;
      complex7.reciprocal();
      complex6.add(2651.8228);
      Complex complex8 = complex4.atan();
      complex3.abs();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-20.0));
      complex1.ZERO.toString();
      complex1.ZERO.getArgument();
      complex0.abs();
      Complex complex2 = complex0.I.exp();
      complex2.divide(complex1);
      complex2.INF.add(complex0);
      complex0.nthRoot(1327);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.28);
      complex0.equals(complex1);
      Complex complex2 = complex0.sqrt1z();
      complex0.sqrt();
      complex1.abs();
      complex2.asin();
      Complex complex3 = Complex.valueOf(6.283185307179586, 2.0);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.tan();
      complex4.log();
      Complex.valueOf(0.7071067811865475, 584.0);
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.2316346168518066);
      Complex complex1 = new Complex(1200.8455207644236, 2.2316346168518066);
      complex1.equals(complex0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.sqrt();
      complex2.abs();
      Complex complex4 = Complex.valueOf(1200.8455207644236, 526.400484);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex5.tan();
      complex5.NaN.log();
      Complex.valueOf(0.0, 20.0);
      complex1.nthRoot(186);
      complex5.multiply(complex3);
      complex6.divide(complex0);
      complex7.reciprocal();
      complex3.subtract((double) 186);
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3363.8097581987), (-3363.8097581987));
      complex0.ONE.abs();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sinh();
      complex1.NaN.acos();
      complex2.NaN.readResolve();
      Complex complex3 = Complex.valueOf((-3363.8097581987));
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.ZERO.sin();
      complex5.I.pow(complex6);
      Complex complex7 = complex3.asin();
      complex7.ZERO.multiply(527);
      complex1.isNaN();
      Complex complex8 = complex0.divide(complex2);
      Complex complex9 = complex8.NaN.multiply((-1579.3487962709737));
      complex8.ONE.add(complex3);
      Complex complex10 = complex2.multiply(complex8);
      complex2.reciprocal();
      Complex complex11 = new Complex((-2425.5432191874));
      complex7.log();
      complex9.sin();
      complex10.getField();
      complex7.sin();
      complex7.getField();
      complex11.toString();
      complex3.divide(complex2);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(1574.233, 1574.233);
      complex0.conjugate();
      Complex complex1 = complex0.multiply(107);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = (Complex)complex2.readResolve();
      complex0.getArgument();
      complex3.cos();
      complex1.isNaN();
      Complex complex4 = Complex.NaN;
      complex4.toString();
      Complex complex5 = Complex.valueOf((-2279.6120716043656));
      complex5.negate();
      complex1.multiply(107);
      complex1.pow(complex0);
      complex3.isInfinite();
      Complex complex6 = complex3.sqrt();
      complex6.cos();
      complex2.getReal();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3363.8097581987), (-3363.8097581987));
      complex0.ONE.abs();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sinh();
      complex1.NaN.acos();
      complex2.NaN.readResolve();
      Complex complex3 = Complex.valueOf((-3363.8097581987));
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.ZERO.sin();
      complex5.I.pow(complex6);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.ZERO.multiply(527);
      complex1.isNaN();
      Complex complex9 = complex0.divide(complex2);
      complex9.NaN.multiply((-1579.3487962709737));
      Complex complex10 = complex9.ONE.add(complex3);
      complex2.multiply(complex9);
      complex2.reciprocal();
      Complex complex11 = complex2.add(2.1705221445447534E-29);
      complex11.atan();
      complex10.abs();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = complex0.add(1277.899653);
      complex1.INF.toString();
      Complex complex2 = Complex.valueOf(1277.899653, 1.1765332726757802E-8);
      complex1.getField();
      Complex complex3 = complex1.subtract(1277.899653);
      complex3.divide(complex2);
      complex2.subtract(complex0);
      Complex complex4 = new Complex(1.1765332726757802E-8);
      Complex complex5 = complex3.log();
      complex3.sin();
      complex3.reciprocal();
      Complex complex6 = complex0.log();
      complex2.multiply(complex5);
      complex1.log();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(2.2316346168518066);
      Complex complex1 = complex0.acos();
      complex0.readResolve();
      Complex complex2 = Complex.valueOf((-7.184550924856607E-8));
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex3.multiply(527);
      Complex complex9 = Complex.valueOf((-3036.557), (-7.184550924856607E-8));
      complex9.isNaN();
      Complex complex10 = new Complex(1276.45846389);
      complex0.divide(complex10);
      complex3.multiply((-3036.557));
      complex3.add(complex9);
      complex8.multiply(complex0);
      Complex complex11 = complex7.reciprocal();
      complex0.getArgument();
      Complex complex12 = complex3.cos();
      complex10.isNaN();
      complex12.toString();
      Complex complex13 = new Complex(4.3750396394525074E48);
      complex13.negate();
      complex2.multiply(527);
      Complex complex14 = Complex.NaN;
      complex5.pow(complex14);
      complex9.isInfinite();
      complex6.sqrt();
      complex11.cos();
      complex4.getReal();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3363.8097581987), (-3363.8097581987));
      complex0.ONE.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      complex0.equals(complex1);
      Complex complex3 = complex2.sqrt1z();
      complex0.INF.pow((-3363.8097581987));
      complex3.sqrt();
      complex0.abs();
      complex2.asin();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.valueOf(2.2638862982382794E248, 2.2638862982382794E248);
      complex6.nthRoot(1761);
      complex5.log();
      complex1.isNaN();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex1.ZERO.subtract(0.0);
      complex3.INF.asin();
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex5.log();
      complex8.I.pow(complex3);
      Complex complex9 = complex4.add(0.0);
      Complex complex10 = new Complex(0.0);
      complex10.ZERO.pow((-2325.0));
      complex10.cos();
      Complex complex11 = complex6.divide((-2325.0));
      complex7.reciprocal();
      Complex complex12 = complex2.log();
      complex12.multiply(complex11);
      complex7.log();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      complex0.NaN.multiply(2261.6932819956);
      Complex complex2 = complex1.I.add(940.6638472);
      complex2.I.cos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex4.ONE.multiply(2261.6932819956);
      Complex complex6 = Complex.valueOf(0.0, 756.18);
      complex6.I.sqrt();
      Complex complex7 = complex6.subtract(complex0);
      complex1.log();
      complex7.add((-2325.0));
      Complex complex8 = complex1.cos();
      complex8.createComplex(Double.NaN, 8.619946556331352E-4);
      complex3.isNaN();
      complex2.multiply(37);
      complex2.tanh();
      complex5.reciprocal();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.add((-468.2549457844));
      Complex complex3 = Complex.valueOf(0.0);
      complex3.NaN.add(complex0);
      complex1.ZERO.cos();
      Complex complex4 = complex0.asin();
      complex3.ONE.add(complex2);
      Complex complex5 = Complex.valueOf((-468.2549457844));
      complex5.ZERO.multiply(1144);
      complex5.INF.tan();
      Complex complex6 = complex0.log();
      complex3.getField();
      Complex complex7 = complex6.log();
      complex0.I.subtract(complex1);
      complex4.NaN.pow(0.0);
      complex7.INF.subtract((-1.0));
      Complex complex8 = complex5.atan();
      complex8.NaN.multiply(complex4);
      Complex complex9 = complex4.multiply(1);
      Complex complex10 = complex9.NaN.add(complex7);
      Complex complex11 = complex10.NaN.createComplex(6.283185307179586, 6.283185307179586);
      complex11.multiply(6.283185307179586);
      complex7.cosh();
      complex8.pow((double) 1);
      complex0.sin();
      complex9.reciprocal();
      complex11.createComplex(6.283185307179586, (-1247.569476));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.5862, 2.2316346168518066);
      Complex complex1 = new Complex(1377.5862, 2.2316346168518066);
      Complex complex2 = complex0.acos();
      complex0.sqrt1z();
      Complex complex3 = complex0.subtract(complex1);
      complex1.multiply(2534);
      complex3.reciprocal();
      complex3.atan();
      complex1.hashCode();
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex(2.2316346168518066);
      complex1.multiply(2534);
      complex2.add(complex4);
      complex2.sin();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2082.37), (-1.0));
      Complex complex1 = new Complex((-2082.37), 104.95012358829);
      complex1.readResolve();
      Complex complex2 = Complex.valueOf((-2082.37));
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex4.pow(complex2);
      complex0.asin();
      complex6.multiply(527);
      complex2.isNaN();
      Complex complex7 = complex5.divide(complex2);
      Complex complex8 = complex3.multiply((-1579.3487962709737));
      Complex complex9 = complex5.add(complex6);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex5.multiply(complex10);
      Complex complex12 = complex9.tan();
      Complex complex13 = Complex.ZERO;
      complex13.reciprocal();
      complex2.getArgument();
      Complex complex14 = complex8.cos();
      complex1.isNaN();
      complex3.toString();
      Complex complex15 = complex14.negate();
      complex15.multiply((-3652));
      complex7.pow(complex12);
      complex7.isInfinite();
      complex7.sqrt();
      complex14.cos();
      Complex complex16 = Complex.ONE;
      complex16.getReal();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3363.8097581987), (-3363.8097581987));
      complex0.ONE.abs();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex2.pow(2361.280997921);
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex1.pow(complex6);
      Complex complex8 = complex6.subtract((-2203.0));
      complex3.isInfinite();
      complex6.isInfinite();
      Complex complex9 = complex0.subtract(8.619946556331352E-4);
      complex9.tan();
      complex5.isNaN();
      Complex complex10 = complex5.conjugate();
      complex8.sqrt();
      Complex complex11 = complex9.multiply((-2203.0));
      complex1.cos();
      complex10.getField();
      Complex complex12 = complex2.multiply((-1.0));
      complex0.hashCode();
      complex4.createComplex(8.619946556331352E-4, 0.8813735870195428);
      complex1.isNaN();
      complex11.multiply((-756));
      complex7.tanh();
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.5862, 2.2316346168518066);
      complex0.equals(complex0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.I.sqrt();
      complex0.abs();
      Complex complex3 = complex2.I.asin();
      complex0.reciprocal();
      complex0.tan();
      Complex.valueOf(1377.588007578283, 2.2316346168518066);
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.divide((-1451.614));
      complex0.reciprocal();
      complex2.log();
      complex4.multiply(complex1);
      complex0.log();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.ZERO.sinh();
      complex4.ZERO.createComplex(1.5811884868243975E-11, 0.0);
      complex1.NaN.cosh();
      Complex complex5 = Complex.ZERO;
      complex2.I.nthRoot(1587);
      complex0.isInfinite();
      complex2.reciprocal();
      Complex complex6 = Complex.NaN;
      complex6.tan();
      Complex complex7 = Complex.valueOf((-3545.6793243), 0.0);
      complex3.nthRoot(1587);
      Complex complex8 = Complex.ZERO;
      complex7.multiply(complex8);
      complex2.divide(complex6);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-1.3824992526093461E-8), (-1.3824992526093461E-8));
      Complex complex1 = complex0.add(1277.899653);
      complex1.INF.toString();
      Complex complex2 = Complex.valueOf(1277.899653, 1.1765332726757802E-8);
      complex1.getField();
      Complex complex3 = complex1.subtract(1277.899653);
      Complex complex4 = complex3.divide(complex2);
      complex2.subtract(complex0);
      complex2.multiply(0.0);
      Complex complex5 = complex3.log();
      complex3.sin();
      complex4.getField();
      Complex complex6 = complex5.sin();
      complex6.getField();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.5862, 2.2316346168518066);
      Complex complex1 = new Complex(1377.5862, 2.2316346168518066);
      complex0.equals(complex1);
      Complex complex2 = complex1.INF.sqrt1z();
      complex1.I.sqrt();
      Complex complex3 = Complex.valueOf(1377.5862, (-2449.111370916));
      Complex complex4 = Complex.valueOf(1377.5862, 2.2316346168518066);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex3.subtract(complex0);
      complex2.log();
      Complex complex7 = complex5.add(1377.5862);
      Complex complex8 = complex7.cos();
      complex5.divide(756.18);
      complex7.reciprocal();
      complex6.log();
      complex4.multiply(complex8);
      complex1.log();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2082.37), (-1.0));
      Complex complex1 = new Complex((-2082.37), 104.95012358829);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.pow(2361.280997921);
      Complex complex4 = complex0.I.pow(complex2);
      complex4.NaN.pow(complex3);
      Complex complex5 = complex3.ONE.subtract(104.95012358829);
      complex0.isInfinite();
      complex3.isInfinite();
      complex1.ONE.subtract(2361.280997921);
      complex0.tan();
      complex0.isNaN();
      complex3.conjugate();
      complex0.NaN.sinh();
      Complex complex6 = complex2.ZERO.sqrt();
      Complex complex7 = complex2.multiply(104.95012358829);
      complex7.cos();
      complex5.getField();
      Complex complex8 = complex6.multiply(1.2145042419433594);
      complex8.INF.hashCode();
      Complex complex9 = complex2.createComplex(1.2145042419433594, (-1.0));
      complex7.isNaN();
      complex3.multiply((-756));
      Complex complex10 = complex9.tanh();
      complex10.reciprocal();
      complex10.conjugate();
      complex9.multiply(complex6);
      Complex.valueOf((-523.0), 1.2145042419433594);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(2.2316346168518066, 2082.37);
      Complex complex2 = new Complex(2.2316346168518066, 2.2316346168518066);
      Complex complex3 = Complex.valueOf(Double.NaN, 0.0);
      complex2.equals(complex3);
      Complex complex4 = complex1.sqrt1z();
      complex4.sqrt();
      complex0.abs();
      complex4.asin();
      Complex complex5 = new Complex(0.9999946871981196, 2082.37);
      complex5.reciprocal();
      complex1.tan();
      Complex.valueOf(2.2316346168518066, 0.8414709848078965);
      int int0 = 2146683123;
      // Undeclared exception!
      complex1.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(1574.233, 1574.233);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(107);
      Complex complex3 = Complex.valueOf((-20.0), 1574.233);
      complex2.sqrt();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex2.log();
      complex0.add((-590.842867419));
      complex2.cos();
      complex4.divide((-20.0));
      Complex complex6 = complex5.reciprocal();
      complex6.log();
      complex2.multiply(complex5);
      complex4.log();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = complex0.add(1277.899653);
      complex1.INF.toString();
      Complex complex2 = Complex.valueOf(1277.899653, 1.1765332726757802E-8);
      complex1.getField();
      Complex complex3 = complex1.subtract(1277.899653);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex2.subtract(complex0);
      complex2.multiply(0.0);
      Complex complex6 = complex3.log();
      complex3.sin();
      complex4.getField();
      Complex complex7 = new Complex((-1.3824992526093461E-8));
      complex7.readResolve();
      complex6.add(1660.9);
      complex5.readResolve();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ONE.multiply(2534);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex2.atan();
      complex6.hashCode();
      Complex complex8 = complex4.sin();
      complex6.asin();
      Complex complex9 = complex3.divide(6.283185307179586);
      complex3.reciprocal();
      complex5.log();
      complex8.multiply(complex7);
      complex9.log();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = complex0.log();
      complex0.ZERO.asin();
      int int0 = (-4106);
      try { 
        complex1.ONE.nthRoot((-4106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,106
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      complex1.ZERO.divide(0.0);
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.ZERO.tanh();
      complex3.INF.nthRoot(606);
      complex0.log();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.add(complex0);
      complex2.tan();
      complex2.ZERO.subtract(0.0);
      complex0.I.abs();
      Complex complex3 = complex0.ONE.tan();
      complex0.INF.divide((-794.4));
      Complex complex4 = complex3.reciprocal();
      complex0.ZERO.divide(2.0);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.INF.sqrt();
      complex6.ZERO.subtract(1.0);
      complex0.ONE.tan();
      complex4.INF.tanh();
      complex4.I.conjugate();
      complex0.isInfinite();
      Complex complex7 = complex1.divide((-2021.61));
      complex4.isNaN();
      Complex complex8 = complex7.ONE.atan();
      complex8.NaN.atan();
      Complex complex9 = complex1.asin();
      complex9.ONE.pow(2.0);
      complex3.getImaginary();
      Complex complex10 = complex7.acos();
      Complex complex11 = complex10.tanh();
      complex11.getField();
      complex8.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.5862, 2.2316346168518066);
      Complex complex1 = new Complex(1377.5862, 2.2316346168518066);
      complex0.equals(complex1);
      complex1.INF.sqrt1z();
      Complex complex2 = complex1.I.sqrt();
      complex0.abs();
      complex2.I.asin();
      complex1.reciprocal();
      complex1.tan();
      Complex complex3 = Complex.valueOf(1377.588007578283, 2.2316346168518066);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1.5707963267948966);
      complex0.ONE.pow(complex1);
      Object object0 = new Object();
      complex0.I.acos();
      complex0.equals(object0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex0.multiply((-1487));
      Complex complex4 = complex0.INF.multiply((double) (-1487));
      Complex complex5 = complex4.ONE.tanh();
      complex0.getReal();
      Complex complex6 = complex3.pow(complex0);
      Complex complex7 = complex0.ZERO.subtract(4124.27040705);
      Complex complex8 = complex6.negate();
      Complex complex9 = complex8.INF.multiply(complex5);
      Complex complex10 = complex4.ONE.add(Double.POSITIVE_INFINITY);
      complex10.NaN.getArgument();
      Complex complex11 = complex9.INF.divide(complex2);
      Complex complex12 = complex3.divide(1940.011728674);
      complex12.isInfinite();
      Complex complex13 = complex0.I.atan();
      Complex complex14 = complex9.divide(complex1);
      Complex complex15 = complex14.add(complex1);
      complex15.pow(complex7);
      complex4.add(0.0);
      complex8.negate();
      complex3.multiply((-1487));
      complex13.cosh();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3363.8097581987), (-3363.8097581987));
      complex0.ONE.abs();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sinh();
      complex1.NaN.acos();
      complex2.NaN.readResolve();
      Complex complex3 = Complex.valueOf((-3363.8097581987));
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.ZERO.sin();
      complex5.I.pow(complex6);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.ZERO.multiply(527);
      complex1.isNaN();
      Complex complex9 = complex0.divide(complex2);
      complex9.NaN.multiply((-1579.3487962709737));
      Complex complex10 = complex9.ONE.add(complex3);
      complex2.multiply(complex9);
      Complex complex11 = complex1.tan();
      Complex complex12 = complex2.reciprocal();
      complex5.getArgument();
      complex5.cos();
      complex7.isNaN();
      complex8.toString();
      complex1.negate();
      complex4.multiply(527);
      complex11.pow(complex5);
      complex5.isInfinite();
      complex10.sqrt();
      complex12.cos();
      complex9.getReal();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(486.17252, 486.17252);
      Complex complex1 = complex0.ZERO.divide(486.17252);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.ONE.createComplex(486.17252, 486.17252);
      Complex complex4 = Complex.valueOf((-537.06978), 1524.32208);
      complex4.NaN.multiply(complex1);
      complex3.INF.multiply(0);
      Complex complex5 = complex2.ZERO.reciprocal();
      complex2.abs();
      complex2.ONE.asin();
      complex2.ONE.hashCode();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.I.conjugate();
      complex7.getField();
      complex7.INF.subtract(complex2);
      complex6.hashCode();
      complex1.negate();
      Complex complex8 = complex6.ZERO.sqrt();
      Complex complex9 = complex8.ZERO.negate();
      complex9.I.cos();
      Complex complex10 = Complex.I;
      complex9.ONE.pow(complex10);
      complex6.NaN.subtract((-766.39));
      complex6.asin();
      complex6.equals(complex5);
      complex2.readResolve();
      complex2.getImaginary();
      complex1.createComplex(1524.32208, (-766.39));
      complex0.cosh();
      Complex complex11 = complex2.tanh();
      complex11.getReal();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.tanh();
      Complex complex3 = complex1.asin();
      complex0.hashCode();
      complex0.hashCode();
      Complex complex4 = complex1.sqrt();
      complex3.getField();
      complex4.createComplex(0.0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 2113.948501534765;
      Complex complex0 = Complex.valueOf(2113.948501534765);
      complex0.isInfinite();
      complex0.isInfinite();
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1809.81));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.createComplex(0.2018241584300995, 0.2018241584300995);
      complex2.ZERO.pow(complex0);
      Complex complex3 = Complex.valueOf(1400.1, 0.2018241584300995);
      Complex complex4 = complex1.cos();
      complex4.ZERO.hashCode();
      Complex complex5 = Complex.I;
      complex2.subtract(complex5);
      Complex complex6 = complex3.reciprocal();
      complex1.sinh();
      Complex complex7 = Complex.valueOf(0.0, (-1809.81));
      complex5.getImaginary();
      Complex complex8 = complex5.exp();
      complex4.add(complex5);
      complex8.I.toString();
      complex8.readResolve();
      complex8.subtract(complex6);
      complex2.pow(complex7);
      complex5.add((-1339.9758834));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-2089.0));
      Complex complex1 = complex0.multiply((-2089.0));
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex0.equals(complex1);
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex3.INF.sqrt1z();
      complex0.getImaginary();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.sqrt();
      complex1.subtract(0.39037787914276123);
      complex4.NaN.negate();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.subtract(complex1);
      complex8.ONE.pow((-1993.896));
      complex0.toString();
      Complex complex9 = complex5.ONE.subtract(complex6);
      Complex complex10 = complex5.exp();
      Complex complex11 = complex4.conjugate();
      complex6.ONE.asin();
      Complex complex12 = complex5.tan();
      complex12.NaN.hashCode();
      complex1.getImaginary();
      Complex complex13 = Complex.valueOf((-2089.0));
      complex13.ZERO.abs();
      complex9.getField();
      complex0.log();
      complex0.isNaN();
      complex1.conjugate();
      complex11.readResolve();
      complex12.divide(complex6);
      complex10.multiply((-1664));
      complex0.reciprocal();
      complex2.multiply(1567);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      complex1.ZERO.abs();
      complex1.ONE.readResolve();
      complex1.subtract(0.0);
      complex0.acos();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex4.ZERO.createComplex(1.5811884868243975E-11, 0.0);
      Complex complex6 = complex1.NaN.cosh();
      complex3.I.multiply(complex4);
      complex2.I.nthRoot(1587);
      complex2.equals((Object) null);
      complex2.getReal();
      complex1.sin();
      Complex complex7 = complex2.createComplex(844.7573169, 0.0);
      complex7.hashCode();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.divide(complex8);
      complex9.I.toString();
      complex6.divide(complex7);
      Complex complex10 = complex4.reciprocal();
      complex1.nthRoot(1587);
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1253.30405));
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.I.hashCode();
      complex1.ONE.divide(0.0);
      complex1.I.divide(complex0);
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = complex0.reciprocal();
      complex3.subtract(0.0);
      complex2.reciprocal();
      complex5.sqrt1z();
      complex1.isNaN();
      complex4.sin();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.3373196561281372E-150, 1346.1);
      Complex complex2 = complex0.subtract(complex1);
      complex0.I.getArgument();
      complex2.atan();
      Complex complex3 = complex1.pow(complex2);
      complex1.getReal();
      Complex complex4 = Complex.valueOf(1.3373196561281372E-150);
      complex4.ONE.atan();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex5.cosh();
      complex6.conjugate();
      Complex complex8 = complex6.conjugate();
      complex7.NaN.negate();
      complex8.I.multiply((-345.108573605936));
      complex2.ZERO.divide(1.3373196561281372E-150);
      Complex complex9 = complex6.sqrt1z();
      complex7.log();
      Complex complex10 = complex0.add(1.3373196561281372E-150);
      Complex complex11 = complex10.INF.sin();
      complex2.equals((Object) null);
      complex10.reciprocal();
      complex2.ZERO.asin();
      Complex complex12 = complex10.subtract(1.3373196561281372E-150);
      complex9.hashCode();
      complex12.negate();
      complex2.hashCode();
      complex1.log();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = complex0.add(1277.899653);
      complex1.INF.toString();
      Complex complex2 = Complex.valueOf(1277.899653, 1.1765332726757802E-8);
      complex1.getField();
      Complex complex3 = complex1.subtract(1277.899653);
      Complex complex4 = complex3.divide(complex2);
      complex2.subtract(complex0);
      complex2.multiply(0.0);
      Complex complex5 = complex3.log();
      complex3.sin();
      complex4.getField();
      Complex complex6 = complex5.sin();
      complex6.getField();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      complex1.ZERO.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.ONE.multiply(2126.77349);
      complex4.INF.subtract(2126.77349);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex1.I.pow(complex0);
      complex5.ZERO.nthRoot(1);
      complex5.hashCode();
      complex6.divide(complex1);
      Complex complex8 = Complex.valueOf((-5.72769785), 2126.77349);
      complex7.subtract((-5.72769785));
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = (-1762.2481052);
      Complex complex0 = new Complex((-1762.2481052), (-954.92196532));
      complex0.getArgument();
      Complex complex1 = complex0.pow((-1762.2481052));
      Complex.valueOf((-1762.2481052), (-954.92196532));
      complex0.I.atan();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex1.ZERO.subtract(0.0);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex0.sin();
      complex5.tan();
      Complex.valueOf((-3636.951759894));
      complex0.abs();
      complex4.tan();
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((double) 771);
      Complex complex2 = complex1.ONE.reciprocal();
      complex2.INF.multiply(3311);
      Complex complex3 = complex0.I.multiply(771);
      complex3.I.multiply(931.0);
      complex0.cosh();
      complex3.isNaN();
      Complex complex4 = complex1.exp();
      complex4.INF.abs();
      complex3.reciprocal();
      complex3.pow(0.0);
      Complex.valueOf((double) 771, 0.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2082.37), (-1.0));
      Complex complex1 = new Complex((-2082.37), 104.95012358829);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.pow(2361.280997921);
      Complex complex4 = complex0.I.pow(complex2);
      complex4.NaN.pow(complex3);
      Complex complex5 = complex3.ONE.subtract(104.95012358829);
      complex0.isInfinite();
      complex3.isInfinite();
      complex1.ONE.subtract(2361.280997921);
      complex0.tan();
      complex0.isNaN();
      complex3.conjugate();
      Complex complex6 = complex2.ZERO.sqrt();
      Complex complex7 = complex2.multiply(104.95012358829);
      complex7.cos();
      complex5.getField();
      Complex complex8 = complex6.multiply(1.2145042419433594);
      complex8.INF.hashCode();
      Complex complex9 = complex2.createComplex(1.2145042419433594, (-1.0));
      complex7.isNaN();
      complex3.multiply((-756));
      Complex complex10 = complex9.tanh();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.NaN.subtract(1.0);
      complex2.INF.multiply((-3.3835280846270374E-8));
      Complex complex5 = complex4.add(complex1);
      complex0.ONE.getField();
      Complex complex6 = complex1.ZERO.negate();
      Complex complex7 = complex6.NaN.subtract(complex3);
      complex7.NaN.subtract(complex6);
      Complex complex8 = complex0.pow(0.0);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.ZERO.add(0.0);
      complex9.ONE.abs();
      complex1.isNaN();
      complex4.tanh();
      complex10.sinh();
      Complex complex11 = complex4.pow(1.0);
      complex1.multiply(1.0);
      complex0.tanh();
      complex11.hashCode();
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf(1.0, 1.0);
      complex1.add(complex5);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.divide(4110.574095488643);
      Complex complex4 = complex3.INF.asin();
      complex4.NaN.sqrt1z();
      Complex complex5 = complex3.I.sqrt();
      complex5.hashCode();
      complex0.getReal();
      complex4.add(2482.3914011);
      complex0.hashCode();
      Complex complex6 = complex0.acos();
      complex0.isNaN();
      Complex complex7 = complex3.NaN.exp();
      complex7.ONE.add(2482.3914011);
      Complex complex8 = complex6.divide(complex5);
      complex4.readResolve();
      Complex complex9 = complex8.createComplex(4110.574095488643, 4110.574095488643);
      Complex complex10 = complex9.tanh();
      complex8.exp();
      Complex complex11 = complex2.pow((-4277.0));
      complex11.I.getArgument();
      complex0.isNaN();
      Complex complex12 = complex10.sqrt1z();
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      complex0.ONE.toString();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.atan();
      complex2.sqrt1z();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      complex1.NaN.createComplex(0.0, (-162.242));
      Complex complex2 = complex1.ZERO.tan();
      complex2.ONE.subtract(0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.log();
      complex0.negate();
      complex4.hashCode();
      complex2.nthRoot(776);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.ZERO.subtract((-1.0));
      Complex.valueOf(0.0);
      complex4.NaN.reciprocal();
      Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex2.ZERO.sinh();
      Complex complex6 = complex5.I.subtract((-1.0));
      complex6.I.tanh();
      Complex complex7 = Complex.valueOf((-1.0), (-297.4315138));
      Complex complex8 = complex7.NaN.subtract(complex4);
      Complex complex9 = complex2.NaN.multiply(complex7);
      complex1.isInfinite();
      complex2.getField();
      Complex complex10 = complex1.negate();
      Complex complex11 = complex10.asin();
      complex9.getImaginary();
      complex10.subtract(0.0);
      complex10.isInfinite();
      complex3.log();
      Complex.valueOf((-297.4315138), (-1.0));
      complex8.pow(0.0);
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.I.acos();
      complex1.sqrt1z();
      Complex complex3 = complex0.subtract(complex1);
      complex3.ONE.multiply(2534);
      Complex complex4 = complex3.reciprocal();
      complex2.atan();
      complex4.hashCode();
      complex3.sin();
      complex4.asin();
      complex1.multiply(2534);
      Complex complex5 = complex3.add(complex4);
      complex5.sin();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = new Complex(2.0);
      complex0.NaN.acos();
      Complex complex2 = complex1.divide((-867.6987150072));
      complex1.I.sinh();
      Complex complex3 = complex0.pow(complex1);
      complex3.ONE.add(complex2);
      complex3.INF.divide(0.0);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.ONE.divide((-867.6987150072));
      complex4.NaN.hashCode();
      complex4.abs();
      Complex complex6 = complex2.I.multiply((-876));
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex7.NaN.reciprocal();
      Complex complex9 = complex4.asin();
      complex9.ZERO.conjugate();
      complex9.NaN.divide(complex5);
      complex8.readResolve();
      complex8.add(2.0);
      complex6.readResolve();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-3786.84401735));
      Complex complex1 = new Complex((-2.8477710945673134E65), 2912.9);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.ZERO.abs();
      Complex complex4 = complex2.reciprocal();
      complex4.hashCode();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.tanh();
      Complex complex7 = Complex.valueOf((-2.8477710945673134E65), (-2314.66177));
      complex6.abs();
      complex7.INF.createComplex(2912.9, 2912.9);
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.pow(1507.841);
      Complex complex11 = complex7.asin();
      complex4.pow(0.0);
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      complex4.getImaginary();
      complex11.getArgument();
      complex7.subtract(complex10);
      complex8.sin();
      Complex complex13 = complex12.log();
      complex13.subtract((-2314.66177));
      complex13.conjugate();
      complex5.createComplex((-2314.66177), 0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      complex0.NaN.multiply(2261.6932819956);
      Complex complex2 = complex1.I.add(940.6638472);
      complex2.I.cos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex4.ONE.multiply(2261.6932819956);
      Complex complex6 = Complex.valueOf(0.0, 756.18);
      complex6.I.sqrt();
      Complex complex7 = complex6.subtract(complex0);
      complex1.log();
      Complex complex8 = complex7.add((-2325.0));
      complex1.cos();
      Complex complex9 = complex1.divide(1160.1);
      complex9.reciprocal();
      complex0.log();
      complex5.multiply(complex8);
      complex3.log();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract(605.4593);
      Complex complex2 = complex0.sin();
      complex1.NaN.atan();
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = complex3.I.sqrt();
      complex4.sqrt1z();
      Complex.valueOf((double) 1, (double) (-2882));
      Complex complex5 = complex3.NaN.multiply((-2882));
      complex5.ZERO.tanh();
      complex1.getArgument();
      Complex complex6 = complex2.ZERO.sqrt();
      complex6.ONE.abs();
      complex1.readResolve();
      complex4.readResolve();
      complex4.conjugate();
      complex1.subtract((-1903.3));
      complex3.nthRoot(1);
      complex6.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.multiply((-3483));
      Complex complex4 = complex0.I.add(complex2);
      Complex complex5 = complex3.NaN.subtract(complex0);
      complex5.ZERO.toString();
      Complex complex6 = Complex.valueOf((-20.0), (-20.0));
      Complex complex7 = complex0.multiply(complex6);
      List<Complex> list0 = complex0.nthRoot(1);
      assertEquals(1, list0.size());
      
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex0.multiply(1);
      Complex complex10 = complex9.I.pow(complex1);
      complex10.NaN.sqrt();
      assertEquals((-0.7812118921104881), complex10.getReal(), 0.01);
      
      Complex complex11 = complex7.acos();
      Complex complex12 = complex11.INF.conjugate();
      Complex complex13 = complex12.cos();
      assertTrue(complex12.isInfinite());
      
      Complex complex14 = complex4.NaN.sqrt();
      Complex complex15 = complex14.NaN.negate();
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = complex7.acos();
      complex3.isInfinite();
      assertEquals((-3483.0), complex3.getImaginary(), 0.01);
      
      complex17.I.abs();
      Complex complex18 = complex4.divide((double) 1);
      complex17.equals(complex4);
      assertEquals(0.78571066329575, complex17.getReal(), 0.01);
      
      Complex complex19 = complex6.cosh();
      Complex.valueOf(1.0);
      complex8.add(complex0);
      Complex complex20 = complex19.asin();
      assertEquals(Double.POSITIVE_INFINITY, complex20.getReal(), 0.01);
      assertEquals(9.899360663146222E7, complex19.getReal(), 0.01);
      
      Complex complex21 = complex15.acos();
      Complex complex22 = complex8.multiply((-20.0));
      assertFalse(complex7.equals((Object)complex6));
      assertTrue(complex22.equals((Object)complex13));
      assertSame(complex22, complex8);
      assertSame(complex22, complex21);
      
      Complex complex23 = complex16.sinh();
      assertFalse(complex23.equals((Object)complex18));
      assertEquals(0.0, complex23.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ONE.multiply(0.0);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.cos();
      complex1.getReal();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex6.add(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertTrue(complex9.isInfinite());
      
      Complex complex10 = complex7.log();
      assertEquals(0.16143936157119557, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex11 = complex3.multiply(1);
      assertSame(complex11, complex8);
      assertSame(complex11, complex3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-1002.926));
      Complex complex1 = new Complex((-1002.926));
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1002.926), complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-1.0200858727747717E-8));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex1.hashCode();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.conjugate();
      complex4.NaN.hashCode();
      complex1.I.sinh();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.ZERO.conjugate();
      assertFalse(complex5.isInfinite());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.sinh();
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.1752011936438014, complex7.getReal(), 0.01);
      
      complex2.subtract(0.0);
      double double0 = complex3.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.13925230503082275);
      complex0.equals("");
      complex0.getImaginary();
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(0.13925230503082275);
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex2.I.pow(0.13925230503082275);
      assertEquals(0.21699689989348045, complex4.getImaginary(), 0.01);
      assertEquals(0.9761722929056217, complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex0.reciprocal();
      complex3.isNaN();
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(0.3731652516390329, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex7 = complex6.divide(complex5);
      assertEquals(370.3101406001273, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.ONE.multiply(1);
      Complex complex2 = Complex.valueOf(1.792783182582235E246);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.pow(complex0);
      assertTrue(complex4.equals((Object)complex1));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex5 = Complex.valueOf(1.792783182582235E246, 1.792783182582235E246);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.pow(complex2);
      String string0 = complex8.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex6.multiply(1.792783182582235E246);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals(2.816097237939839E246, complex9.getReal(), 0.01);
      
      Complex complex10 = complex5.tanh();
      complex10.isNaN();
      assertFalse(complex5.isInfinite());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3180.285));
      Complex complex1 = complex0.add((-3180.285));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-6360.57), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }
}
