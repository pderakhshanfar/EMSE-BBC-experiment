/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:21:32 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1306.507517977042, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.multiply(complex1);
      complex3.ONE.tanh();
      Complex complex4 = complex2.multiply(1040);
      complex4.INF.getArgument();
      complex1.pow((-385.0));
      complex1.multiply((-300));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3772.8, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 337.8174987);
      Complex complex3 = complex2.subtract(complex1);
      complex3.sinh();
      Complex complex4 = complex3.multiply(337.8174987);
      Complex complex5 = complex0.log();
      complex5.acos();
      complex5.toString();
      complex0.subtract(complex3);
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf((-7.888247138721476), (-245.43361));
      complex7.divide(complex8);
      complex4.multiply((-770));
      Complex complex9 = Complex.valueOf((-1.0));
      Complex complex10 = Complex.INF;
      complex10.divide(complex6);
      complex8.nthRoot(107);
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1002.926), 2.083115484919861E219);
      Complex complex1 = complex0.sqrt1z();
      complex1.sqrt();
      Complex complex2 = new Complex(2.083115484919861E219, 2.083115484919861E219);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1.0200858727747717E-8));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex1.hashCode();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.conjugate();
      complex4.NaN.hashCode();
      Complex complex5 = Complex.valueOf((-1.0200858727747717E-8), Double.POSITIVE_INFINITY);
      complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-239.61125244), (-20.0));
      complex0.sqrt1z();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.reciprocal();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-239.61125244), (-240.37597679054056));
      Complex complex1 = complex0.sqrt1z();
      complex1.sqrt();
      complex1.ZERO.sqrt();
      Complex complex2 = complex1.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1306.507517977042, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.multiply(complex1);
      complex3.ONE.tanh();
      complex2.multiply(1040);
      complex1.pow((-385.0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex2 = complex1.subtract(complex0);
      complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.INF;
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(33940.98252225, Double.POSITIVE_INFINITY);
      complex2.subtract(complex1);
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex0.log();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-239.61125244), (-1231.0392139660257));
      Complex complex1 = Complex.NaN;
      complex0.sqrt1z();
      Complex complex2 = complex0.sqrt();
      complex1.abs();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.INF;
      complex3.tan();
      Complex complex5 = Complex.I;
      complex5.atan();
      Complex complex6 = new Complex((-971.9), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      complex1.sqrt();
      complex0.abs();
      complex0.asin();
      complex0.tan();
      complex1.atan();
      complex1.abs();
      complex0.tanh();
      complex1.createComplex((-2328.732), (-295.0477758023864));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2710.1032219775902, (-1231.0392139660257));
      Complex complex1 = Complex.NaN;
      complex1.isNaN();
      Complex complex2 = complex0.sqrt1z();
      complex0.sqrt();
      complex1.abs();
      Complex.valueOf(20.0, 1665.0);
      complex2.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.atan();
      complex4.abs();
      complex2.tanh();
      complex2.add(6696607.116132387);
      complex2.createComplex(6696607.116132387, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-3868.25184));
      Complex complex1 = complex0.atan();
      complex1.abs();
      complex0.tanh();
      complex0.acos();
      complex1.pow((-2769.0669489821));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(1277.899653);
      complex1.INF.toString();
      complex1.getField();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.subtract(complex0);
      complex1.multiply(0.0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.divide((-1.3824992526093461E-8));
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex5.log();
      complex6.multiply(complex4);
      complex3.log();
      complex7.tanh();
      Complex complex8 = complex1.multiply((-1.3824992526093461E-8));
      complex8.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.2704793774453618E163, 1.2704793774453618E163);
      complex0.atan();
      complex1.abs();
      complex1.tanh();
      Complex complex2 = new Complex(1.2704793774453618E163, (-409.6988367));
      complex2.acos();
      complex1.pow((-462.523213854));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.I;
      complex1.abs();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = new Complex(0.2);
      complex4.exp();
      complex4.subtract(Double.NaN);
      Complex.valueOf(0.2, 0.4);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = Complex.valueOf((-20.579037734590415), (-1.3824992526093461E-8));
      complex1.getArgument();
      complex1.atan();
      Complex complex2 = complex0.tanh();
      complex1.add((-0.7725594953875171));
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-92.99771037223218), (-92.99771037223218));
      Complex complex1 = complex0.multiply(107);
      Complex complex2 = complex1.sqrt();
      complex2.readResolve();
      Complex complex3 = complex0.add((double) 107);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.I;
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = new Complex((-2034.670339), 3.1855931348221952E16);
      complex7.readResolve();
      Complex complex8 = complex7.add(Double.POSITIVE_INFINITY);
      complex6.add(0.2622140049934387);
      Complex complex9 = new Complex(383.08770839, Double.POSITIVE_INFINITY);
      complex0.readResolve();
      complex8.tanh();
      Complex complex10 = Complex.INF;
      complex3.exp();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1519.652);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.divide((-1389.52940394552));
      complex1.hashCode();
      complex4.abs();
      complex4.multiply(1257);
      Complex complex5 = Complex.ONE;
      complex0.reciprocal();
      Complex complex6 = Complex.NaN;
      complex6.asin();
      Complex complex7 = Complex.ONE;
      complex2.divide(complex0);
      complex2.readResolve();
      complex2.add(0.0);
      complex4.NaN.readResolve();
      complex3.readResolve();
      complex6.tanh();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.add(complex1);
      Complex complex2 = complex1.subtract(20.0);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ZERO.exp();
      complex3.getField();
      complex1.acos();
      Complex complex6 = complex2.subtract(0.17398371753986464);
      complex6.ZERO.tan();
      Complex complex7 = complex6.add(20.0);
      Complex complex8 = complex2.log();
      Complex complex9 = complex0.INF.subtract(20.0);
      Complex complex10 = complex3.tan();
      complex2.ZERO.getArgument();
      Complex complex11 = complex3.add(2324.07403103);
      Complex complex12 = complex11.INF.multiply(1743);
      complex5.divide(complex0);
      complex2.multiply(complex8);
      complex2.negate();
      Complex complex13 = complex1.pow(complex11);
      complex3.cos();
      complex13.sin();
      complex9.exp();
      Complex complex14 = complex10.divide(5.829749542245665);
      complex11.exp();
      complex11.conjugate();
      complex8.tan();
      complex12.multiply((-472));
      complex7.pow(complex14);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-10.741757201884846), 1933.4399946314347);
      complex0.ZERO.multiply(1499);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1245.647298675));
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ZERO;
      complex3.sqrt1z();
      Complex complex4 = complex0.subtract(complex1);
      complex0.tan();
      Complex complex5 = complex4.divide(1523.0225123554);
      Complex complex6 = Complex.NaN;
      complex6.hashCode();
      complex6.abs();
      Complex.valueOf(Double.NaN);
      complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-10.741757201884846));
      Complex complex1 = Complex.valueOf((-3248.0), (double) (-1073741817));
      Complex complex2 = Complex.I;
      complex2.getArgument();
      complex1.atan();
      Complex complex3 = complex1.tanh();
      complex0.add(Double.NaN);
      Complex complex4 = Complex.valueOf((-3248.0), 1.5707963267948966);
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-92.99771037223218), (-92.99771037223218));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.tan();
      double double0 = 1.7211089134216309;
      Complex complex4 = complex0.divide(Double.NaN);
      complex4.hashCode();
      complex1.abs();
      Complex complex5 = complex2.multiply(2534);
      complex5.divide(complex1);
      complex1.reciprocal();
      complex0.asin();
      Complex complex6 = Complex.ONE;
      try { 
        complex3.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.sqrt1z();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.tan();
      complex2.NaN.tan();
      complex2.NaN.hashCode();
      Complex complex3 = complex0.reciprocal();
      // Undeclared exception!
      complex3.ONE.nthRoot(1852628642);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex0.tan();
      Complex.valueOf(0.0, 0.0);
      complex0.NaN.getArgument();
      complex1.atan();
      Complex complex2 = Complex.valueOf((-2201.829878502446), Double.NaN);
      Complex complex3 = new Complex((-2201.829878502446));
      complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.add(1009.3838462821974);
      Complex complex1 = Complex.valueOf((-473.074));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = Complex.NaN;
      complex3.INF.add(complex4);
      complex0.add((-473.074));
      Complex complex5 = complex1.negate();
      complex5.I.add((-473.074));
      Complex complex6 = new Complex((-473.074), (-473.074));
      complex1.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2082.37), (-1.0));
      Complex complex1 = Complex.valueOf((-7.740112410507559), (-1.0));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex3.divide(Double.POSITIVE_INFINITY);
      complex6.hashCode();
      complex4.abs();
      complex0.multiply((-1224));
      complex4.divide(complex5);
      complex3.reciprocal();
      Complex complex7 = complex3.asin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex2.divide(complex7);
      complex9.readResolve();
      complex4.add((double) (-1224));
      complex3.readResolve();
      Complex.valueOf((-0.1302706015040336), 1.7211089134216309);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.I;
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(6.28318530717959, 6.283185307179586);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.sqrt1z();
      complex3.subtract(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.divide(6.28318530717959);
      Complex complex8 = Complex.ZERO;
      complex8.hashCode();
      complex0.abs();
      complex7.multiply(999);
      complex7.createComplex(999, 0.0990306374634583);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex0.divide(complex1);
      Complex complex11 = Complex.I;
      complex2.reciprocal();
      complex3.asin();
      Complex complex12 = Complex.ONE;
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY);
      complex13.divide(complex12);
      complex1.readResolve();
      complex6.add((-4456.4));
      complex2.readResolve();
      complex10.tanh();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4542.714802894941));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex1.multiply((-2045222521));
      Complex complex4 = complex3.INF.log();
      complex0.ZERO.toString();
      Complex complex5 = complex0.subtract(1.0);
      complex5.INF.abs();
      Complex complex6 = Complex.valueOf((-4542.714802894941), (-1.0));
      complex0.subtract((-4542.714802894941));
      Complex complex7 = complex2.multiply((-1514));
      complex7.NaN.asin();
      complex6.createComplex(1938.93379365008, Double.POSITIVE_INFINITY);
      complex4.add(1938.93379365008);
      complex2.sqrt1z();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7211089134216309, (-1938.93379365008));
      Complex complex1 = Complex.ONE;
      complex0.I.multiply(complex1);
      Complex complex2 = Complex.valueOf((-162.775086));
      Complex complex3 = complex0.pow(complex2);
      complex3.I.acos();
      complex0.ONE.readResolve();
      complex3.log();
      complex0.asin();
      complex1.equals("UiI");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.21214580535888672, (-3926.900281637));
      complex0.equals(complex0);
      Complex complex1 = complex0.sqrt1z();
      complex0.sqrt();
      complex0.abs();
      Complex complex2 = Complex.ONE;
      complex2.reciprocal();
      complex0.tan();
      Complex.valueOf((-5.177640918247244), (-935.33247));
      complex1.exp();
      complex1.multiply(515);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.INF;
      complex1.ZERO.subtract(0.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.sin();
      complex4.tan();
      Complex complex5 = Complex.valueOf((-3636.95176));
      complex5.ONE.tanh();
      complex5.abs();
      Complex complex6 = complex4.tanh();
      complex6.multiply((-3636.95176));
      complex1.multiply(complex2);
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-92.99771037223218), (-92.99771037223218));
      Complex complex1 = new Complex((-92.99771037223218), (-92.99771037223218));
      Complex complex2 = Complex.ONE;
      complex1.equals(complex2);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.sqrt();
      complex3.abs();
      complex2.asin();
      complex0.reciprocal();
      complex1.tan();
      Complex.valueOf((-20.73927457193643), (-2360.280997921));
      complex2.exp();
      complex4.multiply((-1997));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.5862, 1377.5862);
      Complex complex1 = complex0.conjugate();
      complex0.multiply(37);
      Complex complex2 = new Complex(388.340621169972);
      Complex complex3 = complex2.sqrt();
      complex3.readResolve();
      Complex complex4 = Complex.NaN;
      complex4.add(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex5.atan();
      complex5.abs();
      complex4.tanh();
      complex1.add(0.3916988968849182);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-92.99771037223218), (-92.99771037223218));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(107);
      Complex complex3 = complex2.sqrt();
      complex2.tan();
      complex0.isNaN();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex4.multiply((-3433.0119545));
      complex3.cos();
      complex5.getField();
      Complex complex7 = complex2.multiply((-92.99771037223218));
      Complex complex8 = new Complex((-2041.871636353145), (-584.868716674421));
      complex8.hashCode();
      complex3.createComplex(1.2145042419433594, 107);
      complex4.isNaN();
      complex7.multiply(107);
      complex6.tanh();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.5862, 1377.5862);
      Complex complex1 = new Complex(1377.5862, 1377.5862);
      Complex.valueOf((-3.1305705497720186E-61));
      complex0.equals(complex1);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.I.sqrt();
      complex0.abs();
      complex3.I.asin();
      complex1.reciprocal();
      complex1.tan();
      Complex complex4 = new Complex(1948.201087378015);
      complex0.exp();
      complex3.multiply(1577);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(6.28318530717959, 6.283185307179586);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.tan();
      complex0.divide(1.7211089134216309);
      complex1.hashCode();
      complex3.abs();
      Complex complex6 = complex4.multiply(2534);
      complex6.getArgument();
      complex6.divide(complex5);
      complex3.reciprocal();
      Complex complex7 = complex1.asin();
      complex2.conjugate();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.divide(complex4);
      complex4.readResolve();
      complex9.add(202.82106602);
      complex8.readResolve();
      complex9.tanh();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = complex0.add(1277.899653);
      complex1.INF.toString();
      Complex complex2 = Complex.valueOf(1277.899653, 1.1765332726757802E-8);
      complex1.getField();
      Complex complex3 = complex1.subtract(1277.899653);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex2.subtract(complex0);
      complex2.multiply(0.0);
      Complex complex6 = complex3.log();
      complex3.sin();
      complex4.getField();
      complex6.sin();
      complex5.sin();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.28318531);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.INF;
      complex2.NaN.getField();
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex2.add(complex4);
      Complex complex7 = complex1.divide(0.0);
      Complex complex8 = complex7.tan();
      Complex complex9 = Complex.NaN;
      complex7.hashCode();
      complex8.abs();
      complex5.multiply((-876));
      Complex complex10 = complex6.divide(complex7);
      Complex complex11 = complex3.reciprocal();
      complex10.asin();
      Complex complex12 = complex5.conjugate();
      complex3.divide(complex12);
      complex10.readResolve();
      Complex complex13 = complex9.add(693.74285);
      complex13.readResolve();
      complex11.tanh();
      Complex complex14 = complex13.divide(737.4155547);
      complex14.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = complex0.multiply(107);
      Complex complex2 = complex1.sqrt();
      complex2.readResolve();
      complex2.add((-20.740134593506014));
      Complex complex3 = complex0.atan();
      complex3.abs();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2082.37), (-1.0));
      Complex complex1 = new Complex((-2082.37), 104.95012358829);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.pow(2361.280997921);
      Complex complex4 = complex0.I.pow(complex2);
      complex0.isInfinite();
      complex2.abs();
      complex4.asin();
      complex1.reciprocal();
      complex3.tan();
      Complex.valueOf(2361.280997921, (-229.0));
      Complex complex5 = complex0.exp();
      complex5.multiply(2109);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2082.37), (-1.0));
      Complex complex1 = new Complex((-2082.37), 104.95012358829);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex1.divide((-2082.37));
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.add(complex5);
      complex1.divide((-1.0));
      complex5.tan();
      Complex complex8 = complex6.divide((-2082.37));
      complex7.hashCode();
      complex7.abs();
      complex2.multiply((-876));
      Complex complex9 = new Complex(Double.NaN, 0.23697291631767256);
      Complex complex10 = complex8.divide(complex9);
      complex10.reciprocal();
      complex1.asin();
      complex4.conjugate();
      Complex complex11 = Complex.valueOf(104.95012358829);
      complex1.divide(complex11);
      complex4.readResolve();
      complex11.add((double) (-876));
      complex4.readResolve();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.pow(complex2);
      complex1.add(complex0);
      complex0.divide(0.0);
      complex2.tan();
      complex2.divide((-1002.926));
      complex2.hashCode();
      complex3.abs();
      Complex complex4 = complex0.multiply((-876));
      Complex complex5 = complex4.divide(complex3);
      complex1.reciprocal();
      complex2.asin();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.divide(complex5);
      complex8.ZERO.sqrt();
      complex5.readResolve();
      complex6.add(1.0);
      Complex complex9 = Complex.valueOf(Double.NaN, (-3363.8097581987));
      complex9.readResolve();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = complex0.add(1277.899653);
      complex1.INF.toString();
      Complex complex2 = Complex.valueOf(1277.899653, 1.1765332726757802E-8);
      complex1.getField();
      Complex complex3 = complex1.subtract(1277.899653);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex2.multiply(0.0);
      complex0.cos();
      complex4.isNaN();
      complex6.toString();
      Complex complex7 = complex5.negate();
      complex1.multiply((-2210));
      complex7.pow(complex0);
      complex2.isInfinite();
      complex7.sqrt();
      complex0.cos();
      complex4.getReal();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-2082.37));
      Complex complex2 = complex0.multiply(1753.74613);
      Complex complex3 = complex2.add((-2082.37));
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.sinh();
      complex4.cos();
      Complex complex6 = complex0.multiply(940.6638472);
      Complex.valueOf(3.861525553653117E-227, 3.861525553653117E-227);
      Complex complex7 = complex5.sqrt();
      complex6.subtract(complex3);
      complex4.log();
      complex3.add(2107.0);
      Complex complex8 = complex5.cos();
      complex8.divide((-1.0));
      complex4.reciprocal();
      complex0.log();
      complex1.multiply(complex7);
      Complex complex9 = new Complex(668.24774914, 1753.74613);
      Complex complex10 = complex9.log();
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = new Complex(2361.280997921);
      Complex complex2 = complex0.acos();
      complex2.divide(1754.482934103);
      Complex complex3 = Complex.ZERO;
      complex3.sinh();
      Complex complex4 = complex0.pow(complex3);
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = Complex.valueOf(1.3824992526093461E-8, 1.3824992526093461E-8);
      Complex complex2 = new Complex(104.95012358829, 1809.6049);
      Complex complex3 = complex2.pow(complex1);
      complex0.pow(0.0011524737592721942);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = complex5.subtract(1809.6049);
      complex4.isInfinite();
      complex0.isInfinite();
      Complex complex7 = complex4.subtract(1160.1);
      complex0.tan();
      complex7.isNaN();
      complex6.conjugate();
      Complex complex8 = Complex.valueOf(2361.280997921);
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex9.multiply(104.95012358829);
      Complex complex11 = complex2.cos();
      complex8.multiply((-4330.437061443466));
      complex10.hashCode();
      complex11.createComplex(1.3824992526093461E-8, 2.2316346168518066);
      complex10.isNaN();
      complex6.multiply((-756));
      complex2.tanh();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide((-867.6987150072));
      Complex complex3 = complex1.sinh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex3.add(complex1);
      Complex complex7 = complex2.divide(142.7507371212022);
      Complex complex8 = Complex.valueOf((-4.820065619207094E-9), 20.0);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex7.divide(0.0);
      complex6.hashCode();
      complex0.abs();
      complex0.multiply((-876));
      complex6.divide(complex8);
      complex9.reciprocal();
      complex10.asin();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = Complex.I;
      complex12.divide(complex7);
      complex11.readResolve();
      Complex complex13 = Complex.NaN;
      complex13.add(20.0);
      complex2.readResolve();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = new Complex(2.0);
      complex0.NaN.acos();
      Complex complex2 = complex1.divide((-867.6987150072));
      complex1.I.sinh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ONE.add(complex2);
      complex3.INF.divide(0.0);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.ONE.divide((-867.6987150072));
      complex5.NaN.hashCode();
      complex5.abs();
      Complex complex7 = complex2.I.multiply((-876));
      complex0.divide(complex6);
      Complex complex8 = complex4.asin();
      complex8.multiply(1073741824);
      complex7.add(complex0);
      complex4.sin();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = complex0.add(1277.899653);
      complex1.INF.toString();
      complex1.getField();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.subtract(complex0);
      complex1.multiply(0.0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.divide((-1.3824992526093461E-8));
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex5.log();
      complex6.multiply(complex4);
      Complex complex8 = complex3.log();
      complex8.ONE.abs();
      complex7.isInfinite();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.5862, 1377.5862);
      Complex complex1 = new Complex(1377.5862, 1377.5862);
      complex0.equals(complex1);
      complex1.INF.sqrt1z();
      Complex complex2 = complex1.I.sqrt();
      complex0.abs();
      Complex complex3 = complex2.I.asin();
      complex1.reciprocal();
      complex1.tan();
      Complex.valueOf(1948.201087378015, 1377.5862);
      complex3.exp();
      complex2.multiply((-1997));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.NaN.multiply(2261.6932819956);
      Complex complex3 = complex1.I.add(940.6638472);
      Complex complex4 = complex0.createComplex(2261.6932819956, 2261.6932819956);
      complex0.cosh();
      complex2.multiply(complex3);
      complex4.nthRoot(1009);
      complex4.equals(complex3);
      complex3.getReal();
      Complex complex5 = Complex.valueOf((double) 1587, 0.0);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.createComplex(844.7573169, (-1.0));
      complex1.hashCode();
      Complex complex8 = Complex.ZERO;
      complex5.divide(complex8);
      complex7.toString();
      complex8.divide(complex6);
      complex0.reciprocal();
      complex5.nthRoot(1587);
      Complex complex9 = Complex.NaN;
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      complex3.ZERO.sinh();
      complex1.cos();
      Complex complex4 = new Complex(0.0, 1.5811884868243975E-11);
      complex4.sinh();
      complex1.cos();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.multiply(0.0);
      Complex complex7 = Complex.valueOf(Double.NaN, 2082.37);
      complex6.sqrt();
      Complex complex8 = complex1.subtract(complex3);
      Complex complex9 = complex3.log();
      Complex complex10 = complex4.add(0.0);
      complex3.cos();
      Complex complex11 = Complex.valueOf(0.0, 2522.1183);
      complex11.divide(2.8776128744298384);
      complex8.reciprocal();
      complex6.log();
      complex10.multiply(complex8);
      complex7.log();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      complex0.NaN.multiply(2261.6932819956);
      Complex complex2 = complex1.I.add(940.6638472);
      complex2.I.cos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex4.ONE.multiply(2261.6932819956);
      Complex complex6 = Complex.valueOf(0.0, 756.18);
      complex6.I.sqrt();
      Complex complex7 = complex6.subtract(complex0);
      complex1.log();
      Complex complex8 = complex7.add((-2325.0));
      complex1.cos();
      Complex complex9 = complex1.divide(1160.1);
      complex9.reciprocal();
      complex0.log();
      complex5.multiply(complex8);
      complex3.log();
      complex2.divide(0.9999997553161836);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2082.37), (-1.0));
      Complex complex1 = new Complex((-2082.37), 104.95012358829);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.pow(2361.280997921);
      Complex complex4 = complex0.I.pow(complex2);
      Complex complex5 = complex4.NaN.pow(complex3);
      Complex complex6 = complex3.ONE.subtract(104.95012358829);
      complex0.isInfinite();
      complex3.isInfinite();
      complex1.ONE.subtract(2361.280997921);
      complex0.isNaN();
      complex3.conjugate();
      Complex complex7 = complex2.ZERO.sqrt();
      Complex complex8 = complex2.multiply(104.95012358829);
      complex8.cos();
      complex6.getField();
      Complex complex9 = complex7.multiply(1.2145042419433594);
      complex1.getField();
      complex9.sin();
      complex9.getField();
      complex1.toString();
      complex5.negate();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1002.926));
      Complex complex1 = new Complex((-1002.926));
      complex0.readResolve();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.5862, 2.2316346168518066);
      Complex complex1 = new Complex(1377.5862, 2.2316346168518066);
      complex0.equals(complex1);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.multiply(4700);
      complex3.getArgument();
      complex3.isNaN();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex0.multiply(4737.0);
      Complex complex6 = complex4.add(complex1);
      complex5.multiply(complex1);
      Complex complex7 = complex0.tan();
      complex7.reciprocal();
      complex0.getArgument();
      complex7.cos();
      complex4.isNaN();
      complex2.toString();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex8.multiply(527);
      complex2.pow(complex1);
      complex0.isInfinite();
      complex5.sqrt();
      Complex complex10 = complex9.cos();
      complex10.getReal();
      Complex complex11 = complex6.exp();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.abs();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sinh();
      complex1.NaN.acos();
      Complex complex3 = (Complex)complex2.NaN.readResolve();
      Complex complex4 = Complex.valueOf((-3363.8097581987));
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex0.ZERO.sin();
      complex6.I.pow(complex7);
      Complex complex8 = complex4.asin();
      complex0.sqrt();
      Complex complex9 = Complex.I;
      complex9.abs();
      complex3.asin();
      complex0.reciprocal();
      Complex complex10 = complex8.tan();
      Complex.valueOf(1.0, (-3362.8097581987));
      complex3.nthRoot(1162);
      complex9.multiply(complex8);
      complex6.divide(complex1);
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = complex0.log();
      complex0.ZERO.asin();
      int int0 = (-4106);
      try { 
        complex1.ONE.nthRoot((-4106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,106
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      complex1.ZERO.divide(0.0);
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.ZERO.tanh();
      complex3.INF.nthRoot(606);
      complex0.log();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.add(complex0);
      complex2.tan();
      complex2.ZERO.subtract(0.0);
      complex0.I.abs();
      Complex complex3 = complex0.ONE.tan();
      complex0.INF.divide((-794.4));
      Complex complex4 = complex3.reciprocal();
      complex0.ZERO.divide(2.0);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.INF.sqrt();
      complex6.ZERO.subtract(1.0);
      complex0.ONE.tan();
      complex4.INF.tanh();
      complex4.I.conjugate();
      complex0.isInfinite();
      Complex complex7 = complex1.divide((-2021.61));
      complex4.isNaN();
      Complex complex8 = complex7.ONE.atan();
      complex8.NaN.atan();
      Complex complex9 = complex1.asin();
      complex9.ONE.pow(2.0);
      complex3.getImaginary();
      Complex complex10 = complex7.acos();
      Complex complex11 = complex10.tanh();
      complex11.getField();
      complex8.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1377.5862, 2.2316346168518066);
      Complex complex1 = new Complex(1377.5862, 2.2316346168518066);
      complex0.equals(complex1);
      complex1.INF.sqrt1z();
      Complex complex2 = complex1.I.sqrt();
      complex0.abs();
      complex2.I.asin();
      complex1.reciprocal();
      complex1.tan();
      Complex complex3 = Complex.valueOf(1377.588007578283, 2.2316346168518066);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1.5707963267948966);
      complex0.ONE.pow(complex1);
      Object object0 = new Object();
      complex0.I.acos();
      complex0.equals(object0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex0.multiply((-1487));
      Complex complex4 = complex0.INF.multiply((double) (-1487));
      Complex complex5 = complex4.ONE.tanh();
      complex0.getReal();
      Complex complex6 = complex3.pow(complex0);
      Complex complex7 = complex0.ZERO.subtract(4124.27040705);
      Complex complex8 = complex6.negate();
      Complex complex9 = complex8.INF.multiply(complex5);
      Complex complex10 = complex4.ONE.add(Double.POSITIVE_INFINITY);
      complex10.NaN.getArgument();
      Complex complex11 = complex9.INF.divide(complex2);
      Complex complex12 = complex3.divide(1940.011728674);
      complex12.isInfinite();
      Complex complex13 = complex0.I.atan();
      Complex complex14 = complex9.divide(complex1);
      Complex complex15 = complex14.add(complex1);
      complex15.pow(complex7);
      complex4.add(0.0);
      complex8.negate();
      complex3.multiply((-1487));
      complex13.cosh();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3363.8097581987), (-3363.8097581987));
      complex0.ONE.abs();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sinh();
      complex1.NaN.acos();
      complex2.NaN.readResolve();
      Complex complex3 = Complex.valueOf((-3363.8097581987));
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.ZERO.sin();
      complex5.I.pow(complex6);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.ZERO.multiply(527);
      complex1.isNaN();
      Complex complex9 = complex0.divide(complex2);
      complex9.NaN.multiply((-1579.3487962709737));
      Complex complex10 = complex9.ONE.add(complex3);
      complex2.multiply(complex9);
      Complex complex11 = complex1.tan();
      Complex complex12 = complex2.reciprocal();
      complex5.getArgument();
      complex5.cos();
      complex7.isNaN();
      complex8.toString();
      complex1.negate();
      complex4.multiply(527);
      complex11.pow(complex5);
      complex5.isInfinite();
      complex10.sqrt();
      complex12.cos();
      complex9.getReal();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(486.17252, 486.17252);
      Complex complex1 = complex0.ZERO.divide(486.17252);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.ONE.createComplex(486.17252, 486.17252);
      Complex complex4 = Complex.valueOf((-537.06978), 1524.32208);
      complex4.NaN.multiply(complex1);
      complex3.INF.multiply(0);
      Complex complex5 = complex2.ZERO.reciprocal();
      complex2.abs();
      complex2.ONE.asin();
      complex2.ONE.hashCode();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.I.conjugate();
      complex7.getField();
      complex7.INF.subtract(complex2);
      complex6.hashCode();
      complex1.negate();
      Complex complex8 = complex6.ZERO.sqrt();
      Complex complex9 = complex8.ZERO.negate();
      complex9.I.cos();
      Complex complex10 = Complex.I;
      complex9.ONE.pow(complex10);
      complex6.NaN.subtract((-766.39));
      complex6.asin();
      complex6.equals(complex5);
      complex2.readResolve();
      complex2.getImaginary();
      complex1.createComplex(1524.32208, (-766.39));
      complex0.cosh();
      Complex complex11 = complex2.tanh();
      complex11.getReal();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.tanh();
      Complex complex3 = complex1.asin();
      complex0.hashCode();
      complex0.hashCode();
      Complex complex4 = complex1.sqrt();
      complex3.getField();
      complex4.createComplex(0.0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double double0 = 2113.948501534765;
      Complex complex0 = Complex.valueOf(2113.948501534765);
      complex0.isInfinite();
      complex0.isInfinite();
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1809.81));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.createComplex(0.2018241584300995, 0.2018241584300995);
      complex2.ZERO.pow(complex0);
      Complex complex3 = Complex.valueOf(1400.1, 0.2018241584300995);
      Complex complex4 = complex1.cos();
      complex4.ZERO.hashCode();
      Complex complex5 = Complex.I;
      complex2.subtract(complex5);
      Complex complex6 = complex3.reciprocal();
      complex1.sinh();
      Complex complex7 = Complex.valueOf(0.0, (-1809.81));
      complex5.getImaginary();
      Complex complex8 = complex5.exp();
      complex4.add(complex5);
      complex8.I.toString();
      complex8.readResolve();
      complex8.subtract(complex6);
      complex2.pow(complex7);
      complex5.add((-1339.9758834));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, (-2089.0));
      Complex complex1 = complex0.multiply((-2089.0));
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex0.equals(complex1);
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex3.INF.sqrt1z();
      complex0.getImaginary();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.sqrt();
      complex1.subtract(0.39037787914276123);
      complex4.NaN.negate();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.subtract(complex1);
      complex8.ONE.pow((-1993.896));
      complex0.toString();
      Complex complex9 = complex5.ONE.subtract(complex6);
      Complex complex10 = complex5.exp();
      Complex complex11 = complex4.conjugate();
      complex6.ONE.asin();
      Complex complex12 = complex5.tan();
      complex12.NaN.hashCode();
      complex1.getImaginary();
      Complex complex13 = Complex.valueOf((-2089.0));
      complex13.ZERO.abs();
      complex9.getField();
      complex0.log();
      complex0.isNaN();
      complex1.conjugate();
      complex11.readResolve();
      complex12.divide(complex6);
      complex10.multiply((-1664));
      complex0.reciprocal();
      complex2.multiply(1567);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      complex1.ZERO.abs();
      complex1.ONE.readResolve();
      complex1.subtract(0.0);
      complex0.acos();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex4.ZERO.createComplex(1.5811884868243975E-11, 0.0);
      Complex complex6 = complex1.NaN.cosh();
      complex3.I.multiply(complex4);
      complex2.I.nthRoot(1587);
      complex2.equals((Object) null);
      complex2.getReal();
      complex1.sin();
      Complex complex7 = complex2.createComplex(844.7573169, 0.0);
      complex7.hashCode();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.divide(complex8);
      complex9.I.toString();
      complex6.divide(complex7);
      Complex complex10 = complex4.reciprocal();
      complex1.nthRoot(1587);
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1253.30405));
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.I.hashCode();
      complex1.ONE.divide(0.0);
      complex1.I.divide(complex0);
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = complex0.reciprocal();
      complex3.subtract(0.0);
      complex2.reciprocal();
      complex5.sqrt1z();
      complex1.isNaN();
      complex4.sin();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.3373196561281372E-150, 1346.1);
      Complex complex2 = complex0.subtract(complex1);
      complex0.I.getArgument();
      complex2.atan();
      Complex complex3 = complex1.pow(complex2);
      complex1.getReal();
      Complex complex4 = Complex.valueOf(1.3373196561281372E-150);
      complex4.ONE.atan();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex5.cosh();
      complex6.conjugate();
      Complex complex8 = complex6.conjugate();
      complex7.NaN.negate();
      complex8.I.multiply((-345.108573605936));
      complex2.ZERO.divide(1.3373196561281372E-150);
      Complex complex9 = complex6.sqrt1z();
      complex7.log();
      Complex complex10 = complex0.add(1.3373196561281372E-150);
      Complex complex11 = complex10.INF.sin();
      complex2.equals((Object) null);
      complex10.reciprocal();
      complex2.ZERO.asin();
      Complex complex12 = complex10.subtract(1.3373196561281372E-150);
      complex9.hashCode();
      complex12.negate();
      complex2.hashCode();
      complex1.log();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.3824992526093461E-8));
      Complex complex1 = complex0.add(1277.899653);
      complex1.INF.toString();
      Complex complex2 = Complex.valueOf(1277.899653, 1.1765332726757802E-8);
      complex1.getField();
      Complex complex3 = complex1.subtract(1277.899653);
      Complex complex4 = complex3.divide(complex2);
      complex2.subtract(complex0);
      complex2.multiply(0.0);
      Complex complex5 = complex3.log();
      complex3.sin();
      complex4.getField();
      Complex complex6 = complex5.sin();
      complex6.getField();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      complex1.ZERO.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.ONE.multiply(2126.77349);
      complex4.INF.subtract(2126.77349);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex1.I.pow(complex0);
      complex5.ZERO.nthRoot(1);
      complex5.hashCode();
      complex6.divide(complex1);
      Complex complex8 = Complex.valueOf((-5.72769785), 2126.77349);
      complex7.subtract((-5.72769785));
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double double0 = (-1762.2481052);
      Complex complex0 = new Complex((-1762.2481052), (-954.92196532));
      complex0.getArgument();
      Complex complex1 = complex0.pow((-1762.2481052));
      Complex.valueOf((-1762.2481052), (-954.92196532));
      complex0.I.atan();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex1.ZERO.subtract(0.0);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex0.sin();
      complex5.tan();
      Complex.valueOf((-3636.951759894));
      complex0.abs();
      complex4.tan();
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((double) 771);
      Complex complex2 = complex1.ONE.reciprocal();
      complex2.INF.multiply(3311);
      Complex complex3 = complex0.I.multiply(771);
      complex3.I.multiply(931.0);
      complex0.cosh();
      complex3.isNaN();
      Complex complex4 = complex1.exp();
      complex4.INF.abs();
      complex3.reciprocal();
      complex3.pow(0.0);
      Complex.valueOf((double) 771, 0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2082.37), (-1.0));
      Complex complex1 = new Complex((-2082.37), 104.95012358829);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.pow(2361.280997921);
      Complex complex4 = complex0.I.pow(complex2);
      complex4.NaN.pow(complex3);
      Complex complex5 = complex3.ONE.subtract(104.95012358829);
      complex0.isInfinite();
      complex3.isInfinite();
      complex1.ONE.subtract(2361.280997921);
      complex0.tan();
      complex0.isNaN();
      complex3.conjugate();
      Complex complex6 = complex2.ZERO.sqrt();
      Complex complex7 = complex2.multiply(104.95012358829);
      complex7.cos();
      complex5.getField();
      Complex complex8 = complex6.multiply(1.2145042419433594);
      complex8.INF.hashCode();
      Complex complex9 = complex2.createComplex(1.2145042419433594, (-1.0));
      complex7.isNaN();
      complex3.multiply((-756));
      Complex complex10 = complex9.tanh();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex0.NaN.subtract(1.0);
      complex2.INF.multiply((-3.3835280846270374E-8));
      Complex complex5 = complex4.add(complex1);
      complex0.ONE.getField();
      Complex complex6 = complex1.ZERO.negate();
      Complex complex7 = complex6.NaN.subtract(complex3);
      complex7.NaN.subtract(complex6);
      Complex complex8 = complex0.pow(0.0);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.ZERO.add(0.0);
      complex9.ONE.abs();
      complex1.isNaN();
      complex4.tanh();
      complex10.sinh();
      Complex complex11 = complex4.pow(1.0);
      complex1.multiply(1.0);
      complex0.tanh();
      complex11.hashCode();
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf(1.0, 1.0);
      complex1.add(complex5);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.divide(4110.574095488643);
      Complex complex4 = complex3.INF.asin();
      complex4.NaN.sqrt1z();
      Complex complex5 = complex3.I.sqrt();
      complex5.hashCode();
      complex0.getReal();
      complex4.add(2482.3914011);
      complex0.hashCode();
      Complex complex6 = complex0.acos();
      complex0.isNaN();
      Complex complex7 = complex3.NaN.exp();
      complex7.ONE.add(2482.3914011);
      Complex complex8 = complex6.divide(complex5);
      complex4.readResolve();
      Complex complex9 = complex8.createComplex(4110.574095488643, 4110.574095488643);
      Complex complex10 = complex9.tanh();
      complex8.exp();
      Complex complex11 = complex2.pow((-4277.0));
      complex11.I.getArgument();
      complex0.isNaN();
      Complex complex12 = complex10.sqrt1z();
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      complex0.ONE.toString();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.atan();
      complex2.sqrt1z();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      complex1.NaN.createComplex(0.0, (-162.242));
      Complex complex2 = complex1.ZERO.tan();
      complex2.ONE.subtract(0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.log();
      complex0.negate();
      complex4.hashCode();
      complex2.nthRoot(776);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.ZERO.subtract((-1.0));
      Complex.valueOf(0.0);
      complex4.NaN.reciprocal();
      Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex2.ZERO.sinh();
      Complex complex6 = complex5.I.subtract((-1.0));
      complex6.I.tanh();
      Complex complex7 = Complex.valueOf((-1.0), (-297.4315138));
      Complex complex8 = complex7.NaN.subtract(complex4);
      Complex complex9 = complex2.NaN.multiply(complex7);
      complex1.isInfinite();
      complex2.getField();
      Complex complex10 = complex1.negate();
      Complex complex11 = complex10.asin();
      complex9.getImaginary();
      complex10.subtract(0.0);
      complex10.isInfinite();
      complex3.log();
      Complex.valueOf((-297.4315138), (-1.0));
      complex8.pow(0.0);
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.I.acos();
      complex1.sqrt1z();
      Complex complex3 = complex0.subtract(complex1);
      complex3.ONE.multiply(2534);
      Complex complex4 = complex3.reciprocal();
      complex2.atan();
      complex4.hashCode();
      complex3.sin();
      complex4.asin();
      complex1.multiply(2534);
      Complex complex5 = complex3.add(complex4);
      complex5.sin();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = new Complex(2.0);
      complex0.NaN.acos();
      Complex complex2 = complex1.divide((-867.6987150072));
      complex1.I.sinh();
      Complex complex3 = complex0.pow(complex1);
      complex3.ONE.add(complex2);
      complex3.INF.divide(0.0);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.ONE.divide((-867.6987150072));
      complex4.NaN.hashCode();
      complex4.abs();
      Complex complex6 = complex2.I.multiply((-876));
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex7.NaN.reciprocal();
      Complex complex9 = complex4.asin();
      complex9.ZERO.conjugate();
      complex9.NaN.divide(complex5);
      complex8.readResolve();
      complex8.add(2.0);
      complex6.readResolve();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-3786.84401735));
      Complex complex1 = new Complex((-2.8477710945673134E65), 2912.9);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.ZERO.abs();
      Complex complex4 = complex2.reciprocal();
      complex4.hashCode();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.tanh();
      Complex complex7 = Complex.valueOf((-2.8477710945673134E65), (-2314.66177));
      complex6.abs();
      complex7.INF.createComplex(2912.9, 2912.9);
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.pow(1507.841);
      Complex complex11 = complex7.asin();
      complex4.pow(0.0);
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      complex4.getImaginary();
      complex11.getArgument();
      complex7.subtract(complex10);
      complex8.sin();
      Complex complex13 = complex12.log();
      complex13.subtract((-2314.66177));
      complex13.conjugate();
      complex5.createComplex((-2314.66177), 0.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      complex0.NaN.multiply(2261.6932819956);
      Complex complex2 = complex1.I.add(940.6638472);
      complex2.I.cos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex4.ONE.multiply(2261.6932819956);
      Complex complex6 = Complex.valueOf(0.0, 756.18);
      complex6.I.sqrt();
      Complex complex7 = complex6.subtract(complex0);
      complex1.log();
      Complex complex8 = complex7.add((-2325.0));
      complex1.cos();
      Complex complex9 = complex1.divide(1160.1);
      complex9.reciprocal();
      complex0.log();
      complex5.multiply(complex8);
      complex3.log();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.subtract(605.4593);
      Complex complex2 = complex0.sin();
      complex1.NaN.atan();
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = complex3.I.sqrt();
      complex4.sqrt1z();
      Complex.valueOf((double) 1, (double) (-2882));
      Complex complex5 = complex3.NaN.multiply((-2882));
      complex5.ZERO.tanh();
      complex1.getArgument();
      Complex complex6 = complex2.ZERO.sqrt();
      complex6.ONE.abs();
      complex1.readResolve();
      complex4.readResolve();
      complex4.conjugate();
      complex1.subtract((-1903.3));
      complex3.nthRoot(1);
      complex6.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.multiply((-3483));
      Complex complex4 = complex0.I.add(complex2);
      Complex complex5 = complex3.NaN.subtract(complex0);
      String string0 = complex5.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex6 = Complex.valueOf((-20.0), (-20.0));
      Complex complex7 = complex0.multiply(complex6);
      List<Complex> list0 = complex0.nthRoot(1);
      assertEquals(1, list0.size());
      
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex0.multiply(1);
      Complex complex10 = complex9.I.pow(complex1);
      complex10.NaN.sqrt();
      assertEquals((-0.7812118921104881), complex10.getReal(), 0.01);
      assertEquals(0.6242659526396992, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex7.acos();
      Complex complex12 = complex11.INF.conjugate();
      complex12.cos();
      Complex complex13 = complex4.NaN.sqrt();
      Complex complex14 = complex13.NaN.negate();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex7.acos();
      complex3.isInfinite();
      complex16.I.abs();
      Complex complex17 = complex4.divide((double) 1);
      complex16.equals(complex4);
      Complex complex18 = complex6.cosh();
      Complex complex19 = Complex.valueOf(1.0);
      complex8.add(complex0);
      Complex complex20 = complex18.asin();
      assertEquals(Double.POSITIVE_INFINITY, complex20.getReal(), 0.01);
      
      Complex complex21 = complex14.acos();
      assertTrue(complex4.equals((Object)complex17));
      
      Complex complex22 = complex8.multiply((-20.0));
      assertTrue(complex0.equals((Object)complex9));
      assertNotSame(complex22, complex16);
      assertSame(complex22, complex21);
      
      Complex complex23 = complex15.sinh();
      assertEquals(0.0, complex23.getImaginary(), 0.01);
      assertFalse(complex23.equals((Object)complex19));
      assertEquals(0.0, complex23.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ONE.multiply(0.0);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.cos();
      complex1.getReal();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex6.add(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertTrue(complex9.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex7.log();
      assertEquals(0.16143936157119557, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex11 = complex3.multiply(1);
      assertSame(complex11, complex8);
      assertSame(complex11, complex3);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-1002.926));
      Complex complex1 = new Complex((-1002.926));
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1002.926), complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex((-1.0200858727747717E-8));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex1.hashCode();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.conjugate();
      complex4.NaN.hashCode();
      complex1.I.sinh();
      Complex complex5 = complex3.cos();
      complex5.ZERO.conjugate();
      Complex complex6 = complex3.sinh();
      assertEquals(1.1752011936438014, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex2.subtract(0.0);
      assertEquals(-0.0, complex7.getReal(), 0.01);
      
      double double0 = complex3.abs();
      assertEquals(1.0, double0, 0.01);
      assertTrue(complex3.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.13925230503082275);
      boolean boolean0 = complex0.equals("");
      assertFalse(boolean0);
      
      complex0.getImaginary();
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(0.13925230503082275);
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex2.I.pow(0.13925230503082275);
      assertEquals(0.21699689989348045, complex4.getImaginary(), 0.01);
      assertEquals(0.9761722929056217, complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex0.reciprocal();
      complex3.isNaN();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(0.3731652516390329, complex1.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex7 = complex6.divide(complex5);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(370.3101406001273, complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.ONE.multiply(1);
      Complex complex2 = Complex.valueOf(1.792783182582235E246);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.pow(complex0);
      assertEquals(0.8414709848078965, complex3.getReal(), 0.01);
      assertTrue(complex4.equals((Object)complex1));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex5 = Complex.valueOf(1.792783182582235E246, 1.792783182582235E246);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.pow(complex2);
      String string0 = complex8.I.toString();
      assertTrue(complex8.isNaN());
      assertEquals(1.792783182582235E246, complex2.getReal(), 0.01);
      assertEquals("(0.0, 1.0)", string0);
      
      Complex complex9 = complex6.multiply(1.792783182582235E246);
      assertEquals(2.816097237939839E246, complex9.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex5.tanh();
      boolean boolean0 = complex10.isNaN();
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3180.285));
      Complex complex1 = complex0.add((-3180.285));
      assertEquals((-6360.57), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }
}
