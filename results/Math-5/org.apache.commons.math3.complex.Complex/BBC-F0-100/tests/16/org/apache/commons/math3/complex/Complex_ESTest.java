/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:23:19 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(851, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-4410.697271055744), (double) 851);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-845.0), 1675.93103026);
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex2.INF.log();
      Complex complex5 = complex0.add(complex1);
      complex5.I.subtract(complex1);
      complex5.ZERO.add(complex4);
      complex5.I.getField();
      Complex complex6 = complex1.subtract(1675.93103026);
      Complex complex7 = complex6.asin();
      complex3.I.hashCode();
      Complex complex8 = complex2.subtract(complex1);
      complex0.NaN.subtract(complex7);
      Complex complex9 = complex1.subtract(3213.10179882382);
      complex9.NaN.cos();
      Complex complex10 = complex4.asin();
      complex10.INF.readResolve();
      Complex.valueOf((-845.0));
      complex3.getField();
      complex4.divide(complex1);
      complex2.multiply((-845.0));
      Complex complex11 = complex7.multiply(184);
      Complex complex12 = complex11.I.atan();
      complex12.I.hashCode();
      Complex complex13 = complex3.divide(complex8);
      complex4.multiply(184);
      complex13.abs();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.ONE.tan();
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(1744.652, Double.POSITIVE_INFINITY);
      complex4.asin();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-372.6630294634), (-372.6630294634));
      Complex complex1 = complex0.sqrt();
      complex1.ONE.pow(complex0);
      Complex complex2 = complex1.tan();
      complex2.sqrt();
      Complex complex3 = complex2.asin();
      complex2.readResolve();
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.pow(20.0);
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex3.sinh();
      complex4.NaN.log();
      complex4.ZERO.subtract(complex3);
      Complex complex5 = complex0.createComplex(1017.34498645, 2.0);
      Complex complex6 = complex0.divide(319.446);
      Complex complex7 = Complex.valueOf((-1169.76));
      Complex complex8 = complex6.ONE.multiply(complex7);
      complex8.INF.pow((-2205.465420273324));
      Complex complex9 = complex2.exp();
      complex2.INF.readResolve();
      complex1.multiply((-1563.3));
      complex3.tan();
      complex0.toString();
      complex5.tan();
      try { 
        complex9.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 25.677654698528);
      Complex complex1 = complex0.tanh();
      complex0.sqrt1z();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(19.658523244335996);
      Complex complex1 = complex0.pow(19.658523244335996);
      complex1.acos();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 2580);
      Complex complex1 = Complex.valueOf((double) 2580, 658.341950816837);
      complex0.pow(complex1);
      complex0.nthRoot(2580);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.divide(complex1);
      complex3.readResolve();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.abs();
      complex0.sin();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex((-1019.96), (-1019.96));
      complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-15.681576664092635));
      complex0.tanh();
      complex0.toString();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.543593236124, 8.543593236124);
      Complex complex1 = complex0.tanh();
      complex0.I.sqrt1z();
      complex1.readResolve();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(362.04144131655346, Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(113.18326, (-930.0));
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (double) 1360);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
      complex1.multiply(37);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.abs();
      complex0.multiply(complex1);
      complex0.sin();
      Complex complex2 = complex1.negate();
      complex2.I.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf((-930.0), Double.POSITIVE_INFINITY);
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(2.5257912724706667E-15, 518.014247076);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ZERO.asin();
      complex1.INF.subtract(complex2);
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex0.subtract(2.5257912724706667E-15);
      Complex complex6 = complex5.ZERO.sinh();
      complex1.NaN.readResolve();
      complex6.INF.multiply((-1359.432179));
      complex4.ZERO.exp();
      Complex complex7 = Complex.valueOf(433.9244);
      complex1.cosh();
      Complex complex8 = complex2.reciprocal();
      complex8.ONE.atan();
      complex4.createComplex(518.014247076, 433.9244);
      Complex complex9 = complex1.exp();
      complex6.INF.divide(complex5);
      complex3.pow(complex6);
      complex6.getField();
      complex7.cos();
      complex9.add((-2.8897741533029375E-8));
      Complex complex10 = complex3.multiply((-1));
      complex10.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.abs();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.createComplex(553.5580867, (-930.0));
      Complex complex5 = Complex.valueOf((-930.0));
      Complex complex6 = complex5.atan();
      complex6.acos();
      Complex complex7 = complex4.divide(complex2);
      Complex complex8 = complex2.createComplex(Double.POSITIVE_INFINITY, 1942.7516608745013);
      Complex complex9 = new Complex((-930.0));
      Complex complex10 = complex3.pow((-737.65386));
      Complex.valueOf(0.0);
      complex10.multiply(1738);
      complex7.multiply(1.0479910373687744);
      complex7.getField();
      complex4.log();
      Complex.valueOf((-344.5555), (double) 583);
      complex3.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      complex2.subtract((-2348.841664));
      Complex complex3 = Complex.ZERO;
      complex3.equals(complex1);
      Complex complex4 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-15.681576664092635), (-15.681576664092635));
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf((-15.681576664092635), 2234.1250239807);
      complex2.atan();
      complex1.readResolve();
      Complex complex3 = Complex.I;
      complex1.subtract(2234.1250239807);
      Complex complex4 = Complex.ZERO;
      complex3.equals(complex4);
      Complex complex5 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4265.75197, (-278.275));
      complex1.INF.getField();
      complex1.I.tanh();
      complex1.nthRoot(1345);
      complex0.getArgument();
      Complex.valueOf(20.0, 2064.3850999447);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ONE;
      complex3.isInfinite();
      Complex complex4 = complex1.asin();
      Complex.valueOf(2064.3850999447, 1.0);
      complex4.tan();
      complex1.negate();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      complex0.NaN.add((-1323.66834190428));
      Complex complex2 = complex0.reciprocal();
      complex0.abs();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.negate();
      complex2.NaN.createComplex(1.0, 553.5580867);
      Complex complex5 = complex4.INF.atan();
      complex4.acos();
      complex3.ONE.divide(complex2);
      complex5.NaN.createComplex(553.5580867, 0.0);
      int int0 = (-2543);
      Complex complex6 = new Complex((-2543));
      Complex complex7 = complex0.pow(0.0);
      Complex complex8 = Complex.valueOf((-1323.66834190428));
      complex8.INF.multiply(583);
      // Undeclared exception!
      complex7.nthRoot(5623);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2288.922786724393, 2.497433486262734);
      Complex complex1 = complex0.exp();
      complex0.hashCode();
      complex1.getArgument();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = Complex.valueOf(2288.922786724393, 2288.922786724393);
      complex3.multiply(2147280487);
      complex3.reciprocal();
      complex2.toString();
      Complex.valueOf(1128.7077027, 802.4048763903387);
      complex0.atan();
      Complex complex4 = new Complex((-3003.3));
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.subtract(106.233870397743);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.INF;
      complex8.equals(complex7);
      complex6.getReal();
      complex7.exp();
      complex8.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4265.75197, (-278.275));
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = new Complex((-1868688.0), Double.NaN);
      Complex complex4 = complex3.multiply((-2057));
      Complex complex5 = complex4.reciprocal();
      complex2.toString();
      Complex complex6 = Complex.valueOf(Double.NaN, 4265.75197);
      complex5.atan();
      Complex complex7 = Complex.INF;
      complex7.readResolve();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.subtract((-344.5555));
      Complex complex11 = Complex.ZERO;
      complex6.equals(complex10);
      complex9.getReal();
      complex9.exp();
      complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(126);
      Complex complex3 = new Complex((-393.0), Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.reciprocal();
      complex2.toString();
      Complex complex5 = Complex.valueOf((-3.823598848147758E187), (-393.0));
      Complex complex6 = complex2.atan();
      Complex complex7 = complex5.conjugate();
      complex7.readResolve();
      Complex complex8 = Complex.I;
      complex7.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.ZERO;
      complex2.readResolve();
      complex4.equals(complex0);
      complex9.getReal();
      complex6.exp();
      Complex complex10 = Complex.valueOf(802.4048763903387);
      complex10.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      complex0.divide(complex1);
      complex0.toString();
      complex2.multiply((-1201.8037));
      Complex complex3 = complex2.reciprocal();
      complex3.readResolve();
      complex2.isInfinite();
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-2530.755973285));
      complex0.getImaginary();
      Complex complex1 = complex0.exp();
      complex1.hashCode();
      complex0.getArgument();
      complex1.multiply((-4));
      Complex complex2 = complex1.multiply((-4));
      complex1.reciprocal();
      complex0.toString();
      Complex complex3 = new Complex((-2530.755973285));
      complex1.pow(4.0430160253378594E-275);
      Complex.valueOf(Double.NaN);
      Complex complex4 = complex0.multiply(2578);
      complex2.isInfinite();
      complex4.multiply(1.021716833114624);
      complex1.log();
      Complex complex5 = Complex.valueOf((double) 2578, (-344.5555));
      Complex complex6 = Complex.ONE;
      complex5.tan();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      complex0.NaN.add((-1323.66834190428));
      Complex complex2 = complex0.reciprocal();
      complex0.abs();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.negate();
      complex2.NaN.createComplex(1.0, 553.5580867);
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex4.acos();
      complex3.ONE.divide(complex2);
      Complex complex7 = complex5.NaN.createComplex(553.5580867, 0.0);
      Complex complex8 = Complex.valueOf(802.4048763903387, 8.81860282490643E125);
      complex7.atan();
      complex2.readResolve();
      Complex complex9 = Complex.I;
      Complex complex10 = complex8.subtract(553.5580867);
      Complex complex11 = Complex.ZERO;
      complex6.equals("2F#iCs53 'r\"Hts");
      complex7.getReal();
      complex10.exp();
      Complex complex12 = Complex.valueOf((-1323.66834190428), 1944.999);
      complex7.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex((-2373.3779701271224), (-2373.3779701271224));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.tan();
      complex0.createComplex((-1367.0), (-2373.3779701271224));
      complex2.sinh();
      Complex complex5 = Complex.ONE;
      complex1.cos();
      complex4.atan();
      Complex complex6 = Complex.ZERO;
      complex6.tanh();
      Complex complex7 = Complex.valueOf((-1367.0));
      complex7.asin();
      Complex complex8 = Complex.INF;
      complex8.subtract(complex7);
      complex1.negate();
      complex4.atan();
      Complex complex9 = Complex.INF;
      complex9.reciprocal();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4265.75197, (-278.275));
      complex1.INF.getField();
      Complex complex2 = complex1.I.tanh();
      complex1.nthRoot(1345);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.cos();
      complex2.atan();
      Complex complex5 = complex2.tanh();
      complex3.asin();
      Complex complex6 = complex5.subtract(complex3);
      complex5.negate();
      complex6.atan();
      complex0.reciprocal();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex3.I.createComplex((-2460.69608486962), (-2460.69608486962));
      complex1.sinh();
      complex3.getArgument();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex2.tan();
      Complex complex5 = Complex.ONE;
      complex2.isInfinite();
      complex5.asin();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex2.tan();
      complex5.negate();
      complex4.isInfinite();
      Complex.valueOf((-2460.69608486962));
      complex1.multiply(486);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(2.497433486262734);
      Complex complex3 = Complex.I;
      complex3.toString();
      Complex complex4 = complex2.multiply(2.497433486262734);
      complex4.reciprocal();
      complex4.readResolve();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 1.0142320772726397E304;
      Complex complex0 = Complex.valueOf(1.0142320772726397E304);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      complex0.divide(complex1);
      complex0.toString();
      complex2.multiply((-1201.8037));
      Complex complex3 = complex2.reciprocal();
      complex3.readResolve();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1.67303880587356));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex1.divide(complex0);
      complex2.createComplex((-1.67303880587356), (-1.67303880587356));
      complex2.multiply((-754));
      Complex complex4 = Complex.valueOf((-1201.8037));
      Complex complex5 = complex4.pow((double) (-2543));
      Complex complex6 = Complex.valueOf((-832.51287906));
      complex6.add(1847.5887097791044);
      complex1.multiply(1);
      complex4.reciprocal();
      complex1.isInfinite();
      complex4.multiply((-1201.8037));
      Complex complex7 = new Complex(1.3555502536444713E-266, (-3350.87180876862));
      complex7.getField();
      Complex complex8 = complex3.log();
      complex8.I.sin();
      Complex.valueOf(0.0013916573662785755, 0.01295889317523911);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex0.pow(complex5);
      complex3.tan();
      complex1.negate();
      complex10.isInfinite();
      complex7.multiply(0.0013916573662785755);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf((-6.183525570536406E93));
      complex0.I.tanh();
      complex1.ZERO.createComplex(Double.NaN, 0.0);
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex2.ONE.pow(complex0);
      complex0.I.tanh();
      Complex complex4 = complex0.I.tan();
      complex3.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      complex5.I.hashCode();
      Complex complex6 = complex0.add((-6.183525570536406E93));
      complex6.NaN.tanh();
      complex6.I.abs();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex1.tanh();
      complex7.I.toString();
      complex7.nthRoot(1);
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex9.I.subtract(Double.NaN);
      complex10.I.pow((double) 1);
      Complex complex11 = new Complex(Double.NaN, 1.0);
      complex11.ONE.cosh();
      complex8.getField();
      complex1.sqrt1z();
      Complex.valueOf((-1389.63969392628), (-5.0054634662706464E-9));
      Complex complex12 = complex6.reciprocal();
      complex4.getImaginary();
      complex1.exp();
      complex12.reciprocal();
      complex8.multiply((-1389.63969392628));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4265.75197, (-278.275));
      complex1.INF.getField();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.INF.cosh();
      complex1.nthRoot(1345);
      complex0.getArgument();
      Complex complex4 = Complex.valueOf(20.0, 2064.3850999447);
      Complex complex5 = Complex.valueOf(1.0, (double) 2589);
      complex0.tan();
      Complex complex6 = complex5.atan();
      complex1.isInfinite();
      complex4.divide((-838.5490868814));
      complex5.getArgument();
      complex1.sinh();
      complex3.tan();
      complex1.tanh();
      complex4.createComplex(2064.3850999447, 20.0);
      Complex complex7 = Complex.ZERO;
      complex7.acos();
      complex4.sinh();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1916.663, 1916.663);
      complex0.tan();
      Complex complex1 = Complex.valueOf((-418.579017092), 2.9965457554591114E224);
      Complex complex2 = complex1.atan();
      complex1.isInfinite();
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.valueOf((-418.579017092), 4.4266130556431266E-266);
      complex2.tan();
      complex3.negate();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(12.255162609881756, 12.255162609881756);
      Complex complex1 = Complex.valueOf((-483.3201332925636), 12.255162609881756);
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex0.abs();
      Complex complex4 = Complex.valueOf((-483.3201332925636), 0.41421356237309515);
      complex3.getField();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex4.cosh();
      complex3.multiply(complex4);
      complex4.readResolve();
      complex6.pow(complex2);
      Complex complex7 = Complex.NaN;
      complex7.NaN.log();
      complex7.nthRoot(1345);
      complex3.nthRoot(2589);
      complex5.getArgument();
      Complex complex8 = Complex.valueOf((-1426.311041120967), 20.0);
      Complex complex9 = Complex.INF;
      complex2.atan();
      complex9.isInfinite();
      Complex complex10 = complex4.divide(Double.NaN);
      complex8.getArgument();
      Complex complex11 = complex0.sinh();
      complex8.tan();
      complex11.tanh();
      complex5.createComplex(20.0, 2589);
      complex6.acos();
      complex5.sinh();
      complex1.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply((-1.0));
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.valueOf(7.526183084319617E-8, 1752.980066269);
      Complex complex5 = complex4.reciprocal();
      complex3.getImaginary();
      complex5.exp();
      Complex complex6 = Complex.ONE;
      complex6.reciprocal();
      complex6.multiply(922.62308386);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0142320772726397E304);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(1128.7077027, 1128.7077027);
      complex0.INF.acos();
      Complex complex1 = new Complex(1128.7077027, 1128.7077027);
      complex1.ONE.atan();
      complex0.subtract(complex1);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.ONE.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex0.ONE.tan();
      Complex complex6 = Complex.valueOf(0.0, 1318.8543217646);
      Complex complex7 = complex6.ONE.sqrt1z();
      complex0.ZERO.createComplex(1318.8543217646, 1318.8543217646);
      Complex complex8 = complex1.ONE.cosh();
      complex1.ONE.conjugate();
      complex7.subtract(complex4);
      complex3.readResolve();
      Complex complex9 = complex3.conjugate();
      complex7.getArgument();
      complex9.multiply(1479390462);
      Complex complex10 = complex8.multiply(0);
      Complex complex11 = complex10.reciprocal();
      complex10.toString();
      Complex complex12 = Complex.valueOf(0.0, 2.497433486262734);
      complex10.atan();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = Complex.I;
      Complex complex15 = complex6.subtract(0.0);
      complex8.equals(complex5);
      complex7.getReal();
      complex11.exp();
      complex15.pow(complex10);
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.add((-3615.6));
      complex2.tanh();
      complex1.abs();
      Complex complex3 = complex2.sqrt1z();
      complex0.tanh();
      complex0.toString();
      complex2.nthRoot(1);
      Complex complex4 = complex0.cosh();
      complex2.subtract(0.7615941559557649);
      Complex complex5 = complex3.pow(0.7615941559557649);
      Complex complex6 = complex5.cosh();
      complex4.cosh();
      complex6.getField();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = Complex.valueOf(1167.1070114063, (-565.5324420618068));
      Complex complex9 = complex7.reciprocal();
      complex1.getImaginary();
      Complex complex10 = complex8.exp();
      complex2.ZERO.sqrt1z();
      Complex complex11 = complex10.reciprocal();
      complex11.I.multiply((double) 1);
      complex9.multiply((-2716.27142602));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-870.5259878548), 0.5629583597183228);
      complex0.sqrt1z();
      Complex complex3 = complex2.createComplex(0.0, (-299.68));
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = Complex.INF;
      complex7.readResolve();
      complex4.conjugate();
      complex1.getArgument();
      complex4.multiply(0);
      complex5.multiply(864);
      Complex complex8 = complex5.reciprocal();
      complex8.toString();
      Complex complex9 = Complex.valueOf((-299.68), 1.0);
      Complex complex10 = Complex.NaN;
      complex10.atan();
      Complex complex11 = complex3.conjugate();
      complex9.readResolve();
      Complex complex12 = Complex.I;
      complex5.subtract(0.5629583597183228);
      complex11.equals("(0.0, 0.0)");
      complex6.getReal();
      Complex complex13 = complex9.exp();
      Complex complex14 = Complex.ONE;
      complex12.pow(complex14);
      complex13.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-2530.755973285));
      complex0.getImaginary();
      Complex complex1 = complex0.exp();
      complex1.hashCode();
      complex0.getArgument();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex1.multiply(0);
      Complex complex4 = complex1.reciprocal();
      complex0.toString();
      Complex.valueOf(802.4048763903387, 1159.527);
      complex1.atan();
      complex4.conjugate();
      complex4.readResolve();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.subtract((double) 0);
      Complex complex7 = Complex.ZERO;
      complex7.equals(complex2);
      complex3.getReal();
      complex6.exp();
      complex7.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-2279.691983), (-2279.691983));
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.acos();
      complex1.ZERO.cos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.atan();
      complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.negate();
      complex1.NaN.abs();
      Complex complex3 = complex2.INF.conjugate();
      complex3.I.hashCode();
      complex3.ONE.multiply(1);
      complex0.I.getArgument();
      complex0.ONE.abs();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex5.ONE.multiply(complex1);
      Complex complex7 = complex6.NaN.tan();
      complex4.INF.toString();
      complex2.equals(complex1);
      Complex complex8 = complex2.subtract(Double.NaN);
      Complex complex9 = complex8.ONE.divide(Double.NaN);
      complex9.I.nthRoot(1);
      complex2.isInfinite();
      Complex complex10 = complex2.sinh();
      Complex.valueOf(404.82206457522);
      Complex complex11 = complex4.acos();
      complex5.getImaginary();
      complex11.acos();
      complex4.divide(complex8);
      complex4.getField();
      complex10.exp();
      complex7.reciprocal();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.NaN.add((-1323.66834190428));
      Complex complex2 = complex0.reciprocal();
      complex0.abs();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.negate();
      complex2.NaN.createComplex(1.0, 553.5580867);
      Complex complex5 = complex4.INF.atan();
      complex3.ONE.divide(complex2);
      complex5.NaN.createComplex(553.5580867, 0.0);
      Complex complex6 = complex3.multiply((-2537));
      Complex complex7 = complex3.ZERO.divide(complex1);
      Complex complex8 = complex7.INF.multiply(583);
      complex4.I.reciprocal();
      complex3.isInfinite();
      Complex complex9 = complex2.multiply((-344.5555));
      complex9.ZERO.tanh();
      complex9.NaN.getField();
      complex3.log();
      Complex.valueOf((-1323.66834190428), 0.0);
      Complex complex10 = new Complex((-130.143072671864));
      complex8.INF.hashCode();
      Complex complex11 = complex6.add(complex10);
      complex4.toString();
      Complex complex12 = complex8.divide((-1323.66834190428));
      complex1.multiply(complex12);
      complex11.pow((-773.9981));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1.67303880587356));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.INF.tanh();
      complex3.I.multiply(Double.POSITIVE_INFINITY);
      complex2.I.divide(complex1);
      complex0.I.toString();
      Complex complex4 = complex0.sqrt();
      complex0.abs();
      complex1.sqrt();
      Complex complex5 = Complex.ONE;
      complex4.hashCode();
      complex4.isNaN();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(2.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.atan();
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex.valueOf((-483.464), (-1.0));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex0.abs();
      Complex complex3 = Complex.valueOf((-483.464), 0.41421356237309515);
      complex2.getField();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.cosh();
      complex2.multiply(complex3);
      complex3.readResolve();
      complex5.pow(complex1);
      Complex complex6 = Complex.NaN;
      complex6.nthRoot(1345);
      complex2.nthRoot(2589);
      complex4.getArgument();
      Complex complex7 = Complex.valueOf((-1426.311041120967), 20.0);
      Complex complex8 = complex4.tan();
      complex1.atan();
      complex8.isInfinite();
      complex3.divide(Double.NaN);
      complex7.getArgument();
      Complex complex9 = complex0.sinh();
      complex7.tan();
      complex9.tanh();
      complex4.createComplex(20.0, 2589);
      complex5.acos();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-2686.0));
      Complex complex1 = complex0.createComplex(0.4007945903118052, 1234.0);
      Complex complex2 = new Complex((-9.616457442665051E-9));
      Complex complex3 = complex2.acos();
      complex1.sinh();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.ONE.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.cos();
      Complex complex7 = Complex.INF;
      complex2.toString();
      complex3.subtract(complex4);
      complex1.getArgument();
      complex4.pow(0.0);
      Complex complex8 = Complex.ZERO;
      complex4.multiply(complex8);
      complex6.sin();
      complex5.equals(object0);
      Complex complex9 = complex4.cos();
      Complex.valueOf((-1485.1));
      Complex complex10 = new Complex(1.26570724146049E257);
      complex10.asin();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex2.multiply(1379);
      Complex complex13 = Complex.ONE;
      complex4.pow(complex9);
      complex12.tan();
      complex0.negate();
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1408.675171, 1771.045639);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      complex1.INF.log();
      complex2.getReal();
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.I.add(complex3);
      complex4.I.multiply(0);
      complex2.nthRoot(2397);
      Complex complex5 = complex2.ZERO.multiply((-484.218554));
      complex5.getArgument();
      complex1.subtract(complex0);
      complex2.toString();
      Complex complex6 = complex1.exp();
      complex1.pow(complex0);
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1822.81244, 1822.81244);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.exp();
      complex3.INF.negate();
      complex2.getImaginary();
      complex0.I.sin();
      complex0.getArgument();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = Complex.valueOf((-483.464), (-1.0));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex0.abs();
      complex0.ZERO.subtract(complex2);
      complex2.ONE.atan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = Complex.INF;
      complex4.NaN.toString();
      complex5.ONE.subtract(complex6);
      complex4.ONE.getArgument();
      complex0.subtract((-1.0));
      Complex complex7 = complex4.pow(1.4142135623730951);
      Complex complex8 = complex7.I.multiply(complex4);
      complex0.sin();
      complex1.equals(complex3);
      Complex complex9 = complex1.cos();
      Complex.valueOf(1792.40433);
      complex9.ZERO.asin();
      Complex complex10 = complex9.cos();
      complex9.multiply((-3709));
      Complex complex11 = Complex.ONE;
      complex10.pow(complex11);
      complex10.tan();
      complex8.negate();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1.67303880587356));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.I.divide(complex1);
      complex0.I.toString();
      Complex complex3 = complex0.sqrt();
      complex0.abs();
      complex1.sqrt();
      complex3.sin();
      complex3.hashCode();
      complex3.isNaN();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-2.2153227096187463E-9));
      Complex complex1 = complex0.atan();
      complex1.I.getField();
      Complex complex2 = complex1.NaN.createComplex((-2434.0), (-617.066739865));
      Complex complex3 = complex1.pow((-1436.74537));
      Complex complex4 = complex3.subtract((-1436.74537));
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.ONE.negate();
      complex6.INF.hashCode();
      complex6.INF.getField();
      complex2.tanh();
      complex1.add(complex4);
      Complex complex7 = Complex.valueOf((-2434.0));
      complex4.subtract((-239.4230763301362));
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.subtract((-1804.1180537056));
      Complex complex2 = Complex.valueOf((-1804.1180537056));
      Complex complex3 = complex0.ZERO.atan();
      complex3.NaN.getField();
      Complex.valueOf(2.0);
      complex1.NaN.conjugate();
      Complex complex4 = complex3.ZERO.add((-9.616457442665051E-9));
      complex0.isNaN();
      Complex complex5 = complex2.exp();
      complex5.createComplex(2695.0, 2695.0);
      complex5.NaN.divide((-1305.8760681442));
      Complex complex6 = complex4.I.createComplex((-1804.1180537056), (-9.616457442665051E-9));
      Complex.valueOf(6.283185307179586);
      complex6.INF.multiply(complex3);
      complex2.ONE.toString();
      Complex complex7 = complex0.conjugate();
      complex4.tanh();
      Complex complex8 = complex7.NaN.divide(5.235528379688445E-8);
      complex8.ONE.divide(0.0);
      Complex complex9 = complex2.sin();
      complex9.getArgument();
      Complex complex10 = complex7.subtract((-9.616457442665051E-9));
      complex1.getField();
      complex4.add(2695.0);
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      complex0.ONE.getArgument();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex3.ZERO.cosh();
      complex4.hashCode();
      complex2.getField();
      complex0.abs();
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.ONE.multiply(0.0);
      Complex complex8 = complex0.pow(complex3);
      complex8.INF.toString();
      Complex complex9 = complex5.NaN.asin();
      complex9.INF.tanh();
      Complex complex10 = complex2.multiply(complex8);
      complex8.I.getField();
      Complex complex11 = complex5.NaN.pow(complex10);
      complex11.sqrt1z();
      Complex.valueOf(20.0);
      Complex complex12 = complex5.reciprocal();
      complex12.sinh();
      Complex complex13 = complex4.cosh();
      Complex complex14 = complex13.I.reciprocal();
      complex4.tanh();
      complex7.negate();
      complex0.hashCode();
      complex14.atan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1.15945645153806E-8), (-1.15945645153806E-8));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.atan();
      complex1.getReal();
      Complex complex3 = complex1.INF.add((-1595.9));
      complex3.INF.sqrt1z();
      Complex complex4 = Complex.valueOf((-1.15945645153806E-8), 4823.195016261434);
      Complex complex5 = complex1.negate();
      complex4.ONE.hashCode();
      Complex complex6 = complex1.negate();
      complex6.INF.pow((-1.15945645153806E-8));
      complex5.INF.tanh();
      Complex complex7 = complex4.atan();
      complex7.INF.multiply((-1.15945645153806E-8));
      complex2.hashCode();
      complex5.NaN.divide(0.0);
      complex4.abs();
      complex5.add(complex4);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.ONE.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.NaN.multiply(complex0);
      complex3.ONE.conjugate();
      complex0.ONE.tan();
      Complex complex4 = Complex.valueOf(0.0, 1318.8543217646);
      complex4.ONE.sqrt1z();
      Complex complex5 = complex0.ZERO.createComplex(1318.8543217646, 1318.8543217646);
      complex1.ONE.cosh();
      Complex complex6 = complex1.ONE.conjugate();
      Complex complex7 = complex0.subtract(complex1);
      complex7.INF.readResolve();
      Complex complex8 = complex6.conjugate();
      complex4.ZERO.getArgument();
      complex5.multiply(0);
      Complex complex9 = complex3.multiply(0);
      complex9.ZERO.reciprocal();
      complex8.toString();
      Complex.valueOf(1318.8543217646, Double.NaN);
      Complex complex10 = complex8.atan();
      complex10.INF.conjugate();
      complex4.readResolve();
      Complex complex11 = Complex.I;
      complex2.ONE.subtract((double) 0);
      complex2.equals(complex11);
      complex4.getReal();
      complex2.exp();
      complex7.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.negate();
      complex1.NaN.abs();
      Complex complex3 = complex2.INF.conjugate();
      complex3.I.hashCode();
      complex3.ONE.multiply(1);
      complex0.I.getArgument();
      complex0.ONE.abs();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex5.ONE.multiply(complex1);
      complex6.NaN.tan();
      complex4.INF.toString();
      complex2.equals(complex1);
      Complex complex7 = complex2.subtract(Double.NaN);
      Complex complex8 = complex7.ONE.divide(Double.NaN);
      complex8.I.nthRoot(1);
      complex4.isInfinite();
      complex2.sinh();
      Complex.valueOf(404.82206457522);
      Complex complex9 = complex4.acos();
      complex5.getImaginary();
      Complex complex10 = complex9.acos();
      complex4.divide(complex7);
      complex4.getField();
      complex9.multiply(648.859289846);
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.add(0.5930894613265991);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex0.atan();
      complex2.sqrt();
      Complex complex3 = Complex.valueOf(1442.881);
      complex2.sin();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.exp();
      complex5.INF.toString();
      complex4.I.conjugate();
      complex3.INF.exp();
      Complex complex6 = complex3.cos();
      complex6.isInfinite();
      complex6.getArgument();
      complex6.multiply(complex1);
      complex2.cos();
      complex4.tanh();
      complex3.add(5.491672256552995E-125);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-2.0406580894051073E243), (-2.0406580894051073E243));
      Complex complex1 = complex0.NaN.subtract((-2.0406580894051073E243));
      complex1.NaN.multiply(complex0);
      Complex.valueOf((-2.0406580894051073E243), (-2.0406580894051073E243));
      Complex complex2 = Complex.valueOf((-2.0406580894051073E243), (-126.87));
      complex0.ONE.multiply(complex2);
      complex0.getReal();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex2 = complex0.add(complex1);
      complex0.INF.abs();
      Complex complex3 = complex2.I.tan();
      complex1.I.nthRoot(1);
      complex0.isInfinite();
      complex0.hashCode();
      complex1.sqrt1z();
      complex0.log();
      complex0.getReal();
      complex3.add((double) 1);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      complex0.reciprocal();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.I.getField();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.conjugate();
      complex2.NaN.exp();
      Complex complex4 = complex3.NaN.multiply(227.29);
      complex4.ZERO.sinh();
      complex4.ZERO.sqrt1z();
      complex4.I.abs();
      Complex complex5 = complex2.INF.negate();
      Complex complex6 = complex5.NaN.pow(complex1);
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex8.I.sinh();
      complex9.NaN.asin();
      Complex complex10 = complex5.ONE.tan();
      complex10.I.readResolve();
      complex0.getReal();
      complex2.subtract(complex0);
      complex3.getReal();
      complex3.getReal();
      complex10.acos();
      Complex complex11 = complex5.subtract(complex6);
      complex11.abs();
      Complex complex12 = complex0.sqrt();
      complex11.getImaginary();
      complex12.getImaginary();
      Complex complex13 = Complex.ONE;
      complex7.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex0.getReal();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex1.asin();
      complex3.ONE.hashCode();
      Complex complex4 = complex3.ZERO.divide(complex1);
      complex0.NaN.getField();
      Complex complex5 = complex0.sinh();
      complex5.getReal();
      Complex complex6 = complex0.ONE.createComplex(Double.NaN, 3982.84);
      Complex.valueOf(Double.POSITIVE_INFINITY, 736.7373589666305);
      complex1.negate();
      complex2.acos();
      complex1.multiply(complex5);
      complex3.cosh();
      complex6.getImaginary();
      complex6.multiply(complex3);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-2279.691983), (-2279.691983));
      complex0.I.tan();
      complex0.ONE.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex3.INF.exp();
      complex2.getReal();
      complex4.multiply(1060);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.ZERO.acos();
      complex1.I.getField();
      Complex complex2 = complex0.subtract(0.3163207769393921);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex1.INF.acos();
      complex4.INF.cosh();
      complex1.ONE.add(Double.NaN);
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.createComplex(0.3163207769393921, 0.0);
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = complex8.reciprocal();
      complex1.isNaN();
      complex9.ONE.toString();
      Complex complex11 = complex2.divide(0.0);
      Complex complex12 = complex9.createComplex(0.3163207769393921, 0.0);
      complex12.ONE.sqrt1z();
      complex8.subtract(complex0);
      complex3.getReal();
      complex7.multiply((-2.7501042008405925E-8));
      Complex.valueOf(0.0);
      complex10.multiply(1);
      complex11.multiply(Double.NaN);
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex0.ZERO.abs();
      complex0.reciprocal();
      complex0.readResolve();
      Complex complex3 = complex0.tanh();
      complex0.nthRoot(2597);
      complex3.atan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.add(complex4);
      complex5.cos();
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-3.4650891244084597E148), (-1743.25654));
      Complex.valueOf(2999.5521);
      Complex complex1 = complex0.pow((-1.7316830893872364E-7));
      complex1.abs();
      Complex complex2 = complex0.add(complex1);
      complex1.equals(complex2);
      Complex complex3 = complex2.sin();
      complex3.NaN.sinh();
      Complex complex4 = complex1.pow((-1.7316830893872364E-7));
      Complex complex5 = complex4.INF.cosh();
      complex5.NaN.add(2999.5521);
      Complex complex6 = Complex.valueOf(1004.2187);
      complex1.cos();
      complex6.multiply(1.6023339607737848E-7);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      complex0.ZERO.toString();
      Complex complex2 = null;
      complex1.log();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      Complex complex2 = complex0.NaN.add((-1323.66834190428));
      Complex complex3 = complex0.reciprocal();
      complex0.abs();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex3.negate();
      complex3.NaN.createComplex(1.0, 553.5580867);
      Complex complex6 = complex5.INF.atan();
      complex4.ONE.divide(complex3);
      complex6.NaN.createComplex(553.5580867, 0.0);
      Complex complex7 = complex4.multiply((-2537));
      Complex complex8 = complex0.pow(0.0);
      Complex complex9 = complex8.ZERO.divide(complex2);
      Complex complex10 = complex9.INF.multiply(583);
      complex8.I.reciprocal();
      complex4.isInfinite();
      Complex complex11 = complex3.multiply((-344.5555));
      complex11.NaN.getField();
      complex4.log();
      Complex.valueOf((-1323.66834190428), 0.0);
      Complex complex12 = new Complex((-130.143072671864));
      complex10.INF.hashCode();
      complex7.add(complex12);
      complex8.toString();
      Complex complex13 = complex10.divide((-1323.66834190428));
      complex2.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ONE.getField();
      complex0.I.toString();
      complex0.INF.nthRoot(37);
      Complex complex1 = complex0.ZERO.add((-525.497345));
      Complex complex2 = complex0.sqrt1z();
      complex2.ONE.hashCode();
      complex2.INF.log();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.NaN.sqrt1z();
      complex3.NaN.subtract(complex1);
      Complex complex4 = complex2.ONE.divide(complex1);
      complex4.ZERO.multiply((-1196));
      Complex complex5 = complex0.tanh();
      complex2.pow(complex0);
      complex0.multiply(1);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = complex0.sqrt1z();
      complex1.getField();
      Complex complex2 = new Complex((-4942.831109627449), (-429.21621352));
      Complex complex3 = complex2.ONE.createComplex((-4942.831109627449), 3644.2);
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex0.pow(complex2);
      complex0.ONE.hashCode();
      Complex complex6 = complex3.multiply(complex2);
      complex0.ONE.sinh();
      complex6.multiply(complex4);
      complex3.ONE.sqrt();
      complex0.hashCode();
      complex6.equals(complex5);
      complex5.sqrt();
      complex4.divide(complex1);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex0.divide(2872.5);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.INF.tan();
      complex1.NaN.pow(complex0);
      Complex complex3 = Complex.NaN;
      complex3.createComplex((-1.0), 2205.236);
      complex2.subtract(complex3);
      Complex.valueOf(2353.62802);
      complex0.toString();
      complex0.INF.hashCode();
      complex2.I.tan();
      complex0.nthRoot(1827);
      complex0.hashCode();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.log();
      Complex complex7 = Complex.NaN;
      complex7.ONE.asin();
      Complex complex8 = complex6.I.add(complex7);
      complex8.I.negate();
      complex6.INF.toString();
      try { 
        complex4.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf((-6.183525570536406E93));
      complex0.I.tanh();
      complex1.ZERO.createComplex(Double.NaN, 0.0);
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex2.ONE.pow(complex0);
      complex0.I.tanh();
      Complex complex4 = complex0.I.tan();
      complex3.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      complex5.I.hashCode();
      Complex complex6 = complex0.add((-6.183525570536406E93));
      complex6.NaN.tanh();
      complex6.I.abs();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex1.tanh();
      complex7.I.toString();
      complex7.nthRoot(1);
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex9.I.subtract(Double.NaN);
      complex10.I.pow((double) 1);
      Complex complex11 = complex6.cosh();
      complex11.ONE.cosh();
      complex8.getField();
      complex1.sqrt1z();
      Complex.valueOf((-1389.63969392628), (-5.0054634662706464E-9));
      Complex complex12 = complex6.reciprocal();
      complex4.getImaginary();
      complex1.exp();
      complex12.reciprocal();
      complex8.multiply((-1389.63969392628));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(1959.3361658721055);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-449.5371), 0.0);
      Complex complex1 = complex0.ONE.pow(2.337279322276433E-135);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex0.multiply(2.337279322276433E-135);
      complex4.ZERO.createComplex((-4889.359241559974), 36.0);
      complex0.ZERO.nthRoot(281);
      Complex complex6 = complex5.INF.add(36.0);
      complex6.ZERO.abs();
      Complex complex7 = complex5.ZERO.pow(complex0);
      Complex complex8 = complex5.ZERO.tan();
      Complex complex9 = complex4.INF.atan();
      complex7.ONE.abs();
      complex7.I.atan();
      complex0.readResolve();
      Complex complex10 = complex4.atan();
      complex10.I.toString();
      complex9.INF.log();
      complex3.add(2233.846734865);
      Complex complex11 = Complex.valueOf((-2484.7739512));
      complex11.tan();
      Complex complex12 = Complex.valueOf(2233.846734865);
      complex2.equals(complex12);
      complex9.readResolve();
      complex10.cos();
      complex9.add(0.0);
      complex8.atan();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-2790.1550689037863), 473.83);
      Complex complex1 = Complex.valueOf((-1958.92332192448));
      complex1.NaN.exp();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.sqrt1z();
      complex4.NaN.subtract(complex3);
      Complex complex5 = complex0.add(4.250734424415339E-289);
      Complex complex6 = complex5.INF.subtract((-1958.92332192448));
      complex6.NaN.cosh();
      Complex complex7 = complex5.asin();
      complex5.hashCode();
      complex5.ZERO.sinh();
      complex5.toString();
      Complex complex8 = complex0.multiply(complex5);
      complex1.NaN.toString();
      complex8.I.pow(complex2);
      complex7.sqrt();
      Complex complex9 = complex0.subtract(0.0);
      try { 
        complex9.INF.nthRoot((-2104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,104
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(2736.1570704231, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.I.tanh();
      complex1.ZERO.nthRoot(1284);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ONE.subtract(2736.1570704231);
      complex1.createComplex(2736.1570704231, (-1417.874));
      Complex complex6 = complex4.negate();
      complex6.INF.cosh();
      Complex complex7 = complex6.NaN.multiply(2.000424385070801);
      complex1.toString();
      Complex complex8 = complex5.pow((double) 1284);
      complex0.readResolve();
      complex8.toString();
      complex0.toString();
      complex5.I.atan();
      complex3.cosh();
      complex3.cosh();
      complex5.log();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.I.multiply(complex0);
      complex0.ZERO.hashCode();
      complex0.NaN.hashCode();
      Complex complex3 = complex0.ONE.exp();
      complex0.NaN.getField();
      Complex complex4 = complex3.ZERO.createComplex(0.0, (-20.0));
      Complex complex5 = complex0.conjugate();
      complex0.ONE.reciprocal();
      complex5.NaN.hashCode();
      Complex complex6 = new Complex(0.0, 0.0);
      complex6.NaN.divide(complex2);
      Complex complex7 = complex1.add(complex6);
      complex6.ZERO.hashCode();
      complex7.nthRoot(37);
      Complex complex8 = complex7.I.add(0.0);
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.ZERO.add(complex8);
      Complex complex11 = complex10.ONE.pow(complex2);
      complex9.toString();
      complex3.INF.toString();
      complex6.log();
      complex3.tan();
      complex9.hashCode();
      complex4.multiply(complex11);
      complex3.add((-2131.2));
      complex4.multiply(37);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.hashCode();
      Complex complex1 = new Complex(0.0, 40.3053885026623);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.NaN.pow(complex1);
      complex0.ZERO.hashCode();
      Complex complex3 = complex0.pow((-283.82307));
      complex3.nthRoot(333);
      Complex complex4 = Complex.valueOf((-1925.316));
      Complex complex5 = complex4.ONE.add(complex2);
      complex4.I.nthRoot(333);
      complex1.nthRoot(333);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex3 = complex2.subtract((-1758.621873));
      complex3.I.pow(0.0);
      Complex complex4 = complex3.NaN.negate();
      complex4.ZERO.tan();
      Complex complex5 = complex1.ONE.negate();
      complex5.I.abs();
      complex5.I.getField();
      Complex complex6 = complex0.add((-1802.5625575));
      complex6.getField();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex6.multiply(complex7);
      complex7.ZERO.abs();
      complex8.negate();
      Complex complex9 = complex8.sqrt1z();
      complex9.ZERO.getArgument();
      complex9.toString();
      complex8.acos();
      Complex complex10 = complex6.acos();
      complex10.conjugate();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.sin();
      complex4.INF.sin();
      Complex complex5 = Complex.valueOf(4265.75197, (-278.275));
      complex5.INF.getField();
      Complex complex6 = complex5.I.tanh();
      complex6.INF.cosh();
      Complex complex7 = complex3.ZERO.multiply(complex5);
      Object object0 = complex3.readResolve();
      Complex complex8 = complex1.pow(complex0);
      List<Complex> list0 = complex5.nthRoot(1345);
      assertFalse(list0.contains(complex1));
      assertFalse(list0.isEmpty());
      
      complex2.nthRoot(2589);
      complex1.getArgument();
      Complex complex9 = Complex.valueOf(20.0, 2064.3850999447);
      Complex complex10 = complex5.tan();
      Complex complex11 = complex10.INF.atan();
      complex9.isInfinite();
      Complex complex12 = complex8.divide(20.0);
      complex0.getArgument();
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex7.tan();
      assertEquals(0.0, complex14.getReal(), 0.01);
      
      Complex complex15 = complex7.tanh();
      assertTrue(complex15.equals((Object)complex14));
      
      complex11.createComplex(2861.5245422916432, (-623.433448));
      assertEquals((-1.0), complex10.getImaginary(), 0.01);
      assertEquals(4265.75197, complex5.getReal(), 0.01);
      
      Complex complex16 = complex0.acos();
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex13.sinh();
      assertSame(complex17, complex2);
      assertTrue(complex0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.I.multiply((-3052.2322756));
      assertEquals((-3052.2322756), complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      
      complex0.I.createComplex((-3052.2322756), (-3052.2322756));
      Complex complex3 = complex0.tan();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ZERO.cosh();
      Object object0 = new Object();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ZERO.multiply(complex3);
      complex2.I.readResolve();
      complex3.tan();
      complex0.equals(object0);
      complex0.toString();
      Complex complex5 = complex4.cos();
      complex5.NaN.asin();
      complex4.sqrt();
      int int0 = 0;
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(9.37721319457112E-9, 4.005882964287806E-150);
      Complex complex1 = complex0.createComplex(4.005882964287806E-150, 4.005882964287806E-150);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(4.005882964287806E-150, complex1.getImaginary(), 0.01);
      assertEquals(4.005882964287806E-150, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(4.005882964287806E-150, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.cos();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.NaN.getField();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.ZERO.conjugate();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex5 = complex2.add(Double.NaN);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.createComplex(Double.NaN, 1.0);
      assertFalse(complex7.equals((Object)complex4));
      
      Complex complex8 = complex1.subtract((-191.1));
      assertEquals(192.1, complex8.getReal(), 0.01);
      
      Complex complex9 = complex6.multiply(Double.NaN);
      complex9.ZERO.getArgument();
      assertSame(complex9, complex5);
      assertTrue(complex6.equals((Object)complex7));
      
      complex0.getField();
      Complex complex10 = (Complex)complex3.readResolve();
      assertEquals(0.8414709848078965, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.atan();
      int int0 = (-2732);
      Complex complex2 = complex1.NaN.multiply((-2732));
      complex2.getField();
      complex2.I.hashCode();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.ZERO.add(0.0);
      Complex complex5 = complex4.sqrt1z();
      complex5.pow((double) (-2732));
      try { 
        complex3.NaN.nthRoot((-2038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,038
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
