/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:16:29 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-7.369842361872221E127), (-864.181381844408));
      Complex complex1 = complex0.atan();
      complex1.toString();
      Complex complex2 = complex1.tan();
      complex2.tanh();
      complex0.acos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt();
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.I.multiply(2.716759624268743E271);
      complex1.divide((-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.tanh();
      complex0.getArgument();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.NaN.add(complex2);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.add(20.0);
      Complex complex8 = complex4.ZERO.divide(complex2);
      complex8.log();
      complex6.I.subtract((-3.920012014371067E-9));
      Complex complex9 = complex3.cos();
      complex9.reciprocal();
      Complex complex10 = complex0.tan();
      complex10.I.tanh();
      complex10.cos();
      complex7.abs();
      complex5.pow(complex1);
      complex10.atan();
      Complex complex11 = Complex.ONE;
      complex8.add(complex11);
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1185.6857044999451), 20.0);
      complex0.divide((-482.0587551326038));
      Complex complex1 = Complex.I;
      complex1.abs();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, (-378.736956));
      complex3.hashCode();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867, 9.916187343252014E175);
      Complex complex1 = complex0.divide(553.5580867);
      Complex complex2 = complex1.add(817.024);
      complex0.multiply(complex2);
      Complex complex3 = complex0.divide(0.5517725944519043);
      complex0.divide(0.017256626362293893);
      Complex complex4 = complex1.multiply(989);
      Complex complex5 = complex4.tan();
      complex2.subtract(0.5517725944519043);
      complex5.cos();
      complex3.reciprocal();
      complex3.asin();
      Complex complex6 = Complex.valueOf(0.5517725944519043, 817.024);
      // Undeclared exception!
      complex6.nthRoot(2146714767);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.sinh();
      complex0.sqrt();
      complex1.add(Double.POSITIVE_INFINITY);
      complex0.subtract((-2887.86214527));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(663.1376);
      complex0.divide(663.1376);
      Complex complex1 = complex0.reciprocal();
      complex1.abs();
      Complex complex2 = new Complex(Double.NaN);
      complex2.sqrt();
      Complex.valueOf(Double.NaN, 663.1376);
      complex0.pow(1438.17);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-482.0587551326038), Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = new Complex((-1.034801033752107), 129.7653173822564);
      complex1.ONE.log();
      complex3.abs();
      complex0.multiply(complex1);
      Complex complex4 = Complex.ZERO;
      complex2.hashCode();
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-482.0587551326038), Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = new Complex((-1.034801033752107), 129.7653173822564);
      Complex complex4 = complex1.ONE.log();
      Complex complex5 = complex0.subtract(complex3);
      complex5.I.divide(Double.POSITIVE_INFINITY);
      complex4.divide((-1439.0));
      Complex complex6 = complex3.multiply(989);
      complex2.tan();
      complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.cos();
      complex3.reciprocal();
      complex7.reciprocal();
      Complex complex8 = complex5.asin();
      complex4.nthRoot(1837);
      complex8.conjugate();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.abs();
      complex0.negate();
      complex3.abs();
      complex6.abs();
      int int0 = 37;
      complex6.nthRoot(37);
      try { 
        complex6.nthRoot((-1783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,783
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1830.6235, 1830.6235);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.ZERO.asin();
      complex1.ONE.divide(3.529920406834134E113);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.divide(complex0);
      complex6.reciprocal();
      Complex complex7 = complex6.multiply(0.375);
      Complex.valueOf(3.529920406834134E113);
      complex4.multiply(complex3);
      Complex complex8 = complex0.add(complex5);
      Complex complex9 = complex8.tanh();
      complex9.ZERO.subtract(0.375);
      complex9.ZERO.acos();
      Complex complex10 = complex8.INF.log();
      Complex.valueOf((-1740.908513), (-2158.658));
      Complex complex11 = complex0.cosh();
      complex11.ONE.toString();
      Complex complex12 = complex0.divide((-482.0587551326038));
      complex12.NaN.acos();
      complex11.divide(94.708);
      complex4.NaN.abs();
      complex4.sqrt();
      complex1.subtract(complex10);
      complex4.add(complex7);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-482.0587551326038), Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = complex0.divide((-482.0587551326038));
      Complex complex2 = complex1.reciprocal();
      complex2.abs();
      complex2.multiply(complex1);
      Complex complex3 = Complex.ZERO;
      complex2.hashCode();
      complex0.tan();
      complex2.pow((-340.695323718));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1597.283398, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(4819.1);
      Complex complex3 = complex2.divide(1984.76403977039);
      Complex complex4 = complex0.add((-651.172377));
      complex0.multiply(complex4);
      complex0.divide(4819.1);
      Complex complex5 = Complex.valueOf(1155.0);
      Complex complex6 = complex5.multiply(989);
      complex0.tan();
      complex3.subtract((double) 989);
      Complex complex7 = complex3.cos();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex8.asin();
      complex6.nthRoot(989);
      complex8.conjugate();
      Complex complex10 = Complex.NaN;
      complex10.abs();
      Complex complex11 = new Complex((-4685.0));
      complex11.negate();
      complex7.abs();
      complex9.abs();
      complex6.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-482.0587551326038), Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.tanh();
      Complex complex2 = new Complex((-1.034801033752107), 129.7653173822564);
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.I.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(6.283185307179586);
      complex6.INF.multiply(1597.283398);
      Complex complex7 = complex6.ONE.divide(5.3452044476469845E-8);
      complex7.ZERO.add(5.3452044476469845E-8);
      complex2.multiply(complex1);
      Complex complex8 = complex0.divide((-1432.24952146334));
      complex4.multiply(989);
      Complex complex9 = complex8.tan();
      complex8.I.subtract((-1432.24952146334));
      complex1.INF.cos();
      Complex complex10 = complex9.NaN.reciprocal();
      complex10.INF.asin();
      complex8.nthRoot(7);
      complex5.conjugate();
      complex9.abs();
      complex3.negate();
      complex7.abs();
      complex9.abs();
      complex7.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.675790582869644E157));
      Complex complex1 = complex0.acos();
      complex1.ONE.add(complex0);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(17);
      Complex complex1 = complex0.multiply((-1073064594));
      Complex.valueOf((double) 17);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.pow(complex0);
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.INF.createComplex(3835.92332, 3835.92332);
      complex0.equals(complex1);
      Complex complex2 = complex1.ZERO.pow(570.1117139722973);
      complex1.NaN.pow(0.0);
      complex1.NaN.getArgument();
      complex1.abs();
      Complex complex3 = complex0.createComplex(1365.032135551, 1365.032135551);
      Complex complex4 = complex1.sinh();
      complex2.equals(complex3);
      complex1.sin();
      complex4.tan();
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.createComplex(6.283185307, 6.283185307);
      Complex complex1 = new Complex(6.283185307, 6.283185307);
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex2 = Complex.INF;
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, (-2223.39035827358));
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      Complex complex2 = complex0.reciprocal();
      complex0.abs();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.createComplex(3.430029236134205E-9, 553.5580867);
      Complex complex6 = complex2.pow(3.430029236134205E-9);
      Complex complex7 = complex4.sqrt();
      complex7.ZERO.multiply(complex1);
      complex1.reciprocal();
      Complex complex8 = Complex.NaN;
      complex6.readResolve();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 553.5580867);
      Complex complex1 = complex0.tan();
      complex0.toString();
      complex1.ONE.subtract(complex0);
      Complex complex2 = new Complex(553.5580867, 777.8725525184);
      complex1.asin();
      Complex.valueOf(777.8725525184);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.cosh();
      Complex complex1 = complex0.I.negate();
      complex1.sin();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.NaN);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.acos();
      complex1.atan();
      complex0.readResolve();
      Complex complex3 = complex0.exp();
      complex3.I.negate();
      Complex complex4 = complex2.conjugate();
      complex4.createComplex(Double.NaN, (-2548.6));
      Complex complex5 = complex4.conjugate();
      complex1.tan();
      Complex complex6 = complex0.sqrt();
      complex6.subtract((-1.0));
      complex6.negate();
      complex2.nthRoot(1407);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(914.4, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.divide(complex3);
      complex3.asin();
      complex4.sqrt();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.createComplex((-6.449295055881709), (-6.449295055881709));
      Complex complex2 = Complex.valueOf((-6.449295055881709));
      complex0.divide(complex2);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.tanh();
      Complex complex5 = new Complex(553.5580867, Double.POSITIVE_INFINITY);
      complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.NaN.sqrt();
      complex1.ZERO.abs();
      Complex complex4 = complex1.I.log();
      complex0.abs();
      Complex complex5 = complex4.I.add(complex1);
      Complex complex6 = complex2.divide(3688.646002933214);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex7.acos();
      complex1.sqrt();
      Complex complex9 = complex5.add(complex3);
      complex9.NaN.exp();
      Complex complex10 = complex4.createComplex(0.0, (-1096.5687));
      Complex complex11 = complex5.reciprocal();
      complex10.divide(complex7);
      complex0.toString();
      complex11.sqrt1z();
      complex8.INF.exp();
      Complex.valueOf((-2549.847401330855));
      Complex complex12 = new Complex(3688.646002933214, 1248.9992);
      Complex complex13 = complex10.divide(complex12);
      Complex complex14 = complex6.tanh();
      Complex complex15 = complex8.multiply(3688.646002933214);
      complex15.exp();
      complex7.pow(complex13);
      complex14.I.multiply(1.424065351486206);
      complex13.ZERO.asin();
      complex2.negate();
      complex13.reciprocal();
      complex14.abs();
      Complex complex16 = Complex.NaN;
      complex5.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt();
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.atan();
      complex0.divide(complex1);
      Complex complex2 = complex1.createComplex((-2760.0), (-2760.0));
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      Complex complex2 = complex0.reciprocal();
      complex0.abs();
      Complex complex3 = complex1.multiply(complex2);
      complex0.divide(complex1);
      complex3.createComplex(3.430029236134205E-9, 1.0);
      Complex complex4 = complex0.sinh();
      Object object0 = new Object();
      complex3.equals(object0);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.reciprocal();
      complex0.abs();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.createComplex(3.430029236134205E-9, 1.0);
      complex4.multiply((-2535));
      complex2.pow(3.430029236134205E-9);
      Complex complex6 = Complex.ONE;
      complex3.tanh();
      complex3.pow(complex5);
      Complex complex7 = complex3.multiply((-2535));
      complex7.INF.pow(1.0);
      complex7.isNaN();
      try { 
        complex3.nthRoot((-5023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,023
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-483.464), 1.960616287777496E-7);
      complex1.hashCode();
      Complex complex2 = Complex.valueOf((-483.464));
      Complex complex3 = complex1.add(complex2);
      complex1.abs();
      complex3.tan();
      Complex complex4 = Complex.valueOf(2.0000021303282205);
      // Undeclared exception!
      complex4.nthRoot(2147012748);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(286.82025579, 2728.700679090233);
      Complex complex1 = complex0.createComplex((-1.0), Double.NaN);
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex4.createComplex((-20.0), (-20.0));
      Complex complex6 = complex4.multiply(612);
      complex6.pow(2728.700679090233);
      Complex complex7 = Complex.ONE;
      complex5.tanh();
      complex6.pow(complex5);
      complex4.multiply((-478));
      Complex complex8 = Complex.I;
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-2279.691983), (-2279.691983));
      complex0.abs();
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex2 = complex1.atan();
      complex1.divide(complex0);
      complex0.createComplex((-2279.691983), 2728.700679090233);
      Complex complex3 = complex1.multiply((-2537));
      complex0.pow((double) (-2537));
      complex3.abs();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.reciprocal();
      complex4.log();
      complex5.readResolve();
      complex2.sqrt();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.hashCode();
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex1.add(complex0);
      complex1.abs();
      Complex complex3 = complex2.tan();
      complex2.nthRoot(1);
      complex3.multiply(292);
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.INF;
      complex5.pow(complex4);
      complex0.multiply(1);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1616.0), (-1616.0));
      Complex complex1 = complex0.ZERO.log();
      complex0.ZERO.getField();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.divide(complex0);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.reciprocal();
      complex2.abs();
      complex2.multiply(complex1);
      Complex complex3 = Complex.valueOf((-4044.1381854), 99.085725180611);
      complex1.createComplex(Double.NaN, 1418.329394571224);
      complex0.atan();
      Complex complex4 = new Complex((-2279.691983));
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex2.createComplex(1.0, 9.975264256602178E-264);
      complex5.multiply(1033);
      Complex complex7 = new Complex((-4044.1381854));
      complex7.pow(Double.NaN);
      Complex complex8 = Complex.valueOf(991.69, Double.NaN);
      complex8.multiply((-2040868891));
      complex1.tanh();
      complex3.pow(complex5);
      Complex complex9 = complex6.multiply(3893);
      complex1.isNaN();
      complex9.cos();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(2567.26502, 2567.26502);
      Complex complex2 = complex1.atan();
      complex0.divide(complex1);
      complex0.createComplex((-20.0), (-20.0));
      Complex complex3 = complex2.multiply(2143611224);
      Complex complex4 = complex3.pow((-27.703946197094588));
      Complex complex5 = complex4.multiply((-2537));
      complex1.tanh();
      Complex complex6 = complex5.pow(complex3);
      complex5.multiply((-1));
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      complex0.NaN.add((-1323.66834190428));
      Complex complex2 = complex0.reciprocal();
      complex0.abs();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.negate();
      Complex complex5 = Complex.valueOf((-4044.1381854), (-4044.1381854));
      complex2.NaN.createComplex(1.0, 553.5580867);
      complex4.INF.atan();
      complex3.ONE.divide(complex2);
      complex5.sinh();
      complex3.equals("org.apache.commons.math3.complex.Complex");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.valueOf((-1.0), (-483.464));
      complex0.abs();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      complex3.ZERO.atan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.conjugate();
      Complex.valueOf((-483.464));
      Complex complex6 = Complex.INF;
      complex2.toString();
      complex5.ONE.getArgument();
      Complex complex7 = complex5.pow(1.4142135623730951);
      Complex complex8 = complex7.I.multiply(complex5);
      complex0.sin();
      complex0.equals(complex2);
      Complex complex9 = complex0.cos();
      Complex.valueOf(1792.40433);
      Complex.valueOf(0.0, (-1.0));
      Complex complex10 = complex9.cos();
      complex9.multiply((-3699));
      Complex complex11 = Complex.NaN;
      complex10.tan();
      complex8.negate();
      complex5.isInfinite();
      complex5.atan();
      Complex.valueOf(1.0181870233355787E-9);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.ONE.asin();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(1601.32792974);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.negate();
      complex5.INF.multiply((-545));
      Complex complex6 = Complex.valueOf(1601.32792974);
      Complex complex7 = complex6.NaN.reciprocal();
      complex7.ZERO.getField();
      complex1.sinh();
      complex5.nthRoot(1160);
      complex3.log();
      complex1.nthRoot(1160);
      complex2.add((double) (-545));
      complex4.divide((double) 1160);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add((-2279.691983));
      Complex complex2 = Complex.valueOf((-2279.691983));
      complex2.I.acos();
      Complex complex3 = complex0.createComplex(Double.NaN, Double.NaN);
      complex3.cos();
      complex1.I.readResolve();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.NaN.divide((-2279.691983));
      Complex complex6 = complex2.I.sqrt();
      complex6.I.conjugate();
      complex4.INF.reciprocal();
      Complex complex7 = complex2.pow(complex1);
      complex7.asin();
      Complex complex8 = complex2.pow(complex3);
      complex8.ONE.exp();
      Complex complex9 = complex5.pow(Double.NaN);
      Complex complex10 = complex9.I.cosh();
      complex10.ZERO.subtract(complex6);
      complex2.divide(complex9);
      complex7.multiply((-2402.0));
      Complex.valueOf(Double.NaN);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.I;
      complex4.toString();
      Complex complex5 = complex3.subtract(complex1);
      complex1.getArgument();
      complex3.subtract(0.0);
      Complex complex6 = complex3.pow((-885.2));
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex5.sin();
      complex3.equals(complex0);
      complex5.cos();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex3.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.cos();
      complex7.multiply(562);
      Complex complex11 = new Complex(1.1177616119384766);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.tan();
      complex5.negate();
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      complex0.NaN.add((-1323.66834190428));
      Complex complex2 = complex0.reciprocal();
      complex0.abs();
      Complex complex3 = complex1.multiply(complex2);
      complex3.cos();
      Complex complex4 = Complex.INF;
      complex3.toString();
      Complex complex5 = complex4.subtract(complex2);
      complex1.getArgument();
      Complex complex6 = Complex.I;
      complex6.subtract(1.0);
      complex5.pow(553.5580867);
      Complex complex7 = complex0.multiply(complex4);
      complex5.sin();
      complex5.equals(complex6);
      complex7.cos();
      Complex complex8 = Complex.valueOf(692.990499);
      complex8.asin();
      Complex complex9 = Complex.valueOf((-1323.66834190428), (-1381.723));
      complex9.multiply(7);
      Complex complex10 = Complex.NaN;
      complex8.pow(complex9);
      complex8.tan();
      complex0.negate();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = Complex.valueOf((-483.464), (-1.0));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex0.abs();
      complex0.ZERO.subtract(complex2);
      complex2.ONE.atan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = Complex.INF;
      complex4.NaN.toString();
      complex5.ONE.subtract(complex6);
      complex4.ONE.getArgument();
      complex0.subtract((-1.0));
      Complex complex7 = complex4.pow(1.4142135623730951);
      complex7.I.multiply(complex4);
      Complex complex8 = complex0.sin();
      complex1.equals(complex3);
      Complex complex9 = complex1.cos();
      Complex.valueOf(1.4142135623730951);
      complex9.ZERO.asin();
      complex9.cos();
      Complex complex10 = complex9.multiply((-3709));
      complex10.getReal();
      complex8.add((-1.0));
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      Complex complex2 = complex0.reciprocal();
      complex0.abs();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.createComplex(553.5580867, 1.0);
      Complex complex6 = Complex.valueOf((-1323.66834190428), 1908.9447361385);
      complex6.multiply((-2537));
      complex5.pow(1.0);
      complex0.divide(complex3);
      Complex complex7 = complex5.multiply(583);
      complex6.reciprocal();
      complex1.isInfinite();
      complex1.multiply((-1.7343245214879666));
      complex1.getField();
      complex4.log();
      Complex.valueOf(553.5580867, (double) (-2537));
      Complex complex8 = new Complex((-2.7648210023059463E-26));
      complex4.hashCode();
      complex8.add(complex5);
      complex6.toString();
      complex6.divide(553.5580867);
      complex0.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      complex0.NaN.add((-1323.66834190428));
      Complex complex2 = complex0.reciprocal();
      complex0.abs();
      Complex.valueOf(8.0);
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.NaN.createComplex((-1323.66834190428), 553.5580867);
      complex4.INF.atan();
      Complex complex6 = complex3.ONE.divide(complex2);
      Complex complex7 = complex4.createComplex(553.5580867, 1297.32818);
      complex6.atan();
      complex4.divide(complex1);
      complex7.createComplex(553.5580867, 553.5580867);
      Complex complex8 = complex4.multiply((-1705));
      Complex complex9 = Complex.NaN;
      complex9.sqrt1z();
      Complex complex10 = complex9.pow(553.5580867);
      complex10.abs();
      complex0.sqrt();
      Complex complex11 = complex8.sin();
      complex5.hashCode();
      complex0.isNaN();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex1.sin();
      complex4.readResolve();
      complex4.equals(complex2);
      Complex complex5 = complex0.cos();
      Complex complex6 = Complex.NaN;
      complex3.asin();
      Complex complex7 = Complex.valueOf(2.0);
      complex3.cos();
      Complex complex8 = complex7.multiply(1128);
      Complex complex9 = Complex.ONE;
      Complex complex10 = new Complex((-1416.0));
      Complex complex11 = complex10.pow(complex8);
      Complex.valueOf((double) 1128);
      complex11.tan();
      complex7.negate();
      complex6.isInfinite();
      complex5.subtract(1183.207674353144);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.I;
      complex4.toString();
      Complex complex5 = complex3.subtract(complex1);
      complex1.getArgument();
      Complex complex6 = complex3.subtract(0.0);
      Complex complex7 = complex3.pow((-885.2));
      Complex complex8 = complex7.multiply(complex2);
      Complex complex9 = complex7.subtract(complex3);
      complex4.divide(complex2);
      Complex complex10 = complex1.multiply((-1196));
      Complex complex11 = complex10.tanh();
      complex11.I.multiply(complex6);
      complex1.pow(complex5);
      complex9.multiply(140);
      complex4.isNaN();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      complex0.ONE.conjugate();
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ONE.subtract((-3185.662002328));
      Complex complex4 = complex3.ONE.pow(complex1);
      complex1.INF.acos();
      Complex complex5 = complex2.pow((-2262.904558482398));
      complex0.abs();
      Complex complex6 = complex0.add(609.95034);
      Complex complex7 = complex6.ONE.divide(complex1);
      complex6.I.conjugate();
      Complex complex8 = complex0.atan();
      complex6.INF.getField();
      Complex complex9 = complex7.conjugate();
      complex9.INF.abs();
      Complex complex10 = complex1.acos();
      complex6.INF.getField();
      complex9.readResolve();
      complex6.exp();
      Complex complex11 = complex5.log();
      complex4.ZERO.subtract(complex0);
      complex11.INF.multiply((-4564));
      Complex complex12 = complex4.asin();
      complex10.toString();
      complex12.INF.atan();
      complex2.negate();
      complex12.cos();
      complex2.toString();
      complex12.equals((Object) null);
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.I;
      complex4.toString();
      Complex complex5 = complex3.subtract(complex1);
      complex1.getArgument();
      Complex complex6 = complex3.subtract(0.0);
      Complex complex7 = complex3.pow((-885.2));
      Complex complex8 = complex7.multiply(complex2);
      complex5.sin();
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
      complex5.cos();
      Complex complex9 = Complex.NaN;
      complex7.asin();
      Complex complex10 = Complex.valueOf((-1868.7155165697816));
      complex10.cos();
      complex5.multiply((-3709));
      Complex complex11 = Complex.ONE;
      Complex complex12 = new Complex((-3709));
      complex12.pow(complex8);
      Complex complex13 = Complex.valueOf(2.0);
      complex13.tan();
      complex1.negate();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex0.sin();
      complex0.hashCode();
      complex0.isNaN();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-1.67303880587356));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.I.divide(complex1);
      complex0.I.toString();
      Complex complex4 = complex0.sqrt();
      complex1.divide(complex4);
      Complex complex5 = complex4.multiply((-313));
      Complex complex6 = complex4.reciprocal();
      complex5.isInfinite();
      complex3.multiply((-344.5555));
      complex3.getField();
      Complex complex7 = complex1.log();
      Complex.valueOf(0.8354432461542953, 536.1697760916);
      Complex complex8 = new Complex((-1.0));
      complex4.hashCode();
      complex8.add(complex7);
      complex2.toString();
      complex2.divide(1.0);
      complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      Complex complex2 = complex0.NaN.add((-1323.66834190428));
      Complex complex3 = complex0.reciprocal();
      complex0.abs();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex3.negate();
      complex3.NaN.createComplex(1.0, 553.5580867);
      complex5.INF.atan();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex2.multiply(complex4);
      Complex complex8 = complex2.tan();
      complex5.toString();
      complex7.equals(complex2);
      complex6.subtract((-94.317484074));
      complex8.divide((-94.317484074));
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex.valueOf((-483.464), (-1.0));
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.NaN.sqrt1z();
      complex0.abs();
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.ONE;
      complex2.atan();
      complex4.subtract(complex3);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.multiply(1317);
      complex1.multiply(1317);
      Complex complex3 = Complex.ZERO;
      complex3.reciprocal();
      complex2.toString();
      Complex complex4 = Complex.valueOf(Double.NaN, (double) 1317);
      complex2.atan();
      complex4.conjugate();
      complex2.readResolve();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ONE;
      complex6.subtract((double) 1317);
      Complex complex7 = Complex.NaN;
      complex7.equals(complex1);
      complex7.getReal();
      Complex complex8 = Complex.valueOf((double) 1317);
      complex8.exp();
      Complex complex9 = Complex.ZERO;
      complex7.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-1.67303880587356));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.I.divide(complex1);
      complex0.I.toString();
      Complex complex3 = complex0.sqrt();
      complex0.abs();
      Complex complex4 = complex0.cosh();
      complex4.subtract(20.0);
      Complex complex5 = complex0.pow((-3226.0));
      complex3.cosh();
      Complex complex6 = Complex.valueOf(462.7889461902, (-3226.0));
      Complex complex7 = complex6.cosh();
      complex7.getField();
      Complex complex8 = Complex.ONE;
      complex8.sqrt1z();
      Complex complex9 = Complex.valueOf(385.8, Double.POSITIVE_INFINITY);
      complex9.NaN.cosh();
      complex9.NaN.divide(complex1);
      complex5.reciprocal();
      complex1.getImaginary();
      complex1.exp();
      Complex complex10 = Complex.valueOf(1.67303880587356);
      complex10.reciprocal();
      complex3.multiply(510.1013871603597);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-2279.691983), (-2279.691983));
      complex0.I.tan();
      complex0.ONE.toString();
      Complex complex1 = Complex.ONE;
      complex0.reciprocal();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = Complex.valueOf((-483.464), (-1.0));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = new Complex((-483.464), (-1.0));
      complex0.abs();
      complex0.INF.add(complex3);
      complex0.ZERO.subtract(complex2);
      complex2.ONE.atan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = Complex.INF;
      complex4.NaN.toString();
      complex5.ONE.subtract(complex6);
      complex4.ONE.getArgument();
      complex0.subtract((-1.0));
      Complex complex7 = complex4.pow(1.4142135623730951);
      Complex complex8 = complex7.I.multiply(complex4);
      complex0.sin();
      complex1.equals(complex3);
      Complex complex9 = complex1.cos();
      Complex.valueOf(1792.40433);
      complex9.ZERO.asin();
      Complex complex10 = complex9.cos();
      complex9.multiply((-3709));
      Complex complex11 = Complex.ONE;
      complex10.pow(complex11);
      complex10.tan();
      Complex complex12 = complex8.negate();
      complex4.isInfinite();
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf((-6.183525570536406E93));
      complex0.I.tanh();
      complex1.ZERO.createComplex(Double.NaN, 0.0);
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex2.ONE.pow(complex0);
      complex0.I.tanh();
      Complex complex4 = complex0.I.tan();
      complex3.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      complex5.I.hashCode();
      Complex complex6 = complex0.add((-6.183525570536406E93));
      complex6.NaN.tanh();
      complex6.I.abs();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex1.tanh();
      complex7.I.toString();
      complex7.nthRoot(1);
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex9.I.subtract(Double.NaN);
      complex10.I.pow((double) 1);
      Complex complex11 = complex6.cosh();
      complex11.ONE.cosh();
      complex8.getField();
      complex1.sqrt1z();
      Complex.valueOf((-1389.63969392628), (-5.0054634662706464E-9));
      complex6.reciprocal();
      complex4.getImaginary();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1408.675171, 1771.045639);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      complex1.INF.log();
      complex2.getReal();
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.I.add(complex3);
      complex4.I.multiply(0);
      complex2.nthRoot(2397);
      Complex complex5 = complex2.ZERO.multiply((-484.218554));
      complex5.getArgument();
      complex1.subtract(complex0);
      complex2.toString();
      Complex complex6 = complex1.exp();
      complex1.pow(complex0);
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1822.81244, 1822.81244);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.exp();
      complex3.INF.negate();
      complex2.getImaginary();
      complex0.I.sin();
      complex0.getArgument();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = Complex.valueOf((-483.464), (-1.0));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex0.abs();
      complex0.ZERO.subtract(complex2);
      complex2.ONE.atan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = Complex.INF;
      complex4.NaN.toString();
      complex5.ONE.subtract(complex6);
      complex4.ONE.getArgument();
      complex0.subtract((-1.0));
      Complex complex7 = complex4.pow(1.4142135623730951);
      Complex complex8 = complex7.I.multiply(complex4);
      complex0.sin();
      complex1.equals(complex3);
      Complex complex9 = complex1.cos();
      Complex.valueOf(1792.40433);
      complex9.ZERO.asin();
      Complex complex10 = complex9.cos();
      complex9.multiply((-3709));
      Complex complex11 = Complex.ONE;
      complex10.pow(complex11);
      complex10.tan();
      complex8.negate();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-1.67303880587356));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.I.divide(complex1);
      complex0.I.toString();
      Complex complex3 = complex0.sqrt();
      complex0.abs();
      complex1.sqrt();
      complex3.sin();
      complex3.hashCode();
      complex3.isNaN();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-2.2153227096187463E-9));
      Complex complex1 = complex0.atan();
      complex1.I.getField();
      Complex complex2 = complex1.NaN.createComplex((-2434.0), (-617.066739865));
      Complex complex3 = complex1.pow((-1436.74537));
      Complex complex4 = complex3.subtract((-1436.74537));
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.ONE.negate();
      complex6.INF.hashCode();
      complex6.INF.getField();
      complex2.tanh();
      complex1.add(complex4);
      Complex complex7 = Complex.valueOf((-2434.0));
      complex4.subtract((-239.4230763301362));
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.subtract((-1804.1180537056));
      Complex complex2 = Complex.valueOf((-1804.1180537056));
      Complex complex3 = complex0.ZERO.atan();
      complex3.NaN.getField();
      Complex.valueOf(2.0);
      complex1.NaN.conjugate();
      Complex complex4 = complex3.ZERO.add((-9.616457442665051E-9));
      complex0.isNaN();
      Complex complex5 = complex2.exp();
      complex5.createComplex(2695.0, 2695.0);
      complex5.NaN.divide((-1305.8760681442));
      Complex complex6 = complex4.I.createComplex((-1804.1180537056), (-9.616457442665051E-9));
      Complex.valueOf(6.283185307179586);
      complex6.INF.multiply(complex3);
      complex2.ONE.toString();
      Complex complex7 = complex0.conjugate();
      complex4.tanh();
      Complex complex8 = complex7.NaN.divide(5.235528379688445E-8);
      complex8.ONE.divide(0.0);
      Complex complex9 = complex2.sin();
      complex9.getArgument();
      Complex complex10 = complex7.subtract((-9.616457442665051E-9));
      complex1.getField();
      complex4.add(2695.0);
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      complex0.ONE.getArgument();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex3.ZERO.cosh();
      complex4.hashCode();
      complex2.getField();
      complex0.abs();
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.ONE.multiply(0.0);
      Complex complex8 = complex0.pow(complex3);
      complex8.INF.toString();
      Complex complex9 = complex5.NaN.asin();
      complex9.INF.tanh();
      Complex complex10 = complex2.multiply(complex8);
      complex8.I.getField();
      Complex complex11 = complex5.NaN.pow(complex10);
      complex11.sqrt1z();
      Complex.valueOf(20.0);
      Complex complex12 = complex5.reciprocal();
      complex12.sinh();
      Complex complex13 = complex4.cosh();
      Complex complex14 = complex13.I.reciprocal();
      complex4.tanh();
      complex7.negate();
      complex0.hashCode();
      complex14.atan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-1.15945645153806E-8), (-1.15945645153806E-8));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.atan();
      complex1.getReal();
      Complex complex3 = complex1.INF.add((-1595.9));
      complex3.INF.sqrt1z();
      Complex complex4 = Complex.valueOf((-1.15945645153806E-8), 4823.195016261434);
      Complex complex5 = complex1.negate();
      complex4.ONE.hashCode();
      Complex complex6 = complex1.negate();
      complex6.INF.pow((-1.15945645153806E-8));
      complex5.INF.tanh();
      Complex complex7 = complex4.atan();
      complex7.INF.multiply((-1.15945645153806E-8));
      complex2.hashCode();
      complex5.NaN.divide(0.0);
      complex4.abs();
      complex5.add(complex4);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.ONE.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.NaN.multiply(complex0);
      complex3.ONE.conjugate();
      complex0.ONE.tan();
      Complex complex4 = Complex.valueOf(0.0, 1318.8543217646);
      complex4.ONE.sqrt1z();
      Complex complex5 = complex0.ZERO.createComplex(1318.8543217646, 1318.8543217646);
      complex1.ONE.cosh();
      Complex complex6 = complex1.ONE.conjugate();
      Complex complex7 = complex0.subtract(complex1);
      complex7.INF.readResolve();
      Complex complex8 = complex6.conjugate();
      complex4.ZERO.getArgument();
      complex5.multiply(0);
      Complex complex9 = complex3.multiply(0);
      complex9.ZERO.reciprocal();
      complex8.toString();
      Complex.valueOf(1318.8543217646, Double.NaN);
      Complex complex10 = complex8.atan();
      complex10.INF.conjugate();
      complex4.readResolve();
      Complex complex11 = Complex.I;
      complex2.ONE.subtract((double) 0);
      complex2.equals(complex11);
      complex4.getReal();
      complex2.exp();
      complex7.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.negate();
      complex1.NaN.abs();
      Complex complex3 = complex2.INF.conjugate();
      complex3.I.hashCode();
      complex3.ONE.multiply(1);
      complex0.I.getArgument();
      complex0.ONE.abs();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex5.ONE.multiply(complex1);
      complex6.NaN.tan();
      complex4.INF.toString();
      complex2.equals(complex1);
      Complex complex7 = complex2.subtract(Double.NaN);
      Complex complex8 = complex7.ONE.divide(Double.NaN);
      complex8.I.nthRoot(1);
      complex4.isInfinite();
      complex2.sinh();
      Complex.valueOf(404.82206457522);
      Complex complex9 = complex4.acos();
      complex5.getImaginary();
      Complex complex10 = complex9.acos();
      complex4.divide(complex7);
      complex4.getField();
      complex9.multiply(648.859289846);
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.add(0.5930894613265991);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex0.atan();
      complex2.sqrt();
      Complex complex3 = Complex.valueOf(1442.881);
      complex2.sin();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.exp();
      complex5.INF.toString();
      complex4.I.conjugate();
      complex3.INF.exp();
      Complex complex6 = complex3.cos();
      complex6.isInfinite();
      complex6.getArgument();
      complex6.multiply(complex1);
      complex2.cos();
      complex4.tanh();
      complex3.add(5.491672256552995E-125);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-2.0406580894051073E243), (-2.0406580894051073E243));
      Complex complex1 = complex0.NaN.subtract((-2.0406580894051073E243));
      complex1.NaN.multiply(complex0);
      Complex.valueOf((-2.0406580894051073E243), (-2.0406580894051073E243));
      Complex complex2 = Complex.valueOf((-2.0406580894051073E243), (-126.87));
      complex0.ONE.multiply(complex2);
      complex0.getReal();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex2 = complex0.add(complex1);
      complex0.INF.abs();
      Complex complex3 = complex2.I.tan();
      complex1.I.nthRoot(1);
      complex0.isInfinite();
      complex0.hashCode();
      complex1.sqrt1z();
      complex0.log();
      complex0.getReal();
      complex3.add((double) 1);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      complex0.reciprocal();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.I.getField();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.conjugate();
      complex2.NaN.exp();
      Complex complex4 = complex3.NaN.multiply(227.29);
      complex4.ZERO.sinh();
      complex4.ZERO.sqrt1z();
      complex4.I.abs();
      Complex complex5 = complex2.INF.negate();
      Complex complex6 = complex5.NaN.pow(complex1);
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex8.I.sinh();
      complex9.NaN.asin();
      Complex complex10 = complex5.ONE.tan();
      complex10.I.readResolve();
      complex0.getReal();
      complex2.subtract(complex0);
      complex3.getReal();
      complex3.getReal();
      complex10.acos();
      Complex complex11 = complex5.subtract(complex6);
      complex11.abs();
      Complex complex12 = complex0.sqrt();
      complex11.getImaginary();
      complex12.getImaginary();
      Complex complex13 = Complex.ONE;
      complex7.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex0.getReal();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex1.asin();
      complex3.ONE.hashCode();
      Complex complex4 = complex3.ZERO.divide(complex1);
      complex0.NaN.getField();
      Complex complex5 = complex0.sinh();
      complex5.getReal();
      Complex complex6 = complex0.ONE.createComplex(Double.NaN, 3982.84);
      Complex.valueOf(Double.POSITIVE_INFINITY, 736.7373589666305);
      complex1.negate();
      complex2.acos();
      complex1.multiply(complex5);
      complex3.cosh();
      complex6.getImaginary();
      complex6.multiply(complex3);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-2279.691983), (-2279.691983));
      complex0.I.tan();
      complex0.ONE.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex3.INF.exp();
      complex2.getReal();
      complex4.multiply(1060);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = complex0.ZERO.acos();
      complex1.I.getField();
      Complex complex2 = complex0.subtract(0.3163207769393921);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex1.INF.acos();
      complex4.INF.cosh();
      complex1.ONE.add(Double.NaN);
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.createComplex(0.3163207769393921, 0.0);
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = complex8.reciprocal();
      complex1.isNaN();
      complex9.ONE.toString();
      Complex complex11 = complex2.divide(0.0);
      Complex complex12 = complex9.createComplex(0.3163207769393921, 0.0);
      complex12.ONE.sqrt1z();
      complex8.subtract(complex0);
      complex3.getReal();
      complex7.multiply((-2.7501042008405925E-8));
      Complex.valueOf(0.0);
      complex10.multiply(1);
      complex11.multiply(Double.NaN);
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex0.ZERO.abs();
      complex0.reciprocal();
      complex0.readResolve();
      Complex complex3 = complex0.tanh();
      complex0.nthRoot(2597);
      complex3.atan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.add(complex4);
      complex5.cos();
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-3.4650891244084597E148), (-1743.25654));
      Complex.valueOf(2999.5521);
      Complex complex1 = complex0.pow((-1.7316830893872364E-7));
      complex1.abs();
      Complex complex2 = complex0.add(complex1);
      complex1.equals(complex2);
      Complex complex3 = complex2.sin();
      complex3.NaN.sinh();
      Complex complex4 = complex1.pow((-1.7316830893872364E-7));
      Complex complex5 = complex4.INF.cosh();
      complex5.NaN.add(2999.5521);
      Complex complex6 = Complex.valueOf(1004.2187);
      complex1.cos();
      complex6.multiply(1.6023339607737848E-7);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      complex0.ZERO.toString();
      Complex complex2 = null;
      complex1.log();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(553.5580867);
      Complex complex1 = complex0.I.divide(553.5580867);
      Complex complex2 = complex0.NaN.add((-1323.66834190428));
      Complex complex3 = complex0.reciprocal();
      complex0.abs();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex3.negate();
      complex3.NaN.createComplex(1.0, 553.5580867);
      Complex complex6 = complex5.INF.atan();
      complex4.ONE.divide(complex3);
      complex6.NaN.createComplex(553.5580867, 0.0);
      Complex complex7 = complex4.multiply((-2537));
      Complex complex8 = complex0.pow(0.0);
      Complex complex9 = complex8.ZERO.divide(complex2);
      Complex complex10 = complex9.INF.multiply(583);
      complex8.I.reciprocal();
      complex4.isInfinite();
      Complex complex11 = complex3.multiply((-344.5555));
      complex11.NaN.getField();
      complex4.log();
      Complex.valueOf((-1323.66834190428), 0.0);
      Complex complex12 = new Complex((-130.143072671864));
      complex10.INF.hashCode();
      complex7.add(complex12);
      complex8.toString();
      Complex complex13 = complex10.divide((-1323.66834190428));
      complex2.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ONE.getField();
      complex0.I.toString();
      complex0.INF.nthRoot(37);
      Complex complex1 = complex0.ZERO.add((-525.497345));
      Complex complex2 = complex0.sqrt1z();
      complex2.ONE.hashCode();
      complex2.INF.log();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.NaN.sqrt1z();
      complex3.NaN.subtract(complex1);
      Complex complex4 = complex2.ONE.divide(complex1);
      complex4.ZERO.multiply((-1196));
      Complex complex5 = complex0.tanh();
      complex2.pow(complex0);
      complex0.multiply(1);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = complex0.sqrt1z();
      complex1.getField();
      Complex complex2 = new Complex((-4942.831109627449), (-429.21621352));
      Complex complex3 = complex2.ONE.createComplex((-4942.831109627449), 3644.2);
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex0.pow(complex2);
      complex0.ONE.hashCode();
      Complex complex6 = complex3.multiply(complex2);
      complex0.ONE.sinh();
      complex6.multiply(complex4);
      complex3.ONE.sqrt();
      complex0.hashCode();
      complex6.equals(complex5);
      complex5.sqrt();
      complex4.divide(complex1);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex0.divide(2872.5);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.INF.tan();
      complex1.NaN.pow(complex0);
      Complex complex3 = Complex.NaN;
      complex3.createComplex((-1.0), 2205.236);
      complex2.subtract(complex3);
      Complex.valueOf(2353.62802);
      complex0.toString();
      complex0.INF.hashCode();
      complex2.I.tan();
      complex0.nthRoot(1827);
      complex0.hashCode();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.log();
      Complex complex7 = Complex.NaN;
      complex7.ONE.asin();
      Complex complex8 = complex6.I.add(complex7);
      complex8.I.negate();
      complex6.INF.toString();
      try { 
        complex4.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf((-6.183525570536406E93));
      complex0.I.tanh();
      complex1.ZERO.createComplex(Double.NaN, 0.0);
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex2.ONE.pow(complex0);
      complex0.I.tanh();
      Complex complex4 = complex0.I.tan();
      complex3.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      complex5.I.hashCode();
      Complex complex6 = complex0.add((-6.183525570536406E93));
      complex6.NaN.tanh();
      complex6.I.abs();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex1.tanh();
      complex7.I.toString();
      complex7.nthRoot(1);
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex9.I.subtract(Double.NaN);
      complex10.I.pow((double) 1);
      Complex complex11 = complex6.cosh();
      complex11.ONE.cosh();
      complex8.getField();
      complex1.sqrt1z();
      Complex.valueOf((-1389.63969392628), (-5.0054634662706464E-9));
      Complex complex12 = complex6.reciprocal();
      complex4.getImaginary();
      complex1.exp();
      complex12.reciprocal();
      complex8.multiply((-1389.63969392628));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(1959.3361658721055);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-449.5371), 0.0);
      Complex complex1 = complex0.ONE.pow(2.337279322276433E-135);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex0.multiply(2.337279322276433E-135);
      complex4.ZERO.createComplex((-4889.359241559974), 36.0);
      complex0.ZERO.nthRoot(281);
      Complex complex6 = complex5.INF.add(36.0);
      complex6.ZERO.abs();
      Complex complex7 = complex5.ZERO.pow(complex0);
      Complex complex8 = complex5.ZERO.tan();
      Complex complex9 = complex4.INF.atan();
      complex7.ONE.abs();
      complex7.I.atan();
      complex0.readResolve();
      Complex complex10 = complex4.atan();
      complex10.I.toString();
      complex9.INF.log();
      complex3.add(2233.846734865);
      Complex complex11 = Complex.valueOf((-2484.7739512));
      complex11.tan();
      Complex complex12 = Complex.valueOf(2233.846734865);
      complex2.equals(complex12);
      complex9.readResolve();
      complex10.cos();
      complex9.add(0.0);
      complex8.atan();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-2790.1550689037863), 473.83);
      Complex complex1 = Complex.valueOf((-1958.92332192448));
      complex1.NaN.exp();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.sqrt1z();
      complex4.NaN.subtract(complex3);
      Complex complex5 = complex0.add(4.250734424415339E-289);
      Complex complex6 = complex5.INF.subtract((-1958.92332192448));
      complex6.NaN.cosh();
      Complex complex7 = complex5.asin();
      complex5.hashCode();
      complex5.ZERO.sinh();
      complex5.toString();
      Complex complex8 = complex0.multiply(complex5);
      complex1.NaN.toString();
      complex8.I.pow(complex2);
      complex7.sqrt();
      Complex complex9 = complex0.subtract(0.0);
      try { 
        complex9.INF.nthRoot((-2104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,104
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(2736.1570704231, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.I.tanh();
      complex1.ZERO.nthRoot(1284);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ONE.subtract(2736.1570704231);
      complex1.createComplex(2736.1570704231, (-1417.874));
      Complex complex6 = complex4.negate();
      complex6.INF.cosh();
      Complex complex7 = complex6.NaN.multiply(2.000424385070801);
      complex1.toString();
      Complex complex8 = complex5.pow((double) 1284);
      complex0.readResolve();
      complex8.toString();
      complex0.toString();
      complex5.I.atan();
      complex3.cosh();
      complex3.cosh();
      complex5.log();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.I.multiply(complex0);
      complex0.ZERO.hashCode();
      complex0.NaN.hashCode();
      Complex complex3 = complex0.ONE.exp();
      complex0.NaN.getField();
      Complex complex4 = complex3.ZERO.createComplex(0.0, (-20.0));
      Complex complex5 = complex0.conjugate();
      complex0.ONE.reciprocal();
      complex5.NaN.hashCode();
      Complex complex6 = new Complex(0.0, 0.0);
      complex6.NaN.divide(complex2);
      Complex complex7 = complex1.add(complex6);
      complex6.ZERO.hashCode();
      complex7.nthRoot(37);
      Complex complex8 = complex7.I.add(0.0);
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.ZERO.add(complex8);
      Complex complex11 = complex10.ONE.pow(complex2);
      complex9.toString();
      complex3.INF.toString();
      complex6.log();
      complex3.tan();
      complex9.hashCode();
      complex4.multiply(complex11);
      complex3.add((-2131.2));
      complex4.multiply(37);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.hashCode();
      Complex complex1 = new Complex(0.0, 40.3053885026623);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.NaN.pow(complex1);
      complex0.ZERO.hashCode();
      Complex complex3 = complex0.pow((-283.82307));
      complex3.nthRoot(333);
      Complex complex4 = Complex.valueOf((-1925.316));
      Complex complex5 = complex4.ONE.add(complex2);
      complex4.I.nthRoot(333);
      complex1.nthRoot(333);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex3 = complex2.subtract((-1758.621873));
      complex3.I.pow(0.0);
      Complex complex4 = complex3.NaN.negate();
      complex4.ZERO.tan();
      Complex complex5 = complex1.ONE.negate();
      complex5.I.abs();
      complex5.I.getField();
      Complex complex6 = complex0.add((-1802.5625575));
      complex6.getField();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex6.multiply(complex7);
      complex7.ZERO.abs();
      complex8.negate();
      Complex complex9 = complex8.sqrt1z();
      complex9.ZERO.getArgument();
      complex9.toString();
      complex8.acos();
      Complex complex10 = complex6.acos();
      complex10.conjugate();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.sin();
      complex4.INF.sin();
      Complex complex5 = Complex.valueOf(4265.75197, (-278.275));
      complex5.INF.getField();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex6.INF.cosh();
      assertEquals(1.557407724654902, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex8 = complex3.ZERO.multiply(complex5);
      complex3.readResolve();
      Complex complex9 = complex1.pow(complex0);
      List<Complex> list0 = complex5.nthRoot(1345);
      assertEquals(1345, list0.size());
      
      complex2.nthRoot(2589);
      complex1.getArgument();
      Complex complex10 = Complex.valueOf(20.0, 2064.3850999447);
      Complex complex11 = complex5.tan();
      Complex complex12 = complex11.INF.atan();
      complex10.isInfinite();
      Complex complex13 = complex9.divide(20.0);
      complex0.getArgument();
      Complex complex14 = complex13.sinh();
      Complex complex15 = complex8.tan();
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertTrue(complex15.equals((Object)complex4));
      
      Complex complex16 = complex8.tanh();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      complex12.createComplex(2861.5245422916432, (-623.433448));
      Complex complex17 = complex0.acos();
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertTrue(complex17.equals((Object)complex16));
      
      Complex complex18 = complex14.sinh();
      assertSame(complex18, complex12);
      assertNotSame(complex18, complex7);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.I.multiply((-3052.2322756));
      assertEquals((-3052.2322756), complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      
      complex0.I.createComplex((-3052.2322756), (-3052.2322756));
      Complex complex3 = complex0.tan();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex3.getReal(), 0.01);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ZERO.cosh();
      Object object0 = new Object();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ZERO.multiply(complex3);
      complex2.I.readResolve();
      complex3.tan();
      complex0.equals(object0);
      complex0.toString();
      Complex complex5 = complex4.cos();
      complex5.NaN.asin();
      complex4.sqrt();
      int int0 = 0;
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(9.37721319457112E-9, 4.005882964287806E-150);
      Complex complex1 = complex0.createComplex(4.005882964287806E-150, 4.005882964287806E-150);
      assertFalse(complex1.isInfinite());
      assertEquals(4.005882964287806E-150, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(4.005882964287806E-150, complex0.getImaginary(), 0.01);
      assertEquals(4.005882964287806E-150, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.cos();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.NaN.getField();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.ZERO.conjugate();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex5 = complex2.add(Double.NaN);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.createComplex(Double.NaN, 1.0);
      assertFalse(complex7.equals((Object)complex4));
      
      Complex complex8 = complex1.subtract((-191.1));
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(192.1, complex8.getReal(), 0.01);
      
      Complex complex9 = complex6.multiply(Double.NaN);
      complex9.ZERO.getArgument();
      assertSame(complex6, complex5);
      assertTrue(complex9.equals((Object)complex7));
      
      complex0.getField();
      Complex complex10 = (Complex)complex3.readResolve();
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex10.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.atan();
      int int0 = (-2732);
      Complex complex2 = complex1.NaN.multiply((-2732));
      complex2.getField();
      complex2.I.hashCode();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.ZERO.add(0.0);
      Complex complex5 = complex4.sqrt1z();
      complex5.pow((double) (-2732));
      try { 
        complex3.NaN.nthRoot((-2038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,038
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
