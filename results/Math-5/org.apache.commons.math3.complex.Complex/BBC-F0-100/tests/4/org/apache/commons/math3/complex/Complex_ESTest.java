/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:25:28 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex2.INF.subtract(complex0);
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex4.INF.divide(complex2);
      Complex complex7 = complex6.I.multiply(complex3);
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex1.I.negate();
      Complex complex10 = complex9.atan();
      Complex complex11 = complex9.INF.subtract((-2675.64412));
      complex0.ONE.readResolve();
      Complex complex12 = complex11.ZERO.reciprocal();
      complex0.toString();
      complex11.toString();
      Complex complex13 = complex4.INF.multiply(complex12);
      complex12.I.exp();
      Complex complex14 = complex11.multiply((-1012));
      complex4.tanh();
      complex12.createComplex(5.221469250951617E173, 5.221469250951617E173);
      complex6.sqrt1z();
      complex2.getField();
      Complex complex15 = complex10.divide(complex14);
      complex3.toString();
      complex4.multiply(complex6);
      complex13.divide(complex9);
      complex5.tanh();
      complex14.multiply(complex15);
      complex5.add(complex2);
      complex8.sqrt1z();
      Complex.valueOf(0.23709857139465138);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 273041.69896626886);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.7257346819782323E242), (-4.0297835558876335E-78));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply((-4.0297835558876335E-78));
      complex2.nthRoot(442);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 2820.523267);
      complex0.nthRoot(374);
      Complex complex1 = Complex.valueOf((-2316.436721638825), (-2316.436721638825));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5707963267948966, 496.868341117);
      Complex complex1 = complex0.tanh();
      Complex complex2 = new Complex(0.0, (-1095.7849132909));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.atan();
      complex4.nthRoot(412);
      complex1.conjugate();
      complex0.divide(2004.025387);
      complex3.sqrt1z();
      Complex complex5 = Complex.ONE;
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 2820.523267);
      Complex complex1 = complex0.NaN.subtract(2820.523267);
      Complex complex2 = new Complex(2820.523267, Double.POSITIVE_INFINITY);
      complex1.ONE.multiply(complex2);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.subtract(Double.NaN);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.ZERO;
      complex3.tan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = new Complex(20.0, 20.0);
      Complex complex6 = complex5.conjugate();
      complex4.divide(complex1);
      complex2.add((-3528.24090696));
      complex1.log();
      complex3.sqrt1z();
      complex6.tan();
      Complex complex7 = Complex.I;
      try { 
        complex7.nthRoot((-2390));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,390
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.0297835558876335E-78), 1709.8591094255);
      complex0.getField();
      Complex complex1 = complex0.multiply((-4.0297835558876335E-78));
      complex0.cosh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.log();
      complex1.acos();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3896.4792831928, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(159.12607160045);
      Complex complex2 = complex0.pow(complex1);
      complex2.I.sqrt1z();
      Complex complex3 = complex0.multiply(2048374005);
      complex3.NaN.conjugate();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex5.NaN.multiply(2048374005);
      Complex complex7 = complex2.reciprocal();
      complex2.multiply(complex6);
      complex7.tanh();
      complex4.I.tanh();
      complex2.multiply((-3416.949714153));
      complex7.sqrt();
      Complex complex8 = complex5.asin();
      complex6.sinh();
      complex8.createComplex((-20.0), 2048374005);
      Complex.valueOf(159.12607160045, 159.12607160045);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.I;
      complex2.getImaginary();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(1170.277703, 1170.277703);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.divide(complex0);
      complex2.reciprocal();
      Complex complex3 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.3754350207213867E-79), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.ONE.add(complex0);
      complex0.multiply((-2359));
      complex0.tan();
      complex0.toString();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.cos();
      Complex complex2 = Complex.INF;
      complex2.sqrt1z();
      complex0.nthRoot(694);
      Complex complex3 = complex0.tanh();
      complex3.sqrt();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1706.3826149248187));
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.I;
      complex2.getImaginary();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.NaN.add(Double.NaN);
      Complex complex5 = Complex.valueOf((-2480.527105847259), Double.NaN);
      complex3.readResolve();
      Complex complex6 = complex2.INF.sqrt();
      complex3.NaN.readResolve();
      Complex complex7 = complex0.divide(complex3);
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex8.ZERO.cos();
      Complex complex10 = complex7.I.atan();
      Complex complex11 = complex0.pow(complex2);
      complex7.ZERO.subtract((-2208.5755389));
      complex7.divide(complex11);
      complex10.isInfinite();
      Complex complex12 = complex4.log();
      Complex complex13 = complex12.ONE.sqrt1z();
      complex5.multiply(complex11);
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex14.sqrt();
      complex9.atan();
      complex15.readResolve();
      complex8.exp();
      complex5.nthRoot(725);
      complex12.sqrt1z();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.asin();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3166.1988758020025);
      Complex complex1 = Complex.valueOf((-4.0297835558876335E-78), Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex2 = complex1.reciprocal();
      complex1.multiply(2295.057044);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.cosh();
      complex3.add((-4.0297835558876335E-78));
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.NaN.acos();
      Complex complex7 = complex4.sqrt1z();
      complex7.nthRoot(37);
      complex5.tanh();
      complex2.toString();
      complex6.add(1.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.3754350207213867E-79), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-4.3754350207213867E-79));
      complex1.hashCode();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex1.sqrt();
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-20.0);
      Complex complex1 = Complex.valueOf((-1958.74426361), (-20.0));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.negate();
      complex3.conjugate();
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex4.ONE.exp();
      complex5.INF.multiply(complex1);
      Complex complex6 = complex2.I.subtract(complex0);
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex7.reciprocal();
      complex8.I.multiply(complex6);
      complex7.NaN.reciprocal();
      complex6.I.toString();
      Complex complex9 = complex0.multiply(4225.8556);
      complex0.exp();
      complex9.I.getField();
      Complex complex10 = complex9.reciprocal();
      complex10.I.pow((-1958.74426361));
      Complex complex11 = complex10.ZERO.asin();
      complex1.getField();
      complex7.getReal();
      complex7.reciprocal();
      Complex complex12 = complex0.exp();
      complex12.ONE.cos();
      complex11.divide(complex3);
      // Undeclared exception!
      complex6.nthRoot(2146228440);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.3754350207213867E-79), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.hashCode();
      complex0.readResolve();
      Complex complex2 = complex0.conjugate();
      complex2.divide(complex1);
      Complex complex3 = Complex.NaN;
      complex2.createComplex(2.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply(1197.7132476374);
      complex1.readResolve();
      complex1.conjugate();
      Complex complex3 = complex1.divide(complex2);
      complex3.NaN.pow(0.0);
      try { 
        complex3.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3825325965881348, 2.3825325965881348);
      Complex complex1 = Complex.valueOf((-4.0297835558876335E-78), 2.3825325965881348);
      complex1.getField();
      complex1.reciprocal();
      Complex complex2 = complex0.multiply(1709.8591094255);
      complex2.exp();
      Complex complex3 = new Complex(3208.5966, (-1717.2194095071286));
      Complex complex4 = complex2.cosh();
      complex4.add(Double.NaN);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.log();
      complex3.sqrt1z();
      complex5.nthRoot(2151);
      complex0.tanh();
      Complex complex7 = complex3.sqrt();
      complex4.acos();
      complex3.NaN.exp();
      complex3.negate();
      complex7.atan();
      complex6.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex1.I.cos();
      Complex complex3 = Complex.valueOf((-220.3301094));
      Complex complex4 = complex0.subtract(complex1);
      complex0.hashCode();
      complex1.acos();
      complex1.readResolve();
      Complex complex5 = Complex.valueOf(39.97498435543818, 0.0);
      complex2.getField();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = new Complex(39.97498435543818, Double.POSITIVE_INFINITY);
      complex7.cosh();
      complex5.add((-220.3301094));
      complex0.log();
      Complex complex8 = complex3.createComplex(75.2424475, 0.0);
      complex6.nthRoot(37);
      complex4.tanh();
      complex8.sqrt();
      Complex complex9 = Complex.I;
      complex9.acos();
      Complex complex10 = Complex.ONE;
      complex10.readResolve();
      complex10.getArgument();
      Complex.valueOf((double) 37, 20.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1170.277703);
      Complex complex1 = Complex.valueOf(0.0, 1709.8591094255);
      complex1.getField();
      Complex complex2 = complex1.reciprocal();
      complex2.multiply(0.0);
      Complex complex3 = new Complex(Double.NaN, 1170.277703);
      Complex complex4 = complex3.cosh();
      complex3.add(Double.NaN);
      complex4.readResolve();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.conjugate();
      complex0.divide(complex1);
      complex6.multiply(99);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.reciprocal();
      complex3.ZERO.multiply(complex4);
      complex2.sin();
      complex4.pow(complex2);
      Complex complex5 = Complex.I;
      Complex complex6 = new Complex(247.9566315);
      complex6.tanh();
      complex5.getImaginary();
      Complex complex7 = Complex.ZERO;
      complex7.exp();
      Complex complex8 = Complex.I;
      complex0.equals(complex3);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.I.divide(complex2);
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex0.acos();
      complex8.subtract(4.84038176769263E-10);
      complex4.multiply(2239.4);
      complex5.exp();
      complex7.readResolve();
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      Complex.valueOf(1070.56689);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.sinh();
      complex2.sqrt1z();
      complex1.add(complex2);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex3.pow((-1906.32645));
      complex6.subtract(Double.NaN);
      Complex complex9 = Complex.valueOf((-1906.32645), 4.84038176769263E-10);
      Complex complex10 = complex9.sin();
      complex4.pow(complex8);
      Complex complex11 = complex3.acos();
      complex11.INF.toString();
      complex4.tanh();
      complex3.getImaginary();
      complex6.exp();
      Complex complex12 = Complex.I;
      Object object0 = complex8.readResolve();
      complex7.equals(object0);
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1170.277703);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.pow(9.602293320384794E-8);
      Complex complex6 = complex4.subtract(726.1);
      Complex complex7 = complex5.sin();
      complex6.pow(complex5);
      complex7.acos();
      Complex complex8 = complex5.tanh();
      complex7.getImaginary();
      complex4.exp();
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.I;
      complex10.equals(complex8);
      complex6.negate();
      complex3.multiply(1170.277703);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = complex0.multiply((-1906.32645));
      Complex complex2 = complex1.subtract(2506.06887936474);
      complex2.cosh();
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.NaN;
      complex4.sin();
      complex1.toString();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.conjugate();
      complex1.cos();
      complex5.acos();
      Complex.valueOf(1070.56689, (-186.69201282880627));
      complex6.getField();
      complex5.multiply(356.59723468934);
      complex4.multiply(1777);
      complex5.tan();
      complex3.toString();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3825325965881348, 2.3825325965881348);
      complex0.abs();
      complex0.ONE.sin();
      Complex complex1 = Complex.valueOf((-4.3754350207213867E-79), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      complex2.hashCode();
      complex1.multiply(complex0);
      Complex complex3 = complex2.sqrt();
      complex3.subtract((-1518.74));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(889.962512);
      complex0.NaN.abs();
      Complex complex2 = Complex.valueOf(889.962512, 0.0);
      Complex complex3 = complex2.I.tan();
      complex0.hashCode();
      Complex complex4 = complex0.INF.multiply(complex3);
      complex1.exp();
      Complex complex5 = Complex.I;
      Complex complex6 = new Complex(879.0427229726585, Double.NaN);
      complex0.equals(complex6);
      complex4.negate();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex1.multiply(3.19462030745197E44);
      Complex complex5 = complex3.subtract((-1019.4918057));
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.cos();
      complex2.sin();
      Complex complex8 = new Complex(1.2424707839848734E210);
      Complex complex9 = complex4.divide(578.0);
      complex5.multiply(6.283185307179586);
      Complex complex10 = Complex.I;
      complex5.getImaginary();
      Complex complex11 = complex9.cos();
      complex7.sin();
      complex2.hashCode();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex12.tanh();
      complex12.divide(742.97156084014);
      Complex complex14 = complex12.log();
      complex4.pow(1.2424707839848734E210);
      complex14.isNaN();
      complex11.sin();
      Complex complex15 = Complex.ONE;
      complex3.ZERO.hashCode();
      complex15.nthRoot(2798);
      complex10.readResolve();
      complex5.abs();
      complex3.equals(complex13);
      complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = complex0.multiply((-1906.32645));
      Complex complex2 = complex1.subtract(2506.06887936474);
      complex2.cosh();
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.sin();
      Complex complex6 = new Complex((-1706.3826149248187));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.divide((-1906.32645));
      Complex complex9 = complex1.multiply((-605.025403));
      Complex complex10 = Complex.I;
      complex7.getImaginary();
      Complex complex11 = complex7.cos();
      complex1.sin();
      complex3.hashCode();
      complex9.tanh();
      complex10.divide(Double.POSITIVE_INFINITY);
      complex3.log();
      complex11.pow((-2873.807));
      Complex complex12 = Complex.ZERO;
      complex12.multiply(1777);
      Complex complex13 = Complex.valueOf((-1706.3826149248187));
      complex13.tan();
      complex5.toString();
      complex7.sqrt();
      complex2.abs();
      complex8.add((-4563862.2705792));
      complex11.pow((-1706.3826149248187));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1170.277703);
      Complex complex1 = Complex.valueOf((-4.0297835558876335E-78), 1709.8591094255);
      complex1.getField();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.multiply((-4.0297835558876335E-78));
      Complex complex4 = new Complex(Double.NaN, 1170.277703);
      complex4.cosh();
      Complex complex5 = complex4.add(Double.NaN);
      Complex complex6 = complex3.log();
      complex1.nthRoot(37);
      complex5.tanh();
      complex0.sqrt();
      complex2.acos();
      Complex complex7 = complex3.multiply(complex6);
      complex7.sqrt();
      complex4.subtract(777.58609);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1164.83752127085), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = Complex.valueOf(1.059101240562171, (-1580.66));
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.divide(complex1);
      complex5.hashCode();
      Complex complex6 = complex5.multiply(complex2);
      complex0.readResolve();
      Complex complex7 = complex2.sqrt();
      complex7.I.add(5.5544720754729545E-162);
      complex6.subtract(8.383143052979658);
      complex5.subtract(complex2);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply(1197.7132476374);
      complex2.readResolve();
      Complex complex3 = complex0.conjugate();
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.divide(complex0);
      complex3.toString();
      complex1.conjugate();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex2.acos();
      Complex complex6 = Complex.valueOf((-2024.129241), 0.0);
      complex5.getField();
      complex2.reciprocal();
      complex6.multiply((-1669.513430738623));
      Complex complex7 = Complex.valueOf(1.0);
      complex7.cosh();
      Complex complex8 = Complex.valueOf(1.0, 0.0);
      complex8.add(0.0);
      complex1.nthRoot(15);
      complex7.tanh();
      complex4.sqrt();
      Complex complex9 = new Complex(0.0);
      complex9.acos();
      complex7.readResolve();
      Complex complex10 = Complex.valueOf(0.0, (double) 15);
      complex10.getArgument();
      complex6.add(3.5451314095271004E52);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.08313012515209E-155));
      complex0.nthRoot(516);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(0.0);
      complex1.toString();
      complex1.NaN.multiply(complex0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.add(4.218682431618625E286);
      complex0.log();
      complex2.nthRoot(3821);
      Complex complex6 = complex3.tanh();
      complex4.sqrt();
      Complex complex7 = complex5.acos();
      complex5.readResolve();
      complex7.getArgument();
      complex6.add(394.5355061238383);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex(0.0, (-2487966.0680053304));
      complex2.divide(complex0);
      complex1.hashCode();
      Complex complex3 = Complex.INF;
      complex0.multiply(complex3);
      complex0.createComplex(0.0, (-1069.4));
      complex0.readResolve();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.sqrt();
      complex5.getField();
      Complex complex6 = Complex.NaN;
      complex6.abs();
      complex6.subtract(complex1);
      Complex complex7 = Complex.ZERO;
      complex4.nthRoot(3850);
      complex3.nthRoot(3850);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf((-1906.32645));
      complex2.abs();
      Complex complex3 = Complex.valueOf(1070.56689, (-1906.32645));
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.divide(complex3);
      complex1.hashCode();
      complex1.ZERO.cosh();
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex4.readResolve();
      Complex complex6 = complex5.conjugate();
      complex6.NaN.divide(complex3);
      complex2.divide(complex0);
      complex1.multiply(99);
      complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = complex0.multiply((-1906.32645));
      Complex complex2 = complex1.subtract(2506.06887936474);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.cos();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.sin();
      Complex complex7 = new Complex((-1706.3826149248187));
      Complex complex8 = Complex.INF;
      complex8.divide((-1906.32645));
      Complex complex9 = complex1.multiply((-605.025403));
      Complex complex10 = Complex.I;
      complex8.getImaginary();
      Complex complex11 = complex8.cos();
      Complex complex12 = complex1.sin();
      complex4.hashCode();
      complex9.tanh();
      Complex complex13 = complex10.divide(Double.POSITIVE_INFINITY);
      complex4.log();
      complex11.pow((-2873.807));
      complex13.isNaN();
      Complex complex14 = complex12.sin();
      complex3.nthRoot(2798);
      complex0.readResolve();
      complex14.abs();
      complex6.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf((-1906.32645));
      Complex complex5 = Complex.valueOf((-1906.32645));
      complex5.abs();
      Complex complex6 = Complex.valueOf((-1906.32645), (-1906.32645));
      Complex complex7 = complex0.tan();
      complex2.divide(complex4);
      complex3.hashCode();
      complex7.multiply(complex1);
      complex3.createComplex(Double.NaN, 161.2345397865);
      complex0.readResolve();
      complex4.sqrt();
      complex4.getField();
      complex3.abs();
      complex0.subtract(complex2);
      Complex complex8 = Complex.ZERO;
      complex6.nthRoot(3850);
      // Undeclared exception!
      complex4.nthRoot(1785);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sinh();
      complex1.INF.multiply(complex0);
      complex1.I.nthRoot(1);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.multiply(529.54482069921);
      complex2.reciprocal();
      complex3.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1973.722826390186);
      Complex complex2 = complex0.I.sinh();
      complex0.getImaginary();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.add(complex1);
      complex1.negate();
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.pow(1.0);
      Complex complex9 = complex1.subtract(4.84038176769263E-10);
      complex9.NaN.pow(4.84038176769263E-10);
      complex8.sin();
      complex4.pow(complex2);
      complex0.acos();
      Complex complex10 = complex3.tanh();
      Complex.valueOf(4.84038176769263E-10);
      complex10.getImaginary();
      complex5.exp();
      Complex complex11 = Complex.I;
      Complex complex12 = new Complex(0.0);
      complex11.equals(complex12);
      Complex complex13 = Complex.valueOf(1973.722826390186, 4.84038176769263E-10);
      complex13.log();
      complex13.exp();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2704.21), 889.962512);
      complex0.toString();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.multiply(584.6102083);
      complex3.readResolve();
      complex2.conjugate();
      Complex complex4 = complex3.divide(complex1);
      complex4.multiply(99);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.sinh();
      complex4.I.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.negate();
      Complex complex7 = Complex.I;
      complex7.NaN.cos();
      Complex complex8 = complex1.acos();
      complex8.INF.pow(726.1);
      complex8.subtract(4.84038176769263E-10);
      Complex complex9 = complex5.sin();
      Complex complex10 = complex1.pow(complex0);
      complex10.acos();
      Complex complex11 = complex9.tanh();
      complex11.getImaginary();
      complex0.exp();
      Complex complex12 = Complex.I;
      complex10.equals(complex12);
      Complex.valueOf(726.1, Double.NaN);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex1.I.cos();
      Complex complex3 = Complex.valueOf((-220.3301094));
      Complex complex4 = complex0.subtract(complex1);
      complex0.hashCode();
      Complex complex5 = complex1.acos();
      complex1.readResolve();
      Complex complex6 = Complex.valueOf(39.97498435543818, 0.0);
      complex2.getField();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex3.multiply(Double.NaN);
      complex8.cosh();
      complex6.add((-220.3301094));
      complex0.log();
      Complex complex9 = complex3.createComplex(75.2424475, 0.0);
      complex7.nthRoot(37);
      complex4.tanh();
      complex9.sqrt();
      Complex complex10 = Complex.I;
      complex10.acos();
      Complex complex11 = Complex.ONE;
      complex11.readResolve();
      complex11.getArgument();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.244606461516429, 1.0);
      Complex complex1 = Complex.valueOf(1.1038592225182216);
      Complex complex2 = complex0.acos();
      complex0.readResolve();
      complex2.getArgument();
      complex2.sqrt1z();
      complex1.createComplex(1.244606461516429, 1.1038592225182216);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.sinh();
      complex3.I.sqrt1z();
      Complex complex4 = complex0.add(complex0);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.I.divide(complex2);
      complex6.NaN.cos();
      Complex complex7 = complex0.acos();
      complex7.INF.pow(726.1);
      complex7.subtract(4.84038176769263E-10);
      Complex complex8 = complex4.sin();
      Complex complex9 = complex0.pow(complex0);
      complex9.acos();
      Complex complex10 = complex8.tanh();
      complex10.getImaginary();
      complex0.exp();
      Complex complex11 = Complex.I;
      complex9.equals(complex11);
      complex4.log();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.I.nthRoot(1);
      Complex complex1 = complex0.multiply((double) 1);
      Complex complex2 = complex0.ZERO.subtract(1648.1430854254206);
      Complex complex3 = complex2.cosh();
      complex3.NaN.cos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.INF.divide((-716.3692342));
      Complex complex6 = complex4.INF.multiply(1648.1430854254206);
      complex0.getImaginary();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.tanh();
      complex1.divide(1648.1430854254206);
      Complex complex9 = complex6.tanh();
      complex9.getImaginary();
      Complex complex10 = complex6.pow((-189.13078933279922));
      Complex complex11 = new Complex((-1520.515622), 4032.277042198);
      complex11.readResolve();
      complex2.getField();
      complex8.acos();
      complex5.pow(757.033770613924);
      complex1.cosh();
      complex8.multiply(complex10);
      Complex complex12 = complex2.multiply((-716.3692342));
      complex12.getReal();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      complex0.nthRoot(3815);
      Complex complex1 = complex0.multiply(1648.1430854254206);
      complex0.subtract(1114.8798051768354);
      Complex complex2 = complex0.cosh();
      complex0.cos();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.divide(4.102052341676543E-46);
      complex1.multiply(1960.509334);
      complex0.getImaginary();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.sin();
      complex6.hashCode();
      complex5.tanh();
      Complex complex7 = complex3.divide((-1.5430806348152437));
      complex6.pow((-3738.77978));
      complex4.isNaN();
      complex0.sin();
      try { 
        complex7.nthRoot((-2754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,754
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex1.sqrt1z();
      complex5.add(complex3);
      Complex complex6 = new Complex(Double.NaN, (-134.4741378));
      complex6.negate();
      Complex complex7 = complex4.divide(complex2);
      Complex complex8 = complex3.cos();
      Complex complex9 = complex3.acos();
      complex7.pow(20.0);
      complex5.subtract((-134.4741378));
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.pow(complex8);
      Complex complex12 = complex11.acos();
      Complex complex13 = complex5.tanh();
      complex7.getImaginary();
      Complex complex14 = Complex.I;
      complex12.equals(complex13);
      complex7.log();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-719.109443));
      Complex complex1 = complex0.sinh();
      complex1.getImaginary();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.add(complex0);
      complex2.negate();
      complex3.add((-719.109443));
      Complex complex4 = Complex.valueOf(1973.722826390186);
      Complex complex5 = complex4.divide((-719.109443));
      Complex complex6 = Complex.valueOf(1973.722826390186);
      complex3.readResolve();
      complex2.pow(complex1);
      Complex complex7 = complex1.cosh();
      complex5.reciprocal();
      complex0.abs();
      complex1.asin();
      complex6.pow((-1396.03366));
      complex1.atan();
      complex5.divide((-3694.263729405));
      complex3.reciprocal();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(1477.4921788802, (-1.0));
      Complex.valueOf((-2174.87696041816));
      Complex complex1 = new Complex((-2174.87696041816));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf((-1906.32645));
      complex2.abs();
      Complex complex3 = Complex.valueOf(1070.56689, (-1906.32645));
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.divide(complex3);
      complex1.hashCode();
      complex4.multiply(complex5);
      complex5.createComplex((-399.0), (-3145.0));
      complex4.readResolve();
      complex2.sqrt();
      complex5.getField();
      complex5.abs();
      complex3.subtract(complex0);
      Complex complex6 = Complex.ZERO;
      complex6.nthRoot(3850);
      complex1.nthRoot(3850);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2704.21), 889.962512);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.reciprocal();
      complex0.sinh();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.add(complex2);
      complex4.negate();
      complex6.divide(complex4);
      complex4.acos();
      Complex complex7 = complex1.pow(1.0);
      complex5.subtract((-756.1683052793059));
      complex1.sin();
      Complex complex8 = new Complex((-756.1683052793059));
      Complex complex9 = new Complex(4.84038176769263E-10, 889.962512);
      Complex complex10 = complex8.pow(complex9);
      complex7.acos();
      Complex complex11 = complex1.tanh();
      complex3.getImaginary();
      complex11.exp();
      Complex complex12 = Complex.I;
      Object object0 = new Object();
      complex10.equals(object0);
      complex12.log();
      Complex complex13 = Complex.I;
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2704.21), 889.962512);
      Complex.valueOf(420.426698);
      complex0.NaN.abs();
      Complex complex2 = Complex.valueOf(889.962512, 0.0);
      complex2.I.tan();
      Complex complex3 = complex0.INF.divide(complex1);
      complex0.hashCode();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.createComplex((-2704.21), 880.0);
      complex3.NaN.readResolve();
      Complex complex6 = complex0.sqrt();
      complex0.getField();
      complex3.abs();
      complex5.subtract(complex6);
      Complex complex7 = Complex.valueOf(Double.NaN, (-2704.21));
      complex7.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(1107.01);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.subtract(1648.1430854254206);
      Complex complex3 = complex0.cosh();
      complex2.cos();
      complex1.sin();
      Complex complex4 = complex2.divide(1107.01);
      complex2.multiply(0.6663667453928805);
      complex3.getImaginary();
      Complex complex5 = complex1.cos();
      complex5.sin();
      complex4.hashCode();
      complex4.tanh();
      complex3.divide(9.536743164062544E-27);
      complex4.pow(2.0);
      Complex complex6 = new Complex(0.0, (-716.3692342));
      complex6.isNaN();
      complex3.sin();
      complex4.nthRoot(1954);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      complex2.NaN.cosh();
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.NaN.divide(complex4);
      Complex complex6 = complex1.cos();
      Complex complex7 = Complex.valueOf((-220.3301094));
      Complex complex8 = complex3.subtract(complex0);
      complex5.hashCode();
      Complex complex9 = complex0.acos();
      Object object0 = complex5.readResolve();
      Complex complex10 = complex0.sinh();
      complex10.acos();
      Complex complex11 = complex7.conjugate();
      complex7.abs();
      Complex complex12 = complex7.cos();
      complex10.acos();
      Complex complex13 = complex9.negate();
      complex8.atan();
      complex9.equals(complex11);
      complex6.log();
      Complex.valueOf(10.5989954738);
      Complex complex14 = new Complex(1586218.6269580242);
      complex14.cos();
      complex13.tan();
      complex12.equals(object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1973.722826390186);
      Complex complex2 = complex0.I.sinh();
      complex0.getImaginary();
      Complex complex3 = complex2.cosh();
      complex0.add(complex3);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.INF.add(1.0);
      Complex complex6 = complex5.I.divide(1973.722826390186);
      Complex complex7 = Complex.valueOf(1.0);
      complex0.readResolve();
      Complex complex8 = complex3.I.pow(complex0);
      Complex complex9 = complex8.I.cosh();
      complex3.reciprocal();
      complex0.abs();
      complex6.asin();
      complex9.pow((-1259.451716803));
      complex6.atan();
      Complex complex10 = complex6.divide(Double.NaN);
      Complex complex11 = Complex.valueOf((-1259.451716803), 1973.722826390186);
      complex11.reciprocal();
      complex4.exp();
      complex7.add(complex10);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex1.ONE.pow((-1091.0));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.ONE.multiply(1);
      Complex complex6 = Complex.valueOf(2216.208555077388);
      complex0.readResolve();
      complex0.conjugate();
      Complex complex7 = complex0.cos();
      complex2.equals((Object) null);
      complex6.getArgument();
      complex5.I.pow(complex7);
      Object object0 = complex4.readResolve();
      complex7.equals(object0);
      complex1.isInfinite();
      complex5.sinh();
      Complex complex8 = complex6.divide((-1091.0));
      complex8.ZERO.pow((-20.0));
      complex7.tan();
      complex1.reciprocal();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-5.0551842723970724E-8), (-1259.451716803));
      complex0.hashCode();
      complex0.I.sinh();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.valueOf((-5.0551842723970724E-8), (-2849.1750829));
      complex3.NaN.multiply(complex2);
      Complex complex4 = Complex.valueOf(0.38441169261932373, (-187.985));
      complex1.createComplex(1070.9964, 1070.9964);
      Complex complex5 = Complex.valueOf((-1259.451716803), (-5.0551842723970724E-8));
      complex5.sqrt();
      complex1.acos();
      complex5.getImaginary();
      complex4.sin();
      complex0.multiply(2374);
      Complex.valueOf((-2849.1750829), 769.9);
      complex4.isNaN();
      Complex.valueOf(2.0, 0.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.I.nthRoot(1);
      complex0.multiply((double) 1);
      Complex complex1 = complex0.ZERO.subtract(1648.1430854254206);
      Complex complex2 = complex1.cosh();
      complex2.NaN.cos();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.INF.divide((-716.3692342));
      complex3.INF.multiply(1648.1430854254206);
      complex0.getImaginary();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.sin();
      complex6.NaN.hashCode();
      complex6.tanh();
      complex0.divide((-1430.932291));
      complex5.pow(0.0);
      complex2.isNaN();
      complex4.sin();
      complex2.nthRoot(1954);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(1);
      Complex complex2 = complex1.I.sqrt();
      complex2.I.toString();
      complex0.INF.abs();
      Complex complex3 = complex0.I.log();
      complex3.ZERO.log();
      complex0.pow((double) 1);
      Complex complex4 = complex0.tanh();
      complex0.INF.subtract(0.0);
      complex4.I.getField();
      complex0.getArgument();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.divide((double) 1);
      complex3.INF.subtract(complex6);
      Complex complex7 = complex3.tanh();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.pow(1.1934680816813702E125);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.cos();
      Complex.valueOf(2568.21971);
      Complex complex4 = Complex.valueOf((-5.7694907599522404E-9), 427.76);
      complex3.ZERO.add(1.0);
      Object object0 = complex0.readResolve();
      complex4.sinh();
      Complex complex5 = complex4.ZERO.multiply(1.1934680816813702E125);
      Complex complex6 = complex4.NaN.add(Double.POSITIVE_INFINITY);
      complex6.sqrt1z();
      complex4.ONE.multiply(1.7470924137873214E-8);
      complex1.equals(object0);
      Complex complex7 = complex4.subtract(complex2);
      complex7.ZERO.conjugate();
      complex1.hashCode();
      Complex complex8 = complex3.createComplex(1.1934680816813702E125, 1.1934680816813702E125);
      Complex complex9 = complex8.NaN.atan();
      complex2.tanh();
      complex0.ZERO.toString();
      Complex.valueOf(1.1934680816813702E125, (-1.0));
      Complex.valueOf((-1.0), 0.0);
      Complex complex10 = complex5.cos();
      complex9.pow(complex4);
      complex10.add(1250.58609);
      Complex complex11 = complex7.divide(complex3);
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = Complex.INF;
      complex3.I.subtract(complex1);
      Complex complex4 = complex0.pow(complex3);
      complex0.negate();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex3.sinh();
      complex6.createComplex((-491.1288), (-2468.59262));
      complex2.nthRoot(1);
      Complex complex7 = complex1.asin();
      complex4.subtract(670.308771216638);
      complex3.add(complex7);
      complex5.multiply((-2566));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(1.4649717807769775);
      Complex complex2 = complex0.NaN.subtract(1.4649717807769775);
      Complex.valueOf(1.4649717807769775);
      complex2.I.atan();
      complex0.ONE.readResolve();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.ZERO.divide(1.4649717807769775);
      complex2.I.cos();
      Complex complex5 = complex0.I.add(1181.87);
      complex5.NaN.multiply(789);
      complex4.ONE.abs();
      complex2.abs();
      complex1.acos();
      complex3.NaN.readResolve();
      complex1.sqrt1z();
      int int0 = (-1639);
      try { 
        complex1.nthRoot((-1639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,639
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1164.83752127085), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex1.I.nthRoot(1);
      Complex complex3 = complex0.reciprocal();
      complex3.multiply(529.54482069921);
      Complex complex4 = complex3.reciprocal();
      complex4.exp();
      complex2.exp();
      complex2.add(313.7205460623);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.INF.asin();
      complex3.NaN.toString();
      Complex complex4 = complex0.INF.tan();
      complex4.I.divide(0.0);
      Complex complex5 = complex0.multiply(complex3);
      Complex.valueOf(0.0, (-410.0589));
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = complex6.ONE.sinh();
      complex7.readResolve();
      complex6.cosh();
      Complex complex9 = complex0.tanh();
      complex9.NaN.sinh();
      Complex complex10 = complex8.add(0.0);
      complex10.sqrt();
      complex3.getArgument();
      complex6.add((-410.0589));
      Complex complex11 = complex5.add(complex3);
      complex11.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.subtract((-1859.561904722406));
      Complex complex3 = complex2.ZERO.createComplex((-1859.561904722406), (-1859.561904722406));
      complex0.NaN.getField();
      Complex complex4 = complex1.I.multiply((-1866.431789978631));
      Complex complex5 = complex0.INF.divide(complex2);
      Complex complex6 = complex5.ONE.tan();
      complex6.NaN.subtract(complex1);
      complex6.I.sin();
      Complex complex7 = complex0.sqrt1z();
      complex7.INF.sqrt1z();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex8.NaN.exp();
      complex7.INF.tanh();
      complex7.getArgument();
      Complex complex10 = complex0.divide(0.0);
      complex1.toString();
      complex0.reciprocal();
      Complex complex11 = complex8.add(0.0);
      complex11.NaN.tanh();
      Complex complex12 = complex10.divide(0.0);
      complex8.tanh();
      complex12.getImaginary();
      complex0.pow((-649.843));
      complex12.readResolve();
      complex1.getField();
      complex2.acos();
      Complex complex13 = complex9.pow((-1349.761076225));
      complex13.NaN.cosh();
      complex10.multiply(complex3);
      complex7.multiply(Double.NaN);
      complex4.getReal();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2704.21), 889.962512);
      Complex.valueOf(420.426698);
      complex0.NaN.abs();
      Complex complex2 = Complex.valueOf(889.962512, 0.0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex0.INF.divide(complex1);
      complex0.hashCode();
      complex0.INF.multiply(complex3);
      Complex complex5 = complex1.createComplex((-2704.21), 880.0);
      complex4.NaN.readResolve();
      Complex complex6 = complex0.sqrt();
      complex0.getField();
      complex4.abs();
      complex5.subtract(complex6);
      complex5.nthRoot(2311);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-260.52351775449));
      Complex complex1 = complex0.ONE.cos();
      complex1.ZERO.pow((-362.541530913544));
      complex1.divide((-260.52351775449));
      Complex complex2 = complex0.createComplex((-161.6326), (-161.6326));
      complex2.getField();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.divide((-161.6326));
      Complex complex5 = complex0.multiply((-1586));
      complex4.cosh();
      Complex complex6 = complex5.INF.add(614.10717);
      complex6.ONE.tan();
      Complex complex7 = complex2.pow(3468.0672);
      complex7.add((double) (-1586));
      Complex complex8 = complex7.I.tanh();
      complex8.INF.tan();
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex2.NaN.acos();
      complex10.atan();
      Complex complex11 = complex6.log();
      Complex complex12 = complex9.cos();
      complex11.getArgument();
      try { 
        complex12.nthRoot((-2406));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,406
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 1096;
      complex0.nthRoot(1096);
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf((double) 1096, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.sqrt();
      complex3.ONE.divide(complex1);
      Complex complex4 = Complex.valueOf((-72.9668492664), 0.0);
      Complex complex5 = complex4.I.sinh();
      complex1.multiply((-72.9668492664));
      complex1.log();
      complex1.cosh();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex0.add(complex6);
      complex7.cosh();
      complex1.ONE.conjugate();
      complex5.ONE.divide((-3.060220883766096E-8));
      Complex complex8 = complex0.cos();
      try { 
        complex8.NaN.nthRoot((-188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -188
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      complex0.ONE.pow(complex1);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.multiply(288.3);
      complex1.readResolve();
      complex3.conjugate();
      complex0.divide(complex3);
      complex4.multiply(335);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-1906.32645), 1070.56689);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.sinh();
      complex4.I.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.I.divide(complex3);
      complex7.NaN.cos();
      Complex complex8 = complex1.acos();
      complex8.INF.pow(726.1);
      complex8.subtract(4.84038176769263E-10);
      Complex complex9 = complex5.sin();
      Complex complex10 = complex1.pow(complex0);
      complex10.acos();
      Complex complex11 = complex9.tanh();
      complex11.getImaginary();
      complex0.exp();
      Complex complex12 = Complex.I;
      complex10.equals(complex12);
      complex5.log();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.I.cos();
      complex1.tan();
      Complex complex2 = null;
      Complex complex3 = complex1.NaN.reciprocal();
      complex3.ONE.nthRoot(263);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cosh();
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.createComplex(0.0, (-837.2620029324397));
      Complex complex5 = Complex.NaN;
      complex4.ZERO.add(complex5);
      Complex complex6 = complex2.cos();
      complex6.INF.add(0.0);
      complex6.getArgument();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-1109.23628642818));
      Complex complex1 = complex0.multiply((-1109.23628642818));
      complex1.I.getArgument();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.ONE.add((-84.0));
      complex4.ONE.reciprocal();
      complex3.INF.pow((-1109.23628642818));
      Complex complex5 = Complex.valueOf((-1109.23628642818));
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex2.sqrt1z();
      complex7.hashCode();
      Complex.valueOf(1.5707963267948966, 887.895227053335);
      Complex complex8 = complex0.log();
      complex0.hashCode();
      complex8.getImaginary();
      complex8.isNaN();
      complex5.getArgument();
      complex6.subtract(0.0);
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.multiply(0.0);
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = complex1.ONE.subtract(20.0);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.pow((-792.8198744));
      complex4.negate();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(858.309006594194, (-1580.9));
      complex0.NaN.abs();
      complex0.isInfinite();
      Complex complex1 = complex0.subtract(3374.6450041395);
      complex1.reciprocal();
      complex1.sqrt();
      complex0.multiply(8.985825281444118E-37);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.NaN.multiply((-1.0));
      Complex complex1 = complex0.exp();
      complex0.I.multiply(2.0);
      Complex complex2 = complex0.sin();
      complex0.toString();
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0);
      try { 
        complex1.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex2.NaN.divide(complex5);
      complex6.ONE.subtract(complex3);
      complex3.ZERO.divide(complex0);
      Complex complex7 = complex5.ZERO.sqrt1z();
      Complex complex8 = Complex.valueOf((-1669.513430738623));
      complex1.toString();
      complex0.conjugate();
      Complex complex9 = complex3.cos();
      complex9.ZERO.acos();
      Complex complex10 = Complex.valueOf((-186.69201282880627), 3.5451314095271004E52);
      complex10.NaN.getField();
      complex2.reciprocal();
      Complex complex11 = complex0.multiply(0.0);
      Complex complex12 = complex0.ONE.cosh();
      complex12.NaN.add((-186.69201282880627));
      complex5.log();
      complex2.I.createComplex((-2541.0), 3.5451314095271004E52);
      complex3.nthRoot(37);
      complex11.tanh();
      complex3.sqrt();
      complex8.acos();
      complex1.readResolve();
      complex0.getArgument();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.I.conjugate();
      complex0.equals(complex1);
      complex1.ONE.divide(6.283185307179586);
      Complex.valueOf((double) 1, 6.283185307179586);
      complex1.log();
      complex2.subtract(complex3);
      complex2.cosh();
      try { 
        complex0.ONE.nthRoot((-3077));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,077
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(6.8135571305481364E-46);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      complex0.I.multiply((-849));
      complex0.INF.nthRoot(1);
      Complex complex2 = complex0.pow(3943.272071622079);
      complex2.readResolve();
      Complex complex3 = complex0.multiply(1);
      complex3.reciprocal();
      complex2.exp();
      complex2.hashCode();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.valueOf(1391.3195489767);
      complex1.INF.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.createComplex(1391.3195489767, 0.0);
      Complex complex5 = complex4.ONE.negate();
      complex2.isNaN();
      Complex complex6 = complex5.pow(complex3);
      complex4.NaN.abs();
      complex6.conjugate();
      Complex complex7 = complex5.asin();
      complex5.add((-20.0));
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.070274654122399E107, 5.070274654122399E107);
      Complex complex1 = new Complex(5.070274654122399E107);
      complex1.NaN.tan();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.I.exp();
      complex1.NaN.reciprocal();
      Complex complex5 = complex4.NaN.multiply(complex1);
      complex5.INF.toString();
      Complex complex6 = complex3.I.acos();
      Complex complex7 = complex3.INF.multiply(complex0);
      Complex complex8 = complex7.log();
      complex7.INF.subtract(complex6);
      complex0.getReal();
      complex2.INF.negate();
      Complex complex9 = complex0.pow(complex7);
      complex8.add((-323.065643));
      complex2.conjugate();
      complex6.subtract(Double.POSITIVE_INFINITY);
      complex7.sinh();
      Complex complex10 = complex8.subtract(complex6);
      complex9.isInfinite();
      complex10.getReal();
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.INF.sqrt1z();
      complex2.NaN.sqrt();
      complex2.ONE.subtract(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex4 = Complex.valueOf((-482.6));
      complex4.getField();
      complex0.nthRoot(11);
      Complex complex5 = complex0.sinh();
      complex5.NaN.abs();
      Complex complex6 = complex3.pow(0.0);
      complex5.ZERO.hashCode();
      Complex complex7 = Complex.valueOf(0.0, 2.0);
      complex7.INF.sqrt();
      complex3.INF.subtract(complex7);
      Complex complex8 = Complex.valueOf(2.0, (double) 11);
      Complex complex9 = complex6.sin();
      complex5.multiply(complex0);
      complex5.getImaginary();
      complex7.pow(Double.NaN);
      complex7.add(complex8);
      complex9.readResolve();
      complex7.add(0.0);
      Complex.valueOf((-4127.479), 0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(20.0);
      complex1.I.cos();
      Complex complex2 = Complex.valueOf((-220.3301094));
      Complex complex3 = complex0.subtract(complex1);
      complex0.hashCode();
      Complex complex4 = complex1.acos();
      complex1.readResolve();
      Complex complex5 = complex0.sinh();
      complex3.acos();
      Complex complex6 = complex4.conjugate();
      complex6.abs();
      Complex complex7 = complex5.I.cos();
      Complex complex8 = complex1.acos();
      complex8.ONE.negate();
      complex7.atan();
      complex1.equals(complex0);
      complex5.log();
      Complex complex9 = Complex.valueOf(3.688253867361245);
      complex9.cos();
      complex0.tan();
      complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.242630017261011E-174);
      Complex complex1 = complex0.NaN.pow((-160.9538));
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.ONE.acos();
      complex3.INF.readResolve();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.ZERO.pow(complex4);
      Complex complex6 = Complex.valueOf(0.0, (-1290.0356));
      complex4.ZERO.negate();
      complex0.hashCode();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.NaN.reciprocal();
      complex5.ZERO.readResolve();
      complex0.readResolve();
      complex0.getField();
      complex5.tan();
      complex5.negate();
      complex8.NaN.asin();
      complex6.createComplex((-1290.0356), 0.0);
      complex4.hashCode();
      complex7.multiply((-1290.0356));
      complex1.hashCode();
      complex8.multiply(complex5);
      complex6.pow(complex8);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-2672.2743933086076));
      Complex complex1 = complex0.createComplex((-2672.2743933086076), 1.505582332611084);
      Complex complex2 = complex1.I.asin();
      complex1.multiply(1331);
      complex2.I.createComplex(1.505582332611084, 1331);
      complex1.createComplex((-2672.2743933086076), 0.0);
      complex2.multiply(1331);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1959.52, 0.0);
      Complex complex1 = complex0.sinh();
      complex1.NaN.asin();
      Complex.valueOf(1959.52);
      Complex complex2 = complex1.I.pow(0.0);
      Complex complex3 = complex2.I.sqrt();
      complex0.getReal();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.divide(complex1);
      complex1.ONE.conjugate();
      complex0.NaN.divide(1959.52);
      Complex complex7 = complex4.subtract(1959.52);
      Complex complex8 = complex1.INF.sin();
      Complex complex9 = complex8.multiply(complex1);
      complex8.NaN.conjugate();
      Complex complex10 = complex9.pow(1597.1949541);
      Complex complex11 = complex7.cos();
      complex11.cos();
      Complex complex12 = complex7.sinh();
      Complex complex13 = complex12.INF.tan();
      complex13.NaN.sqrt1z();
      complex6.isInfinite();
      complex11.getReal();
      complex5.acos();
      complex3.tan();
      complex10.log();
      complex9.sqrt();
      try { 
        complex9.nthRoot((-2309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,309
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1973.722826390186);
      Complex complex2 = complex0.I.sinh();
      complex0.getImaginary();
      Complex complex3 = complex2.cosh();
      complex0.add(complex3);
      complex1.ZERO.negate();
      Complex complex4 = complex1.INF.add(1.0);
      complex4.I.divide(1973.722826390186);
      Complex.valueOf(1.0);
      complex0.readResolve();
      Complex complex5 = complex3.I.pow(complex0);
      complex5.I.cosh();
      Complex complex6 = complex3.reciprocal();
      complex6.abs();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex2.pow(1973.722826390186);
      complex1.atan();
      Complex complex9 = complex7.divide(1.5006751265932605);
      complex9.NaN.reciprocal();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(1332.7930664);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex1.NaN.reciprocal();
      complex2.INF.getField();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.ONE.acos();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      complex5.ZERO.abs();
      Complex complex7 = complex1.pow(6.704597874020559E-305);
      Complex complex8 = complex1.INF.createComplex(6.704597874020559E-305, (-1508.497415231));
      complex8.NaN.log();
      Complex complex9 = complex0.ONE.reciprocal();
      Complex complex10 = complex9.ONE.multiply(complex3);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex11 = complex1.createComplex(1332.7930664, 1332.7930664);
      complex1.hashCode();
      Complex complex12 = complex0.add(complex7);
      Complex complex13 = complex12.NaN.tan();
      Complex complex14 = complex11.I.acos();
      assertEquals(1.5707963267948966, complex14.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex5.subtract(1332.7930664);
      Complex complex16 = complex11.reciprocal();
      complex16.ZERO.divide(complex13);
      complex11.ONE.sqrt1z();
      Complex complex17 = Complex.valueOf(0.0, 9.156218120779494E-199);
      assertEquals(0.0, complex17.getReal(), 0.01);
      
      Complex complex18 = complex16.divide(complex4);
      Complex complex19 = complex18.NaN.acos();
      complex18.I.toString();
      assertSame(complex18, complex19);
      
      complex15.createComplex(0.0, 0.0);
      Complex complex20 = complex15.subtract(complex9);
      assertTrue(complex9.equals((Object)complex10));
      assertNotSame(complex20, complex4);
      assertSame(complex20, complex12);
      
      Complex complex21 = complex2.subtract((-2726.988));
      assertFalse(complex21.equals((Object)complex14));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 116.3229;
      Complex complex0 = new Complex(116.3229);
      complex0.I.exp();
      Complex complex1 = complex0.I.sqrt();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2216.412616355274));
      Complex complex1 = new Complex(2203.904246152808);
      double double0 = 120.953193970541;
      Complex complex2 = complex1.ZERO.multiply(120.953193970541);
      complex1.NaN.hashCode();
      complex0.divide(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.reciprocal();
      complex4.negate();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.ONE.cos();
      complex5.INF.divide(complex2);
      Complex complex7 = complex3.asin();
      complex7.log();
      Complex complex8 = complex6.ZERO.reciprocal();
      try { 
        complex8.ONE.nthRoot((-1318));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,318
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
