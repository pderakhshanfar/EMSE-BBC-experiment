/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:23:09 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.createComplex((-1563.5689), (-20.0));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex0.negate();
      Complex complex2 = complex0.tan();
      complex2.multiply(complex1);
      complex1.atan();
      complex0.exp();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2.0E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(4978);
      complex1.add((-2.2560584955755303E-8));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.47584593296051025);
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(5087.567796205, 5087.567796205);
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex3.ZERO.acos();
      complex6.I.divide(complex5);
      complex4.createComplex(2.3367183133931002E-7, 2.3367183133931002E-7);
      complex3.sinh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.readResolve();
      Complex complex1 = complex0.divide(4.512117122055395E-8);
      complex1.ONE.sqrt();
      Complex complex2 = complex1.INF.acos();
      complex1.abs();
      complex1.ONE.nthRoot(2340);
      complex0.nthRoot(7);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.createComplex(20.0, 20.0);
      complex4.NaN.asin();
      Complex complex5 = complex3.cos();
      Complex complex6 = new Complex(20.0, 20.0);
      complex6.NaN.pow((double) 2340);
      complex6.ZERO.add((double) 2340);
      Complex complex7 = complex3.ZERO.add(complex6);
      Complex complex8 = complex3.tanh();
      complex8.log();
      complex5.multiply(1160.9);
      complex7.tan();
      Complex complex9 = Complex.I;
      complex9.add(complex2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.readResolve();
      Complex complex1 = complex0.divide(4.512117122055395E-8);
      complex1.ONE.sqrt();
      complex1.INF.acos();
      complex1.abs();
      complex1.ONE.nthRoot(2340);
      complex0.nthRoot(7);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.createComplex(20.0, 20.0);
      Complex complex4 = complex3.NaN.asin();
      complex2.cos();
      Complex complex5 = new Complex(20.0, 20.0);
      Complex complex6 = complex5.NaN.pow((double) 2340);
      complex5.ZERO.add((double) 2340);
      Complex complex7 = complex2.ZERO.add(complex5);
      Complex complex8 = complex2.tanh();
      complex8.log();
      complex2.sin();
      complex2.NaN.createComplex(4.512117122055395E-8, 0.0);
      complex7.tanh();
      complex0.tanh();
      complex2.subtract((double) 7);
      complex5.sqrt1z();
      complex6.readResolve();
      Complex complex9 = complex4.cosh();
      complex9.multiply((-878));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3352.1147815698264));
      Complex complex1 = Complex.I;
      complex1.NaN.acos();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-5478.8877315), 1112.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.acos();
      complex1.divide((-5478.8877315));
      Complex complex4 = new Complex((-5478.8877315), 1112.0);
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2197.149191825));
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.tan();
      complex2.negate();
      Complex complex5 = Complex.valueOf((-5679.144728079034), Double.NaN);
      complex5.cos();
      complex0.reciprocal();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.asin();
      complex0.I.getArgument();
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ZERO.tanh();
      complex3.abs();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.5707963267948966);
      complex5.INF.conjugate();
      complex1.readResolve();
      Complex complex6 = complex4.I.add(complex1);
      Complex.valueOf((-91.756));
      complex4.equals(complex2);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(1.0, Double.NaN);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.ZERO.sinh();
      int int0 = (-2243);
      try { 
        complex0.nthRoot((-2243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,243
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-238.8744291147), 2.8930193727937684E208);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.multiply(complex2);
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex2 = complex0.acos();
      complex1.negate();
      Complex.valueOf(1222.49, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.I;
      complex2.divide(Double.NaN);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      complex1.negate();
      Complex.valueOf(0.0, 2.460564136505127);
      Complex complex2 = new Complex(17.914424, Double.POSITIVE_INFINITY);
      complex1.divide(complex2);
      Complex complex3 = Complex.I;
      complex3.INF.atan();
      complex3.divide(0.0);
      complex0.tan();
      Complex.valueOf(2.8915173475404403);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-238.8744291147), 2.8930193727937684E208);
      Complex complex1 = complex0.negate();
      complex1.multiply(4.906094420881007E-35);
      complex0.tan();
      complex1.hashCode();
      complex0.tan();
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.getArgument();
      Complex complex1 = new Complex((-20.0), (-1743.4));
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ONE.cosh();
      complex4.abs();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex4.INF.subtract(complex1);
      complex6.tanh();
      complex6.NaN.acos();
      complex6.ONE.sqrt();
      Complex complex7 = complex3.subtract(Double.NaN);
      complex5.ZERO.readResolve();
      complex7.ZERO.atan();
      Complex complex8 = complex7.I.conjugate();
      complex8.ZERO.add(complex3);
      complex4.getField();
      Complex complex9 = complex0.asin();
      complex9.log();
      complex0.multiply(1.5430806348152437);
      complex9.divide(996.05);
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex3.conjugate();
      complex11.ONE.readResolve();
      Complex complex12 = complex10.createComplex(1.5430806348152437, (-1743.4));
      complex12.INF.createComplex(1.0, (-7.853929640024059));
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex.valueOf((-238.8744291147));
      Complex complex0 = Complex.valueOf(2.8930193727937684E208);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.negate();
      complex2.hashCode();
      Complex complex3 = new Complex((-1439.321), (-6.971366338144781E56));
      complex3.multiply(3885.885869197128);
      complex1.tan();
      Complex complex4 = Complex.valueOf(3259.5771866416, (-238.8744291147));
      complex4.add(complex3);
      Complex complex5 = new Complex(3216.8459, (-238.8744291147));
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3328.85454189));
      Complex complex1 = complex0.subtract((-3328.85454189));
      Object object0 = new Object();
      complex1.acos();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.negate();
      Complex complex3 = new Complex(0.5127768516540527);
      complex3.hashCode();
      complex1.tan();
      complex1.pow(1.1236384983738085E7);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3328.85454189), (-3328.85454189));
      complex0.subtract((-3328.85454189));
      Complex.valueOf((-3328.85454189));
      Complex.valueOf((-3328.85454189));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.negate();
      complex0.hashCode();
      complex2.multiply((-1305.46));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.add(complex0);
      complex0.tanh();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-2.1706266226554237E-7), (-2.1706266226554237E-7));
      complex0.subtract((-1176.8318087798318));
      complex0.readResolve();
      Complex complex1 = complex0.acos();
      complex1.negate();
      Complex complex2 = new Complex((-20.0), (-2881.382659257008));
      complex2.hashCode();
      Complex.valueOf((-1176.8318087798318), (-20.0));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3328.85454189), (-3328.85454189));
      complex0.subtract((-3328.85454189));
      Complex.valueOf((-3328.85454189));
      Complex.valueOf((-3328.85454189), (-3328.85454189));
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.INF;
      complex1.divide(complex2);
      Complex complex3 = Complex.I;
      complex3.divide((-4.877952454011428E-9));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-238.8744291147), 2.8930193727937684E208);
      Complex complex1 = Complex.valueOf(2.8930193727937684E208, 2.8930193727937684E208);
      Complex complex2 = complex0.multiply(2147161071);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.tan();
      complex3.hashCode();
      complex3.getField();
      Complex complex4 = Complex.ONE;
      complex3.getReal();
      Complex complex5 = complex2.tanh();
      // Undeclared exception!
      complex5.nthRoot(1518500250);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-2.1706266226554237E-7), (-2.1706266226554237E-7));
      Complex complex1 = complex0.subtract((-1176.8318087798318));
      complex0.readResolve();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.negate();
      Complex complex4 = new Complex((-20.0), (-2881.382659257008));
      complex4.hashCode();
      complex2.multiply(Double.NaN);
      Complex.valueOf((-1176.8318087798318), (-20.0));
      complex0.add(complex1);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-238.8744291147), 2.8930193727937684E208);
      Complex complex1 = complex0.negate();
      complex1.sinh();
      complex0.hashCode();
      Complex complex2 = complex0.multiply((-238.8744291147));
      Complex.valueOf(4162.0);
      Complex complex3 = complex0.tan();
      complex3.add(complex0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3328.85454189), (-3328.85454189));
      complex0.subtract((-3328.85454189));
      Complex complex1 = Complex.valueOf((-3328.85454189));
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.negate();
      complex4.multiply((-6295.1568));
      complex1.tan();
      Complex complex5 = Complex.valueOf(1222.49, (-3328.85454189));
      complex4.divide(complex5);
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex0.toString();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.INF;
      complex1.multiply(complex2);
      complex0.sqrt();
      Complex complex4 = complex2.tan();
      complex0.hashCode();
      complex4.ZERO.getField();
      complex0.divide(1.6447E-320);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3328.14446974358), (-3328.14446974358));
      Complex complex1 = complex0.subtract((-3328.85454189));
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.acos();
      complex3.negate();
      complex2.hashCode();
      complex2.multiply((-3328.85454189));
      Complex complex4 = complex3.tan();
      complex1.divide(complex4);
      complex1.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getArgument();
      Complex complex1 = complex0.reciprocal();
      complex1.hashCode();
      complex1.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = Complex.valueOf(1.5707963267948966, (-636.7798368783883));
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex1.sqrt();
      complex3.tan();
      complex5.hashCode();
      complex0.getField();
      Complex complex7 = complex6.sinh();
      complex0.getReal();
      complex7.sqrt1z();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3328.85454189), (-3328.85454189));
      Complex complex1 = complex0.subtract((-3328.85454189));
      complex0.readResolve();
      complex0.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sinh();
      complex3.getReal();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.valueOf((-806.881184333));
      Complex complex7 = complex6.log();
      complex2.equals(complex1);
      complex7.acos();
      Complex complex8 = Complex.valueOf(919.823848556, (-806.881184333));
      complex8.abs();
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = new Complex(1131.635, 900.597);
      complex10.reciprocal();
      complex9.toString();
      complex1.isInfinite();
      complex6.multiply(311);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2265.315645, 2265.315645);
      Complex complex1 = complex0.asin();
      complex0.I.abs();
      Complex complex2 = complex0.INF.conjugate();
      complex2.INF.abs();
      complex0.subtract(2265.315645);
      Complex complex3 = Complex.valueOf(1.0, (-660.23159579098));
      Complex complex4 = complex3.sinh();
      complex1.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.divide(2265.315645);
      complex1.exp();
      Complex complex5 = Complex.I;
      complex5.sin();
      complex4.multiply(2761.30014204);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2265.315645, 2265.315645);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.createComplex(2265.315645, 2265.315645);
      Complex complex3 = complex2.multiply(complex1);
      complex0.sin();
      Complex complex4 = complex2.sinh();
      complex4.getReal();
      Complex complex5 = complex0.sinh();
      Complex complex6 = Complex.ZERO;
      complex3.equals(complex5);
      complex2.acos();
      Complex complex7 = Complex.valueOf((-2607.172508484823), (-1298.7426189));
      complex4.abs();
      complex7.reciprocal();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex5.subtract((-2.10770182066344E-8));
      complex7.subtract((-49.9677262472501));
      Complex complex10 = complex4.negate();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex8.exp();
      complex5.add(complex10);
      complex11.isInfinite();
      complex9.add(complex11);
      complex12.createComplex((-49.9677262472501), (-20.0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      complex0.toString();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.atan();
      complex1.multiply(complex3);
      complex4.sqrt1z();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex3.tan();
      complex2.hashCode();
      complex6.ZERO.getField();
      complex0.sinh();
      complex5.getReal();
      complex6.sqrt1z();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getArgument();
      Complex complex1 = complex0.reciprocal();
      complex1.hashCode();
      complex1.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.subtract(1.0);
      Complex.valueOf(1.0, 1.5707963267948966);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = Complex.valueOf(2761.30014204);
      complex5.ONE.divide((-2987.441811772));
      complex3.exp();
      complex5.sin();
      complex6.multiply(4871.636);
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3328.85454189), (-3328.85454189));
      complex0.subtract((-3328.85454189));
      complex0.readResolve();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.negate();
      Complex.valueOf((-3328.85454189));
      complex0.isNaN();
      complex1.isInfinite();
      complex2.getImaginary();
      Complex complex3 = Complex.valueOf(2.0, (-1.0));
      Complex complex4 = complex3.atan();
      complex4.getField();
      complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.cosh();
      complex2.INF.sin();
      Complex complex3 = complex1.createComplex(2.1071983674869414E-8, (-1328.5013027302));
      Complex complex4 = complex1.ZERO.cos();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex2.I.acos();
      Complex complex8 = complex6.I.pow(0.0);
      complex8.ZERO.cos();
      complex2.NaN.atan();
      complex2.multiply(1982);
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.pow(4.588037824983901);
      complex10.subtract(4.588037824983901);
      Complex complex12 = complex5.reciprocal();
      complex12.ONE.getArgument();
      complex7.conjugate();
      complex0.ZERO.hashCode();
      complex9.reciprocal();
      complex3.readResolve();
      complex2.subtract(complex8);
      Complex complex13 = complex12.sqrt1z();
      complex10.conjugate();
      complex13.cos();
      complex1.pow(complex12);
      complex10.subtract((-1328.5013027302));
      complex6.conjugate();
      complex11.toString();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.add((-1096.272265617853));
      Complex complex3 = complex2.cos();
      complex2.I.toString();
      Complex complex4 = complex2.atan();
      complex0.hashCode();
      complex4.getArgument();
      Complex complex5 = complex4.add(complex3);
      complex5.ZERO.reciprocal();
      complex3.hashCode();
      complex0.readResolve();
      Complex complex6 = complex2.INF.subtract(7.582560135332983E-10);
      complex6.ZERO.pow(7.582560135332983E-10);
      complex0.I.tan();
      Complex complex7 = complex2.subtract((-1096.272265617853));
      complex7.log();
      complex7.I.readResolve();
      complex2.ONE.acos();
      complex7.negate();
      Complex complex8 = Complex.valueOf((-20.0));
      complex2.pow((double) (-1953));
      complex1.reciprocal();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.049068240916723E166), (-7.049068240916723E166));
      Complex complex1 = complex0.NaN.multiply((-7.049068240916723E166));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.I.sinh();
      complex3.createComplex((-7.049068240916723E166), 354.295969418);
      Complex complex4 = complex2.I.multiply(complex1);
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.NaN.sinh();
      complex0.getReal();
      Complex complex7 = complex6.ZERO.sinh();
      complex4.readResolve();
      double double0 = 7.582560135332983E-10;
      Complex complex8 = complex3.subtract((-7.049068240916723E166));
      complex0.pow(3328.85454189);
      complex7.tan();
      try { 
        complex8.nthRoot((-2044));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,044
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex1.ZERO.abs();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.I.log();
      Complex complex5 = Complex.NaN;
      complex5.INF.createComplex(0.0, 0.0);
      complex2.add(complex5);
      complex0.NaN.add(complex2);
      Complex.valueOf(0.0);
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf((-1.0));
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex3.multiply(complex1);
      complex5.tanh();
      Complex complex6 = complex1.sqrt();
      complex2.sqrt1z();
      Complex complex7 = Complex.I;
      complex7.multiply(complex6);
      Complex complex8 = complex4.tan();
      complex6.hashCode();
      complex3.isNaN();
      complex8.isInfinite();
      complex5.getImaginary();
      complex0.atan();
      complex4.getField();
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.divide((-2356.1718));
      complex0.sin();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.NaN.createComplex((-2356.1718), 718.0);
      complex3.ONE.sqrt1z();
      Complex complex4 = complex2.ZERO.subtract(complex0);
      complex4.INF.getField();
      complex0.abs();
      Complex complex5 = Complex.ZERO;
      complex5.multiply((-1896.49));
      complex3.asin();
      Complex complex6 = complex2.reciprocal();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.049068240916723E166), (-7.049068240916723E166));
      Complex complex1 = complex0.NaN.multiply((-7.049068240916723E166));
      Complex complex2 = complex1.divide((-2356.1718));
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.createComplex((-7.049068240916723E166), (-7.049068240916723E166));
      Complex complex6 = complex1.subtract(complex5);
      Complex complex7 = Complex.NaN;
      complex7.getField();
      complex0.abs();
      complex2.multiply(complex1);
      Complex complex8 = complex3.multiply(complex5);
      Complex complex9 = complex4.tanh();
      complex9.sqrt();
      complex8.sqrt1z();
      Complex complex10 = complex0.multiply(complex1);
      complex4.tan();
      complex0.hashCode();
      complex10.isNaN();
      complex6.isInfinite();
      complex0.getImaginary();
      complex2.atan();
      complex5.getField();
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.sinh();
      complex3.createComplex(0.0, 354.295969418);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex1.sin();
      complex5.sinh();
      complex1.getReal();
      complex3.sinh();
      Complex complex6 = Complex.ZERO;
      complex6.equals(complex0);
      complex2.acos();
      Complex complex7 = Complex.valueOf((-169.542), 354.295969418);
      complex7.abs();
      complex4.reciprocal();
      complex5.cos();
      complex0.subtract(1959.055988618725);
      complex2.subtract(5.283020542151163E-141);
      complex0.negate();
      Complex complex8 = Complex.INF;
      complex8.ZERO.exp();
      Complex complex9 = null;
      try { 
        complex8.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(125.6572863989082, 354.295969418);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(0.0, (-7.049068240916723E166));
      Complex complex3 = complex1.add(complex2);
      complex1.subtract((-1074.372094525084));
      Complex complex4 = complex3.asin();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.049068240916723E166), (-7.049068240916723E166));
      Complex complex1 = complex0.add((-7.049068240916723E166));
      Complex complex2 = complex1.cos();
      complex2.toString();
      Complex complex3 = complex0.atan();
      complex3.hashCode();
      Complex complex4 = Complex.INF;
      complex4.getArgument();
      Complex complex5 = complex2.add(complex4);
      complex4.reciprocal();
      complex5.hashCode();
      complex3.readResolve();
      complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.NaN;
      complex6.pow(2.0986910340070608E-4);
      complex2.tan();
      int int0 = (-1953);
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3328.85454189), (-3328.85454189));
      complex0.subtract((-3328.85454189));
      complex0.readResolve();
      Complex complex1 = complex0.acos();
      complex1.negate();
      Complex.valueOf((-3328.85454189));
      Complex complex2 = complex0.pow(1022.0);
      Complex complex3 = complex1.reciprocal();
      complex3.NaN.abs();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3328.85454189), (-3328.85454189));
      Complex complex1 = Complex.valueOf((-3328.85454189));
      Complex complex2 = complex0.multiply((-3328.85454189));
      complex2.asin();
      complex1.reciprocal();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.049068240916723E166), (-7.049068240916723E166));
      Complex complex1 = complex0.NaN.multiply((-7.049068240916723E166));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.I.sinh();
      complex3.createComplex((-7.049068240916723E166), 354.295969418);
      Complex complex4 = complex2.I.multiply(complex1);
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.NaN.sinh();
      complex0.getReal();
      complex6.ZERO.sinh();
      complex1.equals(complex0);
      complex0.acos();
      complex1.abs();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.I.subtract(983.164899);
      complex4.acos();
      Complex complex10 = complex8.divide(complex3);
      Complex complex11 = complex9.reciprocal();
      complex11.multiply(complex7);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2265.315645, 2265.315645);
      Complex complex1 = complex0.asin();
      complex0.I.abs();
      Complex complex2 = complex0.INF.conjugate();
      complex2.INF.abs();
      Complex complex3 = complex0.sin();
      complex1.toString();
      Complex complex4 = complex3.add(0.0);
      complex4.ZERO.getField();
      Complex complex5 = complex4.subtract(1.0);
      Complex complex6 = complex1.negate();
      complex3.add(complex5);
      complex1.isInfinite();
      complex2.add(complex6);
      complex4.createComplex(1.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(570.3800182255021, 1096.272265617853);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.multiply(1592.2314);
      Complex complex5 = complex3.atan();
      complex1.getImaginary();
      Complex complex6 = complex3.log();
      complex6.sqrt1z();
      complex0.subtract(1096.272265617853);
      Complex complex7 = complex1.subtract(2065.0);
      complex0.pow(complex4);
      complex6.reciprocal();
      complex0.nthRoot(2234);
      complex7.log();
      complex5.nthRoot(2313);
      Complex complex8 = Complex.valueOf(27.14994569);
      complex8.ZERO.tanh();
      complex8.getField();
      try { 
        complex7.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-8.10254145615142E-8), (-8.10254145615142E-8));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.multiply(0.0);
      complex1.NaN.atan();
      complex2.getImaginary();
      Complex complex4 = complex0.log();
      complex0.sqrt1z();
      Complex complex5 = complex3.subtract(0.0);
      complex5.INF.subtract((-6.565117804865237E-15));
      Complex complex6 = complex4.ONE.pow(complex1);
      complex2.ZERO.reciprocal();
      try { 
        complex6.nthRoot((-857));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -857
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(570.3800182255021, 570.3800182255021);
      Complex complex1 = Complex.valueOf((-2600.75781921), (-2600.75781921));
      Complex complex2 = complex0.ZERO.tan();
      complex0.nthRoot(1022);
      Complex complex3 = complex0.sin();
      complex3.ONE.nthRoot(1);
      Complex.valueOf(570.3800182255021, (-226.3));
      complex0.isNaN();
      Complex complex4 = complex1.cosh();
      complex4.ZERO.hashCode();
      complex3.readResolve();
      complex3.subtract((-226.3));
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2675.633520921, 2675.633520921);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ZERO.multiply(2675.633520921);
      complex2.multiply(951);
      Complex complex4 = complex2.ZERO.subtract(complex0);
      complex0.subtract(2675.633520921);
      Complex complex5 = complex3.INF.asin();
      complex5.ONE.subtract(complex4);
      Complex complex6 = complex2.reciprocal();
      complex3.readResolve();
      complex2.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex0.INF.cos();
      complex0.ZERO.hashCode();
      complex3.ONE.multiply(1);
      complex3.INF.abs();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex1.isInfinite();
      Complex complex5 = complex4.atan();
      complex4.I.hashCode();
      Complex complex6 = complex4.log();
      complex5.cos();
      Complex complex7 = complex5.ONE.atan();
      Complex complex8 = Complex.valueOf((-1550.611));
      complex8.NaN.readResolve();
      complex8.ONE.sqrt1z();
      Complex complex9 = complex1.cos();
      complex9.ZERO.cosh();
      Complex complex10 = complex9.tanh();
      complex10.I.conjugate();
      complex4.toString();
      complex9.isInfinite();
      complex2.getImaginary();
      Complex complex11 = complex2.conjugate();
      complex11.INF.divide(0.0);
      Complex complex12 = complex11.INF.multiply((-2.607907890164073E-8));
      complex12.ONE.atan();
      complex7.readResolve();
      complex0.abs();
      complex6.createComplex((-1550.611), 0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      complex1.NaN.readResolve();
      int int0 = 0;
      try { 
        complex0.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.tanh();
      complex4.NaN.log();
      complex4.toString();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex1.atan();
      complex5.multiply(complex4);
      Complex complex7 = complex1.sqrt1z();
      complex7.sqrt();
      complex3.ZERO.tan();
      complex0.hashCode();
      complex3.sinh();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-4695.001867366));
      Complex complex1 = complex0.ONE.acos();
      complex1.ONE.negate();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex0.I.multiply(complex2);
      complex3.INF.reciprocal();
      complex0.toString();
      complex3.isInfinite();
      complex2.multiply(655);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.pow((-884.9));
      Complex complex2 = complex1.reciprocal();
      complex2.NaN.multiply(complex0);
      complex1.getArgument();
      complex1.readResolve();
      Complex complex3 = complex0.ONE.exp();
      complex3.I.multiply(668);
      complex3.I.log();
      complex1.getReal();
      Complex complex4 = complex0.multiply(1);
      Complex complex5 = Complex.valueOf((-1567.0));
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex6.INF.add(1.9014079059505456E-7);
      Complex complex8 = complex7.INF.multiply(612);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex8.ZERO.add(complex9);
      complex4.createComplex(1, 1);
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf(Double.NaN, (-884.9));
      complex7.equals(complex1);
      complex8.log();
      complex1.isNaN();
      complex10.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2265.315645, 2265.315645);
      Complex complex1 = complex0.asin();
      complex0.I.abs();
      Complex complex2 = complex0.INF.conjugate();
      complex2.INF.abs();
      Complex complex3 = complex0.sin();
      complex1.toString();
      Complex complex4 = complex3.add(0.0);
      complex4.ZERO.getField();
      Complex complex5 = complex1.acos();
      complex5.I.divide(complex1);
      complex4.reciprocal();
      complex0.multiply(complex4);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-510.157034755));
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.NaN.multiply(279);
      Complex complex4 = complex2.ZERO.createComplex((-510.157034755), (-510.157034755));
      Complex complex5 = complex4.divide(complex0);
      complex2.INF.abs();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.multiply(0.0);
      Complex complex8 = complex6.asin();
      Complex complex9 = complex8.ZERO.tan();
      complex2.INF.multiply(complex0);
      Complex complex10 = Complex.valueOf(1796.42225103846);
      complex10.I.multiply((-3585.558867553684));
      complex5.subtract(complex3);
      complex6.tanh();
      Complex complex11 = complex1.sinh();
      complex11.toString();
      complex8.atan();
      Complex complex12 = complex9.add((-96.30711399));
      complex12.NaN.multiply(902);
      complex0.pow(complex5);
      Complex complex13 = complex7.sqrt();
      complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.negate();
      complex2.INF.sqrt1z();
      Complex.valueOf((-2382.4375));
      complex2.INF.hashCode();
      Complex complex3 = complex0.multiply((-20.0));
      complex3.INF.tan();
      complex3.add(complex1);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.NaN;
      complex2.ZERO.cos();
      complex1.INF.hashCode();
      complex1.INF.pow(complex2);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.ONE.reciprocal();
      complex4.INF.sin();
      complex3.I.createComplex(369.62, 369.62);
      Complex complex5 = Complex.valueOf(0.0, 20.0);
      Complex complex6 = complex5.log();
      complex6.ZERO.tanh();
      complex0.INF.abs();
      complex0.multiply(0.0);
      complex4.sinh();
      complex4.getArgument();
      complex0.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double double0 = 2366.883853160824;
      double double1 = 1.0;
      Complex complex0 = new Complex(2366.883853160824, 1.0);
      complex0.NaN.hashCode();
      Complex.valueOf(2366.883853160824);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.reciprocal();
      complex3.sinh();
      complex2.readResolve();
      Complex complex4 = complex2.cosh();
      Complex.valueOf(276.0);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.I.atan();
      complex6.ONE.tanh();
      Complex.valueOf(1.0);
      complex0.reciprocal();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex1.ZERO.abs();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.I.log();
      Complex complex5 = Complex.NaN;
      complex5.INF.createComplex(0.0, 0.0);
      complex2.add(complex5);
      complex0.NaN.add(complex2);
      Complex complex6 = complex4.I.subtract(1300.9750265317741);
      complex0.equals(complex2);
      Complex complex7 = complex4.reciprocal();
      complex7.multiply(1474);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(479.5517155166873);
      Complex complex1 = new Complex(479.5517155166873, 479.5517155166873);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.tan();
      complex3.I.multiply(1729);
      complex2.sqrt();
      Complex complex4 = complex0.INF.exp();
      Complex complex5 = complex1.atan();
      complex5.INF.getField();
      Complex complex6 = complex2.sqrt1z();
      complex6.NaN.tanh();
      complex6.ZERO.multiply(865);
      Complex complex7 = complex5.sinh();
      complex7.NaN.createComplex(865, (-581.3635942));
      Complex complex8 = complex1.negate();
      complex8.getArgument();
      complex8.sin();
      complex1.getReal();
      Complex complex9 = complex0.multiply((-2780.7));
      Complex complex10 = complex9.cosh();
      complex10.createComplex((-2780.7), (-2506.03799861));
      complex4.multiply(865);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(2.7535627955313556E176, (-1033.0));
      Complex complex1 = Complex.valueOf((-1033.0));
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.I.divide(2.7535627955313556E176);
      Complex complex4 = complex0.multiply((-1813));
      complex3.ZERO.add(complex1);
      Complex complex5 = complex0.I.log();
      Complex complex6 = complex5.I.acos();
      complex5.readResolve();
      complex6.I.sin();
      complex4.hashCode();
      complex0.getField();
      complex1.ONE.subtract(1.0);
      complex3.acos();
      complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.reciprocal();
      complex2.isInfinite();
      complex1.isNaN();
      complex2.getArgument();
      complex0.tanh();
      complex1.INF.hashCode();
      complex1.add((-1.0904271124793968E-8));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.nthRoot(1);
      complex0.ONE.readResolve();
      complex0.I.hashCode();
      complex0.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply(161);
      complex2.NaN.cosh();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(2455.01375712, 0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ZERO.multiply(complex2);
      complex3.ZERO.hashCode();
      Complex complex4 = complex1.INF.asin();
      Complex complex5 = complex4.cosh();
      complex5.I.add(complex0);
      complex4.ONE.add(2455.01375712);
      int int0 = (-2478);
      Complex complex6 = complex1.multiply((double) (-2478));
      complex6.ZERO.add(0.0);
      try { 
        complex0.nthRoot((-2478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,478
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex3.ONE.multiply(0.0);
      Complex complex6 = complex4.NaN.add(complex1);
      complex4.getField();
      Complex complex7 = complex0.add(complex2);
      complex1.subtract(complex0);
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex3.ONE.multiply(complex1);
      complex9.asin();
      complex8.NaN.pow(complex6);
      Complex complex10 = complex3.acos();
      Complex complex11 = complex5.add(complex0);
      complex11.ONE.createComplex(178.007395887, (-2058.4));
      complex1.toString();
      Complex complex12 = complex7.atan();
      Complex complex13 = complex3.sqrt1z();
      complex12.readResolve();
      complex2.getArgument();
      complex4.log();
      complex9.sqrt();
      complex13.add(complex10);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getArgument();
      Complex complex1 = complex0.reciprocal();
      complex1.hashCode();
      complex1.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.subtract(1.0);
      Complex complex4 = Complex.valueOf(1.0, 1.5707963267948966);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.NaN.cosh();
      Complex.valueOf(2761.30014204);
      complex6.ONE.divide((-2987.441811772));
      Complex complex7 = complex3.exp();
      complex7.INF.sin();
      complex4.multiply((-2987.441811772));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.ZERO;
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.sin();
      complex0.toString();
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.I.multiply(0.0);
      complex3.createComplex(3856.516600840559, 0.0);
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex4.NaN.reciprocal();
      complex5.NaN.negate();
      Complex complex6 = complex0.add(complex1);
      complex6.INF.exp();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.ZERO.log();
      complex1.divide(complex7);
      complex0.getReal();
      complex8.cos();
      complex7.atan();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.049068240916723E166), (-7.049068240916723E166));
      Complex complex1 = complex0.NaN.multiply((-7.049068240916723E166));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.I.sinh();
      complex3.createComplex((-7.049068240916723E166), 354.295969418);
      Complex complex4 = complex2.I.multiply(complex1);
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.NaN.sinh();
      complex0.getReal();
      Complex complex7 = complex6.ZERO.sinh();
      complex1.equals(complex0);
      Complex complex8 = complex0.acos();
      complex1.abs();
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = complex5.cos();
      Complex complex11 = complex10.I.subtract(983.164899);
      complex11.ZERO.subtract(660.3305106796506);
      complex9.negate();
      Complex complex12 = complex1.add(complex8);
      complex12.isInfinite();
      complex7.add(complex8);
      complex4.createComplex((-4434.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8307188599677033E-8, 1.8307188599677033E-8);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.0937429891059164E185), (-2.0937429891059164E185));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = complex1.pow((-2.0937429891059164E185));
      Complex complex6 = complex0.ONE.pow((-2.0937429891059164E185));
      complex6.ONE.add((-2.0937429891059164E185));
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex7.I.sqrt();
      complex2.isNaN();
      Complex complex9 = complex2.sin();
      complex0.I.log();
      Complex complex10 = complex0.createComplex(3390.279575449344, (-2.0937429891059164E185));
      complex10.hashCode();
      Complex complex11 = complex9.subtract(complex3);
      complex4.I.tanh();
      complex11.ZERO.sin();
      complex4.equals(complex5);
      complex11.isNaN();
      complex3.subtract(2.7600590782738726E-238);
      try { 
        complex8.nthRoot((-1357));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,357
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.36697328090667725, 0.36697328090667725);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex2.I.negate();
      Complex complex3 = complex1.INF.subtract(complex0);
      complex1.I.pow(complex3);
      Complex complex4 = complex0.log();
      complex4.hashCode();
      Complex complex5 = complex1.multiply(314);
      complex5.ZERO.pow(complex0);
      complex4.isInfinite();
      complex0.abs();
      complex5.equals("");
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      complex0.NaN.hashCode();
      complex1.ONE.sin();
      Complex complex2 = complex0.conjugate();
      complex2.sinh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-698.0853405949878), (-698.0853405949878));
      Complex complex1 = complex0.NaN.add(0.0);
      complex1.sqrt();
      Complex complex2 = complex0.tan();
      complex0.INF.sinh();
      complex2.nthRoot(1);
      Complex complex3 = complex1.tan();
      complex3.I.multiply((-1762));
      complex2.createComplex(Double.NaN, 0.0);
      Complex.valueOf((-698.0853405949878));
      Complex complex4 = complex2.negate();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.6160298585891724, 0.6160298585891724);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex complex6 = complex4.tan();
      complex2.INF.negate();
      Complex complex7 = complex1.subtract(complex0);
      complex0.getImaginary();
      complex7.getReal();
      Complex complex8 = complex3.divide(0.2463005999453618);
      complex8.NaN.hashCode();
      complex8.NaN.sinh();
      complex6.hashCode();
      Complex complex9 = complex3.pow(0.2463005999453618);
      complex9.acos();
      complex9.INF.subtract(complex5);
      Complex complex10 = complex7.divide(complex1);
      complex10.I.sqrt1z();
      complex7.conjugate();
      complex6.nthRoot(17);
      Complex.valueOf((-20.0), 0.6160298585891724);
      complex3.multiply((-20.0));
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.divide((-2356.1718));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex3.NaN.createComplex((-2356.1718), 718.0);
      complex4.ONE.sqrt1z();
      Complex complex5 = complex3.ZERO.subtract(complex0);
      complex5.INF.getField();
      complex0.abs();
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.multiply(complex3);
      Complex complex8 = complex7.ONE.tanh();
      Complex complex9 = complex8.ZERO.sqrt();
      complex9.sqrt1z();
      Complex complex10 = complex1.multiply(complex2);
      Complex complex11 = complex6.ZERO.tan();
      complex1.hashCode();
      complex0.isNaN();
      complex6.isInfinite();
      complex2.getImaginary();
      complex10.atan();
      complex10.getField();
      complex11.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(2930.220920445147, 1253.03119);
      Complex complex1 = complex0.cosh();
      Complex.valueOf(3.7906173667738715E-206);
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex1.add(complex0);
      complex0.getImaginary();
      Complex.valueOf((-470.7));
      Complex complex4 = complex2.I.sqrt();
      complex3.tanh();
      Complex complex5 = complex2.tanh();
      complex5.NaN.sqrt1z();
      complex4.add((-4.402550702194912E-8));
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex0.INF.cos();
      double double0 = 231.8;
      Complex complex2 = complex1.ONE.subtract(231.8);
      double double1 = (-4522.91);
      Complex complex3 = complex2.ONE.sqrt();
      complex3.ONE.add(complex2);
      complex2.I.multiply((-4522.91));
      Complex complex4 = complex0.INF.pow((-4522.91));
      int int0 = (-2716);
      try { 
        complex4.INF.nthRoot((-2716));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,716
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex2.ONE.reciprocal();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex1.ZERO.acos();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex2.INF.add(0.0);
      complex5.abs();
      Complex complex11 = complex6.sinh();
      Complex complex12 = complex6.divide(complex4);
      Complex complex13 = complex2.reciprocal();
      complex13.ZERO.log();
      complex4.getReal();
      double double0 = complex9.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex12.hashCode();
      Complex complex14 = complex2.divide(complex4);
      complex14.ZERO.add(0.0);
      String string0 = complex3.toString();
      assertEquals("(NaN, NaN)", string0);
      
      complex8.pow(complex10);
      assertEquals(0.6366197723675814, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex15 = complex14.log();
      assertEquals(0.8414709848078965, complex4.getImaginary(), 0.01);
      assertEquals(2.356194490192345, complex15.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex15.getReal(), 0.01);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf((-1.0));
      assertEquals((-1.0), complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.INF.multiply(20.0);
      Complex complex5 = complex4.ZERO.asin();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals((-0.12871409795254599), complex2.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals((-0.9166356057911225), complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      
      Complex complex6 = complex0.reciprocal();
      assertEquals(0.5, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.exp();
      assertEquals(0.19876611034641298, complex7.getReal(), 0.01);
      assertEquals((-0.3095598756531122), complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex complex1 = complex0.INF.multiply(Double.POSITIVE_INFINITY);
      complex1.ZERO.sqrt();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1069.7));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      double double0 = (-1096.272265617853);
      Complex complex2 = complex0.add((-1096.272265617853));
      Complex complex3 = complex2.cos();
      complex2.I.toString();
      Complex complex4 = complex2.atan();
      complex0.hashCode();
      complex4.getArgument();
      Complex complex5 = complex4.add(complex3);
      complex5.ZERO.reciprocal();
      complex3.hashCode();
      complex0.readResolve();
      Complex complex6 = complex2.INF.subtract(7.582560135332983E-10);
      complex6.ZERO.pow(7.582560135332983E-10);
      complex0.I.tan();
      int int0 = (-1953);
      try { 
        complex1.nthRoot((-1953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,953
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2772.532809401891, 1980.7665588);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.valueOf(2772.532809401891, 1980.7665588);
      Complex complex3 = complex2.ZERO.tan();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.tan();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.divide(complex2);
      assertFalse(complex5.equals((Object)complex1));
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex2.log();
      assertEquals(8.133704798009973, complex6.getReal(), 0.01);
  }
}
