/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:20:50 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.221469250951617E173, (-282.7251531791482));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.createComplex((-1973.0546963), Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.NaN;
      complex3.multiply((-4034));
      complex2.multiply(complex2);
      complex3.multiply(1113);
      complex0.add((double) 1113);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1112.0, Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex0.exp();
      Complex complex2 = complex1.tanh();
      complex1.multiply(3503);
      complex1.divide(complex2);
      complex1.nthRoot(431);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide((-1.3657642265608213E-112));
      complex0.multiply(complex1);
      Complex complex3 = complex0.divide(0.0);
      complex2.asin();
      complex3.nthRoot(238);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-2659.19682));
      Complex complex2 = complex1.createComplex((-2659.19682), (-20.0));
      complex2.tan();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.0861612696304874, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex1.conjugate();
      complex1.hashCode();
      Complex complex2 = complex1.pow(complex0);
      complex2.INF.hashCode();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.NaN.subtract(complex0);
      Complex complex5 = complex3.cosh();
      complex1.ZERO.multiply(complex0);
      Complex complex6 = complex5.INF.reciprocal();
      complex6.ONE.toString();
      Complex complex7 = complex4.log();
      Complex.valueOf(263.163);
      complex5.cosh();
      complex7.abs();
      complex4.conjugate();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.NaN);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.getField();
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-725.351611572977));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.negate();
      complex4.subtract((-725.351611572977));
      Complex complex6 = complex3.sqrt();
      Complex complex7 = Complex.INF;
      complex7.pow(complex1);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex6.multiply(676);
      complex0.abs();
      Complex.valueOf(2.0, (-3496.558));
      complex8.nthRoot(252);
      complex6.multiply(676);
      complex5.sqrt1z();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = new Complex((-2705.89103557422), 20.0);
      complex3.acos();
      Complex complex4 = Complex.valueOf(20.0, 20.0);
      Complex complex5 = complex4.tan();
      complex5.cosh();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(7.193200872279704E-6);
      complex0.sinh();
      Complex complex3 = complex2.atan();
      complex3.acos();
      complex1.tan();
      complex3.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0, 2965.39777099855);
      complex0.divide(complex1);
      Complex complex2 = complex0.reciprocal();
      complex1.tanh();
      Complex complex3 = new Complex(0.0);
      complex3.divide((-2258.7694));
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1112.0, Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex0.exp();
      Complex complex2 = complex1.tanh();
      complex1.divide(complex2);
      complex1.nthRoot(431);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1330.623215290933);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(1330.623215290933, (-2900.7119));
      complex1.INF.atan();
      complex0.add(complex1);
      Complex complex3 = complex0.pow((-2900.7119));
      Complex complex4 = complex1.acos();
      Complex complex5 = Complex.I;
      complex4.NaN.subtract(complex5);
      complex1.cos();
      complex2.add(complex4);
      // Undeclared exception!
      complex3.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.atan();
      complex0.multiply(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.INF;
      complex4.divide(Double.POSITIVE_INFINITY);
      complex4.getArgument();
      complex2.exp();
      complex4.multiply(3228);
      Complex.valueOf((-108.0), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
      complex2.divide(complex0);
      complex1.NaN.add(complex2);
      complex2.INF.hashCode();
      Complex complex3 = complex1.createComplex(2.0, 462.94555062);
      Complex complex4 = complex2.I.divide(complex0);
      complex4.INF.tanh();
      complex0.asin();
      Complex complex5 = Complex.valueOf((-1.0));
      complex5.INF.pow(462.94555062);
      Complex complex6 = complex2.add(complex0);
      complex3.sqrt();
      Complex complex7 = complex6.conjugate();
      complex7.ZERO.multiply((-1345.47));
      Complex.valueOf((-2.6619437549286744E8));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
      Complex complex2 = complex0.atan();
      complex1.hashCode();
      Complex complex3 = complex0.divide(complex1);
      complex3.INF.atan();
      complex2.abs();
      Complex complex4 = Complex.ZERO;
      complex0.createComplex(Double.NaN, 0.9556965550821052);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.valueOf((-1817.8972495965));
      complex1.sinh();
      complex3.atan();
      complex2.acos();
      complex3.tan();
      Complex complex4 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.exp();
      complex0.readResolve();
      complex2.divide(complex1);
      complex2.atan();
      Complex complex3 = complex0.reciprocal();
      complex3.cos();
      Complex complex4 = new Complex(1.1406713393562271E-7, 1.1406713393562271E-7);
      complex4.hashCode();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = new Complex(1141.466173259, 1141.466173259);
      complex6.acos();
      complex0.tan();
      Complex complex7 = new Complex((-2642.4838), 1837.35864066);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getField();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.hashCode();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-1643.188481714));
      complex0.divide(complex1);
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf((-6.990650304449166E-10));
      complex3.sin();
      Complex complex4 = new Complex(Double.NaN);
      complex2.multiply((-1809));
      Complex complex5 = complex0.sqrt();
      complex3.readResolve();
      Complex complex6 = complex1.atan();
      Complex.valueOf((-2.827581009333298E-233));
      Complex complex7 = Complex.NaN;
      complex5.add(complex7);
      complex6.tan();
      Complex complex8 = Complex.valueOf((-593.25370889), (double) (-1809));
      complex8.multiply(101);
      Complex complex9 = new Complex((-1643.188481714), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = new Complex((-5005.0));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.atan();
      complex2.reciprocal();
      complex3.hashCode();
      complex1.divide(complex2);
      Complex complex4 = new Complex((-5005.0), (-5005.0));
      Complex complex5 = complex4.tanh();
      complex5.divide((-5005.0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(477.3);
      complex1.toString();
      Complex complex2 = complex0.multiply(477.3);
      Complex complex3 = complex2.exp();
      complex1.readResolve();
      complex3.divide(complex1);
      Complex complex4 = Complex.valueOf((-1817.8972495965));
      complex4.sinh();
      complex0.atan();
      Complex complex5 = Complex.valueOf(4.6562769567905925E256, 477.3);
      complex5.acos();
      Complex complex6 = complex1.tan();
      complex3.tan();
      Complex complex7 = Complex.ZERO;
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.subtract((-1410.7960439699216));
      Object object0 = new Object();
      Complex complex2 = Complex.valueOf((-1410.7960439699216));
      Complex complex3 = complex2.tanh();
      complex3.ONE.multiply(complex2);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.NaN.exp();
      complex1.tanh();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.29981517791748047, 0.29981517791748047);
      Complex complex1 = Complex.valueOf((-6006.87210252498));
      complex1.INF.toString();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.divide(complex1);
      complex1.ONE.cos();
      Complex complex4 = Complex.ZERO;
      complex4.atan();
      complex0.reciprocal();
      complex3.hashCode();
      complex4.multiply(complex0);
      Complex complex5 = new Complex(Double.NaN, (-6006.87210252498));
      complex4.sin();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.readResolve();
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf((-1.0));
      complex0.sqrt();
      Complex complex2 = Complex.valueOf((-1817.8972495965));
      complex1.subtract(complex2);
      complex1.multiply(1602.0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.divide((-1998.10100768123));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2325.316041120601));
      Complex complex2 = complex1.INF.multiply(complex0);
      complex1.sinh();
      complex2.atan();
      Complex complex3 = Complex.ZERO;
      complex3.acos();
      Complex complex4 = Complex.valueOf(20.0, (-2325.316041120601));
      complex1.ONE.pow((-2325.316041120601));
      complex4.tan();
      Complex complex5 = complex1.tan();
      Complex complex6 = Complex.ZERO;
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.multiply((-1392.265010031567));
      Complex complex3 = complex1.ZERO.multiply((-1392.265010031567));
      complex3.INF.reciprocal();
      Complex complex4 = complex0.negate();
      complex4.ZERO.nthRoot(1454);
      complex0.ZERO.multiply(complex2);
      Complex complex5 = complex2.ZERO.sqrt();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex5.ZERO.log();
      Complex complex8 = complex2.divide((-1392.265010031567));
      Complex complex9 = complex5.subtract(4106.043);
      Complex complex10 = complex9.INF.divide(4106.043);
      complex10.divide(4106.043);
      complex9.readResolve();
      complex1.toString();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex11.ZERO.add(complex3);
      Complex.valueOf((-1392.265010031567));
      Complex complex13 = Complex.INF;
      complex13.sinh();
      complex13.asin();
      Complex complex14 = complex8.add(complex13);
      complex14.log();
      Complex.valueOf(894.042875, 4106.043);
      complex6.subtract((-2563.52));
      Complex complex15 = complex9.cosh();
      complex15.INF.getField();
      complex12.negate();
      complex7.tan();
      complex13.createComplex(894.042875, 0.8580154775056861);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.multiply(2.588903985633062E-17);
      Complex complex2 = complex1.exp();
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex1.divide(complex2);
      complex4.atan();
      complex4.hashCode();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.divide(complex5);
      Complex complex7 = Complex.ZERO;
      complex7.cos();
      complex3.acos();
      complex6.createComplex(2.588903985633062E-17, 7.419361045185406E-195);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-2037.64793674104));
      complex0.INF.getField();
      complex0.ONE.readResolve();
      Complex complex1 = Complex.valueOf(1261520.4418280497, 164.63891487);
      complex1.readResolve();
      // Undeclared exception!
      complex1.nthRoot(2047505077);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2325.316041120601));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.NaN.subtract(complex0);
      complex0.ZERO.multiply((-2325.316041120601));
      complex3.I.hashCode();
      Complex complex4 = complex1.log();
      complex1.divide(complex4);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.INF.atan();
      complex0.readResolve();
      Complex complex3 = complex2.divide((-1084.602));
      Complex complex4 = Complex.valueOf((-1084.602), (double) 1167);
      complex3.pow((double) 1167);
      Complex complex5 = complex0.NaN.pow(complex1);
      complex5.ZERO.toString();
      Complex complex6 = complex5.ZERO.multiply((-1084.602));
      Complex complex7 = new Complex((-1084.602));
      complex7.toString();
      Complex complex8 = Complex.valueOf(2.1937270733811607);
      complex4.sin();
      complex5.subtract((double) 1167);
      Complex complex9 = complex4.multiply((-3437));
      Complex complex10 = complex9.sqrt();
      complex6.readResolve();
      complex7.atan();
      complex10.add(complex8);
      complex7.tan();
      Complex complex11 = complex6.multiply(1087);
      complex2.cosh();
      complex11.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.904714978998808E-72), 3152.10248);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex((-1.904714978998808E-72), (-3097.6849820005373));
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.pow(1366.51690748);
      Complex complex5 = Complex.ONE;
      complex5.divide(complex3);
      Complex complex6 = new Complex((-1486.806));
      complex6.abs();
      complex6.getField();
      complex4.hashCode();
      complex0.getArgument();
      complex5.conjugate();
      complex1.pow(complex1);
      complex5.log();
      Complex.valueOf(1486.806, 2.0);
      complex4.divide((-1365.04));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.29981517791748047);
      Complex complex1 = Complex.valueOf(0.29981517791748047, 0.29981517791748047);
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.equals(complex0);
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.cos();
      complex2.negate();
      complex5.hashCode();
      complex5.divide(complex3);
      complex4.cos();
      complex0.acos();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.INF.abs();
      Complex complex2 = Complex.valueOf(5755.966559074944);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.subtract(20.0);
      Complex complex5 = complex2.multiply(0);
      complex5.sqrt();
      complex4.readResolve();
      complex0.atan();
      Complex complex6 = complex1.add(complex4);
      complex0.tan();
      complex0.multiply(1011733391);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.29981517791748047);
      Complex complex1 = Complex.valueOf(0.29981517791748047, 0.29981517791748047);
      complex1.INF.subtract(complex0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.add(0.29981517791748047);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = Complex.valueOf((-6006.87210252498));
      complex5.INF.toString();
      complex0.getImaginary();
      complex5.multiply(0.0);
      Complex.valueOf(0.0, (-6006.87210252498));
      complex2.createComplex((-7.3304404046850136E-9), (-7.3304404046850136E-9));
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.valueOf(1573.2634, 729.1412594779109);
      Complex complex8 = complex7.divide(complex4);
      Complex complex9 = Complex.INF;
      complex5.exp();
      Complex complex10 = new Complex((-3894.54996), 750.92038678858);
      complex10.equals(complex7);
      complex8.getField();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.29981517791748047);
      Complex complex1 = Complex.valueOf(0.29981517791748047, 0.29981517791748047);
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.equals(complex0);
      complex0.readResolve();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = Complex.ONE;
      complex5.multiply(complex6);
      Complex complex7 = complex4.acos();
      Complex complex8 = complex1.pow(complex7);
      complex4.cosh();
      Complex complex9 = new Complex(3024.566026586926);
      complex9.sqrt();
      Complex complex10 = Complex.valueOf((-1.135835353856964E7));
      complex10.ZERO.sqrt();
      complex10.sinh();
      complex10.atan();
      complex2.acos();
      complex8.toString();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.equals(complex0);
      complex1.readResolve();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex4.pow(complex2);
      complex4.multiply(complex1);
      Complex complex5 = complex3.acos();
      Complex complex6 = Complex.I;
      Complex complex7 = complex0.pow(complex6);
      complex5.cosh();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex4.sinh();
      complex9.atan();
      complex6.acos();
      Complex complex10 = Complex.ZERO;
      complex10.toString();
      complex10.tan();
      complex6.reciprocal();
      complex8.sin();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.I.log();
      complex0.INF.sqrt();
      complex0.equals(complex0);
      complex0.exp();
      complex0.log();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.divide(1.4893842728520671E78);
      complex0.toString();
      Complex complex2 = complex0.createComplex(1.4893842728520671E78, 1.4893842728520671E78);
      complex2.I.add(0.0);
      Complex complex3 = complex0.exp();
      complex3.tanh();
      complex1.acos();
      Complex complex4 = complex3.add(0.0);
      complex2.cosh();
      Complex complex5 = complex2.exp();
      Complex complex6 = new Complex(0.0, 0.0);
      Object object0 = new Object();
      Complex complex7 = complex5.INF.cos();
      complex4.equals(object0);
      complex5.getField();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-475.0));
      Complex complex1 = complex0.INF.tanh();
      complex0.ZERO.abs();
      complex0.ONE.abs();
      complex0.INF.add((-475.0));
      complex1.I.divide((-475.0));
      Complex complex2 = complex0.pow(223.40397559);
      complex2.I.multiply(1.0);
      complex1.cosh();
      Complex complex3 = complex1.multiply(531);
      complex3.subtract(223.40397559);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = 106.964;
      Complex complex0 = new Complex(106.964, (-469.0007899639452));
      complex0.INF.readResolve();
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(943.5062, 0.22626367211341858);
      Complex complex1 = complex0.INF.sin();
      complex0.ZERO.nthRoot(233);
      complex0.NaN.getField();
      complex1.hashCode();
      Complex complex2 = complex0.reciprocal();
      complex0.subtract(complex1);
      complex0.tan();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      Complex complex3 = complex2.atan();
      complex1.toString();
      complex1.toString();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      complex0.INF.tanh();
      Complex complex1 = complex0.I.log();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex1.add(complex0);
      complex3.INF.acos();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex4 = complex1.reciprocal();
      complex2.cos();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex2.pow(complex4);
      complex0.cosh();
      Complex complex7 = complex4.sqrt();
      complex5.multiply(2052339302);
      complex6.createComplex(2052339302, 2052339302);
      complex7.cos();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.createComplex(945.5115741068723, 911.1213166110008);
      complex2.add(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = Complex.valueOf(945.5115741068723, 945.5115741068723);
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.valueOf(945.5115741068723);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex0.log();
      Complex complex10 = complex0.divide(complex5);
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex8.tanh();
      complex6.isNaN();
      complex10.toString();
      Complex complex13 = complex4.divide(complex12);
      Complex complex14 = complex9.conjugate();
      complex14.divide(complex8);
      complex7.cos();
      complex6.reciprocal();
      Complex complex15 = complex0.cosh();
      complex7.log();
      Complex complex16 = complex14.log();
      Complex complex17 = complex11.log();
      Complex complex18 = complex17.acos();
      complex18.hashCode();
      Complex complex19 = Complex.valueOf(945.5115741068723, (-2124.625));
      complex13.add(complex19);
      complex1.log();
      complex19.reciprocal();
      complex0.cos();
      complex15.subtract(complex18);
      complex6.getArgument();
      complex16.pow((-1.178234251477505E-7));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.29981517791748047);
      Complex complex1 = Complex.valueOf(0.29981517791748047, 0.29981517791748047);
      complex1.INF.subtract(complex0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.add(0.29981517791748047);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = Complex.valueOf((-6006.87210252498));
      complex5.INF.toString();
      complex0.getImaginary();
      complex1.multiply(complex2);
      Complex complex6 = complex2.acos();
      complex4.pow(complex3);
      Complex complex7 = complex1.cosh();
      complex7.sqrt();
      Complex.valueOf((-2306.205832597466), (-6006.87210252498));
      complex6.sinh();
      Complex complex8 = complex4.atan();
      complex6.acos();
      complex8.toString();
      complex2.tan();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.29981517791748047);
      Complex complex1 = Complex.valueOf(0.29981517791748047, 0.29981517791748047);
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.add(0.29981517791748047);
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex2.log();
      Complex complex7 = complex2.multiply(0.0);
      complex5.add(complex4);
      Complex complex8 = complex2.acos();
      Object object0 = new Object();
      complex1.equals(complex7);
      complex6.reciprocal();
      complex1.readResolve();
      complex6.readResolve();
      complex8.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2325.316041120601));
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.NaN.subtract(complex0);
      Complex complex3 = complex0.ZERO.multiply((-2325.316041120601));
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.subtract(4563.57858182);
      complex4.sqrt();
      complex1.pow(complex2);
      complex0.conjugate();
      Complex complex7 = complex1.multiply(37);
      complex7.nthRoot(1582);
      complex7.multiply((-132));
      Complex complex8 = Complex.INF;
      complex8.sqrt1z();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = new Complex(1.0);
      complex0.NaN.abs();
      complex0.I.cosh();
      Complex complex2 = Complex.valueOf(Double.NaN);
      complex2.INF.hashCode();
      Complex complex3 = complex0.I.sin();
      complex1.ZERO.createComplex(1.0, 39.7441826143378);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex4.I.tan();
      Complex complex8 = complex4.ZERO.asin();
      Complex complex9 = complex8.ZERO.log();
      complex9.ONE.divide(complex5);
      Complex complex10 = complex8.I.cosh();
      Complex complex11 = complex1.tanh();
      complex11.isNaN();
      complex10.toString();
      complex0.divide(complex3);
      Complex complex12 = complex0.conjugate();
      complex7.divide(complex12);
      complex10.multiply(1088);
      complex7.nthRoot(1088);
      complex12.getReal();
      complex2.acos();
      Object object0 = new Object();
      complex3.equals(object0);
      complex6.cosh();
      complex8.multiply(complex10);
      Complex complex13 = complex6.pow(1.0);
      complex13.acos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      complex1.ONE.cosh();
      Complex complex2 = complex0.pow(complex1);
      complex0.multiply(complex2);
      Complex complex3 = complex2.createComplex(83.02144739415, 83.02144739415);
      complex0.acos();
      Complex complex4 = Complex.I;
      complex4.add(511.6);
      complex1.cosh();
      complex2.createComplex(0.4873090982437134, (-998.59));
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.NaN.divide(1.4893842728520671E78);
      complex0.toString();
      Complex complex3 = complex1.createComplex(1.4893842728520671E78, 1.4893842728520671E78);
      Complex complex4 = complex3.I.add(0.0);
      Complex complex5 = complex1.exp();
      complex5.tanh();
      complex4.acos();
      Complex complex6 = new Complex(1884.806984);
      Complex complex7 = Complex.valueOf((-280.671505), 0.0);
      Complex complex8 = complex6.pow(complex7);
      complex2.cosh();
      Complex complex9 = new Complex(1.4893842728520671E78);
      complex9.sqrt();
      complex2.sinh();
      complex8.atan();
      Complex complex10 = Complex.valueOf((-280.671505));
      complex10.acos();
      complex9.toString();
      Complex complex11 = Complex.valueOf(2410.05237657076, 1.4893842728520671E78);
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2325.316041120601));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.multiply(complex0);
      complex4.acos();
      Complex complex5 = Complex.valueOf(5.479138512760614E77);
      complex5.pow(complex3);
      complex3.cosh();
      Complex complex6 = complex1.sqrt();
      complex3.sinh();
      complex1.atan();
      complex5.acos();
      complex1.toString();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.conjugate();
      complex2.ONE.cosh();
      Complex complex3 = complex0.subtract(complex2);
      complex0.multiply((-1107.73440980604));
      complex1.pow(complex3);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.log();
      complex5.divide(5.479138512760614E77);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((-1632.3476), 3.733241849647479E32);
      complex2.ZERO.readResolve();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex3.ZERO.tanh();
      complex4.log();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.ZERO.pow(1823.664670751195);
      Complex complex8 = complex6.INF.add((-1632.3476));
      Complex complex9 = complex7.I.negate();
      complex1.sqrt();
      Complex complex10 = complex1.divide(0.0);
      complex10.NaN.pow(1823.664670751195);
      Complex complex11 = Complex.valueOf(1823.664670751195, 1823.664670751195);
      Complex complex12 = complex11.INF.sqrt();
      complex9.abs();
      complex1.multiply(complex10);
      complex1.readResolve();
      complex10.pow(complex12);
      Complex complex13 = complex0.pow(0.0);
      Complex complex14 = complex13.I.createComplex(1.0, 0.0);
      complex6.negate();
      complex4.getArgument();
      complex11.subtract(complex6);
      complex13.tan();
      complex8.isInfinite();
      complex9.acos();
      complex14.sqrt();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide((-20.0));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex4.subtract(complex1);
      complex5.I.tanh();
      complex5.ONE.acos();
      Complex complex6 = Complex.valueOf((-20.0));
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.ONE.pow(complex3);
      complex8.I.divide(complex6);
      complex8.ONE.divide(966.364185661);
      Complex complex9 = complex2.divide(complex1);
      complex6.multiply((-20.0));
      Complex complex10 = complex6.subtract((-20.0));
      Complex complex11 = complex3.multiply(7);
      complex9.cosh();
      Complex complex12 = complex11.divide(complex10);
      complex12.INF.tanh();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2.699763298034668);
      Complex complex2 = complex1.I.atan();
      complex2.NaN.atan();
      Complex complex3 = complex2.reciprocal();
      complex3.ZERO.atan();
      Complex complex4 = complex3.I.cos();
      complex4.I.createComplex((-11.56675), 2.699763298034668);
      complex0.getImaginary();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(943.5062, 0.22626367211341858);
      Complex complex1 = complex0.INF.sin();
      complex0.ZERO.nthRoot(233);
      complex0.NaN.getField();
      complex0.INF.multiply((double) 233);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = Complex.ZERO;
      complex3.ZERO.add(complex4);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex2.multiply(233);
      Complex complex7 = complex0.multiply(233);
      complex7.tanh();
      complex5.conjugate();
      complex6.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2325.316041120601));
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.NaN.subtract(complex0);
      complex0.ZERO.multiply((-2325.316041120601));
      complex1.NaN.pow(complex0);
      complex1.log();
      complex1.divide(5.479138512760614E77);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.exp();
      Complex.valueOf(4.0447634595724164E195, 4.0447634595724164E195);
      Complex complex3 = complex0.divide(complex1);
      complex3.hashCode();
      complex3.ONE.reciprocal();
      complex3.I.subtract(complex2);
      Complex complex4 = complex0.tan();
      complex1.equals(complex0);
      complex4.atan();
      complex1.toString();
      complex4.toString();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex2.INF.pow(complex7);
      Complex complex9 = complex8.INF.add(complex1);
      complex9.ONE.getArgument();
      Complex complex10 = Complex.valueOf((-1936.04), (-393.136445531343));
      complex2.sqrt();
      complex2.equals(complex0);
      Complex complex11 = complex2.atan();
      Complex complex12 = complex7.asin();
      complex12.asin();
      Complex complex13 = complex11.sinh();
      complex13.ZERO.nthRoot(2257);
      Complex complex14 = complex7.asin();
      Complex complex15 = complex14.INF.add(complex3);
      complex15.INF.sqrt1z();
      complex15.NaN.conjugate();
      complex6.asin();
      complex2.INF.tan();
      complex12.INF.subtract(complex15);
      Complex complex16 = complex12.sqrt1z();
      complex16.ONE.acos();
      Complex complex17 = complex4.sin();
      complex10.getReal();
      complex5.isInfinite();
      complex1.readResolve();
      try { 
        complex17.nthRoot((-2270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,270
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.tanh();
      Complex complex1 = complex0.INF.pow(0.0);
      complex1.NaN.hashCode();
      complex0.getReal();
      complex1.reciprocal();
      Complex complex2 = complex1.conjugate();
      complex2.I.createComplex(0.0, 1333.957);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      complex1.INF.toString();
      Complex complex2 = complex0.cosh();
      complex0.isNaN();
      complex1.getField();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.INF.tan();
      complex0.I.tan();
      Complex complex5 = complex2.add(0.0);
      Complex complex6 = complex4.tan();
      complex6.NaN.multiply(complex5);
      complex3.ONE.divide(2940.43508779);
      Complex complex7 = complex3.ZERO.divide(complex6);
      Complex complex8 = complex6.ONE.tan();
      complex8.abs();
      Complex complex9 = complex3.I.pow(complex7);
      complex3.getReal();
      Complex complex10 = complex6.divide(complex4);
      complex4.hashCode();
      complex6.divide((-20.0));
      complex9.divide((-20.0));
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-132.4788));
      Complex complex1 = Complex.valueOf((-132.4788), (-132.4788));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.createComplex((-132.4788), (-132.4788));
      complex4.ZERO.log();
      complex3.cos();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.acos();
      complex6.NaN.tan();
      complex1.cosh();
      complex4.equals((Object) null);
      Complex complex7 = complex5.sqrt();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.ZERO.reciprocal();
      complex4.ONE.getField();
      complex3.INF.toString();
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = complex5.sqrt();
      complex6.NaN.divide(complex2);
      Complex complex7 = complex3.NaN.multiply(complex2);
      Complex complex8 = Complex.valueOf(1.0812448255518705E-301, 1.0812448255518705E-301);
      complex7.negate();
      complex8.isNaN();
      complex5.NaN.multiply(complex7);
      complex2.acos();
      int int0 = (-840);
      try { 
        complex1.nthRoot((-840));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -840
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.INF.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.NaN.add((-20.0));
      Complex complex4 = complex3.NaN.multiply(1);
      complex4.ONE.readResolve();
      Complex complex5 = complex4.NaN.tanh();
      complex4.INF.sqrt();
      complex2.I.asin();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.ONE.add(complex6);
      Complex complex8 = complex7.ONE.tan();
      Complex complex9 = complex2.INF.subtract(complex1);
      complex2.isNaN();
      complex7.ZERO.sin();
      complex6.NaN.cos();
      complex8.readResolve();
      Complex complex10 = complex3.divide((double) 1);
      complex10.INF.multiply(complex7);
      complex8.createComplex(1, (-20.0));
      complex2.ONE.multiply(complex1);
      complex0.acos();
      complex9.getImaginary();
      Complex.valueOf(1826.7255347355717, 1721.0);
      complex2.cosh();
      complex5.add(20.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.exp();
      complex0.NaN.multiply((-1974));
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-119.345595698), (-119.345595698));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex1.multiply(1046);
      Complex complex5 = complex4.acos();
      complex5.I.pow((-3144.13221));
      Complex complex6 = complex5.ONE.tanh();
      complex6.NaN.exp();
      complex6.I.cos();
      complex4.getReal();
      Complex complex7 = complex3.sinh();
      Complex complex8 = Complex.valueOf(0.0, (double) 1046);
      complex8.toString();
      Complex complex9 = complex2.ONE.tanh();
      complex7.negate();
      complex2.getReal();
      complex8.toString();
      Complex complex10 = complex4.sin();
      complex10.INF.sqrt();
      complex7.INF.tan();
      complex9.I.hashCode();
      Complex complex11 = complex2.tan();
      complex11.INF.createComplex(0.0, (-1.1036542789147287E-244));
      complex11.getField();
      complex9.add(complex10);
      complex9.log();
      complex7.tan();
      complex2.createComplex((-1900.321777), (-4.3822312582312115));
      complex2.multiply(1046);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      complex0.NaN.divide(1.4893842728520671E78);
      complex0.toString();
      Complex complex2 = complex1.createComplex(1.4893842728520671E78, 1.4893842728520671E78);
      complex2.I.add(0.0);
      Complex complex3 = complex1.exp();
      complex3.tanh();
      Complex complex4 = complex0.createComplex((-3370.2158), 0.0);
      complex4.acos();
      complex3.add(0.0);
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex2.createComplex(0.0, 0.0);
      complex5.pow(complex6);
      complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2907.90869202744), 1031.90893);
      Complex complex1 = complex0.add(923.893501);
      complex0.ZERO.getField();
      Complex complex2 = complex1.I.exp();
      complex2.NaN.sin();
      Complex.valueOf(1031.90893, 3690.337267158537);
      Complex complex3 = complex1.sinh();
      complex3.I.createComplex((-2907.90869202744), 1031.90893);
      Complex complex4 = complex1.multiply(1);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex5.NaN.divide(complex1);
      complex6.ONE.exp();
      complex6.INF.getField();
      Complex complex7 = complex4.multiply(complex0);
      complex4.getField();
      complex7.NaN.subtract(1031.90893);
      Complex complex8 = Complex.valueOf(923.893501, 0.0);
      Complex complex9 = complex1.reciprocal();
      complex7.INF.abs();
      Complex complex10 = complex8.multiply(complex7);
      complex8.tan();
      Complex complex11 = complex1.cosh();
      complex11.INF.acos();
      complex10.sinh();
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-431.72), (-431.72));
      complex0.multiply(0);
      Complex complex2 = complex0.subtract(complex1);
      complex2.sqrt1z();
      Complex complex3 = complex2.conjugate();
      complex1.multiply(complex3);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex1.INF.add(complex0);
      complex1.INF.createComplex(1957.378384692348, (-212.24519030130648));
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.divide(complex2);
      Complex complex4 = complex0.pow(2547.0);
      Complex complex5 = complex4.ONE.divide(complex0);
      complex4.ONE.abs();
      complex4.getField();
      complex5.getArgument();
      Complex complex6 = complex0.reciprocal();
      complex6.NaN.conjugate();
      complex0.atan();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.ZERO.subtract(2547.0);
      complex8.ONE.sqrt();
      complex0.pow(complex2);
      complex1.conjugate();
      Complex complex9 = complex6.multiply((-132));
      try { 
        complex9.INF.nthRoot((-132));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -132
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.NaN.add(complex2);
      complex3.atan();
      complex0.isInfinite();
      Complex complex4 = complex0.NaN.add((-20.0));
      complex0.isInfinite();
      Complex complex5 = complex1.ZERO.acos();
      complex0.readResolve();
      Complex complex6 = complex0.INF.log();
      Complex complex7 = complex6.NaN.sinh();
      complex5.INF.exp();
      complex7.ZERO.createComplex(1853.2950719027, 0.0);
      complex1.toString();
      complex0.abs();
      complex2.hashCode();
      complex7.ZERO.multiply(complex5);
      complex4.tanh();
      Complex.valueOf(0.0, 0.0);
      complex7.getReal();
      complex0.cos();
      Complex complex8 = complex7.acos();
      complex8.ZERO.subtract((-20.0));
      complex8.abs();
      complex8.ONE.tanh();
      try { 
        complex1.nthRoot((-1669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,669
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(2.9676011119845104E-8);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.INF.sin();
      complex3.ONE.negate();
      Complex complex4 = complex0.I.multiply(complex1);
      complex0.ONE.atan();
      complex0.divide((-1503.9661161921));
      Complex complex5 = Complex.valueOf(2.9676011119845104E-8);
      complex5.ONE.cosh();
      complex2.readResolve();
      complex2.getField();
      complex4.sin();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.ZERO.multiply(2.0);
      complex3.NaN.sinh();
      Complex complex4 = complex1.NaN.tanh();
      Complex complex5 = complex2.I.tanh();
      complex0.getImaginary();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.ONE.asin();
      complex7.I.toString();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex7.NaN.reciprocal();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.toString();
      Complex complex9 = complex6.multiply(2.0);
      complex9.getField();
      Complex complex10 = complex2.tanh();
      complex10.ONE.abs();
      complex10.NaN.multiply(Double.POSITIVE_INFINITY);
      complex9.divide(2.0);
      Complex complex11 = complex2.INF.tanh();
      complex4.INF.subtract(0.0);
      Complex.valueOf((-456.15), 0.0);
      Complex complex12 = complex7.subtract(447.69);
      Complex complex13 = complex0.add(complex8);
      complex5.readResolve();
      Complex complex14 = complex4.exp();
      complex14.ZERO.multiply(complex11);
      complex13.multiply(complex8);
      complex13.tan();
      complex12.sinh();
      complex12.divide(447.69);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide(complex0);
      complex1.abs();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex1.conjugate();
      Complex.valueOf(Double.NaN, 2004.000387281213);
      complex2.readResolve();
      Complex complex6 = complex3.sinh();
      Complex complex7 = Complex.valueOf(0.3936265707015991);
      complex7.pow(complex5);
      complex4.ONE.divide(0.3936265707015991);
      complex6.NaN.getArgument();
      Complex complex8 = complex3.divide(complex4);
      complex8.NaN.add((-1792.005265951932));
      complex0.ZERO.getField();
      complex8.getArgument();
      complex2.isNaN();
      Complex complex9 = complex3.pow((-1793.0));
      complex2.multiply(4113.80889);
      complex9.subtract((-1739.752296395889));
      Complex.valueOf(0.0);
      Complex complex10 = complex6.conjugate();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.I.log();
      complex2.NaN.multiply(0.0);
      Complex complex3 = complex2.add(complex0);
      complex3.INF.acos();
      Object object0 = new Object();
      complex0.equals(object0);
      complex2.reciprocal();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 1013.39404287734);
      Complex complex1 = complex0.divide((-20.0));
      Complex complex2 = complex1.I.subtract(1.8504673536253893E-8);
      complex2.I.sqrt1z();
      complex1.ZERO.getArgument();
      Complex complex3 = Complex.valueOf(6.645352711199266E-8);
      complex0.I.subtract(complex3);
      complex0.NaN.cos();
      Complex complex4 = complex1.divide(0.0);
      Complex.valueOf(0.0);
      complex1.I.multiply(0);
      complex1.add(472.90244);
      Complex complex5 = complex4.reciprocal();
      complex5.NaN.hashCode();
      complex5.multiply(2741);
      Complex.valueOf((double) 0, (-1.0));
      complex4.abs();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(2.595079206183114E-167, 2.595079206183114E-167);
      Complex complex1 = complex0.ONE.add(2.595079206183114E-167);
      Complex complex2 = complex0.exp();
      complex2.I.sqrt1z();
      Complex.valueOf(2.595079206183114E-167);
      Complex complex3 = complex2.sinh();
      complex1.exp();
      complex3.I.negate();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.valueOf(2.595079206183114E-167, 2.595079206183114E-167);
      complex4.INF.acos();
      Complex complex8 = complex7.ONE.multiply(complex6);
      complex2.equals(complex7);
      complex8.readResolve();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex9.multiply(0.0);
      Complex complex11 = complex6.exp();
      complex9.NaN.sinh();
      complex1.ONE.tan();
      complex11.ONE.nthRoot(17);
      complex11.sqrt1z();
      complex9.exp();
      complex5.reciprocal();
      complex10.tanh();
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = Complex.valueOf((-4304.558167745588));
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.multiply(complex2);
      complex3.NaN.add(complex4);
      Complex complex5 = complex4.INF.acos();
      complex5.I.asin();
      complex5.INF.add(319.6729689593975);
      complex3.NaN.sin();
      Complex complex6 = complex4.reciprocal();
      complex6.NaN.readResolve();
      complex1.NaN.getField();
      Complex complex7 = complex2.divide(complex4);
      double double0 = (-2022.84848);
      complex7.I.createComplex((-4304.558167745588), (-2022.84848));
      complex1.log();
      complex6.ZERO.hashCode();
      complex1.abs();
      try { 
        complex2.nthRoot((-1526));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,526
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.ONE.divide(0.0);
      int int0 = 0;
      try { 
        complex2.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      complex1.ONE.multiply(complex0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.I.pow(0.0);
      Complex complex4 = complex2.negate();
      complex4.getField();
      Complex complex5 = complex1.cosh();
      Complex.valueOf(2737.9877934086);
      complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ZERO.tanh();
      complex0.readResolve();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex4.atan();
      complex3.getArgument();
      complex0.ZERO.getField();
      complex5.INF.getField();
      Complex complex6 = complex5.I.sinh();
      complex6.NaN.tan();
      Complex complex7 = complex1.I.subtract((-579.2070444));
      Complex complex8 = complex3.NaN.reciprocal();
      Complex complex9 = complex8.INF.cosh();
      complex9.negate();
      complex0.abs();
      Complex complex10 = complex5.pow(complex3);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex2.subtract(complex11);
      Complex complex13 = complex12.I.conjugate();
      Complex complex14 = complex11.ZERO.sinh();
      complex14.ONE.add(20.0);
      complex1.abs();
      complex12.cosh();
      Complex complex15 = complex1.acos();
      complex11.add(complex8);
      complex10.readResolve();
      complex7.isInfinite();
      complex10.isInfinite();
      complex13.add(Double.NaN);
      complex12.hashCode();
      complex2.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(1.2493696959436675E-93, 1.2493696959436675E-93);
      Complex complex1 = complex0.asin();
      complex1.I.exp();
      complex0.equals(complex1);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.negate();
      complex0.nthRoot(1);
      Complex complex1 = complex0.conjugate();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      complex1.getField();
      complex1.INF.sinh();
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.ONE.log();
      complex2.cosh();
      complex0.isNaN();
      Complex complex3 = complex0.ONE.log();
      complex3.nthRoot(2547);
      complex0.abs();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex3.tanh();
      complex5.sin();
      Complex complex7 = complex5.pow(complex6);
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex8.I.asin();
      Complex.valueOf(0.0, (-2740.415));
      complex9.NaN.acos();
      Complex complex10 = complex6.pow(Double.NaN);
      complex10.I.abs();
      complex10.getImaginary();
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex11.add(complex7);
      complex10.log();
      complex10.abs();
      complex7.subtract((-336.16192));
      complex4.multiply(complex12);
      Complex.valueOf(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(0.5584990978240967);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.acos();
      complex1.ZERO.hashCode();
      complex3.ZERO.readResolve();
      complex3.hashCode();
      complex2.pow(0.5584990978240967);
      complex3.getArgument();
      complex1.ZERO.tanh();
      Complex complex4 = complex3.sin();
      complex4.INF.getArgument();
      complex0.cosh();
      Complex.valueOf(0.0, 1.5707963267948966);
      complex0.sin();
      complex2.reciprocal();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(3896.332);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex0.NaN.multiply(0.0);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.NaN.add(complex3);
      complex5.INF.tan();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex0.reciprocal();
      complex7.I.multiply(complex4);
      Complex complex8 = complex1.ONE.asin();
      Complex complex9 = complex8.ONE.multiply(0);
      Complex complex10 = complex8.sqrt();
      complex7.ZERO.pow(3896.332);
      complex2.readResolve();
      complex2.equals(complex1);
      Complex complex11 = complex0.multiply((-892));
      complex11.NaN.atan();
      complex0.subtract(0.4425300359725952);
      complex7.createComplex(0.0, (-892));
      complex9.cos();
      complex6.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.INF.subtract((-1404.043788));
      complex3.I.log();
      complex1.INF.sqrt();
      complex0.equals(complex1);
      complex1.exp();
      complex3.log();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(6.283185307179586);
      complex0.I.pow(complex1);
      complex0.NaN.reciprocal();
      complex0.createComplex((-1688.2426593272103), (-1688.2426593272103));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.ONE.atan();
      complex3.getArgument();
      complex3.asin();
      complex1.INF.divide(complex2);
      Complex.valueOf((-1711.2731));
      complex1.tanh();
      Complex complex4 = complex0.sin();
      int int0 = (-4051);
      try { 
        complex4.I.nthRoot((-4051));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,051
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.INF.atan();
      complex0.readResolve();
      Complex complex3 = complex2.divide((-1084.602));
      complex3.sin();
      complex3.pow((double) 1167);
      Complex complex4 = complex0.NaN.pow(complex1);
      complex4.ZERO.toString();
      complex4.ZERO.multiply((-1084.602));
      Complex complex5 = Complex.valueOf(729.1412594779109, (double) 1167);
      complex4.I.createComplex(0.0, 0.0);
      Complex complex6 = Complex.INF;
      complex4.I.divide(complex6);
      complex2.ONE.divide(complex0);
      complex2.INF.multiply(1167);
      complex0.ONE.getField();
      complex0.nthRoot(1167);
      complex0.getReal();
      Complex complex7 = complex2.acos();
      complex0.equals((Object) null);
      complex6.cosh();
      complex6.multiply(complex7);
      complex5.pow((double) 1167);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(0.29981517791748047);
      Complex complex1 = Complex.valueOf(0.29981517791748047, 0.29981517791748047);
      complex1.INF.subtract(complex0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.add(0.29981517791748047);
      complex3.I.exp();
      Complex complex4 = Complex.valueOf((-6006.87210252498));
      complex4.INF.toString();
      complex0.getImaginary();
      Complex.valueOf(1573.2634, 0.0);
      complex4.hashCode();
      Complex complex5 = complex1.log();
      complex5.INF.toString();
      Complex complex6 = Complex.valueOf(1374.1640479);
      Complex complex7 = complex6.I.sin();
      Complex complex8 = complex0.NaN.subtract((-6006.87210252498));
      complex8.I.multiply((-3437));
      Complex complex9 = complex4.sqrt();
      complex9.I.readResolve();
      complex5.atan();
      complex5.add(complex3);
      complex7.tan();
      Complex complex10 = complex5.multiply((-3437));
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = new Complex(1.0);
      double double0 = complex0.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.INF.hashCode();
      complex1.NaN.readResolve();
      Complex complex4 = complex0.I.sin();
      complex1.ZERO.createComplex(1.0, 39.7441826143378);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex5.I.tan();
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex5.ZERO.asin();
      Complex complex10 = complex9.ZERO.log();
      Complex complex11 = complex10.ONE.divide(complex6);
      Complex complex12 = complex9.I.cosh();
      Complex complex13 = complex1.tanh();
      complex13.isNaN();
      String string0 = complex12.toString();
      assertEquals("(0.5403023058681398, 0.0)", string0);
      
      Complex complex14 = complex0.divide(complex4);
      Complex complex15 = complex0.conjugate();
      Complex complex16 = complex15.divide(complex12);
      complex6.I.cos();
      Complex complex17 = complex9.reciprocal();
      assertSame(complex17, complex11);
      
      complex13.cosh();
      Complex complex18 = complex14.log();
      Complex complex19 = complex18.INF.log();
      assertEquals(Double.POSITIVE_INFINITY, complex19.getReal(), 0.01);
      
      complex9.log();
      Complex complex20 = complex18.acos();
      assertEquals(1.6573706644607944, complex20.getReal(), 0.01);
      
      complex13.hashCode();
      assertEquals(0.7615941559557649, complex13.getReal(), 0.01);
      
      Complex complex21 = complex14.add(complex6);
      complex2.log();
      Complex complex22 = complex12.reciprocal();
      assertTrue(complex22.equals((Object)complex16));
      
      Complex complex23 = complex15.cos();
      Complex complex24 = complex23.NaN.subtract(complex7);
      assertSame(complex7, complex21);
      assertEquals(0.0, complex23.getImaginary(), 0.01);
      assertNotSame(complex7, complex6);
      
      double double1 = complex10.getArgument();
      assertNotSame(complex0, complex24);
      assertEquals(3.141592653589793, double1, 0.01);
  }
}
