/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:23:57 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(3.759713966511158E184);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      Complex complex1 = Complex.valueOf((-1636.46392874));
      Complex complex2 = Complex.valueOf((-1636.46392874), Double.POSITIVE_INFINITY);
      complex2.multiply(complex1);
      complex1.readResolve();
      Complex complex3 = Complex.valueOf((double) (-572));
      complex2.multiply((-572));
      Complex complex4 = complex3.cosh();
      complex4.sqrt1z();
      complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1.2092531058583964, Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply((-1236));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.424065351486206, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.sqrt();
      complex0.NaN.getArgument();
      complex0.ZERO.nthRoot(729);
      Complex complex2 = complex0.subtract(1.424065351486206);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.INF.multiply(complex3);
      Complex.valueOf((-2409.9223531172), (double) 729);
      complex4.nthRoot(729);
      complex2.ZERO.multiply(complex0);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.divide(0.5074998140335083);
      complex0.ONE.multiply(complex5);
      Complex complex7 = Complex.valueOf(0.9946605983483222);
      complex7.ZERO.subtract(1001.0084075);
      complex7.INF.sinh();
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex0.multiply(complex6);
      complex9.ONE.abs();
      complex1.cosh();
      complex6.cos();
      complex9.readResolve();
      complex4.add(complex8);
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2103.322413794863, 2103.322413794863);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply(1410);
      Complex complex3 = Complex.valueOf(2103.322413794863, (double) (-2045222521));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.add(2103.322413794863);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex0.log();
      Complex complex8 = Complex.ONE;
      complex0.equals(complex8);
      complex1.toString();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.add((-20.0));
      Complex complex11 = complex9.pow((double) (-2045222521));
      complex2.negate();
      Complex complex12 = complex8.sinh();
      Complex complex13 = complex9.sin();
      Complex.valueOf((double) (-2045222521));
      complex10.equals((Object) null);
      complex5.acos();
      complex13.multiply(174);
      complex11.readResolve();
      complex12.pow(complex6);
      Complex complex14 = Complex.NaN;
      Complex complex15 = new Complex(2.716759624268743E271, (-2045222521));
      complex15.acos();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex.valueOf(2103.719438069242, 2103.719438069242);
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1.0), (-1.124848988733307E-10));
      Complex complex2 = new Complex((-1.0), 20.0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1262.77025948, 1262.77025948);
      complex1.acos();
      Complex complex2 = new Complex(2592.600291719144, (-20.0));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.subtract((-20.0));
      Complex complex3 = complex2.tanh();
      complex3.ZERO.readResolve();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.multiply((-2.1596593091833788E-8));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = new Complex(994);
      complex0.getImaginary();
      complex0.reciprocal();
      Complex complex4 = Complex.ZERO;
      complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.subtract((double) 994);
      complex5.tan();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.asin();
      Complex complex1 = Complex.valueOf(3028.3109625985);
      Complex complex2 = complex1.I.divide(3028.3109625985);
      complex2.NaN.tan();
      Complex complex3 = complex0.negate();
      try { 
        complex3.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.getField();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      complex1.ONE.add(complex2);
      complex2.NaN.subtract((-2355.96));
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.sqrt1z();
      complex4.INF.hashCode();
      Complex complex5 = complex0.multiply(1431655765);
      Complex complex6 = complex5.acos();
      complex6.I.conjugate();
      complex5.INF.cos();
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.ONE.cosh();
      complex8.NaN.sqrt();
      Complex complex9 = complex0.divide(complex5);
      complex9.I.sqrt();
      Complex complex10 = Complex.valueOf(0.8813735870195429, 0.8813735870195429);
      complex9.NaN.sin();
      complex9.abs();
      Complex complex11 = complex4.sqrt();
      complex11.NaN.multiply(200.04221);
      Complex.valueOf(1.3928258114162086);
      complex7.subtract(1.3928258114162086);
      complex10.createComplex((-1202.0), 1559.0079238170874);
      complex10.tan();
      complex0.reciprocal();
      complex3.sinh();
      complex7.cosh();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(1128.72);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex0.createComplex(1128.72, 1128.72);
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex1.atan();
      complex1.equals(complex5);
      Complex complex6 = complex4.tan();
      complex4.I.multiply(1128.72);
      Complex complex7 = complex0.add(complex5);
      complex7.ONE.subtract(complex6);
      complex3.subtract(complex4);
      complex5.pow(complex6);
      complex7.atan();
      complex2.toString();
      complex0.readResolve();
      complex7.tanh();
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1212.843018, 1212.843018);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.acos();
      complex0.INF.pow(complex2);
      Complex complex4 = new Complex(1212.843018);
      Complex complex5 = Complex.INF;
      complex5.reciprocal();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.tan();
      complex2.subtract((double) 994);
      complex0.sqrt();
      complex0.subtract(1212.843018);
      complex0.equals(complex6);
      Object object0 = new Object();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-4647.246));
      Complex complex1 = complex0.subtract((-4647.246));
      Complex complex2 = complex0.acos();
      complex2.reciprocal();
      complex2.ONE.negate();
      Complex complex3 = Complex.INF;
      complex0.cos();
      Complex complex4 = complex0.I.conjugate();
      Complex complex5 = complex0.ZERO.sin();
      Complex complex6 = Complex.NaN;
      complex5.divide(complex6);
      complex4.atan();
      Complex complex7 = complex0.tan();
      complex1.tan();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-4647.246));
      Complex complex1 = complex0.subtract(1369.7883382063196);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = new Complex(211.7);
      complex4.readResolve();
      complex2.subtract((-1.0));
      Complex complex5 = new Complex(211.7);
      complex5.tanh();
      complex2.cos();
      complex3.sin();
      Complex.valueOf((-4647.246), (-4647.246));
      complex4.nthRoot(860);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(2092.3880366049893);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.createComplex(2092.3880366049893, (-4.135121057126514E24));
      Complex complex3 = complex2.multiply(2092.3880366049893);
      complex0.ONE.divide(1.1641532182693481E-7);
      Complex complex4 = complex2.divide((-4.135121057126514E24));
      complex4.I.sin();
      complex0.sinh();
      Complex complex5 = complex4.multiply(complex1);
      complex5.ONE.cos();
      complex0.getArgument();
      complex2.sinh();
      complex1.divide(754.70409971278);
      Complex.valueOf(2092.3880366049893, 2092.3880366049893);
      complex3.sinh();
      Complex complex6 = complex1.acos();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1076.0989319, 3220.1057314239);
      complex0.I.atan();
      Complex complex1 = complex0.subtract(1076.0989319);
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.createComplex(3220.1057314239, 3220.1057314239);
      complex4.I.hashCode();
      complex4.I.sin();
      Complex complex6 = complex1.conjugate();
      complex6.subtract(3220.1057314239);
      complex5.I.acos();
      Complex complex7 = Complex.valueOf((double) (-2754));
      complex7.ZERO.abs();
      complex5.I.log();
      complex5.multiply((-2754));
      Complex complex8 = complex4.subtract(1076.0989319);
      complex8.ZERO.exp();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.subtract((-24.44612952));
      complex11.I.log();
      complex4.negate();
      complex0.abs();
      complex10.readResolve();
      complex5.conjugate();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.I.sinh();
      complex0.abs();
      Complex complex3 = Complex.valueOf((-2069.9191533131));
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.INF.divide((-2069.9191533131));
      complex5.ONE.subtract(complex3);
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex2.NaN.subtract(complex6);
      Complex complex9 = complex8.ZERO.divide((-2069.9191533131));
      complex9.ZERO.multiply((-2045222521));
      Complex complex10 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.add(Double.NaN);
      complex12.NaN.conjugate();
      complex3.log();
      complex2.equals(complex11);
      complex10.NaN.toString();
      Complex complex13 = complex1.add((-423739.4187388775));
      Complex complex14 = complex13.pow(3215.843704908);
      Complex complex15 = complex0.negate();
      Complex complex16 = complex0.sinh();
      complex16.ZERO.sin();
      Complex.valueOf((-935.19459468848));
      complex10.equals(complex15);
      Complex complex17 = complex7.acos();
      complex17.I.multiply((-2045222521));
      complex16.readResolve();
      complex4.pow(complex14);
      complex16.sqrt1z();
      try { 
        complex12.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(Double.NaN);
      Complex complex3 = complex1.pow(complex2);
      complex2.pow(complex0);
      complex0.readResolve();
      complex3.tanh();
      Complex complex4 = complex3.subtract(Double.NaN);
      complex4.tanh();
      Complex complex5 = Complex.NaN;
      complex5.cos();
      Complex complex6 = new Complex((-2095105998), (-1315.4));
      complex6.sin();
      Complex.valueOf(3.7432003492041474E-4, Double.NaN);
      complex2.divide(complex6);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-2334.336063195001));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.subtract((-4647.246));
      complex2.ZERO.cosh();
      Complex complex3 = complex0.acos();
      complex3.ONE.negate();
      Complex complex4 = Complex.INF;
      complex0.cos();
      Complex complex5 = complex1.ZERO.sin();
      complex4.divide(complex0);
      complex3.tan();
      complex5.tan();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-2334.336063195001));
      Complex complex1 = new Complex((-4647.246));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.acos();
      Complex complex5 = new Complex((-2334.336063195001));
      complex4.getImaginary();
      complex2.reciprocal();
      Complex complex6 = Complex.ZERO;
      complex0.tan();
      Complex complex7 = Complex.I;
      complex7.subtract((-4647.246));
      Complex complex8 = complex2.sqrt();
      Complex complex9 = Complex.I;
      complex9.subtract((-0.8813735870195429));
      complex7.tan();
      complex2.divide((double) 994);
      complex8.hashCode();
      complex9.nthRoot(1452);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1246.97232688378);
      Complex complex1 = complex0.pow(2103.0);
      complex1.getImaginary();
      Complex complex2 = complex0.divide(340.265177232);
      complex1.cos();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.sin();
      complex2.cosh();
      Complex complex5 = complex3.tan();
      complex5.pow(340.265177232);
      Complex complex6 = new Complex((-20.0), Double.NaN);
      complex6.exp();
      complex1.readResolve();
      Complex complex7 = Complex.valueOf(2745.699423573, 340.265177232);
      complex7.equals(complex4);
      complex0.negate();
      Complex.valueOf(2103.0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-2049.4));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.log();
      complex0.subtract((-2049.4));
      complex1.pow(complex2);
      Complex complex4 = Complex.valueOf((-1.4010540194086646E-8), (-2049.4));
      complex0.pow(complex4);
      complex2.readResolve();
      complex3.divide(211.7);
      Complex complex5 = Complex.INF;
      complex5.tanh();
      Complex complex6 = Complex.INF;
      complex6.subtract(1417.7959465866);
      Complex complex7 = new Complex(1857.636457455866, (-0.006604341577536879));
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex2.cos();
      complex9.sin();
      Complex.valueOf(113.1749415376, 1685.03);
      Complex complex10 = Complex.INF;
      complex8.divide(complex10);
      complex0.cosh();
      complex4.tan();
      Complex.valueOf((-4647.246), (-2049.4));
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      complex1.abs();
      double double0 = 117.22;
      Complex complex2 = Complex.valueOf(117.22);
      complex0.abs();
      complex0.pow((-478.988618858909));
      complex0.conjugate();
      complex2.getImaginary();
      Complex complex3 = null;
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1246.97232688378);
      Complex.valueOf(1246.97232688378);
      Complex complex1 = complex0.pow(2103.0);
      Complex complex2 = Complex.I;
      complex2.getImaginary();
      Complex complex3 = Complex.NaN;
      complex1.divide(117.22);
      complex0.getReal();
      Complex complex4 = Complex.INF;
      complex0.subtract(complex4);
      Complex complex5 = new Complex((-1.0), (-1.124848988733307E-10));
      complex5.sqrt1z();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.INF;
      complex7.reciprocal();
      complex7.conjugate();
      complex0.divide(1246.97232688378);
      complex3.equals(complex5);
      Complex complex8 = Complex.ZERO;
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 2008.6569;
      Complex complex0 = Complex.valueOf(0.0, 2008.6569);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-2334.336063195001));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.subtract((-2383.31563034042));
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf((-2383.31563034042));
      complex0.abs();
      Complex complex5 = complex4.pow((-2383.31563034042));
      Complex complex6 = complex4.conjugate();
      complex1.getImaginary();
      complex4.divide(complex0);
      complex6.getImaginary();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex5.divide(1.5707963267948966);
      complex2.getReal();
      Complex complex9 = complex7.subtract(complex3);
      complex8.sqrt1z();
      Complex complex10 = Complex.valueOf((-4647.246));
      complex10.hashCode();
      Complex complex11 = Complex.I;
      complex9.reciprocal();
      complex3.conjugate();
      Complex complex12 = new Complex((-1029.864598914057), 2383.31563034042);
      complex12.divide(-0.0);
      Complex complex13 = new Complex((-4647.246), 232.05509307652125);
      complex1.divide(complex13);
      complex5.multiply(5200.578837057346);
      complex2.exp();
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.pow((-3.614672661225457E131));
      Complex complex4 = complex3.reciprocal();
      complex1.nthRoot(1);
      Complex complex5 = Complex.NaN;
      complex2.subtract((double) 1);
      complex5.hashCode();
      complex1.getArgument();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.negate();
      complex4.add(0.0);
      Complex complex8 = complex0.reciprocal();
      complex7.multiply(complex3);
      complex6.hashCode();
      complex6.pow(complex5);
      complex8.reciprocal();
      Complex complex9 = Complex.valueOf(858.86953784);
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-57.57016));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide((-57.57016));
      Complex complex3 = Complex.valueOf((-3415.0), (-3415.0));
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = Complex.valueOf(3157.934497);
      Complex complex6 = complex0.asin();
      complex1.abs();
      Complex.valueOf(117.22);
      complex2.abs();
      Complex complex7 = complex6.pow((-3.845373872038116E-9));
      complex4.conjugate();
      complex7.getImaginary();
      complex1.divide(complex2);
      complex2.getImaginary();
      Complex complex8 = Complex.NaN;
      complex8.divide(338.0);
      complex3.getReal();
      complex1.subtract(complex5);
      complex7.sqrt1z();
      complex4.hashCode();
      Complex complex9 = Complex.I;
      complex9.reciprocal();
      Complex complex10 = complex8.conjugate();
      complex10.divide((-3415.0));
      complex8.equals(complex10);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(7.285370725133842E-304, (-2334.336063195001));
      Complex complex1 = Complex.valueOf(7.285370725133842E-304);
      Complex complex2 = complex0.subtract(1313.2685455);
      complex1.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.divide((-2383.31563034042));
      Complex complex5 = complex0.cos();
      Complex complex6 = complex4.sin();
      complex2.divide(complex6);
      Complex complex7 = complex2.cosh();
      complex5.tan();
      Complex complex8 = complex2.pow(3157.934497);
      complex8.exp();
      complex7.readResolve();
      Complex complex9 = Complex.INF;
      complex1.equals(complex9);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      int int0 = (-2095105998);
      complex1.multiply((-2095105998));
      Complex complex2 = Complex.NaN;
      Complex.valueOf((-20.0));
      Complex complex3 = Complex.I;
      try { 
        complex3.nthRoot((-2095105998));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,095,105,998
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-57.57016));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide((-57.57016));
      Complex complex3 = Complex.valueOf((-3415.0), (-3415.0));
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = Complex.valueOf((-57.57016));
      Complex complex6 = complex1.asin();
      complex6.abs();
      Complex complex7 = Complex.valueOf(0.8813735870195428);
      complex4.abs();
      Complex complex8 = complex5.pow(2.0);
      Complex complex9 = complex4.conjugate();
      complex8.getImaginary();
      Complex complex10 = new Complex((-4511.54033), 2.5116713671266658E213);
      complex10.divide(complex8);
      complex2.getImaginary();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex3.divide(2.2848481695701294E213);
      complex4.getReal();
      complex8.subtract(complex9);
      complex10.sqrt1z();
      complex12.hashCode();
      Complex complex13 = Complex.I;
      Complex complex14 = complex7.reciprocal();
      Complex complex15 = Complex.INF;
      complex15.conjugate();
      complex14.divide(117.22);
      Complex complex16 = complex5.divide(complex4);
      complex16.multiply((-3313.3233224256));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-57.57016));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide((-57.57016));
      Complex complex3 = Complex.valueOf((-3415.0), (-3415.0));
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = Complex.valueOf((-3415.0));
      Complex complex6 = complex2.asin();
      complex4.abs();
      Complex complex7 = Complex.valueOf(0.98262989020701);
      complex6.abs();
      Complex complex8 = complex4.pow((-3415.0));
      Complex complex9 = complex0.conjugate();
      complex7.getImaginary();
      complex5.divide(complex6);
      complex3.getImaginary();
      Complex complex10 = Complex.NaN;
      complex4.divide((-3415.0));
      complex7.getReal();
      complex9.subtract(complex6);
      complex4.sqrt1z();
      Complex complex11 = Complex.ONE;
      complex11.hashCode();
      Complex complex12 = Complex.I;
      complex8.reciprocal();
      complex9.conjugate();
      complex3.divide(3157.934497);
      complex5.divide(complex3);
      complex1.multiply(167.219);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-2334.336063195001));
      Complex complex1 = Complex.valueOf(0.0);
      complex1.subtract((-2383.31563034042));
      Complex complex2 = complex0.acos();
      complex2.ONE.negate();
      Complex complex3 = complex2.atan();
      Complex complex4 = new Complex((-4647.246), (-1842.932592));
      complex4.multiply(complex1);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex3.subtract((-2334.336063195001));
      Complex complex7 = complex4.divide((-1119.0));
      complex5.multiply(7);
      complex6.cosh();
      complex7.conjugate();
      complex7.divide(4.809072216941908E-8);
      Complex complex8 = Complex.valueOf((double) (-1558));
      complex8.divide(complex3);
      complex1.multiply((-753.047376707));
      try { 
        complex2.nthRoot((-1558));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,558
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1943.58));
      complex0.hashCode();
      complex0.hashCode();
      complex0.nthRoot(965);
      complex0.exp();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-2334.336063195001));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.reciprocal();
      List<Complex> list0 = complex0.nthRoot(3665);
      Complex complex3 = complex1.add(complex0);
      Complex.valueOf((double) 3665);
      Complex complex4 = complex2.subtract((double) 3665);
      complex3.acos();
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.divide(373.90084);
      Complex complex8 = complex1.cos();
      complex8.ONE.cosh();
      complex7.sin();
      Complex.valueOf((-4647.246));
      complex3.INF.cosh();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 337.0);
      complex9.divide(complex7);
      complex6.cosh();
      complex9.tan();
      complex3.pow(Double.POSITIVE_INFINITY);
      complex1.exp();
      Complex complex10 = Complex.NaN;
      complex5.readResolve();
      complex6.equals(list0);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-57.57016));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide((-57.57016));
      Complex complex3 = Complex.valueOf((-3415.0), (-3415.0));
      complex3.add(complex1);
      Complex complex4 = Complex.valueOf(3157.934497);
      Complex complex5 = complex0.asin();
      complex1.abs();
      Complex complex6 = new Complex(1451.834, (-3415.0));
      Complex complex7 = Complex.valueOf((-461.692659760113));
      complex7.equals(complex1);
      Complex complex8 = complex6.tan();
      Complex complex9 = complex3.createComplex((-3184.57507), 742.8935);
      Complex complex10 = new Complex(Double.NaN, 3026.126858);
      complex8.multiply(complex5);
      complex2.getField();
      complex9.isNaN();
      complex6.conjugate();
      complex10.pow(2113.58549);
      Complex complex11 = Complex.valueOf(949.12522697063, Double.NaN);
      complex4.add(complex11);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = new Complex((-4962.841161466), 1981.8);
      Complex complex2 = complex0.INF.pow(complex1);
      Object object0 = complex2.ZERO.readResolve();
      complex2.subtract(complex1);
      Complex complex3 = complex0.tanh();
      complex3.ONE.exp();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ZERO.tanh();
      complex1.cosh();
      Complex.valueOf((-4.399582029272418E-9));
      Complex complex6 = complex1.ONE.acos();
      complex6.I.getArgument();
      complex1.subtract((-4.399582029272418E-9));
      complex4.divide(complex5);
      Complex complex7 = complex5.cosh();
      complex1.tan();
      complex7.pow(1.773086915719986E7);
      Complex complex8 = Complex.INF;
      complex8.exp();
      Complex complex9 = Complex.NaN;
      complex3.readResolve();
      object0.equals(complex6);
      Complex complex10 = Complex.valueOf(1.773086915719986E7);
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-2333.5092865326583));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      complex2.cos();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.subtract(256.195);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.divide((-2383.31563034042));
      complex1.cos();
      Complex complex5 = complex1.sin();
      complex4.divide(complex3);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex2.tan();
      complex3.pow((-674.92964607));
      complex3.exp();
      complex6.readResolve();
      complex7.equals(complex2);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2843.5558604), 3117.7283);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.pow((-1.0));
      complex3.reciprocal();
      complex2.nthRoot(1757);
      Complex complex4 = complex3.add(complex1);
      Complex.valueOf(3117.7283);
      Complex complex5 = Complex.ONE;
      complex5.subtract(3.302170788768439E-4);
      complex4.acos();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex0.divide(3117.7283);
      Complex complex8 = complex3.cos();
      Complex complex9 = Complex.valueOf(7.269356264502621E-9);
      complex9.sin();
      Complex.valueOf(7.269356264502621E-9);
      Complex complex10 = complex8.divide(complex7);
      complex6.cosh();
      complex0.tan();
      complex2.pow(20.0);
      complex1.exp();
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.ZERO;
      complex12.readResolve();
      complex7.equals(complex10);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.asin();
      Complex complex1 = Complex.valueOf(3028.3109625985);
      Complex complex2 = complex1.I.divide(3028.3109625985);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      Complex complex6 = complex1.NaN.pow(1.8718514371423056E183);
      Complex complex7 = complex1.tan();
      complex4.tanh();
      Complex complex8 = complex5.cosh();
      Complex complex9 = Complex.valueOf(8.285962249116636E-83);
      complex7.acos();
      complex3.getArgument();
      Complex complex10 = complex9.subtract(8.285962249116636E-83);
      complex10.readResolve();
      Complex complex11 = complex8.multiply(Double.NaN);
      complex1.getArgument();
      complex3.log();
      Object object0 = complex3.readResolve();
      complex5.equals(object0);
      complex7.getField();
      complex11.readResolve();
      Object object1 = complex8.readResolve();
      complex9.equals(object1);
      complex5.isNaN();
      complex10.tan();
      complex6.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(628.655736764946);
      Complex complex2 = complex0.ZERO.pow(628.655736764946);
      complex2.ONE.abs();
      complex0.I.toString();
      Complex complex3 = complex1.add(2185.971539007);
      complex3.getArgument();
      Complex complex4 = complex1.tan();
      Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.I.log();
      complex1.ONE.divide(complex6);
      Complex complex7 = complex4.I.divide(1.5692056324003627);
      complex7.ONE.nthRoot(1508);
      Complex complex8 = complex1.cosh();
      complex8.INF.cos();
      Complex complex9 = complex8.NaN.sqrt();
      Complex complex10 = complex9.ONE.add((double) 1508);
      complex2.cosh();
      Complex.valueOf(1.5692056324003627);
      complex2.ONE.createComplex(764.2899, Double.NaN);
      complex8.isInfinite();
      Complex.valueOf((-2165.069741), 1.0);
      complex7.cosh();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.INF.pow(complex2);
      complex3.I.acos();
      complex0.toString();
      complex2.INF.subtract(1.4055868011423819E-8);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.pow(complex0);
      complex4.ONE.log();
      complex5.I.sin();
      Complex complex6 = new Complex(0.9999949393869545);
      complex4.subtract(complex6);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.divide(0.9999949393869545);
      complex7.divide(0.9999949393869545);
      Complex complex9 = complex8.negate();
      complex9.ZERO.pow(complex3);
      complex1.cos();
      complex3.readResolve();
      complex1.getField();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.ONE.acos();
      complex3.ZERO.multiply(994);
      complex0.getImaginary();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.NaN.multiply(578);
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex((-1.669012123121194E-54), 0.5);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.valueOf((double) 994, 1.6445608398597025);
      complex9.equals(complex10);
      complex8.tan();
      Complex complex11 = Complex.I;
      complex11.createComplex((-2134.4516053), 994);
      Complex complex12 = new Complex(578, 2.0);
      Complex complex13 = complex2.multiply(complex7);
      complex13.getField();
      complex8.isNaN();
      complex6.conjugate();
      complex5.pow((-2134.4516053));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(69.5402302);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.createComplex((-20.93672880317757), (-20.93672880317757));
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex0.add(69.5402302);
      complex7.I.tan();
      Complex complex8 = complex5.negate();
      Complex.valueOf((-0.9999949393869545));
      complex3.acos();
      complex8.getArgument();
      complex6.subtract(1.6422934532165527);
      complex6.ZERO.sqrt();
      Complex complex9 = Complex.ONE;
      complex9.readResolve();
      Complex complex10 = complex8.multiply(1.6422934532165527);
      complex3.getArgument();
      Complex complex11 = complex2.log();
      complex10.equals("/5 FKWa");
      complex9.getField();
      complex5.readResolve();
      complex10.equals(complex11);
      Complex complex12 = Complex.NaN;
      complex12.isNaN();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.4760320860926211, 4.809072216941908E-8);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex3.negate();
      Complex complex6 = complex4.reciprocal();
      complex5.atan();
      complex4.multiply(complex0);
      Complex complex7 = complex4.sqrt1z();
      complex5.subtract(4.809072216941908E-8);
      complex1.divide(0.4760320860926211);
      complex6.multiply((-1558));
      Complex complex8 = complex7.cosh();
      complex2.conjugate();
      complex8.divide(4.809072216941908E-8);
      complex5.divide(complex4);
      complex6.multiply((-3436.075493431959));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-2334.336063195001));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.subtract((-2383.31563034042));
      Complex complex3 = complex0.acos();
      complex3.ONE.negate();
      Complex complex4 = new Complex((-1546.133), (-1546.133));
      Complex complex5 = Complex.INF;
      complex5.equals(complex1);
      complex0.tan();
      Complex complex6 = complex5.createComplex(6.283185307179586, 0.0);
      Complex complex7 = new Complex(0.0, (-57.57016));
      Complex complex8 = Complex.I;
      complex5.multiply(complex8);
      complex6.getField();
      complex4.isNaN();
      complex8.conjugate();
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(628.655736764946);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tan();
      complex2.reciprocal();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.subtract(628.655736764946);
      complex0.hashCode();
      complex5.getArgument();
      complex5.negate();
      complex0.add((-3136.9));
      Complex complex6 = Complex.NaN;
      complex6.reciprocal();
      Complex complex7 = Complex.I;
      complex6.multiply(complex7);
      complex7.hashCode();
      Complex complex8 = Complex.INF;
      complex8.pow(complex4);
      complex3.reciprocal();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-57.57016));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide((-57.57016));
      Complex complex3 = Complex.valueOf((-3415.0), (-3415.0));
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = Complex.valueOf(3157.934497);
      Complex complex6 = complex0.asin();
      complex1.abs();
      Complex.valueOf(117.22);
      complex2.abs();
      Complex complex7 = complex6.pow((-3.845373872038116E-9));
      Complex complex8 = complex4.conjugate();
      complex7.getImaginary();
      complex1.divide(complex2);
      complex2.getImaginary();
      Complex complex9 = Complex.NaN;
      complex9.divide(338.0);
      complex3.getReal();
      complex1.subtract(complex5);
      complex7.sqrt1z();
      complex4.hashCode();
      Complex complex10 = Complex.I;
      complex10.reciprocal();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = new Complex(338.0);
      complex7.reciprocal();
      complex9.sqrt1z();
      complex8.createComplex(8.591367532062577E-5, 0.41421356237309515);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(338.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.subtract(633.34901566196);
      complex1.ONE.hashCode();
      complex3.getArgument();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex1.add(633.34901566196);
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex4.multiply(complex2);
      complex7.ZERO.hashCode();
      Complex complex8 = complex7.ONE.pow(complex4);
      complex8.INF.reciprocal();
      complex1.negate();
      complex3.tan();
      complex6.createComplex(338.0, Double.POSITIVE_INFINITY);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.valueOf((-2683.145));
      Complex complex5 = complex0.I.pow(complex2);
      complex4.ONE.hashCode();
      Complex complex6 = complex3.INF.multiply((-1.0));
      Complex complex7 = complex1.ZERO.subtract(complex3);
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex2.atan();
      complex0.multiply(complex5);
      Complex complex10 = complex0.sqrt1z();
      complex10.subtract((-4538.908352));
      complex0.divide((-3136.9));
      complex6.multiply((-1558));
      complex9.cosh();
      complex5.conjugate();
      Complex complex11 = complex1.divide(4.809072216941908E-8);
      complex5.divide(complex11);
      complex8.multiply((-893.0819075));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.INF.tanh();
      complex3.NaN.cosh();
      Complex complex4 = Complex.valueOf(20.0, 20.0);
      complex2.NaN.subtract(complex0);
      Complex complex5 = complex0.asin();
      complex5.NaN.multiply(20.0);
      Complex complex6 = complex0.cos();
      complex1.multiply(20.0);
      Complex complex7 = complex6.divide(20.0);
      complex7.INF.toString();
      complex4.reciprocal();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(77.01437824099993);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = (-20.93672880317757);
      Complex complex3 = complex2.createComplex((-20.93672880317757), (-20.93672880317757));
      Complex complex4 = complex2.NaN.asin();
      complex0.subtract(complex2);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.sqrt1z();
      double double1 = 82.731903560677;
      complex3.add(82.731903560677);
      Complex complex7 = new Complex(82.731903560677);
      complex5.pow(complex6);
      Complex complex8 = Complex.ONE;
      complex8.multiply(0.0);
      complex5.pow(complex4);
      int int0 = 2144067675;
      // Undeclared exception!
      complex0.nthRoot(2144067675);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.valueOf((-2683.145));
      complex0.I.pow(complex2);
      complex4.ONE.hashCode();
      Complex complex5 = complex3.INF.multiply((-1.0));
      complex1.asin();
      Complex complex6 = complex4.cos();
      Complex complex7 = new Complex(479.9);
      complex7.add((-1449.2));
      Complex complex8 = complex0.negate();
      Complex complex9 = complex4.conjugate();
      complex6.sinh();
      complex9.getField();
      Complex complex10 = complex8.divide(complex5);
      complex10.sqrt1z();
      Complex.valueOf(2334.336063195001, (-3.158898981674071E-9));
      complex7.abs();
      Complex.valueOf(2334.336063195001);
      Complex complex11 = new Complex(479.9, 0.0);
      complex11.add(479.9);
      complex6.equals("");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-2334.336063195001));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.add(complex5);
      complex2.getField();
      complex1.add(complex2);
      complex1.add((-1415.472398));
      Complex complex7 = complex4.subtract(complex3);
      complex2.log();
      complex7.atan();
      complex6.getImaginary();
      Complex complex8 = new Complex(9.249672388853192, 2071.1934359466704);
      complex8.multiply(1.5707963267948966);
      complex7.atan();
      Complex complex9 = Complex.valueOf((-3499.0522047293043));
      complex7.pow(complex0);
      complex8.pow(1.5707963267948966);
      complex3.add((-162.0));
      complex3.multiply((-1415.472398));
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex1.reciprocal();
      complex1.INF.nthRoot(1);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex4.subtract((double) 1);
      complex3.acos();
      complex7.negate();
      Complex complex8 = complex2.divide((-4196.399284716));
      complex4.cos();
      complex6.sin();
      Complex complex9 = Complex.valueOf(6.283185307179586);
      complex9.divide(complex8);
      complex6.cosh();
      complex2.tan();
      Complex complex10 = complex1.pow(1.0);
      complex10.exp();
      Complex complex11 = Complex.NaN;
      complex11.readResolve();
      complex4.equals("");
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.ZERO.add(complex0);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ZERO.multiply(994);
      complex0.getImaginary();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.NaN.multiply(578);
      complex5.INF.tan();
      Complex complex6 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.cos();
      Complex complex8 = complex7.ONE.sqrt();
      complex3.getImaginary();
      complex5.divide(1822.48483593);
      complex1.getReal();
      complex4.subtract(complex1);
      Complex complex9 = complex1.sqrt1z();
      complex6.hashCode();
      complex8.reciprocal();
      Complex complex10 = new Complex(8.25673801176584E-159, Double.POSITIVE_INFINITY);
      complex10.cosh();
      complex9.reciprocal();
      complex9.sqrt1z();
      complex2.createComplex((-1970.86130026), 0.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(628.655736764946);
      Complex complex1 = Complex.I;
      complex1.ONE.divide(628.655736764946);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.atan();
      complex1.I.asin();
      complex1.abs();
      Complex complex4 = Complex.valueOf(628.655736764946);
      complex1.INF.abs();
      complex3.INF.pow(0.0);
      Complex complex5 = complex3.I.conjugate();
      complex3.getImaginary();
      Complex complex6 = complex4.ZERO.divide(complex3);
      Complex complex7 = complex5.tan();
      complex4.divide((-78.7513));
      complex2.multiply(complex0);
      complex2.add((-2612.851));
      complex4.exp();
      Complex complex8 = complex7.negate();
      complex3.tan();
      Complex complex9 = complex8.multiply(Double.POSITIVE_INFINITY);
      complex8.abs();
      Complex complex10 = Complex.ONE;
      complex7.divide(complex4);
      complex6.multiply((-692));
      Complex complex11 = Complex.valueOf((-1563.3605), 1.0);
      complex9.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.valueOf((-2683.145));
      Complex complex5 = complex0.I.pow(complex2);
      complex4.ONE.hashCode();
      Complex complex6 = complex3.INF.multiply((-1.0));
      Complex complex7 = complex1.ZERO.subtract(complex3);
      assertEquals((-0.7071067811865475), complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.ONE.sqrt1z();
      Complex complex9 = complex8.INF.add(9.894571625944288E-229);
      Complex complex10 = new Complex((-2683.145));
      Complex complex11 = complex8.pow(complex10);
      Complex complex12 = complex3.INF.multiply(0.0);
      complex12.INF.pow(complex3);
      List<Complex> list0 = complex12.nthRoot(370);
      assertTrue(list0.contains(complex6));
      
      complex3.isInfinite();
      complex12.readResolve();
      complex0.isNaN();
      complex2.readResolve();
      Complex complex13 = Complex.valueOf((-1.0));
      Complex complex14 = complex13.I.pow((-4.1291070428848755E-76));
      Complex complex15 = complex13.ONE.reciprocal();
      assertTrue(complex15.equals((Object)complex5));
      
      complex13.hashCode();
      Complex complex16 = complex10.multiply(complex3);
      assertEquals((-1897.270024406779), complex16.getImaginary(), 0.01);
      
      complex9.exp();
      Complex complex17 = complex10.sinh();
      Complex complex18 = complex8.conjugate();
      assertEquals(0.0, complex18.getReal(), 0.01);
      
      complex17.hashCode();
      assertEquals(Double.NEGATIVE_INFINITY, complex17.getReal(), 0.01);
      assertFalse(complex17.equals((Object)complex14));
      assertTrue(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex9));
      
      Complex complex19 = complex13.reciprocal();
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      
      complex10.cos();
      assertEquals((-2683.145), complex10.getReal(), 0.01);
      
      Object object0 = complex17.readResolve();
      complex9.equals(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(338.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.subtract(633.34901566196);
      complex2.ZERO.cosh();
      complex1.ONE.hashCode();
      complex3.getArgument();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex1.add(633.34901566196);
      complex5.I.reciprocal();
      Complex complex6 = complex4.multiply(complex2);
      complex6.ZERO.hashCode();
      complex6.ONE.pow(complex4);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      complex0.INF.readResolve();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.nthRoot(1);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = Complex.valueOf((-1.0164389431039905E-7));
      Complex complex5 = complex2.createComplex((-1.0), (-2256.71244353864));
      Complex complex6 = complex3.ONE.negate();
      complex6.I.multiply(2.0);
      Complex complex7 = complex3.negate();
      complex7.INF.add((-3038.2497655));
      complex2.getArgument();
      complex5.add((-807.7482628738));
      complex0.subtract(complex4);
      Complex complex8 = complex5.cos();
      Complex complex9 = complex1.conjugate();
      complex9.ZERO.divide((double) 1);
      complex9.ZERO.sin();
      complex1.nthRoot(1);
      complex0.toString();
      complex4.asin();
      complex4.hashCode();
      complex8.INF.tanh();
      complex1.nthRoot(1);
      complex8.add((-1.0164389431039905E-7));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.NaN.negate();
      complex3.add(complex1);
      complex2.INF.negate();
      complex1.ONE.reciprocal();
      complex2.ZERO.atan();
      Complex complex4 = complex0.ZERO.multiply(complex1);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ONE.subtract(2733.2744282);
      complex6.I.divide(2733.2744282);
      Complex complex7 = complex4.multiply((-1558));
      complex1.ZERO.cosh();
      Complex complex8 = complex7.conjugate();
      complex8.ZERO.divide(0.0);
      complex8.INF.divide(complex4);
      complex4.multiply((-1809.7004631351442));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.acos();
      complex2.pow(0.0);
      Complex complex3 = complex1.reciprocal();
      complex1.INF.nthRoot(1);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.acos();
      Complex complex7 = complex1.ZERO.log();
      complex0.log();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex4.add(complex8);
      complex9.getField();
      Complex complex10 = complex6.add(complex3);
      Complex complex11 = complex10.ZERO.add(2.4875248571153216E73);
      complex9.subtract(complex3);
      complex6.log();
      Complex complex12 = complex3.atan();
      complex10.getImaginary();
      complex5.multiply(2071.1934359466704);
      complex11.atan();
      Complex.valueOf(0.0);
      Complex complex13 = complex4.pow(complex8);
      complex13.INF.pow((-793.1774));
      complex12.add(1688.44469848778);
      complex11.multiply(4.566672575206695E-8);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(450.42513);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = new Complex(0.0, 1.2076238768270153E-8);
      Complex complex3 = complex0.subtract(complex2);
      complex3.toString();
      Complex complex4 = complex2.divide((-1772.08108086));
      Complex complex5 = Complex.valueOf(1.2076238768270153E-8);
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex3.add(complex2);
      complex7.getArgument();
      complex7.ZERO.toString();
      Complex complex8 = complex1.subtract(complex0);
      Complex complex9 = complex4.createComplex((-1772.08108086), 6.283185307179586);
      Complex complex10 = complex9.atan();
      complex6.ONE.pow(complex9);
      complex8.pow(complex0);
      complex10.abs();
      Complex complex11 = complex6.exp();
      Complex complex12 = complex9.subtract(1.2076238768270153E-8);
      complex12.isInfinite();
      complex11.I.tanh();
      complex9.getArgument();
      Complex complex13 = complex11.conjugate();
      complex8.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(36.562797, 36.562797);
      Complex complex1 = complex0.divide(0.23710808157920837);
      complex0.ONE.multiply(36.562797);
      Complex complex2 = Complex.valueOf(460.293069, 0.23710808157920837);
      complex2.ONE.nthRoot(1);
      Complex complex3 = complex0.asin();
      Complex.valueOf(36.562797, 0.0);
      Complex complex4 = complex0.ONE.sin();
      complex4.I.cos();
      Complex complex5 = complex4.ONE.conjugate();
      complex3.getImaginary();
      Complex complex6 = complex0.sin();
      complex4.sqrt1z();
      complex1.hashCode();
      complex6.NaN.acos();
      complex6.multiply(1);
      complex3.equals(complex0);
      complex2.acos();
      complex3.negate();
      complex6.add(complex5);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.ZERO.add(complex0);
      Complex complex2 = complex1.ONE.acos();
      complex2.ZERO.multiply(994);
      complex0.getImaginary();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.NaN.multiply(578);
      complex4.INF.tan();
      Complex complex5 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex8.I.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ZERO.multiply(complex0);
      complex8.INF.add(0.0);
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex6.negate();
      complex7.tan();
      complex1.multiply(0.0);
      complex12.abs();
      Complex complex13 = Complex.ONE;
      complex11.divide(complex13);
      complex1.multiply((-248));
      complex1.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2478.171888783327), 0.0);
      Complex complex1 = new Complex(0.0, (-564.8259));
      complex0.NaN.add(complex1);
      complex0.createComplex((-2478.171888783327), (-2478.171888783327));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(5522.4827928659);
      complex0.NaN.getField();
      Complex complex1 = Complex.valueOf(5522.4827928659, (-896.1897460123445));
      Complex complex2 = complex1.I.add((double) 1);
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.tan();
      complex6.NaN.multiply(1);
      Complex.valueOf((double) 1);
      complex4.add(complex1);
      Complex complex7 = complex3.ONE.divide((-896.1897460123445));
      Complex.valueOf(0.0);
      Complex complex8 = complex3.multiply(complex2);
      complex8.I.divide((-226.681));
      Complex complex9 = complex3.add(1290.28313565511);
      complex4.sqrt();
      Complex complex10 = complex8.log();
      Complex complex11 = complex10.atan();
      complex11.ZERO.subtract(complex7);
      complex3.I.subtract(complex4);
      Complex complex12 = complex3.pow(7.694785471490595E23);
      Complex complex13 = complex0.subtract(complex9);
      complex13.ZERO.atan();
      complex5.exp();
      complex8.subtract(20.0);
      complex12.isInfinite();
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.NaN.cosh();
      complex3.I.getField();
      Complex.valueOf(20.0, 20.0);
      complex2.NaN.subtract(complex0);
      Complex complex5 = complex0.asin();
      complex5.NaN.multiply(20.0);
      Complex complex6 = complex0.cos();
      complex1.multiply(20.0);
      Complex complex7 = complex6.divide(20.0);
      complex7.ONE.sqrt();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-372.418));
      Complex complex1 = complex0.INF.tan();
      complex0.pow(452.9325);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.acos();
      complex2.INF.add(1182.0060858608279);
      Complex.valueOf((-1807.548705));
      complex0.getField();
      complex2.exp();
      complex3.I.log();
      Complex.valueOf(0.0);
      Complex complex4 = complex3.divide(complex1);
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(8.51364033, 0.0);
      complex0.ONE.atan();
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(628.655736764946);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.divide(628.655736764946);
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.I.asin();
      complex1.abs();
      Complex complex6 = Complex.valueOf(628.655736764946);
      complex1.INF.abs();
      complex4.INF.pow(0.0);
      complex4.I.conjugate();
      complex4.getImaginary();
      complex6.ZERO.divide(complex4);
      complex3.getImaginary();
      complex1.divide((-1970.86130026));
      complex6.getReal();
      complex5.subtract(complex6);
      Complex complex7 = complex1.sqrt1z();
      complex7.ZERO.hashCode();
      complex2.reciprocal();
      complex2.cosh();
      complex0.reciprocal();
      complex2.sqrt1z();
      complex5.createComplex(1.0, (-2807.037));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-4647.246), (-2334.336063195001));
      Complex complex1 = Complex.valueOf(0.0);
      complex1.subtract((-2383.31563034042));
      Complex complex2 = complex0.acos();
      complex2.ONE.negate();
      Complex complex3 = complex2.divide((-2334.336063195001));
      Complex complex4 = complex0.cos();
      complex1.ZERO.sin();
      Complex complex5 = complex3.divide(complex0);
      complex4.cosh();
      complex2.tan();
      complex0.pow((-2383.31563034042));
      complex1.exp();
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1728.704749924), 6.113879253864931E-8);
      complex0.I.tan();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex2.INF.divide((-3494.2));
      complex3.I.cos();
      complex1.ZERO.nthRoot(170);
      complex0.ONE.nthRoot(170);
      complex1.subtract(complex0);
      Complex complex4 = complex0.reciprocal();
      complex4.abs();
      complex0.log();
      complex4.multiply(6.113879253864931E-8);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.sqrt1z();
      complex0.ZERO.acos();
      Complex complex1 = complex0.sqrt1z();
      Complex.valueOf((-681.5));
      Complex complex2 = complex1.createComplex(1707.932879722776, 1707.932879722776);
      Complex complex3 = complex2.NaN.sqrt();
      complex3.INF.abs();
      Complex complex4 = complex3.add((-1843.4657631));
      complex2.getArgument();
      Complex complex5 = complex4.I.cosh();
      complex5.ONE.toString();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.INF.subtract(complex6);
      Complex.valueOf(1707.932879722776, 1707.932879722776);
      Complex complex7 = complex1.sqrt1z();
      complex7.tanh();
      complex7.conjugate();
      Complex.valueOf((-542.47829049));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      complex0.ONE.exp();
      complex0.getReal();
      try { 
        complex0.nthRoot((-4009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,009
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(2589.0, 0.0);
      Complex complex2 = complex0.NaN.multiply(2589.0);
      complex2.INF.nthRoot(1472);
      complex2.ZERO.divide(complex1);
      complex0.INF.getField();
      complex1.I.abs();
      complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.ONE.atan();
      complex3.I.divide((-3194.135));
      complex0.readResolve();
      Complex complex4 = complex3.divide(4023.212612);
      double double1 = 0.0;
      Complex complex5 = complex4.ONE.subtract((-2309.09145808282));
      try { 
        complex5.ONE.nthRoot((-319));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -319
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.log();
      complex3.NaN.subtract(0.0);
      complex1.ONE.hashCode();
      Complex complex4 = complex0.I.multiply(298.65271060279986);
      Complex.valueOf(298.65271060279986, 298.65271060279986);
      Complex complex5 = complex4.I.multiply(complex0);
      complex5.ONE.sin();
      try { 
        complex0.nthRoot((-191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -191
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5188732147216797);
      Complex complex1 = complex0.ONE.subtract(20.0);
      complex1.NaN.nthRoot(1);
      complex0.abs();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.ONE.divide(complex2);
      complex3.NaN.cos();
      complex2.ZERO.createComplex(812.805, 746.5920974);
      Complex.valueOf(746.5920974);
      Complex complex4 = complex0.INF.asin();
      complex4.I.subtract(complex0);
      Complex complex5 = complex2.INF.pow(complex0);
      complex1.ONE.acos();
      Complex complex6 = complex0.ONE.subtract(0.0);
      complex6.sqrt1z();
      complex2.ONE.atan();
      complex2.NaN.exp();
      complex5.ZERO.multiply(0.0);
      Complex complex7 = complex0.cosh();
      complex7.atan();
      Complex.valueOf(0.0, (-2758.0013535774447));
      Complex complex8 = complex7.reciprocal();
      complex1.add(complex7);
      Complex complex9 = complex8.multiply(2207);
      complex9.INF.sin();
      Complex complex10 = complex0.tan();
      complex10.hashCode();
      complex0.sin();
      Complex complex11 = complex1.atan();
      complex11.ZERO.sqrt();
      Complex.valueOf((-3.614672661225457E131));
      complex2.createComplex(316.307333475183, 0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.readResolve();
      complex0.ZERO.toString();
      complex0.ONE.getField();
      complex0.hashCode();
      complex0.toString();
      complex0.getImaginary();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.subtract(complex1);
      complex3.I.conjugate();
      Complex complex4 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex4.INF.multiply(Double.NaN);
      complex6.INF.abs();
      complex3.I.atan();
      Complex complex7 = complex1.divide(complex4);
      Complex complex8 = complex7.ONE.atan();
      complex2.readResolve();
      complex7.readResolve();
      complex8.I.abs();
      complex3.getArgument();
      Complex complex9 = complex2.exp();
      complex9.ZERO.negate();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex10.add(complex8);
      complex9.toString();
      complex11.getArgument();
      complex4.divide(complex6);
      Complex complex12 = complex4.divide(complex6);
      complex12.getArgument();
      complex5.pow(1434.86);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.33325839042663574, 2186.40736394);
      Complex complex1 = complex0.ZERO.cosh();
      complex0.I.readResolve();
      complex1.I.sqrt1z();
      complex1.INF.readResolve();
      double double0 = (-127.1157731791);
      Complex complex2 = Complex.valueOf((-127.1157731791));
      complex0.hashCode();
      Complex complex3 = complex2.INF.cosh();
      complex3.ONE.getField();
      complex3.log();
      try { 
        complex1.nthRoot((-3951));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,951
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(69.5402302);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.createComplex((-20.93672880317757), (-20.93672880317757));
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex0.add(69.5402302);
      Complex complex8 = complex5.negate();
      complex8.conjugate();
      complex6.sinh();
      complex7.getField();
      complex5.divide(complex1);
      complex6.sqrt1z();
      Complex.valueOf(69.5402302, 69.5402302);
      complex8.abs();
      complex8.sqrt1z();
      complex8.add(0.0);
      complex3.equals("n>:\"z");
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(344.71922907711, 344.71922907711);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.I;
      complex0.ONE.sin();
      complex2.getField();
      Complex complex3 = complex1.add(complex2);
      complex3.ONE.sqrt();
      complex3.toString();
      Complex complex4 = Complex.valueOf(678.89991);
      Complex complex5 = complex4.I.atan();
      complex4.ONE.divide(1.6390891075134277);
      complex4.createComplex(1.6390891075134277, 0.0);
      complex0.toString();
      Complex complex6 = Complex.valueOf(344.71922907711, 1595.1205977292555);
      complex3.isInfinite();
      complex5.sin();
      complex2.equals("");
      complex6.createComplex((-2926.1921801847675), 1.6390891075134277);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.ONE.divide(complex1);
      complex0.createComplex(1920.183367730897, (-2282.47481925));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2228.5570055442226));
      Complex complex2 = complex1.NaN.sin();
      complex1.NaN.cosh();
      complex2.ZERO.abs();
      Complex complex3 = complex2.ZERO.multiply(303);
      Complex complex4 = complex3.NaN.acos();
      complex4.I.hashCode();
      complex0.NaN.subtract(complex1);
      double double0 = (-3524.0);
      Complex complex5 = complex0.pow((-3524.0));
      Complex complex6 = complex5.createComplex((-3524.0), (-2228.5570055442226));
      complex6.ONE.negate();
      complex5.sinh();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = Complex.valueOf(3028.3109625985);
      Complex complex3 = complex2.I.divide(3028.3109625985);
      complex3.NaN.tan();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      Complex complex6 = new Complex((-148.104006202), 0.0);
      complex0.equals(complex6);
      complex5.tan();
      Complex complex7 = complex1.createComplex(0.0, (-148.104006202));
      Complex complex8 = new Complex((-148.104006202), 0.0);
      complex4.multiply(complex8);
      complex7.NaN.getField();
      complex4.isNaN();
      complex5.conjugate();
      complex5.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = new Complex((-4962.841161466), 1981.8);
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.ZERO.readResolve();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.tanh();
      complex4.ONE.exp();
      Complex complex5 = complex4.tan();
      complex5.ZERO.tanh();
      complex1.cosh();
      Complex.valueOf((-4.399582029272418E-9));
      Complex complex6 = complex1.ONE.acos();
      complex6.I.getArgument();
      Complex complex7 = complex1.subtract((-4.399582029272418E-9));
      complex6.ONE.readResolve();
      Complex complex8 = complex7.multiply((-4.399582029272418E-9));
      complex8.ZERO.getArgument();
      complex8.log();
      complex2.equals(complex6);
      complex6.INF.getField();
      Object object0 = complex6.readResolve();
      complex2.equals(object0);
      complex2.isNaN();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2581.722656552));
      Complex complex1 = complex0.ONE.cosh();
      complex1.I.nthRoot(7);
      Complex complex2 = Complex.valueOf((-2581.722656552));
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.NaN.createComplex(40.0, (-2581.722656552));
      complex5.add(complex2);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex2.NaN.add(complex6);
      Complex complex8 = complex0.multiply((-741));
      complex8.multiply((double) (-741));
      Complex complex9 = complex8.ZERO.multiply((-972.6482511605464));
      complex9.NaN.getArgument();
      complex2.sqrt1z();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex4.pow((-229.0));
      complex6.ONE.readResolve();
      Complex complex7 = complex1.multiply(367);
      complex4.INF.nthRoot(367);
      Complex complex8 = complex7.NaN.conjugate();
      complex8.NaN.readResolve();
      Complex complex9 = complex1.pow(complex4);
      complex9.INF.exp();
      complex8.NaN.multiply(367);
      complex1.INF.log();
      complex4.divide(Double.NaN);
      complex8.acos();
      Complex complex10 = complex2.divide(0.0);
      complex5.add(complex2);
      Complex complex11 = complex10.divide(0.0);
      Complex complex12 = complex11.createComplex(367, Double.NaN);
      Complex complex13 = complex12.I.divide(0.0);
      complex3.getImaginary();
      complex12.multiply(complex3);
      complex0.getImaginary();
      complex5.isInfinite();
      complex13.toString();
      complex13.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.9275804461593914E217));
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-2.9275804461593914E217));
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.ONE.tan();
      complex4.NaN.sinh();
      complex4.ONE.multiply(complex3);
      complex4.NaN.sqrt1z();
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex6.INF.sqrt1z();
      complex3.conjugate();
      Complex complex8 = complex5.log();
      complex8.NaN.multiply(complex7);
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.INF.hashCode();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.pow(complex1);
      complex0.isInfinite();
      complex2.nthRoot(7);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex0.sinh();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex7.ZERO.tan();
      complex0.NaN.abs();
      complex3.abs();
      complex5.ONE.createComplex(1.0, 7);
      complex3.createComplex((-2675.196133542175), 0.0);
      complex6.getField();
      complex8.abs();
      complex5.add(204.111121276113);
      complex1.tan();
      complex6.createComplex(1.0, 7);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.add(complex3);
      Complex complex8 = complex3.multiply(complex7);
      Complex complex9 = complex1.ZERO.createComplex(1.552583321178453E-10, (-3607.0));
      assertEquals(1.552583321178453E-10, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-3607.0), complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex3.pow(0.0);
      Complex complex11 = complex8.tan();
      assertSame(complex11, complex10);
      
      Complex complex12 = (Complex)complex8.readResolve();
      assertTrue(complex12.isNaN());
      assertSame(complex6, complex5);
      assertSame(complex3, complex4);
      assertSame(complex7, complex2);
      assertFalse(complex12.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7615941559557649, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }
}
