/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:24:49 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4412328161430576E235);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide(6.283185307179586);
      complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(643.36952, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-6.452129525125173E-8));
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.atan();
      complex1.divide(complex2);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.negate();
      complex3.log();
      Complex complex5 = complex1.cosh();
      complex4.createComplex(1942.2333532, 1942.2333532);
      Complex complex6 = complex5.tan();
      complex4.nthRoot(7);
      complex6.multiply(7);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-639.7208527765649), (-2891.698632));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex.valueOf(504.9, (double) (-1));
      Complex complex3 = new Complex((-1.0), (-20.0));
      complex3.I.readResolve();
      complex3.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.175748919314254E172, 2.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.cos();
      complex1.ZERO.tanh();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex0.ZERO.pow(complex1);
      complex3.INF.subtract(2.0);
      Complex complex5 = complex3.INF.tanh();
      Complex complex6 = complex1.I.reciprocal();
      Complex complex7 = complex0.ZERO.subtract(complex1);
      complex0.INF.cos();
      Complex complex8 = complex0.pow(2.0);
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex0.negate();
      complex10.I.conjugate();
      complex6.divide(50.072987546504);
      Complex complex11 = complex0.asin();
      complex11.divide(complex0);
      complex4.add(complex7);
      Complex complex12 = complex9.pow(2.0);
      complex5.pow((-383.73462424));
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 1.0);
      complex1.asin();
      Complex.valueOf(20.0, 2.0);
      complex0.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3623.0, Double.POSITIVE_INFINITY);
      complex0.multiply(1312145731);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3623.0, Double.POSITIVE_INFINITY);
      complex0.exp();
      Complex complex1 = complex0.tan();
      complex1.divide(complex0);
      complex0.multiply(3623.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex((-1541.165300522), (-1541.165300522));
      complex2.divide((-1541.165300522));
      complex1.negate();
      complex3.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.9999980875235679, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex2.multiply(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex(330.47598421);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.tanh();
      complex6.subtract(complex3);
      complex7.ONE.pow(Double.POSITIVE_INFINITY);
      complex7.I.sin();
      Complex complex8 = Complex.NaN;
      complex7.sqrt();
      Complex complex9 = complex6.reciprocal();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-1022.62579718));
      Complex complex1 = new Complex((-1022.62579718), Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-1022.62579718));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(complex0);
      complex2.ONE.reciprocal();
      Complex complex3 = Complex.valueOf((-1039.2), Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex((-2003.46575), 0.0025034593992483076);
      Complex complex5 = complex3.multiply(complex1);
      complex1.exp();
      Complex complex6 = new Complex(303.7276903);
      complex5.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.41421342233505665, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      complex0.sinh();
      complex2.divide((-3878.0690463));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      complex1.INF.pow(complex0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(1163.68234, 916.88);
      complex2.getArgument();
      complex2.toString();
      complex4.NaN.readResolve();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex2.multiply(224);
      Complex complex7 = complex6.ZERO.subtract(1.0106552237522032E228);
      complex7.NaN.abs();
      Complex complex8 = complex6.INF.cos();
      Complex complex9 = complex6.I.log();
      Complex.valueOf(1.5707963267948966, Double.NaN);
      complex4.pow(complex2);
      complex3.log();
      complex5.toString();
      Complex complex10 = complex1.subtract(1163.68234);
      Complex.valueOf((double) 224, 916.88);
      Complex complex11 = complex8.sqrt();
      complex10.cos();
      complex11.negate();
      complex11.hashCode();
      complex9.tanh();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-1022.62579718));
      Complex complex1 = new Complex(0.9999980875235679, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      complex1.sinh();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-1241.86277788446), (-1241.86277788446));
      Complex complex1 = complex0.INF.multiply((-1));
      Complex complex2 = complex1.asin();
      complex0.toString();
      Complex complex3 = complex0.sinh();
      complex3.ZERO.abs();
      Complex complex4 = complex3.I.add((-1396.096509151006));
      complex3.atan();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex4.cosh();
      complex6.I.conjugate();
      complex6.divide(complex3);
      complex5.sqrt();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-1022.62579718));
      Complex complex1 = Complex.valueOf(0.0, (-1022.62579718));
      complex1.tanh();
      complex0.add(2.0);
      complex0.abs();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sinh();
      complex3.cosh();
      complex2.divide(complex0);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2662.53325959);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 2662.53325959);
      complex2.reciprocal();
      Complex complex3 = Complex.NaN;
      Complex.valueOf((-2577.5378001153), 6.283185307179586);
      complex3.tanh();
      Complex.valueOf(2662.53325959, 598.3042);
      complex2.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-1022.62579718));
      Complex complex1 = new Complex(0.9999980875235679, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      complex1.sinh();
      complex2.reciprocal();
      Complex.valueOf((-608.4), 111.6);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(3275.43817648983, 3275.43817648983);
      complex0.asin();
      complex0.sinh();
      Complex complex1 = Complex.NaN;
      complex1.reciprocal();
      complex0.asin();
      Complex complex2 = Complex.valueOf((-20.0), 1503.262);
      complex2.tanh();
      Complex complex3 = Complex.valueOf(3275.43817648983, 1573.0);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      complex1.NaN.reciprocal();
      complex0.reciprocal();
      Complex complex2 = complex1.multiply(1.0178783359926372E-4);
      complex2.INF.pow(complex1);
      Complex complex3 = new Complex(1104.0003492048, (-20.0));
      complex3.toString();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, (-1312.0153229186));
      complex4.cos();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = new Complex((-1312.0153229186), 1104.0003492048);
      complex6.nthRoot(2811);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-875.298), (-2.862720607805682E216));
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(1498.112494052, 8.133927706412718);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.I;
      complex3.I.add(complex2);
      Complex complex4 = complex2.subtract(complex3);
      complex4.ZERO.sqrt1z();
      complex1.createComplex(0.5226693153381348, 0.5226693153381348);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.tan();
      Complex complex1 = Complex.valueOf((-4003.1853540530046), (-4003.1853540530046));
      complex1.tanh();
      Complex complex2 = complex1.add((-198.63));
      complex2.nthRoot(1);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 2693);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-1241.86277788446), (-1241.86277788446));
      Complex complex1 = complex0.multiply(1168);
      Complex complex2 = complex0.asin();
      complex1.toString();
      Complex complex3 = complex2.sinh();
      complex3.abs();
      Complex complex4 = complex3.add((-1396.096509151006));
      complex1.atan();
      complex0.divide(complex3);
      Complex complex5 = complex4.sin();
      complex5.ONE.tanh();
      complex3.ZERO.toString();
      Complex complex6 = complex4.pow((-1168.38284231));
      Complex complex7 = complex6.asin();
      Complex complex8 = complex1.subtract((-1396.096509151006));
      complex8.exp();
      complex8.log();
      complex4.cosh();
      Complex complex9 = Complex.ONE;
      complex9.tan();
      Complex complex10 = Complex.ZERO;
      complex10.cosh();
      Complex complex11 = complex7.multiply((-3909.42148270863));
      complex4.toString();
      Complex complex12 = complex9.cos();
      complex12.divide(complex3);
      complex11.conjugate();
      complex2.nthRoot(1874);
      complex8.multiply(Double.POSITIVE_INFINITY);
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1241.86277788446), (-1241.86277788446));
      Complex complex1 = complex0.INF.multiply((-1));
      Complex complex2 = complex1.asin();
      complex0.toString();
      Complex complex3 = complex0.sinh();
      complex3.ZERO.abs();
      Complex complex4 = Complex.ZERO;
      complex4.divide((-1584.276346584425));
      complex2.abs();
      complex1.tan();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex1.acos();
      double double0 = 1008.69219656;
      Complex complex2 = Complex.valueOf(1008.69219656, 1008.69219656);
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.58), (-478.58));
      Complex complex1 = complex0.reciprocal();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.41997434161402614);
      complex0.abs();
      Complex complex2 = complex0.tan();
      complex2.getArgument();
      complex0.reciprocal();
      Complex complex3 = Complex.I;
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-2423.6));
      Complex complex1 = complex0.divide(8.946330721173279);
      complex0.abs();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.58), (-478.58));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.add((-478.58));
      complex0.abs();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.sinh();
      complex4.I.cosh();
      Complex complex5 = complex1.divide(complex4);
      complex5.INF.negate();
      complex0.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-926.0));
      Complex complex1 = new Complex(1.0, 8.946653727551928);
      complex1.pow(complex0);
      Complex complex2 = complex1.subtract(3275.43817648983);
      complex2.cos();
      complex2.add(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.createComplex(1.0, (-2064.4789406));
      complex2.pow(3.230089643550739E-275);
      Complex complex5 = complex4.sqrt();
      complex5.nthRoot(1);
      complex2.add((-3856.790204627));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.acos();
      Complex complex2 = complex0.ZERO.tan();
      complex0.getReal();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.INF.cos();
      complex2.conjugate();
      complex4.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex3.pow(Double.POSITIVE_INFINITY);
      complex0.nthRoot(1016);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-1022.62579718));
      Complex complex1 = new Complex((-1022.62579718), (-2064.4789406));
      complex0.pow(complex1);
      Complex complex2 = complex0.subtract((-2064.4789406));
      Complex complex3 = complex2.cos();
      Complex complex4 = new Complex((-202.5233), (-202.5233));
      complex4.getReal();
      Complex complex5 = Complex.ONE;
      complex4.cos();
      complex4.hashCode();
      complex3.add(8.419901749901717E-304);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.add((-478.58));
      complex0.abs();
      complex2.ZERO.asin();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.divide(complex3);
      complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply((-1045));
      complex2.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
      complex1.createComplex(Double.POSITIVE_INFINITY, 1.4674011002723395);
      complex0.exp();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3197.2623361753);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex1.tan();
      complex1.exp();
      Complex complex3 = complex1.negate();
      complex3.sinh();
      complex0.ZERO.sinh();
      Complex complex4 = complex1.ONE.multiply(complex3);
      complex2.ZERO.subtract((-484.0));
      Complex complex5 = complex0.NaN.sinh();
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex6.subtract((-3941.359337723901));
      Complex complex8 = complex0.subtract((-3941.359337723901));
      complex2.getReal();
      complex0.pow(complex8);
      Complex complex9 = complex3.reciprocal();
      complex9.ONE.getArgument();
      complex1.tanh();
      complex3.cos();
      complex4.exp();
      complex6.sqrt();
      complex5.sin();
      complex7.add(0.0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = (-3941.359337723901);
      Complex complex0 = Complex.valueOf((-3941.359337723901));
      complex0.NaN.sin();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.sinh();
      complex2.ZERO.sqrt();
      Complex complex3 = complex0.sqrt();
      complex3.I.hashCode();
      complex2.getImaginary();
      Complex complex4 = Complex.valueOf((-624.6174808));
      complex4.sin();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex1.ONE.hashCode();
      complex1.I.exp();
      Complex complex2 = Complex.valueOf((-9.87));
      Complex complex3 = Complex.ONE;
      complex0.INF.abs();
      complex0.divide(complex1);
      Complex complex4 = Complex.ONE;
      complex4.I.exp();
      Complex complex5 = complex4.reciprocal();
      complex0.asin();
      complex5.NaN.sin();
      Object object0 = new Object();
      Complex complex6 = Complex.valueOf((-9.87), 0.0);
      complex0.equals(complex6);
      complex2.readResolve();
      complex6.getArgument();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(2206.16892593, Double.NaN);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf(829.7, (-691.098163));
      complex3.createComplex(6.799331026741129E-5, Double.NaN);
      complex1.getImaginary();
      complex4.sin();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-1006.2930364873223));
      Complex complex1 = new Complex((-1006.2930364873223), (-2064.4789406));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.subtract((-1006.2930364873223));
      complex3.cos();
      Complex complex4 = complex2.ZERO.add(complex0);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.createComplex(4325.1, 994.959225549);
      complex2.pow((-1006.2930364873223));
      complex6.INF.sqrt();
      complex6.nthRoot(1);
      Complex complex7 = complex6.add(3841.0711565396223);
      complex7.NaN.cos();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(3273.72475, 2006.3231);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.pow(2006.3231);
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.valueOf(0.41421356237309515);
      Complex complex6 = complex0.reciprocal();
      complex6.sinh();
      complex5.asin();
      Complex complex7 = new Complex(2006.3231);
      Object object0 = new Object();
      Complex complex8 = Complex.valueOf(3273.72475, 2006.3231);
      Complex complex9 = Complex.I;
      complex9.equals(complex8);
      complex4.readResolve();
      complex2.getArgument();
      complex0.acos();
      complex4.getImaginary();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1401.21);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.pow(916.2201);
      Complex complex5 = complex4.cos();
      Complex.valueOf(0.41421356237309515);
      complex1.multiply(1312145731);
      Complex complex6 = Complex.I;
      complex4.cosh();
      complex5.tan();
      Complex complex7 = Complex.I;
      complex2.add((-1921.42225));
      Complex complex8 = Complex.INF;
      complex3.nthRoot(17);
      complex4.divide((double) 17);
      Complex complex9 = Complex.valueOf(-0.0);
      complex6.add(complex9);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(3275.43817648983, 2006.3231);
      Complex complex1 = complex0.asin();
      complex1.sinh();
      Complex complex2 = complex1.pow(49.59362751118948);
      complex2.cos();
      Complex.valueOf(0.41421356237309515);
      Complex complex3 = complex0.multiply(2176);
      Complex complex4 = Complex.I;
      complex2.cosh();
      complex1.tan();
      Complex complex5 = Complex.I;
      complex5.I.negate();
      complex5.add(0.17506598985571836);
      Complex complex6 = Complex.INF;
      complex6.nthRoot(17);
      complex1.divide(20.0);
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex0.atan();
      Complex complex2 = complex1.conjugate();
      complex1.readResolve();
      Complex complex3 = complex1.pow(6.283185307179586);
      Complex complex4 = Complex.valueOf((-1504.808354481758), (-3277.2042474299));
      Object object0 = complex3.readResolve();
      complex4.equals(object0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.acos();
      complex6.add(complex3);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.reciprocal();
      complex2.asin();
      Complex complex3 = complex1.sin();
      Object object0 = new Object();
      double double0 = (-2004.2811456368158);
      // Undeclared exception!
      complex3.I.nthRoot(1931575278);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(3273.72475, 2006.3231);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.subtract(2006.3231);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex1.add(complex3);
      complex3.conjugate();
      Complex complex6 = complex4.createComplex((-57.095963417), 4325.1);
      complex5.pow(158.8);
      Complex complex7 = complex2.sqrt();
      complex7.nthRoot(5723);
      complex6.add(2006.3231);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.exp();
      Complex complex1 = complex0.acos();
      complex0.ZERO.tan();
      complex0.getReal();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.ONE;
      complex3.INF.cos();
      complex0.hashCode();
      Complex complex4 = complex2.cos();
      complex0.conjugate();
      complex4.createComplex(0.0, 136.4854641070387);
      complex0.pow(0.0);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.exp();
      complex0.acos();
      complex0.ZERO.tan();
      complex0.getReal();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      complex2.INF.cos();
      complex0.hashCode();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.conjugate();
      complex3.createComplex(Double.NaN, 136.4854641070387);
      complex0.pow(Double.NaN);
      try { 
        complex4.nthRoot((-21));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -21
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(468.245738546008, 468.245738546008);
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sinh();
      complex0.isInfinite();
      complex1.abs();
      Complex complex3 = new Complex((-665.8768851499));
      complex3.exp();
      complex2.log();
      Complex complex4 = Complex.INF;
      complex4.log();
      complex4.abs();
      Complex complex5 = complex1.pow(662.1994739751709);
      Complex complex6 = complex3.tanh();
      complex4.multiply((-3182.644354107));
      Complex complex7 = complex6.sqrt();
      complex2.multiply(complex5);
      complex7.exp();
      Complex complex8 = Complex.I;
      complex8.getField();
      Complex complex9 = Complex.ZERO;
      complex9.tanh();
      try { 
        complex6.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(3273.72475, 2006.3231);
      Complex complex1 = complex0.asin();
      complex1.sinh();
      Complex complex2 = complex1.pow((-2230.55217489));
      Complex complex3 = complex2.cos();
      complex3.I.createComplex((-6691940.357168951), (-2230.55217489));
      Complex.valueOf(0.41421356237309515);
      complex0.multiply(2176);
      Complex complex4 = Complex.valueOf((-1043.0));
      complex2.cosh();
      complex1.tan();
      Complex complex5 = Complex.I;
      complex4.ZERO.subtract((-6691940.357168951));
      complex5.add(0.17506598985571836);
      complex4.exp();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex1.ONE.hashCode();
      complex1.I.exp();
      complex0.INF.abs();
      complex0.divide(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ONE;
      complex3.pow(2206.16892593);
      complex2.equals(complex1);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2206.16892593);
      Complex complex1 = complex0.INF.atan();
      Object object0 = complex0.readResolve();
      complex0.I.pow((-3277.2042474299));
      object0.equals(complex1);
      Complex complex2 = Complex.valueOf(2489.13);
      complex2.sin();
      complex2.acos();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.tanh();
      complex2.INF.subtract(673.56);
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.reciprocal();
      complex4.ZERO.exp();
      Complex complex5 = complex1.NaN.cos();
      complex3.ZERO.hashCode();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex6.I.negate();
      Complex complex8 = complex7.INF.add(0.0);
      complex8.ZERO.asin();
      Complex complex9 = complex3.ZERO.conjugate();
      Complex complex10 = complex9.I.negate();
      complex1.hashCode();
      Complex complex11 = complex3.conjugate();
      complex0.add(0.0);
      Complex complex12 = complex11.subtract(0.0);
      complex0.abs();
      Complex complex13 = complex1.log();
      complex0.sqrt();
      complex0.add(complex5);
      Complex.valueOf(0.0);
      complex2.getImaginary();
      Complex complex14 = complex13.pow(complex1);
      complex13.getField();
      complex14.subtract(0.0);
      complex9.sin();
      complex12.hashCode();
      complex4.add(0.0);
      complex13.cos();
      complex6.atan();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2773080633674971E271, (-2.4642997069960124E-8));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex2.NaN.tanh();
      complex5.INF.reciprocal();
      Complex complex6 = complex2.log();
      complex6.getArgument();
      Complex complex7 = complex0.pow((-577.3252119));
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex0.log();
      complex10.I.cosh();
      Complex complex11 = Complex.I;
      complex8.subtract(complex11);
      complex3.pow(complex11);
      complex11.readResolve();
      Complex complex12 = Complex.ONE;
      complex12.I.add(complex5);
      Complex complex13 = complex9.pow(complex12);
      Complex complex14 = complex1.sqrt1z();
      Complex complex15 = complex6.exp();
      complex4.cos();
      complex15.ZERO.abs();
      Complex complex16 = complex15.conjugate();
      complex16.subtract(complex7);
      complex6.subtract(6136.697137791);
      complex12.negate();
      complex14.reciprocal();
      complex3.getArgument();
      complex1.sin();
      complex13.abs();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex1.ONE.hashCode();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = Complex.valueOf((-9.87));
      Complex complex4 = complex3.INF.divide((-9.87));
      complex0.INF.abs();
      Complex complex5 = complex3.multiply(0.0);
      complex4.multiply(68);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.cosh();
      complex2.tan();
      Complex complex6 = Complex.valueOf((-1386.018), 0.0);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(3273.72475, 2006.3231);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.sinh();
      complex2.ONE.createComplex(3021.2, 852.83308);
      Complex complex3 = complex1.ZERO.pow((-1043.0));
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = Complex.valueOf(3273.72475);
      complex5.exp();
      Complex complex6 = complex1.reciprocal();
      complex6.asin();
      complex1.sin();
      Complex.valueOf(2006.3231);
      complex0.conjugate();
      complex4.acos();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex1.ONE.hashCode();
      complex1.I.exp();
      Complex complex2 = Complex.valueOf((-9.87));
      Complex complex3 = Complex.ONE;
      complex0.INF.abs();
      complex0.divide(complex1);
      Complex complex4 = Complex.ONE;
      complex4.I.exp();
      Complex complex5 = complex4.reciprocal();
      complex0.asin();
      Complex complex6 = complex5.NaN.sin();
      Object object0 = new Object();
      Complex complex7 = Complex.valueOf((-9.87), 0.0);
      complex0.equals(complex7);
      complex2.readResolve();
      complex7.getArgument();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.INF;
      complex3.multiply(complex4);
      complex4.sqrt();
      Object object0 = new Object();
      complex1.equals(complex4);
      complex2.readResolve();
      complex0.getArgument();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-1022.62579718));
      Complex complex1 = new Complex((-1022.62579718), (-2064.4789406));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.subtract((-2064.4789406));
      complex3.cos();
      complex2.ZERO.add(complex0);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.createComplex(4325.1, 994.959225549);
      complex2.pow((-1022.62579718));
      complex5.INF.sqrt();
      complex5.nthRoot(1);
      complex1.add((-3856.790204627));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(3273.72475, 2006.3231);
      Complex complex1 = complex0.asin();
      complex0.sinh();
      complex0.pow(2006.3231);
      Complex complex2 = new Complex((-1043.0));
      complex2.cos();
      Complex.valueOf(20.0);
      complex1.multiply(2176);
      Complex.valueOf((-1.5707963267948966));
      complex1.cosh();
      Complex complex3 = new Complex(0.0, 0.0);
      complex3.add((-34.21610401090702));
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(3273.72475, 2006.3231);
      Complex complex1 = complex0.asin();
      complex1.sinh();
      Complex complex2 = complex1.pow((-2230.55217489));
      complex2.cos();
      Complex.valueOf(0.41421356237309515);
      complex0.multiply(2176);
      Complex complex3 = Complex.valueOf((-1043.0));
      complex2.cosh();
      complex1.tan();
      Complex complex4 = Complex.I;
      complex4.add(0.17506598985571836);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2206.16892593);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.pow(0.0);
      complex3.tanh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.multiply(2206.16892593);
      Complex complex6 = complex1.sqrt();
      complex6.multiply(complex5);
      complex1.exp();
      complex1.getField();
      complex2.tanh();
      complex0.subtract(complex1);
      Complex complex7 = Complex.valueOf(0.0, 20.0);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1401.21);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.acos();
      complex1.INF.getField();
      complex1.conjugate();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex2.ZERO.subtract(1401.21);
      complex0.isInfinite();
      Complex complex6 = complex0.multiply((-719));
      complex3.INF.abs();
      Complex complex7 = complex6.NaN.multiply((double) (-719));
      complex0.exp();
      Complex complex8 = complex3.log();
      Complex complex9 = complex6.log();
      complex6.abs();
      complex4.pow(Double.POSITIVE_INFINITY);
      Complex complex10 = complex5.tanh();
      Complex complex11 = complex1.multiply((-1430.5773037266));
      Complex complex12 = complex7.sqrt();
      complex12.multiply(complex11);
      complex10.exp();
      complex9.getField();
      complex8.tanh();
      Complex complex13 = Complex.valueOf(1401.21, (-1.0000000196617822));
      complex5.subtract(complex13);
      Complex.valueOf(Double.POSITIVE_INFINITY, 1003.341627);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2206.16892593);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.conjugate();
      Object object0 = complex0.readResolve();
      complex0.I.pow((-3277.2042474299));
      complex2.equals(object0);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.add(4553.940911506369);
      complex0.isInfinite();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex1.INF.multiply(37);
      Complex complex5 = complex1.createComplex(4553.940911506369, 1.2038767337799072);
      complex5.atan();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex6.INF.multiply((-117));
      Complex complex9 = complex8.ZERO.pow(complex5);
      complex0.ZERO.abs();
      Complex complex10 = complex8.subtract(complex9);
      complex10.toString();
      Complex complex11 = complex8.ZERO.createComplex((-117), 1442.8207378);
      Complex complex12 = complex11.ONE.acos();
      complex12.I.multiply((-476));
      complex1.getImaginary();
      Complex complex13 = complex7.divide(complex3);
      Complex complex14 = complex13.INF.cos();
      complex14.I.hashCode();
      complex1.divide((-1256.9614));
      complex3.divide(1442.8207378);
      complex7.readResolve();
      complex12.pow((double) (-117));
      complex1.isNaN();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow(1.0696094577483825E-7);
      Complex complex2 = complex1.exp();
      complex2.ONE.divide(1.0696094577483825E-7);
      Complex complex3 = complex0.multiply((-2052.1));
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex3.INF.pow((double) 1);
      Complex complex7 = complex0.multiply(1);
      complex0.ONE.acos();
      Complex complex8 = complex4.cos();
      complex8.I.reciprocal();
      Complex complex9 = complex4.log();
      Complex complex10 = complex9.asin();
      complex4.isInfinite();
      complex10.log();
      complex7.atan();
      complex8.isNaN();
      complex5.getField();
      Complex complex11 = complex3.add(complex6);
      complex11.getArgument();
      complex1.subtract((-1873.6199462945738));
      Complex.valueOf(Double.NaN, (-2.5866883048437488E280));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.createComplex(Double.POSITIVE_INFINITY, 338.6);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-6805.95707289572));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.exp();
      complex4.NaN.abs();
      complex1.NaN.abs();
      Complex complex5 = complex1.add(complex0);
      complex2.NaN.cos();
      Complex complex6 = complex2.multiply((-6805.95707289572));
      Complex complex7 = complex2.divide(complex3);
      complex7.I.readResolve();
      complex7.INF.nthRoot(109);
      Complex complex8 = complex6.subtract(complex5);
      Complex complex9 = complex8.atan();
      complex8.multiply(1895);
      complex9.NaN.multiply(37);
      complex7.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(54);
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex1.I.subtract(complex2);
      Complex complex3 = complex0.subtract(69.301531653);
      Complex complex4 = complex3.I.createComplex(54, 286.0);
      Complex complex5 = complex4.I.multiply(complex1);
      complex5.I.multiply(286.0);
      complex3.getArgument();
      Complex complex6 = complex2.pow(1.0);
      complex0.pow(1.0);
      complex4.getImaginary();
      complex6.log();
      complex1.createComplex(580.16060656891, 580.16060656891);
      Complex complex7 = complex1.multiply((-330));
      Complex complex8 = Complex.valueOf(0.0);
      complex8.ZERO.getField();
      complex7.log();
      complex3.isInfinite();
      complex4.ONE.divide(286.0);
      Complex complex9 = complex3.subtract(0.0);
      complex9.multiply(complex1);
      Complex complex10 = complex3.pow(286.0);
      complex2.isNaN();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.exp();
      complex0.acos();
      Complex complex1 = complex0.ZERO.tan();
      complex0.getReal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.cos();
      complex3.INF.cos();
      complex0.hashCode();
      Complex complex4 = complex2.log();
      complex4.ZERO.hashCode();
      Complex.valueOf((-1505.27), 0.0);
      Complex complex5 = complex1.pow(complex2);
      try { 
        complex5.ZERO.nthRoot((-800));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -800
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-2014.66958551));
      Complex complex1 = complex0.add((-2014.66958551));
      complex0.hashCode();
      complex1.I.cosh();
      Complex complex2 = complex1.createComplex((-2014.66958551), (-2014.66958551));
      Complex complex3 = complex2.pow((-2014.66958551));
      complex3.NaN.toString();
      complex3.sin();
      complex1.conjugate();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-277.63925309), 0.07068414986133575);
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex1.pow(921.065543547382);
      complex4.INF.reciprocal();
      Complex complex5 = complex4.conjugate();
      complex5.ZERO.readResolve();
      complex5.getArgument();
      Complex.valueOf((-520.99791502), (-277.63925309));
      complex5.cos();
      complex4.I.pow(921.065543547382);
      Complex complex6 = complex0.createComplex(0.07068414986133575, 0.1873544454574585);
      Complex complex7 = complex2.multiply(0.07068414986133575);
      complex5.abs();
      complex7.multiply(1385.411639809);
      complex6.isInfinite();
      complex3.pow(complex4);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1401.21);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.acos();
      complex1.INF.getField();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex1.sinh();
      complex2.ZERO.subtract(1401.21);
      complex0.isInfinite();
      Complex complex6 = complex0.multiply((-719));
      complex3.INF.abs();
      complex6.NaN.multiply((double) (-719));
      Complex complex7 = complex2.exp();
      complex7.NaN.log();
      Complex complex8 = complex2.log();
      complex8.abs();
      Complex complex9 = complex3.pow(0.0);
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex10.I.multiply(Double.NaN);
      complex11.sqrt();
      complex7.multiply(complex3);
      Complex complex12 = complex3.exp();
      complex12.I.getField();
      complex4.tanh();
      complex11.subtract(complex5);
      Complex.valueOf((-868.7858402021642), (-56.0));
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2600.5442054967098);
      Complex complex1 = complex0.multiply(37);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(2600.5442054967098);
      Complex complex4 = complex2.divide(2600.5442054967098);
      Complex complex5 = complex3.pow((-2154.352887722));
      Complex complex6 = complex3.negate();
      Complex complex7 = complex2.add(Double.NaN);
      Complex complex8 = complex6.multiply((-360.1433339083106));
      Complex complex9 = complex5.asin();
      complex6.cosh();
      Complex complex10 = complex9.sin();
      complex8.ZERO.pow(complex7);
      complex3.atan();
      complex0.toString();
      Complex complex11 = complex1.cos();
      complex8.ONE.acos();
      complex11.INF.multiply((-2154.352887722));
      complex8.getImaginary();
      complex9.abs();
      complex2.negate();
      complex5.add(complex4);
      complex2.INF.pow((-2154.352887722));
      complex5.hashCode();
      complex4.sqrt1z();
      complex9.getArgument();
      Complex complex12 = complex10.tanh();
      Complex complex13 = complex12.cosh();
      complex13.ZERO.subtract((-2094.0));
      complex10.atan();
      complex5.sqrt();
      Complex.valueOf((double) 37, (-155.77290396));
      complex3.divide((-360.1433339083106));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      complex1.INF.pow(complex0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(1163.68234, 916.88);
      complex2.getArgument();
      complex2.toString();
      complex4.NaN.readResolve();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex2.multiply(224);
      Complex complex7 = complex6.ZERO.subtract(1.0106552237522032E228);
      complex7.NaN.abs();
      Complex complex8 = complex6.INF.cos();
      Complex complex9 = complex6.I.log();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex4.pow(complex2);
      complex3.log();
      complex5.toString();
      Complex complex10 = complex1.subtract(1163.68234);
      complex6.negate();
      Complex complex11 = complex8.sqrt();
      complex10.cos();
      complex11.negate();
      complex11.hashCode();
      complex9.tanh();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = new Complex(1679.980339147, 1205.77);
      Complex complex3 = complex0.subtract(complex2);
      complex2.cosh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.createComplex(1205.77, 1679.980339147);
      complex0.add(0.0);
      Complex complex6 = complex1.add(1679.980339147);
      Complex complex7 = complex2.cos();
      complex5.sqrt1z();
      complex2.cosh();
      Complex complex8 = complex7.log();
      Complex complex9 = complex8.I.multiply(1);
      Complex complex10 = complex3.acos();
      complex10.ONE.reciprocal();
      Complex complex11 = complex6.cosh();
      Complex complex12 = complex9.log();
      complex12.subtract(complex4);
      complex9.toString();
      complex11.getField();
      complex7.readResolve();
      complex6.divide(1679.980339147);
      complex11.add(complex4);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.add(Double.NaN);
      complex0.NaN.nthRoot(797);
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-936.0986580581), 3.9782728352520784E-85);
      complex0.getField();
      complex0.equals((Object) null);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = Complex.valueOf((-936.0986580581), 0.0);
      Complex complex5 = complex1.atan();
      complex4.atan();
      complex0.ZERO.readResolve();
      complex5.ONE.reciprocal();
      Complex complex6 = complex5.divide(complex3);
      Complex.valueOf(892.0767685799536, (-936.0986580581));
      complex6.NaN.sin();
      Complex complex7 = Complex.valueOf((-936.0986580581));
      Complex complex8 = complex7.ZERO.sinh();
      complex8.I.pow(complex0);
      complex1.NaN.abs();
      try { 
        complex2.nthRoot((-697));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -697
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(82.7914282727, 82.7914282727);
      complex1.INF.nthRoot(1108);
      complex0.hashCode();
      complex0.INF.abs();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.log();
      complex0.NaN.abs();
      complex3.I.log();
      complex0.NaN.sinh();
      complex0.I.subtract(complex2);
      complex5.getField();
      Complex complex6 = complex4.I.subtract(complex0);
      complex0.ZERO.acos();
      complex3.INF.add(82.7914282727);
      Complex complex7 = complex6.NaN.pow(82.7914282727);
      Complex complex8 = complex7.INF.add(82.7914282727);
      Complex complex9 = complex8.ZERO.subtract(Double.NaN);
      complex9.ZERO.readResolve();
      complex6.ONE.hashCode();
      complex0.tanh();
      Complex complex10 = complex4.add(complex7);
      Complex complex11 = complex3.multiply(Double.NaN);
      complex11.NaN.divide(complex6);
      Complex complex12 = complex4.sinh();
      Complex complex13 = complex12.multiply(0);
      complex13.ONE.sqrt();
      complex3.cos();
      complex11.cosh();
      Complex complex14 = complex10.sin();
      complex4.tanh();
      complex14.toString();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(0.0);
      complex1.ONE.multiply((-1.0));
      Complex complex2 = Complex.valueOf((-2373.1), (-2373.1));
      complex2.ONE.add(1604.8);
      complex1.INF.tan();
      Complex complex3 = complex1.ONE.asin();
      complex3.INF.log();
      complex0.hashCode();
      Complex complex4 = complex1.cos();
      complex4.I.getArgument();
      complex0.divide(1237.9169);
      complex3.multiply(1418);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.readResolve();
      Complex complex1 = complex0.ONE.add(0.0);
      complex1.negate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.valueOf(0.0);
      complex3.INF.sinh();
      complex3.NaN.toString();
      complex4.NaN.atan();
      complex4.I.pow(complex0);
      complex3.toString();
      complex4.multiply((-650));
      Complex complex5 = Complex.valueOf(1016.0359);
      complex2.equals(complex5);
      complex2.multiply(1016.0359);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex0.negate();
      complex2.I.add(complex0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.ZERO.divide(complex0);
      Complex complex5 = complex4.NaN.add(0.7853981633974483);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex0.subtract(complex7);
      complex8.hashCode();
      Complex complex9 = complex8.NaN.multiply(complex3);
      complex1.log();
      complex5.ZERO.getArgument();
      Complex complex10 = Complex.valueOf(0.7853981633974483, 1.0);
      complex10.ONE.add(complex8);
      Complex complex11 = complex5.ZERO.subtract(1.0);
      complex4.abs();
      Complex complex12 = complex4.negate();
      complex12.NaN.readResolve();
      Complex complex13 = Complex.valueOf(0.7853981633974483);
      Complex complex14 = complex5.pow(0.0);
      Complex complex15 = complex14.sqrt();
      complex15.ZERO.asin();
      complex13.isNaN();
      complex6.getField();
      complex14.conjugate();
      complex7.readResolve();
      complex5.sin();
      complex5.conjugate();
      complex2.sqrt();
      complex6.pow(complex11);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex0.negate();
      complex4.pow(complex3);
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.tanh();
      complex2.INF.subtract(673.56);
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.reciprocal();
      complex4.ZERO.exp();
      Complex complex5 = complex1.NaN.cos();
      complex3.ZERO.hashCode();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex6.I.negate();
      complex7.INF.add(0.0);
      Complex complex8 = complex3.ZERO.conjugate();
      complex8.I.negate();
      complex1.hashCode();
      Complex complex9 = complex3.conjugate();
      complex0.add(0.0);
      Complex complex10 = complex9.subtract(0.0);
      complex0.abs();
      Complex complex11 = complex1.log();
      complex0.sqrt();
      complex0.add(complex5);
      Complex.valueOf(0.0);
      complex2.getImaginary();
      Complex complex12 = complex11.pow(complex1);
      complex11.getField();
      complex12.subtract(0.0);
      complex8.sin();
      complex10.hashCode();
      complex4.add(0.0);
      complex11.cos();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex1.ONE.hashCode();
      complex1.I.exp();
      Complex complex2 = Complex.valueOf((-9.87));
      complex2.INF.divide((-9.87));
      complex0.INF.abs();
      complex0.divide(complex1);
      Complex complex3 = complex2.multiply(0.0);
      complex3.I.exp();
      Complex complex4 = complex3.reciprocal();
      complex0.asin();
      complex4.NaN.sin();
      Complex complex5 = Complex.valueOf(0.0);
      complex4.conjugate();
      complex4.acos();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.INF.sqrt1z();
      complex0.divide(complex1);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.subtract(0.0);
      complex4.INF.multiply((-868));
      complex3.ZERO.hashCode();
      complex0.hashCode();
      complex1.INF.getField();
      Complex complex5 = complex0.ZERO.exp();
      complex1.INF.subtract(complex5);
      Complex complex6 = complex0.multiply(1004);
      complex6.INF.subtract((-3093.5160126351575));
      Complex complex7 = complex1.multiply(1004);
      Complex complex8 = complex2.sqrt();
      complex7.subtract(0.0);
      complex5.negate();
      complex0.subtract(complex7);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1444.0454276);
      Complex complex2 = complex1.I.tan();
      complex2.ZERO.cos();
      Complex complex3 = complex0.ONE.pow(1444.0454276);
      complex3.ZERO.subtract(complex1);
      complex3.ZERO.divide(complex2);
      Complex complex4 = complex0.divide(0.0);
      complex4.I.divide(0.0);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex2.sinh();
      Complex.valueOf((-301.129711));
      complex6.subtract(0.0);
      complex5.divide((-383.6));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-3082.4), (-3082.4));
      complex0.INF.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.I.sqrt1z();
      complex3.ZERO.createComplex((-3082.4), 0.0);
      Complex complex4 = complex0.INF.multiply(complex2);
      complex4.NaN.tanh();
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex0.ZERO.sin();
      complex6.I.divide(complex5);
      complex6.NaN.multiply(0.0);
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      complex7.ZERO.sqrt1z();
      complex7.INF.readResolve();
      Complex complex8 = complex7.asin();
      complex8.atan();
      Complex complex9 = complex5.subtract(0.0);
      complex8.getField();
      complex9.cosh();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1505.65603600238);
      complex0.ONE.abs();
      Complex complex2 = complex1.NaN.negate();
      complex2.getField();
      Complex complex3 = complex0.NaN.add(complex1);
      complex0.getReal();
      Complex complex4 = complex0.add((-1528.6302116569));
      complex4.NaN.divide(1505.65603600238);
      complex0.INF.hashCode();
      Complex complex5 = complex1.ONE.exp();
      Complex complex6 = complex0.createComplex(0.0, 7.699097067385825E-248);
      Complex complex7 = complex0.multiply(complex4);
      complex2.sin();
      complex0.nthRoot(672);
      Complex complex8 = complex3.asin();
      complex7.negate();
      complex5.conjugate();
      complex6.tanh();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex9.NaN.divide(complex0);
      complex7.cosh();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.58), 0.0);
      Complex complex1 = complex0.reciprocal();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(1944);
      complex1.log();
      complex0.abs();
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.ZERO.pow(complex3);
      complex4.ONE.tan();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex2.divide(1.0);
      Complex complex7 = complex2.subtract(complex6);
      complex7.ZERO.subtract(1.0);
      complex7.ONE.conjugate();
      complex2.cosh();
      Complex.valueOf(1.0, 584.8833076770571);
      Object object0 = new Object();
      complex3.ONE.multiply(1);
      complex3.equals(object0);
      complex3.getReal();
      complex5.getReal();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex0.add(0.5403023058681398);
      complex9.NaN.sqrt1z();
      complex8.cosh();
      complex5.multiply(1944);
      complex8.createComplex(0.5403023058681398, 0.0);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf(0.0, 1532.03942768);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.NaN.pow(complex2);
      complex2.ONE.sqrt();
      complex4.INF.getField();
      complex0.cosh();
      complex4.isInfinite();
      complex3.INF.sinh();
      Complex complex5 = complex0.asin();
      complex0.acos();
      Complex complex6 = complex0.ZERO.multiply(complex3);
      complex6.sqrt();
      Object object0 = new Object();
      complex5.equals(object0);
      complex2.readResolve();
      complex6.getArgument();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex0.INF.add(0.0);
      complex1.I.cos();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(975.2807153093064, 975.2807153093064);
      complex0.readResolve();
      Complex complex1 = complex0.ONE.multiply(1143);
      Complex complex2 = Complex.valueOf(975.2807153093064);
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.NaN.divide(complex0);
      complex1.ZERO.subtract(complex3);
      complex3.INF.tan();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.atan();
      complex5.exp();
      complex1.pow((double) 1143);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(2058.410770456911);
      complex0.I.acos();
      complex0.INF.createComplex(0.0, 0.0);
      Complex complex1 = complex0.pow(3105.14082143);
      Complex complex2 = complex1.NaN.multiply((-1294));
      complex2.ZERO.createComplex(3105.14082143, 0.0);
      Complex complex3 = complex1.reciprocal();
      complex3.ZERO.asin();
      Complex complex4 = complex3.INF.multiply((-1294));
      complex4.ONE.getArgument();
      complex1.isNaN();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex2.conjugate();
      complex7.readResolve();
      Complex complex8 = complex6.divide(0.0);
      complex8.ONE.cosh();
      complex5.multiply((-1216));
      Complex complex9 = complex1.atan();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = 529;
      try { 
        complex0.nthRoot((-2393));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,393
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(484.0, 484.0);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = Complex.I;
      complex1.ZERO.pow(complex2);
      Complex complex3 = complex1.INF.subtract(484.0);
      complex3.NaN.cos();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.createComplex(484.0, 484.0);
      complex4.pow(484.0);
      complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(874.6684216, 874.6684216);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(3273.72475, 2006.3231);
      Complex complex1 = complex0.asin();
      complex0.ZERO.sinh();
      Complex complex2 = complex1.ZERO.pow((-1043.0));
      complex2.NaN.cos();
      Complex complex3 = Complex.valueOf(3273.72475);
      Complex complex4 = complex3.ZERO.multiply(2176);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.INF.cosh();
      complex5.NaN.tan();
      complex4.add(2006.3231);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1478.6);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.I.subtract(complex0);
      complex1.NaN.getArgument();
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex0.sinh();
      complex0.getField();
      complex1.I.getField();
      complex0.cosh();
      complex0.I.add(1478.6);
      Complex.valueOf(0.0);
      complex1.ONE.tan();
      Complex complex5 = complex0.reciprocal();
      complex5.tanh();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex2.sqrt1z();
      complex6.NaN.sqrt1z();
      complex3.INF.reciprocal();
      complex4.isNaN();
      complex2.sqrt1z();
      Complex complex8 = complex6.NaN.multiply(complex7);
      Complex complex9 = complex8.ZERO.conjugate();
      complex7.INF.sinh();
      Complex complex10 = complex6.negate();
      complex7.cos();
      complex10.ZERO.log();
      complex3.sqrt();
      complex8.ZERO.divide(747.0195064738);
      complex10.subtract(complex1);
      Complex.valueOf(2710.17469676);
      complex9.getField();
      complex4.getField();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex((-1036.2), (-1036.2));
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.INF.tanh();
      Complex complex5 = complex4.I.sinh();
      complex4.nthRoot(69);
      Complex complex6 = complex2.I.tanh();
      Complex complex7 = complex1.I.subtract(complex5);
      complex7.atan();
      Complex complex8 = complex6.I.multiply(1);
      Complex complex9 = complex3.sin();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex9.divide(complex8);
      complex12.INF.hashCode();
      Complex complex13 = complex12.ZERO.sqrt();
      complex13.ONE.sinh();
      Complex complex14 = complex11.createComplex((-1036.2), (-1036.2));
      Complex complex15 = complex11.NaN.conjugate();
      Complex complex16 = Complex.ONE;
      Complex complex17 = complex15.INF.subtract(complex16);
      complex17.I.sqrt1z();
      Complex complex18 = complex11.subtract(complex6);
      Complex complex19 = complex18.INF.pow(complex15);
      complex18.I.getArgument();
      Complex complex20 = complex14.multiply(complex9);
      Complex complex21 = complex20.ZERO.pow((-1036.2));
      complex11.sin();
      complex1.ZERO.atan();
      complex5.getField();
      Complex.valueOf(0.0);
      complex19.toString();
      complex21.isInfinite();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(1321);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.subtract(complex2);
      complex2.readResolve();
      complex1.readResolve();
      complex2.hashCode();
      complex4.getArgument();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex0.acos();
      complex8.getReal();
      complex4.readResolve();
      complex3.getArgument();
      complex5.nthRoot(1321);
      double double0 = complex5.getImaginary();
      assertEquals(7.879291341780022, double0, 0.01);
      
      Complex complex9 = complex1.multiply(complex2);
      complex9.INF.conjugate();
      complex9.INF.add(complex2);
      Complex complex10 = complex3.tan();
      complex10.INF.acos();
      assertTrue(complex10.equals((Object)complex7));
      
      complex3.hashCode();
      Complex complex11 = complex8.pow(Double.NaN);
      complex2.divide(Double.NaN);
      complex6.add((double) 1321);
      Complex complex12 = complex6.pow(0.0);
      complex11.cos();
      assertSame(complex11, complex4);
      
      Complex complex13 = complex12.subtract(complex3);
      Complex complex14 = complex3.log();
      assertTrue(complex14.isInfinite());
      
      Complex complex15 = new Complex(1321);
      complex9.add(complex15);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      complex13.createComplex((-1345.9), 1389.56351525175);
      assertTrue(complex2.equals((Object)complex11));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex1.I.add(complex0);
      complex1.getArgument();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex2.INF.add(0.0);
      complex0.cos();
      Complex complex8 = complex1.pow(complex3);
      Complex complex9 = complex8.NaN.subtract(complex6);
      Complex complex10 = complex9.ZERO.subtract(complex5);
      complex4.exp();
      Complex complex11 = complex6.multiply((-1662.4209296681695));
      assertNotSame(complex11, complex1);
      assertSame(complex11, complex3);
      assertSame(complex6, complex10);
      
      Complex complex12 = complex0.cos();
      assertNotSame(complex12, complex3);
      
      Complex complex13 = complex7.negate();
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getImaginary(), 0.01);
      assertTrue(complex13.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex7.equals((Object)complex8));
      assertTrue(complex7.equals((Object)complex4));
  }
}
