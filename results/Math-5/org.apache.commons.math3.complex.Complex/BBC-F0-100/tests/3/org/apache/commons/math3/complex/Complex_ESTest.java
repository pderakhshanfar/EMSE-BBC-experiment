/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:03:55 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(5.900089995748943E-29, 5.900089995748943E-29);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sqrt1z();
      complex0.acos();
      Complex complex3 = Complex.valueOf(2251.82850715, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ZERO;
      complex2.multiply(0.0);
      double double0 = 297.866628209;
      Complex.valueOf(297.866628209);
      Complex complex5 = new Complex(0.0);
      complex3.multiply(2826);
      complex0.cosh();
      complex0.log();
      complex3.asin();
      Complex complex6 = new Complex(2826);
      try { 
        complex3.nthRoot((-90));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -90
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-140.477), (-140.477));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.multiply(1210.10777685759);
      Complex complex5 = Complex.valueOf(1210.10777685759);
      Complex complex6 = new Complex(1210.10777685759);
      Complex.valueOf(1715.31814637);
      Complex complex7 = Complex.valueOf((double) (-793), (-140.477));
      complex7.multiply(445);
      complex4.cosh();
      complex1.log();
      Complex complex8 = complex3.asin();
      Complex complex9 = Complex.NaN;
      complex8.nthRoot(2141);
      complex4.subtract(958.525);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1259.73), (-1259.73));
      Complex complex2 = Complex.ONE;
      complex0.getField();
      Complex complex3 = complex1.add((-20.0));
      complex1.tanh();
      complex1.INF.asin();
      Complex complex4 = Complex.valueOf((-7.330635250808021E64), (-20.0));
      Complex complex5 = new Complex((-1259.73), 140.3);
      Complex complex6 = complex0.cosh();
      Complex.valueOf((-0.9999999999988193));
      complex3.pow(1.6804672426594344E14);
      Complex complex7 = complex6.multiply((-1622.6722424291117));
      Complex complex8 = new Complex((-20.0));
      Complex complex9 = complex5.multiply(1097);
      complex7.log();
      complex3.asin();
      complex9.add((double) 3772);
      complex7.atan();
      complex2.tan();
      complex4.tan();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.multiply((-4.0573420909530794E223));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 3058.2662);
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(1705.30965095444, 1705.30965095444);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.log();
      Complex.valueOf(3366.3628760722, 121.36386884550096);
      complex5.asin();
      Complex complex6 = complex4.add(complex3);
      Complex complex7 = complex4.multiply(complex2);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.tanh();
      Complex complex10 = Complex.ONE;
      complex7.exp();
      complex9.isNaN();
      complex8.cosh();
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex0.multiply((-38));
      complex1.readResolve();
      Complex complex11 = Complex.I;
      Complex complex12 = Complex.ONE;
      complex11.pow(complex12);
      complex5.log();
      complex6.sqrt();
      Complex complex13 = Complex.valueOf(1705.30965095444);
      complex13.add(complex0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.900089995748943E-29);
      Complex complex1 = new Complex(972.3956058076349, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex2.add(complex1);
      complex2.abs();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2721.43));
      complex0.ONE.log();
      complex0.nthRoot(145);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.multiply((-686));
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex4.NaN.subtract(complex0);
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex5.INF.tan();
      complex4.NaN.getArgument();
      Complex complex8 = complex2.exp();
      complex8.INF.subtract(complex6);
      Complex complex9 = complex1.tan();
      complex5.NaN.multiply((-686));
      Complex complex10 = complex9.acos();
      complex3.subtract(Double.NaN);
      complex10.I.asin();
      complex7.reciprocal();
      complex7.exp();
      complex6.negate();
      complex10.add(2968.53097);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.ZERO.log();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.I.exp();
      complex4.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.cos();
      complex5.sinh();
      complex2.I.readResolve();
      complex2.toString();
      Complex complex6 = complex0.pow(0.0);
      complex6.ZERO.sqrt1z();
      complex0.tanh();
      Complex complex7 = complex2.NaN.conjugate();
      complex7.ONE.sqrt();
      complex6.divide(complex0);
      complex2.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.divide(complex6);
      Complex complex9 = complex8.ONE.reciprocal();
      Complex complex10 = complex3.sqrt1z();
      complex6.exp();
      complex4.add(1.557407724654902);
      complex2.cosh();
      complex9.exp();
      complex10.createComplex(1.557407724654902, 0.0);
      complex2.conjugate();
      complex6.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.900089995748943E-29);
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex(0.02541583941806475, Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex2.multiply((-8.782320647977545E9));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = new Complex(20.0);
      complex2.hashCode();
      complex1.createComplex(20.0, 0.46363574266433716);
      complex1.log();
      complex2.log();
      Complex complex3 = new Complex(1935.8158204358124, 20.0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1518500250));
      Complex complex2 = Complex.ZERO;
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.multiply(complex1);
      Object object0 = new Object();
      complex1.equals(complex3);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.ONE.multiply(complex1);
      Complex complex2 = complex0.ZERO.log();
      complex2.I.getArgument();
      Complex complex3 = complex0.ZERO.cos();
      try { 
        complex3.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.6301699876785278, 0.6301699876785278);
      Complex complex2 = complex1.pow((double) 1366);
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.subtract(5.900089995748943E-29);
      complex4.log();
      Complex.valueOf(1.0);
      Complex complex5 = complex3.multiply(229);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.cos();
      Complex complex8 = Complex.INF;
      complex8.isNaN();
      Complex complex9 = complex2.sqrt1z();
      complex9.divide(complex0);
      complex1.getReal();
      complex4.equals("");
      Complex complex10 = new Complex(242.42, 667.7);
      complex7.cos();
      complex5.log();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.764191876212205E-9));
      Complex complex1 = complex0.I.acos();
      complex1.NaN.sqrt1z();
      Complex complex2 = complex1.cosh();
      complex2.INF.cosh();
      complex0.INF.readResolve();
      Complex complex3 = Complex.valueOf((-6.764191876212205E-9), 3162.0674482);
      complex0.equals((Object) null);
      Complex complex4 = complex0.add((-6.764191876212205E-9));
      complex4.hashCode();
      Complex complex5 = complex4.ZERO.add(3162.0674482);
      Complex complex6 = complex1.asin();
      complex4.INF.readResolve();
      Complex complex7 = complex6.ZERO.sqrt();
      complex1.getField();
      Complex complex8 = complex3.multiply(complex6);
      Complex complex9 = complex8.I.asin();
      Complex complex10 = new Complex(3162.0674482, 0.6301699876785278);
      complex10.pow((-1.77571291870694));
      complex5.equals(complex10);
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex6.INF.atan();
      Complex complex13 = complex0.sqrt1z();
      Complex complex14 = complex9.tanh();
      complex14.ONE.toString();
      Complex complex15 = complex7.createComplex(0.6301699876785278, 2246.56854800532);
      complex15.INF.divide(0.6301699876785278);
      complex11.multiply(complex4);
      complex13.abs();
      complex13.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.multiply(complex1);
      Object object0 = new Object();
      Complex complex4 = Complex.valueOf(Double.NaN);
      complex4.tan();
      complex3.pow((-242.0));
      Complex complex5 = Complex.valueOf(1.0);
      Complex complex6 = complex5.conjugate();
      complex2.subtract((-242.0));
      Complex complex7 = complex2.pow((-242.0));
      complex7.readResolve();
      complex5.divide(1.0);
      complex4.equals(complex6);
      complex0.sinh();
      complex3.sqrt();
      complex6.createComplex(1.0, (-242.0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.46363574266433716, 0.46363574266433716);
      complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.pow(0.46363574266433716);
      complex0.INF.nthRoot(1900);
      complex0.abs();
      complex1.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.divide(18.242);
      Complex complex5 = complex4.sqrt1z();
      complex5.ONE.getField();
      complex5.INF.acos();
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = complex3.subtract((-3770.4663294333827));
      complex7.INF.nthRoot(1900);
      complex7.equals(complex0);
      complex0.getField();
      complex2.toString();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex5.tan();
      complex6.pow((-242.0));
      complex8.conjugate();
      Complex complex10 = complex1.subtract(0.6556799552768279);
      complex10.pow(18.242);
      Object object0 = complex8.readResolve();
      ((Complex) object0).ZERO.divide(Double.POSITIVE_INFINITY);
      complex3.equals(object0);
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      complex2.NaN.getArgument();
      Complex complex3 = complex0.cos();
      complex3.NaN.abs();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.multiply(Double.NaN);
      complex6.cos();
      Complex complex7 = complex5.sqrt1z();
      complex7.getArgument();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide(19.520152661381136);
      complex0.getField();
      Complex complex2 = complex0.sqrt();
      complex1.NaN.getField();
      Complex complex3 = complex2.ONE.log();
      complex3.I.hashCode();
      Complex complex4 = complex0.NaN.add(19.520152661381136);
      complex4.NaN.createComplex(0.0, 5.900089995748943E-29);
      Complex complex5 = complex1.log();
      Complex complex6 = complex1.log();
      Complex.valueOf(5.900089995748943E-29);
      complex5.multiply(19.520152661381136);
      complex6.getField();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf(19.520152661381136, (-20.0));
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.7853981633974483, 2622.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.log();
      complex3.hashCode();
      Complex complex4 = complex3.cosh();
      complex3.atan();
      complex4.hashCode();
      complex0.getField();
      complex0.divide(1595.848502090782);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.atan();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.createComplex(1558.99466377, 1558.99466377);
      complex2.log();
      Complex complex3 = Complex.valueOf(20.0);
      complex3.subtract(20.0);
      Complex complex4 = complex1.log();
      Complex complex5 = Complex.valueOf((-2017.52919256), Double.NaN);
      complex4.tanh();
      Complex complex6 = Complex.ONE;
      complex5.isNaN();
      complex2.multiply(1558.99466377);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.atan();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.add(1558.99466377);
      complex2.pow(Double.NaN);
      complex0.ONE.exp();
      complex0.multiply(1105);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.NaN.getArgument();
      complex0.cos();
      Complex complex2 = complex1.add(Double.NaN);
      complex2.exp();
      Complex complex3 = Complex.I;
      complex3.multiply(531);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Object object0 = new Object();
      Complex complex1 = Complex.valueOf(1775.60748076, (-399.0));
      complex1.equals(object0);
      complex1.subtract((-362.32649973698));
      complex1.tan();
      Complex complex2 = complex1.sqrt1z();
      complex2.getArgument();
      complex0.add((-362.32649973698));
      Complex complex3 = Complex.valueOf(1.3130352854993315, 776.428);
      complex3.getField();
      Complex complex4 = Complex.ZERO;
      complex4.subtract(0.5156965255737305);
      Complex complex5 = Complex.INF;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex(1.7809526920318604, 613.0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.log();
      complex3.getArgument();
      complex4.cos();
      Complex complex5 = Complex.valueOf((-1.0), 1.7809526920318604);
      complex5.tan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.sin();
      complex7.multiply(1.7809526920318604);
      complex6.getArgument();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex1.subtract(2.0407987470746858E-8);
      complex9.getArgument();
      complex8.reciprocal();
      Complex complex10 = Complex.valueOf((-1.0), 613.0);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add(1393.12323758);
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = Complex.I;
      complex3.getArgument();
      complex2.add((-3294.063775412197));
      complex2.getField();
      Complex complex4 = Complex.valueOf(983.0, (-66.192463042));
      complex4.toString();
      Complex.valueOf((-3294.063775412197));
      Complex complex5 = new Complex(1.2075364784547675E-189);
      complex4.multiply(1393.12323758);
      Complex complex6 = complex2.divide(1.4142135623730951);
      complex2.pow(complex6);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      complex2.acos();
      Complex.valueOf(0.0, (-1343.6812826946023));
      Complex complex3 = Complex.NaN;
      complex1.multiply(complex3);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.log();
      complex3.NaN.getArgument();
      Complex complex4 = complex0.cos();
      complex4.ZERO.multiply(complex0);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex2.multiply((-1121.92686276));
      Complex complex8 = complex5.multiply(2094);
      complex3.getImaginary();
      complex0.multiply(0.0);
      complex0.add((-2756.2));
      complex6.INF.nthRoot(2094);
      Complex complex9 = new Complex((-1121.92686276), (-1.0));
      Complex complex10 = complex9.multiply(2094);
      complex6.cos();
      complex2.isNaN();
      complex8.getField();
      complex7.log();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.cosh();
      complex4.conjugate();
      complex2.getArgument();
      Complex complex5 = new Complex(0.3764009475708008);
      Complex complex6 = complex3.add(complex5);
      complex6.pow((-1703.4));
      complex6.getArgument();
      Complex complex7 = complex3.add((-1596.035310537));
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.ONE;
      complex5.getField();
      complex9.toString();
      Complex complex10 = Complex.valueOf((-1703.4), 2.042889468783187E13);
      complex7.tanh();
      Complex complex11 = Complex.ZERO;
      complex0.exp();
      complex5.isInfinite();
      complex10.cosh();
      Complex complex12 = Complex.NaN;
      complex12.multiply(2.373243808746338);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tanh();
      complex1.equals(complex2);
      Complex complex3 = complex2.subtract((-2128.7408));
      Complex complex4 = new Complex((-3.901826104778096E-9), 20.0);
      complex3.sqrt1z();
      complex0.getArgument();
      complex4.add((-3.901826104778096E-9));
      Complex.valueOf((-2.9020908354550263E-153), 5169.2864843587);
      Complex complex5 = complex0.tanh();
      complex5.toString();
      complex0.tanh();
      Complex complex6 = Complex.ZERO;
      complex1.log();
      Complex.valueOf(20.0);
      Complex complex7 = complex0.exp();
      Complex complex8 = Complex.INF;
      complex7.isNaN();
      Complex complex9 = Complex.valueOf(384.203278660016);
      complex9.cosh();
      complex0.multiply(232.31535564);
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.log();
      complex3.NaN.getArgument();
      complex0.cos();
      Complex complex4 = complex1.tan();
      complex4.sin();
      Complex complex5 = complex2.multiply((-1121.92686276));
      complex5.divide(Double.NaN);
      complex4.pow(complex5);
      complex1.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(588.66550482515, 588.66550482515);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex1.exp();
      complex3.I.readResolve();
      complex0.NaN.readResolve();
      Complex.valueOf((-3.395494928605007E-110));
      Complex complex4 = complex2.I.log();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.ONE.cosh();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex7.NaN.multiply(complex2);
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = complex6.add(630.232729642);
      complex10.I.sqrt1z();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex11.ZERO.sqrt();
      Complex complex13 = complex0.conjugate();
      complex13.acos();
      Complex.valueOf(588.66550482515, 630.232729642);
      complex10.cos();
      complex10.multiply(complex9);
      complex9.sinh();
      complex4.add(0.0);
      complex11.divide(complex12);
      complex0.pow(1944.6928533);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.createComplex(2125.99, 2125.99);
      complex3.INF.hashCode();
      complex3.I.hashCode();
      Complex complex4 = complex0.atan();
      complex0.getField();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex2.conjugate();
      complex5.cosh();
      complex2.getArgument();
      complex0.nthRoot(1);
      complex3.abs();
      complex6.getField();
      Complex.valueOf((-858.31526128905));
      complex5.multiply((-1.0));
      complex3.getArgument();
      complex6.sqrt1z();
      complex4.subtract(2404.9980015);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.multiply(complex1);
      Object object0 = new Object();
      complex0.equals(complex2);
      complex1.subtract(359.18);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex3.sqrt1z();
      complex3.getArgument();
      complex4.add((-5.551115123125783E-17));
      Complex complex6 = Complex.valueOf(0.3005385398864746, 20.0);
      Complex complex7 = complex6.tanh();
      complex5.getField();
      complex5.toString();
      complex2.tanh();
      Complex complex8 = Complex.ZERO;
      complex8.log();
      Complex complex9 = Complex.valueOf(0.0);
      complex9.exp();
      Complex complex10 = Complex.INF;
      complex10.isNaN();
      complex0.cosh();
      complex7.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.createComplex(2125.99, 2125.99);
      complex3.INF.hashCode();
      complex3.I.hashCode();
      complex0.getField();
      Complex complex4 = complex0.ZERO.exp();
      complex1.hashCode();
      complex4.add(0.0);
      Complex complex5 = Complex.valueOf(0.0, 2.0);
      Complex complex6 = complex5.createComplex(0.5708509459942182, (-984.0));
      Complex complex7 = complex2.log();
      Complex complex8 = Complex.valueOf(7.0542365522414836E-65);
      complex7.multiply((-2015));
      Complex complex9 = Complex.INF;
      complex9.isNaN();
      complex5.ONE.sin();
      Complex complex10 = complex6.sqrt1z();
      complex10.ONE.toString();
      complex2.divide(complex9);
      complex3.getReal();
      Object object0 = new Object();
      complex1.equals(object0);
      complex8.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(2125.99);
      complex2.abs();
      Complex complex3 = new Complex((-0.2658929196745585), (-26.833227982254158));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex4.conjugate();
      complex3.getArgument();
      Complex complex7 = complex4.add(complex5);
      Complex complex8 = complex6.pow(2.632077217102051);
      complex8.hashCode();
      complex4.cos();
      Complex complex9 = new Complex(0.0);
      Complex complex10 = complex9.conjugate();
      Complex.valueOf(1.3041809768060802E52, 0.0);
      complex8.getField();
      complex4.isNaN();
      Complex complex11 = complex0.pow(0.0);
      complex4.abs();
      complex3.nthRoot(1);
      Complex complex12 = complex7.sqrt1z();
      complex12.subtract(3.9831964792584227);
      complex10.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((-7.956144278281947E-8));
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.multiply(1);
      Complex complex5 = complex2.multiply((-1));
      Complex complex6 = complex2.sin();
      complex0.readResolve();
      complex4.divide(0.0);
      Complex complex7 = Complex.ZERO;
      complex0.sin();
      complex6.toString();
      Complex complex8 = complex5.asin();
      complex8.getField();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(2125.99);
      complex2.abs();
      Complex complex3 = new Complex((-0.2658929196745585), 0.3764009475708008);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.subtract((-0.2658929196745585));
      Complex complex7 = complex1.tan();
      complex4.sqrt1z();
      complex6.getArgument();
      complex0.add((-0.2658929196745585));
      Complex complex8 = complex5.tanh();
      complex8.getField();
      complex4.toString();
      Complex complex9 = Complex.I;
      complex9.tanh();
      complex2.log();
      complex4.exp();
      complex5.isNaN();
      complex9.cosh();
      complex7.multiply(2125.99);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(2125.99);
      complex2.abs();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex4.conjugate();
      complex3.getArgument();
      Complex complex7 = complex4.add(complex5);
      complex6.pow(2.632077217102051);
      complex0.getArgument();
      Complex complex8 = complex5.add(4519833.480099999);
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.ONE;
      complex10.getField();
      complex8.toString();
      Complex complex11 = Complex.valueOf((-20.0), 2125.99);
      Complex complex12 = complex11.tanh();
      Complex complex13 = Complex.ZERO;
      complex10.exp();
      complex12.isNaN();
      complex7.cosh();
      Complex complex14 = Complex.NaN;
      complex14.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = Complex.I;
      complex1.INF.sqrt();
      complex0.INF.multiply(complex2);
      Complex complex3 = complex1.subtract(359.18);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.I.sqrt1z();
      complex4.NaN.getArgument();
      Complex complex6 = new Complex(359.18, Double.NaN);
      complex4.ONE.tanh();
      complex4.getField();
      complex0.INF.toString();
      complex4.tanh();
      Complex complex7 = complex5.subtract((-614.0));
      complex6.divide(complex7);
      Complex complex8 = Complex.NaN;
      complex6.isNaN();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      complex1.abs();
      Complex complex2 = complex1.INF.cosh();
      complex2.NaN.getField();
      Complex complex3 = complex1.INF.divide(5.900089995748943E-29);
      complex0.I.toString();
      Complex complex4 = complex0.multiply((-1.0));
      complex4.sqrt();
      Complex complex5 = Complex.valueOf((-1.0));
      complex0.negate();
      Complex complex6 = complex0.createComplex(5.900089995748943E-29, (-1426.2239652356716));
      Complex complex7 = complex6.add(2004.0);
      complex7.NaN.divide(266.0);
      Object object0 = complex3.readResolve();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.tan();
      complex0.INF.getField();
      complex0.ONE.abs();
      complex0.nthRoot(1349);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.I.subtract(0.017241176557150458);
      Complex complex3 = complex2.ZERO.reciprocal();
      complex0.getField();
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.valueOf((-2846.80078162));
      Complex complex6 = Complex.valueOf(Double.NaN, 1.0);
      Complex complex7 = complex3.divide(complex6);
      Complex complex8 = complex5.negate();
      Complex complex9 = complex8.I.cosh();
      complex9.exp();
      complex9.NaN.multiply(1349);
      Complex.valueOf(34.394396515795066);
      Complex complex10 = Complex.valueOf(1.0, 0.3793581204459712);
      complex7.sinh();
      Complex complex11 = complex4.cosh();
      complex11.ONE.acos();
      Complex complex12 = complex9.atan();
      complex12.ONE.abs();
      complex1.tan();
      complex9.toString();
      Complex complex13 = complex8.pow(complex4);
      complex9.sqrt();
      Complex complex14 = complex13.divide(1.0);
      complex14.reciprocal();
      complex10.pow(1063.4569602233391);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(2125.99);
      complex2.abs();
      Complex complex3 = new Complex((-0.2658929196745585), 0.3764009475708008);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex4.conjugate();
      complex3.getArgument();
      Complex complex7 = complex4.add(complex5);
      Complex complex8 = complex6.pow(2.632077217102051);
      complex8.hashCode();
      complex4.cos();
      Complex complex9 = new Complex(0.0);
      complex9.conjugate();
      Complex.valueOf(1.3041809768060802E52, 0.0);
      complex8.getField();
      complex4.isNaN();
      complex0.pow(0.0);
      complex4.abs();
      complex3.nthRoot(1);
      Complex complex10 = complex7.sqrt1z();
      complex10.subtract(0.45457663886562577);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tanh();
      complex1.I.add(20.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.I.cosh();
      complex4.ONE.readResolve();
      Complex complex7 = complex3.sqrt1z();
      complex3.getField();
      complex3.cosh();
      Complex complex8 = complex3.tan();
      Complex complex9 = Complex.valueOf((-947.183));
      complex4.NaN.acos();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex10.subtract(complex9);
      complex7.log();
      complex10.I.pow(complex2);
      complex0.getArgument();
      complex11.NaN.conjugate();
      Complex complex12 = Complex.valueOf((-355.0));
      complex12.multiply((-2164));
      complex11.tanh();
      complex6.getField();
      Complex complex13 = complex4.multiply(1659);
      complex9.getImaginary();
      complex9.multiply((-355.0));
      Complex complex14 = complex12.add((double) 1659);
      complex14.multiply(1659);
      complex13.cos();
      complex13.add((-994.0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.multiply(489.0);
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex3.pow(0.0);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.exp();
      complex3.subtract(0.0);
      complex4.pow(complex6);
      complex3.cos();
      complex3.sinh();
      Complex complex8 = complex5.sinh();
      complex3.tan();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex2.log();
      complex7.sin();
      Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex10.pow(1.7647101734915075E47);
      complex10.isNaN();
      Complex complex12 = Complex.INF;
      complex12.subtract(0.0);
      Complex complex13 = complex9.divide(complex3);
      Complex complex14 = new Complex((-132.75), (-1386.73228));
      complex13.equals(complex11);
      complex8.hashCode();
      complex4.equals(", ");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.createComplex(2125.99, 2125.99);
      complex3.INF.hashCode();
      complex3.I.hashCode();
      Complex complex4 = complex0.atan();
      complex0.getField();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.pow(complex2);
      Complex complex8 = complex3.atan();
      complex3.sinh();
      complex8.atan();
      Complex complex9 = complex2.multiply(complex1);
      complex7.sinh();
      complex3.toString();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.asin();
      complex8.atan();
      complex1.isNaN();
      complex5.sinh();
      Complex complex12 = Complex.NaN;
      complex12.sinh();
      complex11.multiply(15341.052257149411);
      Complex complex13 = complex0.createComplex(15341.052257149411, 2.0);
      complex9.subtract(7.813044552050569E-215);
      complex12.multiply(0.659380316734314);
      complex13.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.createComplex(2125.99, 2125.99);
      complex2.INF.hashCode();
      complex2.I.hashCode();
      complex0.getField();
      Complex complex3 = complex0.ZERO.exp();
      complex1.pow(0.0);
      complex1.ZERO.exp();
      complex0.subtract(0.0);
      Complex complex4 = complex0.pow(complex0);
      Complex complex5 = complex4.I.cos();
      Complex complex6 = new Complex(2125.99, 2125.99);
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex3.ZERO.tan();
      complex8.NaN.exp();
      Complex complex9 = complex5.ZERO.log();
      complex1.ZERO.sin();
      Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex1.pow(1.7647101734915075E47);
      complex5.isNaN();
      Complex complex11 = complex3.subtract(1369.2925);
      complex9.I.divide(complex10);
      Complex complex12 = new Complex((-2.0821912536551675E-8), 2.0);
      complex9.equals(complex12);
      complex11.hashCode();
      complex7.equals("");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(2.40826416015625);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(1783.1172, 2.40826416015625);
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex1.sinh();
      complex3.toString();
      Complex complex6 = complex5.asin();
      complex6.atan();
      complex2.isNaN();
      Complex complex7 = new Complex(Double.NaN);
      complex7.sinh();
      complex4.sinh();
      complex0.multiply(1783.1172);
      complex2.createComplex(Double.NaN, 0.0);
      Complex complex8 = Complex.ZERO;
      complex8.subtract(1.6828820705413818);
      Complex complex9 = new Complex(0.06703783571720123);
      Complex complex10 = complex9.multiply(154.310483362473);
      complex10.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(182.2);
      Complex complex1 = new Complex((-1545.4));
      complex1.ONE.log();
      complex1.INF.exp();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex0.NaN.divide(complex1);
      Complex complex5 = Complex.NaN;
      complex4.ZERO.toString();
      complex0.multiply(complex5);
      Complex complex6 = complex0.multiply((-1545.4));
      Complex complex7 = new Complex((-1545.4));
      complex7.subtract((-1545.4));
      complex6.multiply((-1545.4));
      complex4.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.sqrt();
      complex0.INF.multiply(complex1);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex3 = complex0.subtract(359.18);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.divide(complex4);
      complex5.toString();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.acos();
      Complex complex8 = Complex.valueOf(359.18, (-1075.991));
      complex8.multiply(complex5);
      complex5.atan();
      complex7.tan();
      complex0.equals(complex3);
      complex0.add(359.18);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      complex1.I.abs();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = complex3.exp();
      Complex complex8 = complex2.subtract(0.0);
      complex0.ZERO.getArgument();
      Complex complex9 = Complex.NaN;
      complex7.ZERO.add(complex9);
      complex2.pow(complex3);
      complex6.cos();
      Complex complex10 = complex6.sinh();
      complex4.sinh();
      complex1.tan();
      complex5.exp();
      complex7.log();
      complex7.sin();
      Complex.valueOf(1.7647101734915075E47, 0.0);
      complex10.pow((-2637.46));
      complex2.isNaN();
      complex5.subtract(1.5707963267948966);
      Complex complex11 = complex10.divide(complex2);
      Complex complex12 = new Complex(1.5707963267948966, 1.5707963267948966);
      complex11.equals("");
      complex12.hashCode();
      complex10.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.createComplex(2125.99, 2125.99);
      complex3.INF.hashCode();
      complex3.I.hashCode();
      Complex complex4 = complex0.atan();
      complex0.getField();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex1.add(complex3);
      complex2.pow(0.0);
      complex5.hashCode();
      Complex complex7 = complex6.cos();
      complex3.conjugate();
      Complex.valueOf(1.3041809768060802E52, 1.3041809768060802E52);
      complex0.getField();
      complex3.isNaN();
      complex2.pow(3067880.4);
      complex1.abs();
      complex7.nthRoot(1);
      Complex complex8 = complex0.sqrt1z();
      complex2.subtract(2125.99);
      complex1.reciprocal();
      complex8.pow(2125.99);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex3.I.cosh();
      complex4.I.getArgument();
      complex0.nthRoot(1);
      complex2.abs();
      complex2.getField();
      Complex complex5 = Complex.valueOf((double) 1);
      complex3.abs();
      complex5.nthRoot(1);
      complex4.sqrt1z();
      Complex complex6 = Complex.valueOf(1648.8363, 1.0);
      Complex complex7 = complex6.subtract((double) 1);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tanh();
      complex1.I.add(20.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.I.cosh();
      complex4.ONE.readResolve();
      Complex complex7 = complex3.sqrt1z();
      complex3.getField();
      complex3.cosh();
      Complex complex8 = complex3.tan();
      Complex complex9 = Complex.valueOf((-947.183));
      complex4.NaN.acos();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex10.subtract(complex9);
      complex7.log();
      Complex complex12 = complex10.I.pow(complex2);
      complex0.getArgument();
      Complex complex13 = complex11.NaN.conjugate();
      Complex complex14 = Complex.valueOf((-355.0));
      Complex complex15 = complex14.multiply((-2164));
      Complex complex16 = complex11.tanh();
      complex6.getField();
      Complex complex17 = complex15.divide((double) (-2164));
      complex17.ZERO.add(0.0);
      complex10.pow(complex12);
      complex16.exp();
      complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-3982.7656));
      Complex complex1 = Complex.valueOf((-1182.9745116857357));
      Complex complex2 = complex1.ZERO.createComplex(0.0, (-1592.15826));
      Complex complex3 = complex0.conjugate();
      complex3.ZERO.pow((-3982.7656));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.INF.pow(complex3);
      Complex complex6 = complex4.pow((-99.6403571264433));
      Complex complex7 = complex4.NaN.acos();
      complex7.negate();
      Complex complex8 = complex6.add(complex2);
      complex2.acos();
      complex8.I.acos();
      Complex complex9 = complex5.add(1430.078);
      complex9.ONE.divide(0.0);
      complex2.isNaN();
      Complex complex10 = complex1.pow((-3982.7656));
      complex10.I.divide(0.0);
      Complex complex11 = complex5.multiply((-732.75370345872));
      complex1.readResolve();
      complex11.subtract(0.0);
      Complex complex12 = complex4.ONE.asin();
      complex12.NaN.multiply((-4167));
      Complex complex13 = new Complex(352.9670899259835, 0.0);
      complex4.subtract(complex13);
      Complex.valueOf(0.0, (-464.36128162));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(718.747877);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.add(486.1);
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.subtract(complex6);
      Complex complex8 = Complex.valueOf((-51.820690274499), 2.0);
      complex8.INF.atan();
      complex3.NaN.tan();
      Complex complex9 = complex2.reciprocal();
      complex9.NaN.atan();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.atan();
      complex8.nthRoot(17);
      complex2.getReal();
      Complex.valueOf(486.1, 0.0);
      Complex.valueOf(0.0);
      complex11.subtract(complex8);
      Complex.valueOf(2.0, 0.0);
      complex7.multiply(486.1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3201.2117846);
      complex0.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.subtract((-1581.7404264795912));
      Complex complex4 = complex0.ONE.pow(complex3);
      complex4.subtract(complex2);
      Complex complex5 = Complex.valueOf(0.0, (-7.330635250808021E64));
      Complex complex6 = complex0.acos();
      complex1.hashCode();
      complex0.ONE.negate();
      Complex complex7 = complex6.createComplex((-1581.7404264795912), Double.POSITIVE_INFINITY);
      complex0.getField();
      complex0.isNaN();
      complex3.toString();
      complex1.abs();
      complex1.ZERO.sin();
      Complex complex8 = complex7.sqrt1z();
      complex0.I.multiply(complex2);
      complex8.ONE.tan();
      complex7.add(3201.2117846);
      complex5.asin();
      Complex.valueOf(2641.7959669);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.isNaN();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.multiply((-2608.0));
      complex2.NaN.multiply((-614));
      Complex complex3 = complex1.createComplex(0.0, 2547.33199497);
      Complex complex4 = complex3.I.add(complex2);
      complex1.INF.conjugate();
      Complex complex5 = complex2.add((-2728.6));
      complex5.INF.getArgument();
      complex2.asin();
      complex1.nthRoot(65);
      Complex complex6 = Complex.ZERO;
      complex0.getArgument();
      Complex complex7 = complex2.subtract(complex6);
      complex7.ONE.sqrt();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex0.add(complex4);
      complex9.pow(complex8);
      complex7.sin();
      complex0.multiply(1.2167807682331913E-308);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(2.707178052117959E195, 2.707178052117959E195);
      complex0.INF.readResolve();
      Complex complex1 = complex0.I.add(2.707178052117959E195);
      complex0.readResolve();
      complex1.NaN.acos();
      Complex complex2 = complex1.multiply((-2502));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex3.divide(0.0);
      complex4.multiply((-2202));
      complex3.INF.divide(0.0);
      complex1.getReal();
      Complex complex6 = Complex.valueOf((double) (-2502), 3.5471180281159325E-219);
      complex2.hashCode();
      Complex complex7 = complex6.cosh();
      complex2.abs();
      complex7.tanh();
      Complex.valueOf((double) (-2502));
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(182.2);
      Complex complex1 = new Complex((-1545.4));
      complex1.ONE.log();
      complex1.INF.exp();
      Complex complex2 = Complex.NaN;
      complex1.ONE.subtract(complex2);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = Complex.NaN;
      complex3.ZERO.toString();
      complex4.ZERO.acos();
      complex0.multiply(complex4);
      Complex complex5 = complex0.atan();
      complex5.tan();
      complex2.equals(complex5);
      complex3.add(182.2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-579.7110349517216), (-579.7110349517216));
      Complex complex1 = new Complex((-1033.3298557), (-1033.3298557));
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.I.multiply(complex1);
      Complex complex3 = complex1.I.pow(complex0);
      complex0.multiply((-2635));
      complex1.getImaginary();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex6.ONE.conjugate();
      complex6.ONE.multiply((double) (-2635));
      Complex complex8 = complex0.pow(complex3);
      complex8.sin();
      complex8.getImaginary();
      complex4.sin();
      complex1.multiply(407);
      try { 
        complex7.nthRoot((-2635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,635
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3277.65, 468.0);
      Complex complex2 = complex1.I.sqrt();
      complex0.readResolve();
      Complex complex3 = complex0.acos();
      Complex.valueOf((-1470.5));
      complex3.cos();
      complex1.acos();
      complex0.reciprocal();
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(1.0177335739135742);
      Complex complex1 = Complex.valueOf(1.0177335739135742);
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.pow(1.0177335739135742);
      Complex complex3 = Complex.valueOf((-669.578768385), (-669.578768385));
      complex3.ONE.conjugate();
      complex3.hashCode();
      Complex complex4 = complex3.cosh();
      complex4.divide(complex3);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.log();
      complex3.NaN.getArgument();
      complex0.cos();
      Complex complex4 = complex1.tan();
      complex4.sin();
      Complex complex5 = complex2.multiply((-1121.92686276));
      complex5.divide(Double.NaN);
      complex4.pow(complex5);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.subtract(276.1298222);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.exp();
      complex3.I.conjugate();
      complex2.INF.acos();
      complex1.ZERO.toString();
      Complex complex4 = complex0.divide((-1237.9));
      Complex complex5 = complex4.I.pow(complex0);
      Complex complex6 = complex5.multiply(1516);
      complex6.I.subtract(complex3);
      complex5.INF.multiply((-1193.774383996287));
      Complex.valueOf((-1193.774383996287));
      Complex complex7 = complex5.INF.pow(complex0);
      Complex complex8 = complex7.negate();
      complex8.NaN.exp();
      Complex complex9 = complex4.sinh();
      complex9.I.toString();
      complex4.getField();
      complex0.createComplex((-3.5392250480081715E-9), 276.1298222);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex3.I.cosh();
      complex4.I.getArgument();
      complex0.nthRoot(1);
      complex2.abs();
      complex2.getField();
      Complex complex5 = Complex.valueOf((double) 1);
      Complex complex6 = complex4.multiply((double) 1);
      complex5.getArgument();
      complex6.getField();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.createComplex(2350.0, 6.283185307179586);
      complex3.ZERO.divide(complex2);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.asin();
      complex1.toString();
      Complex complex6 = complex4.pow(2350.0);
      complex6.NaN.divide(complex0);
      Complex complex7 = complex6.ZERO.sqrt1z();
      complex5.abs();
      complex5.getReal();
      Complex complex8 = complex3.ZERO.acos();
      Complex complex9 = complex8.INF.createComplex(0.0, 0.0);
      Complex complex10 = complex3.add(3295.789877);
      complex10.conjugate();
      complex1.sin();
      complex7.pow((-4040.10301316));
      Complex complex11 = Complex.ONE;
      complex0.add(complex11);
      complex4.ONE.tan();
      complex7.tanh();
      Complex complex12 = complex4.cos();
      complex12.I.sqrt();
      complex9.cos();
      complex9.atan();
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.createComplex(114.6426, 2880.8679);
      complex1.ZERO.conjugate();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.NaN.createComplex((-1070.1209852), 0.0);
      complex3.nthRoot(4464);
      complex3.ONE.hashCode();
      Complex complex4 = complex2.NaN.pow(2880.8679);
      Complex complex5 = complex0.INF.negate();
      Complex complex6 = complex0.sqrt1z();
      complex6.multiply(complex0);
      complex5.getField();
      Complex complex7 = complex0.log();
      Complex complex8 = complex0.NaN.atan();
      complex8.ONE.multiply(0.0);
      complex8.ZERO.atan();
      Complex complex9 = complex7.divide(0.0);
      Complex complex10 = complex9.cos();
      Complex complex11 = complex2.conjugate();
      complex11.cos();
      complex4.abs();
      complex10.multiply((-213.6911304283888));
      complex5.getImaginary();
      Complex complex12 = complex6.sin();
      complex12.NaN.hashCode();
      complex1.conjugate();
      complex12.tan();
      Complex.valueOf(0.0, 114.6426);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.ONE.pow(0.0);
      Complex complex3 = complex0.NaN.multiply(0.0);
      complex3.reciprocal();
      complex0.abs();
      try { 
        complex1.nthRoot((-2617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,617
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.ZERO.multiply(2.0);
      complex0.readResolve();
      Complex complex4 = complex2.add(complex3);
      complex4.sqrt();
      complex2.ZERO.toString();
      Complex complex5 = complex1.exp();
      complex5.INF.reciprocal();
      complex2.getImaginary();
      Complex.valueOf((-1.166799420361101E-7), 138.6167374482);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.createComplex(2125.99, 2125.99);
      complex3.INF.hashCode();
      complex3.I.hashCode();
      Complex complex4 = complex0.atan();
      complex0.getField();
      Complex complex5 = complex4.ZERO.exp();
      complex4.pow(0.0);
      complex1.ZERO.exp();
      complex0.subtract(0.0);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = complex5.ZERO.tan();
      complex10.NaN.exp();
      Complex complex11 = complex7.ZERO.log();
      complex4.ZERO.sin();
      Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex4.pow(1.7647101734915075E47);
      complex7.isNaN();
      Complex complex13 = complex5.subtract(1369.2925);
      complex11.I.divide(complex12);
      Complex complex14 = new Complex((-2.0821912536551675E-8), 2.0);
      complex11.equals(complex14);
      complex13.hashCode();
      complex9.equals("");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1607.6390981605855);
      complex0.ONE.acos();
      Complex.valueOf(1607.6390981605855, 0.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.log();
      complex2.NaN.createComplex(0.0, 0.0);
      complex0.pow(complex1);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(7);
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex2.sinh();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.NaN.tan();
      complex4.NaN.readResolve();
      complex3.ONE.log();
      complex0.INF.negate();
      Complex complex6 = complex4.ONE.exp();
      complex6.NaN.negate();
      complex1.ZERO.asin();
      Complex complex7 = complex1.sinh();
      complex3.ZERO.getArgument();
      Complex complex8 = complex7.ONE.createComplex(7, 7);
      complex3.I.createComplex((-854.682798512013), 0.0);
      complex1.cosh();
      complex8.I.exp();
      complex3.NaN.acos();
      Complex complex9 = complex8.sqrt();
      complex3.divide((double) 7);
      Complex.valueOf(0.0, 2790.865196);
      complex5.equals(complex3);
      complex9.sinh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 6.283185307179586);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex0.ZERO.negate();
      int int0 = 0;
      Complex complex3 = complex1.NaN.tanh();
      complex3.I.reciprocal();
      try { 
        complex2.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.I.sinh();
      complex0.NaN.divide(complex1);
      Complex complex2 = complex0.I.tan();
      complex0.negate();
      complex0.createComplex(0.0, 0.0);
      complex2.tan();
      complex0.hashCode();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.tan();
      complex2.ZERO.getField();
      complex1.ONE.add(0.0);
      complex1.INF.subtract(0.0);
      Complex complex4 = complex0.divide(complex1);
      complex4.ONE.multiply(0.0);
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex3.conjugate();
      complex6.INF.hashCode();
      complex0.tanh();
      Complex complex7 = complex5.tanh();
      complex7.ZERO.toString();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.INF.asin();
      complex0.equals((Object) null);
      complex0.isInfinite();
      complex2.isNaN();
      complex2.sin();
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2960.57588448923), (-2960.57588448923));
      Complex complex1 = Complex.valueOf((-2960.57588448923));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.pow(complex0);
      complex0.readResolve();
      complex0.getField();
      Complex complex4 = complex1.I.pow((-2960.57588448923));
      Complex complex5 = complex4.INF.divide((-2960.57588448923));
      complex1.ZERO.log();
      Complex complex6 = Complex.NaN;
      complex5.NaN.multiply(complex6);
      complex5.INF.pow(complex1);
      complex4.INF.toString();
      complex2.isInfinite();
      complex1.nthRoot(222);
      complex3.exp();
      Complex complex7 = complex3.multiply((-937.66511082));
      complex1.getReal();
      Complex complex8 = complex7.log();
      complex8.NaN.abs();
      complex8.ZERO.subtract((-2960.57588448923));
      complex8.getArgument();
      complex8.getArgument();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(437.971778);
      complex0.ONE.sqrt();
      complex1.I.getField();
      try { 
        complex1.nthRoot((-621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -621
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(489.0);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex2.I.log();
      complex4.NaN.pow(complex2);
      complex4.atan();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.INF.atan();
      Complex complex7 = complex6.I.multiply(complex1);
      Complex complex8 = complex5.sinh();
      complex8.toString();
      Complex complex9 = complex0.asin();
      complex3.atan();
      complex9.isNaN();
      complex9.sinh();
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex9.multiply(0.0);
      complex11.ZERO.createComplex(0.0, 7.813044552050569E-215);
      complex7.subtract(0.06703783571720123);
      complex0.multiply(0.06703783571720123);
      complex10.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      double double0 = (-792.475005);
      complex0.NaN.log();
      Complex complex1 = complex0.add((-792.475005));
      Complex complex2 = complex1.negate();
      complex2.toString();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.NaN.atan();
      complex4.ZERO.exp();
      complex4.ZERO.add(complex1);
      Complex complex5 = complex1.negate();
      complex5.ONE.readResolve();
      int int0 = (-4458);
      Complex complex6 = complex2.I.subtract((double) (-4458));
      complex6.ZERO.divide(complex1);
      try { 
        complex5.I.nthRoot((-4458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,458
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = complex2.asin();
      complex2.divide(complex5);
      complex5.getArgument();
      Complex complex6 = complex3.ZERO.cosh();
      Complex complex7 = complex3.log();
      Complex complex8 = complex3.ONE.createComplex(0.0, Double.NaN);
      complex7.I.createComplex(0.0, 0.0);
      Complex complex9 = complex0.INF.sqrt1z();
      complex8.ZERO.nthRoot(7);
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex10.cosh();
      complex3.isInfinite();
      complex10.divide(0.0);
      complex2.getArgument();
      complex0.NaN.getField();
      complex11.abs();
      Complex complex13 = complex5.divide((-2073.19247));
      complex13.NaN.subtract((-1777.4618110038));
      complex12.cos();
      complex5.toString();
      complex4.add(82.35726);
      complex1.sqrt1z();
      complex6.asin();
      complex9.getReal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      complex1.I.abs();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.getArgument();
      Complex complex5 = complex3.I.add(complex0);
      complex3.ZERO.pow(0.0);
      complex0.hashCode();
      Complex complex6 = complex2.NaN.cos();
      complex6.NaN.conjugate();
      Complex.valueOf(1.3041809768060802E52, 0.0);
      complex0.getField();
      complex0.isNaN();
      Complex complex7 = complex2.pow(1209.8659);
      complex0.abs();
      complex5.nthRoot(1);
      complex7.NaN.sqrt1z();
      complex7.subtract(0.0);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1967.3);
      Complex complex1 = complex0.ZERO.pow((-2242.018740761846));
      complex1.ONE.createComplex(3678.687, (-2742.112459709));
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.divide((-1.0143341551207646E-7));
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.I.sqrt();
      complex1.getField();
      Complex complex6 = complex0.exp();
      complex6.ONE.createComplex(3689.408, Double.NaN);
      complex6.ZERO.sinh();
      complex6.add((-2242.018740761846));
      Complex complex7 = complex3.sinh();
      complex6.getImaginary();
      complex2.conjugate();
      complex7.subtract(20.0);
      complex5.isInfinite();
      Complex complex8 = complex2.multiply(complex6);
      Complex complex9 = complex6.multiply(1537.1516378682627);
      complex8.multiply(4342);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add(1393.12323758);
      complex1.NaN.subtract(complex0);
      complex1.NaN.divide(complex0);
      Complex complex2 = complex0.multiply(2756);
      Complex complex3 = complex0.multiply(complex2);
      complex3.multiply(2756);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.multiply(complex1);
      int int0 = 2174;
      Complex complex3 = complex2.I.multiply(2174);
      complex3.INF.subtract(complex2);
      Complex.valueOf(1.9579050540924072);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-2289.59182));
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tanh();
      complex1.I.add(20.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.I.cosh();
      complex4.ONE.readResolve();
      Complex complex7 = complex3.sqrt1z();
      complex3.getField();
      complex3.cosh();
      Complex complex8 = complex3.tan();
      Complex complex9 = Complex.valueOf((-947.183));
      complex4.NaN.acos();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex10.subtract(complex9);
      complex7.log();
      complex10.I.pow(complex2);
      complex0.getArgument();
      complex11.NaN.conjugate();
      Complex complex12 = Complex.valueOf((-355.0));
      complex12.multiply((-2164));
      complex11.tanh();
      complex6.getField();
      Complex complex13 = complex4.multiply(1659);
      complex9.getImaginary();
      complex9.multiply((-355.0));
      Complex complex14 = complex12.add((double) 1659);
      complex14.multiply(1659);
      complex13.cos();
      complex10.isNaN();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex1.INF.toString();
      complex1.ZERO.atan();
      complex0.INF.tan();
      complex1.NaN.sin();
      complex1.ONE.acos();
      int int0 = (-1);
      Complex complex2 = complex1.I.negate();
      complex2.ZERO.reciprocal();
      try { 
        complex1.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = complex3.exp();
      complex3.multiply(1);
      complex1.multiply(17);
      Complex complex5 = complex2.sin();
      complex5.ZERO.readResolve();
      complex2.I.divide((-1310.69));
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = complex6.sin();
      complex6.toString();
      complex3.asin();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex1.NaN.add(14.36444414);
      complex2.I.createComplex((-609.7864952), 1303.5687771377);
      complex2.NaN.conjugate();
      complex1.divide(complex2);
      int int0 = 5132;
      // Undeclared exception!
      complex2.nthRoot(5132);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(6.283185307179586, complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex((-3109.676302136227), (-4547.24438));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf((-4547.24438), 0.0);
      Complex complex4 = complex0.ZERO.sqrt1z();
      assertEquals(1.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.ZERO.sinh();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.001619233094513, complex5.getReal(), 0.01);
      assertEquals(6.304998463846928E-4, complex5.getImaginary(), 0.01);
      
      Complex complex7 = complex0.cosh();
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex3.negate();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex0.cos();
      assertEquals(Double.POSITIVE_INFINITY, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex1.exp();
      assertEquals(1.027513646534663, complex10.getImaginary(), 0.01);
      assertEquals((-8.703160160173613), complex10.getReal(), 0.01);
  }
}
