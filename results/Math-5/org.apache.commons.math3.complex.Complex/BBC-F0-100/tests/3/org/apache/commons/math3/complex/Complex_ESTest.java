/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:21:54 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(2774.6544890528, 1.7400655988987023E39);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0);
      complex0.getArgument();
      complex1.tanh();
      Complex complex2 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.NaN.hashCode();
      Complex complex3 = complex1.ZERO.divide(1.0);
      Complex complex4 = complex3.add(1996.29886876685);
      Complex complex5 = complex0.divide(complex1);
      complex5.sin();
      complex4.ONE.readResolve();
      complex5.ZERO.getField();
      complex0.abs();
      complex4.INF.divide(1.0);
      Complex complex6 = complex2.ONE.cosh();
      complex6.ZERO.abs();
      complex5.pow(1.0);
      complex4.divide(1.9219478787856753E-98);
      Complex complex7 = complex5.ONE.pow(complex0);
      complex7.NaN.getField();
      Complex.valueOf((-348.61));
      complex7.NaN.atan();
      complex5.pow(1.4217997464522202E-8);
      Complex complex8 = complex3.sqrt1z();
      complex8.sqrt1z();
      complex0.multiply(complex3);
      complex8.sqrt1z();
      Complex complex9 = complex2.tanh();
      Complex.valueOf(1.0);
      try { 
        complex9.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.NaN.reciprocal();
      complex1.tanh();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.1170298734336303E-169, (-20.0));
      complex0.getField();
      Complex complex1 = complex0.reciprocal();
      complex1.sinh();
      Complex complex2 = complex1.atan();
      complex2.createComplex((-587.4469519614903), (-20.0));
      Complex complex3 = complex2.tanh();
      complex1.getField();
      Complex complex4 = complex1.sin();
      complex4.cos();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex2.subtract(1367.948);
      complex3.divide(3.1170298734336303E-169);
      complex4.add(complex2);
      complex2.conjugate();
      Complex complex7 = complex6.createComplex(Double.NaN, Double.NaN);
      complex7.add((-1056.852887274607));
      complex0.tan();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sqrt();
      complex2.I.hashCode();
      Complex complex3 = complex2.NaN.createComplex(0.0, 5.900089995748943E-29);
      Complex complex4 = new Complex(Double.NaN, (-3620.5702));
      Complex complex5 = complex4.subtract(5.900089995748943E-29);
      complex0.divide(0.5027855634689331);
      complex4.add(complex3);
      complex5.conjugate();
      complex5.createComplex(718.747877, 2.414213562373095);
      complex3.add(947.8250926159343);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2008.375663));
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.INF.multiply(3924);
      Complex complex2 = complex0.cosh();
      complex2.add(complex0);
      complex2.createComplex((-125.6423375293669), 6.283185307179586);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.sqrt();
      complex1.nthRoot(469);
      complex4.nthRoot(469);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getArgument();
      Complex complex1 = Complex.valueOf((-2430.0));
      complex1.INF.getArgument();
      complex1.I.exp();
      Complex complex2 = complex0.multiply((-2030));
      complex2.ONE.hashCode();
      Complex complex3 = Complex.valueOf((double) (-2030), 3.8656278695544835E114);
      complex3.INF.sqrt();
      Complex complex4 = Complex.valueOf(1934.85436533);
      complex4.ONE.exp();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.reciprocal();
      complex6.log();
      Complex complex9 = complex6.divide(complex8);
      complex9.INF.subtract(0.7853981633974483);
      Complex complex10 = complex8.tan();
      complex10.ONE.hashCode();
      Complex complex11 = complex6.sqrt();
      complex1.exp();
      complex11.multiply((-2030));
      try { 
        complex10.nthRoot((-2030));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,030
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2185.44), (-2185.44));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.multiply(3174);
      Complex complex3 = complex1.INF.log();
      complex1.I.add((-2185.44));
      Complex complex4 = complex0.ONE.subtract(complex2);
      Complex complex5 = complex1.tan();
      complex5.ONE.negate();
      complex0.nthRoot(1183);
      complex3.nthRoot(3174);
      complex0.exp();
      Complex complex6 = complex2.sin();
      complex0.conjugate();
      complex0.readResolve();
      complex3.divide(complex6);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(2320.4267405, (-1.6166170913368169E-12));
      Complex complex1 = complex0.INF.createComplex((-1.6166170913368169E-12), (-4.9783378));
      Complex complex2 = complex1.NaN.conjugate();
      complex2.NaN.acos();
      Complex complex3 = complex2.I.negate();
      complex2.subtract((-1756.74));
      Complex complex4 = complex0.multiply(947.183);
      complex0.sinh();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.pow(4.727128055788);
      complex3.toString();
      complex6.multiply(complex0);
      complex1.reciprocal();
      complex3.readResolve();
      complex0.multiply(2286);
      complex0.multiply(complex4);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2286);
      complex0.tan();
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex0.getArgument();
      Complex complex2 = Complex.I;
      complex1.equals(complex2);
      complex2.tanh();
      complex1.subtract(complex0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(20.09237417094272);
      Complex complex1 = complex0.multiply(20.09237417094272);
      complex1.I.abs();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = Complex.ONE;
      complex3.I.getArgument();
      Complex complex4 = complex2.I.add(complex0);
      complex3.readResolve();
      complex4.equals(complex0);
      complex4.tanh();
      Complex.valueOf(1.0, 2.0);
      complex4.nthRoot(2272);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.sqrt();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.multiply(0.0);
      complex0.abs();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.conjugate();
      complex2.add(complex3);
      complex0.pow(0.0);
      complex4.hashCode();
      Complex complex5 = Complex.valueOf((-20.0));
      complex5.conjugate();
      complex4.readResolve();
      complex1.getArgument();
      Complex complex6 = Complex.ZERO;
      Object object0 = complex4.readResolve();
      complex6.equals(object0);
      Complex complex7 = complex5.tanh();
      complex7.subtract(complex6);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      complex1.multiply(1532);
      Complex complex2 = Complex.valueOf((-961.3148501), Double.NaN);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(2.1193481207950316E175);
      complex0.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.conjugate();
      complex2.getArgument();
      complex3.add(complex1);
      Complex complex4 = complex1.pow(Double.NaN);
      complex1.hashCode();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.conjugate();
      complex4.readResolve();
      Complex complex7 = complex1.asin();
      complex7.getArgument();
      Object object0 = complex6.readResolve();
      complex2.equals(object0);
      Complex complex8 = Complex.INF;
      complex4.subtract(complex8);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.createComplex(2125.99, 2125.99);
      complex3.I.hashCode();
      Complex complex4 = complex0.atan();
      complex0.getField();
      Complex complex5 = complex4.ZERO.exp();
      complex4.pow(0.0);
      complex1.ZERO.exp();
      complex0.subtract(0.0);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex2.sinh();
      complex8.ONE.sinh();
      Complex complex9 = complex5.ZERO.tan();
      complex9.NaN.exp();
      Complex complex10 = complex7.ZERO.log();
      complex4.ZERO.sin();
      Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex4.pow(1.7647101734915075E47);
      complex7.isNaN();
      complex5.subtract(1369.2925);
      complex1.divide(complex2);
      Complex complex12 = new Complex((-2.0821912536551675E-8), 2.0);
      complex10.equals(complex12);
      complex11.cosh();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(0.04953393340110779);
      Complex complex2 = Complex.valueOf(0.04953393340110779, 0.04953393340110779);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.cos();
      complex1.negate();
      Complex complex5 = complex4.reciprocal();
      complex3.getField();
      Complex complex6 = complex2.tanh();
      complex5.hashCode();
      Complex complex7 = Complex.NaN;
      complex7.conjugate();
      complex0.subtract(complex6);
      complex5.subtract(Double.NaN);
      Complex complex8 = complex7.tanh();
      complex5.negate();
      Complex complex9 = new Complex(0.04953393340110779, Double.NaN);
      complex9.atan();
      complex8.createComplex(1576.0, 1576.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2012.52095), (-2012.52095));
      Complex.valueOf((-2012.52095), 1570.705602128436);
      Complex complex1 = complex0.NaN.exp();
      complex1.ZERO.negate();
      Complex complex2 = complex0.createComplex((-1718.0), 2.5436656904062604E-13);
      complex2.NaN.cos();
      complex0.getArgument();
      complex2.conjugate();
      Complex complex3 = complex2.subtract(complex0);
      complex3.tan();
      complex3.getArgument();
      complex1.createComplex((-2924.464292396), 1184.150342681);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.valueOf(6.283185307179586, 0.0);
      complex4.ZERO.multiply(complex3);
      Complex complex5 = new Complex((-485.07894401), (-485.07894401));
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.ZERO;
      complex1.INF.abs();
      Complex complex4 = complex3.multiply(complex1);
      Object object0 = new Object();
      complex3.readResolve();
      complex4.equals(complex1);
      complex2.tanh();
      Complex complex5 = Complex.ZERO;
      try { 
        complex4.nthRoot((-3709));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,709
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-1310.69));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.sinh();
      complex2.sinh();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.exp();
      complex2.log();
      Complex complex6 = complex2.sin();
      Complex.valueOf(0.0, 731.1415726);
      Complex complex7 = complex4.pow((-1133.4261113));
      complex3.isNaN();
      complex5.subtract(Double.NaN);
      complex1.divide(complex6);
      Complex complex8 = new Complex(2.0, 731.1415726);
      Object object0 = new Object();
      complex7.equals(object0);
      Complex complex9 = Complex.ZERO;
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex((-939.8));
      complex2.subtract(163.36);
      complex2.tanh();
      Complex complex3 = Complex.ZERO;
      complex1.nthRoot(2146944583);
      complex1.sqrt1z();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 11300.184032101539);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.subtract(2078.489284340981);
      Complex complex3 = complex2.I.atan();
      complex3.INF.hashCode();
      Complex complex4 = complex1.INF.acos();
      Complex complex5 = complex1.I.multiply(complex4);
      complex5.sin();
      Complex complex6 = complex0.acos();
      complex1.getField();
      complex6.NaN.hashCode();
      complex4.I.pow(complex3);
      complex4.ZERO.getField();
      complex1.equals(complex6);
      complex0.NaN.abs();
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex7.pow(complex6);
      Complex complex9 = complex1.exp();
      Complex complex10 = complex9.NaN.subtract(complex4);
      Complex complex11 = Complex.valueOf(Double.NaN);
      complex11.INF.readResolve();
      Complex.valueOf(2078.489284340981, (-1384.7970188667));
      Complex complex12 = complex10.divide(complex2);
      complex12.INF.hashCode();
      complex12.pow(Double.NaN);
      complex12.add(complex8);
      complex8.sqrt1z();
      complex10.sin();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.999999999999665, 1.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.subtract(1.0);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.subtract(508.042777);
      Complex complex6 = complex0.subtract(1.0);
      complex6.NaN.cosh();
      Complex complex7 = complex4.cos();
      complex6.ZERO.sqrt();
      complex7.NaN.tanh();
      complex3.log();
      complex6.sqrt1z();
      complex5.log();
      try { 
        complex0.nthRoot((-2045226237));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,226,237
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.6218161582946777, 423.640776508304);
      complex0.getImaginary();
      complex0.createComplex(423.640776508304, 0.2749055027961731);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(20.09237417094272);
      Complex complex1 = complex0.multiply(20.09237417094272);
      complex1.I.abs();
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.getArgument();
      complex3.I.add(complex0);
      Complex complex5 = complex3.ZERO.pow(0.0);
      complex0.hashCode();
      complex5.NaN.conjugate();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      complex0.tanh();
      complex0.acos();
      complex1.isNaN();
      complex4.atan();
      try { 
        complex5.nthRoot((-1537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,537
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = new Complex(1490.9, Double.NaN);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(182.2);
      Complex complex1 = new Complex(182.2, 182.2);
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = new Object();
      complex2.cosh();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf(182.2);
      complex4.readResolve();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.acos();
      complex3.getArgument();
      complex6.I.sqrt();
      Complex complex7 = complex0.cos();
      Complex complex8 = Complex.valueOf(182.2);
      complex3.add(complex7);
      complex2.reciprocal();
      Complex complex9 = Complex.ONE;
      Complex complex10 = new Complex(1158.5, 1158.5);
      complex1.nthRoot(27);
      complex8.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.tanh();
      Complex complex1 = complex0.negate();
      complex0.NaN.multiply(0.4487839937210083);
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.subtract(2.414213562373095);
      complex0.INF.add(complex1);
      complex0.ONE.sqrt1z();
      complex1.equals(complex0);
      Complex complex3 = complex0.sqrt1z();
      complex3.ONE.multiply(complex2);
      Complex complex4 = complex0.subtract((-2823.669609607027));
      complex3.toString();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.ONE.sin();
      complex1.log();
      Complex complex7 = complex2.pow(1310.69);
      complex7.multiply(5.471416081500162E-8);
      complex4.abs();
      complex6.cos();
      complex7.abs();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide(20.0);
      complex0.getField();
      Complex complex2 = complex0.sqrt();
      complex1.NaN.getField();
      complex2.I.hashCode();
      complex2.equals((Object) null);
      complex1.isInfinite();
      complex2.isNaN();
      complex0.sin();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(2125.99);
      complex0.abs();
      Complex complex1 = Complex.valueOf((-175.85049), 2125.99);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.conjugate();
      complex2.getArgument();
      Complex complex4 = complex2.add(complex0);
      complex4.pow(2125.99);
      complex3.hashCode();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.add(2125.99);
      Complex complex7 = Complex.I;
      complex7.tanh();
      complex1.getField();
      complex0.toString();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.tanh();
      complex5.log();
      Complex complex9 = new Complex(36.22143);
      complex2.exp();
      complex6.isNaN();
      complex8.cosh();
      complex1.multiply((-4.6157237582310713E-8));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.acos();
      complex1.subtract(2125.99);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.subtract(complex2);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.add(1490.9);
      complex0.NaN.hashCode();
      complex1.multiply(complex0);
      Complex complex2 = new Complex((-1793.7546921851695));
      complex1.exp();
      complex0.isNaN();
      complex0.cosh();
      complex1.multiply(1490.9);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tan();
      complex2.tanh();
      Complex complex3 = complex2.add(Double.NaN);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex2.cosh();
      complex5.readResolve();
      complex0.sqrt1z();
      complex6.getField();
      complex7.cosh();
      complex2.tan();
      Complex.valueOf(20.0);
      complex7.reciprocal();
      complex3.readResolve();
      Complex complex8 = Complex.I;
      complex3.acos();
      Complex complex9 = complex3.cos();
      Complex complex10 = Complex.valueOf(288.8380651816959);
      complex10.I.add(complex5);
      Complex complex11 = Complex.ZERO;
      complex11.reciprocal();
      Complex complex12 = Complex.ONE;
      Complex complex13 = new Complex((-630.9), 288.8380651816959);
      complex13.ZERO.nthRoot(407);
      complex9.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tanh();
      complex1.I.add(20.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = new Complex(20.0);
      complex4.I.cosh();
      complex4.ONE.readResolve();
      complex3.sqrt1z();
      complex3.getField();
      complex3.cosh();
      Complex complex5 = complex3.tan();
      Complex complex6 = Complex.valueOf((-947.183));
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = (Complex)complex0.readResolve();
      Complex complex9 = Complex.I;
      complex9.acos();
      complex6.cos();
      Complex complex10 = Complex.valueOf(1198.0);
      complex10.ONE.multiply((-947.183));
      Complex complex11 = Complex.ZERO;
      complex7.reciprocal();
      Complex complex12 = Complex.ONE;
      complex2.multiply(complex11);
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(182.2);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = new Object();
      Complex complex3 = (Complex)complex2.readResolve();
      complex2.equals(complex3);
      Complex complex4 = complex1.subtract(359.18);
      Complex complex5 = complex4.tan();
      complex3.sqrt();
      complex5.readResolve();
      Complex complex6 = Complex.valueOf(359.18, 182.2);
      complex2.cos();
      complex4.asin();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(20.09237417094272);
      Complex complex1 = complex0.multiply(20.09237417094272);
      complex1.I.abs();
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.getArgument();
      complex3.I.add(complex0);
      Complex complex5 = complex1.subtract(complex2);
      complex2.divide(complex3);
      Complex complex6 = complex5.multiply(2756);
      Complex complex7 = Complex.ONE;
      complex7.multiply(complex0);
      complex2.multiply(17);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(182.2);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = new Object();
      Complex complex3 = (Complex)complex2.readResolve();
      complex2.equals(complex3);
      Complex complex4 = complex1.subtract(359.18);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex3.sqrt();
      complex5.readResolve();
      complex2.acos();
      complex2.cos();
      Complex.valueOf((-1470.5));
      Complex complex7 = Complex.ZERO;
      complex7.reciprocal();
      complex6.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.I.conjugate();
      complex3.I.getArgument();
      complex0.sqrt();
      complex0.readResolve();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.cos();
      complex1.multiply(1257966796);
      complex0.getImaginary();
      complex5.multiply((double) 1659);
      complex3.add(0.0);
      complex2.multiply(1257966796);
      complex4.cos();
      complex0.isNaN();
      complex3.getField();
      complex3.divide((double) 1257966796);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.I.add(20.0);
      Complex complex4 = complex0.tan();
      complex1.I.cosh();
      complex4.ONE.readResolve();
      Complex complex5 = complex4.sqrt1z();
      complex4.getField();
      complex4.cosh();
      Complex complex6 = complex4.tan();
      Complex complex7 = Complex.valueOf((-947.183));
      complex7.acos();
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex8.subtract(complex7);
      complex5.log();
      complex8.I.pow(complex2);
      complex0.getArgument();
      complex9.NaN.conjugate();
      Complex complex10 = Complex.valueOf((-355.0));
      Complex complex11 = complex10.multiply((-2164));
      complex11.ZERO.multiply(complex1);
      complex9.tanh();
      Complex.valueOf((double) (-2164));
      Complex complex12 = Complex.ZERO;
      complex10.reciprocal();
      complex9.multiply(complex3);
      complex5.divide(6.645352711199266E-8);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      complex1.I.abs();
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.getArgument();
      Complex complex5 = complex3.I.add(complex0);
      Complex complex6 = complex3.ZERO.pow(0.0);
      complex0.hashCode();
      complex6.NaN.conjugate();
      Complex complex7 = complex3.add((-2.548073509300398E61));
      complex5.tanh();
      complex5.getField();
      complex6.toString();
      Complex complex8 = complex7.tanh();
      complex3.log();
      Complex complex9 = new Complex(36.22143);
      complex8.exp();
      complex7.isNaN();
      complex7.cosh();
      complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.766400791193615);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tanh();
      complex1.I.add(20.766400791193615);
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.ONE;
      complex4.I.cosh();
      complex4.ONE.readResolve();
      Complex complex5 = complex3.sqrt1z();
      complex3.getField();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex3.tan();
      Complex complex8 = Complex.valueOf((-947.183));
      complex8.acos();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex9.subtract(complex8);
      complex5.log();
      complex9.I.pow(complex2);
      complex0.getArgument();
      complex10.NaN.conjugate();
      Complex complex11 = Complex.valueOf((-355.0));
      complex11.multiply((-2164));
      Complex complex12 = complex10.tanh();
      Complex.valueOf(2.2523580600947705E-82);
      Complex complex13 = Complex.ZERO;
      complex6.reciprocal();
      Complex complex14 = Complex.valueOf(1.2154183152078517E234, 2598.924011859673);
      complex12.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(182.2);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.INF;
      complex2.abs();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.cosh();
      complex4.conjugate();
      complex0.getArgument();
      Complex complex5 = Complex.ZERO;
      complex5.add(complex3);
      Complex complex6 = Complex.I;
      complex6.pow(Double.POSITIVE_INFINITY);
      complex5.hashCode();
      Complex complex7 = complex0.cos();
      complex7.conjugate();
      Complex complex8 = Complex.valueOf(0.0, 1.3041809768060802E52);
      Complex complex9 = new Complex(1.3041809768060802E52);
      complex9.getField();
      complex5.isNaN();
      complex4.pow(0.0);
      complex5.abs();
      complex7.nthRoot(1);
      complex8.sqrt1z();
      complex1.subtract(Double.POSITIVE_INFINITY);
      complex5.reciprocal();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex0.abs();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.cosh();
      Complex complex5 = Complex.INF;
      complex5.conjugate();
      complex4.getArgument();
      Complex complex6 = complex5.add(complex1);
      complex0.pow(2125.99);
      complex6.hashCode();
      Complex complex7 = complex6.cos();
      complex7.conjugate();
      Complex.valueOf(1182.9745116857357, 20.0);
      complex6.getField();
      complex4.isNaN();
      complex5.pow(1.3041809768060802E52);
      complex2.abs();
      complex3.nthRoot(4974);
      Complex complex8 = new Complex(1);
      complex8.sqrt1z();
      complex0.subtract(2.7050414085388184);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.I.conjugate();
      complex3.I.getArgument();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.subtract(complex0);
      complex3.log();
      Complex complex6 = complex1.pow(complex5);
      complex0.getArgument();
      complex0.conjugate();
      Complex complex7 = Complex.valueOf(20.0);
      Complex complex8 = complex2.multiply(4978);
      complex6.I.multiply((-2164));
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.tanh();
      complex4.multiply((-2164));
      complex7.getImaginary();
      complex8.multiply(1398.89);
      complex1.add(0.0);
      complex10.multiply(678);
      Complex complex11 = complex6.cos();
      complex11.isNaN();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.acos();
      complex2.tanh();
      Complex complex3 = Complex.ZERO;
      // Undeclared exception!
      complex3.nthRoot(2146944583);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(182.2);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = new Object();
      Object object1 = complex2.readResolve();
      complex2.equals(object1);
      Complex complex3 = complex1.subtract(359.18);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.sqrt1z();
      try { 
        complex5.ONE.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.createComplex(2350.0, 6.283185307179586);
      complex1.divide(complex3);
      Complex complex4 = complex2.log();
      Complex complex5 = complex2.pow(complex1);
      complex3.atan();
      Complex complex6 = complex3.sinh();
      complex5.atan();
      complex2.multiply(complex0);
      complex6.sinh();
      complex4.toString();
      complex2.asin();
      Complex complex7 = complex2.atan();
      complex5.isNaN();
      Complex complex8 = complex6.sinh();
      complex4.sinh();
      Complex complex9 = Complex.NaN;
      complex0.createComplex(6.283185307179586, 6.283185307179586);
      complex7.subtract(9.78476998200719E-186);
      complex8.multiply(4.503876787768218);
      Complex complex10 = Complex.I;
      complex10.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.createComplex(2125.99, 2125.99);
      complex3.INF.hashCode();
      complex3.I.hashCode();
      Complex complex4 = complex0.atan();
      complex0.getField();
      complex4.ZERO.exp();
      Complex complex5 = complex4.pow(0.0);
      complex1.ZERO.exp();
      complex0.subtract(0.0);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex6.I.cos();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.createComplex(1182.9745116857357, 1.4142135623730951);
      Complex complex10 = complex6.log();
      complex10.INF.getArgument();
      Complex complex11 = complex5.log();
      Complex.valueOf((-20.0));
      complex4.multiply(229);
      complex8.isNaN();
      complex11.sqrt1z();
      Complex complex12 = complex3.divide(complex9);
      complex11.getReal();
      Complex complex13 = Complex.valueOf(0.7615941559557649);
      complex1.equals(complex13);
      complex0.pow(complex12);
      complex2.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0);
      complex1.I.abs();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.getArgument();
      Complex complex5 = complex3.I.add(complex0);
      Complex complex6 = complex3.ZERO.pow(0.0);
      complex0.hashCode();
      Complex complex7 = complex2.NaN.cos();
      complex6.tan();
      Complex complex8 = complex1.exp();
      complex4.log();
      complex4.sin();
      Complex.valueOf(0.0, 0.0);
      complex5.pow(0.0);
      complex2.isNaN();
      complex8.subtract(0.0);
      complex7.divide(complex2);
      Complex complex9 = new Complex((-2444.85568631), 1195.66823523826);
      Complex complex10 = Complex.I;
      complex9.equals(complex10);
      complex3.hashCode();
      Object object0 = complex7.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-45.00963824058609), 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tanh();
      complex1.I.add(20.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.I.cosh();
      complex4.ONE.readResolve();
      Complex complex7 = complex3.sqrt1z();
      complex3.getField();
      complex3.cosh();
      Complex complex8 = complex3.tan();
      Complex complex9 = Complex.valueOf((-947.183));
      complex4.NaN.acos();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex10.subtract(complex9);
      complex7.log();
      complex10.I.pow(complex2);
      complex0.getArgument();
      complex11.NaN.conjugate();
      Complex complex12 = Complex.valueOf((-355.0));
      complex12.multiply((-2164));
      complex11.tanh();
      complex6.getField();
      Complex complex13 = complex4.multiply(1659);
      complex9.getImaginary();
      complex9.multiply((-355.0));
      Complex complex14 = Complex.NaN;
      complex14.multiply(1659);
      complex13.cos();
      complex10.isNaN();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      complex1.I.abs();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.getArgument();
      Complex complex5 = complex3.I.add(complex0);
      complex3.ZERO.pow(0.0);
      complex0.hashCode();
      Complex complex6 = complex2.NaN.cos();
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = Complex.valueOf(1.3041809768060802E52, 0.0);
      complex0.getField();
      complex0.isNaN();
      Complex complex9 = complex2.pow(1209.8659);
      complex0.abs();
      complex5.nthRoot(1);
      complex9.NaN.sqrt1z();
      complex0.ZERO.add(complex7);
      complex9.subtract(0.0);
      complex3.reciprocal();
      complex7.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.reciprocal();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.multiply((-3550.0845171250994));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.pow(complex1);
      complex5.atan();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.multiply(complex3);
      complex6.sinh();
      complex3.toString();
      complex0.asin();
      Complex complex9 = complex7.atan();
      complex9.isNaN();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex2.sinh();
      complex5.multiply((-5.137865010872577E-8));
      Complex complex12 = complex10.createComplex((-872.079), (-3550.0845171250994));
      complex6.subtract((-625.090791416));
      complex11.multiply(107.9156);
      Complex complex13 = complex8.subtract(complex12);
      complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tanh();
      complex1.I.add(20.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.I.cosh();
      complex4.ONE.readResolve();
      Complex complex7 = complex3.sqrt1z();
      complex3.getField();
      complex3.cosh();
      Complex complex8 = complex3.tan();
      Complex complex9 = Complex.valueOf((-947.183));
      complex4.NaN.acos();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex10.subtract(complex9);
      complex7.log();
      complex10.I.pow(complex2);
      complex0.getArgument();
      complex11.NaN.conjugate();
      Complex complex12 = Complex.valueOf((-355.0));
      complex12.multiply((-2164));
      complex11.tanh();
      complex6.getField();
      complex4.multiply(1659);
      complex9.getImaginary();
      complex9.multiply((-355.0));
      Complex complex13 = complex12.add((double) 1659);
      complex13.multiply(1659);
      complex10.pow(complex0);
      complex2.isInfinite();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3277.65, 468.0);
      Complex complex2 = complex0.add(complex1);
      complex2.pow(3277.65);
      complex1.hashCode();
      Complex complex3 = Complex.ZERO;
      complex3.cos();
      complex3.conjugate();
      Complex complex4 = Complex.valueOf(1.3041809768060802E52, 2534968.9248862276);
      complex4.getField();
      complex2.isNaN();
      Complex complex5 = Complex.NaN;
      complex5.pow(0.0);
      complex1.abs();
      complex3.nthRoot(1);
      Complex complex6 = Complex.ZERO;
      complex6.sqrt1z();
      complex0.subtract((-1182.9745116857357));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-3982.7656));
      Complex complex1 = Complex.valueOf((-1182.9745116857357));
      Complex complex2 = complex1.ZERO.createComplex(0.0, (-1592.15826));
      Complex complex3 = complex0.conjugate();
      complex3.ZERO.pow((-3982.7656));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.INF.pow(complex3);
      Complex complex6 = complex4.pow((-99.6403571264433));
      Complex complex7 = complex4.NaN.acos();
      complex7.negate();
      Complex complex8 = complex6.add(complex2);
      complex2.acos();
      complex8.I.acos();
      Complex complex9 = complex5.add(1430.078);
      complex9.ONE.divide(0.0);
      complex2.isNaN();
      Complex complex10 = complex1.pow((-3982.7656));
      complex10.I.divide(0.0);
      Complex complex11 = complex5.multiply((-732.75370345872));
      complex1.readResolve();
      complex11.subtract(0.0);
      Complex complex12 = complex4.ONE.asin();
      complex12.NaN.multiply((-4167));
      Complex complex13 = new Complex(352.9670899259835, 0.0);
      complex4.subtract(complex13);
      Complex.valueOf(0.0, (-464.36128162));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(718.747877);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.add(486.1);
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.subtract(complex6);
      Complex complex8 = Complex.valueOf((-51.820690274499), 2.0);
      complex8.INF.atan();
      complex3.NaN.tan();
      Complex complex9 = complex2.reciprocal();
      complex9.NaN.atan();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.atan();
      complex8.nthRoot(17);
      complex2.getReal();
      Complex.valueOf(486.1, 0.0);
      Complex.valueOf(0.0);
      complex11.subtract(complex8);
      Complex.valueOf(2.0, 0.0);
      complex7.multiply(486.1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3201.2117846);
      complex0.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.subtract((-1581.7404264795912));
      Complex complex4 = complex0.ONE.pow(complex3);
      complex4.subtract(complex2);
      Complex complex5 = Complex.valueOf(0.0, (-7.330635250808021E64));
      Complex complex6 = complex0.acos();
      complex1.hashCode();
      complex0.ONE.negate();
      Complex complex7 = complex6.createComplex((-1581.7404264795912), Double.POSITIVE_INFINITY);
      complex0.getField();
      complex0.isNaN();
      complex3.toString();
      complex1.abs();
      complex1.ZERO.sin();
      Complex complex8 = complex7.sqrt1z();
      complex0.I.multiply(complex2);
      complex8.ONE.tan();
      complex7.add(3201.2117846);
      complex5.asin();
      Complex.valueOf(2641.7959669);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.isNaN();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.multiply((-2608.0));
      complex2.NaN.multiply((-614));
      Complex complex3 = complex1.createComplex(0.0, 2547.33199497);
      Complex complex4 = complex3.I.add(complex2);
      complex1.INF.conjugate();
      Complex complex5 = complex2.add((-2728.6));
      complex5.INF.getArgument();
      complex2.asin();
      complex1.nthRoot(65);
      Complex complex6 = Complex.ZERO;
      complex0.getArgument();
      Complex complex7 = complex2.subtract(complex6);
      complex7.ONE.sqrt();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex0.add(complex4);
      complex9.pow(complex8);
      complex7.sin();
      complex0.multiply(1.2167807682331913E-308);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(2.707178052117959E195, 2.707178052117959E195);
      complex0.INF.readResolve();
      Complex complex1 = complex0.I.add(2.707178052117959E195);
      complex0.readResolve();
      complex1.NaN.acos();
      Complex complex2 = complex1.multiply((-2502));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.NaN.sinh();
      Complex complex5 = complex3.divide(0.0);
      complex4.multiply((-2202));
      complex3.INF.divide(0.0);
      complex1.getReal();
      Complex complex6 = Complex.valueOf((double) (-2502), 3.5471180281159325E-219);
      complex2.hashCode();
      Complex complex7 = complex6.cosh();
      complex2.abs();
      complex7.tanh();
      Complex.valueOf((double) (-2502));
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(182.2);
      Complex complex1 = new Complex((-1545.4));
      complex1.ONE.log();
      complex1.INF.exp();
      Complex complex2 = Complex.NaN;
      complex1.ONE.subtract(complex2);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = Complex.NaN;
      complex3.ZERO.toString();
      complex4.ZERO.acos();
      complex0.multiply(complex4);
      Complex complex5 = complex0.atan();
      complex5.tan();
      complex2.equals(complex5);
      complex3.add(182.2);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-579.7110349517216), (-579.7110349517216));
      Complex complex1 = new Complex((-1033.3298557), (-1033.3298557));
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.I.multiply(complex1);
      Complex complex3 = complex1.I.pow(complex0);
      complex0.multiply((-2635));
      complex1.getImaginary();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex6.ONE.conjugate();
      complex6.ONE.multiply((double) (-2635));
      Complex complex8 = complex0.pow(complex3);
      complex8.sin();
      complex8.getImaginary();
      complex4.sin();
      complex1.multiply(407);
      try { 
        complex7.nthRoot((-2635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,635
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3277.65, 468.0);
      Complex complex2 = complex1.I.sqrt();
      complex0.readResolve();
      Complex complex3 = complex0.acos();
      Complex.valueOf((-1470.5));
      complex3.cos();
      complex1.acos();
      complex0.reciprocal();
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(1.0177335739135742);
      Complex complex1 = Complex.valueOf(1.0177335739135742);
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.pow(1.0177335739135742);
      Complex complex3 = Complex.valueOf((-669.578768385), (-669.578768385));
      complex3.ONE.conjugate();
      complex3.hashCode();
      Complex complex4 = complex3.cosh();
      complex4.divide(complex3);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.log();
      complex3.NaN.getArgument();
      complex0.cos();
      Complex complex4 = complex1.tan();
      complex4.sin();
      Complex complex5 = complex2.multiply((-1121.92686276));
      complex5.divide(Double.NaN);
      complex4.pow(complex5);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.subtract(276.1298222);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.exp();
      complex3.I.conjugate();
      complex2.INF.acos();
      complex1.ZERO.toString();
      Complex complex4 = complex0.divide((-1237.9));
      Complex complex5 = complex4.I.pow(complex0);
      Complex complex6 = complex5.multiply(1516);
      complex6.I.subtract(complex3);
      complex5.INF.multiply((-1193.774383996287));
      Complex.valueOf((-1193.774383996287));
      Complex complex7 = complex5.INF.pow(complex0);
      Complex complex8 = complex7.negate();
      complex8.NaN.exp();
      Complex complex9 = complex4.sinh();
      complex9.I.toString();
      complex4.getField();
      complex0.createComplex((-3.5392250480081715E-9), 276.1298222);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex3.I.cosh();
      complex4.I.getArgument();
      complex0.nthRoot(1);
      complex2.abs();
      complex2.getField();
      Complex complex5 = Complex.valueOf((double) 1);
      Complex complex6 = complex4.multiply((double) 1);
      complex5.getArgument();
      complex6.getField();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.createComplex(2350.0, 6.283185307179586);
      complex3.ZERO.divide(complex2);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.asin();
      complex1.toString();
      Complex complex6 = complex4.pow(2350.0);
      complex6.NaN.divide(complex0);
      Complex complex7 = complex6.ZERO.sqrt1z();
      complex5.abs();
      complex5.getReal();
      Complex complex8 = complex3.ZERO.acos();
      Complex complex9 = complex8.INF.createComplex(0.0, 0.0);
      Complex complex10 = complex3.add(3295.789877);
      complex10.conjugate();
      complex1.sin();
      complex7.pow((-4040.10301316));
      Complex complex11 = Complex.ONE;
      complex0.add(complex11);
      complex4.ONE.tan();
      complex7.tanh();
      Complex complex12 = complex4.cos();
      complex12.I.sqrt();
      complex9.cos();
      complex9.atan();
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.createComplex(114.6426, 2880.8679);
      complex1.ZERO.conjugate();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.NaN.createComplex((-1070.1209852), 0.0);
      complex3.nthRoot(4464);
      complex3.ONE.hashCode();
      Complex complex4 = complex2.NaN.pow(2880.8679);
      Complex complex5 = complex0.INF.negate();
      Complex complex6 = complex0.sqrt1z();
      complex6.multiply(complex0);
      complex5.getField();
      Complex complex7 = complex0.log();
      Complex complex8 = complex0.NaN.atan();
      complex8.ONE.multiply(0.0);
      complex8.ZERO.atan();
      Complex complex9 = complex7.divide(0.0);
      Complex complex10 = complex9.cos();
      Complex complex11 = complex2.conjugate();
      complex11.cos();
      complex4.abs();
      complex10.multiply((-213.6911304283888));
      complex5.getImaginary();
      Complex complex12 = complex6.sin();
      complex12.NaN.hashCode();
      complex1.conjugate();
      complex12.tan();
      Complex.valueOf(0.0, 114.6426);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.ONE.pow(0.0);
      Complex complex3 = complex0.NaN.multiply(0.0);
      complex3.reciprocal();
      complex0.abs();
      try { 
        complex1.nthRoot((-2617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,617
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.ZERO.multiply(2.0);
      complex0.readResolve();
      Complex complex4 = complex2.add(complex3);
      complex4.sqrt();
      complex2.ZERO.toString();
      Complex complex5 = complex1.exp();
      complex5.INF.reciprocal();
      complex2.getImaginary();
      Complex.valueOf((-1.166799420361101E-7), 138.6167374482);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2125.99);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.createComplex(2125.99, 2125.99);
      complex3.INF.hashCode();
      complex3.I.hashCode();
      Complex complex4 = complex0.atan();
      complex0.getField();
      Complex complex5 = complex4.ZERO.exp();
      complex4.pow(0.0);
      complex1.ZERO.exp();
      complex0.subtract(0.0);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = complex5.ZERO.tan();
      complex10.NaN.exp();
      Complex complex11 = complex7.ZERO.log();
      complex4.ZERO.sin();
      Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex4.pow(1.7647101734915075E47);
      complex7.isNaN();
      Complex complex13 = complex5.subtract(1369.2925);
      complex11.I.divide(complex12);
      Complex complex14 = new Complex((-2.0821912536551675E-8), 2.0);
      complex11.equals(complex14);
      complex13.hashCode();
      complex9.equals("");
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1607.6390981605855);
      complex0.ONE.acos();
      Complex.valueOf(1607.6390981605855, 0.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.log();
      complex2.NaN.createComplex(0.0, 0.0);
      complex0.pow(complex1);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(7);
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex2.sinh();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.NaN.tan();
      complex4.NaN.readResolve();
      complex3.ONE.log();
      complex0.INF.negate();
      Complex complex6 = complex4.ONE.exp();
      complex6.NaN.negate();
      complex1.ZERO.asin();
      Complex complex7 = complex1.sinh();
      complex3.ZERO.getArgument();
      Complex complex8 = complex7.ONE.createComplex(7, 7);
      complex3.I.createComplex((-854.682798512013), 0.0);
      complex1.cosh();
      complex8.I.exp();
      complex3.NaN.acos();
      Complex complex9 = complex8.sqrt();
      complex3.divide((double) 7);
      Complex.valueOf(0.0, 2790.865196);
      complex5.equals(complex3);
      complex9.sinh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 6.283185307179586);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex0.ZERO.negate();
      int int0 = 0;
      Complex complex3 = complex1.NaN.tanh();
      complex3.I.reciprocal();
      try { 
        complex2.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.I.sinh();
      complex0.NaN.divide(complex1);
      Complex complex2 = complex0.I.tan();
      complex0.negate();
      complex0.createComplex(0.0, 0.0);
      complex2.tan();
      complex0.hashCode();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.tan();
      complex2.ZERO.getField();
      complex1.ONE.add(0.0);
      complex1.INF.subtract(0.0);
      Complex complex4 = complex0.divide(complex1);
      complex4.ONE.multiply(0.0);
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex3.conjugate();
      complex6.INF.hashCode();
      complex0.tanh();
      Complex complex7 = complex5.tanh();
      complex7.ZERO.toString();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.INF.asin();
      complex0.equals((Object) null);
      complex0.isInfinite();
      complex2.isNaN();
      complex2.sin();
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2960.57588448923), (-2960.57588448923));
      Complex complex1 = Complex.valueOf((-2960.57588448923));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.pow(complex0);
      complex0.readResolve();
      complex0.getField();
      Complex complex4 = complex1.I.pow((-2960.57588448923));
      Complex complex5 = complex4.INF.divide((-2960.57588448923));
      complex1.ZERO.log();
      Complex complex6 = Complex.NaN;
      complex5.NaN.multiply(complex6);
      complex5.INF.pow(complex1);
      complex4.INF.toString();
      complex2.isInfinite();
      complex1.nthRoot(222);
      complex3.exp();
      Complex complex7 = complex3.multiply((-937.66511082));
      complex1.getReal();
      Complex complex8 = complex7.log();
      complex8.NaN.abs();
      complex8.ZERO.subtract((-2960.57588448923));
      complex8.getArgument();
      complex8.getArgument();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(437.971778);
      complex0.ONE.sqrt();
      complex1.I.getField();
      try { 
        complex1.nthRoot((-621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -621
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(489.0);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex2.I.log();
      complex4.NaN.pow(complex2);
      complex4.atan();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.INF.atan();
      Complex complex7 = complex6.I.multiply(complex1);
      Complex complex8 = complex5.sinh();
      complex8.toString();
      Complex complex9 = complex0.asin();
      complex3.atan();
      complex9.isNaN();
      complex9.sinh();
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex9.multiply(0.0);
      complex11.ZERO.createComplex(0.0, 7.813044552050569E-215);
      complex7.subtract(0.06703783571720123);
      complex0.multiply(0.06703783571720123);
      complex10.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      double double0 = (-792.475005);
      complex0.NaN.log();
      Complex complex1 = complex0.add((-792.475005));
      Complex complex2 = complex1.negate();
      complex2.toString();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.NaN.atan();
      complex4.ZERO.exp();
      complex4.ZERO.add(complex1);
      Complex complex5 = complex1.negate();
      complex5.ONE.readResolve();
      int int0 = (-4458);
      Complex complex6 = complex2.I.subtract((double) (-4458));
      complex6.ZERO.divide(complex1);
      try { 
        complex5.I.nthRoot((-4458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,458
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = complex2.asin();
      complex2.divide(complex5);
      complex5.getArgument();
      Complex complex6 = complex3.ZERO.cosh();
      Complex complex7 = complex3.log();
      Complex complex8 = complex3.ONE.createComplex(0.0, Double.NaN);
      complex7.I.createComplex(0.0, 0.0);
      Complex complex9 = complex0.INF.sqrt1z();
      complex8.ZERO.nthRoot(7);
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex10.cosh();
      complex3.isInfinite();
      complex10.divide(0.0);
      complex2.getArgument();
      complex0.NaN.getField();
      complex11.abs();
      Complex complex13 = complex5.divide((-2073.19247));
      complex13.NaN.subtract((-1777.4618110038));
      complex12.cos();
      complex5.toString();
      complex4.add(82.35726);
      complex1.sqrt1z();
      complex6.asin();
      complex9.getReal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      complex1.I.abs();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.I.conjugate();
      complex4.I.getArgument();
      Complex complex5 = complex3.I.add(complex0);
      complex3.ZERO.pow(0.0);
      complex0.hashCode();
      Complex complex6 = complex2.NaN.cos();
      complex6.NaN.conjugate();
      Complex.valueOf(1.3041809768060802E52, 0.0);
      complex0.getField();
      complex0.isNaN();
      Complex complex7 = complex2.pow(1209.8659);
      complex0.abs();
      complex5.nthRoot(1);
      complex7.NaN.sqrt1z();
      complex7.subtract(0.0);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1967.3);
      Complex complex1 = complex0.ZERO.pow((-2242.018740761846));
      complex1.ONE.createComplex(3678.687, (-2742.112459709));
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.divide((-1.0143341551207646E-7));
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.I.sqrt();
      complex1.getField();
      Complex complex6 = complex0.exp();
      complex6.ONE.createComplex(3689.408, Double.NaN);
      complex6.ZERO.sinh();
      complex6.add((-2242.018740761846));
      Complex complex7 = complex3.sinh();
      complex6.getImaginary();
      complex2.conjugate();
      complex7.subtract(20.0);
      complex5.isInfinite();
      Complex complex8 = complex2.multiply(complex6);
      Complex complex9 = complex6.multiply(1537.1516378682627);
      complex8.multiply(4342);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.add(1393.12323758);
      complex1.NaN.subtract(complex0);
      complex1.NaN.divide(complex0);
      Complex complex2 = complex0.multiply(2756);
      Complex complex3 = complex0.multiply(complex2);
      complex3.multiply(2756);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.multiply(complex1);
      int int0 = 2174;
      Complex complex3 = complex2.I.multiply(2174);
      complex3.INF.subtract(complex2);
      Complex.valueOf(1.9579050540924072);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex((-2289.59182));
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.tanh();
      complex1.I.add(20.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.I.cosh();
      complex4.ONE.readResolve();
      Complex complex7 = complex3.sqrt1z();
      complex3.getField();
      complex3.cosh();
      Complex complex8 = complex3.tan();
      Complex complex9 = Complex.valueOf((-947.183));
      complex4.NaN.acos();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex10.subtract(complex9);
      complex7.log();
      complex10.I.pow(complex2);
      complex0.getArgument();
      complex11.NaN.conjugate();
      Complex complex12 = Complex.valueOf((-355.0));
      complex12.multiply((-2164));
      complex11.tanh();
      complex6.getField();
      Complex complex13 = complex4.multiply(1659);
      complex9.getImaginary();
      complex9.multiply((-355.0));
      Complex complex14 = complex12.add((double) 1659);
      complex14.multiply(1659);
      complex13.cos();
      complex10.isNaN();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex1.INF.toString();
      complex1.ZERO.atan();
      complex0.INF.tan();
      complex1.NaN.sin();
      complex1.ONE.acos();
      int int0 = (-1);
      Complex complex2 = complex1.I.negate();
      complex2.ZERO.reciprocal();
      try { 
        complex1.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = complex3.exp();
      complex3.multiply(1);
      complex1.multiply(17);
      Complex complex5 = complex2.sin();
      complex5.ZERO.readResolve();
      complex2.I.divide((-1310.69));
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = complex6.sin();
      complex6.toString();
      complex3.asin();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex1.NaN.add(14.36444414);
      complex2.I.createComplex((-609.7864952), 1303.5687771377);
      complex2.NaN.conjugate();
      complex1.divide(complex2);
      int int0 = 5132;
      // Undeclared exception!
      complex2.nthRoot(5132);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(6.283185307179586, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = new Complex((-3109.676302136227), (-4547.24438));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf((-4547.24438), 0.0);
      Complex complex4 = complex0.ZERO.sqrt1z();
      assertEquals(1.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.ZERO.sinh();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(6.304998463846928E-4, complex5.getImaginary(), 0.01);
      assertEquals(1.001619233094513, complex5.getReal(), 0.01);
      
      Complex complex7 = complex0.cosh();
      assertFalse(complex7.isNaN());
      
      Complex complex8 = complex3.negate();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(4547.24438, complex8.getReal(), 0.01);
      
      complex0.cos();
      Complex complex9 = complex1.exp();
      assertEquals(1.027513646534663, complex9.getImaginary(), 0.01);
  }
}
