/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:07:32 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(436.785, Double.POSITIVE_INFINITY);
      complex1.multiply(2307);
      complex0.multiply(complex1);
      Complex complex2 = complex0.acos();
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-0.9060367009005804);
      Complex complex0 = new Complex((-5561.1), (-0.9060367009005804));
      double double1 = 436.785;
      Complex complex1 = new Complex((-0.9060367009005804), 436.785);
      Complex complex2 = complex1.multiply(2307);
      complex0.abs();
      Complex complex3 = complex1.multiply(complex2);
      complex3.acos();
      try { 
        complex0.nthRoot((-2692));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,692
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.6767339705169146E270);
      Complex complex1 = complex0.add(3.6767339705169146E270);
      Complex complex2 = complex1.NaN.add(2.0);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex0.I.tan();
      complex1.ONE.readResolve();
      complex0.NaN.cos();
      Complex complex6 = complex0.createComplex(509.52, 2.0);
      complex6.ONE.toString();
      complex6.hashCode();
      Complex complex7 = complex1.asin();
      Complex complex8 = Complex.valueOf(687.425281085523);
      complex8.ONE.divide(2395.60418135891);
      Complex complex9 = complex5.negate();
      Complex complex10 = complex5.sin();
      complex7.readResolve();
      complex10.readResolve();
      Complex complex11 = complex2.NaN.sqrt();
      complex10.ONE.divide(complex3);
      Complex complex12 = complex10.createComplex((-1529.89166), 20.0);
      Complex complex13 = complex12.I.exp();
      Complex complex14 = complex13.ZERO.subtract((-1529.89166));
      Complex complex15 = complex14.ZERO.tan();
      Complex complex16 = Complex.valueOf((-1529.89166), 2.0);
      complex16.INF.log();
      complex9.subtract(687.425281085523);
      complex11.sqrt();
      complex9.sqrt();
      complex4.divide(3.6767339705169146E270);
      complex15.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-2989.405954936916), (-20.0));
      Complex complex1 = complex0.multiply((-1314));
      complex0.abs();
      Complex complex2 = complex1.acos();
      complex0.tan();
      complex2.cos();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(3.115616594184543E-9);
      Complex.valueOf(3.115616594184543E-9, (-1577.08608));
      complex0.abs();
      Complex.valueOf((-3102.4), (-5.4751646725093355E-8));
      Complex complex1 = new Complex(1.836477300786572E13, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2882.312232169053), 2459.7);
      Complex complex2 = complex0.sqrt();
      complex1.multiply(3615);
      complex2.abs();
      Complex complex3 = Complex.valueOf(5.088219872370737E183);
      complex3.acos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(4375, (-1547.559094));
      Complex complex1 = complex0.sqrt();
      complex0.INF.subtract((double) 4375);
      Complex complex2 = complex1.tan();
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(918.434786672, 1.0);
      Complex complex2 = complex1.multiply(1);
      complex2.I.pow(complex0);
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = complex0.sin();
      complex1.I.getArgument();
      complex1.ONE.abs();
      Complex complex3 = complex1.subtract(20.0);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.NaN.asin();
      complex5.ONE.cos();
      Complex complex6 = complex4.I.add(8.673592037666822E-5);
      Complex complex7 = complex2.ONE.add(complex0);
      complex7.NaN.multiply(complex4);
      complex3.ONE.sqrt1z();
      complex7.I.getField();
      Complex complex8 = Complex.valueOf(2295.084890611926, 20.0);
      Complex complex9 = complex2.sin();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex10.INF.log();
      Complex complex12 = complex3.acos();
      complex12.INF.cosh();
      Complex complex13 = complex6.divide(complex0);
      complex13.INF.abs();
      complex9.pow(complex3);
      Complex complex14 = complex0.acos();
      complex11.isInfinite();
      complex14.pow(complex8);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex.valueOf(Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = new Complex(Double.NaN);
      complex0.tanh();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(4.784601116463424);
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = Complex.valueOf(4.784601116463424, 4.784601116463424);
      complex2.NaN.pow(1.69490234375E14);
      complex0.INF.multiply(complex2);
      Complex complex4 = complex3.ONE.exp();
      complex1.getField();
      Complex.valueOf(2.8742587656021775E-215);
      Complex complex5 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.ZERO.tanh();
      complex7.nthRoot(3914);
      Complex complex8 = complex3.acos();
      Complex complex9 = complex0.pow(Double.POSITIVE_INFINITY);
      complex9.ONE.multiply((-491));
      Complex complex10 = complex4.asin();
      complex6.negate();
      Complex complex11 = complex9.cos();
      Complex complex12 = complex11.tanh();
      complex12.I.pow(complex10);
      complex2.add(1012.0);
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.NaN.multiply((-4884));
      complex1.INF.sqrt();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.I.conjugate();
      complex3.ZERO.multiply((-4884));
      Complex complex4 = complex1.divide(0.0);
      complex2.ONE.getArgument();
      Complex.valueOf((-2486.42), 0.0);
      complex2.I.sqrt1z();
      complex4.I.multiply(0.0);
      complex1.isInfinite();
      complex2.INF.hashCode();
      complex3.getArgument();
      complex0.NaN.abs();
      Complex complex5 = complex2.tan();
      Complex.valueOf(0.0, (double) (-4884));
      Complex complex6 = complex0.pow(0.0);
      complex6.ONE.sqrt1z();
      complex5.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-189.1), 4066.0002459419384);
      Complex complex1 = complex0.INF.sin();
      complex0.ONE.pow(2420.3105857647174);
      complex1.ZERO.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex3.sqrt1z();
      complex0.exp();
      complex2.reciprocal();
      complex4.getField();
      complex1.nthRoot(4969);
      complex0.add((-1726.48));
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-11.52481331761901), (-485002.0282324418));
      complex0.sqrt();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ONE;
      complex2.toString();
      complex0.subtract((-1547.559094));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(4375, 4375);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply((-2147481451));
      complex2.pow(7596914.738532094);
      complex2.abs();
      complex2.tanh();
      complex2.acos();
      Complex complex3 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1652.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-1652.0));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(58, Double.NaN);
      Complex complex3 = complex2.tanh();
      complex2.divide((double) 58);
      complex1.sqrt();
      Complex complex4 = complex1.acos();
      complex4.ZERO.multiply(complex1);
      Complex complex5 = new Complex(1.2765238285064697, 1.2765238285064697);
      complex5.asin();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = complex0.ONE.reciprocal();
      complex3.INF.atan();
      Complex complex4 = complex3.I.pow(Double.NaN);
      complex0.INF.readResolve();
      Complex complex5 = complex0.divide(Double.NaN);
      complex1.ONE.log();
      Complex complex6 = complex5.INF.multiply(576);
      complex1.NaN.pow((-4088.354));
      complex6.INF.abs();
      Complex complex7 = complex3.ONE.add(Double.NaN);
      complex3.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.acos();
      complex8.INF.nthRoot(1482);
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex3.sin();
      Complex complex11 = Complex.valueOf((double) 1482, Double.NaN);
      Complex complex12 = complex11.INF.pow((double) 1482);
      Complex complex13 = complex3.pow(complex11);
      complex12.tanh();
      complex9.subtract(complex4);
      Complex complex14 = complex10.tanh();
      complex14.NaN.cos();
      Complex complex15 = complex12.sin();
      Complex complex16 = complex7.subtract(complex8);
      complex13.conjugate();
      complex5.pow(complex15);
      complex16.divide(complex2);
      complex11.multiply((-4088.354));
      complex11.exp();
      complex9.nthRoot(576);
      complex13.getField();
      complex14.createComplex(Double.POSITIVE_INFINITY, 66.57897529657812);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 1012.6873811907482;
      Complex complex0 = new Complex(4375, 1012.6873811907482);
      try { 
        complex0.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex1.NaN.nthRoot(4375);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.log();
      complex3.tan();
      complex3.hashCode();
      Complex complex6 = Complex.NaN;
      complex1.acos();
      complex4.tanh();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.acos();
      Complex complex2 = Complex.INF;
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-819.121), 3065.615124);
      Complex complex1 = Complex.INF;
      complex1.cos();
      Complex complex2 = complex1.createComplex((-819.121), (-884.1121279691));
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.reciprocal();
      complex4.atan();
      complex1.ZERO.multiply(3065.615124);
      Complex complex5 = complex2.pow((-3340.45));
      complex5.readResolve();
      Complex complex6 = complex3.divide(305.037641674);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.multiply(576);
      complex6.pow((double) 576);
      complex8.abs();
      Complex complex9 = Complex.ONE;
      complex0.tanh();
      Complex complex10 = complex3.divide((-906.26));
      complex10.subtract(complex7);
      complex0.sqrt();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = complex0.ONE.reciprocal();
      complex3.INF.atan();
      complex3.I.pow(Double.NaN);
      Complex complex4 = (Complex)complex0.INF.readResolve();
      complex0.divide(Double.NaN);
      complex3.tan();
      complex4.toString();
      Complex complex5 = Complex.INF;
      complex4.divide(Double.NaN);
      complex2.cosh();
      complex1.multiply(104);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      complex1.INF.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.ONE.reciprocal();
      complex2.INF.atan();
      complex2.I.pow(Double.NaN);
      complex0.INF.readResolve();
      Complex complex3 = complex0.divide(Double.NaN);
      Complex complex4 = complex1.ONE.log();
      complex4.ZERO.createComplex(3055.859493040104, 2.5707963267948966);
      Complex complex5 = complex3.INF.multiply(553);
      complex1.NaN.pow((-4088.354));
      complex5.INF.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.ONE.divide(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      complex6.sin();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.divide((double) 4412);
      Complex complex2 = complex1.acos();
      complex2.multiply(5891.993784772103);
      complex1.abs();
      Complex complex3 = complex2.subtract(complex0);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-999.460240798), (-1769661.9167044018));
      Complex complex1 = complex0.subtract((-999.460240798));
      Complex.valueOf((-1431.359), (-1431.359));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1652.0), (-1786.0006322674));
      complex0.sinh();
      int int0 = 4375;
      try { 
        complex0.nthRoot((-446));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -446
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.divide((double) 4412);
      complex1.acos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.I;
      complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(651);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sin();
      Complex.valueOf((double) 651, 1274.990819997321);
      Complex complex3 = new Complex((-135.21454896177), 0.12642613053321838);
      Complex complex4 = complex3.pow(0.7615941559557649);
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = new Complex(1.0, 1274.990819997321);
      Complex complex7 = complex6.tanh();
      Complex.valueOf(1.0, 0.12642613053321838);
      complex7.tanh();
      complex5.cos();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex1.subtract(complex4);
      Complex complex10 = complex3.conjugate();
      complex10.INF.sqrt();
      Complex complex11 = new Complex(3497.86304635667, (-857.9902295728793));
      Complex.valueOf(6.693500938105557E234);
      complex11.pow(complex2);
      Complex complex12 = Complex.ZERO;
      complex3.divide(complex8);
      complex9.multiply((-555.98673091231));
      complex2.exp();
      Complex complex13 = Complex.I;
      int int0 = (-1260);
      try { 
        complex13.nthRoot((-1260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,260
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      complex1.INF.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.ONE.reciprocal();
      complex2.INF.atan();
      complex2.I.pow(Double.NaN);
      complex0.INF.readResolve();
      Complex complex3 = complex0.divide(Double.NaN);
      complex1.ONE.log();
      Complex complex4 = complex3.INF.multiply(576);
      complex2.NaN.asin();
      complex1.NaN.pow((-4088.354));
      complex4.INF.abs();
      Complex complex5 = Complex.ONE;
      complex2.ONE.divide(Double.POSITIVE_INFINITY);
      complex1.acos();
      Complex.valueOf(2365.3698154983, 2365.3698154983);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(Double.NaN);
      complex7.equals("");
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.divide((double) 4412);
      Complex complex2 = complex1.acos();
      complex0.nthRoot(37);
      complex1.pow((double) 37);
      complex1.readResolve();
      Complex complex3 = complex2.divide((-30.1561467));
      complex0.log();
      Complex complex4 = complex2.multiply(4412);
      Complex complex5 = Complex.valueOf((double) 37, 656.90259313405);
      complex5.pow(656.90259313405);
      complex5.abs();
      Complex complex6 = Complex.ONE;
      complex4.divide(20.0);
      complex3.acos();
      Complex.valueOf((-30.1561467), 1.950605015323617E-8);
      Complex complex7 = Complex.ZERO;
      complex6.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.abs();
      Complex complex1 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      complex0.equals(complex1);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(2.782159649779516);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.INF.asin();
      complex0.I.multiply((-2928.4932261094));
      Complex complex4 = complex0.ONE.pow(complex1);
      complex4.add(complex2);
      complex0.getField();
      Complex complex5 = complex0.conjugate();
      complex5.sinh();
      Complex complex6 = Complex.valueOf((-2928.4932261094), 2.782159649779516);
      complex0.log();
      Complex complex7 = Complex.valueOf(2.782159649779516);
      Complex complex8 = Complex.valueOf(0.7071067811865475);
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = Complex.valueOf(2.782159649779516);
      complex10.ONE.add(complex0);
      complex8.multiply(complex10);
      complex8.nthRoot(2317);
      Complex complex11 = complex9.INF.log();
      complex11.NaN.acos();
      complex6.cosh();
      complex8.NaN.subtract(2.782159649779516);
      Complex complex12 = complex9.asin();
      complex7.createComplex(2317, 20.0);
      complex7.pow(20.0);
      complex6.multiply(0.7071067811865475);
      complex12.isInfinite();
      complex3.acos();
      complex6.isInfinite();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex1.NaN.nthRoot(4375);
      complex0.ZERO.sqrt();
      complex0.sqrt();
      complex0.acos();
      Complex complex2 = complex1.log();
      complex2.I.tan();
      Complex complex3 = complex2.INF.cosh();
      complex3.NaN.hashCode();
      complex1.NaN.readResolve();
      complex0.acos();
      Complex complex4 = complex2.tanh();
      complex4.INF.toString();
      complex1.add((double) 4375);
      complex2.INF.pow(complex1);
      complex0.createComplex(4375, (-0.252271441652467));
      Complex complex5 = Complex.ZERO;
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.ONE.reciprocal();
      complex3.INF.atan();
      Complex complex4 = complex3.I.pow(Double.NaN);
      complex0.INF.readResolve();
      Complex complex5 = complex0.divide(Double.NaN);
      complex1.ONE.log();
      Complex complex6 = complex5.INF.multiply(576);
      complex1.NaN.pow((-4088.354));
      complex6.INF.abs();
      Complex complex7 = complex3.ONE.add(Double.NaN);
      complex3.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.acos();
      complex8.INF.nthRoot(1482);
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex3.sin();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY, 576);
      Complex complex12 = complex11.INF.pow((double) 1482);
      Complex complex13 = complex3.pow(complex11);
      complex12.tanh();
      complex9.subtract(complex4);
      Complex complex14 = complex10.tanh();
      complex14.NaN.cos();
      complex6.divide(complex11);
      Complex complex15 = complex12.sin();
      Complex complex16 = complex7.subtract(complex8);
      complex13.conjugate();
      complex5.pow(complex15);
      complex16.divide(complex2);
      complex11.multiply((-3252.814791757));
      complex11.exp();
      complex9.nthRoot(576);
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.8414709848078965);
      complex0.nthRoot(1482);
      Complex complex1 = complex0.sqrt();
      complex0.sin();
      Complex complex2 = Complex.valueOf(109.89, 1284.58098707399);
      complex2.pow(109.89);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex1.subtract(complex3);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.cos();
      complex6.sin();
      Complex complex8 = complex7.subtract(complex6);
      complex7.conjugate();
      complex4.pow(complex3);
      complex8.divide(complex5);
      complex7.multiply(2.414213562373095);
      complex6.exp();
      try { 
        complex4.nthRoot((-1206));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,206
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(2.414213562373095);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.tan();
      complex1.NaN.acos();
      complex1.ZERO.tan();
      Complex complex5 = complex1.subtract(2.414213562373095);
      complex5.tanh();
      complex1.equals("");
      complex4.subtract(2.414213562373095);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2275.12051164261), (-213.82914284227));
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(complex2);
      complex2.readResolve();
      complex0.I.cosh();
      Complex complex4 = Complex.valueOf((-2275.12051164261));
      Complex complex5 = complex2.I.exp();
      complex2.INF.createComplex((-2275.12051164261), 1173.9721);
      Complex complex6 = complex0.ONE.cosh();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex3.ZERO.add((-213.82914284227));
      complex3.ZERO.toString();
      Complex complex9 = complex2.divide((-213.82914284227));
      complex3.nthRoot(3917);
      Complex complex10 = complex2.divide(complex7);
      Complex complex11 = complex9.divide(complex4);
      complex8.I.log();
      Complex complex12 = complex11.tan();
      complex8.cosh();
      complex3.atan();
      complex5.add(complex6);
      Complex complex13 = complex6.tanh();
      complex13.abs();
      complex10.multiply(797);
      complex12.getField();
      complex11.add(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = complex0.ONE.reciprocal();
      complex3.INF.atan();
      Complex complex4 = complex3.I.pow(Double.NaN);
      complex0.INF.readResolve();
      Complex complex5 = complex0.divide(Double.NaN);
      complex1.ONE.log();
      Complex complex6 = complex5.INF.multiply(576);
      complex1.NaN.pow((-4088.354));
      complex6.INF.abs();
      Complex complex7 = complex3.ONE.add(Double.NaN);
      complex3.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.acos();
      complex8.INF.nthRoot(1482);
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex3.sin();
      Complex complex11 = Complex.valueOf((double) 1482, Double.NaN);
      Complex complex12 = complex11.INF.pow((double) 1482);
      Complex complex13 = complex3.pow(complex11);
      complex12.tanh();
      complex9.subtract(complex4);
      Complex complex14 = complex10.tanh();
      complex14.NaN.cos();
      Complex complex15 = complex12.sin();
      Complex complex16 = complex7.subtract(complex8);
      complex13.conjugate();
      complex5.pow(complex15);
      complex16.divide(complex2);
      complex11.multiply((-3252.814791757));
      complex11.exp();
      complex9.nthRoot(576);
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-999.460240798), (-999.460240798));
      complex0.ZERO.acos();
      complex0.isInfinite();
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex((-999.460240798));
      complex0.multiply(2033);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-43.93486436183126), 0.0);
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-697.688596));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.divide((-999.460240798));
      Complex complex3 = complex2.createComplex((-2742.847922518), (-697.688596));
      Complex complex4 = complex3.log();
      Complex complex5 = complex1.atan();
      complex5.cos();
      complex1.tanh();
      Complex complex6 = Complex.NaN;
      Complex complex7 = (Complex)complex6.readResolve();
      Complex complex8 = complex3.createComplex((-407.0), (-2742.847922518));
      Complex complex9 = Complex.valueOf((-1334.75), (-407.0));
      complex9.isNaN();
      complex7.multiply((-697.688596));
      complex3.getImaginary();
      complex4.reciprocal();
      Complex complex10 = complex0.tan();
      complex9.conjugate();
      Complex complex11 = complex8.subtract(7124.0);
      Complex complex12 = new Complex((-2742.847922518));
      complex12.hashCode();
      complex4.exp();
      Complex complex13 = Complex.I;
      Complex complex14 = complex8.conjugate();
      complex14.sqrt1z();
      complex3.hashCode();
      Complex complex15 = Complex.NaN;
      Complex complex16 = Complex.NaN;
      complex16.subtract(complex10);
      complex11.reciprocal();
      complex16.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-999.460240798), (-999.460240798));
      complex0.ZERO.acos();
      complex0.isInfinite();
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex((-999.460240798));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.multiply(2033);
      complex0.add((double) 2033);
      Complex complex5 = complex0.reciprocal();
      complex4.getField();
      complex5.readResolve();
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      complex0.nthRoot(4412);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex2.tan();
      Complex complex6 = new Complex(4412);
      complex3.pow((double) 4412);
      complex5.pow(complex5);
      complex4.readResolve();
      complex6.getField();
      Complex complex7 = Complex.ONE;
      complex7.toString();
      complex0.conjugate();
      complex5.sin();
      Complex complex8 = Complex.INF;
      complex8.nthRoot(4404);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(643.489596360339, (-48.34));
      complex0.I.log();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex1.NaN.nthRoot(4375);
      complex0.ZERO.sqrt();
      Complex complex2 = complex0.sqrt();
      complex0.acos();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex3.INF.cosh();
      complex5.NaN.hashCode();
      complex1.NaN.readResolve();
      Complex complex6 = complex0.acos();
      complex3.tanh();
      Complex complex7 = complex1.add((double) 4375);
      Complex complex8 = complex5.createComplex((-0.252271441652467), 6.283185307179586);
      Complex complex9 = complex6.cos();
      Complex.valueOf(6.283185307179586, (-0.252271441652467));
      Complex.valueOf((-1042.3749), (-0.24705266043266486));
      complex9.negate();
      complex2.asin();
      complex7.add(0.252271441652467);
      complex4.reciprocal();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.divide(112.8);
      Complex complex3 = complex1.createComplex((-227.094), 3979.8204287);
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.atan();
      complex4.cos();
      Complex complex6 = complex1.tanh();
      complex6.readResolve();
      complex2.createComplex(2000.124158986, (-227.094));
      Complex complex7 = Complex.INF;
      complex7.isNaN();
      Complex complex8 = complex0.multiply(3979.8204287);
      complex5.getImaginary();
      complex3.reciprocal();
      Complex complex9 = Complex.ONE;
      complex9.tan();
      complex4.conjugate();
      Complex complex10 = complex9.subtract(0.5483922958374023);
      complex1.hashCode();
      Complex complex11 = Complex.valueOf(Double.NaN, 6.283185307179586);
      complex11.exp();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex12.sqrt1z();
      complex13.hashCode();
      Complex complex14 = Complex.NaN;
      complex8.subtract(complex12);
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-697.688596));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.divide((-999.460240798));
      Complex complex3 = complex2.createComplex((-2742.847922518), (-697.688596));
      Complex complex4 = complex3.log();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.tanh();
      Complex complex8 = Complex.NaN;
      complex8.readResolve();
      Complex complex9 = complex6.createComplex(7124.0, (-407.0));
      complex8.isNaN();
      complex8.multiply(3715.92860984126);
      complex9.getImaginary();
      complex7.reciprocal();
      Complex complex10 = complex5.tan();
      complex2.conjugate();
      complex5.subtract((-108.786));
      complex2.hashCode();
      Complex complex11 = complex10.exp();
      Complex complex12 = Complex.I;
      complex11.I.conjugate();
      complex12.sqrt1z();
      complex11.hashCode();
      Complex complex13 = Complex.NaN;
      try { 
        complex4.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3715.92860984126, (-2825.492122679));
      Complex complex1 = complex0.acos();
      complex1.isInfinite();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.INF;
      complex3.getReal();
      Complex complex4 = Complex.valueOf((-1.602000800745108E-9));
      Complex complex5 = complex4.pow(3715.92860984126);
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = Complex.valueOf(3715.92860984126);
      complex7.toString();
      Complex complex8 = complex7.divide((-582.18645));
      Complex complex9 = complex8.cosh();
      complex5.tan();
      Complex.valueOf((-2825.492122679));
      Complex complex10 = complex4.add(complex9);
      Complex complex11 = complex2.cos();
      complex11.subtract(complex10);
      complex10.pow((-2825.492122679));
      Complex complex12 = new Complex(4.255446699237779E-11, 517.561211351776);
      complex6.divide(complex2);
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-793.972), 1065.605508);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.acos();
      complex2.toString();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.tan();
      complex2.getArgument();
      Complex complex6 = Complex.valueOf(1065.605508, 6.283185307179586);
      complex1.getArgument();
      complex1.getReal();
      complex6.toString();
      complex2.tanh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.subtract(complex3);
      complex1.pow(complex6);
      Complex complex10 = complex1.negate();
      complex5.multiply(1065.605508);
      complex10.sqrt1z();
      complex9.multiply(3062);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4382.654426747134), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.sin();
      Complex complex5 = Complex.valueOf((-4382.654426747134), (-793.972));
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex6.I.tanh();
      complex7.I.acos();
      complex3.ZERO.toString();
      Complex complex8 = complex3.ZERO.reciprocal();
      Complex complex9 = complex1.tan();
      complex9.INF.getArgument();
      Complex.valueOf((-1.0), (-1.0));
      complex0.getArgument();
      complex9.getReal();
      complex8.toString();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex8.exp();
      Complex complex12 = complex6.subtract(complex11);
      complex12.pow(complex3);
      Complex complex13 = complex8.negate();
      complex13.multiply((-1626.71233368));
      Complex complex14 = complex4.conjugate();
      complex14.I.multiply((-4382.654426747134));
      complex10.sin();
      complex7.sqrt();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      // Undeclared exception!
      complex0.nthRoot(1073785);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-656.90259313405), 2.0829952491625585E-8);
      complex0.getReal();
      Complex complex1 = complex0.pow(2.0829952491625585E-8);
      Complex complex2 = complex0.divide(complex1);
      complex0.toString();
      Complex complex3 = complex0.divide(2826.4094727);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.valueOf(2826.4094727);
      complex2.add(complex5);
      complex3.cos();
      Complex complex7 = Complex.ZERO;
      complex7.subtract(complex6);
      complex3.pow(2.0829952491625585E-8);
      Complex complex8 = new Complex(954.314818, (-841.0701633281682));
      Complex complex9 = complex0.divide(complex2);
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.INF.atan();
      Complex complex2 = complex1.subtract(complex0);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-819.121), 3065.615124);
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.add(complex1);
      complex1.getArgument();
      complex0.nthRoot(2540);
      Complex complex3 = complex2.multiply(2146082070);
      Complex complex4 = complex2.createComplex((-2038.2), (-0.35825882209068377));
      complex4.getField();
      complex2.isNaN();
      complex3.toString();
      complex1.getArgument();
      complex3.getImaginary();
      Complex complex5 = complex1.subtract((double) 1169);
      Complex complex6 = complex3.pow(complex0);
      Complex complex7 = complex5.add(582.180838194905);
      complex7.tan();
      Complex complex8 = new Complex(353.6795);
      complex8.pow(0.0);
      complex7.pow(complex8);
      complex6.readResolve();
      complex7.getField();
      complex6.toString();
      complex0.conjugate();
      complex5.sin();
      try { 
        complex2.nthRoot((-2972));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,972
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex.valueOf((-20.0), 0.0);
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3715.92860984126);
      complex0.sin();
      Complex complex1 = complex0.ONE.divide(3715.92860984126);
      complex1.INF.createComplex(3715.92860984126, 3715.92860984126);
      Complex complex2 = complex0.log();
      complex0.atan();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.tanh();
      complex3.readResolve();
      Complex complex5 = complex3.I.createComplex(3715.92860984126, 3715.92860984126);
      complex2.isNaN();
      Complex complex6 = complex4.ONE.multiply(3715.92860984126);
      complex1.getImaginary();
      complex4.ONE.reciprocal();
      complex2.ZERO.tan();
      complex4.conjugate();
      Complex complex7 = Complex.valueOf((-2395.72949));
      complex7.tanh();
      complex7.exp();
      complex3.subtract(complex1);
      complex7.pow(complex4);
      complex6.negate();
      complex2.multiply((-2395.72949));
      complex5.sqrt1z();
      complex7.multiply(3062);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.add((-1317.8375925327073));
      complex0.INF.toString();
      complex0.hashCode();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.sqrt();
      complex3.INF.multiply(2550);
      complex1.cos();
      complex0.pow((-3034.697));
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-324.2191154050539));
      complex0.readResolve();
      complex0.isNaN();
      Complex complex1 = complex0.createComplex((-2395.72949), (-324.2191154050539));
      Complex complex2 = new Complex(1268.5488, (-324.2191154050539));
      complex2.INF.tan();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.NaN.sqrt1z();
      complex1.NaN.pow(complex2);
      complex0.hashCode();
      complex0.getArgument();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.cosh();
      complex6.negate();
      complex1.ZERO.cos();
      Complex.valueOf(1268.5488);
      Complex complex7 = complex1.log();
      complex5.ONE.acos();
      complex6.subtract(3.060737220976933E-278);
      complex7.tanh();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1551.19088613, 1551.19088613);
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex0.ONE.createComplex(3921.149808, 3921.149808);
      Complex complex3 = Complex.ZERO;
      complex3.I.conjugate();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ZERO.multiply(1551.19088613);
      complex4.hashCode();
      Complex complex6 = complex3.pow(complex2);
      Complex complex7 = complex0.tan();
      complex7.INF.conjugate();
      complex7.INF.pow(complex0);
      Complex complex8 = complex6.divide(0.0);
      Complex complex9 = complex6.ZERO.sqrt();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex10.conjugate();
      complex1.getImaginary();
      complex6.getReal();
      complex9.asin();
      complex8.getImaginary();
      Complex complex12 = new Complex(3921.149808, (-4638.1781));
      complex7.subtract(complex12);
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-20.0);
      complex0.I.acos();
      Complex complex1 = complex0.INF.multiply(1.1740089468291563E-7);
      Complex complex2 = Complex.NaN;
      complex1.ONE.divide(complex2);
      Complex complex3 = complex0.createComplex(0.0, (-20.0));
      complex3.cosh();
      Complex complex4 = complex3.I.subtract(5.593494835247651E-9);
      complex0.hashCode();
      complex4.negate();
      complex0.sin();
      Complex.valueOf(1.1740089468291563E-7, 1.1740089468291563E-7);
      complex2.cosh();
      complex0.INF.pow((-2696.0352));
      Complex complex5 = Complex.valueOf((-1168.0));
      complex4.abs();
      try { 
        complex5.nthRoot((-1236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,236
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      complex0.nthRoot(4401);
      Complex complex1 = complex0.sqrt();
      complex0.INF.sinh();
      complex1.ONE.cos();
      complex1.I.asin();
      Complex complex2 = complex1.divide(1362.6);
      Complex.valueOf(1362.6, (double) 4401);
      Complex complex3 = complex0.divide(8.98570720774568E-8);
      Complex complex4 = complex2.subtract(1400.8110413);
      complex4.getField();
      complex4.getField();
      complex3.divide(1400.8110413);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide((-923.6370169498373));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.573691633515306E-8, 0.5483922958374023);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.add((-1652.0));
      complex1.abs();
      complex1.hashCode();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.ONE.add(complex2);
      complex0.I.getArgument();
      complex3.ZERO.nthRoot(1169);
      Complex complex5 = complex3.NaN.multiply(1771);
      Complex complex6 = complex3.I.createComplex(0.5483922958374023, 0.499314300505665);
      complex6.I.getField();
      complex3.isNaN();
      complex1.toString();
      complex3.getArgument();
      complex0.getImaginary();
      complex3.ONE.subtract(0.0);
      Complex complex7 = complex3.pow(complex0);
      Complex complex8 = complex7.add(Double.NaN);
      Complex complex9 = complex3.tan();
      complex9.NaN.pow(1.573691633515306E-8);
      complex9.ONE.pow(complex2);
      complex7.readResolve();
      complex7.ZERO.getField();
      complex3.toString();
      complex4.conjugate();
      complex8.sin();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.multiply((-1992));
      complex1.I.subtract(complex0);
      Complex complex2 = complex0.pow(0.0);
      complex1.ZERO.conjugate();
      complex0.readResolve();
      complex2.I.subtract(0.0);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.I.subtract(0.0);
      complex0.log();
      complex1.NaN.divide(complex6);
      complex4.NaN.sinh();
      complex3.sqrt1z();
      complex4.multiply(0.0);
      Complex complex7 = complex0.asin();
      complex5.sqrt();
      complex2.isNaN();
      complex7.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-999.460240798), (-999.460240798));
      Complex complex1 = complex0.ZERO.acos();
      complex0.isInfinite();
      Complex complex2 = complex0.acos();
      complex1.getReal();
      Complex complex3 = complex1.pow(1.5707963267948966);
      Complex complex4 = complex3.NaN.divide(complex2);
      complex4.INF.toString();
      complex4.ONE.divide((-999.460240798));
      Complex complex5 = complex0.cosh();
      complex3.INF.tan();
      Complex complex6 = Complex.valueOf(1.5707963267948966);
      Complex complex7 = complex5.add(complex6);
      complex7.cos();
      Complex complex8 = complex3.subtract(complex1);
      Complex complex9 = complex8.pow(137.3221);
      Complex complex10 = new Complex(517.561211351776, 253.9185037786884);
      complex9.ZERO.divide(complex10);
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      complex0.INF.multiply(45.68250546026965);
      Complex complex1 = complex0.NaN.divide(45.68250546026965);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.INF.sqrt();
      complex3.ONE.abs();
      complex3.ZERO.toString();
      complex3.divide(complex0);
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex2.sqrt1z();
      complex6.tan();
      complex6.NaN.readResolve();
      complex5.exp();
      Complex complex7 = complex5.asin();
      complex7.ONE.getField();
      Complex complex8 = complex2.sinh();
      complex8.INF.atan();
      complex5.multiply(complex0);
      complex2.acos();
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(254.41770724, (-1141.69));
      Complex complex1 = complex0.negate();
      complex1.abs();
      Complex complex2 = complex0.pow(complex1);
      complex2.equals(complex1);
      complex0.I.multiply(complex2);
      complex2.ONE.sqrt();
      complex0.isNaN();
      complex2.ZERO.tan();
      complex1.toString();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.atan();
      complex2.subtract(1169.6941591105165);
      complex4.getReal();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.ONE.add(1.5706103738804686);
      complex5.ONE.atan();
      int int0 = 0;
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.536961912893389E-9, (-2747.5952971511465));
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ZERO.sin();
      complex1.I.hashCode();
      Complex complex3 = complex1.NaN.sqrt1z();
      complex0.I.add((-763.44145578));
      Complex complex4 = complex0.INF.multiply(complex1);
      complex4.ZERO.sin();
      complex3.INF.multiply((-1294.9398865238647));
      Complex complex5 = complex0.INF.cosh();
      complex0.toString();
      complex0.pow(complex5);
      complex2.add((-2.8064314757880205E-8));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-656.90259313405));
      Complex complex1 = complex0.multiply(2033);
      complex1.ONE.readResolve();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.divide((-584.134));
      complex1.subtract(0.0);
      complex0.hashCode();
      Complex complex2 = complex0.exp();
      complex2.INF.hashCode();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.multiply(complex3);
      complex4.INF.abs();
      complex2.INF.conjugate();
      complex3.multiply(complex2);
      complex0.INF.divide(complex4);
      try { 
        complex3.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-483.49514223257));
      complex0.I.divide(0.0);
      complex0.I.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.conjugate();
      complex1.INF.cosh();
      complex1.INF.readResolve();
      Complex complex3 = complex1.subtract((-483.49514223257));
      complex3.NaN.multiply(complex2);
      Complex complex4 = Complex.valueOf((-483.49514223257));
      Complex complex5 = complex0.atan();
      Complex.valueOf(0.0);
      complex5.INF.multiply(complex1);
      complex0.exp();
      complex4.tanh();
      complex5.isNaN();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double double0 = 1579.6;
      Complex complex0 = new Complex(1579.6, 1579.6);
      Complex complex1 = null;
      complex0.ONE.toString();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2275.12051164261), (-213.82914284227));
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex1.readResolve();
      complex0.I.cosh();
      Complex complex3 = Complex.valueOf((-2275.12051164261));
      Complex complex4 = complex1.I.exp();
      complex1.INF.createComplex((-2275.12051164261), 1173.9721);
      Complex complex5 = complex0.ONE.cosh();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex2.ZERO.add((-213.82914284227));
      complex2.ZERO.toString();
      Complex complex8 = complex1.divide((-213.82914284227));
      complex2.nthRoot(3917);
      Complex complex9 = complex1.divide(complex6);
      Complex complex10 = complex8.divide(complex3);
      complex10.tan();
      complex7.cosh();
      complex2.atan();
      complex4.add(complex5);
      Complex complex11 = complex5.tanh();
      complex11.abs();
      complex9.multiply(797);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.abs();
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.reciprocal();
      complex1.I.createComplex(1.1548223864099742E-17, 47.8432200229591);
      complex0.pow(complex1);
      Complex complex3 = complex1.divide(complex2);
      Complex.valueOf(2.0);
      complex1.equals("(Infinity, Infinity)");
      complex3.hashCode();
      complex0.hashCode();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      complex0.isNaN();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3715.92860984126);
      complex0.sin();
      Complex complex1 = complex0.ONE.divide(3715.92860984126);
      Complex complex2 = complex1.INF.createComplex(3715.92860984126, 3715.92860984126);
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.tanh();
      complex5.readResolve();
      complex5.I.createComplex(3715.92860984126, 3715.92860984126);
      complex3.isNaN();
      complex6.ONE.multiply(3715.92860984126);
      complex1.getImaginary();
      Complex complex7 = complex6.ONE.reciprocal();
      complex3.ZERO.tan();
      Complex complex8 = complex6.conjugate();
      complex8.NaN.subtract(0.0);
      complex8.I.hashCode();
      complex8.exp();
      complex2.sqrt1z();
      complex2.hashCode();
      Complex complex9 = Complex.NaN;
      complex4.subtract(complex9);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.add(0.5925495624542236);
      Complex complex2 = complex0.I.atan();
      complex2.INF.tan();
      complex1.INF.atan();
      complex1.INF.conjugate();
      Complex complex3 = Complex.valueOf(2864.108137177884);
      complex0.NaN.divide(complex2);
      Complex complex4 = Complex.valueOf(0.0, 2864.108137177884);
      complex0.getReal();
      complex4.I.getArgument();
      Complex complex5 = Complex.valueOf(0.46853768825531006, 0.5925495624542236);
      Complex complex6 = complex5.NaN.sqrt();
      complex4.getField();
      Complex complex7 = complex2.pow(complex4);
      complex3.I.sinh();
      complex2.hashCode();
      Complex complex8 = complex7.tan();
      complex8.abs();
      complex1.negate();
      complex3.nthRoot(1430);
      complex8.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2745.2960888, 2745.2960888);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.INF.atan();
      complex3.NaN.readResolve();
      complex3.cos();
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex0.ZERO.add(complex4);
      Complex complex6 = complex4.I.sinh();
      Complex complex7 = Complex.valueOf(3480.7590543930455, 2745.2960888);
      complex7.INF.cos();
      complex0.isNaN();
      Complex complex8 = complex2.divide(complex1);
      complex2.I.negate();
      Complex complex9 = complex8.cosh();
      complex2.isNaN();
      complex9.isNaN();
      complex2.toString();
      complex9.getImaginary();
      Complex complex10 = complex5.cos();
      complex10.INF.readResolve();
      Complex complex11 = complex1.atan();
      complex11.ONE.tanh();
      Complex.valueOf(Double.NaN, Double.NaN);
      Object object0 = new Object();
      complex9.equals(object0);
      complex0.createComplex(2745.2960888, 0.0);
      complex9.conjugate();
      complex2.log();
      complex5.equals(complex6);
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      int int0 = 0;
      complex1.ZERO.readResolve();
      double double0 = 5.609418227003629E-301;
      Complex complex2 = Complex.valueOf(5.609418227003629E-301);
      complex2.getArgument();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      int int0 = (-4884);
      complex0.NaN.multiply((-4884));
      complex1.INF.sqrt();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.ZERO.multiply((-4884));
      Complex complex5 = complex1.divide(0.0);
      complex2.ONE.getArgument();
      Complex.valueOf((-2486.42), 0.0);
      complex2.I.sqrt1z();
      Complex complex6 = complex5.I.multiply(0.0);
      complex1.isInfinite();
      complex2.INF.hashCode();
      complex3.getArgument();
      complex0.NaN.abs();
      complex2.tan();
      Complex.valueOf(0.0, (double) (-4884));
      Complex complex7 = complex0.pow(0.0);
      complex7.ONE.sqrt1z();
      complex0.subtract((-1.0));
      complex5.ONE.nthRoot(1);
      complex6.multiply(0);
      try { 
        complex4.nthRoot((-1735));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,735
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.negate();
      complex1.negate();
      complex0.readResolve();
      complex3.I.sinh();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex3.INF.tanh();
      complex6.INF.hashCode();
      complex4.ZERO.subtract(complex1);
      complex3.cos();
      complex2.sqrt1z();
      Complex complex7 = complex3.negate();
      complex7.INF.multiply((-1916));
      complex1.isInfinite();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex8.negate();
      complex5.reciprocal();
      complex9.subtract((double) (-1916));
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1841.525, (-20.0));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.log();
      complex3.NaN.divide(2209.3273976);
      complex0.ZERO.tanh();
      Complex complex4 = complex0.sqrt1z();
      complex0.getReal();
      Complex complex5 = complex4.sinh();
      Complex complex6 = Complex.valueOf(1841.525);
      complex6.ZERO.toString();
      complex0.NaN.cosh();
      Complex complex7 = complex5.cos();
      complex4.hashCode();
      Complex complex8 = complex7.cos();
      complex8.I.log();
      complex2.isNaN();
      complex1.asin();
      complex4.cosh();
      complex5.log();
      try { 
        complex2.I.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(3.1408919441362495E-288, 3.1408919441362495E-288);
      Complex complex1 = Complex.valueOf(3.1408919441362495E-288);
      Complex complex2 = complex1.INF.tanh();
      complex2.INF.cosh();
      complex1.getArgument();
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ZERO.subtract(0.0);
      complex3.nthRoot(1423);
      Complex complex6 = complex0.createComplex(3.1408919441362495E-288, 0.0);
      Complex complex7 = complex6.ONE.pow(3.1408919441362495E-288);
      complex7.NaN.getField();
      complex7.ZERO.toString();
      complex0.NaN.asin();
      complex6.ONE.getArgument();
      complex0.equals(complex6);
      complex6.cosh();
      Complex complex8 = complex6.atan();
      complex1.asin();
      complex1.pow(complex8);
      complex7.toString();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3548774719238281, 0.0);
      Complex complex1 = complex0.ONE.tan();
      complex0.ZERO.getArgument();
      complex0.getArgument();
      complex0.isNaN();
      complex1.divide((-2474.903081503));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-82.55237568477));
      complex0.add((-330.0101));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.12139818505956E-9), (-7.12139818505956E-9));
      Complex complex1 = complex0.add((-7.12139818505956E-9));
      complex0.ONE.multiply(7.799913824734797E-9);
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.sin();
      complex1.getField();
      Complex.valueOf((-7.12139818505956E-9));
      complex2.toString();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3065.615124, (-819.121));
      Complex complex1 = Complex.valueOf(2781.7);
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.negate();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4382.654426747134), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.sinh();
      complex3.sin();
      Complex complex4 = Complex.valueOf((-4382.654426747134), (-793.972));
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex5.I.tanh();
      complex6.I.acos();
      complex3.ZERO.toString();
      Complex complex7 = complex3.ZERO.reciprocal();
      Complex complex8 = complex1.tan();
      complex8.INF.getArgument();
      Complex.valueOf((-1.0), (-1.0));
      complex0.getArgument();
      complex8.getReal();
      complex7.toString();
      complex2.tanh();
      Complex complex9 = complex7.exp();
      Complex complex10 = complex5.subtract(complex9);
      complex10.pow(complex3);
      Complex complex11 = complex7.negate();
      complex11.multiply((-1626.71233368));
      Complex complex12 = complex10.sqrt1z();
      complex12.multiply(3062);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.asin();
      complex1.NaN.getField();
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.pow(0.0);
      complex2.I.sinh();
      complex2.INF.sin();
      complex0.hashCode();
      complex2.toString();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.ONE.pow(complex2);
      try { 
        complex6.I.nthRoot((-1034));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,034
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex0.ZERO.add(complex1);
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.INF.multiply(1);
      String string0 = complex3.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex5.I.sqrt();
      complex6.NaN.getArgument();
      complex5.ONE.multiply(complex4);
      complex0.getArgument();
      Complex complex7 = complex6.pow(Double.NaN);
      Complex complex8 = Complex.valueOf((-3475.36));
      complex8.NaN.tanh();
      Complex complex9 = Complex.valueOf(20.0);
      Complex complex10 = (Complex)complex9.ONE.readResolve();
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex9.add(complex8);
      Complex complex13 = complex12.tan();
      Complex complex14 = complex12.INF.multiply((-3475.36));
      Complex complex15 = complex2.multiply((-1165));
      Complex complex16 = complex11.ZERO.conjugate();
      complex15.ZERO.abs();
      complex15.add(3236.425302282);
      complex11.tan();
      Complex complex17 = complex6.sqrt();
      assertEquals(0.9238795325112867, complex17.getReal(), 0.01);
      
      Complex complex18 = complex8.atan();
      Complex complex19 = complex18.ZERO.asin();
      assertEquals((-1.5705085868276984), complex18.getReal(), 0.01);
      assertEquals(1.1102230246251564E-16, complex18.getImaginary(), 0.01);
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertEquals(0.0, complex19.getReal(), 0.01);
      
      complex15.log();
      Complex complex20 = complex4.subtract(Double.NaN);
      assertSame(complex20, complex11);
      
      Complex complex21 = complex5.subtract(complex3);
      assertSame(complex3, complex14);
      assertTrue(complex21.isInfinite());
      assertNotSame(complex4, complex16);
      assertSame(complex4, complex7);
      
      Complex complex22 = complex13.multiply(3236.425302282);
      assertEquals(0.41329987486268255, complex13.getReal(), 0.01);
      assertEquals(0.0, complex22.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-5.67996159922899E-5));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.I.pow((-5.67996159922899E-5));
      Complex complex3 = complex1.NaN.createComplex(1112.20570287, (-5.67996159922899E-5));
      complex3.log();
      Complex complex4 = complex2.pow((-5.67996159922899E-5));
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex1.multiply((-5.67996159922899E-5));
      Complex complex7 = Complex.valueOf((-5.67996159922899E-5));
      Complex complex8 = complex1.I.divide((-5.67996159922899E-5));
      assertEquals((-17605.752830014593), complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      
      List<Complex> list0 = complex7.nthRoot(1);
      assertFalse(list0.isEmpty());
      
      Complex complex9 = complex7.subtract(complex5);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex2.tan();
      assertEquals((-3.0562693007440793E-4), complex10.getImaginary(), 0.01);
      assertEquals(1.5574076685530422, complex10.getReal(), 0.01);
      
      Complex complex11 = complex4.cos();
      assertEquals((-4.264320337292829E-9), complex11.getImaginary(), 0.01);
      
      complex1.getArgument();
      boolean boolean0 = complex6.equals(object0);
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(828.326, 828.326);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex2.ZERO.getField();
      assertEquals((-828.326), complex2.getReal(), 0.01);
      assertEquals(828.326, complex2.getImaginary(), 0.01);
      
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1275.3);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1275.3, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }
}
