/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:25:41 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.573691633515306E-8, 1.573691633515306E-8);
      Complex complex1 = new Complex(54.937618628617);
      complex0.NaN.pow(complex1);
      Complex complex2 = Complex.valueOf(4026.04, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(complex2);
      complex0.nthRoot(4062);
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(3.0220784595602374E-9);
      Complex complex3 = Complex.valueOf(3.0220784595602374E-9, Double.POSITIVE_INFINITY);
      complex3.ZERO.subtract(3.0220784595602374E-9);
      complex1.abs();
      complex3.multiply(complex1);
      complex3.nthRoot(1567);
      Complex complex4 = Complex.INF;
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.INF.multiply(complex2);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(3.0220784595602374E-9);
      Complex.valueOf(3.0220784595602374E-9, Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.acos();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = new Complex(1959.78434, Double.POSITIVE_INFINITY);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((double) 37, Double.POSITIVE_INFINITY);
      complex1.ZERO.multiply((-1798.96));
      Complex complex2 = complex1.multiply(56);
      complex2.pow(complex1);
      complex0.subtract(1.526100002923062E263);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-399.0));
      Complex complex1 = complex0.log();
      complex1.abs();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.multiply((double) (-483));
      complex1.atan();
      complex0.conjugate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex3.sin();
      complex2.multiply((-4273));
      complex2.acos();
      Complex complex7 = complex4.createComplex(6.762933036344867, 0.21922963857650757);
      complex7.log();
      complex2.cosh();
      Complex complex8 = complex4.multiply(0.21922963857650757);
      complex5.acos();
      complex5.tan();
      Complex complex9 = Complex.ONE;
      complex6.multiply(349);
      Complex complex10 = Complex.ZERO;
      complex10.cos();
      Complex complex11 = Complex.NaN;
      complex6.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply((-4273));
      complex2.acos();
      Complex complex3 = complex1.createComplex((-1368.0), Double.POSITIVE_INFINITY);
      complex2.cosh();
      Complex complex4 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.tan();
      complex2.multiply(1044);
      Complex complex7 = new Complex(349, 0.8813735870195428);
      complex7.multiply((-222));
      complex6.cos();
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.ONE;
      Complex complex10 = new Complex((-502.123533), (-1368.0));
      complex9.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1207.98), (-1207.98));
      complex0.readResolve();
      Complex complex1 = complex0.I.add((-20.0));
      Complex complex2 = complex0.createComplex((-20.0), (-20.0));
      complex2.tanh();
      Complex complex3 = complex1.log();
      complex2.tanh();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.573691633515306E-8, 1.573691633515306E-8);
      complex0.ONE.hashCode();
      Complex complex1 = Complex.valueOf(1.573691633515306E-8);
      complex1.tan();
      Complex complex2 = new Complex(0.7249995199969751, Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      complex0.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.createComplex((-4473.8783), 0.6857960224151611);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf((-111.9986484501));
      complex1.multiply(complex3);
      complex4.toString();
      Complex complex6 = complex1.atan();
      complex2.hashCode();
      complex3.nthRoot(189);
      complex6.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.I;
      complex1.reciprocal();
      Complex complex3 = complex0.acos();
      complex3.ONE.cos();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.acos();
      Complex.valueOf(Double.NaN);
      complex3.atan();
      Complex complex4 = new Complex(0.3041473627090454);
      complex1.reciprocal();
      Complex complex5 = new Complex((-1573.96246), 0.3041473627090454);
      Complex complex6 = complex5.tanh();
      complex6.multiply(257);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.sqrt();
      Complex complex1 = Complex.ZERO;
      complex0.createComplex(Double.POSITIVE_INFINITY, 0.6857960224151611);
      Complex complex2 = Complex.I;
      Complex.valueOf((-1.696746473863933E-8));
      Complex complex3 = Complex.I;
      complex1.hashCode();
      Complex complex4 = Complex.I;
      complex0.divide((-1.696746473863933E-8));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 2.1552386987482013E-181);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.acos();
      complex2.I.subtract((-880.09025458));
      Complex complex3 = complex2.atan();
      complex3.ZERO.sinh();
      Complex complex4 = new Complex((-2141.905142));
      complex1.reciprocal();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(7035.997843892803, 618279.6208763936);
      Complex complex2 = new Complex(618279.6208763936, Double.NaN);
      complex2.reciprocal();
      Complex complex3 = complex1.createComplex((-1.89333199110902E-8), 0.6557942026326724);
      complex3.asin();
      Complex complex4 = Complex.I;
      Complex.valueOf(0.6557942026326724);
      Complex complex5 = Complex.I;
      complex0.hashCode();
      Complex complex6 = Complex.I;
      complex1.readResolve();
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.INF.sqrt();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.I.conjugate();
      complex3.ZERO.multiply((-4884));
      Complex.valueOf((double) (-4884));
      Complex.valueOf((double) (-4884));
      complex3.sinh();
      complex1.subtract(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.multiply((-4884));
      complex1.sqrt();
      Complex complex2 = Complex.valueOf((double) (-4884), (-3.411186219855533E217));
      Complex complex3 = Complex.valueOf((double) (-4884), (-2611.774));
      Complex complex4 = Complex.NaN;
      complex3.multiply((-2434));
      Complex complex5 = new Complex((-2611.774));
      Complex complex6 = new Complex((-2611.774), (-2434));
      complex6.readResolve();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf(0.0, (-2611.774));
      Complex complex3 = complex1.reciprocal();
      Complex.valueOf(0.6857960224151611, 0.0);
      complex1.sqrt1z();
      Complex complex4 = complex0.multiply(0.0);
      complex3.isInfinite();
      complex1.hashCode();
      complex4.getArgument();
      complex3.abs();
      Complex complex5 = Complex.I;
      complex5.tan();
      Complex.valueOf((-12.652358908351118), 0.0);
      Complex complex6 = complex4.pow((-2611.774));
      complex6.sqrt1z();
      Complex complex7 = complex5.subtract(Double.NaN);
      complex2.nthRoot(1);
      Complex complex8 = complex2.multiply(458);
      complex7.nthRoot(2953);
      complex6.conjugate();
      complex8.divide(complex3);
      Complex.valueOf((double) 1, 0.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.NaN;
      complex5.cos();
      Complex complex6 = complex2.tanh();
      complex3.conjugate();
      complex6.abs();
      Complex complex7 = complex4.add(0.0);
      complex3.tan();
      complex3.sqrt();
      complex3.atan();
      complex1.asin();
      complex6.log();
      complex3.subtract(9.727979174888975E-9);
      Complex complex8 = new Complex(0.0);
      complex7.subtract(complex8);
      complex2.multiply((-475.53988));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3290.789, 3290.789);
      complex0.INF.getField();
      Complex complex1 = complex0.NaN.pow(1.0);
      complex1.ONE.subtract(281.49830424081);
      complex0.I.hashCode();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.exp();
      complex3.ZERO.abs();
      complex0.ZERO.multiply((-238));
      complex3.readResolve();
      complex3.cosh();
      complex2.readResolve();
      Complex complex4 = complex3.sin();
      complex4.INF.cos();
      Complex complex5 = complex0.negate();
      complex4.readResolve();
      Complex complex6 = complex2.pow(complex5);
      complex6.NaN.multiply(680.4711);
      complex0.nthRoot(741);
      complex4.sin();
      Complex complex7 = complex3.cosh();
      Complex.valueOf((-454.8));
      complex7.atan();
      complex5.multiply(1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.log();
      complex2.atan();
      Complex complex4 = Complex.NaN;
      Complex.valueOf(0.0, (-1194.8));
      Complex complex5 = new Complex(Double.NaN, 920.06792);
      complex5.pow((-3558.3569603896));
      complex0.sqrt1z();
      Complex complex6 = complex0.subtract((-1716.96869383772));
      complex3.multiply(1272);
      Complex.valueOf(0.0, (-1194.8));
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex.valueOf(0.0, (-2611.774));
      Complex complex2 = complex1.reciprocal();
      complex0.createComplex(0.6857960224151611, 3083.0);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.I;
      complex3.I.asin();
      complex1.hashCode();
      Complex complex6 = Complex.I;
      complex3.readResolve();
      Complex complex7 = new Complex((-784.595928));
      complex6.equals(complex7);
      complex3.tan();
      complex5.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = Complex.NaN;
      complex0.toString();
      complex1.reciprocal();
      Complex complex2 = complex1.createComplex((-4473.8783), 0.6857960224151611);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf((-111.9986484501));
      Complex complex6 = Complex.I;
      complex2.hashCode();
      Complex complex7 = Complex.I;
      complex3.readResolve();
      complex5.equals(complex1);
      complex0.tan();
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.subtract(0.0);
      complex0.getField();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.reciprocal();
      complex4.divide((-923.63701695));
      complex5.sqrt1z();
      complex3.conjugate();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-2160.613924151), 111.2459269);
      complex0.NaN.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.I.divide(complex2);
      complex3.toString();
      Complex complex5 = Complex.valueOf(Double.NaN, (-876.83));
      Complex complex6 = Complex.valueOf(8947.756488310137, (-557.691726171));
      Complex complex7 = complex0.reciprocal();
      complex1.nthRoot(37);
      complex6.nthRoot(37);
      complex2.multiply((double) 37);
      Complex.valueOf(985.33, 8947.756488310137);
      Complex complex8 = complex5.cos();
      complex4.multiply(Double.NaN);
      Complex complex9 = complex6.negate();
      complex9.INF.conjugate();
      complex7.conjugate();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.divide((-656.90259313405));
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex3.ZERO.subtract(complex1);
      Complex complex6 = complex5.INF.subtract(complex2);
      complex6.INF.divide(1945.360582353);
      complex0.toString();
      Complex complex7 = complex1.ZERO.multiply(complex4);
      complex2.ZERO.toString();
      complex0.isInfinite();
      complex2.NaN.tanh();
      Complex complex8 = complex2.sinh();
      complex2.abs();
      Complex complex9 = complex8.ONE.cos();
      complex1.getField();
      complex8.sqrt1z();
      Complex.valueOf(2.529461223278728E8, 2499.5780243688);
      complex7.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1205.226001075239), 3730.84615282);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = Complex.NaN;
      complex1.toString();
      Complex complex2 = Complex.valueOf(Double.NaN, (-997.10838933));
      complex2.reciprocal();
      Complex complex3 = complex0.createComplex(Double.NaN, Double.NaN);
      complex0.asin();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf(0.9955356606113078);
      Complex complex6 = Complex.I;
      complex2.hashCode();
      complex3.readResolve();
      Complex complex7 = Complex.valueOf(111.9986484501, 921.4760886875794);
      Object object0 = complex0.readResolve();
      complex7.equals(object0);
      complex5.tan();
      Complex complex8 = Complex.ZERO;
      complex4.multiply(complex2);
      complex0.multiply((-150.5669));
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4401);
      Complex complex2 = new Complex(4401, (-861.4773724));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.reciprocal();
      complex5.toString();
      complex4.createComplex((-1331.570064), (-5.667682106730711E-8));
      complex4.createComplex((-1331.570064), 4401);
      complex5.hashCode();
      Complex complex6 = complex5.multiply(complex0);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.subtract(0.0);
      complex2.I.createComplex(0.0, 0.0);
      Complex complex4 = complex3.I.add(0.0);
      complex0.getField();
      Complex complex5 = complex0.negate();
      complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.573691633515306E-8, 1.573691633515306E-8);
      Complex complex1 = complex0.tan();
      complex1.add(0.5483922958374023);
      complex0.log();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf(1.5736916335153057E-8, 1.573691633515306E-8);
      complex5.getArgument();
      complex2.readResolve();
      complex3.sqrt1z();
      Object object0 = new Object();
      complex6.equals(complex3);
      complex6.divide(complex2);
      complex6.multiply(836.78984924);
      Complex complex7 = Complex.valueOf(0.5483922958374023, Double.NaN);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4382.6544267), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.sinh();
      Complex complex4 = new Complex(834.9566911426, 1.5707963110579803);
      Complex complex5 = complex4.sin();
      Complex complex6 = Complex.valueOf(0.0, (-1355037.0853474364));
      complex2.acos();
      complex2.tanh();
      Complex complex7 = complex2.acos();
      complex6.toString();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = Complex.ONE;
      complex2.getArgument();
      Complex.valueOf(1.5707963110579803, 3.037241571064442E-4);
      complex3.getArgument();
      complex5.getReal();
      complex7.toString();
      complex8.tanh();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4382.6544267), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.sinh();
      complex3.sin();
      Complex complex4 = Complex.valueOf((-4382.6544267), (-4382.6544267));
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex5.I.tanh();
      complex6.I.acos();
      complex2.toString();
      complex3.ZERO.reciprocal();
      complex2.sqrt();
      Complex.valueOf(2342.27, 4.63985600437427E180);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.929730049292349), (-2.929730049292349));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.add(0.5483922958374023);
      Complex complex3 = Complex.ONE;
      complex2.hashCode();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex3.add(complex4);
      complex5.getArgument();
      complex4.nthRoot(1169);
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.pow(complex6);
      complex8.ZERO.multiply(1900.276702743284);
      complex3.pow(complex0);
      Complex complex9 = new Complex(1169, (-2.929730049292349));
      complex6.tan();
      complex3.conjugate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4382.6544267), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.sin();
      Complex complex5 = Complex.valueOf((-4382.6544267), (-4382.6544267));
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex7.I.acos();
      complex2.toString();
      complex3.ZERO.reciprocal();
      Complex complex9 = Complex.ONE;
      complex9.INF.getArgument();
      Complex.valueOf(0.0, 0.0);
      complex0.getArgument();
      complex9.getReal();
      complex9.toString();
      complex2.tanh();
      complex6.conjugate();
      Complex complex10 = complex4.exp();
      complex10.ONE.sqrt();
      complex8.add(complex3);
      complex4.subtract((-1671.652154883));
      Complex complex11 = Complex.INF;
      complex11.nthRoot(1166);
      complex0.readResolve();
      complex4.asin();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(3610.62705109, 7.790517593794744);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      complex2.readResolve();
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      complex1.pow(complex2);
      Complex complex4 = Complex.NaN;
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(1.1134037971496582);
      Complex complex1 = complex0.I.multiply(987);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.INF.reciprocal();
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.pow(0.9999999842630837);
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex9.pow((-1.0));
      complex10.NaN.sqrt();
      complex9.ONE.tan();
      complex10.NaN.negate();
      complex9.isInfinite();
      complex0.cos();
      complex4.ZERO.hashCode();
      complex1.INF.divide((-981.0));
      complex4.equals("EMPTY_CLUSTER_IN_K_MEANS");
      Complex complex11 = complex0.add(complex7);
      Complex complex12 = complex11.tanh();
      complex11.ONE.acos();
      complex8.pow(1.1134037971496582);
      complex7.add(complex6);
      Complex complex13 = complex2.subtract(complex12);
      complex13.abs();
      Complex complex14 = complex9.log();
      complex14.ZERO.tanh();
      complex2.sqrt();
      complex3.createComplex(2491.2513, 0.9999999842630837);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.acos();
      complex1.toString();
      complex1.reciprocal();
      Complex complex6 = complex5.tan();
      complex5.getArgument();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
      complex3.getArgument();
      complex2.getReal();
      complex6.toString();
      complex6.I.multiply(Double.NaN);
      complex7.tanh();
      complex3.exp();
      complex6.add(complex5);
      Complex complex8 = complex5.subtract(1400.8110413);
      complex8.getField();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, (-1732.93));
      complex9.getField();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.sqrt();
      Complex complex1 = new Complex((-1971.63705));
      double double0 = 5.8840879519086286E-204;
      Complex complex2 = complex0.INF.createComplex((-1971.63705), 2.0);
      Complex complex3 = complex1.ONE.multiply(146);
      Complex complex4 = complex1.ONE.pow(5.8840879519086286E-204);
      Complex complex5 = complex0.pow(complex1);
      Complex.valueOf(2.538936674204534E-9, 2.0);
      complex3.ZERO.multiply(146);
      Complex complex6 = complex5.atan();
      complex4.subtract(1.5736916335153064E-8);
      double double1 = (-9.185071463667081E-9);
      Complex.valueOf((-9.185071463667081E-9));
      double double2 = (-890.8351577822405);
      complex2.add((-890.8351577822405));
      complex3.isInfinite();
      try { 
        complex6.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2747.5952971511465));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-656.90259313405));
      complex0.getField();
      Complex complex1 = complex0.sqrt();
      complex1.sinh();
      Complex complex2 = complex0.cos();
      complex1.asin();
      Complex complex3 = Complex.I;
      complex3.divide((-8.943081874891003E-9));
      Complex.valueOf((-8.943081874891003E-9), 103.875145265);
      complex0.divide(1362.6);
      Complex complex4 = complex2.subtract(2.516456127166748);
      complex1.getField();
      complex4.getField();
      complex2.divide((-4.83901764243093E-296));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3715.92860984126);
      complex0.sin();
      Complex complex1 = complex0.ONE.divide(3715.92860984126);
      Complex complex2 = complex1.INF.createComplex(3715.92860984126, 3715.92860984126);
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.tanh();
      Complex complex7 = (Complex)complex5.readResolve();
      complex5.I.createComplex(3715.92860984126, 3715.92860984126);
      complex3.isNaN();
      complex6.ONE.multiply(3715.92860984126);
      complex1.getImaginary();
      complex6.ONE.reciprocal();
      complex3.ZERO.tan();
      Complex complex8 = complex7.tanh();
      complex2.exp();
      complex4.subtract(4.6588861918718874E-15);
      complex5.getField();
      Complex complex9 = new Complex((-2262.12183), 3715.92860984126);
      complex2.getField();
      complex8.divide((-2262.12183));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = (Complex)complex2.ONE.readResolve();
      Complex complex4 = Complex.NaN;
      complex3.cosh();
      Complex complex5 = complex3.atan();
      Complex complex6 = new Complex(9.686179886293545E-10, (-20.0));
      complex5.asin();
      complex0.pow(complex3);
      Complex complex7 = Complex.ZERO;
      complex1.toString();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-656.90259313405));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.pow(479.645);
      complex2.getField();
      complex1.toString();
      Complex complex3 = complex1.asin();
      complex1.getArgument();
      Complex complex4 = (Complex)complex0.readResolve();
      complex0.equals(complex3);
      Complex complex5 = Complex.NaN;
      complex5.I.divide(complex4);
      complex3.cosh();
      complex1.atan();
      Complex complex6 = new Complex(31.09, (-923.637));
      Complex complex7 = complex6.asin();
      complex6.ONE.reciprocal();
      complex2.pow(complex0);
      Complex complex8 = Complex.ZERO;
      complex8.toString();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9207658824286245E7, 1.9207658824286245E7);
      Complex complex1 = complex0.multiply(1.9207658824286245E7);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.tanh();
      complex4.NaN.conjugate();
      Complex complex5 = complex0.ZERO.subtract((-2776.2356529));
      complex5.INF.add(1.9207658824286245E7);
      Complex complex6 = complex0.ZERO.createComplex(1.9207658824286245E7, 1.9207658824286245E7);
      complex0.readResolve();
      Complex complex7 = complex0.log();
      complex7.INF.acos();
      complex6.equals("");
      Complex complex8 = complex3.INF.conjugate();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex9.I.multiply(complex0);
      complex10.INF.pow(complex9);
      complex7.exp();
      complex3.negate();
      complex9.abs();
      complex8.add(1.9207658824286245E7);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(0.0, (-793.972));
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.acos();
      complex5.toString();
      Complex complex6 = complex5.reciprocal();
      complex3.tan();
      complex6.getArgument();
      Complex complex7 = Complex.valueOf(0.0, 1.133337800638401E-4);
      complex7.getArgument();
      complex3.getReal();
      complex2.toString();
      complex4.tanh();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.exp();
      complex1.add(complex8);
      complex6.subtract(Double.POSITIVE_INFINITY);
      complex8.getField();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 1.0);
      complex1.getField();
      complex6.divide(1.1813470647695136E-8);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4382.654426747134), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.INF.sinh();
      complex3.sin();
      Complex complex4 = Complex.NaN;
      complex4.sinh();
      complex4.cos();
      Complex complex5 = complex0.asin();
      complex5.multiply((-2825));
      complex5.readResolve();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3715.92860984126);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(3715.92860984126);
      Complex complex3 = Complex.ZERO;
      complex3.cosh();
      complex1.getArgument();
      complex1.pow((-2130.326267212035));
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.subtract((-2130.326267212035));
      complex4.nthRoot(1158);
      complex5.divide(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.573691633515306E-8, 1.573691633515306E-8);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.add(0.5483922958374023);
      Complex complex3 = Complex.ONE;
      complex3.abs();
      complex2.hashCode();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex3.add(complex4);
      complex5.getArgument();
      complex4.nthRoot(1169);
      Complex complex6 = complex1.multiply(1771);
      complex3.createComplex(1169, 0.35825882209068377);
      complex1.getField();
      complex5.isNaN();
      complex3.toString();
      complex1.getArgument();
      complex2.getImaginary();
      complex0.subtract(0.7853981633974485);
      Complex complex7 = new Complex(1.573691633515306E-8);
      complex6.pow(complex7);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.add(1.0);
      complex7.tan();
      complex6.pow(1.0);
      Complex complex10 = Complex.ZERO;
      complex5.pow(complex10);
      complex4.readResolve();
      complex9.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(7.790517593794744, 7.699097067385825E-248);
      Complex complex2 = complex1.multiply(2033);
      complex0.readResolve();
      complex1.asin();
      complex2.sinh();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.573691633515306E-8, 0.5483922958374023);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.add((-1652.0));
      complex1.abs();
      complex1.hashCode();
      complex1.acos();
      Complex complex3 = complex0.ONE.add(complex2);
      complex0.I.getArgument();
      complex2.acos();
      complex2.toString();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex3.tan();
      complex4.getArgument();
      Complex complex6 = Complex.valueOf(2.3570761680603027, 0.5483922958374023);
      Complex complex7 = Complex.I;
      complex7.getArgument();
      complex0.getReal();
      complex5.toString();
      Complex complex8 = complex3.tanh();
      complex7.exp();
      complex7.add(complex6);
      complex0.subtract(1400.8110413);
      complex8.getField();
      Complex complex9 = new Complex((-1652.0), 1.5707963267948966);
      complex6.getField();
      complex1.divide((-1902.421537285534));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2542.825));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.subtract(Double.NaN);
      Complex complex5 = complex0.NaN.pow(Double.NaN);
      complex2.isInfinite();
      complex0.tan();
      complex3.equals(complex5);
      complex3.subtract(complex1);
      complex5.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.ONE.multiply(1.2250985436706623E-9);
      Complex complex3 = complex0.ONE.conjugate();
      complex3.NaN.readResolve();
      complex0.ZERO.getArgument();
      complex0.getImaginary();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.log();
      complex5.ZERO.abs();
      complex1.nthRoot(7);
      Complex complex6 = complex0.tan();
      complex6.NaN.sqrt1z();
      Complex complex7 = complex0.sqrt();
      complex7.getReal();
      complex5.sqrt();
      Complex complex8 = complex2.pow(0.0);
      complex8.sin();
      complex0.nthRoot(7);
      Complex complex9 = complex3.multiply(1388);
      complex9.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      complex0.nthRoot(4401);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf((double) 4401, 1362.6);
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.acos();
      complex0.toString();
      Complex complex7 = complex1.reciprocal();
      complex0.tan();
      complex5.getArgument();
      Complex complex8 = Complex.valueOf(2.3570761680603027, 2.3570761680603027);
      complex4.getArgument();
      complex3.getReal();
      complex7.toString();
      complex6.tanh();
      complex8.exp();
      complex7.subtract(complex0);
      complex8.pow(complex2);
      complex6.negate();
      complex1.multiply((-1.0));
      complex2.sqrt1z();
      complex5.multiply(3062);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      complex0.nthRoot(4401);
      Complex complex1 = complex0.atan();
      complex1.cos();
      complex0.tanh();
      complex1.readResolve();
      Complex complex2 = complex1.createComplex(4401, 1.6888896040910504);
      Complex complex3 = Complex.valueOf(6.283185307179586, 1.109110393864546);
      complex3.isNaN();
      Complex complex4 = complex3.multiply((-274.47572));
      complex3.getImaginary();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex3.conjugate();
      complex2.subtract(6.283185307179586);
      complex5.hashCode();
      complex7.exp();
      Complex complex8 = Complex.INF;
      complex1.hashCode();
      Complex complex9 = Complex.NaN;
      complex5.subtract(complex6);
      Complex complex10 = Complex.valueOf(1.6888896040910504);
      complex10.subtract(205.360397997);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3715.92860984126);
      complex0.sin();
      Complex complex1 = complex0.ONE.divide(3715.92860984126);
      complex1.INF.createComplex(3715.92860984126, 3715.92860984126);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.tanh();
      Complex complex6 = (Complex)complex4.readResolve();
      Complex complex7 = complex4.I.createComplex(3715.92860984126, 3715.92860984126);
      complex2.isNaN();
      Complex complex8 = complex5.ONE.multiply(3715.92860984126);
      complex1.getImaginary();
      complex5.ONE.reciprocal();
      complex2.ZERO.tan();
      complex5.conjugate();
      complex6.toString();
      complex8.tanh();
      complex0.exp();
      Complex complex9 = Complex.I;
      Complex complex10 = complex6.subtract(complex9);
      complex7.pow(complex10);
      complex3.negate();
      complex6.multiply(3715.92860984126);
      complex8.sqrt1z();
      complex1.multiply(3062);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4382.654426747134), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.sin();
      Complex complex5 = Complex.valueOf((-4382.654426747134), (-793.972));
      complex2.getArgument();
      complex0.nthRoot(1014);
      Complex complex6 = complex1.multiply((-1918));
      Complex complex7 = complex6.createComplex((-536.8116878), (-793.972));
      complex6.getField();
      complex7.isNaN();
      complex5.toString();
      complex4.getArgument();
      complex6.getImaginary();
      Complex complex8 = complex1.subtract((double) 1014);
      Complex complex9 = new Complex((-2345.7188440379086));
      Complex complex10 = complex5.pow(complex9);
      complex10.NaN.sqrt1z();
      complex10.INF.subtract(-0.0);
      complex7.add(-0.0);
      Complex complex11 = complex0.tan();
      complex7.pow((double) 1169);
      complex8.pow(complex9);
      complex11.readResolve();
      complex3.getField();
      complex3.toString();
      complex5.conjugate();
      complex0.sin();
      complex4.sqrt();
      complex11.add(complex4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      complex0.nthRoot(4401);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex1.I.asin();
      complex1.divide(1362.6);
      Complex.valueOf(1362.6, (double) 4401);
      complex0.divide(8.98570720774568E-8);
      Complex complex5 = Complex.ONE;
      complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.I;
      complex6.getField();
      complex4.getField();
      complex3.divide(1362.6);
      Complex complex7 = complex1.createComplex(2.0, 1362.6);
      complex7.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(7.790517593794744, 7.699097067385825E-248);
      Complex complex2 = complex1.pow((-577.25419785728));
      complex0.getField();
      complex0.toString();
      Complex complex3 = complex1.asin();
      complex2.getArgument();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      Complex complex4 = Complex.NaN;
      complex4.cosh();
      complex0.atan();
      complex3.asin();
      complex1.pow(complex2);
      complex1.toString();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sin();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.createComplex(3715.92860984126, 3715.92860984126);
      complex0.log();
      complex1.abs();
      complex1.multiply(2.0);
      complex2.abs();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3715.92860984126);
      complex0.sin();
      Complex complex1 = complex0.ONE.divide(3715.92860984126);
      complex1.INF.createComplex(3715.92860984126, 3715.92860984126);
      Complex complex2 = complex0.log();
      complex0.atan();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.tanh();
      complex3.readResolve();
      Complex complex5 = complex3.I.createComplex(3715.92860984126, 3715.92860984126);
      complex2.isNaN();
      complex4.ONE.multiply(3715.92860984126);
      complex1.getImaginary();
      Complex complex6 = complex4.ONE.reciprocal();
      complex2.ZERO.tan();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex5.pow(137.3221);
      Complex complex9 = new Complex((-2439.126525), (-2439.126525));
      complex7.divide(complex8);
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.abs();
      Complex complex1 = complex0.acos();
      complex0.getReal();
      complex1.pow(0.0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-999.460240798), (-999.460240798));
      complex0.ZERO.acos();
      complex0.isInfinite();
      Complex complex1 = Complex.NaN;
      complex1.toString();
      Complex.valueOf(0.0, 217.482601896887);
      complex0.reciprocal();
      Complex complex2 = complex1.createComplex(1.1548223864099742E-17, 1.1548223864099742E-17);
      complex2.INF.asin();
      Complex complex3 = Complex.I;
      complex1.pow(complex3);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = Complex.valueOf((-1.0));
      Complex complex6 = Complex.I;
      complex6.equals(complex1);
      complex3.I.tan();
      complex5.hashCode();
      complex4.hashCode();
      complex3.sqrt1z();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = 3715.92860984126;
      Complex complex0 = Complex.valueOf(3715.92860984126);
      complex0.sin();
      Complex complex1 = complex0.ONE.divide(3715.92860984126);
      complex1.INF.createComplex(3715.92860984126, 3715.92860984126);
      int int0 = 1431655765;
      // Undeclared exception!
      complex0.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.tanh();
      complex3.readResolve();
      Complex complex5 = complex3.createComplex(4401, 1764.6012596253095);
      complex2.isNaN();
      complex5.multiply(344.77393155626);
      complex2.getImaginary();
      complex4.reciprocal();
      Complex complex6 = complex0.tan();
      complex4.conjugate();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.subtract(9.420348186357043E-9);
      complex1.hashCode();
      complex8.exp();
      complex6.sqrt1z();
      complex5.hashCode();
      Complex complex9 = Complex.NaN;
      complex2.subtract(complex0);
      complex9.reciprocal();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.add((-1317.8375925327073));
      complex0.INF.toString();
      complex0.hashCode();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.sqrt();
      complex3.INF.multiply(2550);
      complex1.cos();
      complex0.pow((-3034.697));
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-324.2191154050539));
      complex0.readResolve();
      complex0.isNaN();
      Complex complex1 = complex0.createComplex((-2395.72949), (-324.2191154050539));
      Complex complex2 = new Complex(1268.5488, (-324.2191154050539));
      complex2.INF.tan();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.NaN.sqrt1z();
      complex1.NaN.pow(complex2);
      complex0.hashCode();
      complex0.getArgument();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.cosh();
      complex6.negate();
      complex1.ZERO.cos();
      Complex.valueOf(1268.5488);
      Complex complex7 = complex1.log();
      complex5.ONE.acos();
      complex6.subtract(3.060737220976933E-278);
      complex7.tanh();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1551.19088613, 1551.19088613);
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex0.ONE.createComplex(3921.149808, 3921.149808);
      Complex complex3 = Complex.ZERO;
      complex3.I.conjugate();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ZERO.multiply(1551.19088613);
      complex4.hashCode();
      Complex complex6 = complex3.pow(complex2);
      Complex complex7 = complex0.tan();
      complex7.INF.conjugate();
      complex7.INF.pow(complex0);
      Complex complex8 = complex6.divide(0.0);
      Complex complex9 = complex6.ZERO.sqrt();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex10.conjugate();
      complex1.getImaginary();
      complex6.getReal();
      complex9.asin();
      complex8.getImaginary();
      Complex complex12 = new Complex(3921.149808, (-4638.1781));
      complex7.subtract(complex12);
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-20.0);
      complex0.I.acos();
      Complex complex1 = complex0.INF.multiply(1.1740089468291563E-7);
      Complex complex2 = Complex.NaN;
      complex1.ONE.divide(complex2);
      Complex complex3 = complex0.createComplex(0.0, (-20.0));
      complex3.cosh();
      Complex complex4 = complex3.I.subtract(5.593494835247651E-9);
      complex0.hashCode();
      complex4.negate();
      complex0.sin();
      Complex.valueOf(1.1740089468291563E-7, 1.1740089468291563E-7);
      complex2.cosh();
      complex0.INF.pow((-2696.0352));
      Complex complex5 = Complex.valueOf((-1168.0));
      complex4.abs();
      try { 
        complex5.nthRoot((-1236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,236
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      complex0.nthRoot(4401);
      Complex complex1 = complex0.sqrt();
      complex0.INF.sinh();
      complex1.ONE.cos();
      complex1.I.asin();
      Complex complex2 = complex1.divide(1362.6);
      Complex.valueOf(1362.6, (double) 4401);
      Complex complex3 = complex0.divide(8.98570720774568E-8);
      Complex complex4 = complex2.subtract(1400.8110413);
      complex4.getField();
      complex4.getField();
      complex3.divide(1400.8110413);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide((-923.6370169498373));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.573691633515306E-8, 0.5483922958374023);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.add((-1652.0));
      complex1.abs();
      complex1.hashCode();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.ONE.add(complex2);
      complex0.I.getArgument();
      complex3.ZERO.nthRoot(1169);
      Complex complex5 = complex3.NaN.multiply(1771);
      Complex complex6 = complex3.I.createComplex(0.5483922958374023, 0.499314300505665);
      complex6.I.getField();
      complex3.isNaN();
      complex1.toString();
      complex3.getArgument();
      complex0.getImaginary();
      complex3.ONE.subtract(0.0);
      Complex complex7 = complex3.pow(complex0);
      Complex complex8 = complex7.add(Double.NaN);
      Complex complex9 = complex3.tan();
      complex9.NaN.pow(1.573691633515306E-8);
      complex9.ONE.pow(complex2);
      complex7.readResolve();
      complex7.ZERO.getField();
      complex3.toString();
      complex4.conjugate();
      complex8.sin();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.multiply((-1992));
      complex1.I.subtract(complex0);
      Complex complex2 = complex0.pow(0.0);
      complex1.ZERO.conjugate();
      complex0.readResolve();
      complex2.I.subtract(0.0);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.I.subtract(0.0);
      complex0.log();
      complex1.NaN.divide(complex6);
      complex4.NaN.sinh();
      complex3.sqrt1z();
      complex4.multiply(0.0);
      Complex complex7 = complex0.asin();
      complex5.sqrt();
      complex2.isNaN();
      complex7.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-999.460240798), (-999.460240798));
      Complex complex1 = complex0.ZERO.acos();
      complex0.isInfinite();
      Complex complex2 = complex0.acos();
      complex1.getReal();
      Complex complex3 = complex1.pow(1.5707963267948966);
      Complex complex4 = complex3.NaN.divide(complex2);
      complex4.INF.toString();
      complex4.ONE.divide((-999.460240798));
      Complex complex5 = complex0.cosh();
      complex3.INF.tan();
      Complex complex6 = Complex.valueOf(1.5707963267948966);
      Complex complex7 = complex5.add(complex6);
      complex7.cos();
      Complex complex8 = complex3.subtract(complex1);
      Complex complex9 = complex8.pow(137.3221);
      Complex complex10 = new Complex(517.561211351776, 253.9185037786884);
      complex9.ZERO.divide(complex10);
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      complex0.INF.multiply(45.68250546026965);
      Complex complex1 = complex0.NaN.divide(45.68250546026965);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.INF.sqrt();
      complex3.ONE.abs();
      complex3.ZERO.toString();
      complex3.divide(complex0);
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex2.sqrt1z();
      complex6.tan();
      complex6.NaN.readResolve();
      complex5.exp();
      Complex complex7 = complex5.asin();
      complex7.ONE.getField();
      Complex complex8 = complex2.sinh();
      complex8.INF.atan();
      complex5.multiply(complex0);
      complex2.acos();
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(254.41770724, (-1141.69));
      Complex complex1 = complex0.negate();
      complex1.abs();
      Complex complex2 = complex0.pow(complex1);
      complex2.equals(complex1);
      complex0.I.multiply(complex2);
      complex2.ONE.sqrt();
      complex0.isNaN();
      complex2.ZERO.tan();
      complex1.toString();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.atan();
      complex2.subtract(1169.6941591105165);
      complex4.getReal();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.ONE.add(1.5706103738804686);
      complex5.ONE.atan();
      int int0 = 0;
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.536961912893389E-9, (-2747.5952971511465));
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ZERO.sin();
      complex1.I.hashCode();
      Complex complex3 = complex1.NaN.sqrt1z();
      complex0.I.add((-763.44145578));
      Complex complex4 = complex0.INF.multiply(complex1);
      complex4.ZERO.sin();
      complex3.INF.multiply((-1294.9398865238647));
      Complex complex5 = complex0.INF.cosh();
      complex0.toString();
      complex0.pow(complex5);
      complex2.add((-2.8064314757880205E-8));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-656.90259313405));
      Complex complex1 = complex0.multiply(2033);
      complex1.ONE.readResolve();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.divide((-584.134));
      complex1.subtract(0.0);
      complex0.hashCode();
      Complex complex2 = complex0.exp();
      complex2.INF.hashCode();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.multiply(complex3);
      complex4.INF.abs();
      complex2.INF.conjugate();
      complex3.multiply(complex2);
      complex0.INF.divide(complex4);
      try { 
        complex3.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-483.49514223257));
      complex0.I.divide(0.0);
      complex0.I.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.conjugate();
      complex1.INF.cosh();
      complex1.INF.readResolve();
      Complex complex3 = complex1.subtract((-483.49514223257));
      complex3.NaN.multiply(complex2);
      Complex complex4 = Complex.valueOf((-483.49514223257));
      Complex complex5 = complex0.atan();
      Complex.valueOf(0.0);
      complex5.INF.multiply(complex1);
      complex0.exp();
      complex4.tanh();
      complex5.isNaN();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = 1579.6;
      Complex complex0 = new Complex(1579.6, 1579.6);
      Complex complex1 = null;
      complex0.ONE.toString();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2275.12051164261), (-213.82914284227));
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex1.readResolve();
      complex0.I.cosh();
      Complex complex3 = Complex.valueOf((-2275.12051164261));
      Complex complex4 = complex1.I.exp();
      complex1.INF.createComplex((-2275.12051164261), 1173.9721);
      Complex complex5 = complex0.ONE.cosh();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex2.ZERO.add((-213.82914284227));
      complex2.ZERO.toString();
      Complex complex8 = complex1.divide((-213.82914284227));
      complex2.nthRoot(3917);
      Complex complex9 = complex1.divide(complex6);
      Complex complex10 = complex8.divide(complex3);
      complex10.tan();
      complex7.cosh();
      complex2.atan();
      complex4.add(complex5);
      Complex complex11 = complex5.tanh();
      complex11.abs();
      complex9.multiply(797);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.abs();
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.reciprocal();
      complex1.I.createComplex(1.1548223864099742E-17, 47.8432200229591);
      complex0.pow(complex1);
      Complex complex3 = complex1.divide(complex2);
      Complex.valueOf(2.0);
      complex1.equals("(Infinity, Infinity)");
      complex3.hashCode();
      complex0.hashCode();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      complex0.isNaN();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3715.92860984126);
      complex0.sin();
      Complex complex1 = complex0.ONE.divide(3715.92860984126);
      Complex complex2 = complex1.INF.createComplex(3715.92860984126, 3715.92860984126);
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.tanh();
      complex5.readResolve();
      complex5.I.createComplex(3715.92860984126, 3715.92860984126);
      complex3.isNaN();
      complex6.ONE.multiply(3715.92860984126);
      complex1.getImaginary();
      Complex complex7 = complex6.ONE.reciprocal();
      complex3.ZERO.tan();
      Complex complex8 = complex6.conjugate();
      complex8.NaN.subtract(0.0);
      complex8.I.hashCode();
      complex8.exp();
      complex2.sqrt1z();
      complex2.hashCode();
      Complex complex9 = Complex.NaN;
      complex4.subtract(complex9);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.add(0.5925495624542236);
      Complex complex2 = complex0.I.atan();
      complex2.INF.tan();
      complex1.INF.atan();
      complex1.INF.conjugate();
      Complex complex3 = Complex.valueOf(2864.108137177884);
      complex0.NaN.divide(complex2);
      Complex complex4 = Complex.valueOf(0.0, 2864.108137177884);
      complex0.getReal();
      complex4.I.getArgument();
      Complex complex5 = Complex.valueOf(0.46853768825531006, 0.5925495624542236);
      Complex complex6 = complex5.NaN.sqrt();
      complex4.getField();
      Complex complex7 = complex2.pow(complex4);
      complex3.I.sinh();
      complex2.hashCode();
      Complex complex8 = complex7.tan();
      complex8.abs();
      complex1.negate();
      complex3.nthRoot(1430);
      complex8.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2745.2960888, 2745.2960888);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.INF.atan();
      complex3.NaN.readResolve();
      complex3.cos();
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex0.ZERO.add(complex4);
      Complex complex6 = complex4.I.sinh();
      Complex complex7 = Complex.valueOf(3480.7590543930455, 2745.2960888);
      complex7.INF.cos();
      complex0.isNaN();
      Complex complex8 = complex2.divide(complex1);
      complex2.I.negate();
      Complex complex9 = complex8.cosh();
      complex2.isNaN();
      complex9.isNaN();
      complex2.toString();
      complex9.getImaginary();
      Complex complex10 = complex5.cos();
      complex10.INF.readResolve();
      Complex complex11 = complex1.atan();
      complex11.ONE.tanh();
      Complex.valueOf(Double.NaN, Double.NaN);
      Object object0 = new Object();
      complex9.equals(object0);
      complex0.createComplex(2745.2960888, 0.0);
      complex9.conjugate();
      complex2.log();
      complex5.equals(complex6);
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      int int0 = 0;
      complex1.ZERO.readResolve();
      double double0 = 5.609418227003629E-301;
      Complex complex2 = Complex.valueOf(5.609418227003629E-301);
      complex2.getArgument();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      int int0 = (-4884);
      complex0.NaN.multiply((-4884));
      complex1.INF.sqrt();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.ZERO.multiply((-4884));
      Complex complex5 = complex1.divide(0.0);
      complex2.ONE.getArgument();
      Complex.valueOf((-2486.42), 0.0);
      complex2.I.sqrt1z();
      Complex complex6 = complex5.I.multiply(0.0);
      complex1.isInfinite();
      complex2.INF.hashCode();
      complex3.getArgument();
      complex0.NaN.abs();
      complex2.tan();
      Complex.valueOf(0.0, (double) (-4884));
      Complex complex7 = complex0.pow(0.0);
      complex7.ONE.sqrt1z();
      complex0.subtract((-1.0));
      complex5.ONE.nthRoot(1);
      complex6.multiply(0);
      try { 
        complex4.nthRoot((-1735));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,735
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.negate();
      complex1.negate();
      complex0.readResolve();
      complex3.I.sinh();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex3.INF.tanh();
      complex6.INF.hashCode();
      complex4.ZERO.subtract(complex1);
      complex3.cos();
      complex2.sqrt1z();
      Complex complex7 = complex3.negate();
      complex7.INF.multiply((-1916));
      complex1.isInfinite();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex8.negate();
      complex5.reciprocal();
      complex9.subtract((double) (-1916));
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1841.525, (-20.0));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.log();
      complex3.NaN.divide(2209.3273976);
      complex0.ZERO.tanh();
      Complex complex4 = complex0.sqrt1z();
      complex0.getReal();
      Complex complex5 = complex4.sinh();
      Complex complex6 = Complex.valueOf(1841.525);
      complex6.ZERO.toString();
      complex0.NaN.cosh();
      Complex complex7 = complex5.cos();
      complex4.hashCode();
      Complex complex8 = complex7.cos();
      complex8.I.log();
      complex2.isNaN();
      complex1.asin();
      complex4.cosh();
      complex5.log();
      try { 
        complex2.I.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(3.1408919441362495E-288, 3.1408919441362495E-288);
      Complex complex1 = Complex.valueOf(3.1408919441362495E-288);
      Complex complex2 = complex1.INF.tanh();
      complex2.INF.cosh();
      complex1.getArgument();
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ZERO.subtract(0.0);
      complex3.nthRoot(1423);
      Complex complex6 = complex0.createComplex(3.1408919441362495E-288, 0.0);
      Complex complex7 = complex6.ONE.pow(3.1408919441362495E-288);
      complex7.NaN.getField();
      complex7.ZERO.toString();
      complex0.NaN.asin();
      complex6.ONE.getArgument();
      complex0.equals(complex6);
      complex6.cosh();
      Complex complex8 = complex6.atan();
      complex1.asin();
      complex1.pow(complex8);
      complex7.toString();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3548774719238281, 0.0);
      Complex complex1 = complex0.ONE.tan();
      complex0.ZERO.getArgument();
      complex0.getArgument();
      complex0.isNaN();
      complex1.divide((-2474.903081503));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-82.55237568477));
      complex0.add((-330.0101));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.12139818505956E-9), (-7.12139818505956E-9));
      Complex complex1 = complex0.add((-7.12139818505956E-9));
      complex0.ONE.multiply(7.799913824734797E-9);
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.sin();
      complex1.getField();
      Complex.valueOf((-7.12139818505956E-9));
      complex2.toString();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3065.615124, (-819.121));
      Complex complex1 = Complex.valueOf(2781.7);
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.negate();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4382.654426747134), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.sinh();
      complex3.sin();
      Complex complex4 = Complex.valueOf((-4382.654426747134), (-793.972));
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex5.I.tanh();
      complex6.I.acos();
      complex3.ZERO.toString();
      Complex complex7 = complex3.ZERO.reciprocal();
      Complex complex8 = complex1.tan();
      complex8.INF.getArgument();
      Complex.valueOf((-1.0), (-1.0));
      complex0.getArgument();
      complex8.getReal();
      complex7.toString();
      complex2.tanh();
      Complex complex9 = complex7.exp();
      Complex complex10 = complex5.subtract(complex9);
      complex10.pow(complex3);
      Complex complex11 = complex7.negate();
      complex11.multiply((-1626.71233368));
      Complex complex12 = complex10.sqrt1z();
      complex12.multiply(3062);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.asin();
      complex1.NaN.getField();
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.pow(0.0);
      complex2.I.sinh();
      complex2.INF.sin();
      complex0.hashCode();
      complex2.toString();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.ONE.pow(complex2);
      try { 
        complex6.I.nthRoot((-1034));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,034
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex0.ZERO.add(complex1);
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.INF.multiply(1);
      complex3.NaN.toString();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex5.I.sqrt();
      complex6.NaN.getArgument();
      Complex complex7 = complex5.ONE.multiply(complex4);
      complex0.getArgument();
      Complex complex8 = complex6.pow(Double.NaN);
      Complex complex9 = Complex.valueOf((-3475.36));
      complex9.NaN.tanh();
      Complex complex10 = Complex.valueOf(20.0);
      complex10.ONE.readResolve();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex10.add(complex9);
      Complex complex13 = complex12.tan();
      complex12.INF.multiply((-3475.36));
      Complex complex14 = complex2.multiply((-1165));
      complex11.ZERO.conjugate();
      complex14.ZERO.abs();
      Complex complex15 = complex14.add(3236.425302282);
      assertSame(complex15, complex8);
      
      Complex complex16 = complex11.tan();
      assertSame(complex11, complex7);
      
      complex6.sqrt();
      assertEquals(0.7071067811865475, complex6.getImaginary(), 0.01);
      
      Complex complex17 = complex9.atan();
      Complex complex18 = complex17.ZERO.asin();
      assertEquals(1.1102230246251564E-16, complex17.getImaginary(), 0.01);
      assertEquals((-1.5705085868276984), complex17.getReal(), 0.01);
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      
      complex14.log();
      Complex complex19 = complex4.subtract(Double.NaN);
      assertSame(complex19, complex16);
      
      complex5.subtract(complex3);
      Complex complex20 = complex13.multiply(3236.425302282);
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertEquals(1337.61417243557, complex20.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-5.67996159922899E-5));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.I.pow((-5.67996159922899E-5));
      Complex complex3 = complex1.NaN.createComplex(1112.20570287, (-5.67996159922899E-5));
      complex3.log();
      Complex complex4 = complex2.pow((-5.67996159922899E-5));
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex1.multiply((-5.67996159922899E-5));
      Complex complex7 = Complex.valueOf((-5.67996159922899E-5));
      Complex complex8 = complex1.I.divide((-5.67996159922899E-5));
      assertEquals((-17605.752830014593), complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      
      List<Complex> list0 = complex7.nthRoot(1);
      assertEquals(1, list0.size());
      
      Complex complex9 = complex7.subtract(complex5);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex2.tan();
      assertEquals(1.5574076685530422, complex10.getReal(), 0.01);
      assertEquals((-3.0562693007440793E-4), complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex4.cos();
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      
      complex1.getArgument();
      boolean boolean0 = complex6.equals(object0);
      assertTrue(complex1.equals((Object)complex7));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(828.326, 828.326);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex2.ZERO.getField();
      assertEquals(828.326, complex2.getImaginary(), 0.01);
      assertEquals((-828.326), complex2.getReal(), 0.01);
      
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1275.3);
      assertFalse(complex1.isInfinite());
      assertEquals(1275.3, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }
}
