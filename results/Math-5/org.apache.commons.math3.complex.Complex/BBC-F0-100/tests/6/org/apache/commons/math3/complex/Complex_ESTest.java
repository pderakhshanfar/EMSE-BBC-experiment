/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:22:38 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = new Complex((-1281.81092), Double.POSITIVE_INFINITY);
      complex1.nthRoot(4);
      complex0.divide(complex1);
      Complex complex2 = Complex.I;
      complex2.nthRoot(4);
      Complex complex3 = Complex.INF;
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.multiply(4);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(3.3310942289102464E291, 3.3310942289102464E291);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.INF;
      complex3.multiply(complex0);
      Complex complex4 = complex0.add(complex1);
      complex2.toString();
      Complex complex5 = new Complex(0.06932369077680622, 3.3310942289102464E291);
      Complex complex6 = complex5.asin();
      complex0.cosh();
      Complex complex7 = Complex.NaN;
      complex3.abs();
      Complex complex8 = complex5.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex6.I.tanh();
      Complex complex9 = new Complex(3294.07287337, 47.37448766880075);
      complex0.subtract(0.06932369077680622);
      complex6.multiply(2226.455);
      Complex complex10 = Complex.I;
      complex9.multiply((-2351));
      complex4.tanh();
      complex8.nthRoot(1318);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(1.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ZERO.multiply(complex1);
      complex4.ZERO.toString();
      complex0.readResolve();
      Complex complex5 = complex3.reciprocal();
      complex5.NaN.getField();
      complex2.acos();
      Complex complex6 = complex3.I.tan();
      Complex complex7 = complex1.divide((-505.06));
      complex5.sqrt1z();
      complex0.ZERO.log();
      Complex complex8 = complex2.subtract(complex7);
      complex8.I.divide((-505.06));
      Complex complex9 = complex4.exp();
      complex9.I.toString();
      complex6.multiply(complex0);
      complex4.negate();
      Complex complex10 = Complex.valueOf(6.283185307179586);
      complex9.readResolve();
      complex10.log();
      complex6.readResolve();
      complex3.conjugate();
      complex9.tan();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
      Complex complex1 = new Complex((-6.234844962451947), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.add(complex2);
      complex0.log();
      Complex complex4 = Complex.ONE;
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.createComplex((-20.0), (-20.0));
      Complex complex3 = complex2.log();
      complex3.asin();
      Complex complex4 = Complex.ZERO;
      complex4.divide(447.59852694);
      complex2.pow(447.59852694);
      complex0.add(complex4);
      complex1.conjugate();
      complex2.tan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.ONE;
      complex3.tanh();
      complex1.sinh();
      complex4.pow((-102.219277247019));
      complex1.conjugate();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-2.148245271118002E-8), (-2.148245271118002E-8));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.add(complex0);
      complex3.toString();
      Complex complex4 = complex3.NaN.log();
      complex4.I.add(complex0);
      complex2.INF.pow((-2.148245271118002E-8));
      Complex complex5 = complex4.ZERO.multiply(complex0);
      complex5.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(2013.425758, 2013.425758);
      Complex complex2 = complex1.sqrt1z();
      complex1.log();
      complex0.sqrt();
      Complex complex3 = complex0.asin();
      complex2.tanh();
      complex2.add(2013.425758);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.ZERO;
      complex5.sinh();
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex((-1.2296934902142301E22), (-769.45));
      Complex complex7 = complex6.pow((-769.45));
      complex7.add(complex1);
      complex6.conjugate();
      complex4.tan();
      Complex complex8 = Complex.NaN;
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.148245271118002E-8), (-2.148245271118002E-8));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.add(complex0);
      complex3.toString();
      complex1.NaN.abs();
      Complex complex4 = complex3.NaN.log();
      complex4.I.add(complex0);
      complex4.ZERO.multiply(complex0);
      complex4.INF.atan();
      complex0.INF.createComplex((-2.148245271118002E-8), (-2.148245271118002E-8));
      complex1.sqrt1z();
      complex2.log();
      Complex complex5 = complex2.sqrt();
      complex2.asin();
      complex5.tanh();
      Complex complex6 = complex3.add((-769.45));
      Complex complex7 = Complex.ZERO;
      complex6.INF.divide((-769.45));
      Complex.valueOf(Double.NaN, (-2.148245271118002E-8));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-1.4255188208147591), (-1.4255188208147591));
      complex0.readResolve();
      Complex complex1 = new Complex((-1.4255188208147591));
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract(663.23);
      Complex complex3 = complex2.cos();
      complex0.readResolve();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex3.createComplex(2.9279594746502846E161, 446.214545747);
      complex4.isNaN();
      complex4.abs();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.acos();
      complex7.asin();
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.ONE.multiply(Double.NaN);
      complex0.equals(complex1);
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4830.262);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.I.tan();
      complex1.I.abs();
      Complex complex3 = Complex.valueOf(1224.1989554913805, 4830.262);
      Complex complex4 = complex3.log();
      complex3.ZERO.readResolve();
      Complex complex5 = complex0.NaN.multiply(complex3);
      complex0.INF.getArgument();
      Complex.valueOf(3.6613751875298095E-8);
      complex0.ZERO.createComplex(0.0, Double.NaN);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex4.ZERO.subtract(complex2);
      complex7.multiply(complex5);
      Complex complex8 = complex6.multiply(1.0);
      Complex complex9 = complex6.log();
      complex9.ZERO.reciprocal();
      complex4.multiply(4830.262);
      complex0.subtract(complex3);
      Complex.valueOf((-99.0));
      complex0.acos();
      complex8.getField();
      Complex.valueOf(351.0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.divide(20.0);
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex2.exp();
      complex0.tan();
      Complex complex4 = complex2.pow(complex1);
      complex4.multiply(20.0);
      Complex complex5 = Complex.NaN;
      complex5.equals(complex4);
      complex3.exp();
      complex0.reciprocal();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 1651.115398);
      Complex complex1 = complex0.multiply(594);
      complex0.ONE.abs();
      Complex complex2 = complex0.NaN.pow(2.0);
      Complex complex3 = complex0.multiply(594);
      complex1.atan();
      complex3.INF.sqrt();
      complex3.abs();
      complex2.nthRoot(594);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex3.negate();
      complex0.ZERO.tanh();
      complex3.divide((-536.9081564035463));
      Complex complex6 = complex1.sin();
      complex6.cosh();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex7.exp();
      complex8.I.subtract(1.2167897656061312E23);
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.getField();
      Complex complex1 = complex0.sin();
      complex1.ZERO.nthRoot(4976);
      Complex complex2 = complex1.ONE.exp();
      complex2.ZERO.hashCode();
      complex2.INF.getArgument();
      Complex complex3 = complex0.subtract(complex1);
      complex3.I.readResolve();
      complex3.ZERO.toString();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.createComplex(2067.63, (-536.93));
      complex6.add(Double.POSITIVE_INFINITY);
      complex0.log();
      complex0.asin();
      complex2.I.multiply(complex6);
      complex6.ZERO.pow(complex5);
      complex5.createComplex((-536.93), Double.POSITIVE_INFINITY);
      complex6.cos();
      complex2.sinh();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      complex1.divide((double) 2094);
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex1.multiply((double) 2094);
      complex0.equals(complex4);
      complex3.exp();
      complex5.reciprocal();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(436.81363378863904);
      complex0.INF.getArgument();
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.subtract(141458.92722574488);
      Complex complex3 = new Complex((-20.0));
      complex0.hashCode();
      Complex complex4 = complex2.cos();
      Complex complex5 = (Complex)complex4.readResolve();
      complex0.add(complex2);
      complex1.multiply(1.0);
      Complex complex6 = Complex.I;
      complex3.equals(complex6);
      Complex complex7 = complex6.exp();
      complex5.reciprocal();
      complex2.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.NaN;
      complex3.equals(complex2);
      complex3.exp();
      complex1.reciprocal();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex1.sqrt1z();
      complex2.getArgument();
      complex2.readResolve();
      Complex.valueOf((-391.65), (-149232.92722574488));
      complex1.tan();
      Complex complex3 = Complex.ONE;
      complex3.pow(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.ZERO;
      complex0.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
      complex1.tanh();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.cos();
      Complex complex1 = complex0.ZERO.divide((-638.550816636034));
      Complex complex2 = complex1.ONE.conjugate();
      complex2.NaN.getField();
      complex2.negate();
      Complex complex3 = complex1.ONE.createComplex((-1.0), 1479.4);
      Complex complex4 = complex3.I.multiply(397.0);
      complex1.I.hashCode();
      Complex complex5 = complex3.cos();
      Complex complex6 = Complex.valueOf(88.830103462708, (-638.550816636034));
      Complex complex7 = complex5.I.sinh();
      complex0.ONE.tanh();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.sinh();
      complex3.subtract(2150.0);
      complex4.add(complex6);
      Complex complex10 = complex8.tan();
      complex4.readResolve();
      complex10.abs();
      Complex complex11 = complex4.asin();
      Complex complex12 = Complex.valueOf(397.0, (-1485.701819032523));
      Complex complex13 = complex1.sqrt();
      complex13.I.add(complex5);
      complex12.cosh();
      Complex complex14 = complex7.divide(complex3);
      complex5.negate();
      complex14.equals(complex11);
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide((double) 2094);
      Complex complex1 = complex0.INF.exp();
      complex1.ONE.tan();
      complex1.pow(complex0);
      Complex complex2 = Complex.I;
      complex2.log();
      complex0.sqrt();
      Complex complex3 = Complex.valueOf((-963.861639509943), (-963.861639509943));
      Complex complex4 = new Complex((-3715.1812));
      complex4.toString();
      Complex complex5 = new Complex((-3715.1812), 671.820676204);
      complex5.tan();
      complex3.add(781.4466747425);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = (-3978.71068);
      Complex complex0 = new Complex((-3978.71068));
      complex0.INF.toString();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2334.7553);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.add(Double.NaN);
      Complex complex3 = new Complex(Double.NaN, (-1022.0));
      complex2.ZERO.pow(complex3);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.valueOf(2334.7553, Double.NaN);
      complex4.divide(complex5);
      Complex.valueOf((-1022.0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-714.29), (-528.5443));
      complex0.getArgument();
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(156.961, 1.5696516728782914);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.pow(0.9999999999999976);
      Complex complex5 = complex4.cosh();
      Complex complex6 = new Complex((-2.5045497348891326), (-3.4400727599859238E-6));
      complex6.getArgument();
      Complex complex7 = Complex.I;
      complex5.log();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = Complex.valueOf(604.8648, 2.410714667314049);
      complex2.toString();
      complex0.tan();
      complex3.exp();
      complex2.log();
      complex8.cosh();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-3244.1706298778995));
      complex0.atan();
      Complex complex2 = complex1.multiply(complex1);
      complex1.subtract(0.001144654416521007);
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex3.tanh();
      complex0.pow((-2502.66942215));
      complex2.tanh();
      Complex complex5 = new Complex((-595.2));
      complex5.negate();
      Complex.valueOf(1.0, (-595.2));
      Complex complex6 = Complex.I;
      complex4.atan();
      complex1.pow(859.0);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-3244.1706298778995));
      Complex complex2 = complex0.divide(3885.5386658692655);
      complex2.exp();
      Complex complex3 = complex1.tan();
      complex0.getField();
      complex0.exp();
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-6.648490725635754E-8), 376.10893);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      complex3.tanh();
      try { 
        complex0.nthRoot((-2274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,274
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.14095008373260498, (-1.0));
      complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex0.getField();
      Complex.valueOf(1.0098846102918038);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.tanh();
      complex2.cosh();
      complex4.exp();
      Complex complex5 = Complex.valueOf(20.0, 20.0);
      Complex complex6 = complex5.reciprocal();
      complex6.I.acos();
      complex5.reciprocal();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3244.1706298778995), (-3244.1706298778995));
      complex0.atan();
      Complex complex2 = Complex.I;
      complex2.multiply(complex1);
      complex0.readResolve();
      Complex complex3 = Complex.valueOf((-0.23706498776860363), (-3244.1706298778995));
      Complex complex4 = complex3.tan();
      complex4.cosh();
      Complex complex5 = complex3.pow(4068.566372);
      Complex complex6 = complex5.cosh();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.INF;
      complex8.getArgument();
      complex3.exp();
      Complex complex9 = Complex.I;
      complex8.log();
      complex3.sqrt();
      Complex.valueOf(0.7853981633974483, 1.0);
      complex1.toString();
      Complex complex10 = complex9.tan();
      complex6.exp();
      complex1.getImaginary();
      Complex.valueOf(0.0);
      complex10.multiply(1025);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex complex2 = complex1.sqrt1z();
      // Undeclared exception!
      complex2.nthRoot(572454902);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.toString();
      complex2.exp();
      complex0.I.multiply((-1598));
      complex0.getArgument();
      complex2.sqrt();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.sqrt1z();
      Complex complex1 = complex0.createComplex((-145345.92722574488), (-1.4271754202157014E-7));
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.I.createComplex((-1356.0), (-4123.99810894));
      Complex complex5 = complex0.multiply(2146286628);
      Complex complex6 = complex1.NaN.sqrt();
      complex0.createComplex((-1.4271754202157014E-7), (-439.8021));
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex8.ZERO.divide(complex7);
      Complex complex10 = complex2.pow(complex5);
      complex10.nthRoot(2146286628);
      complex7.multiply((-439.8021));
      complex9.tanh();
      complex4.sqrt1z();
      complex7.reciprocal();
      complex6.createComplex(2.0, (-690.462244828231));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-1793.025532));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide((-2855.095171646584));
      complex0.exp();
      Complex complex3 = complex1.tan();
      complex2.getField();
      complex3.exp();
      complex0.pow(complex2);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.ZERO;
      complex3.readResolve();
      complex1.equals("_O4`!V\"3iXH.=8p");
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.valueOf(1.5800256583859738, Double.POSITIVE_INFINITY);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-3244.1706298778995));
      Complex complex2 = complex0.atan();
      complex1.multiply(complex1);
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(0.0, (-3244.1706298778995));
      Complex complex4 = complex3.tan();
      Complex complex5 = complex1.cosh();
      complex2.pow(1.0);
      complex5.cosh();
      Complex complex6 = Complex.I;
      complex6.getArgument();
      complex2.exp();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.log();
      complex7.sqrt();
      Complex.valueOf(0.0, 1.0);
      complex4.toString();
      complex8.tan();
      complex8.exp();
      complex6.getImaginary();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3887.0));
      complex0.NaN.nthRoot(751);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      Complex complex3 = complex0.subtract((-3887.0));
      complex0.hashCode();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex3.I.add(complex0);
      complex2.sqrt1z();
      complex5.nthRoot(751);
      Complex complex6 = complex3.pow((double) 751);
      Complex complex7 = complex0.createComplex(572454902, 671.6452);
      Complex.valueOf(679.445709694992, 671.6452);
      Complex.valueOf(0.3594330038102771, (-449.660344));
      complex4.toString();
      complex3.tan();
      complex7.exp();
      complex6.getImaginary();
      Complex.valueOf(0.3594330038102771);
      complex7.sinh();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex1.sinh();
      complex0.asin();
      complex1.reciprocal();
      complex0.ZERO.tan();
      complex0.abs();
      Complex complex2 = new Complex(3339.270441368, Double.NaN);
      complex2.ZERO.subtract(2.0);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(1479.4);
      Complex complex1 = new Complex((-241.47287236));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = new Complex(1479.4);
      complex2.exp();
      complex2.getImaginary();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-1.4255188208147591), (-1.4255188208147591));
      Complex complex1 = complex0.I.sqrt1z();
      complex0.ZERO.getArgument();
      complex1.NaN.subtract(2.410714667314049);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.pow((-1.4255188208147591));
      Complex complex4 = complex1.INF.tanh();
      Complex complex5 = complex4.negate();
      complex5.INF.tan();
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      Complex complex6 = complex2.sqrt1z();
      complex6.NaN.nthRoot(572454902);
      complex3.pow((-1.4255188208147591));
      complex6.createComplex(2.410714667314049, 0.0);
      Complex.valueOf(0.3594330038102771, (-1.4255188208147591));
      Complex complex7 = Complex.valueOf((-449.660344), (-77.55162764808));
      complex7.I.toString();
      complex6.add((-799.5538978));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-3244.1706298778995));
      Complex complex2 = complex0.atan();
      complex1.multiply(complex1);
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(0.0, 1.016740083694458);
      complex3.getArgument();
      complex3.tan();
      Complex complex4 = complex1.cosh();
      complex2.pow(1.0);
      complex4.cosh();
      complex3.multiply(1.5707963267948966);
      Complex complex5 = Complex.I;
      complex5.getArgument();
      complex2.exp();
      Complex complex6 = Complex.I;
      complex6.log();
      complex6.sqrt();
      complex3.acos();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      Complex complex7 = Complex.I;
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-1.4255188208147591), (-1.4255188208147591));
      Complex complex1 = complex0.I.sqrt1z();
      complex0.ZERO.getArgument();
      complex1.NaN.subtract(2.410714667314049);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.pow((-1.4255188208147591));
      Complex complex4 = complex1.INF.tanh();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.INF.tan();
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      Complex complex7 = complex2.sqrt1z();
      complex7.NaN.nthRoot(572454902);
      complex3.pow((-1.4255188208147591));
      complex7.createComplex(2.410714667314049, 0.0);
      Complex.valueOf(0.3594330038102771, (-1.4255188208147591));
      Complex complex8 = Complex.valueOf((-449.660344), (-77.55162764808));
      complex8.I.toString();
      Complex complex9 = complex6.tan();
      complex9.NaN.exp();
      complex4.getImaginary();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.14095008373260498, (-1.0));
      complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex0.getField();
      complex0.multiply(complex2);
      complex0.nthRoot(2058);
      Complex complex3 = complex1.acos();
      complex3.INF.multiply(complex2);
      Complex complex4 = new Complex(0.14095008373260498);
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex.valueOf((-3887.0));
      Complex complex0 = new Complex(751, 2662.50401);
      Complex complex1 = Complex.valueOf((-262.0102224019578), (-3887.0));
      complex1.abs();
      Complex complex2 = Complex.ONE;
      complex2.INF.subtract(0.0);
      Complex complex3 = Complex.valueOf(800.870743826286, 912.43415);
      Complex complex4 = complex2.divide(complex3);
      ComplexField complexField0 = complex2.getField();
      Object object0 = new Object();
      complex3.equals(complexField0);
      Complex complex5 = complex4.sinh();
      complex2.asin();
      complex3.reciprocal();
      complex5.abs();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-323.40172002548));
      complex0.nthRoot(762);
      Complex complex1 = complex0.tanh();
      complex1.readResolve();
      Complex complex2 = complex1.subtract((-323.40172002548));
      complex1.hashCode();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.add(complex4);
      Complex complex6 = complex5.cos();
      complex1.readResolve();
      complex6.add(complex3);
      complex2.subtract(complex0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.createComplex((-378.51216895926), (-1.0));
      complex8.isNaN();
      complex2.abs();
      complex3.log();
      complex4.I.divide(complex1);
      Complex complex9 = complex8.pow(complex4);
      complex9.INF.reciprocal();
      Complex complex10 = Complex.INF;
      complex10.asin();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isNaN();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.tanh();
      complex2.readResolve();
      Complex complex3 = complex2.subtract(2581.65349388);
      Complex complex4 = Complex.INF;
      complex4.hashCode();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex3.cos();
      complex5.readResolve();
      Complex complex7 = complex2.add(complex4);
      complex7.divide(complex1);
      complex6.subtract(complex7);
      Complex complex8 = Complex.valueOf(2581.65349388);
      complex0.isNaN();
      Complex complex9 = Complex.INF;
      complex9.abs();
      Complex complex10 = complex5.log();
      complex10.I.getArgument();
      Complex complex11 = Complex.valueOf(2581.65349388);
      complex0.pow(complex11);
      complex8.asin();
      Complex complex12 = complex11.tanh();
      complex12.subtract((-4384835.0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3887.0));
      Complex complex1 = complex0.add((double) 751);
      complex0.ONE.abs();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.multiply(2146458596);
      complex1.nthRoot(1083);
      complex1.NaN.tanh();
      complex3.toString();
      complex2.sinh();
      Complex complex5 = complex4.negate();
      complex0.conjugate();
      complex5.hashCode();
      complex0.divide((double) 1083);
      complex4.subtract((double) 751);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2487.897143590319);
      Complex complex2 = complex0.I.tan();
      complex1.ZERO.multiply(2487.897143590319);
      complex0.log();
      Complex complex3 = complex1.ZERO.atan();
      Object object0 = new Object();
      complex0.ZERO.log();
      Complex complex4 = Complex.NaN;
      complex4.equals("^Po:ieyXy;l");
      complex2.sinh();
      Complex complex5 = complex4.asin();
      complex3.reciprocal();
      complex5.abs();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2487.897143590319);
      Complex complex2 = Complex.valueOf(2487.897143590319, 2487.897143590319);
      Complex complex3 = complex1.ZERO.multiply(2487.897143590319);
      Complex complex4 = complex0.log();
      complex1.ZERO.atan();
      Complex complex5 = complex0.divide((-3971.593675603));
      Complex complex6 = complex0.add(complex5);
      complex6.INF.subtract(complex0);
      complex4.abs();
      complex5.INF.tanh();
      complex1.cosh();
      complex3.exp();
      complex2.reciprocal();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.14095008373260498, (-1.0));
      complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex0.getField();
      complex2.atan();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.tanh();
      complex2.cosh();
      complex4.exp();
      Complex complex5 = Complex.valueOf(20.0, 20.0);
      complex5.reciprocal();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3887.0));
      Complex complex1 = complex0.sqrt();
      complex1.cos();
      Complex complex2 = new Complex((-3887.0));
      Complex complex3 = new Complex((-3887.0));
      complex3.sinh();
      Complex complex4 = new Complex((-3887.0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3887.0));
      Complex complex1 = Complex.NaN;
      complex1.negate();
      Complex complex2 = complex0.divide((-3887.0));
      complex0.exp();
      Complex complex3 = complex2.tan();
      complex1.getField();
      complex1.exp();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.ZERO;
      complex4.readResolve();
      complex4.equals("ewpV|_m[cg+");
      Complex complex7 = Complex.I;
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3887.0));
      complex0.nthRoot(751);
      Complex complex1 = complex0.tanh();
      Object object0 = complex1.readResolve();
      ((Complex) object0).NaN.pow(complex1);
      Complex complex2 = complex0.subtract(141458.92722574488);
      complex0.hashCode();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf((-3887.0), 2.4428397989286394);
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex2.cos();
      complex6.readResolve();
      complex0.add(complex2);
      complex4.subtract(complex0);
      complex0.createComplex((-6.930491127388755E-8), 671.2534669224);
      complex3.isNaN();
      complex4.cos();
      complex6.abs();
      complex6.log();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.pow(complex5);
      complex2.asin();
      complex8.tanh();
      Complex.valueOf(671.2534669224, 0.25062022335);
      Complex.valueOf((-6.930491127388755E-8));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2487.897143590319);
      Complex complex2 = complex0.I.tan();
      complex1.ZERO.multiply(2487.897143590319);
      Complex complex3 = complex0.log();
      complex1.ZERO.atan();
      Complex complex4 = complex0.divide((-3971.593675603));
      Complex complex5 = complex0.add(complex4);
      complex5.INF.subtract(complex0);
      complex3.abs();
      complex4.INF.tanh();
      complex1.cosh();
      complex4.exp();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.hashCode();
      complex0.readResolve();
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.multiply((-3036.084057682));
      complex1.getArgument();
      Complex complex6 = complex3.exp();
      complex6.ZERO.tanh();
      Complex complex7 = complex4.log();
      complex2.sqrt();
      complex1.acos();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex0.reciprocal();
      complex6.multiply(complex0);
      complex5.divide(complex9);
      complex0.log();
      complex5.exp();
      complex8.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-4179.26762942));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.acos();
      complex3.NaN.getField();
      Complex complex4 = new Complex(2.0, 2.0);
      Complex complex5 = complex2.multiply((-4179.26762942));
      complex0.getArgument();
      complex0.exp();
      Complex complex6 = complex4.log();
      complex0.sqrt();
      complex5.acos();
      complex6.sqrt();
      Complex complex7 = complex0.reciprocal();
      complex0.multiply(complex6);
      Complex complex8 = new Complex(2.0, (-1.5703177740855065));
      Complex complex9 = complex6.divide(complex8);
      complex7.log();
      complex9.exp();
      Complex.valueOf(2567.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 376.10893);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.INF.multiply(complex2);
      complex3.ZERO.readResolve();
      complex0.ONE.getArgument();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex0.I.cosh();
      Complex complex7 = complex6.ZERO.pow(Double.POSITIVE_INFINITY);
      complex7.sqrt1z();
      complex1.cosh();
      complex2.divide(complex0);
      complex5.pow((-733.54381324));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex1.exp();
      complex0.nthRoot(17);
      Complex complex5 = complex4.log();
      complex0.getImaginary();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex5.multiply(complex0);
      Complex complex9 = complex5.add(complex1);
      Complex complex10 = complex6.subtract((-150.14926816818));
      complex10.getField();
      Complex complex11 = complex9.atan();
      complex11.subtract(complex8);
      complex4.add(complex2);
      complex8.conjugate();
      Complex complex12 = Complex.valueOf((-150.14926816818), 0.17624079520292518);
      Complex complex13 = complex3.divide(complex5);
      complex12.sinh();
      Complex complex14 = new Complex((-150.14926816818));
      complex14.pow(complex8);
      Complex complex15 = complex13.sinh();
      complex7.acos();
      complex15.multiply((-596.463333));
      complex12.getReal();
      complex13.abs();
      complex15.reciprocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.cosh();
      Complex complex1 = complex0.tanh();
      complex1.NaN.pow(complex0);
      double double0 = (-2635.0);
      Complex complex2 = new Complex((-2635.0), 3248.72662);
      try { 
        complex2.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      complex1.divide((double) 2094);
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.ONE.tan();
      complex3.ONE.getField();
      complex1.exp();
      complex2.pow(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.ZERO;
      Object object0 = complex5.readResolve();
      complex5.equals(object0);
      Complex complex6 = Complex.I;
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex2.multiply(complex3);
      complex0.readResolve();
      complex2.getArgument();
      Complex complex5 = complex1.tan();
      complex3.cosh();
      Complex complex6 = complex2.pow(0.7071067811865475);
      Complex complex7 = complex1.cosh();
      Complex complex8 = Complex.INF;
      complex8.multiply(Double.NaN);
      Complex complex9 = Complex.valueOf(0.0);
      complex9.getArgument();
      complex4.exp();
      Complex complex10 = new Complex(Double.NaN);
      Complex complex11 = complex10.log();
      complex1.sqrt();
      complex7.acos();
      Complex complex12 = complex1.sqrt();
      complex4.reciprocal();
      complex11.multiply(complex0);
      complex6.divide(complex12);
      complex5.log();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-6.648490725635754E-8), 376.10893);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      Complex complex4 = complex0.subtract((-6.648490725635754E-8));
      complex0.hashCode();
      Complex complex5 = complex2.log();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.cos();
      complex6.readResolve();
      Complex complex9 = complex0.add(complex4);
      complex2.subtract(complex4);
      Complex complex10 = Complex.valueOf((-6.648490725635754E-8));
      complex10.createComplex(1.0, 1.0);
      complex9.isNaN();
      complex4.abs();
      complex9.log();
      complex8.pow(complex5);
      complex3.asin();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3887.0));
      complex0.NaN.nthRoot(751);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.multiply(complex1);
      complex0.readResolve();
      Complex complex3 = complex2.tan();
      complex0.cosh();
      Complex complex4 = complex2.pow(0.28190016746520996);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.multiply(0.28190016746520996);
      complex0.getArgument();
      Complex complex7 = complex2.exp();
      complex5.sqrt();
      Complex complex8 = complex5.acos();
      complex1.sqrt();
      complex8.reciprocal();
      Complex complex9 = complex7.multiply(complex6);
      Complex complex10 = complex9.divide(complex0);
      complex0.log();
      Complex complex11 = Complex.valueOf(2094.0, 6.283185307179586);
      complex11.exp();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(0.14095008373260498, (-1.0));
      complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex0.getField();
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.sinh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.reciprocal();
      complex4.abs();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex1.NaN.conjugate();
      complex4.ZERO.hashCode();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex1.I.tanh();
      Complex complex7 = complex6.I.negate();
      complex7.ONE.exp();
      complex7.INF.atan();
      Complex complex8 = Complex.valueOf((-1768.906652791));
      Complex complex9 = complex5.INF.divide(complex8);
      complex5.INF.abs();
      Complex complex10 = complex5.atan();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex10.I.divide(complex11);
      complex12.ZERO.conjugate();
      complex0.getImaginary();
      complex9.getReal();
      Complex complex13 = complex6.cos();
      Complex complex14 = complex13.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1213.8874));
      Complex complex15 = complex9.exp();
      complex15.I.asin();
      complex6.add((-1768.906652791));
      complex9.acos();
      complex3.sqrt();
      complex14.log();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-5863.414664169999), 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.acos();
      complex2.equals(complex1);
      Complex complex3 = complex1.cos();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(436.81363378863904);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.valueOf(436.81363378863904);
      complex2.nthRoot(1490);
      complex2.ZERO.tan();
      Complex complex3 = complex0.I.cosh();
      complex1.INF.acos();
      complex1.ZERO.nthRoot(1);
      complex3.ONE.multiply(0.0);
      Complex complex4 = complex3.ONE.multiply(436.81363378863904);
      complex4.reciprocal();
      complex1.NaN.readResolve();
      complex0.sqrt();
      complex4.asin();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.1677812418806031E-60);
      complex0.ONE.tan();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply((-2512));
      complex2.ZERO.multiply(1.1677812418806031E-60);
      Complex complex3 = complex1.sin();
      complex1.ONE.readResolve();
      complex3.I.sin();
      Complex complex4 = Complex.valueOf(0.0, 1.1677812418806031E-60);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex0.tan();
      complex3.toString();
      complex3.negate();
      complex6.abs();
      try { 
        complex7.nthRoot((-327));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -327
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-185.24387801314), (-1254.628));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.NaN.subtract((-1254.628));
      complex2.I.multiply(2659);
      complex0.exp();
      Complex complex3 = complex0.createComplex((-1254.628), (-185.24387801314));
      complex0.acos();
      complex3.add(complex0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.tan();
      try { 
        complex3.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.negate();
      complex3.divide(complex2);
      complex3.getImaginary();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      complex1.divide((double) 2094);
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.ONE.tan();
      complex3.ONE.getField();
      Complex complex4 = complex0.multiply(2094);
      complex4.INF.hashCode();
      complex4.negate();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-6.648490725635754E-8), 376.10893);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.INF.multiply(complex2);
      complex3.ZERO.readResolve();
      complex0.ONE.getArgument();
      complex4.INF.tan();
      Complex complex5 = complex0.I.cosh();
      Complex complex6 = complex5.ZERO.pow(0.0);
      complex4.NaN.cosh();
      Complex complex7 = complex0.multiply(0.0);
      complex4.getArgument();
      Complex complex8 = complex7.I.exp();
      complex8.ONE.log();
      complex8.ZERO.sqrt();
      complex5.ONE.acos();
      Complex complex9 = complex0.sqrt();
      complex0.reciprocal();
      complex9.multiply(complex7);
      Complex complex10 = complex0.divide(complex6);
      complex10.INF.log();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.NaN.reciprocal();
      Complex complex2 = new Complex((-183.655595928), 2769.08373792257);
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.pow(complex2);
      complex2.cosh();
      complex2.INF.cos();
      complex3.getReal();
      complex2.getImaginary();
      complex3.sinh();
      complex4.multiply((-328.512143));
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.subtract(complex1);
      complex2.I.abs();
      Complex complex4 = complex1.divide(0.0);
      complex2.ZERO.cos();
      Complex complex5 = complex4.INF.tanh();
      complex0.NaN.hashCode();
      Complex complex6 = complex4.pow(20.0);
      complex6.NaN.subtract(complex2);
      complex3.multiply((-5.589493227475577E-42));
      complex2.nthRoot(4054);
      Complex complex7 = complex5.tan();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.I.cos();
      complex0.INF.toString();
      complex1.INF.getArgument();
      complex0.getField();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.divide(46.991);
      complex4.INF.acos();
      complex1.hashCode();
      complex4.divide(46.991);
      Complex complex6 = complex0.tanh();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      complex7.getField();
      Complex complex8 = complex1.subtract((-2245.889637769));
      complex6.sqrt();
      complex3.subtract(complex8);
      complex6.pow(complex5);
      complex0.sqrt();
      complex3.toString();
      complex3.multiply(959);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isNaN();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex1.add(0.0);
      Complex complex2 = complex1.ZERO.sin();
      complex2.conjugate();
      Complex complex3 = complex1.multiply(0);
      complex3.I.nthRoot(1083);
      complex1.toString();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.negate();
      complex4.ONE.conjugate();
      complex4.hashCode();
      complex5.subtract((double) 0);
      complex5.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-688.007296));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.add(586.5085919199397);
      complex2.ZERO.pow(complex0);
      complex2.ZERO.tanh();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.I.add(162.648677);
      complex4.ZERO.readResolve();
      Complex.valueOf(2254.97809, 2254.97809);
      Complex complex5 = complex0.cos();
      complex5.ONE.divide(complex1);
      complex0.getArgument();
      Complex complex6 = complex0.atan();
      complex6.ONE.reciprocal();
      complex6.NaN.add(6.283185307179586);
      complex1.getArgument();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(3.5408485497116107E-9, 3.5408485497116107E-9);
      Complex complex1 = Complex.valueOf((-2960.3894238), 175.23);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex2.I.add((-2960.3894238));
      Complex.valueOf(3.5408485497116107E-9, 175.23);
      Complex complex6 = complex0.multiply(3.5408485497116107E-9);
      Complex complex7 = complex0.pow(complex4);
      Complex complex8 = complex6.ZERO.sin();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex9.ZERO.cos();
      Complex.valueOf((-2960.3894238));
      complex2.NaN.readResolve();
      complex3.ONE.add(complex5);
      complex7.ONE.createComplex(0.0, 1545.07782507404);
      complex7.divide((-1003.5415922719));
      Complex complex11 = complex3.tanh();
      complex11.pow(complex10);
      Complex complex12 = complex6.divide(1545.07782507404);
      complex6.subtract(175.23);
      complex7.atan();
      complex12.add(175.23);
      complex8.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.acos();
      complex0.I.acos();
      complex1.log();
      complex0.getField();
      complex0.hashCode();
      complex2.I.cosh();
      complex2.INF.sqrt();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      double double0 = 0.0;
      try { 
        complex3.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.tan();
      complex0.INF.tan();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.I.sqrt1z();
      int int0 = 0;
      complex1.NaN.multiply(0);
      complex0.NaN.asin();
      complex2.ONE.cosh();
      complex0.abs();
      complex3.I.exp();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex1.log();
      Complex complex6 = complex3.multiply(0.0);
      complex6.ONE.subtract(complex5);
      Complex complex7 = complex2.pow(0.0);
      complex0.add(0.0);
      Complex complex8 = complex4.multiply((-2351));
      complex8.NaN.tanh();
      complex8.INF.pow(0.0);
      complex1.getReal();
      try { 
        complex7.nthRoot((-2351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,351
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.4271754202157014E-7), (-287.524223));
      complex0.INF.acos();
      Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.pow((-1.4271754202157014E-7));
      Complex complex4 = complex1.ONE.cosh();
      complex4.NaN.negate();
      complex3.ONE.divide(complex0);
      Complex complex5 = complex0.reciprocal();
      complex5.INF.sinh();
      complex3.I.multiply(0.0);
      complex1.readResolve();
      complex3.abs();
      Complex complex6 = complex3.atan();
      complex6.INF.multiply(0.999999192032491);
      complex6.I.sqrt();
      Complex complex7 = complex0.createComplex(0.0, (-961.221742418));
      complex2.readResolve();
      Complex.valueOf(0.0, 0.0);
      complex7.divide(2438.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-4179.26762942));
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
      Complex complex2 = complex0.acos();
      complex2.NaN.getField();
      complex0.sqrt1z();
      Complex complex3 = complex0.cosh();
      int int0 = (-2056);
      try { 
        complex3.nthRoot((-2056));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,056
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      complex1.NaN.getField();
      Complex complex2 = complex1.sqrt1z();
      complex2.I.multiply(complex1);
      complex2.readResolve();
      Complex complex3 = complex2.pow((-2894.6765));
      complex3.conjugate();
      complex0.subtract(complex2);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3887.0));
      complex0.NaN.nthRoot(751);
      Complex complex1 = complex0.NaN.tanh();
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.subtract((-3887.0));
      complex0.hashCode();
      complex2.ZERO.log();
      complex2.I.add(complex0);
      Complex complex3 = complex2.NaN.cos();
      complex3.readResolve();
      complex3.NaN.add(complex2);
      Complex complex4 = complex3.I.subtract(complex0);
      Complex complex5 = complex2.createComplex(671.2534669224, (-3887.0));
      complex4.isNaN();
      complex5.abs();
      Complex complex6 = complex4.log();
      Complex complex7 = complex4.pow(complex0);
      complex7.asin();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex3.ONE.atan();
      complex4.INF.divide(complex2);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex4.NaN.negate();
      complex6.acos();
      complex4.add(0.0);
      Complex complex10 = complex6.multiply(944);
      complex9.readResolve();
      complex5.subtract(complex8);
      complex2.subtract(complex4);
      complex5.getField();
      complex10.getReal();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      complex0.createComplex(0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.I.cos();
      complex2.NaN.getArgument();
      complex2.INF.reciprocal();
      Complex complex4 = complex2.log();
      Complex complex5 = complex1.multiply(1);
      complex5.ONE.multiply(1);
      Complex.valueOf((-559.338956463639), 2.5450911557068313E-284);
      Complex complex6 = complex0.atan();
      complex6.ONE.acos();
      Complex complex7 = complex4.INF.exp();
      complex3.hashCode();
      complex2.ONE.readResolve();
      complex7.NaN.log();
      Complex complex8 = Complex.valueOf(3829.714192);
      complex8.ZERO.tan();
      complex4.nthRoot(1730);
      complex3.getArgument();
      Complex complex9 = complex0.pow(complex1);
      complex2.I.pow(complex7);
      complex2.multiply(3380.064501665);
      complex9.toString();
      complex5.negate();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex0.NaN.cos();
      Complex complex2 = complex1.NaN.add(complex0);
      complex1.sinh();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.atan();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.toString();
      complex2.exp();
      complex0.getArgument();
      complex2.sqrt();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.cosh();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex.valueOf(0.0);
      complex1.toString();
      complex0.ONE.multiply(complex1);
      complex1.nthRoot(2923);
      Complex complex3 = complex1.exp();
      complex3.NaN.pow(complex0);
      Complex complex4 = Complex.ONE;
      complex3.equals(complex4);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.ZERO.divide(0.0);
      Complex complex4 = complex1.I.createComplex(0.0, 0.0);
      Complex complex5 = complex1.ONE.add(0.0);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.ONE.exp();
      complex7.NaN.nthRoot(17);
      Complex complex8 = complex1.log();
      complex4.getImaginary();
      Complex complex9 = complex4.ONE.atan();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex4.multiply(complex3);
      Complex complex12 = complex11.ZERO.add(complex5);
      complex12.subtract(532.088);
      complex12.INF.getField();
      Complex complex13 = complex8.atan();
      complex13.NaN.subtract(complex6);
      complex13.NaN.add(complex12);
      complex13.INF.conjugate();
      Complex complex14 = Complex.valueOf(0.0, (-1216.572123111));
      Complex complex15 = complex10.divide(complex4);
      complex15.sinh();
      Complex complex16 = complex5.pow(complex9);
      Complex complex17 = complex7.sinh();
      complex17.acos();
      Complex complex18 = complex16.multiply((-2567.0));
      complex14.getReal();
      complex18.abs();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.I.getArgument();
      complex0.INF.getField();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex3.I.divide(complex4);
      Complex complex6 = complex3.NaN.sin();
      complex3.INF.pow(0.0);
      complex0.getArgument();
      complex0.getReal();
      complex0.cosh();
      complex0.I.readResolve();
      complex0.subtract(0.0);
      complex0.isNaN();
      complex6.divide(complex5);
      complex5.sin();
      complex6.negate();
      complex1.isInfinite();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(3666.35110512);
      complex0.ONE.multiply(3666.35110512);
      complex0.NaN.getField();
      Complex complex2 = Complex.valueOf(1.0);
      complex0.getField();
      complex1.toString();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1479.4);
      Complex complex1 = new Complex((-241.47287236));
      complex0.pow(complex1);
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      complex0.ONE.tanh();
      Complex complex1 = Complex.valueOf(2151.27, (-2220.967360835258));
      complex1.ZERO.sqrt();
      complex0.add((-356.113435591556));
      Complex.valueOf((-750.0));
      complex1.pow((-3321.8648953764));
      Complex complex2 = new Complex((-2220.967360835258), (-3321.8648953764));
      Complex complex3 = complex1.add(complex2);
      complex3.ZERO.multiply(1132);
      complex2.nthRoot(1255);
      complex2.pow(complex1);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.createComplex((-2.2239222395888823E-8), (-955.0));
      complex0.isInfinite();
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2208.2213);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex1.INF.conjugate();
      complex0.readResolve();
      Complex complex3 = complex2.multiply(complex1);
      complex3.ZERO.abs();
      String string0 = complex3.toString();
      assertEquals("(-4876241.309773691, 0.0)", string0);
      
      Complex complex4 = complex1.ZERO.createComplex(2208.2213, 0.0);
      Complex complex5 = complex4.ONE.divide((-1148.0));
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals((-8.710801393728223E-4), complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.pow(0.0);
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex8.INF.log();
      Complex complex11 = complex10.ONE.exp();
      double double0 = complex11.abs();
      assertEquals(2.718281828459045, double0, 0.01);
      
      Complex complex12 = complex11.NaN.sqrt();
      Complex complex13 = complex12.I.pow(complex7);
      assertEquals(0.7853981633974483, complex10.getImaginary(), 0.01);
      assertSame(complex12, complex9);
      
      complex1.isInfinite();
      complex8.equals(complex7);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex14 = complex1.negate();
      Complex complex15 = complex6.log();
      assertSame(complex15, complex13);
      
      Complex complex16 = complex1.exp();
      assertFalse(complex1.equals((Object)complex14));
      assertTrue(complex16.equals((Object)complex15));
  }
}
