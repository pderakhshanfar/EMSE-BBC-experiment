/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:23:56 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5904.422514543236), (-5904.422514543236));
      Complex complex1 = complex0.pow((-16.429867547131074));
      Complex complex2 = complex1.reciprocal();
      complex1.nthRoot(14);
      complex1.tanh();
      complex2.NaN.divide(complex0);
      complex2.acos();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = new Complex((-994.8067539172929), 20.0);
      Complex complex2 = complex1.tan();
      complex2.subtract(1.6933589141129347E-4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = new Complex((-994.8067539172929), Double.POSITIVE_INFINITY);
      complex1.sin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.multiply(complex1);
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0, 2632);
      complex1.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = new Complex((-994.8067539172929), Double.POSITIVE_INFINITY);
      complex1.multiply((-1.0));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.pow(complex1);
      complex2.subtract(2.0);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-693.5979122907371));
      Complex complex1 = Complex.valueOf((-693.5979122907371));
      complex0.NaN.abs();
      Complex complex2 = Complex.valueOf((-693.5979122907371));
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex1.multiply(complex2);
      Complex complex8 = complex1.divide((-693.5979122907371));
      complex8.I.divide(Double.NaN);
      complex8.NaN.sqrt();
      Complex.valueOf((-1202.632966097118));
      Complex complex9 = complex5.createComplex((-693.5979122907371), (-693.5979122907371));
      Complex complex10 = complex9.atan();
      Complex complex11 = complex10.createComplex((-693.5979122907371), Double.NaN);
      complex11.INF.tan();
      Complex complex12 = complex6.createComplex((-230.1819866826697), Double.NaN);
      Complex.valueOf(2.0, Double.NaN);
      Complex complex13 = complex0.sqrt1z();
      complex13.readResolve();
      complex13.I.hashCode();
      complex7.negate();
      complex4.negate();
      complex3.sinh();
      complex12.subtract(249.17);
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = (-1853.611556);
      Complex complex0 = Complex.valueOf((-1853.611556), (-1853.611556));
      Complex complex1 = Complex.valueOf((-1853.611556), (-1853.611556));
      complex0.sqrt();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.subtract(complex3);
      complex5.ONE.add(complex4);
      double double1 = Double.NaN;
      Complex complex6 = complex1.NaN.divide(Double.NaN);
      complex5.ONE.divide(complex2);
      Complex complex7 = complex2.sin();
      complex7.abs();
      try { 
        complex6.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = new Complex((-1006.3), Double.NaN);
      complex1.I.toString();
      Complex complex2 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.381264362642258, 3.19462030745197E44);
      // Undeclared exception!
      complex1.nthRoot(890228764);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.tanh();
      complex3.INF.sqrt1z();
      Complex complex4 = complex3.log();
      complex4.sqrt();
      complex3.NaN.abs();
      Complex complex5 = complex0.log();
      complex5.asin();
      complex2.sin();
      Complex complex6 = Complex.valueOf(520.11, 520.11);
      Complex complex7 = complex6.cos();
      complex7.NaN.abs();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.readResolve();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-0.5292052776014187);
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-468.24155196036395), (-5059.0855309451));
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(1.0);
      complex2.readResolve();
      Complex complex4 = complex1.pow(complex3);
      complex4.readResolve();
      Complex complex5 = complex3.sqrt1z();
      Complex.valueOf((-5059.0855309451), 3.662626117240059E7);
      complex2.getArgument();
      complex4.pow((-2165812.927280247));
      complex4.multiply(1933);
      Complex complex6 = complex2.pow((-468.24155196036395));
      Complex complex7 = complex4.subtract(Double.POSITIVE_INFINITY);
      complex7.hashCode();
      Complex complex8 = complex0.acos();
      complex7.multiply(2366);
      complex2.abs();
      complex6.cosh();
      Complex complex9 = complex7.I.add(complex8);
      complex8.pow((-2249.358945));
      complex7.acos();
      complex5.divide(complex6);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(1.2347884909397561E-14, Double.POSITIVE_INFINITY);
      complex2.tan();
      complex1.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.43527683868743E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.add(8.43527683868743E-8);
      Complex complex2 = complex1.I.subtract(8.43527683868743E-8);
      complex1.readResolve();
      complex1.equals(complex0);
      Complex complex3 = Complex.INF;
      complex1.I.getArgument();
      complex1.add((-140602.62255902292));
      complex3.sin();
      Complex complex4 = Complex.valueOf((-679.8058));
      complex4.tanh();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.43527683868743E-8, Double.POSITIVE_INFINITY);
      complex0.NaN.toString();
      Complex complex1 = complex0.multiply((-583.517));
      complex0.ONE.sin();
      complex1.INF.negate();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = new Complex(Double.NaN);
      complex0.tan();
      complex2.ONE.reciprocal();
      complex2.nthRoot(17);
      Complex complex3 = complex2.atan();
      complex2.negate();
      complex3.ZERO.tanh();
      complex1.tan();
      Complex complex4 = complex0.pow(complex3);
      complex4.INF.atan();
      complex1.multiply((-1344.0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, (-20.0));
      complex0.add(8.43527683868743E-8);
      Complex complex1 = complex0.subtract(495.35341);
      Complex complex2 = new Complex(0.9997663215346473);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.exp();
      complex1.tan();
      complex1.nthRoot(17);
      complex4.atan();
      complex4.negate();
      complex3.tan();
      complex4.getReal();
      complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2.295738697052002, (-461.0));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.divide(0.0);
      Complex complex4 = complex1.cosh();
      complex2.readResolve();
      complex2.equals("(");
      Complex complex5 = complex4.add(Double.NaN);
      complex5.I.subtract(0.43812888860702515);
      complex3.reciprocal();
      complex0.sin();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.43527683868743E-8);
      Complex complex1 = complex0.pow(9.862622492060436E-278);
      Complex complex2 = complex0.log();
      complex0.readResolve();
      complex2.pow(Double.POSITIVE_INFINITY);
      complex2.log();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.valueOf(9.862622492060436E-278);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.reciprocal();
      complex6.ONE.divide(0.5126873627779969);
      complex3.getReal();
      Complex complex7 = complex2.sinh();
      complex2.divide(complex4);
      complex7.log();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.43527683868743E-8, 8.43527683868743E-8);
      Complex complex1 = complex0.I.add(8.43527683868743E-8);
      Complex complex2 = complex1.I.subtract(8.43527683868743E-8);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex0.divide(1.6503086546628772E-97);
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex4.tan();
      complex2.tanh();
      complex7.readResolve();
      Complex complex8 = Complex.valueOf(1.6503086546628772E-97, 864.0);
      complex7.readResolve();
      Complex complex9 = complex8.sqrt1z();
      complex9.cos();
      complex9.readResolve();
      complex9.readResolve();
      Complex complex10 = Complex.INF;
      complex10.abs();
      Complex.valueOf(864.0);
      complex6.tanh();
      complex8.toString();
      Complex complex11 = Complex.INF;
      complex11.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(429.141054087);
      Complex complex1 = Complex.valueOf(429.141054087);
      Complex complex2 = Complex.valueOf(429.141054087);
      Complex complex3 = complex0.NaN.multiply(complex1);
      complex2.ONE.add(complex3);
      Complex complex4 = complex2.NaN.divide(429.141054087);
      Complex complex5 = complex4.I.multiply(complex3);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex0.tanh();
      complex7.readResolve();
      Complex complex8 = Complex.valueOf(429.141054087, 2.2143474801981373);
      Complex complex9 = (Complex)complex0.readResolve();
      complex6.sqrt1z();
      complex5.readResolve();
      complex9.readResolve();
      complex3.readResolve();
      complex8.equals(complex0);
      complex3.add(429.141054087);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(848.73712576);
      complex1.abs();
      Complex complex2 = complex0.conjugate();
      complex1.reciprocal();
      Complex complex3 = Complex.NaN;
      complex3.getReal();
      complex0.sinh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.divide(complex4);
      complex2.sin();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex0.divide(complex1);
      Complex complex2 = complex1.createComplex((-1443.018188726), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.NaN.subtract((-173.839905));
      complex3.INF.toString();
      Complex complex5 = complex2.NaN.cos();
      complex4.cos();
      Complex complex6 = Complex.valueOf((-89.592899807415), 2.019510970445E7);
      complex5.ZERO.cosh();
      Complex complex7 = Complex.valueOf((-89.592899807415));
      complex7.I.toString();
      complex0.add((-1443.018188726));
      Complex complex8 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex0.acos();
      Complex complex10 = complex6.reciprocal();
      complex2.getArgument();
      complex8.conjugate();
      complex9.multiply(complex6);
      Complex complex11 = complex10.divide(1515.8649256444);
      Complex complex12 = complex11.subtract(complex0);
      Complex complex13 = complex12.NaN.subtract(2012.933289256);
      complex13.NaN.nthRoot(1147);
      complex11.negate();
      complex3.conjugate();
      complex3.cos();
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.conjugate();
      complex1.getField();
      Complex.valueOf((-313.35));
      complex2.readResolve();
      complex2.equals(complex0);
      Complex complex3 = complex1.add(2.0);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = (Complex)complex1.readResolve();
      complex0.equals(complex3);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.acos();
      complex5.ONE.multiply(complex4);
      complex5.ONE.sqrt1z();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.43527683868743E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.add(8.43527683868743E-8);
      Complex complex2 = complex1.I.subtract(8.43527683868743E-8);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.exp();
      complex2.tan();
      complex4.nthRoot(17);
      complex2.atan();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex2.tanh();
      complex7.readResolve();
      complex6.readResolve();
      complex0.multiply(785);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1884.9292689686747));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.exp();
      complex2.I.hashCode();
      Complex complex3 = complex2.INF.multiply((-1428));
      complex1.ZERO.hashCode();
      Complex complex4 = complex1.ONE.sqrt1z();
      complex4.ZERO.sqrt();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex5.conjugate();
      complex7.I.sqrt();
      complex7.NaN.log();
      Complex complex8 = complex3.add(complex1);
      complex8.NaN.readResolve();
      complex8.ONE.readResolve();
      complex8.ONE.asin();
      Complex complex9 = complex3.reciprocal();
      complex6.ONE.nthRoot(2656);
      try { 
        complex9.I.nthRoot((-1428));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,428
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow((-637.6573));
      Complex complex2 = complex0.log();
      complex0.I.readResolve();
      complex0.ZERO.tanh();
      Complex complex3 = complex2.pow((-637.6573));
      complex2.NaN.log();
      complex1.reciprocal();
      Complex complex4 = Complex.valueOf((-637.6573));
      complex4.I.abs();
      complex3.conjugate();
      Complex complex5 = complex3.reciprocal();
      complex2.getReal();
      complex5.sinh();
      Complex complex6 = Complex.valueOf((-1.0), 9.226271427054614E270);
      complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-3.037477806841494E135));
      Complex complex1 = complex0.conjugate();
      complex0.getField();
      Complex complex2 = Complex.valueOf((-162.071697), 0.0);
      complex0.asin();
      complex1.sqrt1z();
      Complex complex3 = complex2.subtract(complex1);
      complex1.log();
      complex3.reciprocal();
      complex3.acos();
      Complex complex4 = Complex.INF;
      complex4.asin();
      Complex complex5 = Complex.I;
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-3.037477806841494E135));
      Complex complex1 = Complex.valueOf((-3.037477806841494E135));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.I;
      complex2.sqrt1z();
      Complex complex4 = complex0.divide((-3.037477806841494E135));
      Complex complex5 = complex3.tan();
      Complex complex6 = complex4.tanh();
      complex5.readResolve();
      complex3.readResolve();
      complex6.nthRoot(1409);
      Complex complex7 = complex5.sqrt1z();
      complex1.subtract(complex7);
      complex7.log();
      complex0.reciprocal();
      complex6.asin();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow((-609.3856521954114));
      Complex complex2 = complex0.log();
      Complex complex3 = (Complex)complex0.I.readResolve();
      Complex complex4 = complex2.pow((-609.3856521954114));
      Complex complex5 = complex2.log();
      Complex complex6 = complex3.reciprocal();
      Complex.valueOf((-609.3856521954114));
      complex2.abs();
      complex3.conjugate();
      complex1.reciprocal();
      complex6.getReal();
      complex1.sinh();
      complex5.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = Complex.valueOf((-850.6703477764476));
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      Complex complex4 = Complex.valueOf((-1290.77144));
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-3.037477806841494E135));
      complex0.conjugate();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide(3419.531934415397);
      Complex complex3 = Complex.ZERO;
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      Complex complex4 = complex2.add((-3.037477806841494E135));
      complex4.reciprocal();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-5066.6495697502));
      complex0.INF.atan();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.log();
      complex0.reciprocal();
      Complex.valueOf((-0.9999995159019117));
      complex0.abs();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.reciprocal();
      complex4.getReal();
      complex1.sinh();
      Complex complex5 = Complex.ZERO;
      complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4265.98782561783);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.negate();
      complex0.divide(complex1);
      complex2.cosh();
      complex2.equals(complex1);
      complex2.add((-98.2));
      Complex complex3 = new Complex((-3786.69));
      complex3.reciprocal();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(0.0);
      complex0.subtract(complex1);
      complex0.abs();
      complex0.tanh();
      complex0.toString();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(0.0, (-20.0));
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = complex0.INF.subtract(2.4059133529663086);
      complex1.INF.toString();
      Complex complex2 = complex0.NaN.negate();
      complex0.NaN.createComplex(2.4059133529663086, 2.4059133529663086);
      complex0.multiply(5177);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex2.I.reciprocal();
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.valueOf((double) 5177, (double) 5177);
      complex7.multiply((-4094.051660220578));
      complex4.pow(complex2);
      complex7.sqrt1z();
      Complex complex8 = complex2.conjugate();
      complex0.add(complex8);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      complex0.NaN.getField();
      Complex complex2 = Complex.valueOf(7029.570645435279, (-3420.121128821127));
      Complex complex3 = complex2.ONE.log();
      complex1.ONE.log();
      Complex complex4 = complex0.cosh();
      complex0.getImaginary();
      complex3.ZERO.pow(0.0);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.INF.subtract(complex0);
      Complex.valueOf((-3174.6));
      complex6.ZERO.toString();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.NaN.acos();
      complex9.ONE.getField();
      complex6.multiply(572);
      complex3.cos();
      complex5.isNaN();
      complex1.getField();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      complex1.INF.getField();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex3.NaN.divide(1.0337605476379395);
      Complex complex6 = complex1.log();
      Complex complex7 = complex2.I.divide(complex5);
      Complex complex8 = complex5.ONE.createComplex(1.0337605476379395, 1834.099756477436);
      Complex complex9 = complex0.negate();
      complex9.subtract(complex7);
      complex2.ZERO.multiply(1291.587836);
      Complex complex10 = complex5.asin();
      complex0.NaN.nthRoot(2857);
      complex2.cos();
      complex4.getField();
      Complex complex11 = complex10.pow(complex4);
      complex1.negate();
      complex10.getField();
      complex8.add(complex11);
      complex6.getArgument();
      complex0.cosh();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(429.141054087);
      Complex complex1 = Complex.valueOf(429.141054087);
      Complex complex2 = Complex.valueOf(429.141054087);
      Complex complex3 = complex0.NaN.multiply(complex1);
      complex2.ONE.add(complex3);
      Complex complex4 = complex2.NaN.divide(429.141054087);
      complex4.I.multiply(complex3);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.tanh();
      complex6.readResolve();
      complex0.readResolve();
      complex5.sqrt1z();
      complex2.subtract(complex1);
      complex3.log();
      complex2.reciprocal();
      complex1.ZERO.acos();
      Complex complex7 = complex5.asin();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.43527683868743E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.add(8.43527683868743E-8);
      Complex complex2 = complex1.I.subtract(8.43527683868743E-8);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex2.tan();
      complex4.nthRoot(17);
      complex2.atan();
      complex0.negate();
      Complex complex6 = Complex.valueOf(0.0, 2.0);
      complex1.createComplex(2.0, 17);
      complex5.multiply(complex3);
      complex1.add(complex2);
      Complex complex7 = new Complex(1.5707963267948966);
      complex7.sinh();
      complex0.multiply(complex1);
      complex5.conjugate();
      complex1.cos();
      Complex complex8 = Complex.ZERO;
      complex8.multiply((-1504.606243));
      complex3.tan();
      complex6.getField();
      Complex.valueOf(2.179424521221378E-224);
      complex4.tan();
      Complex.valueOf((-74.27041899), 706.8199132442626);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = Complex.valueOf(0.48235688235171503);
      Complex complex8 = complex2.pow(complex6);
      complex5.readResolve();
      complex5.equals(complex7);
      Complex complex9 = complex7.multiply(1460);
      complex1.add(complex5);
      complex3.multiply(complex4);
      complex9.hashCode();
      complex0.tan();
      Complex complex10 = Complex.NaN;
      complex10.atan();
      complex9.exp();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      complex0.sqrt();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.ZERO.add(0.0);
      complex0.pow(complex2);
      Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.add((-771.10277909384));
      Complex complex4 = Complex.valueOf((-20.0), 0.4788752794265747);
      Complex complex5 = complex4.multiply(738);
      Complex complex6 = new Complex((-266.03), 1);
      complex6.readResolve();
      complex4.tanh();
      complex6.divide(complex4);
      complex3.abs();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex7.multiply(1);
      complex1.log();
      complex2.getField();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-3.037477806841494E135));
      complex0.conjugate();
      complex0.tan();
      Complex.valueOf((-162.071697), 0.0);
      Complex complex1 = complex0.asin();
      complex1.abs();
      complex1.tanh();
      complex1.toString();
      Complex complex2 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-3.037477806841494E135));
      Complex complex1 = complex0.conjugate();
      complex0.getField();
      Complex complex2 = complex0.pow(4288.06);
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.reciprocal();
      Complex.valueOf(4288.06);
      complex3.abs();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.reciprocal();
      complex2.getReal();
      complex1.sinh();
      complex6.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(231.47, 231.47);
      Complex complex1 = complex0.negate();
      complex1.NaN.getField();
      Complex complex2 = complex1.subtract(231.47);
      complex0.subtract(complex1);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.43527683868743E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.add(8.43527683868743E-8);
      Complex complex2 = complex1.I.subtract(8.43527683868743E-8);
      Complex complex3 = complex2.NaN.atan();
      complex0.INF.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.cosh();
      complex5.I.toString();
      complex2.INF.getField();
      complex1.NaN.abs();
      complex4.hashCode();
      Complex complex6 = complex4.sin();
      complex4.toString();
      complex1.INF.subtract(complex4);
      complex4.NaN.multiply(complex6);
      Complex complex7 = complex3.add(2099.3730665);
      complex7.isInfinite();
      complex4.sqrt1z();
      complex6.atan();
      complex2.abs();
      complex2.subtract((-8.504598069682661));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(429.141054087);
      Complex complex1 = Complex.valueOf(429.141054087);
      Complex complex2 = Complex.valueOf(429.141054087);
      complex0.NaN.multiply(complex1);
      complex2.getField();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex3.asin();
      Complex.valueOf((-1207.173014535406));
      complex4.abs();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf(184161.04430290146);
      complex6.toString();
      Complex complex7 = complex5.divide(0.9951074372581358);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-583.517));
      Complex complex2 = complex0.exp();
      complex0.divide(complex2);
      complex0.divide((-98.2));
      Complex complex3 = complex2.cosh();
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      complex1.add(0.0);
      Complex complex4 = complex0.reciprocal();
      complex4.sin();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(231.47, 231.47);
      Complex complex1 = complex0.negate();
      complex1.NaN.getField();
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sqrt1z();
      complex2.divide(3020.52781967255);
      complex0.tan();
      Complex complex5 = complex4.tanh();
      complex1.readResolve();
      complex2.readResolve();
      complex1.sqrt1z();
      Complex complex6 = Complex.valueOf(231.47);
      complex6.subtract(complex3);
      Complex complex7 = Complex.ZERO;
      complex7.log();
      complex6.reciprocal();
      complex2.asin();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(231.47);
      Complex complex1 = Complex.valueOf(231.47);
      Complex complex2 = Complex.valueOf(231.47);
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex4.divide((-2503.8957289122804));
      complex1.tan();
      Complex complex7 = complex6.tanh();
      complex4.readResolve();
      complex4.readResolve();
      complex6.sqrt1z();
      Complex complex8 = complex5.subtract(complex7);
      complex8.log();
      complex5.reciprocal();
      complex0.asin();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.99987710387965, 1174.59);
      complex0.negate();
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = Complex.NaN;
      complex2.cos();
      complex0.sqrt1z();
      Complex.valueOf(2060.74426, (-1548.4099275));
      complex0.reciprocal();
      Complex complex3 = Complex.ZERO;
      complex3.createComplex(8.43527683868743E-8, 0.99987710387965);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(231.47, 231.47);
      complex0.negate();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf((-3417.822796607), (-751.612));
      complex0.reciprocal();
      complex3.tan();
      complex3.atan();
      complex2.exp();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.27);
      Complex complex1 = complex0.ONE.multiply(1960.6808374336267);
      complex0.ONE.hashCode();
      complex0.nthRoot(1009);
      complex0.ONE.exp();
      Complex complex2 = complex0.tan();
      complex2.ZERO.nthRoot(1009);
      Complex complex3 = complex0.atan();
      complex3.I.negate();
      Complex.valueOf(2.0, 0.0);
      complex3.ZERO.createComplex(2.179424521221378E-224, 2.179424521221378E-224);
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex2.add(complex1);
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex6.I.multiply(complex4);
      complex7.INF.conjugate();
      complex5.cos();
      complex2.INF.multiply(0.27);
      complex4.tan();
      complex2.getField();
      Complex complex8 = Complex.valueOf(567.1403);
      complex5.conjugate();
      complex8.pow((-426.87496489023));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.ONE.subtract(complex2);
      complex3.NaN.sqrt();
      complex3.NaN.toString();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ZERO.divide(complex1);
      complex0.I.asin();
      double double0 = 802.7696856941;
      Complex complex6 = complex0.add(802.7696856941);
      Complex complex7 = complex6.asin();
      complex6.getReal();
      Complex.valueOf(802.7696856941, Double.NaN);
      complex7.tan();
      try { 
        complex5.INF.nthRoot((-2910));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,910
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.43527683868743E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.add(8.43527683868743E-8);
      Complex complex2 = complex1.I.subtract(8.43527683868743E-8);
      complex2.NaN.atan();
      complex0.INF.getArgument();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.cosh();
      complex4.I.toString();
      Complex complex5 = complex0.multiply(complex3);
      complex5.INF.getField();
      complex5.NaN.abs();
      complex3.hashCode();
      Complex complex6 = complex3.sin();
      complex3.toString();
      complex3.NaN.multiply(complex6);
      Complex complex7 = complex5.add(2099.3730665);
      complex7.isInfinite();
      complex3.sqrt1z();
      complex6.atan();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.acos();
      complex1.I.toString();
      Complex complex4 = complex0.createComplex((-2046.0), (-2046.0));
      Complex complex5 = complex4.INF.conjugate();
      complex5.I.sin();
      complex0.ONE.multiply(complex2);
      Complex complex6 = complex4.cosh();
      complex6.getField();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex0.pow(complex6);
      complex3.isInfinite();
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex0.createComplex(0.0, Double.NaN);
      complex10.NaN.divide(0.0);
      Complex complex11 = complex7.subtract(complex8);
      complex0.createComplex(Double.NaN, 0.0);
      complex11.subtract(Double.NaN);
      complex5.sqrt();
      Complex complex12 = complex9.acos();
      Complex complex13 = Complex.valueOf(0.0);
      complex12.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.INF.divide(complex0);
      complex3.INF.divide((-98.2));
      complex3.INF.cosh();
      complex0.equals((Object) null);
      complex0.add(0.0);
      complex1.reciprocal();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow((-637.6573));
      Complex complex2 = complex0.log();
      complex0.I.readResolve();
      Complex complex3 = complex2.pow((-637.6573));
      complex2.NaN.log();
      complex1.reciprocal();
      Complex complex4 = Complex.valueOf((-637.6573));
      complex4.I.abs();
      complex3.conjugate();
      Complex complex5 = complex3.reciprocal();
      complex2.getReal();
      Complex complex6 = complex5.sinh();
      complex3.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2066.964257, 2066.964257);
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.ZERO.sinh();
      complex1.isNaN();
      complex0.readResolve();
      complex1.ZERO.readResolve();
      Complex complex3 = complex1.cosh();
      complex3.INF.hashCode();
      Complex complex4 = complex1.createComplex(2066.964257, 2066.964257);
      Complex complex5 = complex4.NaN.createComplex(2066.964257, (-1163.158829682));
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex1.add(2066.964257);
      Complex complex9 = complex8.ONE.subtract(complex1);
      Complex complex10 = complex9.ZERO.divide(0.0);
      complex10.INF.negate();
      complex10.ZERO.toString();
      Complex complex11 = complex6.conjugate();
      complex11.toString();
      Complex complex12 = complex11.sqrt1z();
      Complex complex13 = complex8.multiply(561.0734);
      complex13.NaN.multiply(complex7);
      complex1.log();
      complex9.divide(0.0);
      complex5.atan();
      complex10.asin();
      complex12.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.27);
      Complex complex1 = complex0.ONE.multiply(1960.6808374336267);
      complex0.ONE.hashCode();
      complex0.nthRoot(1009);
      complex0.ONE.exp();
      Complex complex2 = complex0.tan();
      complex2.ZERO.nthRoot(1009);
      Complex complex3 = complex0.atan();
      complex3.I.negate();
      Complex.valueOf(2.0, 0.0);
      complex3.ZERO.createComplex(2.179424521221378E-224, 2.179424521221378E-224);
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex2.add(complex1);
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex6.I.multiply(complex4);
      complex7.INF.conjugate();
      complex5.cos();
      complex2.INF.multiply(0.27);
      complex4.tan();
      complex2.getField();
      Complex.valueOf(567.1403);
      complex3.tan();
      Complex.valueOf(0.27, 1960.6808374336267);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-583.517));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.sinh();
      complex3.I.getArgument();
      complex2.getField();
      Complex complex4 = complex3.I.cosh();
      complex4.ZERO.tanh();
      Complex complex5 = complex2.multiply(complex0);
      complex5.INF.hashCode();
      complex5.equals(complex0);
      complex3.getField();
      Complex complex6 = complex1.createComplex(0.0, (-583.517));
      Complex complex7 = complex6.INF.reciprocal();
      complex7.sqrt();
      Complex complex8 = complex6.log();
      complex4.isInfinite();
      complex0.acos();
      complex8.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.tan();
      Complex complex1 = complex0.ZERO.multiply(1620);
      Complex complex2 = new Complex((-1.564440844355254E-7));
      Complex complex3 = complex1.ZERO.multiply(complex2);
      complex3.asin();
      complex3.INF.sinh();
      Complex complex4 = complex0.subtract((-1.564440844355254E-7));
      Complex complex5 = complex4.tanh();
      complex5.I.readResolve();
      Complex complex6 = complex4.ZERO.log();
      complex0.getImaginary();
      complex4.INF.subtract((double) 1620);
      Complex complex7 = complex0.ZERO.exp();
      Complex complex8 = complex7.NaN.divide(0.0);
      Complex complex9 = complex4.multiply(0.0);
      Complex complex10 = complex4.sqrt();
      complex5.hashCode();
      Complex complex11 = Complex.INF;
      complex6.INF.atan();
      Complex complex12 = complex9.add(complex11);
      complex12.add(complex8);
      complex6.sin();
      Complex complex13 = Complex.valueOf(0.0, 3026.649889870249);
      Complex complex14 = complex13.NaN.sinh();
      complex7.pow(complex10);
      Complex complex15 = complex7.sqrt1z();
      complex14.sqrt();
      complex9.tanh();
      complex14.multiply(1620);
      complex15.toString();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-902.9));
      Complex complex1 = complex0.ZERO.pow((-902.9));
      Complex complex2 = complex0.tan();
      complex0.isNaN();
      Complex complex3 = complex0.divide((-2705.749));
      complex3.I.hashCode();
      Complex complex4 = Complex.valueOf(20.0, 0.0);
      complex4.NaN.getArgument();
      Complex complex5 = complex4.I.pow(complex3);
      complex5.getArgument();
      complex1.nthRoot(429);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.divide(0.0);
      complex7.ONE.exp();
      complex6.sinh();
      Complex complex8 = complex5.multiply(237);
      complex7.INF.pow((double) 237);
      complex3.sqrt();
      complex7.isInfinite();
      complex8.isNaN();
      complex2.toString();
      Complex.valueOf(0.0, (double) 237);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-2714.476), (-2714.476));
      Complex complex1 = complex0.INF.tan();
      complex1.I.log();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex1.ZERO.multiply((-2714.476));
      complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.INF.log();
      complex3.NaN.toString();
      complex3.I.multiply((-2714.476));
      try { 
        complex2.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-3.037477806841494E135));
      complex0.conjugate();
      complex0.getField();
      complex0.tan();
      Complex.valueOf((-162.071697), 0.0);
      Complex complex1 = complex0.asin();
      complex1.abs();
      complex1.tanh();
      complex1.toString();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.negate();
      complex1.ONE.pow(1.6023339607737848E-7);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex3.INF.sqrt();
      complex4.INF.negate();
      Complex complex5 = complex2.INF.exp();
      complex5.ONE.negate();
      Complex complex6 = complex0.multiply((-2243.7515532337));
      complex6.readResolve();
      complex1.isNaN();
      Complex complex7 = complex5.asin();
      complex1.getImaginary();
      Complex complex8 = Complex.valueOf(0.5729197263717651, 0.5729197263717651);
      complex8.ONE.subtract(0.5729197263717651);
      complex1.getImaginary();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      complex9.createComplex(0.0, (-2243.7515532337));
      complex7.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex2.hashCode();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(1888.83332545);
      complex0.ZERO.abs();
      complex0.getField();
      complex0.NaN.readResolve();
      complex0.NaN.negate();
      Complex complex2 = complex0.subtract(5.705842978547001E100);
      complex2.NaN.multiply(2406);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.NaN.pow((-572.3183766278299));
      complex5.INF.nthRoot(2406);
      complex2.toString();
      complex1.hashCode();
      complex5.asin();
      complex5.sin();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double double0 = 599.0;
      Complex complex0 = Complex.valueOf(599.0, 599.0);
      Complex complex1 = complex0.sinh();
      complex0.isNaN();
      Complex complex2 = complex0.INF.reciprocal();
      complex0.ZERO.add(599.0);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.I.subtract(complex0);
      complex2.INF.sin();
      complex0.getImaginary();
      complex3.ZERO.tan();
      double double1 = 1.0;
      Complex complex6 = new Complex(1.0);
      Complex complex7 = complex2.ONE.add(complex5);
      complex7.I.readResolve();
      complex0.divide(complex6);
      complex6.abs();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(231.47, 231.47);
      Complex complex1 = complex0.negate();
      complex1.NaN.getField();
      Complex complex2 = complex0.cos();
      complex2.sqrt1z();
      Complex.valueOf((-3417.822796607), (-751.612));
      complex0.reciprocal();
      complex2.createComplex((-20.0), (-1229.6777892282225));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.NaN.createComplex((-2.8977490516960565E-8), 0.0);
      complex0.subtract(complex1);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex3.INF.multiply(complex0);
      complex4.ZERO.getArgument();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      try { 
        complex5.nthRoot((-1629));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,629
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.INF.add(complex1);
      complex0.ZERO.hashCode();
      complex0.ZERO.getField();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.cos();
      complex0.INF.pow(complex3);
      Complex complex4 = complex2.INF.divide(0.0);
      complex4.ONE.hashCode();
      complex2.I.negate();
      complex0.sin();
      complex3.getArgument();
      complex0.equals("{0} out of ({1}, {2}] range");
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.isInfinite();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex3.subtract(0.0);
      complex3.ONE.negate();
      Complex complex4 = complex2.negate();
      complex4.readResolve();
      Complex complex5 = complex2.negate();
      complex4.subtract(complex0);
      Complex complex6 = complex1.sin();
      complex6.INF.pow(complex4);
      Complex complex7 = complex5.cosh();
      Complex.valueOf(454.0);
      complex7.subtract(complex6);
      complex0.getImaginary();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1502.57576247832);
      Complex complex1 = new Complex((-437.284648596));
      Complex complex2 = complex0.ZERO.add(complex1);
      complex0.NaN.readResolve();
      complex1.NaN.reciprocal();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.I.divide(19.742859);
      complex5.ZERO.negate();
      complex0.conjugate();
      complex3.ONE.nthRoot(7);
      Complex complex6 = complex2.tanh();
      complex3.isInfinite();
      complex3.sqrt();
      complex1.ONE.abs();
      complex5.INF.sinh();
      complex0.isNaN();
      complex1.abs();
      Complex.valueOf(1502.57576247832, 0.0);
      Complex complex7 = complex5.cos();
      complex4.asin();
      complex5.acos();
      complex3.getField();
      complex6.atan();
      Complex complex8 = complex2.pow(0.0);
      complex8.NaN.add(2764.6);
      complex0.abs();
      Complex complex9 = complex7.cos();
      complex9.sqrt();
      complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.ZERO.getArgument();
      Complex complex2 = Complex.valueOf(913.982);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.INF.tanh();
      Complex complex5 = complex1.ZERO.divide(913.982);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.ZERO.subtract(913.982);
      complex8.ONE.conjugate();
      Complex complex9 = complex0.acos();
      complex9.ZERO.hashCode();
      complex6.subtract(complex5);
      complex7.toString();
      complex5.getReal();
      Complex complex10 = Complex.valueOf(562.462588, 0.0);
      Complex complex11 = complex10.atan();
      complex11.NaN.negate();
      complex11.I.acos();
      complex11.asin();
      Complex complex12 = complex9.NaN.sqrt();
      complex12.sin();
      Complex complex13 = complex2.subtract(complex0);
      complex13.I.multiply(complex8);
      complex9.nthRoot(1);
      complex7.divide(4719.37724036);
      Complex complex14 = complex12.pow(2.2513351440429688);
      Complex complex15 = complex3.asin();
      complex15.I.getArgument();
      complex4.divide(complex14);
      complex1.nthRoot(99);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.createComplex(2.2741891590028428E-8, 3723.133692);
      complex2.I.subtract(complex0);
      complex2.NaN.add(0.0);
      Complex complex3 = complex0.conjugate();
      complex3.I.cosh();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.ZERO.add(0.0);
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex4.ZERO.tan();
      complex4.ZERO.subtract(complex5);
      Complex.valueOf((-850.6703477764476));
      Complex complex6 = complex4.INF.pow(complex3);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex7 = complex1.multiply(1460);
      Complex complex8 = complex7.add(complex3);
      complex2.multiply(complex5);
      complex8.hashCode();
      complex4.tan();
      complex3.atan();
      complex6.exp();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 0.0);
      Complex complex1 = complex0.subtract((-1.8981247089866317E-7));
      Complex complex2 = Complex.valueOf(699.15704, 1.0);
      Complex complex3 = complex2.ONE.pow(complex1);
      complex3.INF.divide(complex1);
      Complex complex4 = complex3.multiply(0.0);
      complex4.ZERO.divide(complex0);
      complex0.getArgument();
      complex0.nthRoot(2789);
      Complex complex5 = complex1.multiply(2789);
      Complex complex6 = complex5.ONE.subtract(964.8697143164549);
      Complex complex7 = Complex.valueOf((-5.303786078838E-10), (double) 2789);
      Complex complex8 = complex5.pow(complex2);
      complex6.NaN.createComplex((-1.8981247089866317E-7), (-1.0902938113007961E-8));
      complex1.add(complex5);
      complex7.readResolve();
      complex1.multiply(complex8);
      complex5.conjugate();
      complex1.ONE.createComplex(308.1291363448, 964.8697143164549);
      Complex complex9 = complex6.divide(0.0);
      complex7.getArgument();
      complex8.divide((-5.303786078838E-10));
      complex9.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(429.141054087);
      Complex complex1 = Complex.valueOf(429.141054087);
      Complex complex2 = Complex.valueOf(429.141054087);
      Complex complex3 = complex0.NaN.multiply(complex1);
      complex2.ONE.add(complex3);
      complex3.NaN.sqrt1z();
      complex2.NaN.divide(429.141054087);
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex0.tanh();
      complex5.readResolve();
      complex0.readResolve();
      complex4.sqrt1z();
      complex2.subtract(complex1);
      complex3.log();
      complex2.reciprocal();
      Complex complex6 = complex4.asin();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(3177.665, 3177.665);
      Complex complex1 = complex0.I.sqrt();
      complex0.getReal();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.I.divide(complex0);
      Complex complex5 = complex4.ZERO.cos();
      complex4.ZERO.acos();
      Complex complex6 = complex1.I.createComplex(3177.665, 3177.665);
      Complex complex7 = complex6.INF.add(complex3);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.ZERO.tanh();
      complex2.subtract(complex1);
      complex1.log();
      complex3.subtract(1.7430980205535889);
      complex0.I.subtract(complex5);
      complex0.toString();
      Complex complex10 = complex7.add((-1064.86));
      complex10.INF.sinh();
      complex8.getReal();
      Complex complex11 = complex6.sinh();
      complex11.readResolve();
      complex9.isInfinite();
      complex9.sinh();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex2.I.conjugate();
      Complex complex6 = complex4.ONE.acos();
      complex6.I.log();
      Complex complex7 = complex2.I.sin();
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      complex8.INF.add(complex4);
      Complex complex9 = complex0.add(complex1);
      complex9.ZERO.sqrt1z();
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex10.NaN.getArgument();
      complex1.nthRoot(2804);
      complex5.getField();
      Complex complex11 = Complex.valueOf(Double.NaN);
      complex4.getField();
      complex11.abs();
      complex11.add(1.7567694187164307);
      complex0.getField();
      complex4.createComplex(Double.NaN, Double.NaN);
      Complex complex12 = complex7.pow((double) 2804);
      complex10.conjugate();
      complex12.sqrt();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.NaN.pow(complex1);
      complex2.pow(complex3);
      Complex complex4 = Complex.valueOf((-9.204784113858607E-279));
      Complex complex5 = complex3.ZERO.add(Double.POSITIVE_INFINITY);
      complex5.ONE.multiply(1);
      complex2.INF.readResolve();
      Complex complex6 = complex3.tanh();
      complex6.INF.divide(complex2);
      complex0.abs();
      complex0.acos();
      Complex complex7 = complex4.multiply(954);
      complex0.log();
      complex5.getField();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.INF.tan();
      complex0.I.atan();
      Complex complex2 = complex0.asin();
      complex2.ZERO.pow(complex0);
      Complex complex3 = complex1.subtract(complex0);
      complex3.I.acos();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex4.exp();
      complex1.multiply(1);
      Complex complex7 = complex1.subtract(complex6);
      complex7.nthRoot(1);
      Complex complex8 = complex5.I.asin();
      complex2.acos();
      Complex complex9 = complex7.ZERO.exp();
      complex9.ONE.multiply((double) 1);
      Complex.valueOf((double) 1);
      complex7.hashCode();
      complex5.abs();
      complex5.equals(complex0);
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.I.log();
      complex2.INF.conjugate();
      complex0.acos();
      complex0.getImaginary();
      int int0 = (-1151);
      try { 
        complex0.ONE.nthRoot((-1151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,151
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.sqrt();
      Complex complex3 = complex1.ONE.subtract(0.0);
      Complex complex4 = complex2.ZERO.pow(complex0);
      Complex complex5 = complex1.ZERO.tan();
      complex0.subtract(complex1);
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex6.NaN.add((-2251.9774927429116));
      complex1.ZERO.acos();
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex8.INF.tan();
      complex6.getField();
      complex2.multiply(complex4);
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex1.sinh();
      complex11.getField();
      complex3.isNaN();
      complex5.sqrt1z();
      complex6.sinh();
      complex10.sin();
      complex1.isInfinite();
      complex9.add(complex8);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      complex0.NaN.getField();
      Complex complex2 = Complex.valueOf(7029.570645435279, (-3420.121128821127));
      Complex complex3 = complex2.ONE.log();
      complex1.ONE.log();
      Complex complex4 = complex0.cosh();
      complex0.getImaginary();
      complex3.ZERO.pow(0.0);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.INF.subtract(complex0);
      Complex.valueOf((-3174.6));
      complex6.ZERO.toString();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.NaN.acos();
      complex9.ONE.getField();
      complex6.multiply(572);
      complex3.cos();
      complex5.isNaN();
      complex1.getField();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3481.383780699094, 386.97181);
      complex0.INF.readResolve();
      Complex complex1 = complex0.subtract(20.0);
      Complex complex2 = complex1.negate();
      complex2.NaN.sinh();
      Complex complex3 = complex1.INF.tanh();
      complex3.NaN.log();
      Complex complex4 = complex1.pow(complex0);
      complex1.isInfinite();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.I.divide(3481.383780699094);
      complex6.ONE.negate();
      Complex complex7 = Complex.valueOf(386.97181);
      Complex complex8 = complex7.I.cosh();
      complex2.INF.pow(complex0);
      Complex complex9 = complex3.multiply((-1008));
      Complex complex10 = complex2.add(complex0);
      complex10.NaN.add(complex6);
      complex1.exp();
      complex4.createComplex(386.97181, 0.0);
      Complex.valueOf(3481.383780699094);
      complex8.add(complex9);
      complex9.getField();
      complex4.readResolve();
      complex7.conjugate();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4265.98782561783);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.asin();
      complex2.conjugate();
      complex0.getImaginary();
      complex0.hashCode();
      Complex complex3 = complex1.reciprocal();
      complex3.sinh();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.ONE.divide(2.3820250362443495E-79);
      assertEquals(4.198108688129756E78, complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.ZERO.multiply(1);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex0.ZERO.exp();
      complex1.getArgument();
      Complex complex9 = complex7.ZERO.sqrt();
      Complex complex10 = complex3.pow(0.0);
      Complex complex11 = complex10.divide(complex3);
      Complex complex12 = Complex.valueOf((double) 1, 683.62516488);
      assertEquals(1.0, complex12.getReal(), 0.01);
      
      complex0.ZERO.abs();
      Complex complex13 = complex7.sqrt();
      assertTrue(complex13.equals((Object)complex4));
      
      complex0.sinh();
      Complex complex14 = complex8.createComplex((-1401.4804), (-1401.4804));
      Complex complex15 = complex14.I.cos();
      Complex complex16 = complex15.ZERO.divide((-20.0));
      assertTrue(complex16.equals((Object)complex6));
      
      Complex complex17 = complex14.NaN.reciprocal();
      assertNotSame(complex17, complex10);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertSame(complex17, complex11);
      assertFalse(complex17.equals((Object)complex9));
      
      complex1.readResolve();
      Complex complex18 = complex7.sinh();
      String string0 = complex2.toString();
      assertEquals("(0.0, 0.8414709848078965)", string0);
      
      Complex complex19 = complex2.cos();
      Complex complex20 = complex19.tan();
      assertEquals(5.053205078448428, complex20.getReal(), 0.01);
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      
      Complex complex21 = complex18.sinh();
      assertEquals(1.4650188248182272, complex21.getReal(), 0.01);
      
      complex19.getImaginary();
      double double0 = complex1.getArgument();
      assertEquals(0.0, double0, 0.01);
      
      complex19.sin();
      assertTrue(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex13));
  }
}
