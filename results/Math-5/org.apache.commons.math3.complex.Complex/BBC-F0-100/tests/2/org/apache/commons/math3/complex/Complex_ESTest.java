/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:24:11 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(3749);
      complex1.nthRoot(1979);
      Complex complex2 = Complex.ONE;
      complex2.divide(1.4201378353978042E-97);
      Complex complex3 = new Complex(3749, Double.POSITIVE_INFINITY);
      complex3.multiply(complex1);
      complex2.log();
      Complex complex4 = new Complex(1979, 1979);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 1979);
      complex5.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(2.18713790898745E-148, 1.4201378353978042E-97);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.tan();
      complex0.tanh();
      Complex complex5 = complex4.pow(0.7071067811865475);
      complex5.ZERO.multiply(18);
      Complex complex6 = complex1.subtract(complex2);
      complex6.tan();
      complex1.nthRoot(18);
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6420149920119997, 0.6420149920119997);
      Complex complex1 = complex0.ONE.add(6.283185307179586);
      Complex complex2 = new Complex(0.6420149920119997);
      Complex complex3 = complex0.ZERO.subtract(complex2);
      complex3.NaN.getField();
      complex3.NaN.hashCode();
      Complex complex4 = complex2.I.pow(complex1);
      Complex complex5 = complex2.I.sqrt();
      complex4.ONE.cos();
      complex0.toString();
      Complex complex6 = Complex.valueOf((-535.1867829941845), Double.POSITIVE_INFINITY);
      complex1.multiply((-323));
      Complex complex7 = complex2.asin();
      complex7.NaN.reciprocal();
      complex6.cosh();
      complex6.tan();
      complex7.INF.createComplex(756.785496, 2273.91325700911);
      Complex complex8 = complex7.subtract(complex3);
      complex8.ZERO.multiply(complex6);
      Complex complex9 = complex1.sin();
      Complex complex10 = complex4.subtract(complex3);
      Complex complex11 = complex2.tanh();
      complex11.nthRoot(36);
      complex0.getField();
      complex4.toString();
      complex9.asin();
      complex8.toString();
      complex0.asin();
      complex4.cosh();
      complex5.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = new Complex((-20.0), (-20.0));
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex4.cosh();
      complex1.tan();
      Complex complex6 = Complex.ZERO;
      complex6.acos();
      complex6.multiply(4964);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.4201378353978042E-97, 20.0);
      Complex complex2 = complex1.createComplex(20.0, 1.4201378353978042E-97);
      Complex complex3 = complex0.acos();
      complex2.sqrt();
      complex3.tan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-20.0), (-2.148245271118002E-8));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = new Complex((-346.32403307192897), (-1839.0));
      complex1.divide(complex2);
      complex3.tan();
      complex4.sqrt();
      complex3.multiply((-2.148245271118002E-8));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3.343201925128334E60), (-3.343201925128334E60));
      complex0.toString();
      Complex complex2 = complex0.cosh();
      complex1.ONE.negate();
      complex0.sqrt();
      complex1.acos();
      complex2.multiply((-430.836739239));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.sqrt();
      Complex complex2 = complex1.acos();
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1025.6624707702958), (-1025.6624707702958));
      Complex complex2 = complex1.tanh();
      complex2.sin();
      Complex complex3 = complex2.multiply(3155);
      Complex complex4 = complex0.conjugate();
      complex4.atan();
      complex0.reciprocal();
      try { 
        complex3.nthRoot((-1233));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,233
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.subtract(Double.NaN);
      complex0.multiply(complex0);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1702.524089));
      Complex complex2 = new Complex((-1702.524089));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2068.54604805507), 3483.2256142460237);
      Complex complex1 = complex0.ONE.tanh();
      complex0.NaN.getArgument();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ONE.multiply((-1645.0));
      Complex complex4 = complex2.ZERO.tan();
      complex4.NaN.getArgument();
      complex2.I.multiply((-1108.12383602));
      Complex complex5 = complex4.I.divide(complex3);
      complex0.pow(complex2);
      complex1.tanh();
      Complex complex6 = complex4.sinh();
      complex6.multiply(Double.NaN);
      complex2.pow((-141.865674));
      Complex.valueOf((-1645.0));
      complex0.atan();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex1.exp();
      complex8.ZERO.multiply((-632));
      complex3.pow((-1108.12383602));
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      complex0.getField();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex4.I.sqrt();
      complex5.ZERO.reciprocal();
      Complex complex6 = complex2.negate();
      complex6.INF.getField();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex7.I.pow(1481.443897);
      complex8.I.nthRoot(3136);
      Complex complex9 = complex7.subtract(complex0);
      complex1.asin();
      Complex complex10 = complex9.sqrt1z();
      complex10.ONE.sin();
      Complex complex11 = complex7.pow(2383.88004889);
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex1.pow(0.8414709848078964);
      complex13.INF.multiply(1481.443897);
      complex12.ONE.tanh();
      complex13.ONE.sqrt();
      complex11.conjugate();
      Complex complex14 = complex6.sinh();
      complex14.NaN.hashCode();
      complex12.log();
      complex9.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(2773.924466777);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = Complex.INF;
      complex0.multiply(complex3);
      Complex complex4 = complex0.add((-2905.8614));
      Complex complex5 = complex0.sinh();
      complex5.NaN.cos();
      complex5.NaN.log();
      Complex complex6 = complex2.pow(2773.924466777);
      complex6.NaN.multiply(4996);
      complex4.multiply(complex6);
      Complex complex7 = complex1.log();
      Complex.valueOf(0.19862669706344604, (double) 4996);
      Complex complex8 = Complex.valueOf(3456.357247641077);
      complex8.ONE.divide(complex7);
      complex2.divide((-2905.8614));
      complex0.divide(complex4);
      complex4.pow((-1.0));
      complex0.atan();
      complex0.asin();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.ZERO.add(Double.NaN);
      complex1.ZERO.divide(complex0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.NaN.sinh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(3163);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.tanh();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(3163);
      Complex complex1 = complex0.cosh();
      complex1.pow((double) 3163);
      Complex complex2 = Complex.ONE;
      complex2.createComplex((-302.808), 3163);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(1074, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(1079);
      Complex complex1 = new Complex(1079, 0.0);
      complex1.tan();
      Complex complex2 = Complex.I;
      complex0.equals(complex2);
      Complex complex3 = Complex.I;
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.pow((-8.395362063517366E69));
      Complex complex3 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex1.toString();
      complex2.tanh();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex3.exp();
      complex4.negate();
      Complex complex6 = complex2.pow(1187.41975882523);
      complex6.conjugate();
      Complex complex7 = complex3.createComplex(Double.POSITIVE_INFINITY, 2290.9483);
      Complex complex8 = complex2.divide(complex0);
      Complex complex9 = complex4.sin();
      complex8.divide(complex7);
      complex8.asin();
      Complex complex10 = complex5.exp();
      complex10.isInfinite();
      Complex complex11 = Complex.INF;
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(161.69919801522);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.negate();
      complex1.sin();
      Complex complex4 = complex3.pow(0.0);
      complex3.multiply(161.69919801522);
      complex0.toString();
      complex0.tanh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex(0.0, 1074);
      Complex complex7 = complex3.exp();
      complex3.negate();
      Complex complex8 = complex6.pow((double) 1074);
      complex8.conjugate();
      Complex complex9 = complex7.createComplex((-0.45220672918658694), 161.69919801522);
      complex9.divide(complex5);
      complex5.sin();
      Complex complex10 = complex2.divide(complex9);
      complex3.asin();
      complex10.exp();
      Complex.valueOf(2428.44522, 429.498898922785);
      complex2.divide(Double.NaN);
      complex1.sqrt1z();
      complex4.toString();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.reciprocal();
      complex0.hashCode();
      Complex complex3 = Complex.ZERO;
      complex0.multiply(1977);
      Complex complex4 = new Complex(1.619992971420288, Double.NaN);
      Complex complex5 = complex4.tan();
      complex0.tanh();
      complex5.tanh();
      complex2.cos();
      Complex complex6 = new Complex(Double.NaN);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
      Complex complex1 = complex0.sinh();
      complex1.readResolve();
      Complex complex2 = Complex.ZERO;
      complex1.equals(complex2);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.ONE;
      complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.NaN.reciprocal();
      complex0.nthRoot(2534);
      Complex complex3 = complex2.sqrt1z();
      complex0.INF.cosh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.pow(complex3);
      complex5.hashCode();
      Complex complex7 = complex4.multiply((-1224.06392));
      complex6.sin();
      complex5.getField();
      complex7.sqrt();
      Complex.valueOf((double) 2534, (double) 2534);
      Complex.valueOf(0.0, (-2.260433328226171E-8));
      complex0.acos();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(0.6707151531649225, 0.6707151531649225);
      complex1.hashCode();
      complex2.pow((-139.81411332));
      complex1.pow((-139.81411332));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      complex1.getField();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.NaN;
      complex2.negate();
      complex1.toString();
      complex3.getArgument();
      complex0.reciprocal();
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      complex0.I.subtract((-1.6040513288090055E-287));
      complex0.INF.add(0.0);
      Complex complex1 = complex0.I.exp();
      complex1.NaN.getField();
      Complex complex2 = Complex.NaN;
      complex2.negate();
      complex0.negate();
      complex1.toString();
      Complex complex3 = Complex.valueOf(1303.0, Double.POSITIVE_INFINITY);
      complex3.acos();
      Complex complex4 = Complex.I;
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.hashCode();
      Complex complex2 = Complex.valueOf(0.6707151531649225, (double) 1074);
      Complex complex3 = complex2.multiply(1074);
      Complex complex4 = new Complex(1074, 0.6707151531649225);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.tanh();
      complex6.tanh();
      complex3.cos();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(2728.473816, (-184.64893));
      Complex complex1 = new Complex(2728.473816);
      complex1.hashCode();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.multiply(1074);
      Complex complex4 = new Complex(4440.222840484873, 20.0);
      complex4.tan();
      complex3.tanh();
      complex1.tanh();
      complex2.cos();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.sqrt();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.acos();
      complex2.getArgument();
      complex2.reciprocal();
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(2728.473816, (-184.64893));
      complex0.ONE.divide(complex0);
      complex0.INF.negate();
      complex0.INF.toString();
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(complex0);
      complex1.subtract(complex2);
      complex2.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(2728.473816, (-184.64893));
      Complex complex1 = new Complex(2728.473816);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.reciprocal();
      complex5.isInfinite();
      Complex complex7 = complex3.conjugate();
      complex2.multiply(1084);
      complex5.tan();
      complex6.conjugate();
      complex7.tanh();
      complex3.sqrt();
      complex6.sqrt();
      Complex complex8 = Complex.valueOf(2728.473816, (-2836.190260063898));
      Complex complex9 = complex8.acos();
      complex9.add(complex3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      complex0.I.subtract((-1.6040513288090055E-287));
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex0.I.exp();
      complex2.NaN.getField();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.NaN;
      complex4.negate();
      complex3.negate();
      complex2.toString();
      complex3.getArgument();
      Complex complex5 = complex3.reciprocal();
      complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.atan();
      double double0 = 3709.1;
      // Undeclared exception!
      complex4.ONE.nthRoot(5183);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(2020.0, 2020.0);
      Complex complex1 = complex0.conjugate();
      Complex.valueOf((-1778.45665), 2020.0);
      Complex complex2 = complex0.asin();
      complex2.hashCode();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.multiply(complex0);
      complex2.tan();
      complex1.exp();
      complex4.cosh();
      complex2.sqrt();
      complex2.sinh();
      complex1.subtract((-1778.45665));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      complex0.ONE.asin();
      complex1.I.hashCode();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = new Complex(3171.298, 3171.298);
      complex1.sinh();
      complex3.multiply((-1199));
      complex3.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(2728.473816, (-184.64893));
      Complex complex1 = new Complex(2728.473816);
      complex0.ONE.divide(complex1);
      complex0.ONE.negate();
      Complex complex2 = complex0.INF.negate();
      complex2.toString();
      complex2.getArgument();
      Complex complex3 = complex0.reciprocal();
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.valueOf(9314055.475898426, (double) 2534);
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.hashCode();
      complex5.multiply(complex4);
      complex2.tan();
      complex2.exp();
      complex3.cosh();
      complex2.sqrt();
      Complex complex6 = new Complex(3171.298);
      Complex complex7 = complex6.sinh();
      complex7.subtract((-6.736873974532501E-8));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      Complex complex3 = complex0.asin();
      complex3.hashCode();
      Complex complex4 = new Complex((-2888.6350770229));
      complex4.multiply(complex3);
      complex2.tan();
      complex1.exp();
      Complex complex5 = complex2.cosh();
      complex4.sqrt();
      complex2.sinh();
      complex5.subtract((-862.017708));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.valueOf((-1021.9), (-1585.7511));
      complex4.hashCode();
      Complex complex5 = new Complex((-28.36246302079177), 2.242630017261011E-174);
      complex5.multiply(complex1);
      complex2.tan();
      complex3.exp();
      complex1.cosh();
      Complex complex6 = complex1.sqrt();
      complex6.sinh();
      complex5.subtract((-28.36246302079177));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      Complex complex1 = complex0.I.subtract((-1.6040513288090055E-287));
      complex0.INF.add(0.0);
      Complex complex2 = complex0.I.exp();
      complex2.NaN.getField();
      complex0.asin();
      complex2.sqrt();
      complex0.negate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.reciprocal();
      complex1.isInfinite();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex4.sin();
      Complex complex7 = Complex.ZERO;
      complex5.multiply((-1110));
      Complex complex8 = new Complex((-1.6040513288090055E-287), Double.POSITIVE_INFINITY);
      complex0.tan();
      complex1.conjugate();
      Complex complex9 = complex6.tanh();
      complex3.tanh();
      Complex complex10 = Complex.ZERO;
      complex10.cos();
      complex4.sqrt();
      complex9.reciprocal();
      complex6.add(complex10);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      complex0.I.subtract((-1.0257921074960811E7));
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      Complex complex3 = complex0.ONE.asin();
      complex1.I.hashCode();
      complex2.I.multiply(complex0);
      Complex complex4 = complex1.tan();
      complex1.ZERO.asin();
      Complex complex5 = new Complex((-862.017708), (-3551.3902633604));
      Complex complex6 = complex4.tan();
      complex3.conjugate();
      complex6.tanh();
      Complex complex7 = complex2.tanh();
      complex2.cos();
      Complex complex8 = new Complex((-3551.3902633604), 3171.298);
      Complex complex9 = complex8.sqrt();
      complex9.INF.pow((-123.645130736));
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      Complex complex1 = complex0.I.subtract((-1.6040513288090055E-287));
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex0.I.exp();
      complex3.NaN.getField();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.sqrt();
      complex1.negate();
      Complex complex6 = Complex.ZERO;
      complex6.reciprocal();
      complex3.isInfinite();
      complex3.conjugate();
      complex2.multiply((-1.6040513288090055E-287));
      complex2.divide((-697.693856));
      complex5.tanh();
      complex1.pow(complex5);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(675.176);
      Complex complex1 = complex0.INF.createComplex(675.176, 675.176);
      Complex complex2 = new Complex(675.176);
      Complex complex3 = complex2.multiply(675.176);
      complex3.INF.nthRoot(1172);
      Complex complex4 = complex0.ONE.reciprocal();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex6.ONE.createComplex(1172, 675.176);
      complex6.NaN.tanh();
      Complex complex8 = complex7.ONE.divide(Double.NaN);
      complex8.I.abs();
      Complex complex9 = complex5.conjugate();
      complex9.ONE.pow(675.176);
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex2.pow(complex10);
      complex11.ONE.sin();
      complex9.getField();
      complex6.reciprocal();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      Complex complex3 = complex0.ONE.asin();
      complex3.I.multiply(complex2);
      complex1.I.hashCode();
      complex2.I.multiply(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.I.exp();
      complex5.NaN.multiply(3171.298);
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.valueOf((-0.6241885458607617), 3171.298);
      complex6.divide(complex7);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-1));
      Complex complex2 = complex0.NaN.sqrt1z();
      complex2.NaN.tan();
      Complex complex3 = complex0.I.pow(0.0);
      Complex.valueOf(0.0);
      Complex complex4 = complex3.I.exp();
      complex0.getField();
      Complex complex5 = complex4.atan();
      complex5.ZERO.negate();
      Complex complex6 = Complex.NaN;
      complex1.pow(complex3);
      Complex complex7 = new Complex((-1408.64852142596), (-6739.1));
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex0.I.exp();
      complex3.cos();
      complex3.NaN.getField();
      Complex complex4 = complex0.asin();
      complex4.ONE.sqrt();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.I.reciprocal();
      complex4.isInfinite();
      complex1.conjugate();
      complex1.sin();
      Complex complex7 = complex0.multiply(1079);
      complex2.tan();
      complex7.conjugate();
      Complex complex8 = complex6.tanh();
      complex8.tanh();
      complex8.cos();
      complex0.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(2886.6931);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.conjugate();
      complex2.NaN.asin();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.ONE.divide(0.0);
      complex1.subtract(0.0);
      complex3.subtract(complex1);
      complex0.log();
      Complex complex7 = complex4.reciprocal();
      complex7.NaN.add(0.0);
      Complex.valueOf(0.0);
      complex6.cosh();
      Complex complex8 = new Complex((-362.1695669913339), 2886.6931);
      complex8.reciprocal();
      complex5.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-674.176), (-674.176));
      Complex complex1 = complex0.createComplex((-674.176), (-674.176));
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.atan();
      complex3.multiply(212.3565898);
      Complex complex5 = complex4.divide(765.1913164517063);
      Complex complex6 = Complex.NaN;
      complex6.pow(complex2);
      complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2728.473816, 2728.473816);
      Complex complex1 = new Complex(2728.473816);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.ONE.negate();
      complex0.INF.negate();
      complex0.INF.toString();
      complex0.getArgument();
      complex0.INF.multiply(438);
      complex2.readResolve();
      Complex complex4 = Complex.ZERO;
      complex4.equals(complex3);
      Complex.valueOf(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.negate();
      complex1.divide(167.30148632009);
      complex1.subtract(1876.865);
      Complex complex6 = complex3.subtract(complex1);
      Complex complex7 = complex6.log();
      complex2.reciprocal();
      Complex.valueOf(167.30148632009);
      complex7.cosh();
      Complex complex8 = complex5.sqrt();
      complex8.sinh();
      complex7.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(2886.6931);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.conjugate();
      complex2.NaN.asin();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.multiply(0.0);
      complex0.negate();
      complex0.ONE.divide(0.0);
      complex1.subtract(0.0);
      complex3.subtract(complex1);
      complex0.log();
      complex4.reciprocal();
      Complex complex5 = Complex.valueOf(0.0);
      complex1.log();
      complex5.abs();
      complex3.hashCode();
      Complex complex6 = complex2.tan();
      complex3.subtract(complex1);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-674.176), (-674.176));
      Complex complex1 = complex0.createComplex((-674.176), (-674.176));
      complex1.tan();
      Complex complex2 = new Complex((-674.176));
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.tanh();
      complex3.getArgument();
      complex0.getReal();
      complex5.isInfinite();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      Complex complex3 = complex0.ONE.asin();
      complex3.NaN.getField();
      complex1.I.hashCode();
      complex2.multiply(complex0);
      Complex complex4 = complex0.tan();
      complex1.exp();
      complex2.NaN.conjugate();
      Complex.valueOf((-862.017708), Double.NaN);
      complex4.pow(complex1);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      Complex complex3 = complex0.ONE.asin();
      complex1.I.hashCode();
      Complex complex4 = complex3.multiply(complex2);
      complex0.tan();
      Complex complex5 = complex4.exp();
      Complex.valueOf((-6.259620482221904E-8), 786.17);
      complex5.pow(complex0);
      Complex complex6 = new Complex(0.9999977645670428, 3171.298);
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2066.30924772);
      Complex.valueOf(2066.30924772);
      complex0.ZERO.getField();
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = Complex.valueOf((-1585.7511), 0.554580807685852);
      complex0.I.subtract(complex2);
      complex0.getImaginary();
      complex0.ZERO.getField();
      Complex complex3 = Complex.valueOf(2020.0, 0.554580807685852);
      Complex complex4 = Complex.ZERO;
      complex4.NaN.negate();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.multiply(0);
      complex2.INF.sqrt1z();
      Complex complex7 = Complex.valueOf(1138.56392142);
      complex1.subtract(0.0);
      complex7.I.pow(534.0);
      Complex complex8 = complex2.log();
      complex1.ZERO.log();
      complex7.abs();
      complex6.hashCode();
      complex8.tan();
      complex5.subtract(complex6);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(2886.6931);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.conjugate();
      complex2.NaN.asin();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.multiply(0.0);
      complex0.negate();
      complex0.ONE.divide(0.0);
      complex1.subtract(0.0);
      complex3.subtract(complex1);
      complex0.log();
      Complex complex5 = complex4.reciprocal();
      Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf(2886.6931, (-1304.07));
      Complex complex7 = Complex.valueOf((-1304.07));
      complex7.pow(complex6);
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      complex0.ONE.asin();
      complex1.I.hashCode();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex1.tan();
      complex4.I.exp();
      Complex complex5 = complex3.cosh();
      complex5.sqrt();
      complex5.sinh();
      complex5.subtract((-862.017708));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(2886.6931);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.conjugate();
      complex2.NaN.asin();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.multiply(0.0);
      complex0.negate();
      Complex complex5 = complex0.ONE.divide(0.0);
      complex1.subtract(0.0);
      complex3.subtract(complex1);
      Complex complex6 = complex0.log();
      complex4.reciprocal();
      Complex.valueOf(0.0);
      complex5.cosh();
      Complex complex7 = complex3.sqrt();
      complex7.NaN.sinh();
      complex6.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-674.176), (-674.176));
      Complex complex1 = complex0.createComplex((-674.176), (-674.176));
      Complex complex2 = complex1.INF.log();
      complex1.I.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf((-674.176), (-674.176));
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex3.I.subtract(complex4);
      complex6.toString();
      Complex complex7 = complex3.subtract(complex0);
      complex7.cosh();
      complex4.add(complex3);
      complex5.divide((-674.176));
      complex2.divide(complex6);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt();
      complex0.acos();
      complex1.INF.multiply(complex0);
      Complex complex2 = complex0.subtract((-20.0));
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex2.ZERO.createComplex((-20.0), 480.72183);
      complex3.NaN.divide(complex0);
      complex2.abs();
      Complex complex5 = complex0.divide(complex1);
      complex5.ONE.tan();
      complex5.NaN.sin();
      complex5.readResolve();
      Complex complex6 = complex3.sin();
      complex6.multiply(complex1);
      complex6.NaN.exp();
      complex4.hashCode();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(2046.390532562762, 2535.1283308935103);
      Complex complex1 = Complex.I;
      try { 
        complex1.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.ONE.log();
      Complex complex1 = Complex.valueOf((-2011.466), (-2011.466));
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.subtract((-2011.466));
      Complex complex3 = complex1.sin();
      complex3.INF.pow((-1.0));
      Complex complex4 = Complex.valueOf(2621.2532390631723, (-3.7155475428252136E-8));
      Complex complex5 = complex4.acos();
      complex5.ZERO.multiply((-2011.466));
      complex1.abs();
      complex3.exp();
      Complex complex6 = complex3.multiply((-751.236643448));
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.INF.acos();
      complex3.ONE.exp();
      complex1.acos();
      complex0.readResolve();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.pow(complex0);
      complex5.NaN.conjugate();
      Complex complex6 = complex4.exp();
      complex6.ONE.reciprocal();
      complex6.ZERO.tanh();
      complex6.ONE.nthRoot(139);
      Complex complex7 = complex6.ONE.add((-791.4332567));
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = Complex.valueOf(0.0);
      complex9.INF.toString();
      Complex complex10 = Complex.valueOf(449.843188331483);
      Complex complex11 = complex10.sinh();
      complex11.I.cosh();
      complex11.I.reciprocal();
      complex4.reciprocal();
      complex5.tanh();
      complex4.I.add(complex2);
      complex5.subtract((-791.4332567));
      complex8.sinh();
      complex11.isInfinite();
      complex7.nthRoot(139);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.NaN.readResolve();
      complex0.I.abs();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 466.5718758682);
      Complex complex1 = Complex.valueOf((-1971.59771228), 466.5718758682);
      Complex complex2 = complex0.multiply(466.5718758682);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex1.I.subtract(complex4);
      complex6.NaN.toString();
      Complex complex7 = complex5.ZERO.subtract(0.0);
      complex3.I.add((-2887.7872095));
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex2.sqrt();
      complex11.INF.readResolve();
      complex1.multiply((-1971.59771228));
      complex2.abs();
      complex10.subtract(complex2);
      Complex complex12 = complex3.log();
      complex12.NaN.subtract(complex3);
      complex8.toString();
      complex7.toString();
      complex0.isInfinite();
      Complex.valueOf(2.0, (-2887.7872095));
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = (-1681.338);
      Complex complex0 = Complex.valueOf((-1681.338));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.pow(complex1);
      complex0.createComplex((-1681.338), (-7.44321345601866E-11));
      complex1.ONE.sqrt1z();
      try { 
        complex2.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.acos();
      complex2.I.multiply(complex1);
      Complex complex3 = complex1.ZERO.conjugate();
      complex3.ONE.nthRoot(3372);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.I.divide((double) 3372);
      complex1.INF.abs();
      Complex complex6 = complex3.sinh();
      complex6.NaN.cos();
      complex6.ZERO.readResolve();
      Complex complex7 = complex0.log();
      Complex complex8 = complex0.I.subtract(6.283185307179586);
      complex8.I.pow(complex7);
      complex8.sin();
      complex8.I.divide(complex5);
      complex7.ZERO.conjugate();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex9.NaN.subtract(complex5);
      complex10.INF.pow(complex6);
      complex0.isInfinite();
      complex5.hashCode();
      Complex.valueOf(0.0);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.tan();
      complex0.INF.multiply(0.0);
      complex0.NaN.getField();
      complex0.multiply(1360);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(2728.473816, (-184.64893));
      Complex complex1 = new Complex(2728.473816);
      complex0.ONE.divide(complex1);
      complex0.ONE.negate();
      complex0.INF.negate();
      complex0.INF.toString();
      complex0.getArgument();
      Complex complex2 = complex0.reciprocal();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      complex0.ONE.asin();
      complex1.I.hashCode();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex1.tan();
      complex4.I.exp();
      Complex.valueOf((-6.259620482221904E-8), 786.17);
      complex0.pow(complex2);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.NaN.reciprocal();
      complex0.nthRoot(2534);
      complex1.INF.sqrt1z();
      complex1.sqrt1z();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.pow(complex2);
      complex2.NaN.hashCode();
      Complex complex5 = complex0.multiply(1696.912648177638);
      Complex complex6 = complex4.sin();
      complex6.INF.getField();
      complex0.INF.subtract(1221.2);
      Object object0 = complex5.readResolve();
      complex0.equals(object0);
      Complex.valueOf((-1639.5093320847345));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.ONE.sqrt1z();
      complex2.ONE.cosh();
      Complex complex4 = complex1.INF.conjugate();
      complex2.ZERO.tan();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.ZERO.add(complex3);
      Complex complex7 = complex0.divide(complex1);
      complex4.NaN.reciprocal();
      Complex complex8 = complex7.ONE.sqrt();
      complex1.ZERO.divide(2.292498520423419E298);
      complex6.I.multiply(complex1);
      Complex complex9 = complex7.divide(complex4);
      complex9.ONE.negate();
      Complex complex10 = complex9.INF.asin();
      complex10.multiply(0.0);
      complex2.I.add(complex6);
      complex7.sqrt1z();
      complex2.sinh();
      complex0.ZERO.subtract(0.0);
      complex4.divide(complex9);
      Complex complex11 = complex7.multiply(0.0);
      complex11.isInfinite();
      complex8.getImaginary();
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      complex1.I.multiply(0);
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.log();
      complex3.NaN.abs();
      Complex complex4 = complex2.I.tanh();
      complex1.tan();
      complex0.isNaN();
      Complex complex5 = complex2.pow(0.0);
      complex2.cos();
      Complex complex6 = complex2.sqrt();
      complex6.ZERO.abs();
      complex5.tan();
      complex0.hashCode();
      complex4.sinh();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-945.875399442677));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.divide((-945.875399442677));
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      complex0.getReal();
      complex2.multiply((-2631));
      complex3.exp();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.I.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.atan();
      Complex.valueOf(1074.82932, 1074.82932);
      Complex complex3 = complex1.ZERO.tanh();
      complex3.ONE.toString();
      complex2.I.exp();
      Complex complex4 = Complex.valueOf(1706.92434560447, 1706.92434560447);
      complex0.divide(complex4);
      complex4.readResolve();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.valueOf((-1778.0));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex4.ONE.reciprocal();
      complex3.ONE.hashCode();
      Complex complex6 = complex3.subtract((-1071.31221578847));
      complex3.nthRoot(565);
      complex6.toString();
      Complex complex7 = complex2.divide(complex5);
      complex5.I.hashCode();
      complex7.ZERO.readResolve();
      complex5.toString();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-1));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.I.pow(0.0);
      Complex.valueOf(0.0);
      Complex complex5 = complex4.I.exp();
      complex0.getField();
      Complex complex6 = complex5.atan();
      complex6.ZERO.negate();
      complex6.log();
      complex2.divide(complex3);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.sin();
      Complex complex1 = new Complex(2.0, 0.0);
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.exp();
      complex2.multiply((-573));
      complex2.I.tanh();
      Complex complex4 = complex0.ZERO.divide(complex1);
      complex4.tan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.ONE.multiply(complex5);
      complex6.NaN.getArgument();
      complex5.INF.getArgument();
      complex0.readResolve();
      complex5.add(2.0);
      Complex complex7 = complex0.sqrt1z();
      complex7.ZERO.toString();
      Complex complex8 = complex2.sqrt1z();
      complex8.multiply(2266.0029050573);
      Complex complex9 = Complex.valueOf((-193.3), 2.0);
      complex2.sin();
      complex5.add(complex3);
      complex2.getImaginary();
      complex9.negate();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sin();
      complex1.ONE.subtract(379.5321282661567);
      Complex complex2 = complex0.NaN.tan();
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex3.multiply(0);
      complex5.I.tan();
      Complex complex6 = complex5.NaN.sinh();
      complex3.isNaN();
      complex4.toString();
      complex6.sin();
      Complex complex7 = complex3.NaN.createComplex(0.0, 379.5321282661567);
      complex3.sqrt();
      Complex complex8 = complex3.cos();
      complex5.pow(complex4);
      complex2.divide((double) 0);
      complex6.readResolve();
      complex1.negate();
      complex7.isInfinite();
      complex4.cosh();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.cosh();
      Complex complex1 = complex0.sqrt1z();
      complex0.NaN.getField();
      Complex complex2 = complex1.sinh();
      complex2.isNaN();
      complex2.isInfinite();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.INF.sqrt();
      complex5.INF.abs();
      complex5.INF.multiply((-2831));
      complex1.pow((-3030.0));
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.acos();
      complex1.NaN.nthRoot(1380);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.subtract(complex5);
      complex0.tanh();
      Complex complex7 = complex0.divide((double) 1380);
      Complex complex8 = complex2.divide(complex0);
      Complex complex9 = new Complex(0.0, (-811.7041162999));
      Complex complex10 = complex8.subtract(complex9);
      Complex complex11 = complex7.sinh();
      complex11.I.hashCode();
      Complex complex12 = complex11.INF.log();
      Complex complex13 = complex12.pow(complex10);
      complex13.INF.toString();
      Complex complex14 = Complex.valueOf((-811.7041162999), 0.0);
      complex14.I.hashCode();
      Complex complex15 = complex4.subtract(complex14);
      complex15.INF.sin();
      complex6.acos();
      complex1.sin();
      complex14.add(0.0);
      complex13.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3202.7991);
      complex0.ZERO.cos();
      complex0.acos();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.multiply(1237);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.INF.pow(complex3);
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex4.INF.sqrt1z();
      Complex complex7 = complex6.ONE.conjugate();
      complex7.I.sinh();
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex2.pow(complex6);
      complex0.sqrt1z();
      Complex complex10 = complex9.ZERO.pow(908.37779468);
      complex2.INF.atan();
      complex3.getArgument();
      complex8.isNaN();
      Complex complex11 = complex2.createComplex(1237, 2332.497117273);
      Complex complex12 = complex1.sqrt1z();
      complex8.tanh();
      complex2.ONE.tan();
      Complex complex13 = complex12.INF.exp();
      complex13.I.asin();
      complex5.equals(complex8);
      complex11.exp();
      complex10.acos();
      complex7.multiply(complex10);
      complex10.subtract(complex8);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.add(complex0);
      Complex complex3 = complex0.atan();
      complex1.ZERO.multiply(6.23514943204966E27);
      Complex complex4 = complex3.ZERO.divide(3709.1);
      complex4.ZERO.tanh();
      complex0.pow(complex1);
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      Complex complex1 = complex0.I.subtract((-1.6040513288090055E-287));
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex0.I.exp();
      complex3.NaN.getField();
      Complex complex4 = complex0.asin();
      complex4.ONE.sqrt();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.I.reciprocal();
      complex4.isInfinite();
      complex1.conjugate();
      complex1.sin();
      Complex complex7 = complex0.multiply(1079);
      complex2.tan();
      complex7.conjugate();
      Complex complex8 = complex6.tanh();
      complex8.tanh();
      complex8.cos();
      complex0.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-252.328464763));
      Complex complex1 = complex0.NaN.sinh();
      complex1.ZERO.subtract(0.0);
      Complex complex2 = complex0.cos();
      complex0.ONE.createComplex(6.9971608778572, 0.0);
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ZERO.atan();
      complex5.sqrt();
      complex4.INF.log();
      Complex complex6 = new Complex(0.0, 0.0);
      complex0.equals(complex6);
      complex4.acos();
      complex3.cos();
      Complex complex7 = complex2.log();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1967.111155264344);
      complex0.INF.sinh();
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-5438.0));
      complex1.getArgument();
      Complex complex2 = complex0.pow((-3481.295628));
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex3.I.add(complex1);
      Complex complex5 = complex1.pow(complex0);
      Complex.valueOf(0.0);
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.NaN.divide(complex7);
      Complex complex9 = complex7.log();
      Complex complex10 = complex9.I.divide(complex1);
      complex0.ONE.sqrt1z();
      complex10.I.readResolve();
      complex0.getReal();
      Complex complex11 = complex5.pow(2322.972149257);
      complex11.ONE.toString();
      complex6.pow(complex11);
      complex1.subtract(Double.NaN);
      Complex complex12 = complex9.divide(2322.972149257);
      complex4.sin();
      complex5.sqrt();
      complex9.I.add(complex11);
      Complex complex13 = Complex.valueOf(967.711604867647, 6.283185307179586);
      complex13.ONE.sqrt();
      complex12.add(complex13);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.tanh();
      Complex complex3 = complex0.conjugate();
      double double1 = (-9.482976524690715E-10);
      int int0 = (-890);
      complex3.ZERO.multiply((-890));
      Complex complex4 = complex3.ONE.subtract(0.0);
      Complex complex5 = complex4.NaN.atan();
      try { 
        complex5.ZERO.nthRoot((-890));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -890
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-2689.66818133505));
      Complex complex2 = complex1.INF.cos();
      complex1.INF.nthRoot(158);
      Complex complex3 = complex2.divide((-2689.66818133505));
      complex3.I.subtract((-3123.404));
      complex0.I.sin();
      Complex complex4 = complex1.NaN.reciprocal();
      complex4.INF.getArgument();
      Complex complex5 = complex0.NaN.acos();
      complex5.I.hashCode();
      complex0.readResolve();
      Complex complex6 = complex1.NaN.add(complex0);
      complex2.I.sin();
      Complex complex7 = complex1.ZERO.subtract(complex4);
      complex4.nthRoot(1);
      complex1.getReal();
      Complex complex8 = complex4.cos();
      complex0.equals(complex8);
      complex7.ONE.getField();
      Complex complex9 = complex7.exp();
      complex2.subtract((-1719.67527583));
      complex1.isInfinite();
      complex9.multiply((double) 1);
      complex6.getReal();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(449.97, 449.97);
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.subtract(complex1);
      complex1.I.tanh();
      Complex complex3 = Complex.valueOf((-2541.4314123582762));
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.tanh();
      complex6.ZERO.sqrt1z();
      complex3.hashCode();
      complex4.sinh();
      Complex complex7 = Complex.I;
      complex1.add(complex7);
      complex6.sqrt1z();
      complex6.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex1.INF.exp();
      complex1.NaN.getField();
      Complex complex2 = complex0.divide(4438.983);
      complex2.I.divide(4438.983);
      Complex complex3 = complex2.NaN.exp();
      complex3.INF.getField();
      complex2.sinh();
      complex1.getReal();
      try { 
        complex3.nthRoot((-657));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -657
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 414.66179);
      complex0.NaN.hashCode();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(427.2);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.ZERO.pow(complex1);
      complex2.NaN.readResolve();
      complex1.INF.toString();
      complex1.isNaN();
      Complex complex4 = complex2.multiply(complex3);
      complex0.toString();
      Complex.valueOf((-728.3509066738338));
      Complex complex5 = complex2.multiply(427.2);
      complex5.divide((-728.3509066738338));
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex1.ONE.add(8.042275310036546E-198);
      complex2.ZERO.toString();
      Complex complex5 = complex4.reciprocal();
      complex5.INF.divide(complex2);
      Complex complex6 = complex4.I.cos();
      complex6.createComplex(2360.748198, 0.0);
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex7.divide(0.0);
      complex3.divide(complex8);
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      complex2.sinh();
      try { 
        complex7.nthRoot((-4588));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,588
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex0.multiply(236);
      complex3.toString();
      complex1.ONE.cos();
      complex1.getImaginary();
      complex2.I.createComplex((-1249.69774212), (-1249.69774212));
      complex3.NaN.multiply((-1249.69774212));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex5.INF.subtract((-1249.69774212));
      Complex complex7 = complex4.createComplex(0.8414709848078965, 2.5510969161987305);
      complex2.readResolve();
      complex0.sinh();
      complex7.sin();
      complex3.pow(complex5);
      complex6.multiply(236);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.NaN.atan();
      List<Complex> list0 = complex3.NaN.nthRoot(4835);
      assertTrue(list0.contains(complex3));
      assertEquals(1, list0.size());
      
      boolean boolean0 = complex0.equals("EK;U");
      assertFalse(boolean0);
      
      Complex complex4 = complex0.NaN.pow(complex3);
      Complex complex5 = complex1.ZERO.cos();
      Complex complex6 = complex5.INF.divide(complex1);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex5.NaN.conjugate();
      complex2.ONE.getField();
      complex3.abs();
      complex4.ONE.cos();
      Complex complex8 = Complex.valueOf(Double.NaN, (-1826.0));
      complex3.multiply(0.0);
      complex4.getReal();
      complex8.getReal();
      Complex complex9 = complex0.ONE.sqrt1z();
      complex2.isNaN();
      assertTrue(complex2.equals((Object)complex9));
      
      Complex complex10 = complex3.tan();
      complex7.abs();
      Complex complex11 = complex8.ZERO.subtract(0.0);
      Complex complex12 = complex10.INF.multiply(complex8);
      complex3.acos();
      Complex complex13 = complex8.createComplex((-1.0), Double.NaN);
      complex13.exp();
      complex8.acos();
      Complex complex14 = complex3.sin();
      Complex complex15 = complex5.add(complex4);
      assertSame(complex15, complex12);
      
      complex7.hashCode();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      
      complex3.getImaginary();
      complex14.hashCode();
      assertSame(complex3, complex8);
      assertSame(complex14, complex7);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex14, complex6);
  }
}
