/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:03:56 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex0.I.exp();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.asin();
      complex3.NaN.hashCode();
      complex6.I.tanh();
      complex1.I.subtract((-1.6040513288090055E-287));
      complex6.nthRoot(17);
      Complex complex7 = complex0.multiply(6.833842035076675E301);
      Complex complex8 = Complex.NaN;
      complex3.pow(complex5);
      complex3.multiply(3.695385548202923E218);
      Complex.valueOf((-2019.1804733742492));
      Complex complex9 = new Complex((-2300.68985585555), 20.0);
      complex9.conjugate();
      Complex complex10 = new Complex(1.3497626513353288E-287, (-2300.68985585555));
      complex2.nthRoot(17);
      Complex complex11 = Complex.valueOf((-1.6040513288090055E-287), Double.POSITIVE_INFINITY);
      complex11.multiply(17);
      Complex complex12 = Complex.NaN;
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-20.0), (-0.7094350035612432));
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex(0.49626702070236206);
      complex3.hashCode();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex0.subtract(3389.539020847);
      complex3.nthRoot(17);
      complex5.nthRoot(29);
      Complex complex7 = complex5.multiply(complex4);
      complex5.getField();
      Complex complex8 = Complex.NaN;
      complex8.multiply(779);
      complex1.tan();
      Complex complex9 = Complex.valueOf(257.85, (-2869.9274992));
      complex9.hashCode();
      complex4.negate();
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.INF;
      complex6.pow(complex11);
      complex3.multiply((double) 779);
      complex9.conjugate();
      complex0.nthRoot(17);
      Complex complex12 = complex8.multiply(29);
      complex5.multiply(0.49626702070236206);
      complex7.exp();
      complex12.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = new Complex((-2066.30924772), (-2066.30924772));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.tan();
      complex3.atan();
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex1.subtract(6.283185307179586);
      complex0.multiply(complex1);
      Complex complex3 = complex0.log();
      complex2.pow(complex0);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(862.017708, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      Complex complex2 = Complex.ONE;
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply((-7.500936767542933E167));
      Complex complex3 = complex2.sqrt1z();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(3434.892506673);
      Complex complex2 = complex0.add(2234.22022);
      Complex complex3 = complex1.multiply(2234.22022);
      complex1.readResolve();
      complex2.abs();
      Complex complex4 = complex2.log();
      complex1.createComplex((-20.0), 20.0);
      complex4.tan();
      Complex complex5 = complex1.reciprocal();
      complex3.hashCode();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(20.0);
      Complex complex8 = complex7.tanh();
      complex2.atan();
      complex5.abs();
      complex4.acos();
      Complex.valueOf(3434.892506673);
      complex8.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      complex0.NaN.tan();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.conjugate();
      Complex complex1 = Complex.ZERO;
      complex1.multiply((-851));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.divide(Double.POSITIVE_INFINITY);
      complex0.ZERO.conjugate();
      complex0.multiply((-851));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-879));
      Complex complex2 = complex0.multiply(complex1);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(605.06327754635, Double.POSITIVE_INFINITY);
      Complex.valueOf(789.1285760052835);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      Complex complex1 = complex0.I.subtract((-1.6040513288090055E-287));
      Complex complex2 = complex0.INF.add(0.0);
      complex2.NaN.getField();
      complex1.asin();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.tan();
      complex4.I.multiply(complex2);
      complex3.sqrt();
      Complex.valueOf(0.0, 0.0);
      complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(0.9999999878142388, 0.9999999878142388);
      complex1.I.atan();
      Complex complex2 = complex1.reciprocal();
      complex2.ZERO.pow(1.1793478462381443E-7);
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex3.I.exp();
      complex0.hashCode();
      Complex complex5 = complex0.subtract(9.636666808527841E52);
      Complex complex6 = complex5.NaN.log();
      complex6.NaN.nthRoot(1383);
      Complex complex7 = complex5.I.tan();
      Complex complex8 = complex7.ONE.add((double) 1383);
      complex0.nthRoot(2879);
      complex0.toString();
      Complex complex9 = Complex.valueOf(9.636666808527841E52);
      complex0.sqrt1z();
      Complex complex10 = complex0.ZERO.add(complex8);
      Complex complex11 = complex3.negate();
      Complex complex12 = complex1.sqrt1z();
      complex12.NaN.sin();
      complex11.getArgument();
      complex1.readResolve();
      Complex complex13 = complex9.sqrt1z();
      complex13.ZERO.hashCode();
      complex7.cos();
      Complex complex14 = complex5.cosh();
      complex14.ZERO.abs();
      complex11.negate();
      complex11.asin();
      complex4.negate();
      complex11.exp();
      complex6.pow(complex10);
      complex13.asin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.reciprocal();
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      complex1.sinh();
      complex1.tan();
      complex1.hashCode();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.tanh();
      complex3.INF.getField();
      Complex complex4 = new Complex((-20.0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4.629282269088084E-285, Double.NaN);
      complex0.multiply(complex1);
      Complex complex2 = complex1.tan();
      Complex.valueOf(4.629282269088084E-285, Double.NaN);
      complex2.pow(complex0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-1613.56008451), (-1613.56008451));
      complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.multiply(2849.4090545);
      Complex complex3 = complex1.ZERO.tan();
      complex3.NaN.readResolve();
      Complex complex4 = complex2.INF.divide(complex1);
      complex2.ONE.pow(0.5920095443725586);
      complex4.NaN.negate();
      Complex.valueOf(2849.4090545, 1.0261116485921106E-287);
      Complex complex5 = complex4.NaN.multiply(complex0);
      complex5.asin();
      complex5.sqrt1z();
      Complex complex6 = complex0.subtract(4112.380110575565);
      complex6.getArgument();
      complex1.I.add((-364.08));
      Complex complex7 = complex0.multiply(Double.NaN);
      Complex complex8 = complex1.add(complex6);
      complex8.ONE.sqrt1z();
      complex0.acos();
      Complex complex9 = complex0.divide(0.0);
      complex6.ZERO.getField();
      complex9.ZERO.reciprocal();
      complex7.toString();
      complex6.reciprocal();
      Complex complex10 = complex0.negate();
      Complex complex11 = complex10.ONE.atan();
      complex7.sqrt1z();
      complex5.acos();
      complex11.subtract(0.5920095443725586);
      complex7.subtract((-18.448));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.086663292682033E-7);
      Complex complex2 = complex0.divide(Double.NaN);
      complex2.multiply(3831);
      Complex complex3 = Complex.valueOf(329.368442, 1.086663292682033E-7);
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3202.7991, 6.283185307179586);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(397.0837108876107, 397.0837108876107);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.ONE;
      complex4.hashCode();
      complex3.multiply(complex4);
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex(3202.7991, 4924.72);
      complex1.equals(complex6);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.valueOf(3202.7991);
      complex2.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1641.051025), 223.15396612240926);
      complex0.conjugate();
      Complex complex1 = Complex.valueOf((-1641.051025), 223.15396612240926);
      complex1.asin();
      complex1.hashCode();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.NaN;
      complex0.equals(complex1);
      complex1.pow(Double.NaN);
      complex2.add(223.15396612240926);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(1696.183674669204, Double.NaN);
      complex1.pow(1.8112388823726723E41);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex.valueOf(1.5611381149938097E-4);
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.asin();
      complex2.abs();
      complex0.asin();
      complex2.hashCode();
      complex1.tan();
      Complex complex3 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(22.44279328540876);
      Complex complex1 = complex0.ONE.add(22.44279328540876);
      complex0.I.abs();
      Complex complex2 = complex1.add(Double.NaN);
      complex0.I.createComplex((-1.0257921074960811E7), Double.NaN);
      Complex complex3 = complex1.exp();
      complex0.getField();
      Complex complex4 = Complex.INF;
      complex2.asin();
      complex2.hashCode();
      complex3.multiply(complex0);
      complex3.tan();
      Complex.valueOf(374.9112298353384, 1596.991638);
      complex4.pow(complex2);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1635.0), (-1635.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(0.9985313415527344, 0.9985313415527344);
      Complex complex3 = complex2.asin();
      Complex.valueOf((-3006.4659040634297), (-3006.4659040634297));
      complex0.asin();
      complex0.hashCode();
      Complex complex4 = Complex.ONE;
      complex4.multiply(complex1);
      complex3.tan();
      complex4.readResolve();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex.valueOf(1.620899738203635E200);
      Complex.valueOf(0.2516399025917053);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1967.111155264344);
      complex0.hashCode();
      complex0.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(1895.0);
      Complex complex3 = complex0.atan();
      complex1.abs();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.divide(complex0);
      complex3.add(complex4);
      Complex complex6 = complex4.pow(complex3);
      complex3.divide(complex6);
      complex6.abs();
      Complex complex7 = complex2.createComplex(0.03518907925549333, 0.5132029795867413);
      complex7.ONE.divide(1063.2);
      complex4.subtract(3.1923605624184135E-4);
      complex5.cos();
      Complex complex8 = Complex.I;
      complex8.pow(0.03518907925549333);
      Complex complex9 = Complex.INF;
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(1566.23901421323, 1566.23901421323);
      Complex complex1 = complex0.ONE.subtract(1566.23901421323);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.pow(20.0);
      complex3.INF.hashCode();
      Complex complex4 = complex1.INF.multiply(7);
      complex2.ZERO.reciprocal();
      Complex complex5 = complex0.ONE.add(complex1);
      Complex complex6 = complex3.subtract(20.0);
      Complex complex7 = complex6.I.cos();
      complex7.ZERO.subtract(complex5);
      complex7.ZERO.exp();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex7.exp();
      complex9.ZERO.subtract((-1.4677321100833294E199));
      Complex complex10 = complex8.INF.negate();
      complex10.NaN.atan();
      Complex complex11 = complex3.acos();
      complex4.tan();
      Complex complex12 = complex0.subtract(complex8);
      complex11.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.createComplex(1.5611381149938097E-4, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.tan();
      complex1.hashCode();
      complex1.readResolve();
      complex3.tanh();
      Complex complex5 = complex3.add(1.5611381149938097E-4);
      Complex complex6 = complex2.atan();
      complex0.abs();
      complex5.acos();
      complex0.divide(complex3);
      Complex complex7 = complex4.add(complex6);
      Complex complex8 = complex6.pow(complex1);
      complex1.divide(complex8);
      complex4.abs();
      Complex complex9 = complex0.createComplex((-8.666726316863593E-288), 883.171907742);
      complex9.I.multiply(complex7);
      complex8.subtract((-8.666726316863593E-288));
      Complex complex10 = complex3.cos();
      Complex complex11 = Complex.INF;
      complex11.pow(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.INF;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 1145.9354515293028;
      Complex complex0 = new Complex(1145.9354515293028, 1145.9354515293028);
      Complex complex1 = complex0.add((-862.017708));
      complex0.abs();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.createComplex(1620.5974571568765, (-862.017708));
      Complex complex4 = complex2.tan();
      complex3.hashCode();
      Complex complex5 = Complex.I;
      complex5.readResolve();
      complex1.tanh();
      double double1 = 2133.0;
      complex4.add(2133.0);
      Complex complex6 = complex2.atan();
      Complex complex7 = Complex.ONE;
      complex7.abs();
      complex0.acos();
      complex5.divide(complex6);
      try { 
        complex7.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 1967.111155264344);
      double double2 = (-2894.85591128236);
      Complex complex2 = complex1.tan();
      complex2.hashCode();
      complex2.readResolve();
      double double3 = (-2670.795769571559);
      Complex complex3 = Complex.valueOf((-2670.795769571559));
      complex3.tanh();
      complex0.add((-2670.795769571559));
      Complex complex4 = complex0.atan();
      complex3.abs();
      complex4.ONE.divide((-391.36));
      complex2.acos();
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5611381149938097E-4);
      Complex complex1 = complex0.ONE.add(1.5611381149938097E-4);
      complex0.I.abs();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.ONE.tan();
      complex3.INF.hashCode();
      Complex complex4 = (Complex)complex3.readResolve();
      Complex complex5 = complex2.tanh();
      complex2.INF.add((-2894.85591128236));
      complex5.NaN.multiply((-1340));
      Complex complex6 = complex5.add(1.5611381149938097E-4);
      complex6.INF.pow(20.0);
      Complex complex7 = Complex.INF;
      complex7.atan();
      complex7.abs();
      complex1.acos();
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.INF;
      Complex complex10 = Complex.NaN;
      complex10.divide(complex0);
      complex1.hashCode();
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.I;
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.multiply(complex13);
      Complex complex14 = new Complex(Double.POSITIVE_INFINITY);
      complex13.tan();
      complex14.exp();
      Complex complex15 = Complex.INF;
      complex15.reciprocal();
      Complex complex16 = Complex.ONE;
      Complex complex17 = Complex.NaN;
      complex4.multiply(complex17);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2066.30924772);
      Complex.valueOf(2066.30924772);
      complex0.ZERO.getField();
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = Complex.valueOf((-1585.7511), 0.554580807685852);
      Complex complex3 = complex0.I.subtract(complex2);
      complex0.getImaginary();
      complex0.ZERO.getField();
      Complex complex4 = Complex.valueOf(2020.0, 0.554580807685852);
      Complex complex5 = complex0.subtract(complex4);
      complex5.NaN.negate();
      Complex complex6 = complex4.sinh();
      complex6.multiply(0);
      complex4.multiply((-721));
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.acos();
      complex1.NaN.nthRoot(1380);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.subtract(complex5);
      complex3.createComplex(1.0, 1.0);
      complex0.tanh();
      Complex complex7 = complex0.divide((double) 1380);
      Complex complex8 = complex2.divide(complex0);
      Complex complex9 = new Complex(0.0, (-811.7041162999));
      Complex complex10 = complex8.subtract(complex9);
      Complex complex11 = complex7.sinh();
      complex11.I.hashCode();
      Complex complex12 = complex11.INF.log();
      Complex complex13 = complex12.pow(complex10);
      complex13.INF.toString();
      Complex complex14 = new Complex((-811.7041162999), (-811.7041162999));
      complex14.I.hashCode();
      Complex complex15 = complex4.subtract(complex14);
      complex15.INF.sin();
      complex6.acos();
      complex1.sin();
      complex14.add(0.0);
      complex13.multiply(complex11);
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex0.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.divide(complex5);
      Complex complex7 = complex2.add(complex4);
      complex7.pow(complex4);
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.divide(complex0);
      complex1.abs();
      complex5.createComplex(2.0, Double.NaN);
      Complex complex11 = complex7.subtract(Double.NaN);
      complex8.cos();
      complex2.pow(5.709039546124285E-171);
      complex10.divide(complex6);
      complex9.add((-451.56657133));
      complex9.acos();
      complex11.sin();
      complex4.pow(5.709039546124285E-171);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(187.45559774, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(3299.928945841, 187.45559774);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = Complex.valueOf(20.0, 554.1296240555);
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex0.divide(complex7);
      Complex complex9 = Complex.ONE;
      complex9.abs();
      Complex complex10 = complex6.createComplex((-1987.4286), 1.1752011936438014);
      complex10.subtract((-1355.3));
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.cos();
      Complex complex13 = complex3.pow((-1987.4286));
      complex5.divide(complex8);
      complex4.add(1304.0);
      complex13.acos();
      Complex complex14 = complex12.sin();
      complex14.pow(713.29);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(187.45559774, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex.valueOf(3299.928945841, 187.45559774);
      complex0.asin();
      complex0.hashCode();
      complex0.multiply(complex1);
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = complex1.subtract(2.9254832789181E165);
      complex2.log();
      complex3.abs();
      complex1.hashCode();
      complex2.tan();
      Complex complex4 = Complex.INF;
      complex4.subtract(complex3);
      Complex complex5 = Complex.ONE;
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(795.0311608, 795.0311608);
      complex0.INF.getArgument();
      complex0.toString();
      complex0.toString();
      Complex complex1 = complex0.sqrt1z();
      complex0.ONE.multiply((-1716.1141514));
      Complex complex2 = complex1.multiply(795.0311608);
      complex2.getField();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 600.6315384466365);
      complex0.INF.log();
      Complex complex1 = Complex.NaN;
      complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(2886.6931);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.I;
      complex3.tan();
      complex0.hashCode();
      complex2.readResolve();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.add((-2894.85591128236));
      complex4.atan();
      complex1.abs();
      Complex complex6 = complex1.acos();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.divide(complex8);
      Complex complex10 = complex5.add(complex3);
      Complex complex11 = complex0.pow(complex3);
      Complex complex12 = Complex.ONE;
      complex12.divide(complex6);
      complex2.abs();
      complex1.createComplex(5.685720022003016E24, 5.709039546124285E-171);
      Complex complex13 = complex11.subtract(0.017290467459106854);
      complex6.cos();
      complex10.pow(Double.NaN);
      Complex complex14 = complex6.divide(complex9);
      complex14.add(804.971916);
      complex13.acos();
      complex5.sin();
      complex2.pow((-51.91548406));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(2728.473816, (-184.65));
      Complex complex1 = new Complex(2728.473816);
      complex0.ONE.divide(complex1);
      Complex complex2 = complex0.INF.negate();
      complex0.getArgument();
      complex0.reciprocal();
      complex2.isInfinite();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      Complex complex1 = complex0.I.subtract((-1.6040513288090055E-287));
      Complex complex2 = complex1.add((-1.6040513288090055E-287));
      Complex complex3 = complex0.exp();
      complex2.getField();
      Complex complex4 = Complex.I;
      complex2.asin();
      complex3.hashCode();
      Complex complex5 = Complex.valueOf((-1.6040513288090055E-287));
      complex5.multiply(complex0);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex4.exp();
      complex7.NaN.subtract(complex6);
      Complex complex8 = Complex.valueOf(0.0, (-1.6040513288090055E-287));
      complex8.ZERO.sinh();
      complex5.pow(complex1);
      complex0.getImaginary();
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf((-3824.38648));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = 1.5611381149938097E-4;
      Complex complex0 = Complex.valueOf(1.5611381149938097E-4);
      complex0.ONE.add(1.5611381149938097E-4);
      complex0.I.abs();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.I.createComplex(0.6451379060745239, 1.5611381149938097E-4);
      double double1 = (-2894.85591128236);
      Complex complex3 = complex2.ONE.tan();
      complex3.INF.hashCode();
      complex3.readResolve();
      complex1.tanh();
      complex2.INF.add((-2894.85591128236));
      Complex complex4 = complex2.ONE.atan();
      complex4.ONE.abs();
      complex4.ONE.acos();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = Complex.valueOf((-862.017708), 3171.298);
      Complex.valueOf(3171.298, 3299.928945841);
      Complex complex2 = complex0.asin();
      complex2.hashCode();
      Complex complex3 = Complex.valueOf(3171.298, 495.155601);
      Complex complex4 = complex3.tan();
      complex1.exp();
      Complex.valueOf(495.155601, 18.637446978242053);
      Complex complex5 = complex4.pow(complex2);
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = new Complex(3171.298, 3171.298);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.reciprocal();
      complex6.tanh();
      complex3.getArgument();
      complex4.nthRoot(796);
      complex2.getReal();
      complex1.isInfinite();
      complex2.getReal();
      complex5.cos();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(1464.467335979801);
      complex1.NaN.log();
      Complex complex2 = complex0.divide(complex1);
      complex2.negate();
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.I;
      complex4.toString();
      complex1.getArgument();
      complex3.reciprocal();
      Complex complex5 = Complex.INF;
      complex0.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cos();
      complex1.NaN.reciprocal();
      complex0.nthRoot(2534);
      Complex complex2 = complex1.INF.sqrt1z();
      complex1.sqrt1z();
      Complex complex3 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.divide((-676.0));
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.I;
      complex3.pow(complex6);
      complex0.pow(complex2);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.add(complex0);
      complex0.atan();
      Complex complex4 = complex1.ZERO.multiply(6.23514943204966E27);
      complex3.divide(234.675);
      Complex complex5 = complex4.tanh();
      complex5.pow(complex1);
      Complex complex6 = Complex.valueOf(6.23514943204966E27);
      complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2728.473816);
      complex0.subtract(2728.473816);
      Complex complex1 = complex0.add(3422.30428243);
      Complex complex2 = complex1.exp();
      complex1.getField();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.asin();
      complex4.hashCode();
      Complex complex5 = new Complex(1606.50878345, 663.0);
      Complex complex6 = complex1.multiply(complex5);
      complex0.tan();
      complex5.conjugate();
      Complex complex7 = complex6.exp();
      Complex.valueOf(2421.0928, 650.226072566);
      Complex complex8 = Complex.INF;
      complex8.pow(complex0);
      complex3.getImaginary();
      complex7.add(complex2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = Complex.valueOf((-862.017708), 3171.298);
      complex0.ONE.asin();
      complex1.I.multiply(complex0);
      Complex complex2 = complex0.tan();
      complex1.getArgument();
      // Undeclared exception!
      complex2.nthRoot(1312145731);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 852.29368147);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.tan();
      complex3.ZERO.tan();
      Complex complex4 = complex2.pow(852.29368147);
      Complex complex5 = complex4.multiply(complex1);
      Complex.valueOf(2864.6, 2864.6);
      Complex complex6 = complex5.INF.tan();
      complex6.I.tan();
      complex5.sqrt();
      complex6.multiply(852.29368147);
      complex4.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-674.176), (-674.176));
      Complex complex1 = complex0.createComplex((-674.176), (-674.176));
      complex1.INF.log();
      Complex complex2 = (Complex)complex1.I.readResolve();
      complex0.log();
      Complex complex3 = Complex.valueOf((-674.176), (-674.176));
      Complex complex4 = complex3.reciprocal();
      complex0.subtract(complex3);
      complex2.log();
      complex3.reciprocal();
      Complex.valueOf(1398.2299425);
      complex1.cosh();
      complex4.sqrt();
      Complex complex5 = new Complex(0.0, 1398.2299425);
      Complex complex6 = complex5.sinh();
      complex6.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(2728.473816, (-184.64893));
      complex0.reciprocal();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(0.0);
      complex0.negate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = complex1.subtract((-184.64893));
      complex0.subtract(complex5);
      complex5.log();
      Complex complex6 = complex4.reciprocal();
      Complex.valueOf(2.0);
      complex0.cosh();
      complex2.sqrt();
      complex6.sinh();
      complex1.subtract(0.0);
      complex1.subtract((-2823.5894665207));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = Complex.valueOf((-862.017708), 3171.298);
      Complex complex2 = complex0.ONE.asin();
      complex1.I.multiply(complex0);
      Complex complex3 = complex0.tan();
      complex3.I.exp();
      Complex.valueOf((-6.259620482221904E-8), 786.17);
      complex2.equals(complex1);
      Complex.valueOf(3171.298);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(2728.473816, (-184.64893));
      Complex complex1 = new Complex(2728.473816);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex0.INF.negate();
      complex3.sin();
      complex0.getField();
      Complex complex5 = Complex.valueOf((-184.64893));
      complex5.subtract(0.5074998140335083);
      complex3.readResolve();
      complex2.equals(complex4);
      Complex.valueOf((-184.64893));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = (Complex)complex0.I.readResolve();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 571.890242);
      Complex complex4 = complex0.subtract(complex1);
      complex3.getImaginary();
      complex3.getField();
      Complex.valueOf(2020.0, 571.890242);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex4.multiply(0);
      Complex complex9 = complex7.sqrt1z();
      Complex.valueOf(5.597398155472547E-178);
      Complex complex10 = complex1.subtract(0.554580807685852);
      complex8.log();
      complex10.abs();
      complex1.hashCode();
      complex6.tan();
      complex8.subtract(complex9);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2066.30924772);
      Complex complex1 = Complex.valueOf(2066.30924772);
      complex0.ZERO.getField();
      complex1.atan();
      Complex complex2 = Complex.valueOf(2066.30924772, 20.0);
      complex0.tanh();
      complex0.toString();
      complex0.exp();
      Complex complex3 = Complex.valueOf(1010.0, 1074.82932);
      Complex complex4 = new Complex(1686.86);
      complex4.divide(complex0);
      complex2.readResolve();
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(187.45559774, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(3299.928945841, 187.45559774);
      Complex complex3 = complex0.asin();
      complex0.hashCode();
      complex0.multiply(complex1);
      Complex complex4 = complex3.tan();
      complex4.exp();
      Complex.valueOf((-674.176), (-6.259620482221904E-8));
      complex2.pow(complex3);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      Complex complex1 = complex0.I.subtract((-1.6040513288090055E-287));
      complex0.INF.add(0.0);
      Complex complex2 = complex0.I.exp();
      complex2.NaN.getField();
      Complex complex3 = Complex.I;
      complex3.asin();
      complex0.hashCode();
      Complex complex4 = complex0.multiply(complex2);
      complex1.tan();
      Complex complex5 = complex4.exp();
      Complex.valueOf(2784.94308515, 0.0);
      complex4.pow(complex5);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.sqrt();
      complex0.negate();
      Complex complex5 = complex4.reciprocal();
      complex3.INF.tan();
      complex5.isInfinite();
      complex1.conjugate();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex1.multiply(2430);
      complex6.tan();
      Complex complex8 = complex7.conjugate();
      complex3.tanh();
      complex2.tanh();
      complex8.cos();
      complex0.sqrt();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.NaN.reciprocal();
      complex0.nthRoot(2534);
      Complex complex3 = complex1.INF.sqrt1z();
      complex3.NaN.reciprocal();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.valueOf((double) 2534);
      Complex complex6 = complex5.pow(complex2);
      complex2.NaN.hashCode();
      complex0.multiply(1696.912648177638);
      complex6.sin();
      Complex complex7 = Complex.valueOf(0.9999977645670428);
      complex0.getReal();
      complex7.sqrt();
      Complex complex8 = Complex.ZERO;
      complex8.sqrt();
      complex8.cosh();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-674.176), (-674.176));
      Complex complex1 = complex0.createComplex((-674.176), (-674.176));
      Complex complex2 = complex1.INF.log();
      complex1.I.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf((-674.176), (-674.176));
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex3.I.subtract(complex4);
      complex6.toString();
      Complex complex7 = complex3.subtract(complex0);
      Complex complex8 = complex7.cosh();
      complex8.ZERO.pow(complex7);
      complex4.add(complex3);
      Complex.valueOf((-6870967.543299172), 0.6130955854417586);
      complex2.pow(complex6);
      complex1.getImaginary();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      Complex complex3 = complex0.ONE.asin();
      complex1.I.hashCode();
      complex2.I.multiply(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.I.exp();
      complex3.divide((-3083.469));
      complex0.divide(complex5);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(2886.6931);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.conjugate();
      complex2.NaN.asin();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.multiply(0.0);
      complex0.negate();
      Complex complex5 = complex0.ONE.divide(0.0);
      complex1.subtract(0.0);
      complex3.subtract(complex1);
      Complex complex6 = complex0.log();
      complex4.reciprocal();
      Complex.valueOf(0.0);
      complex5.cosh();
      Complex complex7 = complex3.sqrt();
      complex7.NaN.sinh();
      complex6.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-674.176), (-674.176));
      Complex complex1 = complex0.createComplex((-674.176), (-674.176));
      Complex complex2 = complex1.INF.log();
      complex1.I.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf((-674.176), (-674.176));
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex3.I.subtract(complex4);
      complex6.toString();
      Complex complex7 = complex3.subtract(complex0);
      complex7.cosh();
      complex4.add(complex3);
      complex5.divide((-674.176));
      complex2.divide(complex6);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt();
      complex0.acos();
      complex1.INF.multiply(complex0);
      Complex complex2 = complex0.subtract((-20.0));
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex2.ZERO.createComplex((-20.0), 480.72183);
      complex3.NaN.divide(complex0);
      complex2.abs();
      Complex complex5 = complex0.divide(complex1);
      complex5.ONE.tan();
      complex5.NaN.sin();
      complex5.readResolve();
      Complex complex6 = complex3.sin();
      complex6.multiply(complex1);
      complex6.NaN.exp();
      complex4.hashCode();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(2046.390532562762, 2535.1283308935103);
      Complex complex1 = Complex.I;
      try { 
        complex1.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.ONE.log();
      Complex complex1 = Complex.valueOf((-2011.466), (-2011.466));
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.subtract((-2011.466));
      Complex complex3 = complex1.sin();
      complex3.INF.pow((-1.0));
      Complex complex4 = Complex.valueOf(2621.2532390631723, (-3.7155475428252136E-8));
      Complex complex5 = complex4.acos();
      complex5.ZERO.multiply((-2011.466));
      complex1.abs();
      complex3.exp();
      Complex complex6 = complex3.multiply((-751.236643448));
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.INF.acos();
      complex3.ONE.exp();
      complex1.acos();
      complex0.readResolve();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.pow(complex0);
      complex5.NaN.conjugate();
      Complex complex6 = complex4.exp();
      complex6.ONE.reciprocal();
      complex6.ZERO.tanh();
      complex6.ONE.nthRoot(139);
      Complex complex7 = complex6.ONE.add((-791.4332567));
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = Complex.valueOf(0.0);
      complex9.INF.toString();
      Complex complex10 = Complex.valueOf(449.843188331483);
      Complex complex11 = complex10.sinh();
      complex11.I.cosh();
      complex11.I.reciprocal();
      complex4.reciprocal();
      complex5.tanh();
      complex4.I.add(complex2);
      complex5.subtract((-791.4332567));
      complex8.sinh();
      complex11.isInfinite();
      complex7.nthRoot(139);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.NaN.readResolve();
      complex0.I.abs();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 466.5718758682);
      Complex complex1 = Complex.valueOf((-1971.59771228), 466.5718758682);
      Complex complex2 = complex0.multiply(466.5718758682);
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex1.I.subtract(complex4);
      complex6.NaN.toString();
      Complex complex7 = complex5.ZERO.subtract(0.0);
      complex3.I.add((-2887.7872095));
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex2.sqrt();
      complex11.INF.readResolve();
      complex1.multiply((-1971.59771228));
      complex2.abs();
      complex10.subtract(complex2);
      Complex complex12 = complex3.log();
      complex12.NaN.subtract(complex3);
      complex8.toString();
      complex7.toString();
      complex0.isInfinite();
      Complex.valueOf(2.0, (-2887.7872095));
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = (-1681.338);
      Complex complex0 = Complex.valueOf((-1681.338));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.pow(complex1);
      complex0.createComplex((-1681.338), (-7.44321345601866E-11));
      complex1.ONE.sqrt1z();
      try { 
        complex2.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.acos();
      complex2.I.multiply(complex1);
      Complex complex3 = complex1.ZERO.conjugate();
      complex3.ONE.nthRoot(3372);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.I.divide((double) 3372);
      complex1.INF.abs();
      Complex complex6 = complex3.sinh();
      complex6.NaN.cos();
      complex6.ZERO.readResolve();
      Complex complex7 = complex0.log();
      Complex complex8 = complex0.I.subtract(6.283185307179586);
      complex8.I.pow(complex7);
      complex8.sin();
      complex8.I.divide(complex5);
      complex7.ZERO.conjugate();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex9.NaN.subtract(complex5);
      complex10.INF.pow(complex6);
      complex0.isInfinite();
      complex5.hashCode();
      Complex.valueOf(0.0);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.tan();
      complex0.INF.multiply(0.0);
      complex0.NaN.getField();
      complex0.multiply(1360);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(2728.473816, (-184.64893));
      Complex complex1 = new Complex(2728.473816);
      complex0.ONE.divide(complex1);
      complex0.ONE.negate();
      complex0.INF.negate();
      complex0.INF.toString();
      complex0.getArgument();
      Complex complex2 = complex0.reciprocal();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3171.298, (-862.017708));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-862.017708), 3171.298);
      complex0.ONE.asin();
      complex1.I.hashCode();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex1.tan();
      complex4.I.exp();
      Complex.valueOf((-6.259620482221904E-8), 786.17);
      complex0.pow(complex2);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.NaN.reciprocal();
      complex0.nthRoot(2534);
      complex1.INF.sqrt1z();
      complex1.sqrt1z();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.pow(complex2);
      complex2.NaN.hashCode();
      Complex complex5 = complex0.multiply(1696.912648177638);
      Complex complex6 = complex4.sin();
      complex6.INF.getField();
      complex0.INF.subtract(1221.2);
      Object object0 = complex5.readResolve();
      complex0.equals(object0);
      Complex.valueOf((-1639.5093320847345));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.ONE.sqrt1z();
      complex2.ONE.cosh();
      Complex complex4 = complex1.INF.conjugate();
      complex2.ZERO.tan();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.ZERO.add(complex3);
      Complex complex7 = complex0.divide(complex1);
      complex4.NaN.reciprocal();
      Complex complex8 = complex7.ONE.sqrt();
      complex1.ZERO.divide(2.292498520423419E298);
      complex6.I.multiply(complex1);
      Complex complex9 = complex7.divide(complex4);
      complex9.ONE.negate();
      Complex complex10 = complex9.INF.asin();
      complex10.multiply(0.0);
      complex2.I.add(complex6);
      complex7.sqrt1z();
      complex2.sinh();
      complex0.ZERO.subtract(0.0);
      complex4.divide(complex9);
      Complex complex11 = complex7.multiply(0.0);
      complex11.isInfinite();
      complex8.getImaginary();
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      complex1.I.multiply(0);
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.log();
      complex3.NaN.abs();
      Complex complex4 = complex2.I.tanh();
      complex1.tan();
      complex0.isNaN();
      Complex complex5 = complex2.pow(0.0);
      complex2.cos();
      Complex complex6 = complex2.sqrt();
      complex6.ZERO.abs();
      complex5.tan();
      complex0.hashCode();
      complex4.sinh();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-945.875399442677));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.divide((-945.875399442677));
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      complex0.getReal();
      complex2.multiply((-2631));
      complex3.exp();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.I.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.atan();
      Complex.valueOf(1074.82932, 1074.82932);
      Complex complex3 = complex1.ZERO.tanh();
      complex3.ONE.toString();
      complex2.I.exp();
      Complex complex4 = Complex.valueOf(1706.92434560447, 1706.92434560447);
      complex0.divide(complex4);
      complex4.readResolve();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.valueOf((-1778.0));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex4.ONE.reciprocal();
      complex3.ONE.hashCode();
      Complex complex6 = complex3.subtract((-1071.31221578847));
      complex3.nthRoot(565);
      complex6.toString();
      Complex complex7 = complex2.divide(complex5);
      complex5.I.hashCode();
      complex7.ZERO.readResolve();
      complex5.toString();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-1));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.I.pow(0.0);
      Complex.valueOf(0.0);
      Complex complex5 = complex4.I.exp();
      complex0.getField();
      Complex complex6 = complex5.atan();
      complex6.ZERO.negate();
      complex6.log();
      complex2.divide(complex3);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.sin();
      Complex complex1 = new Complex(2.0, 0.0);
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.exp();
      complex2.multiply((-573));
      complex2.I.tanh();
      Complex complex4 = complex0.ZERO.divide(complex1);
      complex4.tan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.ONE.multiply(complex5);
      complex6.NaN.getArgument();
      complex5.INF.getArgument();
      complex0.readResolve();
      complex5.add(2.0);
      Complex complex7 = complex0.sqrt1z();
      complex7.ZERO.toString();
      Complex complex8 = complex2.sqrt1z();
      complex8.multiply(2266.0029050573);
      Complex complex9 = Complex.valueOf((-193.3), 2.0);
      complex2.sin();
      complex5.add(complex3);
      complex2.getImaginary();
      complex9.negate();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sin();
      complex1.ONE.subtract(379.5321282661567);
      Complex complex2 = complex0.NaN.tan();
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex3.multiply(0);
      complex5.I.tan();
      Complex complex6 = complex5.NaN.sinh();
      complex3.isNaN();
      complex4.toString();
      complex6.sin();
      Complex complex7 = complex3.NaN.createComplex(0.0, 379.5321282661567);
      complex3.sqrt();
      Complex complex8 = complex3.cos();
      complex5.pow(complex4);
      complex2.divide((double) 0);
      complex6.readResolve();
      complex1.negate();
      complex7.isInfinite();
      complex4.cosh();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.cosh();
      Complex complex1 = complex0.sqrt1z();
      complex0.NaN.getField();
      Complex complex2 = complex1.sinh();
      complex2.isNaN();
      complex2.isInfinite();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.INF.sqrt();
      complex5.INF.abs();
      complex5.INF.multiply((-2831));
      complex1.pow((-3030.0));
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.acos();
      complex1.NaN.nthRoot(1380);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.subtract(complex5);
      complex0.tanh();
      Complex complex7 = complex0.divide((double) 1380);
      Complex complex8 = complex2.divide(complex0);
      Complex complex9 = new Complex(0.0, (-811.7041162999));
      Complex complex10 = complex8.subtract(complex9);
      Complex complex11 = complex7.sinh();
      complex11.I.hashCode();
      Complex complex12 = complex11.INF.log();
      Complex complex13 = complex12.pow(complex10);
      complex13.INF.toString();
      Complex complex14 = Complex.valueOf((-811.7041162999), 0.0);
      complex14.I.hashCode();
      Complex complex15 = complex4.subtract(complex14);
      complex15.INF.sin();
      complex6.acos();
      complex1.sin();
      complex14.add(0.0);
      complex13.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3202.7991);
      complex0.ZERO.cos();
      complex0.acos();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.multiply(1237);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.INF.pow(complex3);
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex4.INF.sqrt1z();
      Complex complex7 = complex6.ONE.conjugate();
      complex7.I.sinh();
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex2.pow(complex6);
      complex0.sqrt1z();
      Complex complex10 = complex9.ZERO.pow(908.37779468);
      complex2.INF.atan();
      complex3.getArgument();
      complex8.isNaN();
      Complex complex11 = complex2.createComplex(1237, 2332.497117273);
      Complex complex12 = complex1.sqrt1z();
      complex8.tanh();
      complex2.ONE.tan();
      Complex complex13 = complex12.INF.exp();
      complex13.I.asin();
      complex5.equals(complex8);
      complex11.exp();
      complex10.acos();
      complex7.multiply(complex10);
      complex10.subtract(complex8);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.add(complex0);
      Complex complex3 = complex0.atan();
      complex1.ZERO.multiply(6.23514943204966E27);
      Complex complex4 = complex3.ZERO.divide(3709.1);
      complex4.ZERO.tanh();
      complex0.pow(complex1);
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6040513288090055E-287));
      Complex complex1 = complex0.I.subtract((-1.6040513288090055E-287));
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex0.I.exp();
      complex3.NaN.getField();
      Complex complex4 = complex0.asin();
      complex4.ONE.sqrt();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.I.reciprocal();
      complex4.isInfinite();
      complex1.conjugate();
      complex1.sin();
      Complex complex7 = complex0.multiply(1079);
      complex2.tan();
      complex7.conjugate();
      Complex complex8 = complex6.tanh();
      complex8.tanh();
      complex8.cos();
      complex0.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-252.328464763));
      Complex complex1 = complex0.NaN.sinh();
      complex1.ZERO.subtract(0.0);
      Complex complex2 = complex0.cos();
      complex0.ONE.createComplex(6.9971608778572, 0.0);
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ZERO.atan();
      complex5.sqrt();
      complex4.INF.log();
      Complex complex6 = new Complex(0.0, 0.0);
      complex0.equals(complex6);
      complex4.acos();
      complex3.cos();
      Complex complex7 = complex2.log();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1967.111155264344);
      complex0.INF.sinh();
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-5438.0));
      complex1.getArgument();
      Complex complex2 = complex0.pow((-3481.295628));
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex3.I.add(complex1);
      Complex complex5 = complex1.pow(complex0);
      Complex.valueOf(0.0);
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.NaN.divide(complex7);
      Complex complex9 = complex7.log();
      Complex complex10 = complex9.I.divide(complex1);
      complex0.ONE.sqrt1z();
      complex10.I.readResolve();
      complex0.getReal();
      Complex complex11 = complex5.pow(2322.972149257);
      complex11.ONE.toString();
      complex6.pow(complex11);
      complex1.subtract(Double.NaN);
      Complex complex12 = complex9.divide(2322.972149257);
      complex4.sin();
      complex5.sqrt();
      complex9.I.add(complex11);
      Complex complex13 = Complex.valueOf(967.711604867647, 6.283185307179586);
      complex13.ONE.sqrt();
      complex12.add(complex13);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.tanh();
      Complex complex3 = complex0.conjugate();
      double double1 = (-9.482976524690715E-10);
      int int0 = (-890);
      complex3.ZERO.multiply((-890));
      Complex complex4 = complex3.ONE.subtract(0.0);
      Complex complex5 = complex4.NaN.atan();
      try { 
        complex5.ZERO.nthRoot((-890));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -890
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-2689.66818133505));
      Complex complex2 = complex1.INF.cos();
      complex1.INF.nthRoot(158);
      Complex complex3 = complex2.divide((-2689.66818133505));
      complex3.I.subtract((-3123.404));
      complex0.I.sin();
      Complex complex4 = complex1.NaN.reciprocal();
      complex4.INF.getArgument();
      Complex complex5 = complex0.NaN.acos();
      complex5.I.hashCode();
      complex0.readResolve();
      Complex complex6 = complex1.NaN.add(complex0);
      complex2.I.sin();
      Complex complex7 = complex1.ZERO.subtract(complex4);
      complex4.nthRoot(1);
      complex1.getReal();
      Complex complex8 = complex4.cos();
      complex0.equals(complex8);
      complex7.ONE.getField();
      Complex complex9 = complex7.exp();
      complex2.subtract((-1719.67527583));
      complex1.isInfinite();
      complex9.multiply((double) 1);
      complex6.getReal();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(449.97, 449.97);
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.subtract(complex1);
      complex1.I.tanh();
      Complex complex3 = Complex.valueOf((-2541.4314123582762));
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.tanh();
      complex6.ZERO.sqrt1z();
      complex3.hashCode();
      complex4.sinh();
      Complex complex7 = Complex.I;
      complex1.add(complex7);
      complex6.sqrt1z();
      complex6.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex1.INF.exp();
      complex1.NaN.getField();
      Complex complex2 = complex0.divide(4438.983);
      complex2.I.divide(4438.983);
      Complex complex3 = complex2.NaN.exp();
      complex3.INF.getField();
      complex2.sinh();
      complex1.getReal();
      try { 
        complex3.nthRoot((-657));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -657
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 414.66179);
      complex0.NaN.hashCode();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(427.2);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.ZERO.pow(complex1);
      complex2.NaN.readResolve();
      complex1.INF.toString();
      complex1.isNaN();
      Complex complex4 = complex2.multiply(complex3);
      complex0.toString();
      Complex.valueOf((-728.3509066738338));
      Complex complex5 = complex2.multiply(427.2);
      complex5.divide((-728.3509066738338));
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex1.ONE.add(8.042275310036546E-198);
      complex2.ZERO.toString();
      Complex complex5 = complex4.reciprocal();
      complex5.INF.divide(complex2);
      Complex complex6 = complex4.I.cos();
      complex6.createComplex(2360.748198, 0.0);
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex7.divide(0.0);
      complex3.divide(complex8);
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      complex2.sinh();
      try { 
        complex7.nthRoot((-4588));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,588
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex0.multiply(236);
      complex3.toString();
      complex1.ONE.cos();
      complex1.getImaginary();
      complex2.I.createComplex((-1249.69774212), (-1249.69774212));
      complex3.NaN.multiply((-1249.69774212));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex5.INF.subtract((-1249.69774212));
      Complex complex7 = complex4.createComplex(0.8414709848078965, 2.5510969161987305);
      complex2.readResolve();
      complex0.sinh();
      complex7.sin();
      complex3.pow(complex5);
      complex6.multiply(236);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.NaN.atan();
      complex3.NaN.nthRoot(4835);
      complex0.equals("EK;U");
      Complex complex4 = complex0.NaN.pow(complex3);
      Complex complex5 = complex1.ZERO.cos();
      Complex complex6 = complex5.INF.divide(complex1);
      Complex complex7 = complex5.NaN.conjugate();
      complex2.ONE.getField();
      complex3.abs();
      complex4.ONE.cos();
      Complex complex8 = Complex.valueOf(Double.NaN, (-1826.0));
      Complex complex9 = complex3.multiply(0.0);
      complex4.getReal();
      complex8.getReal();
      Complex complex10 = complex0.ONE.sqrt1z();
      complex2.isNaN();
      assertTrue(complex2.equals((Object)complex10));
      
      Complex complex11 = complex3.tan();
      complex7.abs();
      Complex complex12 = complex8.ZERO.subtract(0.0);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      Complex complex13 = complex11.INF.multiply(complex8);
      assertSame(complex13, complex11);
      
      complex3.acos();
      Complex complex14 = complex8.createComplex((-1.0), Double.NaN);
      complex14.exp();
      assertFalse(complex14.equals((Object)complex12));
      
      Complex complex15 = complex8.acos();
      Complex complex16 = complex3.sin();
      complex5.add(complex4);
      assertSame(complex4, complex9);
      
      complex7.hashCode();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)complex1));
      assertSame(complex7, complex15);
      
      complex3.getImaginary();
      complex16.hashCode();
      assertNotSame(complex16, complex6);
  }
}
