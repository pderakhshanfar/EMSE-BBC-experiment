/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:07:12 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.exp();
      int int0 = 4081;
      Complex complex1 = new Complex(4081, 20.0);
      Complex complex2 = Complex.valueOf((-20.0));
      complex2.tanh();
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1642.32109621266), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex((-1642.32109621266), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.conjugate();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.acos();
      complex2.INF.add(6.283185307179586);
      Complex complex3 = complex1.ONE.exp();
      complex3.ZERO.nthRoot(728);
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex0.I.multiply(1106);
      Complex complex6 = complex1.ONE.asin();
      Complex complex7 = complex1.INF.pow(1.1593703222523284E-8);
      complex4.INF.divide(complex7);
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex8.pow(complex4);
      Complex complex10 = complex9.I.sinh();
      complex9.I.divide(1.1593703222523284E-8);
      Complex complex11 = complex0.sin();
      complex5.subtract((double) 1106);
      complex0.ZERO.log();
      complex8.ZERO.cosh();
      Complex complex12 = Complex.valueOf((double) 1106);
      complex11.multiply((-4395));
      Complex complex13 = complex8.sqrt();
      Complex complex14 = complex0.asin();
      complex14.add(complex5);
      Complex complex15 = complex13.multiply((-4395));
      complex4.sqrt();
      complex2.multiply(complex13);
      complex6.subtract(complex10);
      complex15.sqrt();
      complex12.asin();
      complex14.add(6.283185307179586);
      complex10.subtract(1.1593703222523284E-8);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-80.3), 2.0538716316223145);
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.ONE.multiply(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.log();
      complex4.sqrt();
      Complex.valueOf((double) 0, 2.115062964308555E-197);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1882.6, Double.POSITIVE_INFINITY);
      complex0.ONE.multiply(complex1);
      complex0.acos();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.315860999413894E129), 864.061);
      complex0.ZERO.getField();
      Complex complex1 = complex0.sqrt();
      complex1.NaN.getField();
      Complex complex2 = complex1.INF.log();
      complex2.NaN.abs();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.subtract(complex3);
      complex4.I.readResolve();
      Complex complex5 = new Complex((-7.315860999413894E129));
      complex5.ONE.add((-4333.44025920944));
      complex5.ONE.createComplex(864.061, 864.061);
      complex4.ZERO.pow(complex5);
      complex4.asin();
      Complex complex6 = complex1.pow(complex2);
      complex6.ZERO.multiply((-6.892713087722722E-8));
      Complex complex7 = complex4.atan();
      complex7.INF.getField();
      Complex.valueOf((-293.393182), (-7.315860999413894E129));
      complex3.readResolve();
      complex3.add((-293.393182));
      complex4.cosh();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.abs();
      complex0.ONE.multiply(1314);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.add(complex0);
      complex0.hashCode();
      complex2.hashCode();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf(15.250610100285705, 20.0);
      complex3.tanh();
      Complex complex5 = Complex.INF;
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      complex2.tanh();
      complex1.tanh();
      Complex complex3 = Complex.ZERO;
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(complex0);
      complex1.ONE.cos();
      complex0.ONE.divide(Double.POSITIVE_INFINITY);
      complex0.I.add(1.0);
      complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(162.22383910158888, 162.22383910158888);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = new Complex(162.22383910158888, (-20.0));
      complex1.log();
      complex1.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.tan();
      complex4.ONE.add((double) 1);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.conjugate();
      complex1.asin();
      complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.divide(Double.NaN);
      Complex complex3 = complex2.multiply(complex1);
      complex3.ZERO.atan();
      complex3.readResolve();
      complex2.multiply(Double.NaN);
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.log();
      Complex complex1 = Complex.valueOf(3.0144088843073416E-40, 2.115062964308555E-197);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.exp();
      complex4.multiply(complex1);
      complex3.negate();
      complex2.sinh();
      complex3.add((-3581.5058582));
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex4.pow(52633.147945716395);
      complex7.acos();
      Complex complex8 = Complex.ZERO;
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.add(complex0);
      complex0.hashCode();
      complex2.hashCode();
      Complex complex3 = Complex.INF;
      complex3.acos();
      Complex complex4 = Complex.valueOf(15.250610100285705);
      complex4.getArgument();
      complex3.exp();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.add(complex2);
      Complex complex7 = complex6.INF.createComplex(3.0, 647.2965);
      complex7.I.tan();
      complex2.abs();
      Complex complex8 = complex2.add(833.464157);
      complex8.getField();
      complex1.tanh();
      complex8.pow(1.0333241479437797E-8);
      Complex complex9 = Complex.valueOf(0.003);
      Complex complex10 = complex9.tanh();
      complex10.log();
      complex3.multiply(1518500250);
      Complex complex11 = new Complex(3.0, Double.POSITIVE_INFINITY);
      Complex.valueOf(1312.2747209);
      complex5.log();
      Complex complex12 = complex3.tanh();
      Complex complex13 = Complex.ZERO;
      complex3.acos();
      complex13.tan();
      complex12.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      complex1.getArgument();
      Complex.valueOf(2662963.7231978956, -0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.subtract(-0.0);
      complex2.subtract((-221.3476556238147));
      Complex complex4 = complex2.multiply(Double.NaN);
      complex4.atan();
      Complex complex5 = complex3.add(3860.1999999997206);
      complex0.negate();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.ONE.divide(3405.843591304);
      complex3.INF.divide(complex0);
      complex0.ZERO.cos();
      Complex complex4 = complex1.divide(1064.98334001);
      complex4.INF.readResolve();
      complex0.toString();
      Complex complex5 = Complex.valueOf((-4116.0));
      Complex complex6 = complex5.NaN.subtract((-4116.0));
      complex5.cos();
      complex4.readResolve();
      complex0.pow((-2079.537));
      Complex complex7 = complex6.sinh();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.reciprocal();
      complex2.ZERO.multiply(1328053.4344246646);
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.INF;
      complex4.tan();
      complex3.cosh();
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      complex0.NaN.reciprocal();
      Complex complex3 = complex2.sqrt1z();
      complex0.NaN.getArgument();
      Complex complex4 = Complex.valueOf(5748.630575595258, 0.0);
      Complex complex5 = complex1.subtract(5748.630575595258);
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex3.conjugate();
      complex4.NaN.multiply(1);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = Complex.ONE;
      complex6.add(complex7);
      Complex complex10 = complex8.pow(Double.NaN);
      complex10.acos();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.nthRoot(2221);
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex0.add(complex3);
      complex3.toString();
      complex1.divide((double) 2221);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.reciprocal();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.nthRoot(2221);
      Complex complex1 = complex0.tanh();
      complex1.pow(Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex complex2 = new Complex((-1.0), 4.357168123448786E243);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.createComplex(Double.POSITIVE_INFINITY, 4.357168123448786E243);
      Complex complex5 = Complex.INF;
      complex4.cos();
      complex2.divide(complex1);
      complex5.createComplex(Double.POSITIVE_INFINITY, 1615.30298187782);
      complex0.createComplex((-2679.62), Double.POSITIVE_INFINITY);
      complex5.multiply(2555.3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      complex0.NaN.reciprocal();
      Complex complex3 = complex2.sqrt1z();
      complex0.NaN.getArgument();
      Complex complex4 = Complex.valueOf(5748.630575595258, 0.0);
      Complex complex5 = complex1.subtract(5748.630575595258);
      complex5.NaN.sinh();
      Complex complex6 = complex3.conjugate();
      complex4.NaN.multiply(1);
      complex0.conjugate();
      complex3.add(complex4);
      Complex complex7 = Complex.ZERO;
      complex7.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.414213562373095, 2.414213562373095);
      Complex complex2 = complex1.add(complex0);
      complex2.hashCode();
      complex2.getField();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex1.reciprocal();
      complex4.NaN.tan();
      complex0.sqrt1z();
      complex3.getArgument();
      Complex complex5 = Complex.valueOf((-0.024967005703622647), (-2392.266334346793));
      Complex complex6 = complex0.subtract((-5.8759898326913254E166));
      complex3.sinh();
      complex5.conjugate();
      complex1.multiply(1);
      Complex complex7 = Complex.NaN;
      complex7.conjugate();
      Complex complex8 = Complex.I;
      complex5.pow((double) 1);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.414213562373095, 2.414213562373095);
      Complex complex2 = complex1.add(complex0);
      complex0.hashCode();
      complex2.hashCode();
      Complex complex3 = Complex.INF;
      complex3.acos();
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.valueOf(2.414213562373095, 2.414213562373095);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = Complex.INF;
      complex6.equals(complex8);
      Complex complex9 = complex7.exp();
      complex7.readResolve();
      complex5.equals(complex4);
      complex7.getArgument();
      complex0.hashCode();
      Complex complex10 = complex9.acos();
      complex5.subtract((-0.7853981633974483));
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1903.862271);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.valueOf(20.0, 1903.862271);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.valueOf((-1964.8982379610588), Double.NaN);
      complex3.isNaN();
      complex7.exp();
      complex4.readResolve();
      complex5.equals(complex3);
      complex5.getArgument();
      complex0.hashCode();
      complex4.acos();
      Complex complex8 = Complex.NaN;
      complex8.subtract((-424.335591546));
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      complex0.NaN.reciprocal();
      Complex complex3 = complex2.sqrt1z();
      complex0.NaN.getArgument();
      Complex complex4 = Complex.I;
      complex3.add(complex4);
      complex2.toString();
      Complex complex5 = Complex.ONE;
      complex5.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1631.86113195, 2.4557628631591797);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.sin();
      complex1.NaN.cos();
      Complex complex3 = Complex.valueOf(1631.86113195, 3095.0900277818);
      complex1.NaN.reciprocal();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.valueOf(1.0);
      complex6.abs();
      complex1.add((-1540.83322982915));
      complex6.getField();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex5.pow((-1540.83322982915));
      complex3.tanh();
      complex6.log();
      complex8.multiply(37);
      Complex complex9 = new Complex((-1540.83322982915), 0.6212903261184692);
      complex9.log();
      complex7.createComplex(1.0, (-140.7312524232));
      Complex complex10 = new Complex((-2895.443002), 1.0);
      complex2.cos();
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex0.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      complex0.NaN.reciprocal();
      Complex complex3 = complex2.sqrt1z();
      complex0.NaN.getArgument();
      Complex complex4 = Complex.valueOf(5748.630575595258, 0.0);
      Complex complex5 = complex1.subtract(5748.630575595258);
      complex5.NaN.sinh();
      complex3.conjugate();
      complex4.NaN.multiply(1);
      complex0.conjugate();
      complex3.add(complex4);
      complex2.pow(5748.630575595258);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2.414213562373095);
      Complex complex1 = complex0.ZERO.multiply(17);
      Complex complex2 = complex1.NaN.conjugate();
      complex1.INF.nthRoot(1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.ONE;
      complex3.ZERO.pow(complex4);
      Complex complex5 = complex3.ZERO.tanh();
      Complex complex6 = Complex.valueOf((-2230.858943397), 2.414213562373095);
      Complex complex7 = complex1.sqrt1z();
      complex2.conjugate();
      complex7.abs();
      Complex.valueOf((double) 17, 9.182512565315022E-8);
      complex5.multiply(9.182512565315022E-8);
      complex6.negate();
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = Complex.ONE;
      complex1.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex2.sqrt1z();
      complex0.NaN.getArgument();
      Complex complex5 = Complex.valueOf(5748.630575595258, 0.0);
      Complex complex6 = complex1.subtract(5748.630575595258);
      complex6.NaN.sinh();
      complex4.conjugate();
      Complex complex7 = complex5.NaN.multiply(1);
      complex7.tanh();
      complex3.readResolve();
      complex7.negate();
      complex1.sqrt();
      Complex complex8 = new Complex((-833.464157), 5748.630575595258);
      Complex complex9 = complex8.createComplex(19.0, Double.POSITIVE_INFINITY);
      complex9.isInfinite();
      complex7.log();
      complex4.subtract(5748.630575595258);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow(487.206062141967);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(487.206062141967, (-2.528280677744487));
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.divide((-20.0));
      complex2.pow(2.1714401245117188);
      Complex complex7 = Complex.NaN;
      complex7.cos();
      complex3.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex2.sqrt1z();
      complex0.NaN.getArgument();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.multiply(complex0);
      complex5.readResolve();
      complex4.getArgument();
      Complex.valueOf((-805.738), (-805.738));
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.subtract(Double.NaN);
      complex3.sinh();
      complex0.NaN.toString();
      complex9.conjugate();
      Complex complex10 = complex8.multiply((-1207));
      Complex complex11 = Complex.I;
      complex11.conjugate();
      complex8.add(complex11);
      complex10.pow(1.0);
      Complex complex12 = complex4.acos();
      complex5.tan();
      complex12.sinh();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.414213562373095, 2.414213562373095);
      Complex complex2 = complex1.add(complex0);
      complex0.hashCode();
      complex2.hashCode();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.valueOf(2.414213562373095);
      complex5.sinh();
      complex5.getArgument();
      complex3.exp();
      Complex complex6 = Complex.NaN;
      complex6.add(complex2);
      complex0.cosh();
      complex2.abs();
      Complex complex7 = complex2.add(833.464157);
      complex7.getField();
      complex1.tanh();
      complex5.pow(833.464157);
      Complex complex8 = complex4.tanh();
      complex0.log();
      complex2.multiply(37);
      Complex complex9 = new Complex(20.0, 2.414213562373095);
      complex9.log();
      complex5.createComplex(20.0, 0.0);
      Complex complex10 = new Complex(2906.55154418479, (-2.782159649779516));
      complex6.cos();
      complex10.divide(complex3);
      complex8.createComplex(833.464157, 2.35517168886351E-254);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2278.0);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = Complex.valueOf((-2393.75702475257));
      complex3.multiply(complex2);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.sqrt1z();
      complex2.getArgument();
      Complex complex6 = Complex.INF;
      complex3.subtract(2278.0);
      Complex complex7 = complex1.sinh();
      Complex complex8 = new Complex(0.0, 4116.0);
      complex8.conjugate();
      complex1.multiply((-1236));
      complex5.conjugate();
      complex8.add(complex3);
      complex4.pow(0.0);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf((-1.000562864745385), (-1994.85583256911));
      Complex complex3 = complex2.pow(complex1);
      complex3.log();
      Complex complex4 = complex3.pow(complex2);
      complex1.createComplex((-2647.0), 141.0);
      complex1.cos();
      complex0.negate();
      complex4.multiply(1293.231065);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.log();
      complex2.ONE.toString();
      Complex complex3 = complex1.I.asin();
      complex3.NaN.sinh();
      Complex complex4 = complex1.NaN.divide(529.44651);
      complex4.ZERO.pow((-13.016661));
      Complex complex5 = complex2.multiply(complex0);
      complex5.nthRoot(4116);
      Complex complex6 = complex5.ZERO.multiply(complex1);
      Object object0 = complex6.I.readResolve();
      complex0.cosh();
      Complex complex7 = complex5.INF.negate();
      Complex complex8 = complex5.divide(0.6212903261184692);
      Complex complex9 = Complex.ZERO;
      complex8.I.divide(complex6);
      Complex complex10 = complex0.subtract((double) 4116);
      complex10.pow(complex5);
      Complex.valueOf((double) 4116);
      Complex complex11 = Complex.ZERO;
      complex11.equals(complex0);
      Complex complex12 = complex6.exp();
      complex2.readResolve();
      Complex complex13 = Complex.valueOf(0.6212903261184692);
      complex13.equals(object0);
      complex9.getArgument();
      complex12.hashCode();
      complex5.acos();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.add(3343.72439);
      complex1.NaN.readResolve();
      Complex complex2 = complex0.add((-1157.4588619));
      complex0.pow(complex1);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.NaN.add((-0.6905817003766437));
      Complex.valueOf((-0.6905817003766437));
      complex4.atan();
      complex5.tanh();
      complex4.add(3263.7221972529105);
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.multiply(1.0);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex1.INF.add(complex4);
      complex3.getReal();
      complex1.ONE.pow(complex0);
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex3.log();
      complex1.pow(1.0);
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex8.ZERO.add(complex7);
      complex2.toString();
      complex5.sqrt();
      Complex complex10 = complex4.sqrt1z();
      complex10.INF.getArgument();
      complex8.readResolve();
      complex9.divide(complex3);
      complex0.subtract((-837.0190577899672));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(914.1281585, 914.1281585);
      Complex complex1 = Complex.valueOf(914.1281585);
      Complex complex2 = complex1.I.sinh();
      complex0.ONE.tan();
      complex0.readResolve();
      Complex complex3 = new Complex(914.1281585);
      Complex complex4 = complex3.createComplex(837.0190577899672, 3344.72439);
      complex4.log();
      complex2.getField();
      complex0.getImaginary();
      complex1.sinh();
      complex1.pow(complex0);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.8759898326913254E166, 5.8759898326913254E166);
      complex0.ONE.sqrt();
      Complex complex1 = complex0.pow(5.8759898326913254E166);
      Complex complex2 = new Complex(20.0, 6.283185307179586);
      Complex complex3 = complex1.divide(complex2);
      complex1.toString();
      Complex complex4 = Complex.I;
      complex4.nthRoot(863);
      complex2.getImaginary();
      complex0.subtract(complex3);
      Complex complex5 = new Complex(6.283185307179586, 1963.8036544962074);
      complex5.getField();
      complex4.conjugate();
      complex5.subtract(5.8759898326913254E166);
      Complex complex6 = Complex.ONE;
      complex6.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      complex0.I.hashCode();
      complex2.NaN.hashCode();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex0.INF.sinh();
      complex1.NaN.getArgument();
      complex1.NaN.exp();
      complex4.ZERO.add(complex3);
      Complex complex5 = complex3.ONE.cosh();
      complex0.abs();
      complex3.add(0.0);
      complex2.getField();
      complex3.tanh();
      Complex complex6 = complex3.ZERO.pow(0.0);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.sin();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.add(complex5);
      complex9.exp();
      Complex complex11 = complex7.exp();
      Complex complex12 = Complex.INF;
      complex6.pow(complex1);
      complex10.subtract((-4735.50421837));
      Complex complex13 = Complex.ZERO;
      complex13.tanh();
      complex5.readResolve();
      complex8.negate();
      complex11.sqrt();
      complex8.createComplex(Double.NaN, 0.0);
      complex3.isInfinite();
      complex11.log();
      complex8.subtract(Double.NaN);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.log();
      complex2.ONE.toString();
      Complex complex3 = complex1.I.asin();
      complex3.NaN.sinh();
      Complex complex4 = complex2.ONE.conjugate();
      Complex.valueOf(2290.392119248769);
      complex4.NaN.divide(529.44651);
      Complex complex5 = complex2.multiply(complex0);
      complex5.nthRoot(4116);
      Complex complex6 = complex5.ZERO.multiply(complex1);
      complex6.I.readResolve();
      Complex complex7 = complex0.cosh();
      complex5.INF.negate();
      Complex complex8 = complex5.divide(0.6212903261184692);
      complex8.readResolve();
      complex8.I.divide(complex6);
      Complex complex9 = complex0.subtract((double) 4116);
      complex9.pow(complex5);
      complex9.tanh();
      complex0.log();
      complex9.multiply(37);
      complex7.log();
      complex3.createComplex(37, 2906.55154418479);
      Complex.valueOf(1168.329533654609, Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.I;
      // Undeclared exception!
      complex10.nthRoot(4116);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex2.sqrt1z();
      complex3.nthRoot(17);
      Complex complex5 = Complex.valueOf(443.2964);
      Complex complex6 = complex5.pow((-1063.0));
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex0.divide(complex7);
      complex1.getArgument();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex1.add(complex9);
      Complex complex11 = complex4.atan();
      Complex complex12 = complex5.multiply(2837);
      complex5.sin();
      Complex complex13 = complex9.acos();
      Complex complex14 = complex10.multiply(2.356194490192345);
      Complex complex15 = complex4.divide(complex14);
      complex5.toString();
      complex13.nthRoot(691);
      complex2.getImaginary();
      complex8.subtract(complex11);
      complex13.getField();
      Complex complex16 = new Complex(692.3722305029456, (-1063.0));
      complex16.conjugate();
      complex15.subtract((double) 3760);
      complex0.multiply((-5.763495903609913E-231));
      complex12.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(1389325.0020074414);
      Complex complex2 = complex0.exp();
      complex1.abs();
      Complex complex3 = complex1.atan();
      complex3.pow(0.0);
      Complex.valueOf(3058.1494142697);
      complex2.conjugate();
      Complex complex4 = complex2.divide(0.0);
      complex3.pow((-1754.341701837));
      complex4.cos();
      Complex complex5 = complex2.divide(complex3);
      complex5.I.pow(1.5430806348152437);
      complex0.pow(3058.1494142697);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.NaN.reciprocal();
      complex0.exp();
      complex2.add(complex0);
      Complex complex4 = complex2.cosh();
      complex3.abs();
      complex4.add((-0.9988001892190679));
      complex4.getField();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.pow((-0.9988001892190679));
      complex6.tanh();
      complex0.log();
      Complex complex8 = new Complex(Double.NaN, 37);
      complex8.multiply(599);
      complex7.log();
      Complex complex9 = complex3.createComplex(2561.843104, 37);
      Complex.valueOf(1168.329533654609, 914.1281585);
      try { 
        complex9.nthRoot((-2960));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,960
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex2.sqrt1z();
      complex1.cosh();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex3.divide((-3.30101656090905E173));
      complex4.readResolve();
      Complex complex7 = complex4.divide(complex6);
      complex4.subtract(0.6212903261184692);
      Complex complex8 = complex4.pow(complex5);
      Complex complex9 = Complex.valueOf(2683.25744315);
      complex0.sin();
      complex8.add(complex9);
      Complex complex10 = complex6.exp();
      complex10.exp();
      Complex complex11 = Complex.INF;
      complex10.pow(complex9);
      Complex complex12 = complex6.subtract(2.799340708992666E66);
      complex12.tanh();
      complex11.readResolve();
      complex11.negate();
      complex12.sqrt();
      Complex complex13 = complex6.createComplex(2207.51565052767, 6.283185307179586);
      Complex complex14 = Complex.valueOf(90.0102466496);
      complex14.isInfinite();
      complex5.log();
      complex7.subtract((-833.464157));
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.log();
      complex2.ONE.toString();
      Complex complex3 = complex1.I.asin();
      complex3.NaN.sinh();
      Complex complex4 = complex2.ONE.conjugate();
      complex4.NaN.divide(529.44651);
      Complex complex5 = complex2.multiply(complex0);
      complex5.nthRoot(4116);
      complex0.INF.sqrt();
      Complex complex6 = complex5.ZERO.multiply(complex1);
      complex6.I.readResolve();
      complex5.getArgument();
      Complex complex7 = Complex.valueOf(3.141592653589793, 3.141592653589793);
      Complex complex8 = Complex.INF;
      complex8.subtract((-1548.584543));
      Complex complex9 = complex3.sinh();
      complex7.conjugate();
      Complex complex10 = complex9.multiply(1);
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex5.add(complex11);
      complex12.pow(4125.390946);
      complex10.acos();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      complex0.NaN.reciprocal();
      Complex complex3 = complex2.reciprocal();
      complex0.reciprocal();
      Complex complex4 = Complex.valueOf(0.0, 2.770970558184228E-8);
      Complex complex5 = Complex.I;
      complex2.equals(complex5);
      complex2.exp();
      Complex complex6 = Complex.ONE;
      complex6.readResolve();
      complex5.equals(complexField0);
      complex2.getArgument();
      complex3.hashCode();
      complex1.acos();
      complex3.subtract(6.283185307179586);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = Complex.valueOf((-833.464157));
      Complex complex2 = complex1.tan();
      complex1.nthRoot(1894);
      Complex complex3 = Complex.ZERO;
      complex3.readResolve();
      complex0.atan();
      Complex complex4 = complex2.createComplex(3344.72439, 837.0190577899672);
      complex1.log();
      Complex complex5 = complex4.multiply(complex0);
      complex5.getField();
      complex3.getImaginary();
      complex2.sinh();
      complex1.pow(complex1);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(914.1281585, 914.1281585);
      Complex complex1 = complex0.conjugate();
      complex0.getField();
      complex1.getField();
      complex1.multiply(complex0);
      Complex.valueOf(914.1281585, 914.1281585);
      Complex complex2 = complex0.reciprocal();
      complex1.sqrt1z();
      complex2.getArgument();
      Complex.valueOf(0.6212903261184692, 2662963.7231978956);
      complex2.subtract(1143.2246756);
      complex2.sinh();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.multiply(1);
      Complex complex5 = complex0.conjugate();
      complex3.add(complex2);
      complex2.pow(20.0);
      complex4.acos();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-703.62396722996), (-703.62396722996));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex7.multiply(0.0);
      Complex complex10 = complex6.exp();
      complex4.multiply(73.411943298);
      complex10.toString();
      Complex complex11 = complex9.asin();
      complex10.hashCode();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex12.exp();
      complex8.cosh();
      complex1.asin();
      Complex complex14 = complex0.sinh();
      Complex complex15 = complex14.multiply(complex11);
      Complex complex16 = complex11.createComplex(0.0, 0.0);
      Complex complex17 = complex3.reciprocal();
      complex11.exp();
      complex17.sqrt1z();
      complex16.conjugate();
      complex7.cos();
      Complex complex18 = complex5.sqrt();
      complex4.multiply(complex10);
      complex18.reciprocal();
      complex15.add((-1.669012123121194E-54));
      complex13.nthRoot(793);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(1631.86113195, 2.4557628631591797);
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.sin();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = Complex.valueOf(1631.86113195, 3095.0900277818);
      Complex complex4 = complex1.NaN.reciprocal();
      Complex complex5 = complex0.NaN.reciprocal();
      Complex.valueOf((-0.51797), 0.0);
      complex1.equals((Object) null);
      complex4.exp();
      Complex complex6 = complex3.exp();
      Complex complex7 = Complex.INF;
      complex2.pow(complex4);
      Complex complex8 = complex5.subtract((-963.078399806757));
      complex6.tanh();
      complex1.readResolve();
      complex5.negate();
      complex8.sqrt();
      Complex complex9 = Complex.valueOf(1631.86113195, 2.185301053838889E-9);
      Complex complex10 = complex9.createComplex(1.0413759887481643E23, Double.NaN);
      complex10.isInfinite();
      complex8.log();
      complex9.subtract(1389325.0020070814);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      complex0.NaN.reciprocal();
      Complex complex3 = complex2.sqrt1z();
      complex0.NaN.getArgument();
      Complex complex4 = Complex.valueOf((-412.328758));
      complex4.divide(0.33333333333333337);
      complex1.getReal();
      Complex complex5 = new Complex((-412.328758), Double.NaN);
      complex5.isNaN();
      complex1.isInfinite();
      complex3.log();
      Complex.valueOf((-833.464157), (-412.328758));
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex1.cosh();
      complex2.toString();
      complex2.negate();
      complex4.reciprocal();
      complex3.reciprocal();
      complex4.pow(complex1);
      complex2.add((-20.0));
      complex0.add(complex4);
      Complex complex5 = Complex.ONE;
      complex5.multiply((-1518500250));
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex3.NaN.acos();
      complex2.ZERO.multiply(complex4);
      complex4.INF.getField();
      Complex.valueOf(0.0, (-925.7));
      complex3.ZERO.reciprocal();
      Complex complex5 = complex1.sin();
      complex5.INF.hashCode();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.ONE.subtract(complex3);
      complex7.INF.toString();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex6.INF.subtract(complex2);
      complex1.pow(complex2);
      complex6.hashCode();
      complex0.getArgument();
      complex4.cosh();
      complex2.tanh();
      complex8.cos();
      complex9.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(4068.0);
      complex0.ONE.hashCode();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.getReal();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.multiply(0.0);
      complex0.isInfinite();
      Complex complex3 = complex1.acos();
      complex2.getField();
      complex3.I.atan();
      Complex complex4 = complex1.cosh();
      complex4.createComplex((-379.0), 2648.821739);
      Complex complex5 = complex1.multiply(complex3);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 2278.0);
      Complex complex1 = complex0.I.acos();
      complex1.I.reciprocal();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.reciprocal();
      complex1.INF.multiply((-1.0));
      complex0.nthRoot(19);
      complex0.I.conjugate();
      Complex complex2 = Complex.valueOf(986.32);
      complex2.I.multiply((-3194));
      Complex complex3 = complex0.subtract(0.0);
      complex3.NaN.add(0.0);
      Complex complex4 = complex3.NaN.pow(complex0);
      Complex complex5 = complex4.ZERO.divide((double) 19);
      complex5.ONE.sinh();
      Complex complex6 = complex3.subtract(complex0);
      complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.nthRoot(2221);
      Complex complex1 = Complex.I;
      complex0.add(complex1);
      complex0.toString();
      complex0.divide((double) 2221);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.negate();
      complex2.NaN.log();
      Complex complex3 = complex0.INF.createComplex(0.0, 0.0);
      complex3.INF.divide((-1547.26505854));
      complex1.subtract(0.0);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(4.538983468118194E-9, 4.538983468118194E-9);
      complex0.getField();
      Complex complex1 = complex0.INF.multiply(4.538983468118194E-9);
      Complex complex2 = complex0.cosh();
      complex0.INF.toString();
      Complex complex3 = complex0.negate();
      complex3.INF.reciprocal();
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = complex2.pow(complex0);
      complex1.add(4.538983468118194E-9);
      complex5.INF.add(complex3);
      complex5.multiply((-1434));
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-833.464157), (-833.464157));
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      complex0.getField();
      Complex complex2 = complex1.multiply(complex0);
      complex0.NaN.reciprocal();
      Complex complex3 = complex2.sqrt1z();
      complex0.NaN.getArgument();
      Complex complex4 = Complex.valueOf(5748.630575595258, 0.0);
      Complex complex5 = complex1.subtract(5748.630575595258);
      complex5.NaN.sinh();
      Complex complex6 = complex3.conjugate();
      complex4.NaN.multiply(1);
      complex0.conjugate();
      complex3.add(complex4);
      complex2.pow(0.12642613053321838);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.8759898326913254E166, 5.8759898326913254E166);
      complex0.ONE.sqrt();
      Complex complex1 = complex0.pow(5.8759898326913254E166);
      try { 
        complex1.nthRoot((-3353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,353
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 752.1279);
      Complex.valueOf(752.1279, Double.POSITIVE_INFINITY);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.23604154586792, 2019.09);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.tanh();
      complex2.ONE.getArgument();
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex3.NaN.add(complex2);
      complex4.ONE.abs();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex5.ZERO.multiply(1373);
      complex6.INF.sqrt1z();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex5.asin();
      complex1.isInfinite();
      Complex complex9 = complex7.ZERO.sinh();
      complex9.I.log();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.ONE.multiply(complex7);
      complex1.I.sqrt();
      complex7.INF.subtract(0.3678794503211975);
      Complex complex12 = complex2.multiply(0.0);
      complex12.I.readResolve();
      complex6.I.multiply(904.1);
      complex3.readResolve();
      complex2.cos();
      Complex complex13 = complex5.reciprocal();
      complex13.ONE.divide(complex10);
      complex10.cos();
      complex3.getReal();
      complex11.readResolve();
      complex9.tanh();
      complex8.pow(complex9);
      complex2.abs();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.tanh();
      Complex complex1 = Complex.valueOf(1.0, 2928.1);
      complex0.toString();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.divide((-443.02470727));
      Complex complex5 = complex2.NaN.tan();
      complex4.I.getArgument();
      Complex complex6 = complex2.NaN.acos();
      complex4.I.readResolve();
      complex5.INF.negate();
      complex4.INF.cosh();
      complex1.isNaN();
      complex2.equals("(0.0, 0.0)");
      complex1.isInfinite();
      complex0.ONE.subtract(complex1);
      Complex complex7 = complex5.add(complex4);
      complex7.NaN.acos();
      Complex complex8 = complex6.divide(complex3);
      Complex complex9 = Complex.ONE;
      complex8.subtract(complex9);
      complex3.isNaN();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(462.28642806252, 2.0);
      complex0.INF.log();
      Complex complex1 = complex0.ZERO.subtract(462.28642806252);
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex1.I.createComplex(462.28642806252, (-979.9542531112));
      complex4.NaN.multiply(complex0);
      Complex complex5 = complex4.I.cos();
      complex5.ZERO.acos();
      complex4.NaN.multiply(462.28642806252);
      try { 
        complex3.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tanh();
      complex1.NaN.hashCode();
      Complex complex3 = complex0.divide(complex1);
      complex0.ONE.abs();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.add(0.0);
      Complex complex6 = complex2.add(complex0);
      complex0.isInfinite();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex7.NaN.multiply(complex2);
      Complex complex9 = complex8.I.tanh();
      Complex complex10 = complex3.cosh();
      complex8.multiply(1.0);
      complex10.NaN.abs();
      complex10.INF.getField();
      complex2.divide(0.0);
      Complex complex11 = complex5.conjugate();
      Complex complex12 = Complex.valueOf(Double.NaN, 2843.0);
      complex6.I.conjugate();
      complex7.multiply(complex3);
      complex12.NaN.multiply(0.0);
      complex9.exp();
      Complex complex13 = new Complex(Double.NaN);
      complex4.divide(complex13);
      complex11.tan();
      Complex complex14 = complex3.log();
      complex5.atan();
      complex14.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex1.tanh();
      complex3.INF.getArgument();
      Complex complex4 = Complex.valueOf(1389.541788, 4313.0);
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex0.ZERO.cosh();
      complex0.NaN.sinh();
      complex0.getReal();
      complex3.getArgument();
      complex3.NaN.divide(Double.NaN);
      Complex.valueOf(0.0, Double.NaN);
      Complex complex7 = complex3.multiply(complex6);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex3.reciprocal();
      complex9.multiply(2962);
      complex5.pow(complex8);
      complex2.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      complex0.I.hashCode();
      complex2.NaN.hashCode();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex0.INF.sinh();
      complex1.NaN.getArgument();
      complex1.NaN.exp();
      complex4.ZERO.add(complex3);
      Complex complex5 = complex3.ONE.cosh();
      complex0.abs();
      complex3.add(0.0);
      complex2.getField();
      complex3.tanh();
      complex3.ZERO.pow(0.0);
      complex2.tanh();
      Complex complex6 = complex5.log();
      complex6.INF.multiply(37);
      complex6.I.log();
      complex2.createComplex(2906.55154418479, Double.NaN);
      Complex complex7 = Complex.valueOf(1168.329533654609, (-35.786));
      complex7.ZERO.nthRoot(37);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(1631.86113195, 2.4557628631591797);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = Complex.valueOf(1631.86113195, 3095.0900277818);
      complex1.NaN.reciprocal();
      Complex complex5 = complex0.NaN.reciprocal();
      Complex.valueOf((-0.51797), 0.0);
      complex1.equals((Object) null);
      Complex complex6 = complex1.exp();
      Object object0 = complex6.readResolve();
      complex6.equals(object0);
      complex3.getArgument();
      complex5.hashCode();
      complex4.acos();
      complex2.subtract((-960.614063174));
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-20.0));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(0.0, (-20.0));
      Complex complex4 = complex1.asin();
      complex4.pow(complex2);
      Complex complex5 = complex1.NaN.divide(complex2);
      complex0.createComplex((-20.0), 597.93017);
      complex4.getArgument();
      complex1.getField();
      complex0.divide(complex3);
      complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.INF.sqrt();
      complex3.INF.acos();
      Complex complex5 = complex3.sqrt1z();
      complex3.INF.negate();
      Complex complex6 = complex5.NaN.add(9.352382323649647E257);
      complex6.createComplex(0.0, 2610.736);
      complex6.INF.atan();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex7.NaN.asin();
      complex4.asin();
      complex5.getReal();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex4.sqrt();
      complex9.multiply((-347.15456647));
      complex8.isInfinite();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-703.62396722996), (-703.62396722996));
      Complex complex1 = Complex.valueOf(184.9082039, (-703.62396722996));
      Complex complex2 = complex1.I.tanh();
      complex2.ZERO.createComplex(0.0, 0.0);
      complex0.subtract(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex3.NaN.sinh();
      Complex complex6 = complex3.asin();
      complex6.INF.multiply(0.0);
      Complex complex7 = complex4.I.exp();
      Complex complex8 = complex1.multiply((-417.12));
      complex4.toString();
      Complex complex9 = complex8.asin();
      complex9.I.hashCode();
      complex0.exp();
      Complex complex10 = complex6.cosh();
      Complex complex11 = complex5.asin();
      Complex complex12 = complex11.INF.sinh();
      complex12.I.multiply(complex7);
      Complex complex13 = complex0.createComplex((-417.12), (-1.669012123121194E-54));
      complex13.ZERO.reciprocal();
      complex13.ZERO.exp();
      complex5.sqrt1z();
      Complex complex14 = complex5.conjugate();
      complex14.I.cos();
      complex6.sqrt();
      complex9.multiply(complex6);
      Complex complex15 = complex10.reciprocal();
      complex15.add(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-460.755397786), 2.5988736152648926);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.I.multiply(complex0);
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.I.nthRoot(1);
      Complex complex3 = complex1.ZERO.multiply((-1244));
      Complex complex4 = complex3.subtract(580.5184);
      complex4.NaN.asin();
      complex1.ZERO.divide((double) (-1244));
      complex1.INF.createComplex((-2676.799), 0.0);
      Complex complex5 = complex0.I.add(complex1);
      complex3.INF.tan();
      complex5.I.abs();
      complex0.ONE.abs();
      Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf(0.0, (-2628.8));
      Complex complex7 = complex6.pow(complex0);
      complex7.I.getField();
      complex3.isNaN();
      complex2.getArgument();
      complex3.nthRoot(3048);
      complex3.asin();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.divide(0.0);
      complex0.exp();
      complex1.I.abs();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.ONE.pow(1.0);
      Complex.valueOf(0.0);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.ONE.divide(1.0);
      complex5.ZERO.pow(1.0);
      complex2.cos();
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-121.9206392), (-121.9206392));
      Complex complex1 = complex0.ONE.tanh();
      Complex.valueOf((-121.9206392), (-121.9206392));
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.NaN.sin();
      complex3.INF.getField();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.ZERO.subtract(complex0);
      complex5.ONE.multiply(0);
      complex5.ZERO.cos();
      Complex complex6 = complex1.negate();
      complex1.ZERO.createComplex((-4.987913342551977E93), (-3141.47174422));
      Complex complex7 = complex4.NaN.divide(complex0);
      complex0.getArgument();
      complex7.I.sin();
      Complex complex8 = Complex.valueOf((-2.356194490192345), (-121.9206392));
      complex8.NaN.nthRoot(1);
      complex8.INF.atan();
      complex2.pow(complex7);
      Complex complex9 = Complex.valueOf(2239.09426);
      complex1.createComplex((-3141.47174422), 1439.42379951);
      complex2.log();
      complex2.getReal();
      complex0.NaN.divide((-1505.343462));
      Complex complex10 = complex2.multiply((-4.987913342551977E93));
      complex9.getField();
      complex0.nthRoot(250);
      complex4.cosh();
      complex10.acos();
      complex6.createComplex(1, (-121.9206392));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.abs();
      complex0.NaN.abs();
      Complex complex1 = complex0.I.conjugate();
      complex0.readResolve();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ZERO.createComplex(1229.99167635276, 1229.99167635276);
      Complex complex5 = complex4.I.multiply(complex3);
      complex0.divide(complex2);
      Complex complex6 = complex3.sqrt();
      complex6.ZERO.sqrt1z();
      complex5.ZERO.getField();
      Complex complex7 = complex1.multiply(1677);
      complex0.tanh();
      complex5.getImaginary();
      complex5.tanh();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1625.8303058757, 2163.784);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.NaN.pow(2055.15049933237);
      Complex complex6 = complex1.divide(2163.784);
      Complex complex7 = complex6.I.add((-1352.42123117893));
      complex6.getArgument();
      Complex complex8 = complex6.ONE.pow(complex2);
      complex8.ZERO.createComplex(189.0, 1625.8303058757);
      complex2.equals(complex0);
      Complex complex9 = complex5.negate();
      complex9.I.conjugate();
      complex2.acos();
      Complex complex10 = complex1.pow(6.283185307179586);
      Complex complex11 = Complex.valueOf(0.3662964701652527);
      Complex complex12 = complex7.log();
      Complex complex13 = complex12.log();
      complex13.ZERO.asin();
      complex12.multiply(2163.784);
      complex6.pow(complex12);
      Complex complex14 = complex2.tan();
      Complex complex15 = complex14.cos();
      complex15.pow(complex10);
      complex5.add(complex14);
      complex2.readResolve();
      complex10.equals("");
      complex1.pow(Double.NaN);
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-110.381276));
      complex0.I.toString();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.tanh();
      complex2.ONE.divide((-846.6653135));
      complex2.NaN.toString();
      complex0.subtract(complex1);
      complex0.subtract(7.316033240396569E150);
      Complex complex3 = complex0.tanh();
      complex3.sin();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.cos();
      complex0.ZERO.getArgument();
      complex0.createComplex((-1011.514578), 0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-2.0582596893119236E-232), (-120.172175));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.add((-1.0));
      complex1.NaN.toString();
      int int0 = (-1979);
      Complex complex3 = complex0.ZERO.add(complex1);
      complex3.NaN.subtract(complex2);
      Complex complex4 = complex0.multiply((-1979));
      complex1.toString();
      complex4.getField();
      Complex complex5 = complex4.multiply(1.0);
      complex4.isInfinite();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex1.createComplex(1.0, 1.0);
      complex1.ZERO.sinh();
      Complex complex8 = complex6.exp();
      Complex.valueOf(0.0);
      Complex complex9 = complex8.I.divide(complex5);
      complex9.INF.multiply(0);
      complex7.abs();
      Complex complex10 = complex6.reciprocal();
      complex1.add(complex0);
      Object object0 = complex5.readResolve();
      complex10.equals(object0);
      complex4.NaN.sqrt1z();
      int int1 = (-4554);
      try { 
        complex5.nthRoot((-4554));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,554
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.log();
      complex2.ONE.toString();
      Complex complex3 = complex1.I.asin();
      complex3.NaN.sinh();
      Complex complex4 = complex2.ONE.conjugate();
      complex4.NaN.divide(529.44651);
      Complex complex5 = complex2.multiply(complex0);
      complex5.nthRoot(4116);
      Complex complex6 = complex5.ZERO.multiply(complex1);
      complex6.I.readResolve();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex5.INF.negate();
      Complex complex9 = complex5.divide(0.6212903261184692);
      complex9.readResolve();
      complex9.I.divide(complex6);
      Complex complex10 = complex0.subtract((double) 4116);
      complex10.pow(complex5);
      Complex.valueOf((double) 4116);
      complex10.INF.sin();
      complex8.NaN.add(complex10);
      Complex complex11 = complex9.NaN.exp();
      Complex complex12 = complex11.ONE.exp();
      Complex complex13 = Complex.INF;
      complex7.I.pow(complex13);
      complex12.subtract(0.6212903261184692);
      complex9.tanh();
      complex7.readResolve();
      complex2.negate();
      Complex complex14 = complex9.sqrt();
      complex8.createComplex(0.6212903261184692, 4116);
      complex0.isInfinite();
      complex14.log();
      complex2.subtract(0.6212903261184692);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex4.ONE.tanh();
      complex2.I.multiply(complex1);
      Complex complex6 = complex1.ONE.add((-1.0));
      Complex complex7 = Complex.ONE;
      complex0.pow(complex7);
      complex0.abs();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex8.NaN.divide(0.0);
      complex9.ZERO.getArgument();
      Complex complex10 = complex8.tan();
      complex10.ZERO.sqrt();
      complex3.isNaN();
      complex5.I.sinh();
      Complex complex11 = complex8.sinh();
      complex8.NaN.negate();
      complex11.abs();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4574.2, (-2825.7152730909));
      complex0.NaN.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.NaN.divide(complex3);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex5.pow(complex1);
      complex1.toString();
      Complex complex7 = complex1.sqrt();
      complex7.INF.asin();
      complex7.I.readResolve();
      complex2.abs();
      complex5.cos();
      complex0.I.tanh();
      complex3.add(437.6838437135142);
      Complex complex8 = complex5.sqrt();
      complex6.multiply(complex5);
      complex7.add((-523.78));
      try { 
        complex8.nthRoot((-2760));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,760
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1516.3602);
      Complex complex1 = complex0.ONE.tanh();
      complex0.getImaginary();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex3.I.pow(1516.3602);
      Complex complex5 = complex2.INF.add(0.0);
      Complex complex6 = complex4.NaN.sqrt1z();
      complex6.ZERO.reciprocal();
      Complex complex7 = complex1.divide(1516.3602);
      Complex complex8 = complex2.acos();
      assertEquals(2.6796196586998464, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex0.I.asin();
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex3.cos();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex11.tan();
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex11.NaN.atan();
      complex4.getReal();
      Complex complex14 = complex7.log();
      Complex complex15 = complex7.subtract(946.92645361);
      Complex.valueOf((-3681.0));
      Complex complex16 = complex4.conjugate();
      complex16.NaN.add(946.92645361);
      Complex complex17 = complex16.INF.acos();
      complex15.add(complex14);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals((-946.9259513585191), complex15.getReal(), 0.01);
      
      Complex complex18 = complex13.negate();
      Complex complex19 = Complex.valueOf(1516.3602, 0.8441595488865257);
      complex5.negate();
      Complex complex20 = complex5.pow((-1403.55));
      assertTrue(complex20.equals((Object)complex18));
      
      Complex complex21 = complex19.pow(complex14);
      assertEquals((-2.907709086972522E-27), complex21.getImaginary(), 0.01);
      
      Complex complex22 = complex17.reciprocal();
      assertSame(complex22, complex6);
      assertEquals(0.8441595488865257, complex16.getReal(), 0.01);
      assertEquals(0.5360920219735577, complex4.getImaginary(), 0.01);
      assertNotSame(complex22, complex20);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      assertTrue(complex1.isNaN());
      
      Complex complex2 = complex0.add(2.0);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-5122.47), (-5122.47));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.createComplex(0.0, (-5122.47));
      Complex complex3 = complex2.INF.multiply(complex1);
      complex3.I.add(complex2);
      Complex complex4 = complex0.ZERO.reciprocal();
      String string0 = complex0.toString();
      assertEquals("(-5122.47, -5122.47)", string0);
      
      Complex complex5 = complex0.I.add(complex2);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals((-5121.47), complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.INF.add(complex2);
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = (Complex)complex2.readResolve();
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      double double0 = complex1.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      complex4.isNaN();
      Complex complex10 = complex3.multiply(complex6);
      Complex complex11 = complex10.multiply(579);
      assertSame(complex11, complex4);
      assertNotSame(complex11, complex8);
      
      Complex complex12 = complex0.multiply(complex7);
      assertFalse(complex2.isInfinite());
      assertTrue(complex6.equals((Object)complex8));
      assertEquals(Double.POSITIVE_INFINITY, complex12.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.pow(complex1);
      complex2.INF.multiply(216);
      Complex complex3 = complex0.I.sinh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.NaN.reciprocal();
      Complex complex6 = complex3.ONE.tanh();
      complex6.ZERO.pow(complex2);
      complex4.isInfinite();
      Complex complex7 = complex1.add(complex3);
      complex7.NaN.exp();
      complex0.readResolve();
      complex5.negate();
      complex2.asin();
      complex5.log();
      complex6.sinh();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex(309.26016550528, 2153.54);
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf((-1218.0));
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.ZERO.log();
      assertTrue(complex3.isInfinite());
      assertEquals((-1218.0), complex1.getReal(), 0.01);
      
      Complex complex4 = new Complex((-206.098307236489));
      Complex complex5 = complex0.pow(complex4);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      double double0 = complex0.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.divide(1715.47148861);
      Complex complex4 = complex3.INF.subtract(1715.47148861);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex5.subtract(0.0);
      double double1 = complex6.getImaginary();
      assertSame(complex6, complex2);
      assertSame(complex1, complex3);
      assertSame(complex6, complex5);
      assertEquals(Double.NaN, double1, 0.01);
  }
}
