/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:24:13 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(8.990862214387203E-308, 1.4122813341078449E-307);
      Complex complex1 = complex0.pow(8.990862214387203E-308);
      Complex complex2 = Complex.valueOf(1.4122813341078449E-307, 1.4122813341078449E-307);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.ONE.divide(8.990862214387203E-308);
      complex5.I.reciprocal();
      Complex complex6 = Complex.ONE;
      complex2.ONE.pow(complex6);
      complex2.multiply(complex1);
      complex0.hashCode();
      Complex complex7 = complex1.sqrt1z();
      complex7.ZERO.readResolve();
      Complex complex8 = complex4.I.negate();
      Complex complex9 = complex4.sqrt();
      complex9.multiply(complex3);
      complex4.abs();
      complex3.atan();
      complex8.cos();
      complex0.nthRoot(11);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(4.128891346771872E-154, Double.POSITIVE_INFINITY);
      complex0.I.pow(complex1);
      Complex complex2 = complex0.cosh();
      complex2.I.pow(complex0);
      complex1.INF.subtract(772277.4023114385);
      complex2.I.conjugate();
      complex0.tanh();
      try { 
        complex1.nthRoot((-1929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,929
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(8.990862214387203E-308, 1.4122813341078449E-307);
      Complex complex1 = new Complex((-3463.562738082));
      complex1.I.atan();
      Complex complex2 = new Complex(8.990862214387203E-308, 7.980432566722885E241);
      complex2.pow(3302.05401485315);
      complex0.asin();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide(3.048193826655025E-264);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0), 906.200562965);
      complex1.tanh();
      complex1.sqrt();
      Complex complex2 = Complex.valueOf(8.990862214387203E-308, 906.200562965);
      complex2.INF.log();
      Complex complex3 = complex2.pow(8.990862214387203E-308);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.subtract(1781.620138367);
      Complex complex4 = complex1.ONE.sqrt1z();
      complex4.NaN.sin();
      Complex complex5 = complex4.NaN.conjugate();
      Complex.valueOf((-4.831068747037129E-118), (-5.376251584638963E-8));
      Complex complex6 = Complex.valueOf(20.0, 6.283185307179586);
      complex2.ONE.asin();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex1.divide(1.5442993640899658);
      complex6.INF.subtract((-4.831068747037129E-118));
      complex8.NaN.cosh();
      Complex complex9 = complex8.atan();
      complex3.INF.toString();
      Complex complex10 = complex3.pow(20.0);
      Complex complex11 = complex10.ONE.pow(complex4);
      complex11.NaN.acos();
      complex1.atan();
      Complex.valueOf(20.0, -0.0);
      complex2.pow(1.5442993640899658);
      complex5.exp();
      complex4.atan();
      complex7.sin();
      complex0.log();
      complex11.negate();
      complex2.toString();
      complex9.add(6.283185307179586);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract(Double.NaN);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.ONE;
      complex0.nthRoot(605);
      Complex complex4 = new Complex(0.0, (-20.0));
      Complex complex5 = complex4.sqrt();
      complex5.I.multiply(complex2);
      complex0.sqrt();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex((-1040.671793), 1729.225809889);
      complex2.negate();
      Complex complex3 = Complex.INF;
      complex3.sin();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.log();
      Complex complex6 = complex1.tanh();
      Complex complex7 = Complex.ONE;
      complex6.nthRoot(437);
      complex2.sqrt();
      complex5.sqrt();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.multiply(Double.NaN);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.cosh();
      Complex complex3 = new Complex(0.0, (-2373.82978));
      Complex complex4 = complex0.negate();
      complex1.sin();
      complex4.log();
      complex1.tanh();
      Complex complex5 = new Complex(916, 258.05);
      complex5.pow(complex2);
      complex1.multiply(916);
      complex4.nthRoot(437);
      complex5.sqrt();
      complex3.subtract(258.05);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(1063, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(1063);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(1107.7801, 1107.7801);
      Complex complex1 = new Complex(88.80992508, 1.0407926842436056E294);
      Complex complex2 = complex0.divide(complex1);
      complex1.sqrt1z();
      complex2.INF.divide(complex1);
      Complex complex3 = complex2.add(0.4840312115630758);
      complex3.toString();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(6904.4855454372);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1419.88531943, 1419.88531943);
      complex0.INF.exp();
      complex0.I.tan();
      complex0.NaN.nthRoot(2047);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract(complex0);
      complex2.sinh();
      Complex complex3 = complex1.pow(complex0);
      complex3.isInfinite();
      complex1.cos();
      complex3.toString();
      Complex complex4 = complex3.acos();
      complex2.subtract(complex4);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.getField();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-229));
      Complex complex2 = complex1.ZERO.subtract(0.0);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex2.createComplex(0.0, 88.89);
      complex4.readResolve();
      complex3.getImaginary();
      complex4.nthRoot(37);
      complex0.asin();
      complex3.asin();
      Complex.valueOf(88.89);
      Complex complex5 = Complex.I;
      complex2.equals(complex5);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply((-1160.89606290195));
      Complex complex2 = complex1.cosh();
      Complex complex3 = new Complex((-0.0012174455922604466), 2.496872901916504);
      complex1.negate();
      complex2.sin();
      Complex complex4 = complex2.log();
      Complex complex5 = new Complex(5.221469250951617E173, (-1160.89606290195));
      complex5.tanh();
      complex4.multiply(17);
      try { 
        complex2.nthRoot((-1768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,768
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(45243.80259597805, 1.4302079642723736E55);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.exp();
      complex1.cosh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex1);
      complex4.ZERO.createComplex((-8.472642266772353E218), (-791.0));
      complex4.NaN.readResolve();
      complex3.getImaginary();
      complex3.nthRoot(46);
      complex0.asin();
      complex2.I.asin();
      Complex complex5 = Complex.valueOf(1357.8758);
      complex5.equals(complex1);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = complex1.log();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex1.I.exp();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex2.I.cosh();
      complex4.subtract(complex3);
      complex2.ZERO.log();
      complex2.ZERO.getField();
      Complex complex5 = complex2.pow((-578.7347774748094));
      complex5.sqrt();
      complex5.I.sqrt1z();
      complex2.I.hashCode();
      Complex complex6 = complex2.sin();
      complex6.abs();
      Complex complex7 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex7.sinh();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.7018054398283449);
      complex0.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = new Complex(1.7018054398283449);
      Complex complex4 = complex0.pow((-4363.483135215599));
      Complex complex5 = complex1.multiply(complex2);
      complex5.getReal();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex5.divide(0.0);
      Complex complex8 = new Complex(0.0, Double.NaN);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex9.createComplex((-1625.0799), 0.0);
      complex8.getField();
      complex4.readResolve();
      complex3.nthRoot(553);
      complex6.add(complex4);
      complex10.divide(complex9);
      complex10.getImaginary();
      complex3.getArgument();
      Complex complex11 = new Complex(1.7018054398283449, (-20.0));
      complex7.asin();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      complex0.NaN.toString();
      complex0.INF.multiply(0.0);
      complex1.ZERO.subtract(0.0);
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.multiply(complex2);
      complex3.ZERO.abs();
      complex2.isNaN();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      complex4.conjugate();
      complex4.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.028939355368480305);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-1996.704), (-1996.704));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.log();
      Complex.valueOf((-72.4684255684));
      complex0.INF.toString();
      Complex complex3 = complex0.NaN.createComplex((-2015.923), 0.4374985694885254);
      complex2.I.nthRoot(1012);
      complex1.INF.abs();
      Complex complex4 = complex1.I.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ONE.sqrt();
      complex5.multiply(1012);
      complex4.ZERO.getField();
      Complex complex6 = complex0.log();
      complex6.NaN.sqrt1z();
      Complex complex7 = complex0.log();
      complex6.sinh();
      complex5.nthRoot(1012);
      Complex.valueOf((-1996.704));
      complex6.pow(complex3);
      complex7.createComplex((-2052.268132499), 1.1752011936438014);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 5.37726685372636);
      Complex complex2 = complex1.tan();
      complex1.equals(complex2);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      complex1.NaN.negate();
      Complex complex2 = complex0.I.add((-1.0904271124793968E-8));
      complex0.readResolve();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.INF.acos();
      complex4.cosh();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex2.divide(Double.NaN);
      complex6.pow(complex4);
      Complex complex7 = complex4.add(complex5);
      Complex complex8 = complex7.INF.subtract(complex1);
      complex8.ZERO.createComplex((-12.81144843), (-243.2563));
      complex7.ZERO.tanh();
      complex0.sqrt();
      complex1.abs();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.subtract(0.0);
      complex3.multiply(complex1);
      complex0.isNaN();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.createComplex((-1366.0), Double.POSITIVE_INFINITY);
      complex2.getField();
      complex1.readResolve();
      complex0.nthRoot(1);
      complex3.add(complex5);
      Complex complex6 = complex0.divide(complex3);
      complex5.getImaginary();
      complex6.getArgument();
      complex6.asin();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 5.37726685372636);
      Complex complex2 = complex1.ONE.subtract(5.37726685372636);
      complex1.INF.add(complex0);
      complex1.tan();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.acos();
      complex2.hashCode();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.pow(1042.5799);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.multiply(complex6);
      complex5.getReal();
      complex0.cos();
      complex9.divide(2398.1254);
      Complex complex10 = complex7.negate();
      complex1.createComplex(2555.4, Double.NaN);
      complex5.getField();
      complex3.readResolve();
      complex0.nthRoot(1);
      Complex complex11 = Complex.INF;
      complex11.add(complex10);
      complex7.divide(complex10);
      complex5.getImaginary();
      complex3.getArgument();
      Complex complex12 = complex11.asin();
      Complex complex13 = complex12.pow((-484.715316801));
      complex13.reciprocal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-229));
      complex1.ZERO.subtract(0.0);
      complex0.negate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex4.createComplex(2.55409795397022E-208, 413.604715585112);
      Complex.valueOf(2.55409795397022E-208);
      complex3.tanh();
      complex0.add(0.0);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ONE;
      complex2.negate();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = Complex.valueOf((-35.251933), 0.14325212455460332);
      complex4.sin();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex3.cosh();
      complex5.hashCode();
      complex3.pow(complex7);
      complex2.pow((-7963683.0));
      complex4.multiply(complex5);
      complex0.getReal();
      Complex complex8 = complex1.cos();
      complex4.divide(0.8259324122591327);
      complex5.negate();
      complex8.createComplex(0.0, 2197.48047147067);
      complex0.getField();
      complex6.readResolve();
      try { 
        complex2.nthRoot((-341));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -341
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex.valueOf(0.0);
      Complex complex0 = Complex.valueOf(1391.08001847073);
      complex0.I.pow(7963683.0);
      complex0.INF.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.getArgument();
      complex0.I.tan();
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.I;
      complex2.toString();
      Complex complex3 = complex0.subtract(20.0);
      complex3.add(0.6054253578186035);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(849.5732682179784, (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(500.303182, (-20.0));
      complex0.NaN.toString();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(1372.469963862);
      complex0.log();
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(1909.47609632, 1909.47609632);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf(1.0);
      complex0.ONE.abs();
      int int0 = 1033;
      Complex complex3 = complex2.ZERO.multiply(1033);
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.ONE.divide((double) 1033);
      Complex complex6 = complex0.subtract((-1973.912345530556));
      Complex complex7 = complex1.add(complex6);
      Complex complex8 = complex7.ONE.subtract((double) 1033);
      complex5.NaN.add(complex8);
      Complex complex9 = complex5.createComplex(2.0, 20.0);
      complex9.NaN.multiply(1033);
      complex4.pow(complex0);
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = complex10.log();
      complex4.NaN.exp();
      complex5.abs();
      complex11.nthRoot(1483793945);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-216.4299316514));
      Complex complex2 = complex0.divide(complex1);
      complex0.ZERO.hashCode();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ZERO.pow((-216.4299316514));
      complex4.NaN.tan();
      Complex complex6 = complex1.log();
      complex6.NaN.hashCode();
      Complex complex7 = complex0.subtract(complex2);
      complex7.ONE.hashCode();
      Complex complex8 = complex1.sqrt();
      complex8.I.toString();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex9.NaN.tanh();
      complex4.abs();
      Complex complex11 = complex6.negate();
      complex6.exp();
      Complex complex12 = complex5.sqrt1z();
      Complex complex13 = complex12.I.multiply((-216.4299316514));
      complex0.reciprocal();
      complex6.isInfinite();
      complex11.subtract(complex10);
      complex13.divide(complex3);
      complex11.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(766.535447, 766.535447);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.subtract((-205.30009439816));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract((-766.125838284));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.INF;
      complex4.ZERO.add(complex2);
      complex4.isNaN();
      Complex complex5 = complex2.divide((-20.0));
      complex0.conjugate();
      Complex complex6 = complex2.acos();
      complex2.acos();
      complex6.readResolve();
      Complex complex7 = complex1.divide(complex3);
      complex5.nthRoot(564);
      complex7.readResolve();
      Complex.valueOf(3980.4688344);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-766.125838284), (-2870.92506744366));
      Complex complex1 = new Complex((-2870.92506744366), 2585.1);
      complex0.cosh();
      complex1.subtract(2585.1);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ONE;
      complex2.subtract(0.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.I;
      complex4.multiply(complex1);
      complex1.isNaN();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.divide(0.999463223767986);
      complex6.conjugate();
      complex2.acos();
      Complex complex7 = Complex.ONE;
      complex7.acos();
      complex0.readResolve();
      complex2.divide(complex0);
      Complex complex8 = Complex.ONE;
      complex8.nthRoot(564);
      complex3.readResolve();
      Complex.valueOf(267.590633286);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-13.81144843));
      Complex complex1 = complex0.multiply(0.0);
      complex0.cosh();
      Complex complex2 = complex0.negate();
      complex2.I.log();
      complex1.ZERO.sqrt();
      Complex complex3 = complex0.negate();
      complex1.INF.multiply(complex1);
      Complex complex4 = complex1.sin();
      complex4.cos();
      Complex complex5 = complex2.acos();
      complex5.NaN.cosh();
      complex1.hashCode();
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex1.pow(0.0);
      complex7.ONE.multiply(complex2);
      complex6.getReal();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex6.divide(4.647715736994396E15);
      Complex complex10 = complex8.negate();
      complex5.I.createComplex((-0.6137717085970167), 0.0);
      complex9.ONE.getField();
      Complex complex11 = (Complex)complex7.readResolve();
      complex6.I.nthRoot(1);
      Complex complex12 = complex0.add(complex9);
      complex12.ONE.sin();
      Complex complex13 = complex10.divide(complex2);
      complex11.getImaginary();
      Complex complex14 = Complex.NaN;
      complex14.getArgument();
      complex13.asin();
      complex0.pow(4120.318);
      complex2.reciprocal();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-229));
      Complex complex2 = complex1.ZERO.subtract(0.0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = Complex.ZERO;
      complex3.pow(complex5);
      complex4.equals(complex2);
      Complex complex6 = Complex.valueOf(1362.84231134, 1362.84231134);
      complex3.conjugate();
      complex5.hashCode();
      complex1.readResolve();
      complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-13.81144843));
      Complex complex1 = complex0.multiply(0.0);
      complex0.cosh();
      Complex complex2 = complex0.negate();
      complex2.I.log();
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.I;
      complex5.NaN.getArgument();
      complex1.INF.multiply(complex5);
      Complex complex6 = complex1.sin();
      complex6.cos();
      Complex complex7 = complex2.acos();
      complex7.NaN.cosh();
      complex1.hashCode();
      Complex complex8 = complex0.pow(complex2);
      Complex complex9 = complex1.pow(0.0);
      complex9.ONE.multiply(complex2);
      complex8.getReal();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex8.divide(4.647715736994396E15);
      complex10.negate();
      complex7.I.createComplex(0.0, 0.0);
      complex11.ONE.getField();
      complex9.readResolve();
      complex8.I.nthRoot(1);
      Complex complex12 = Complex.NaN;
      complex12.multiply(1187);
      complex3.nthRoot(2147106313);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-766.125838284), (-2870.92506744366));
      Complex complex1 = complex0.pow((-1360.8463835));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.multiply((-1223));
      complex2.getField();
      Complex complex4 = complex2.add(1742.0);
      Complex complex5 = Complex.I;
      complex3.getField();
      complex3.readResolve();
      complex2.nthRoot(1006);
      Complex complex6 = complex5.multiply((-1.1264032993918548E58));
      complex1.log();
      complex1.add((-4.426784562450935));
      complex6.multiply(complex4);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.acos();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.ZERO.divide(complex2);
      complex3.getReal();
      complex1.getField();
      complex2.readResolve();
      complex2.nthRoot(372);
      Complex complex4 = complex0.multiply((double) 372);
      Complex complex5 = complex0.log();
      complex5.add(8.43527683868743E-8);
      complex3.multiply(complex2);
      Complex complex6 = complex4.acos();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-766.125838284), (-2870.92506744366));
      Complex complex1 = complex0.pow((-1360.8463835));
      Complex complex2 = new Complex((-2870.92506744366), (-2870.92506744366));
      Complex complex3 = complex1.multiply((-1223));
      complex2.getField();
      complex2.add(1742.0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.tan();
      Complex complex6 = Complex.I;
      complex6.multiply(complex0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex3.sin();
      Complex complex9 = complex8.divide(complex1);
      complex5.getImaginary();
      complex3.getArgument();
      complex5.asin();
      complex9.pow(0.0);
      complex2.reciprocal();
      complex9.cosh();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.multiply(complex4);
      complex0.isNaN();
      Complex complex6 = complex3.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex8.ZERO.acos();
      complex2.readResolve();
      Complex complex10 = complex2.divide(0.0);
      Complex complex11 = complex9.negate();
      complex2.createComplex(2195.19633, (-765.28081963));
      complex9.getField();
      complex10.readResolve();
      complex2.nthRoot(1);
      complex0.tan();
      Complex complex12 = complex8.add(complex3);
      complex12.sin();
      complex9.divide(complex6);
      complex11.getImaginary();
      complex0.getArgument();
      Complex complex13 = complex5.asin();
      complex12.pow(0.0);
      Complex complex14 = Complex.I;
      complex14.reciprocal();
      complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.sqrt();
      complex2.I.nthRoot(587);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.multiply(complex1);
      complex2.pow(complex4);
      Complex complex5 = Complex.valueOf(237.26);
      complex5.equals(complex1);
      Complex complex6 = complex1.add(complex2);
      complex3.getField();
      complex1.readResolve();
      complex4.nthRoot(587);
      Complex complex7 = complex2.tan();
      complex7.add(complex1);
      complex4.sin();
      Complex complex8 = Complex.NaN;
      complex8.divide(complex1);
      complex6.getImaginary();
      complex2.getArgument();
      Complex complex9 = complex7.asin();
      complex8.pow((-1438.0));
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.reciprocal();
      complex9.cosh();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.sqrt();
      complex2.I.nthRoot(587);
      Complex complex3 = complex2.acos();
      Complex complex4 = new Complex(27.586647438890925);
      complex4.cosh();
      complex0.hashCode();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex0.pow((double) 587);
      Complex complex7 = Complex.NaN;
      complex7.multiply(complex0);
      complex2.getReal();
      complex4.cos();
      complex6.divide(0.0);
      complex1.negate();
      complex4.createComplex(1.0, 6.570047690198998E269);
      complex3.getField();
      complex7.readResolve();
      complex1.nthRoot(587);
      complex0.tan();
      complex3.add(complex5);
      Complex complex8 = complex4.sin();
      complex2.divide(complex4);
      complex3.getImaginary();
      complex8.getArgument();
      complex0.asin();
      Complex complex9 = complex3.pow(-0.0);
      complex1.reciprocal();
      complex9.cosh();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      Complex complex0 = Complex.valueOf((-940.65608), 1184.22855250852);
      Complex complex1 = Complex.INF;
      complex1.getField();
      complex0.sqrt();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-13.81144843));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.sinh();
      complex0.toString();
      Complex complex5 = complex3.exp();
      complex4.getField();
      complex5.readResolve();
      Complex complex6 = new Complex(899.8989279349, 2.414213562373095);
      complex6.getField();
      Complex complex7 = complex0.exp();
      complex7.exp();
      complex2.exp();
      Complex complex8 = new Complex(2.414213562373095, 899.8989279349);
      complex8.cos();
      Complex complex9 = Complex.valueOf((-13.81144843));
      complex9.getReal();
      complex0.getField();
      Complex complex10 = complex8.subtract(703.70779738458);
      complex9.getReal();
      complex10.divide(complex9);
      complex3.nthRoot(372);
      Complex complex11 = Complex.ZERO;
      complex11.readResolve();
      Complex.valueOf((double) 372);
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(810.8914450294, 810.8914450294);
      Complex.valueOf(810.8914450294);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.sinh();
      complex1.toString();
      Complex complex4 = complex0.exp();
      complex4.NaN.getField();
      complex1.readResolve();
      complex2.ZERO.getField();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.ZERO.exp();
      complex7.ONE.cos();
      complex2.getReal();
      complex5.ZERO.getField();
      complex4.subtract(0.0);
      complex5.getReal();
      complex0.divide(complex3);
      complex0.nthRoot(372);
      complex6.readResolve();
      Complex.valueOf(396.429069476444);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex1.sinh();
      complex0.createComplex(899.8989279349, (-806));
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.log();
      complex1.add(0.41421356237309515);
      complex0.multiply(899.8989279349);
      complex0.subtract(complex2);
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex2.pow(complex4);
      Complex complex7 = new Complex((-806));
      complex1.equals(complex7);
      complex5.add(complex7);
      Complex.valueOf(2870.92506744366, 3.2850043261803593E68);
      Complex complex8 = complex5.createComplex((-806), 1544.2);
      Complex.valueOf(899.8989279349);
      complex8.tanh();
      complex6.log();
      complex6.multiply(0.0);
      complex7.exp();
      complex2.getArgument();
      complex3.toString();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.cosh();
      complex4.hashCode();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex1.pow(0.0);
      complex1.multiply(complex5);
      complex4.getReal();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex7.divide(1.0);
      Complex complex9 = complex4.negate();
      complex4.createComplex((-229), (-229));
      complex6.getField();
      Complex complex10 = Complex.valueOf(2.403806217004454E138, 1.0);
      complex10.readResolve();
      complex5.nthRoot(331);
      complex8.tan();
      Complex complex11 = complex9.add(complex5);
      complex4.sin();
      Complex complex12 = complex0.divide(complex3);
      complex12.getImaginary();
      complex11.getArgument();
      complex2.asin();
      complex3.pow(0.0);
      complex6.reciprocal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(900.8989279349);
      Complex complex1 = Complex.valueOf(900.8989279349, 0.0);
      Complex complex2 = Complex.valueOf(900.8989279349, 900.8989279349);
      complex2.INF.log();
      complex2.isNaN();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.divide(2.403806217004454E138);
      complex2.I.tanh();
      complex4.I.hashCode();
      complex4.NaN.multiply(125.61409987);
      Complex complex5 = complex1.exp();
      complex5.INF.getField();
      complex2.cosh();
      complex1.sqrt1z();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-766.125838284), (-2871.8207911446284));
      Complex complex1 = complex0.pow((-1360.8463835));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.I.createComplex((-2871.8207911446284), 0.0);
      complex1.NaN.cosh();
      complex2.NaN.log();
      Complex complex5 = complex3.add(0.0);
      complex5.multiply(0.0);
      Complex complex6 = complex5.subtract(complex4);
      complex0.multiply(complex5);
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.valueOf(0.35334908962249756, 0.0);
      complex8.conjugate();
      complex6.hashCode();
      complex6.readResolve();
      complex4.pow(complex6);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.tanh();
      complex0.NaN.multiply(33);
      complex0.ONE.sqrt();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.divide(complex0);
      complex2.add((-2671.0055));
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.nthRoot(37);
      Object object0 = new Object();
      Complex complex2 = Complex.INF;
      complex2.equals(object0);
      complex1.hashCode();
      Complex complex3 = complex1.add((double) 37);
      Complex.valueOf(3.5311184272663063E-283, 1215.47);
      Complex complex4 = complex2.conjugate();
      complex1.hashCode();
      complex3.readResolve();
      complex4.pow(complex2);
      complex0.multiply(37);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.exp();
      complex0.getField();
      Complex complex2 = Complex.INF;
      complex2.readResolve();
      Complex complex3 = new Complex((-643.33938054), 1347.29475213);
      complex3.getField();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.exp();
      complex0.exp();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.cos();
      complex1.getReal();
      complex6.getField();
      complex5.NaN.createComplex((-1192.0135015244518), (-1192.0135015244518));
      complex7.subtract(1347.29475213);
      complex5.getReal();
      Complex complex8 = Complex.INF;
      complex5.divide(complex8);
      complex0.nthRoot(966);
      complex7.readResolve();
      Complex complex9 = Complex.valueOf(1047.42628547774);
      complex5.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(810.8914450294);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.NaN;
      complex1.sinh();
      complex1.toString();
      complex0.subtract(complex1);
      Complex.valueOf(Double.NaN, 810.8914450294);
      complex2.hashCode();
      complex2.cos();
      Complex complex3 = Complex.I;
      complex3.log();
      complex1.atan();
      complex3.tan();
      Complex complex4 = Complex.NaN;
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(900.8989279349);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = Complex.valueOf(900.8989279349, 0.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex4.NaN.negate();
      complex4.ZERO.hashCode();
      Complex complex7 = Complex.valueOf(900.8989279349, 0.0);
      complex7.INF.log();
      Complex complex8 = complex2.NaN.add((-5666.88974527));
      complex7.isNaN();
      Complex complex9 = complex8.pow(complex5);
      complex4.equals(complex2);
      complex2.add(complex9);
      Complex complex10 = complex2.createComplex(0.0, (-1470.475366));
      Complex.valueOf(900.8989279349);
      complex10.tanh();
      Complex complex11 = Complex.ZERO;
      complex11.log();
      complex3.multiply(0.0);
      complex8.exp();
      complex6.getArgument();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-766.125838284), (-2870.92506744366));
      Complex complex1 = complex0.pow((-1360.8463835));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.I.createComplex((-2870.92506744366), 0.0);
      complex1.NaN.cosh();
      complex4.I.getField();
      complex2.NaN.log();
      Complex complex5 = complex3.add(0.0);
      Complex complex6 = complex5.multiply(0.0);
      complex5.subtract(complex4);
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex7.I.pow(complex6);
      complex2.equals(complex3);
      Complex.valueOf((-766.125838284), Double.NaN);
      Complex complex9 = complex5.conjugate();
      complex8.hashCode();
      complex0.readResolve();
      complex9.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.sqrt();
      complex2.I.nthRoot(587);
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.ONE.hashCode();
      Complex complex3 = complex0.NaN.add(0.0);
      complex0.add(complex2);
      complex3.createComplex((-7.49674072510849E-8), 2.8401159516008676E283);
      Complex complex4 = Complex.valueOf(Double.NaN);
      complex3.tanh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.log();
      Complex complex7 = new Complex((-1486.392), 415.8449571229185);
      complex7.multiply((-0.9999975357922429));
      complex2.exp();
      complex4.getArgument();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.subtract(complex1);
      Complex complex2 = Complex.valueOf((-643.33938054), 1347.29475213);
      complex2.INF.hashCode();
      Complex complex3 = complex2.NaN.cos();
      complex3.NaN.log();
      Complex complex4 = complex0.atan();
      complex4.I.tan();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.reciprocal();
      complex3.cos();
      Complex complex4 = complex1.ONE.sqrt();
      complex4.NaN.getArgument();
      Complex.valueOf(0.0, (-1574.76593496702));
      Complex complex5 = complex3.INF.log();
      int int0 = 0;
      complex2.ONE.pow(complex5);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.NaN.atan();
      Complex complex2 = complex0.multiply((-923));
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex1.subtract((-1215.47));
      complex3.conjugate();
      Complex complex5 = Complex.valueOf((double) (-923));
      Complex complex6 = complex1.subtract(complex3);
      Complex complex7 = complex3.negate();
      Complex.valueOf((-1215.47));
      Complex complex8 = complex3.pow(complex4);
      Complex complex9 = complex0.exp();
      complex9.INF.atan();
      complex9.ONE.asin();
      complex6.hashCode();
      complex5.I.getArgument();
      Complex complex10 = complex5.exp();
      complex10.getArgument();
      complex0.ONE.hashCode();
      complex3.toString();
      complex7.multiply((-923));
      complex7.log();
      Complex complex11 = Complex.valueOf(1.5707963267948966, (-1215.47));
      complex6.readResolve();
      complex11.reciprocal();
      complex8.exp();
      complex10.cos();
      complex4.conjugate();
      complex4.pow(complex1);
      complex0.tanh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(542.34007);
      complex0.ZERO.conjugate();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.createComplex(542.34007, 542.34007);
      complex2.cosh();
      Complex complex3 = complex1.I.cos();
      complex3.multiply(1263);
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex0.divide(complex1);
      complex6.NaN.reciprocal();
      Complex.valueOf(0.0);
      complex1.ZERO.nthRoot(1263);
      complex5.equals(complex6);
      complex7.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(2477.461201);
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sin();
      complex1.NaN.abs();
      Complex complex3 = complex2.I.tanh();
      complex3.ONE.nthRoot(1);
      complex0.I.divide(2477.461201);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex2.pow(complex5);
      complex5.ONE.cos();
      Complex complex7 = complex1.NaN.asin();
      complex4.multiply(complex6);
      Complex complex8 = complex2.multiply(complex0);
      Complex complex9 = complex6.tanh();
      complex0.getField();
      Complex complex10 = complex7.log();
      complex1.atan();
      complex2.multiply((-1517.35071));
      complex10.toString();
      Complex complex11 = complex7.add(2477.461201);
      complex8.multiply(0.0);
      complex9.nthRoot(1);
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.atan();
      complex2.I.sin();
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.pow(complex0);
      complex2.I.negate();
      complex0.getImaginary();
      complex0.conjugate();
      Complex complex3 = complex0.divide((-2094.5));
      complex3.asin();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-2082.9592));
      complex1.NaN.abs();
      complex1.INF.readResolve();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.ZERO.divide(complex2);
      complex3.NaN.sinh();
      Complex complex4 = complex0.ZERO.exp();
      complex4.I.multiply(431);
      complex2.I.pow(0.0);
      complex0.INF.sqrt();
      Complex complex5 = complex2.I.divide(0.0);
      Complex complex6 = complex0.createComplex(2283.0537995207, 2283.0537995207);
      complex6.ZERO.subtract(complex5);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex1.NaN.conjugate();
      complex1.readResolve();
      Complex complex6 = complex0.ZERO.sin();
      complex5.INF.log();
      Object object0 = complex3.readResolve();
      complex5.equals(object0);
      Complex complex7 = complex3.ZERO.add((-4110.81));
      complex7.NaN.toString();
      Complex.valueOf(3025.985247577953);
      Complex complex8 = complex3.ONE.exp();
      complex1.log();
      Complex complex9 = complex7.I.exp();
      complex6.isNaN();
      Complex complex10 = complex4.negate();
      complex10.ZERO.multiply(complex9);
      complex4.getImaginary();
      Complex complex11 = complex8.add((-1.0));
      complex11.cosh();
      Complex complex12 = complex1.multiply((-1.0));
      complex12.INF.sin();
      complex6.isInfinite();
      complex2.divide(complex7);
      Complex.valueOf(0.0, 3025.985247577953);
      Complex complex13 = complex8.multiply(60);
      complex13.add((-2860.8937809773506));
      complex6.nthRoot(2184);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-990.5), (-990.5));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.I.readResolve();
      Complex complex3 = complex2.exp();
      complex0.getImaginary();
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.valueOf((-990.5));
      complex3.isNaN();
      Complex complex6 = complex4.asin();
      complex6.NaN.sinh();
      complex6.ONE.toString();
      complex2.equals(complex3);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.ONE.multiply(1);
      Complex complex9 = complex7.NaN.sinh();
      complex4.subtract(complex7);
      complex7.multiply(complex4);
      Complex complex10 = complex0.divide(complex1);
      complex9.tan();
      complex10.tan();
      complex5.multiply(221);
      complex8.nthRoot(1);
      Complex.valueOf((double) 1, (-6248.732));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.negate();
      complex0.pow(4.250734424415339E-289);
      Complex complex2 = complex0.ZERO.cos();
      complex0.INF.abs();
      Complex complex3 = complex0.pow((-2281.68));
      Complex complex4 = complex2.divide((-2281.68));
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.INF.tan();
      complex5.NaN.log();
      Complex complex7 = complex6.ZERO.divide(complex2);
      Complex complex8 = complex0.ZERO.reciprocal();
      complex8.pow(complex3);
      Complex complex9 = complex3.exp();
      complex9.INF.toString();
      Complex complex10 = complex1.sin();
      complex10.pow((-2281.68));
      complex10.add(complex5);
      Complex complex11 = complex0.log();
      complex5.NaN.sqrt1z();
      Complex complex12 = complex5.NaN.log();
      complex12.NaN.negate();
      complex10.getReal();
      complex11.ONE.nthRoot(907);
      complex7.toString();
      Complex complex13 = complex6.sinh();
      complex9.subtract((-2281.68));
      complex13.asin();
      complex11.readResolve();
      Complex.valueOf(-0.0);
      Complex complex14 = complex2.subtract((-2836.7900071997));
      complex14.I.multiply((-2836.7900071997));
      complex1.abs();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-13.81144843));
      Complex complex1 = complex0.multiply(0.0);
      complex0.cosh();
      Complex complex2 = complex0.negate();
      complex2.I.log();
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.I;
      complex1.INF.multiply(complex5);
      Complex complex6 = complex1.sin();
      complex6.cos();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.NaN.cosh();
      complex1.hashCode();
      Complex complex9 = complex0.pow(complex2);
      Complex complex10 = complex1.pow(0.0);
      complex10.ONE.multiply(complex2);
      complex9.getReal();
      Complex complex11 = complex4.cos();
      Complex complex12 = complex9.divide(4.647715736994396E15);
      Complex complex13 = complex11.negate();
      complex7.I.createComplex(0.0, 0.0);
      complex12.ONE.getField();
      complex10.readResolve();
      complex9.I.nthRoot(1);
      Complex complex14 = complex2.tan();
      Complex complex15 = complex0.add(complex12);
      complex15.ONE.sin();
      complex13.divide(complex2);
      complex14.getImaginary();
      complex3.getArgument();
      complex0.asin();
      complex14.pow(0.0);
      complex8.reciprocal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.divide(0.0);
      complex0.getField();
      Complex complex2 = complex0.ZERO.sqrt1z();
      complex2.INF.reciprocal();
      complex2.NaN.abs();
      complex1.NaN.cos();
      complex0.INF.toString();
      Complex complex3 = complex2.NaN.add(0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex4 = complex0.divide((-20.0));
      Complex complex5 = complex2.tan();
      complex5.ZERO.tan();
      Complex complex6 = complex3.tan();
      complex6.I.conjugate();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.I.acos();
      complex6.subtract(complex8);
      Complex.valueOf((-1.0), 0.0);
      Complex complex9 = complex6.multiply(complex1);
      complex1.multiply(complex4);
      complex7.cosh();
      complex1.sin();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-6.971366338144781E56), (-3.535214171178576E-8));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.I.createComplex((-1072.88), 0.0);
      complex2.NaN.subtract((-1486.392));
      Complex complex3 = Complex.valueOf((-1486.392), 2312.3771);
      complex2.ONE.divide(complex3);
      complex2.ONE.getArgument();
      complex1.ZERO.cosh();
      Complex complex4 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      complex4.exp();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.NaN.multiply(complex5);
      complex6.ONE.getArgument();
      complex5.readResolve();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.NaN.cosh();
      complex7.ZERO.sqrt1z();
      complex7.I.atan();
      Complex complex9 = complex5.sqrt1z();
      complex9.ONE.sqrt1z();
      Complex complex10 = complex9.divide(complex1);
      complex5.cos();
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex11.divide(complex8);
      Complex complex14 = complex0.sinh();
      Complex complex15 = complex8.INF.sqrt1z();
      complex3.conjugate();
      complex14.getReal();
      complex13.toString();
      complex4.reciprocal();
      complex15.subtract(complex12);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1024.96143067);
      Complex complex1 = Complex.INF;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(900.8989279349);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = Complex.valueOf(900.8989279349, 0.0);
      Complex complex4 = complex0.exp();
      complex2.asin();
      complex4.NaN.negate();
      complex4.ZERO.hashCode();
      Complex complex5 = Complex.valueOf(900.8989279349, 0.0);
      complex5.INF.log();
      complex2.NaN.add((-5666.88974527));
      complex5.isNaN();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex6.divide(2.403806217004454E138);
      complex5.I.tanh();
      complex7.I.hashCode();
      complex7.NaN.multiply(125.61409987);
      complex2.isInfinite();
      Complex complex8 = complex3.exp();
      complex8.INF.getField();
      complex5.cosh();
      complex3.sqrt1z();
      Complex complex9 = complex0.sqrt();
      complex9.sqrt();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.pow(0.0);
      complex1.sinh();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.divide(complex3);
      complex3.getReal();
      complex3.INF.toString();
      Complex.valueOf(0.0);
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2416.096097);
      Complex complex1 = complex0.log();
      complex0.NaN.exp();
      complex1.cosh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.divide(complex1);
      complex3.ZERO.createComplex((-8.472642266772353E218), (-791.0));
      complex3.NaN.readResolve();
      complex2.getImaginary();
      complex2.nthRoot(37);
      complex0.ONE.subtract(1357.8758);
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf((double) 37, 0.0);
      complex5.I.asin();
      Complex complex6 = complex5.add(complex4);
      Complex.valueOf((double) 37);
      complex2.getImaginary();
      Complex complex7 = complex5.subtract(complex2);
      Complex complex8 = complex7.NaN.add(1357.8758);
      complex8.I.exp();
      complex6.acos();
      complex0.abs();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.conjugate();
      Complex complex1 = complex0.INF.log();
      complex0.ZERO.divide(complex1);
      complex0.add((-3018.143057179869));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.sin();
      complex0.tan();
      Complex complex3 = complex2.ZERO.subtract(0.0);
      complex3.ZERO.tanh();
      complex0.divide(0.0);
      complex1.ONE.exp();
      complex2.divide(0.0);
      Complex complex4 = complex2.sinh();
      complex4.ONE.multiply(1);
      complex4.I.tan();
      complex2.pow(complex4);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-2050.7), (-2050.7));
      Complex complex1 = complex0.add((-2050.7));
      Complex complex2 = complex0.sin();
      complex1.ZERO.multiply((-2050.7));
      complex2.ZERO.divide(complex1);
      try { 
        complex2.NaN.nthRoot((-1086));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,086
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-950.921098281), (-973.0683048));
      Complex complex1 = Complex.ONE;
      complex1.I.asin();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.negate();
      complex4.ONE.negate();
      complex3.ONE.createComplex((-950.921098281), (-3.996962588736431E-8));
      complex3.NaN.tanh();
      Complex complex5 = complex4.ONE.sqrt();
      complex4.NaN.getArgument();
      complex1.readResolve();
      complex3.isInfinite();
      complex5.isInfinite();
      Complex complex6 = complex1.multiply(2575);
      complex6.NaN.asin();
      complex2.getField();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(810.8914450294);
      Complex.valueOf(810.8914450294);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.sinh();
      complex1.toString();
      Complex complex4 = complex0.exp();
      complex4.NaN.getField();
      complex1.readResolve();
      complex2.ZERO.getField();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.ZERO.exp();
      complex7.ONE.cos();
      complex2.getReal();
      complex5.ZERO.getField();
      complex4.subtract(0.0);
      complex5.getReal();
      complex0.divide(complex3);
      complex0.nthRoot(372);
      complex6.readResolve();
      Complex.valueOf(396.429069476444);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex1.INF.multiply((-806));
      complex1.getField();
      complex0.add(0.0);
      Complex complex2 = Complex.I;
      complex2.ZERO.tan();
      Complex complex3 = complex0.multiply(complex2);
      complex3.ONE.reciprocal();
      complex1.hashCode();
      complex1.divide(1.1413677466646359E297);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-20.0));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.subtract(complex1);
      complex4.INF.negate();
      complex3.NaN.divide(183.6864);
      complex1.hashCode();
      complex1.INF.divide(0.0);
      complex0.I.pow((-20.0));
      complex1.INF.atan();
      Complex complex5 = complex1.sin();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.INF.sqrt1z();
      complex7.I.getField();
      Complex complex8 = complex5.ONE.divide(complex6);
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = Complex.valueOf(0.0, (-817.5915204357));
      complex1.hashCode();
      Complex complex11 = complex1.log();
      complex11.NaN.sqrt();
      complex5.I.subtract(complex10);
      complex5.isInfinite();
      Complex complex12 = complex2.add(complex8);
      complex7.readResolve();
      complex12.divide((-20.0));
      Complex complex13 = complex9.asin();
      complex5.readResolve();
      complex0.getReal();
      complex8.cosh();
      complex13.createComplex(Double.POSITIVE_INFINITY, (-5113.588986));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.sqrt();
      complex2.I.nthRoot(587);
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.ONE.hashCode();
      complex0.NaN.add(0.0);
      Complex complex3 = Complex.valueOf((-940.65608), 1184.22855250852);
      complex3.I.conjugate();
      complex3.hashCode();
      complex3.readResolve();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.divide(2.865065604247164E-8);
      Complex complex2 = complex0.createComplex((-1592.71), 152.76141960072);
      Complex complex3 = complex1.ONE.createComplex(0.0, (-1592.71));
      complex3.ZERO.toString();
      Complex complex4 = complex2.cos();
      complex1.I.abs();
      complex2.ONE.sin();
      complex1.NaN.acos();
      Complex complex5 = complex4.INF.sqrt1z();
      complex5.INF.pow(0.0);
      Complex complex6 = complex2.exp();
      complex2.getReal();
      complex6.multiply((-1270));
      Complex complex7 = complex1.log();
      complex7.divide(0.0);
      complex4.getField();
      Complex complex8 = complex7.add(20.0);
      Complex complex9 = complex4.multiply((-1270));
      Complex complex10 = complex8.INF.exp();
      complex10.getField();
      complex3.add(complex4);
      complex4.multiply(0.0);
      complex8.exp();
      Complex complex11 = Complex.valueOf(1567.0483834354);
      Complex complex12 = complex7.multiply(complex11);
      complex12.INF.atan();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-2163.78424498318));
      complex0.INF.asin();
      Complex complex1 = complex0.atan();
      complex0.readResolve();
      complex1.getReal();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.sinh();
      complex3.getReal();
      Complex complex4 = complex3.multiply(complex1);
      complex2.divide(complex4);
      Complex complex5 = complex3.add(2.300139523030551);
      complex5.INF.negate();
      complex3.sqrt1z();
      complex3.abs();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-229));
      complex1.ZERO.subtract(0.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.subtract(complex2);
      complex0.getImaginary();
      complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.subtract((-358.9779976440307));
      complex1.NaN.tanh();
      Complex complex3 = complex0.ONE.pow(complex1);
      complex0.isNaN();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.ONE.pow(1.0);
      Complex complex6 = complex0.subtract(0.0);
      complex5.sqrt1z();
      complex0.createComplex((-4471.79781932), (-358.9779976440307));
      Complex.valueOf((-3610.3224762));
      complex5.isNaN();
      Complex.valueOf(290.853814);
      complex3.pow((-4471.79781932));
      complex2.add(complex6);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3187.62, 3187.62);
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.subtract(complex1);
      complex2.ONE.toString();
      complex3.toString();
      Complex complex4 = complex1.NaN.multiply(3187.62);
      Complex complex5 = complex3.divide((-869.1241656673));
      complex0.sqrt();
      complex2.getArgument();
      complex2.INF.sinh();
      complex3.hashCode();
      complex2.log();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.acos();
      complex7.INF.exp();
      Complex complex8 = complex7.NaN.reciprocal();
      Complex complex9 = complex4.pow(complex2);
      complex4.getField();
      complex2.add((-869.1241656673));
      Complex.valueOf(0.0, 9.813901863427107E161);
      Complex complex10 = complex8.multiply(complex9);
      complex10.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.createComplex(0.6212903261184692, 0.6212903261184692);
      Complex complex3 = complex1.ZERO.subtract(0.6212903261184692);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.I.add(0.6212903261184692);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.NaN.multiply(280);
      complex4.getArgument();
      Complex complex8 = complex6.INF.sqrt();
      complex6.equals("j");
      Complex complex9 = complex4.INF.divide((-1.943473623641502E-9));
      complex6.equals("j");
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex10 = complex8.asin();
      Complex complex11 = complex0.pow(complex7);
      complex11.add(complex1);
      Complex complex12 = complex10.multiply(1026);
      complex12.ONE.multiply(complex0);
      Complex complex13 = Complex.valueOf((-1.4013456880651706E-8), 0.0);
      complex13.ONE.hashCode();
      Complex complex14 = complex1.multiply((-1.4013456880651706E-8));
      Complex complex15 = complex0.atan();
      Complex complex16 = complex15.multiply(complex3);
      complex16.ZERO.hashCode();
      Complex complex17 = complex2.sinh();
      complex17.I.abs();
      complex14.cos();
      complex15.pow(complex5);
      complex9.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.multiply(complex4);
      complex0.isNaN();
      Complex complex6 = complex3.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex8.ZERO.acos();
      complex3.readResolve();
      complex1.getField();
      complex6.readResolve();
      complex5.nthRoot(1006);
      complex2.multiply(8.43527683868743E-8);
      complex7.log();
      complex4.add((double) 1006);
      complex8.multiply(complex9);
      Complex complex10 = complex7.acos();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-766.125838284), (-2870.92506744366));
      Complex complex1 = complex0.pow((-1360.8463835));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.I.createComplex((-2870.92506744366), 0.0);
      complex1.NaN.cosh();
      Complex complex5 = complex2.NaN.log();
      Complex complex6 = complex3.add(0.0);
      Complex complex7 = complex6.multiply(0.0);
      Complex complex8 = complex6.subtract(complex4);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex0.multiply(complex6);
      Complex complex10 = complex9.I.pow(complex7);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.0, complex10.getReal(), 0.01);
      
      complex2.equals(complex3);
      Complex complex11 = complex7.NaN.add(complex5);
      complex6.createComplex(2.8401159516008676E283, (-1360.8463835));
      Complex complex12 = Complex.valueOf((-741.13283091));
      Complex complex13 = complex7.tanh();
      complex2.log();
      complex4.multiply((-1.0));
      complex9.exp();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(-0.0, complex9.getReal(), 0.01);
      
      double double0 = complex13.getArgument();
      assertTrue(complex13.equals((Object)complex9));
      assertEquals(-0.0, double0, 0.01);
      
      complex5.toString();
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertSame(complex2, complex11);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(1083.087983931);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }
}
