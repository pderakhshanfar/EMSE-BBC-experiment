/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:18:07 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(97.0);
      complex0.ZERO.conjugate();
      complex0.toString();
      Complex complex1 = complex0.pow(97.0);
      Complex complex2 = complex1.multiply((-2305));
      complex2.sqrt1z();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex4.ONE.pow(complex0);
      complex5.INF.toString();
      complex0.cos();
      complex0.sin();
      Complex complex6 = complex4.ONE.pow((double) (-2305));
      Complex complex7 = complex3.acos();
      Complex complex8 = complex2.subtract(2482.435);
      Complex complex9 = complex8.NaN.conjugate();
      complex4.multiply(2.449293598294706E-15);
      complex2.cosh();
      complex6.multiply(1348.794129);
      Complex complex10 = complex7.acos();
      complex10.ONE.multiply(597);
      complex9.pow(0.9935332006607458);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(complex1);
      Complex.valueOf((-0.018655669844107603));
      Complex complex3 = Complex.I;
      complex2.nthRoot(1438);
      Complex complex4 = Complex.ONE;
      Complex.valueOf((-0.018655669844107603), (-459.36652));
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.pow(20.0);
      complex6.acos();
      Complex complex7 = complex5.reciprocal();
      complex3.nthRoot(7);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(-0.0, 8.126684718779506E14);
      Complex complex1 = complex0.ZERO.divide(8.126684718779506E14);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.ZERO.reciprocal();
      Complex complex4 = complex3.INF.subtract(complex2);
      complex1.multiply(2.0);
      Complex complex5 = complex2.subtract(1.0);
      complex5.add(2.0);
      complex0.asin();
      complex2.hashCode();
      complex4.cos();
      Complex complex6 = Complex.ZERO;
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.339468680056365E-10, 9.339468680056365E-10);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.exp();
      complex1.subtract(complex0);
      complex3.pow(1.5714110564653245E-8);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.divide((-3094.5945));
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.sin();
      complex8.getField();
      complex5.acos();
      complex6.multiply(complex1);
      Complex complex9 = complex3.asin();
      complex4.nthRoot(823);
      complex7.pow(1.5714110564653245E-8);
      Complex complex10 = new Complex((-3094.5945));
      complex5.cos();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex1.multiply(3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.hashCode();
      Complex complex2 = complex1.cos();
      Complex complex3 = new Complex((-20.0), (-20.0));
      complex1.divide(complex3);
      complex3.tanh();
      Complex.valueOf((-20.0));
      complex2.tanh();
      Complex.valueOf((-20.0), (-1.3152958704043268E-8));
      Complex complex4 = Complex.valueOf(3.4600065444239947E-16);
      Complex complex5 = complex4.tan();
      complex3.pow(4573.4990917);
      complex4.acos();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ZERO;
      complex2.hashCode();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.cos();
      complex1.divide(complex4);
      Complex complex5 = Complex.I;
      complex5.tanh();
      Complex.valueOf(231.372248);
      Complex complex6 = new Complex(20.0, 231.372248);
      complex6.tanh();
      Complex.valueOf((-3776.57685577));
      complex6.tan();
      complex0.pow(2571.286);
      Complex complex7 = new Complex(572.5120109858, (-1.3152958704043268E-8));
      Complex complex8 = complex7.acos();
      complex8.I.sqrt();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.getArgument();
      complex0.I.nthRoot(5);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tanh();
      complex2.ZERO.abs();
      Complex.valueOf(0.0);
      complex0.getField();
      complex3.subtract(complex2);
      Complex complex4 = new Complex(1.5707963267948966, 5);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.ZERO.pow(complex0);
      complex6.subtract(0.0);
      complex5.multiply(2074);
      Complex complex7 = Complex.valueOf(0.0, 2663.67);
      complex7.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.339468680056365E-10, 1.315295887704359E-8);
      complex0.toString();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.reciprocal();
      complex2.INF.hashCode();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.divide(complex1);
      complex4.I.multiply(complex0);
      complex4.INF.tanh();
      Complex.valueOf(231.372248);
      complex4.tanh();
      Complex.valueOf(1.315295887704359E-8, (-1.3152958704043268E-8));
      Complex.valueOf(1.315295887704359E-8);
      complex0.pow((-1044.684));
      complex3.tan();
      Complex complex5 = complex3.pow((-1.0));
      Complex complex6 = complex5.acos();
      complex6.divide((-1044.684));
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-4.04226739708981E-9), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex0.sinh();
      complex0.tan();
      complex2.nthRoot(1831);
      Complex.valueOf(0.231700599193573);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(Double.NaN, 33.3000514646695);
      complex0.multiply(complex0);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(complex1);
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.subtract(Double.NaN);
      complex1.divide(1958.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-3.459885432869825E182));
      Complex complex2 = Complex.valueOf((-7.164884605413269E-254), (-3.459885432869825E182));
      complex0.getArgument();
      complex2.pow(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.tan();
      complex5.toString();
      Complex complex6 = complex4.divide(complex2);
      complex6.tanh();
      complex3.add((-7.164884605413269E-254));
      Complex complex7 = complex3.multiply((-7.164884605413269E-254));
      Complex complex8 = complex7.tan();
      Complex complex9 = complex4.sin();
      complex9.add(complex6);
      complex3.subtract(2.0);
      complex5.atan();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex((-2182.31612), (-2182.31612));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.divide(complex1);
      complex4.nthRoot(754);
      complex3.divide(602.6544985);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-613.520890775), (-2182.4436));
      complex0.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex1.ONE.cos();
      complex2.I.tan();
      Complex complex3 = complex2.ZERO.exp();
      complex2.INF.readResolve();
      Complex complex4 = complex2.NaN.divide(1221.39672);
      complex1.INF.readResolve();
      complex4.INF.toString();
      Complex complex5 = complex2.subtract(complex0);
      complex4.pow(complex3);
      complex1.nthRoot(137);
      complex0.cos();
      complex5.getField();
      complex1.pow((-2182.4436));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = (-3020.9034);
      Complex complex0 = Complex.valueOf((-3020.9034), 2.147638465376883E-257);
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      complex0.divide(Double.NaN);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.ONE;
      complex3.ZERO.multiply(complex1);
      complex0.isNaN();
      Complex complex4 = complex2.ZERO.divide(Double.POSITIVE_INFINITY);
      complex4.INF.divide(Double.POSITIVE_INFINITY);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.multiply((-1128));
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.valueOf((-2510.0728278427655), 2.0);
      Complex complex2 = complex0.multiply(complex1);
      double double0 = 1.5871834690983633E-7;
      complex2.pow(1.5871834690983633E-7);
      complex2.sqrt();
      complex0.acos();
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.INF;
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.conjugate();
      complex2.ONE.toString();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.acos();
      complex0.subtract(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(2090.254, 2090.254);
      complex0.add(Double.NaN);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-3349.337));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.pow(2.6683101654052734);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex4.asin();
      Complex complex7 = Complex.INF;
      complex5.add(complex3);
      Complex.valueOf((-461.0), (-1471.3869151404963));
      complex4.equals(complex6);
      complex2.getField();
      Complex complex8 = new Complex((-1471.3869151404963));
      complex8.subtract(complex3);
      complex7.negate();
      complex4.multiply(2074);
      Complex.valueOf(3321.03514, (-3349.337));
      complex0.reciprocal();
      complex1.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.getArgument();
      complex0.I.nthRoot(5);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tanh();
      complex2.ZERO.abs();
      Complex.valueOf(0.0);
      complex0.getField();
      complex3.subtract(complex2);
      Complex complex4 = new Complex(1.5707963267948966, 5);
      Complex complex5 = Complex.ZERO;
      complex5.ZERO.pow(complex0);
      complex5.multiply(2074);
      Complex.valueOf(0.0, 2663.67);
      complex5.reciprocal();
      try { 
        complex4.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(2.1288872215266507E-8, (-1559.0));
      Complex complex1 = complex0.tan();
      complex1.divide(complex0);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-13.81144843));
      Complex complex1 = complex0.multiply((-13.81144843));
      complex0.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex1.ZERO.sqrt();
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.NaN;
      complex1.INF.multiply(complex6);
      Complex complex7 = complex1.sin();
      complex7.cos();
      Complex complex8 = complex2.acos();
      complex8.NaN.cosh();
      complex1.hashCode();
      Complex complex9 = complex0.pow(complex2);
      Complex complex10 = complex1.pow(0.5381877206526199);
      complex10.ONE.multiply(complex2);
      Complex complex11 = complex5.cos();
      Complex complex12 = complex11.negate();
      complex8.I.createComplex(0.0, 0.5381877206526199);
      complex10.readResolve();
      complex9.I.nthRoot(1);
      Complex complex13 = complex2.tan();
      complex3.ONE.sin();
      complex12.divide(complex2);
      complex13.getImaginary();
      complex4.getArgument();
      complex0.asin();
      complex13.pow(0.0);
      Complex complex14 = new Complex(Double.NaN);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.ONE;
      complex0.isNaN();
      complex2.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.conjugate();
      complex4.ONE.acos();
      complex0.divide(complex2);
      complex1.getReal();
      Complex.valueOf(Double.NaN);
      complex0.conjugate();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.getArgument();
      complex0.I.nthRoot(5);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tanh();
      complex2.ZERO.abs();
      complex3.ONE.sin();
      Complex complex4 = complex2.subtract(9.442671392695732E-9);
      complex1.nthRoot(5);
      Complex complex5 = Complex.valueOf(1269.4761629396);
      complex5.ONE.readResolve();
      Complex complex6 = Complex.valueOf(9.442671392695732E-9, 20.0);
      complex6.ONE.pow(complex1);
      complex3.sinh();
      Complex complex7 = new Complex(0.0, 20.0);
      complex7.tan();
      Complex complex8 = Complex.ZERO;
      complex8.createComplex((-1140.4), 20.0);
      complex4.multiply(complex5);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.divide(complex1);
      complex1.abs();
      Complex complex3 = complex2.divide(0.7615941559557649);
      Complex complex4 = complex0.asin();
      complex2.add(0.7615941559557649);
      Complex complex5 = complex4.subtract(complex2);
      complex5.cosh();
      complex3.add(0.7615941559557649);
      Complex complex6 = complex3.log();
      complex1.sinh();
      Complex complex7 = complex2.sqrt1z();
      complex3.divide(complex2);
      complex1.add(complex0);
      complex5.readResolve();
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.sinh();
      complex1.readResolve();
      complex1.getField();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.exp();
      complex1.exp();
      Complex complex5 = Complex.valueOf(0.0, 1.7977178878541792E-7);
      complex5.cos();
      complex2.getReal();
      complex1.getField();
      Complex complex6 = complex5.subtract(1.7977178878541792E-7);
      complex4.hashCode();
      Complex complex7 = Complex.valueOf((-2591.7984471), Double.NaN);
      complex7.divide(Double.NaN);
      complex6.nthRoot(4493);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.5968599319458008, 0.5968599319458008);
      Complex complex1 = complex0.add(0.5968599319458008);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.ONE.createComplex((-2.1092372471088425E-8), 0.3594330038102771);
      Complex complex4 = complex3.NaN.divide(0.3594330038102771);
      complex3.ONE.nthRoot(2234);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.ZERO.multiply((-2.1092372471088425E-8));
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex5.NaN.acos();
      complex1.negate();
      complex1.subtract(complex3);
      Complex complex9 = complex3.divide(complex8);
      Complex complex10 = Complex.valueOf(0.3594330038102771, 1844.33739765535);
      complex3.multiply(complex10);
      complex5.ZERO.sqrt();
      complex1.cos();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex9.subtract((double) 2234);
      Complex complex13 = complex12.I.tan();
      Complex complex14 = complex5.tanh();
      complex7.cos();
      complex11.subtract((-2.1092372471088425E-8));
      complex14.multiply(complex13);
      complex4.cos();
      complex4.acos();
      complex5.divide((double) 2234);
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(810.8914450294);
      Complex complex1 = Complex.valueOf(810.8914450294);
      Complex complex2 = complex0.sqrt1z();
      complex0.ONE.acos();
      Complex complex3 = complex2.sinh();
      complex2.toString();
      Complex complex4 = complex0.exp();
      complex4.NaN.getField();
      Complex complex5 = complex3.add((-923.0));
      Complex complex6 = complex3.multiply(1.5707963267948966);
      Complex complex7 = complex0.subtract(complex6);
      complex2.multiply(complex4);
      complex0.pow(complex1);
      Complex complex8 = Complex.I;
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 0.7237368419565788);
      complex0.equals(complex9);
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.add(complex4);
      complex6.pow(Double.POSITIVE_INFINITY);
      complex8.createComplex(1.8395252217743006E-8, Double.POSITIVE_INFINITY);
      complex9.sqrt1z();
      Complex complex12 = Complex.valueOf(1.8395252217743006E-8);
      complex12.tanh();
      complex0.log();
      complex11.multiply(155.7360315836);
      complex5.exp();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.I;
      complex2.multiply(complex0);
      Complex complex3 = Complex.valueOf(0.35050876190365393, 0.35050876190365393);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex1.cosh();
      complex0.hashCode();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex5.pow(complex8);
      complex8.pow(1943.883698334666);
      complex4.multiply(complex3);
      complex2.getReal();
      complex4.cos();
      Complex complex10 = complex0.divide(0.0);
      complex5.negate();
      complex2.getField();
      complex10.readResolve();
      Complex complex11 = Complex.INF;
      complex11.nthRoot(19);
      complex2.tan();
      Complex complex12 = complex6.sin();
      Complex complex13 = complex7.divide(complex2);
      complex8.getImaginary();
      complex9.getArgument();
      complex0.asin();
      complex4.pow(1.8682458400726318);
      complex4.reciprocal();
      complex13.cosh();
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.sinh();
      complex1.readResolve();
      complex1.getField();
      Complex complex3 = complex0.exp();
      complex3.exp();
      complex1.exp();
      Complex complex4 = Complex.valueOf(0.0, 1.7977178878541792E-7);
      Complex complex5 = complex4.cos();
      complex2.getReal();
      complex1.getField();
      Complex complex6 = Complex.valueOf(Double.NaN, 150852.31052681216);
      complex6.subtract(Double.NaN);
      complex5.getReal();
      Complex complex7 = complex3.divide(complex5);
      try { 
        complex7.nthRoot((-1531));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,531
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-2342.8007451637113), 281.8717);
      Complex complex1 = complex0.divide((-343.533409613));
      Complex complex2 = complex0.ONE.sqrt();
      complex1.I.readResolve();
      complex2.subtract(complex1);
      complex2.ONE.divide(complex0);
      complex1.atan();
      complex1.NaN.nthRoot(2850);
      Complex complex3 = complex0.sin();
      complex1.sinh();
      complex3.exp();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(2035.8);
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.acos();
      complex3.sinh();
      Complex complex4 = new Complex((-1315.829423729857));
      complex4.toString();
      Complex complex5 = complex3.exp();
      complex3.getField();
      complex3.readResolve();
      complex5.getField();
      complex0.exp();
      complex1.exp();
      Complex complex6 = complex4.cos();
      complex3.getReal();
      complex6.getField();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.NaN;
      complex9.getReal();
      complex1.divide(complex8);
      complex3.nthRoot(1269);
      complex4.readResolve();
      Complex.valueOf(396.429069476444);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(810.8914450294);
      Complex complex1 = Complex.valueOf(810.8914450294);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex2.sinh();
      complex2.toString();
      Complex complex5 = complex0.exp();
      complex5.NaN.getField();
      complex4.add((-923.0));
      Complex complex6 = complex4.multiply(1.5707963267948966);
      Complex complex7 = complex0.subtract(complex6);
      complex2.multiply(complex5);
      Complex complex8 = complex0.pow(complex2);
      Complex complex9 = Complex.I;
      complex9.equals(complex3);
      complex8.add(complex3);
      complex5.getField();
      complex1.readResolve();
      complex5.nthRoot(1);
      Complex complex10 = complex8.tan();
      Complex complex11 = complex0.add(complex5);
      complex7.sin();
      complex5.divide(complex4);
      complex6.getImaginary();
      complex11.getArgument();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex12.asin();
      complex13.pow(Double.NaN);
      complex10.reciprocal();
      Complex complex14 = new Complex(1);
      complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2774.0));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.sqrt();
      complex2.nthRoot(587);
      Object object0 = new Object();
      complex3.equals((Object) null);
      complex2.hashCode();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = Complex.valueOf((-1.4674011002723395), (-1.4674011002723395));
      Complex complex6 = complex5.reciprocal();
      complex4.hashCode();
      complex4.divide((-1.4674011002723395));
      Complex complex7 = Complex.INF;
      complex7.toString();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.acos();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.ONE;
      complex2.multiply(complex3);
      complex0.isNaN();
      complex0.divide(0.0);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex4.acos();
      complex0.readResolve();
      complex5.getField();
      Complex complex8 = Complex.NaN;
      complex8.readResolve();
      complex0.nthRoot(1006);
      complex6.multiply(1006);
      complex7.nthRoot(1006);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.nthRoot(2643);
      Object object0 = new Object();
      complex1.equals(complex0);
      complex0.hashCode();
      Complex complex2 = complex0.add((-1214.8166604));
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex0.reciprocal();
      complex4.I.toString();
      complex1.hashCode();
      Complex complex5 = Complex.ZERO;
      complex5.divide(54.94217591400408);
      // Undeclared exception!
      complex3.nthRoot(2643);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1737.72);
      Complex complex1 = new Complex(530.49596087599, 1737.72);
      complex1.ZERO.cos();
      Complex complex2 = complex1.pow(530.49596087599);
      complex2.exp();
      complex2.NaN.asin();
      Complex complex3 = complex1.NaN.divide(1737.72);
      Complex complex4 = Complex.valueOf(530.49596087599);
      complex3.ONE.log();
      complex4.ZERO.toString();
      complex0.pow(complex1);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.tanh();
      complex6.acos();
      complex4.ZERO.cos();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.NaN.sinh();
      complex5.tanh();
      complex8.add(complex7);
      Object object0 = new Object();
      complex5.equals(object0);
      complex4.sinh();
      complex5.nthRoot(559);
      complex3.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-13.81144843));
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.multiply((-806));
      complex1.getField();
      Complex complex3 = complex2.add(782.96353988319);
      Complex complex4 = Complex.I;
      complex0.tan();
      Complex complex5 = complex4.multiply(complex3);
      complex2.reciprocal();
      complex5.hashCode();
      complex0.divide((-2915.031379978));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.tan();
      complex0.getField();
      Complex complex1 = complex0.add((double) (-2776));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.tan();
      complex0.INF.divide((double) (-2776));
      complex3.INF.sinh();
      complex1.multiply(complex0);
      complex1.reciprocal();
      complex1.hashCode();
      complex0.divide(1.1413677466646359E297);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(810.8914450294);
      Complex complex1 = Complex.valueOf(810.8914450294);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.ONE.acos();
      complex0.toString();
      complex0.exp();
      complex0.getField();
      Complex complex4 = complex2.add((-923.0));
      complex0.multiply(1.5707963267948966);
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = new Complex((-7.737252533211342E-9));
      Complex complex7 = complex0.multiply(complex6);
      complex1.pow(complex7);
      Complex complex8 = Complex.I;
      complex5.equals("");
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, 250.0);
      complex9.pow((-923.0));
      Complex complex10 = complex1.createComplex(2.0, 657543.9356218684);
      complex1.sqrt1z();
      Complex.valueOf(1.5707963267948966);
      complex2.tanh();
      Complex complex11 = Complex.valueOf((-923.0));
      complex11.log();
      Complex complex12 = complex3.multiply((-7.737252533211342E-9));
      complex12.hashCode();
      complex10.exp();
      complex1.toString();
      Complex.valueOf(2.0, 657543.9356218684);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.multiply(complex0);
      complex1.isNaN();
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.conjugate();
      complex4.acos();
      Complex complex5 = complex1.acos();
      complex2.readResolve();
      complex5.getField();
      complex4.readResolve();
      complex3.nthRoot(9);
      complex0.multiply((double) 9);
      complex3.log();
      Complex complex6 = complex5.add((-6.883499809714189E297));
      complex6.multiply(complex3);
      complex6.acos();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.nthRoot(2643);
      Object object0 = new Object();
      complex1.equals(complex0);
      complex0.hashCode();
      Complex complex2 = complex0.add((-1214.8166604));
      complex2.multiply(complex0);
      Complex complex3 = complex0.reciprocal();
      complex3.I.toString();
      complex1.hashCode();
      Complex complex4 = Complex.ZERO;
      complex4.divide(54.94217591400408);
      complex4.pow((-1214.8166604));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.subtract(complex1);
      complex4.INF.negate();
      complex3.NaN.divide(183.6864);
      complex1.hashCode();
      complex1.INF.divide(0.0);
      complex0.I.pow((-20.0));
      complex1.INF.atan();
      Complex complex5 = complex1.sin();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.INF.sqrt1z();
      complex7.I.getField();
      Complex complex8 = complex5.ONE.divide(complex6);
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = Complex.valueOf(0.0, (-817.5915204357));
      complex1.hashCode();
      Complex complex11 = complex1.log();
      complex11.NaN.sqrt();
      complex5.I.subtract(complex10);
      complex5.isInfinite();
      Complex complex12 = complex2.add(complex8);
      complex7.readResolve();
      Complex complex13 = complex12.divide((-20.0));
      Complex complex14 = complex9.asin();
      complex5.readResolve();
      complex0.getReal();
      complex8.cosh();
      complex14.createComplex(Double.POSITIVE_INFINITY, (-5113.588986));
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.tan();
      complex2.NaN.abs();
      Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = Complex.valueOf(250.0);
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex5.NaN.multiply(250.0);
      complex6.NaN.sqrt();
      Complex complex7 = complex6.pow(complex3);
      complex7.ZERO.nthRoot(4049);
      complex1.NaN.hashCode();
      Complex complex8 = complex0.cosh();
      complex8.getField();
      complex0.sqrt1z();
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex0.multiply(2515);
      Complex complex11 = complex9.createComplex(477.411871724529, 1847.005436626);
      complex0.multiply(2515);
      Complex complex12 = complex10.sqrt1z();
      complex9.conjugate();
      complex11.subtract(complex5);
      complex1.acos();
      Complex.valueOf(4320.4403, (double) 2515);
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.INF.exp();
      Complex complex2 = complex1.add(2.0);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = Complex.valueOf((-1799.43226), (-1799.43226));
      complex1.hashCode();
      Complex complex4 = complex3.log();
      Complex complex5 = complex2.sqrt();
      complex5.INF.atan();
      complex5.ZERO.createComplex((-1315089.8712437367), (-1315089.8712437367));
      Complex complex6 = complex3.subtract(complex2);
      complex6.isInfinite();
      Complex complex7 = complex4.add(complex1);
      complex3.atan();
      complex4.readResolve();
      Complex complex8 = complex6.divide(587.0);
      Complex complex9 = complex7.asin();
      complex1.readResolve();
      complex9.getReal();
      complex9.cosh();
      complex8.createComplex(6.283185307179586, (-652.603411));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.177739474561431E-7);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt();
      complex2.nthRoot(1290);
      Object object0 = new Object();
      complex2.equals(complex0);
      complex1.hashCode();
      complex0.add((double) 587);
      Complex.valueOf(1908976.426643734, 0.9988899977970431);
      Complex complex3 = complex0.conjugate();
      complex3.hashCode();
      complex2.readResolve();
      Complex complex4 = new Complex(552.2677, 0.7080734182735711);
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.pow((-1315089.8712437367));
      Complex complex2 = complex1.sinh();
      complex1.asin();
      Complex complex3 = Complex.valueOf((-1315089.8712437367), 563.7737);
      Complex complex4 = complex3.tan();
      complex1.divide(complex4);
      complex0.getReal();
      complex0.toString();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.multiply((-806));
      complex0.NaN.cos();
      complex0.getField();
      complex1.ZERO.add(complex2);
      complex0.add(0.0);
      Complex complex3 = Complex.I;
      complex3.ZERO.tan();
      Complex complex4 = complex0.multiply(complex3);
      complex4.ONE.reciprocal();
      complex1.hashCode();
      complex1.divide(1.1413677466646359E297);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(932.729624394);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.acos();
      Complex complex3 = new Complex(810.8914450294, 810.8914450294);
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.valueOf(2870.92506744366, 674.86559404);
      complex5.subtract((-542.240199813));
      Complex complex6 = Complex.ONE;
      complex5.multiply(complex1);
      complex0.isNaN();
      Complex complex7 = complex2.divide(Double.POSITIVE_INFINITY);
      complex6.conjugate();
      complex1.acos();
      Complex complex8 = complex7.acos();
      complex7.readResolve();
      complex2.getField();
      complex4.readResolve();
      complex6.nthRoot(1006);
      Complex complex9 = complex7.multiply((-2878.53085384964));
      Complex complex10 = complex8.log();
      complex10.I.multiply(1006);
      complex4.add(4.560067256086347E-9);
      complex0.multiply(complex9);
      Complex complex11 = complex5.acos();
      complex5.cosh();
      complex11.multiply(1006);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.INF.log();
      complex2.add((-2281.68));
      complex1.isNaN();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.divide((-2281.68));
      Complex complex5 = Complex.ONE;
      complex5.tanh();
      complex2.hashCode();
      complex2.multiply((-1271.31497));
      complex2.isInfinite();
      complex0.exp();
      complex1.getField();
      Complex complex6 = complex3.cosh();
      complex6.sqrt1z();
      complex0.sqrt();
      complex4.sqrt();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(810.8914450294);
      Complex.valueOf(810.8914450294);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.sinh();
      complex1.toString();
      Complex complex4 = complex0.exp();
      complex4.NaN.getField();
      complex3.add((-923.0));
      Complex complex5 = complex3.multiply(1.5707963267948966);
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex1.multiply(complex4);
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = Complex.I;
      complex9.equals(complex2);
      complex8.add(complex2);
      complex8.ZERO.pow(20.0);
      Complex complex10 = complex6.createComplex(2347.0, 2347.0);
      complex3.ZERO.sqrt1z();
      Complex.valueOf((-5.198295198128238E28));
      complex8.tanh();
      complex4.log();
      Complex complex11 = complex7.multiply(2347.0);
      complex11.exp();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.negate();
      complex0.pow(4.250734424415339E-289);
      Complex complex2 = complex0.ZERO.cos();
      complex0.INF.abs();
      Complex complex3 = complex0.pow((-2281.68));
      Complex complex4 = complex2.divide((-2281.68));
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex6.exp();
      complex7.getField();
      complex6.readResolve();
      complex7.getField();
      complex3.exp();
      complex0.exp();
      Complex complex8 = Complex.valueOf(2.1858142063550155E-134, 438.0);
      Complex complex9 = complex8.exp();
      Complex complex10 = complex2.cos();
      complex5.INF.add(2.1858142063550155E-134);
      complex10.getReal();
      Complex complex11 = Complex.valueOf((-1096.4191), 0.5403023058681398);
      complex11.getField();
      complex11.subtract((-2.2929764629585683E126));
      complex5.pow((-476.0));
      complex3.getReal();
      complex9.divide(complex6);
      complex1.nthRoot(957);
      complex4.readResolve();
      Complex.valueOf(396.429069476444);
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.multiply((-806));
      complex1.getField();
      Complex complex3 = complex0.add((-20.0));
      Complex complex4 = complex3.pow(complex2);
      complex2.equals((Object) null);
      Complex complex5 = Complex.valueOf((double) (-806));
      complex5.add(complex1);
      Complex complex6 = complex3.createComplex((-283.43559699056), (-543.09509));
      Complex.valueOf(3860.0);
      Complex complex7 = new Complex(2.8401159516008676E283, (-1591.7751594277145));
      Complex complex8 = complex7.tanh();
      complex8.log();
      complex6.multiply((-184.0166307217554));
      complex4.exp();
      complex5.getArgument();
      Complex complex9 = Complex.I;
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.subtract(complex1);
      Complex complex2 = Complex.valueOf((-643.33938054), 1347.29475213);
      complex2.INF.hashCode();
      Complex complex3 = complex2.NaN.cos();
      complex3.NaN.log();
      Complex complex4 = complex0.atan();
      complex4.I.tan();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.reciprocal();
      complex3.cos();
      Complex complex4 = complex1.ONE.sqrt();
      complex4.NaN.getArgument();
      Complex.valueOf(0.0, (-1574.76593496702));
      Complex complex5 = complex3.INF.log();
      int int0 = 0;
      complex2.ONE.pow(complex5);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.NaN.atan();
      Complex complex2 = complex0.multiply((-923));
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex1.subtract((-1215.47));
      complex3.conjugate();
      Complex complex5 = Complex.valueOf((double) (-923));
      Complex complex6 = complex1.subtract(complex3);
      Complex complex7 = complex3.negate();
      Complex.valueOf((-1215.47));
      Complex complex8 = complex3.pow(complex4);
      Complex complex9 = complex0.exp();
      complex9.INF.atan();
      complex9.ONE.asin();
      complex6.hashCode();
      complex5.I.getArgument();
      Complex complex10 = complex5.exp();
      complex10.getArgument();
      complex0.ONE.hashCode();
      complex3.toString();
      complex7.multiply((-923));
      complex7.log();
      Complex complex11 = Complex.valueOf(1.5707963267948966, (-1215.47));
      complex6.readResolve();
      complex11.reciprocal();
      complex8.exp();
      complex10.cos();
      complex4.conjugate();
      complex4.pow(complex1);
      complex0.tanh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(542.34007);
      complex0.ZERO.conjugate();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.createComplex(542.34007, 542.34007);
      complex2.cosh();
      Complex complex3 = complex1.I.cos();
      complex3.multiply(1263);
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex0.divide(complex1);
      complex6.NaN.reciprocal();
      Complex.valueOf(0.0);
      complex1.ZERO.nthRoot(1263);
      complex5.equals(complex6);
      complex7.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(2477.461201);
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sin();
      complex1.NaN.abs();
      Complex complex3 = complex2.I.tanh();
      complex3.ONE.nthRoot(1);
      complex0.I.divide(2477.461201);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex2.pow(complex5);
      complex5.ONE.cos();
      Complex complex7 = complex1.NaN.asin();
      complex4.multiply(complex6);
      Complex complex8 = complex2.multiply(complex0);
      Complex complex9 = complex6.tanh();
      complex0.getField();
      Complex complex10 = complex7.log();
      complex1.atan();
      complex2.multiply((-1517.35071));
      complex10.toString();
      Complex complex11 = complex7.add(2477.461201);
      complex8.multiply(0.0);
      complex9.nthRoot(1);
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.atan();
      complex2.I.sin();
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.pow(complex0);
      complex2.I.negate();
      complex0.getImaginary();
      complex0.conjugate();
      Complex complex3 = complex0.divide((-2094.5));
      complex3.asin();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-2082.9592));
      complex1.NaN.abs();
      complex1.INF.readResolve();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.ZERO.divide(complex2);
      complex3.NaN.sinh();
      Complex complex4 = complex0.ZERO.exp();
      complex4.I.multiply(431);
      complex2.I.pow(0.0);
      complex0.INF.sqrt();
      Complex complex5 = complex2.I.divide(0.0);
      Complex complex6 = complex0.createComplex(2283.0537995207, 2283.0537995207);
      complex6.ZERO.subtract(complex5);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex1.NaN.conjugate();
      complex1.readResolve();
      Complex complex6 = complex0.ZERO.sin();
      complex5.INF.log();
      Object object0 = complex3.readResolve();
      complex5.equals(object0);
      Complex complex7 = complex3.ZERO.add((-4110.81));
      complex7.NaN.toString();
      Complex.valueOf(3025.985247577953);
      Complex complex8 = complex3.ONE.exp();
      complex1.log();
      Complex complex9 = complex7.I.exp();
      complex6.isNaN();
      Complex complex10 = complex4.negate();
      complex10.ZERO.multiply(complex9);
      complex4.getImaginary();
      Complex complex11 = complex8.add((-1.0));
      complex11.cosh();
      Complex complex12 = complex1.multiply((-1.0));
      complex12.INF.sin();
      complex6.isInfinite();
      complex2.divide(complex7);
      Complex.valueOf(0.0, 3025.985247577953);
      Complex complex13 = complex8.multiply(60);
      complex13.add((-2860.8937809773506));
      complex6.nthRoot(2184);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-990.5), (-990.5));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.I.readResolve();
      Complex complex3 = complex2.exp();
      complex0.getImaginary();
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.valueOf((-990.5));
      complex3.isNaN();
      Complex complex6 = complex4.asin();
      complex6.NaN.sinh();
      complex6.ONE.toString();
      complex2.equals(complex3);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.ONE.multiply(1);
      Complex complex9 = complex7.NaN.sinh();
      complex4.subtract(complex7);
      complex7.multiply(complex4);
      Complex complex10 = complex0.divide(complex1);
      complex9.tan();
      complex10.tan();
      complex5.multiply(221);
      complex8.nthRoot(1);
      Complex.valueOf((double) 1, (-6248.732));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.negate();
      complex0.pow(4.250734424415339E-289);
      Complex complex2 = complex0.ZERO.cos();
      complex0.INF.abs();
      Complex complex3 = complex0.pow((-2281.68));
      Complex complex4 = complex2.divide((-2281.68));
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.INF.tan();
      complex5.NaN.log();
      Complex complex7 = complex6.ZERO.divide(complex2);
      Complex complex8 = complex0.ZERO.reciprocal();
      complex8.pow(complex3);
      Complex complex9 = complex3.exp();
      complex9.INF.toString();
      Complex complex10 = complex1.sin();
      complex10.pow((-2281.68));
      complex10.add(complex5);
      Complex complex11 = complex0.log();
      complex5.NaN.sqrt1z();
      Complex complex12 = complex5.NaN.log();
      complex12.NaN.negate();
      complex10.getReal();
      complex11.ONE.nthRoot(907);
      complex7.toString();
      Complex complex13 = complex6.sinh();
      complex9.subtract((-2281.68));
      complex13.asin();
      complex11.readResolve();
      Complex.valueOf(-0.0);
      Complex complex14 = complex2.subtract((-2836.7900071997));
      complex14.I.multiply((-2836.7900071997));
      complex1.abs();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-13.81144843));
      Complex complex1 = complex0.multiply(0.0);
      complex0.cosh();
      Complex complex2 = complex0.negate();
      complex2.I.log();
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.I;
      complex1.INF.multiply(complex5);
      Complex complex6 = complex1.sin();
      complex6.cos();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.NaN.cosh();
      complex1.hashCode();
      Complex complex9 = complex0.pow(complex2);
      Complex complex10 = complex1.pow(0.0);
      complex10.ONE.multiply(complex2);
      complex9.getReal();
      Complex complex11 = complex4.cos();
      Complex complex12 = complex9.divide(4.647715736994396E15);
      Complex complex13 = complex11.negate();
      complex7.I.createComplex(0.0, 0.0);
      complex12.ONE.getField();
      complex10.readResolve();
      complex9.I.nthRoot(1);
      Complex complex14 = complex2.tan();
      Complex complex15 = complex0.add(complex12);
      complex15.ONE.sin();
      complex13.divide(complex2);
      complex14.getImaginary();
      complex3.getArgument();
      complex0.asin();
      complex14.pow(0.0);
      complex8.reciprocal();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.divide(0.0);
      complex0.getField();
      Complex complex2 = complex0.ZERO.sqrt1z();
      complex2.INF.reciprocal();
      complex2.NaN.abs();
      complex1.NaN.cos();
      complex0.INF.toString();
      Complex complex3 = complex2.NaN.add(0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex4 = complex0.divide((-20.0));
      Complex complex5 = complex2.tan();
      complex5.ZERO.tan();
      Complex complex6 = complex3.tan();
      complex6.I.conjugate();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.I.acos();
      complex6.subtract(complex8);
      Complex.valueOf((-1.0), 0.0);
      Complex complex9 = complex6.multiply(complex1);
      complex1.multiply(complex4);
      complex7.cosh();
      complex1.sin();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-6.971366338144781E56), (-3.535214171178576E-8));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.I.createComplex((-1072.88), 0.0);
      complex2.NaN.subtract((-1486.392));
      Complex complex3 = Complex.valueOf((-1486.392), 2312.3771);
      complex2.ONE.divide(complex3);
      complex2.ONE.getArgument();
      complex1.ZERO.cosh();
      Complex complex4 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      complex4.exp();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.NaN.multiply(complex5);
      complex6.ONE.getArgument();
      complex5.readResolve();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.NaN.cosh();
      complex7.ZERO.sqrt1z();
      complex7.I.atan();
      Complex complex9 = complex5.sqrt1z();
      complex9.ONE.sqrt1z();
      Complex complex10 = complex9.divide(complex1);
      complex5.cos();
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex11.divide(complex8);
      Complex complex14 = complex0.sinh();
      Complex complex15 = complex8.INF.sqrt1z();
      complex3.conjugate();
      complex14.getReal();
      complex13.toString();
      complex4.reciprocal();
      complex15.subtract(complex12);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1024.96143067);
      Complex complex1 = Complex.INF;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(900.8989279349);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = Complex.valueOf(900.8989279349, 0.0);
      Complex complex4 = complex0.exp();
      complex2.asin();
      complex4.NaN.negate();
      complex4.ZERO.hashCode();
      Complex complex5 = Complex.valueOf(900.8989279349, 0.0);
      complex5.INF.log();
      complex2.NaN.add((-5666.88974527));
      complex5.isNaN();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex6.divide(2.403806217004454E138);
      complex5.I.tanh();
      complex7.I.hashCode();
      complex7.NaN.multiply(125.61409987);
      complex2.isInfinite();
      Complex complex8 = complex3.exp();
      complex8.INF.getField();
      complex5.cosh();
      complex3.sqrt1z();
      Complex complex9 = complex0.sqrt();
      complex9.sqrt();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.pow(0.0);
      complex1.sinh();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.divide(complex3);
      complex3.getReal();
      complex3.INF.toString();
      Complex.valueOf(0.0);
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2416.096097);
      Complex complex1 = complex0.log();
      complex0.NaN.exp();
      complex1.cosh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.divide(complex1);
      complex3.ZERO.createComplex((-8.472642266772353E218), (-791.0));
      complex3.NaN.readResolve();
      complex2.getImaginary();
      complex2.nthRoot(37);
      complex0.ONE.subtract(1357.8758);
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf((double) 37, 0.0);
      complex5.I.asin();
      Complex complex6 = complex5.add(complex4);
      Complex.valueOf((double) 37);
      complex2.getImaginary();
      Complex complex7 = complex5.subtract(complex2);
      Complex complex8 = complex7.NaN.add(1357.8758);
      complex8.I.exp();
      complex6.acos();
      complex0.abs();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.conjugate();
      Complex complex1 = complex0.INF.log();
      complex0.ZERO.divide(complex1);
      complex0.add((-3018.143057179869));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.sin();
      complex0.tan();
      Complex complex3 = complex2.ZERO.subtract(0.0);
      complex3.ZERO.tanh();
      complex0.divide(0.0);
      complex1.ONE.exp();
      complex2.divide(0.0);
      Complex complex4 = complex2.sinh();
      complex4.ONE.multiply(1);
      complex4.I.tan();
      complex2.pow(complex4);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-2050.7), (-2050.7));
      Complex complex1 = complex0.add((-2050.7));
      Complex complex2 = complex0.sin();
      complex1.ZERO.multiply((-2050.7));
      complex2.ZERO.divide(complex1);
      try { 
        complex2.NaN.nthRoot((-1086));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,086
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-950.921098281), (-973.0683048));
      Complex complex1 = Complex.ONE;
      complex1.I.asin();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.negate();
      complex4.ONE.negate();
      complex3.ONE.createComplex((-950.921098281), (-3.996962588736431E-8));
      complex3.NaN.tanh();
      Complex complex5 = complex4.ONE.sqrt();
      complex4.NaN.getArgument();
      complex1.readResolve();
      complex3.isInfinite();
      complex5.isInfinite();
      Complex complex6 = complex1.multiply(2575);
      complex6.NaN.asin();
      complex2.getField();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(810.8914450294);
      Complex.valueOf(810.8914450294);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex1.sinh();
      complex1.toString();
      Complex complex4 = complex0.exp();
      complex4.NaN.getField();
      complex1.readResolve();
      complex2.ZERO.getField();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.ZERO.exp();
      complex7.ONE.cos();
      complex2.getReal();
      complex5.ZERO.getField();
      complex4.subtract(0.0);
      complex5.getReal();
      complex0.divide(complex3);
      complex0.nthRoot(372);
      complex6.readResolve();
      Complex.valueOf(396.429069476444);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex1.INF.multiply((-806));
      complex1.getField();
      complex0.add(0.0);
      Complex complex2 = Complex.I;
      complex2.ZERO.tan();
      Complex complex3 = complex0.multiply(complex2);
      complex3.ONE.reciprocal();
      complex1.hashCode();
      complex1.divide(1.1413677466646359E297);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-20.0));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.subtract(complex1);
      complex4.INF.negate();
      complex3.NaN.divide(183.6864);
      complex1.hashCode();
      complex1.INF.divide(0.0);
      complex0.I.pow((-20.0));
      complex1.INF.atan();
      Complex complex5 = complex1.sin();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.INF.sqrt1z();
      complex7.I.getField();
      Complex complex8 = complex5.ONE.divide(complex6);
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = Complex.valueOf(0.0, (-817.5915204357));
      complex1.hashCode();
      Complex complex11 = complex1.log();
      complex11.NaN.sqrt();
      complex5.I.subtract(complex10);
      complex5.isInfinite();
      Complex complex12 = complex2.add(complex8);
      complex7.readResolve();
      complex12.divide((-20.0));
      Complex complex13 = complex9.asin();
      complex5.readResolve();
      complex0.getReal();
      complex8.cosh();
      complex13.createComplex(Double.POSITIVE_INFINITY, (-5113.588986));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.sqrt();
      complex2.I.nthRoot(587);
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.ONE.hashCode();
      complex0.NaN.add(0.0);
      Complex complex3 = Complex.valueOf((-940.65608), 1184.22855250852);
      complex3.I.conjugate();
      complex3.hashCode();
      complex3.readResolve();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.divide(2.865065604247164E-8);
      Complex complex2 = complex0.createComplex((-1592.71), 152.76141960072);
      Complex complex3 = complex1.ONE.createComplex(0.0, (-1592.71));
      complex3.ZERO.toString();
      Complex complex4 = complex2.cos();
      complex1.I.abs();
      complex2.ONE.sin();
      complex1.NaN.acos();
      Complex complex5 = complex4.INF.sqrt1z();
      complex5.INF.pow(0.0);
      Complex complex6 = complex2.exp();
      complex2.getReal();
      complex6.multiply((-1270));
      Complex complex7 = complex1.log();
      complex7.divide(0.0);
      complex4.getField();
      Complex complex8 = complex7.add(20.0);
      Complex complex9 = complex4.multiply((-1270));
      Complex complex10 = complex8.INF.exp();
      complex10.getField();
      complex3.add(complex4);
      complex4.multiply(0.0);
      complex8.exp();
      Complex complex11 = Complex.valueOf(1567.0483834354);
      Complex complex12 = complex7.multiply(complex11);
      complex12.INF.atan();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-2163.78424498318));
      complex0.INF.asin();
      Complex complex1 = complex0.atan();
      complex0.readResolve();
      complex1.getReal();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.sinh();
      complex3.getReal();
      Complex complex4 = complex3.multiply(complex1);
      complex2.divide(complex4);
      Complex complex5 = complex3.add(2.300139523030551);
      complex5.INF.negate();
      complex3.sqrt1z();
      complex3.abs();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-229));
      complex1.ZERO.subtract(0.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.subtract(complex2);
      complex0.getImaginary();
      complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.subtract((-358.9779976440307));
      complex1.NaN.tanh();
      Complex complex3 = complex0.ONE.pow(complex1);
      complex0.isNaN();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.ONE.pow(1.0);
      Complex complex6 = complex0.subtract(0.0);
      complex5.sqrt1z();
      complex0.createComplex((-4471.79781932), (-358.9779976440307));
      Complex.valueOf((-3610.3224762));
      complex5.isNaN();
      Complex.valueOf(290.853814);
      complex3.pow((-4471.79781932));
      complex2.add(complex6);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3187.62, 3187.62);
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.subtract(complex1);
      complex2.ONE.toString();
      complex3.toString();
      Complex complex4 = complex1.NaN.multiply(3187.62);
      Complex complex5 = complex3.divide((-869.1241656673));
      complex0.sqrt();
      complex2.getArgument();
      complex2.INF.sinh();
      complex3.hashCode();
      complex2.log();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.acos();
      complex7.INF.exp();
      Complex complex8 = complex7.NaN.reciprocal();
      Complex complex9 = complex4.pow(complex2);
      complex4.getField();
      complex2.add((-869.1241656673));
      Complex.valueOf(0.0, 9.813901863427107E161);
      Complex complex10 = complex8.multiply(complex9);
      complex10.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.createComplex(0.6212903261184692, 0.6212903261184692);
      Complex complex3 = complex1.ZERO.subtract(0.6212903261184692);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.I.add(0.6212903261184692);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.NaN.multiply(280);
      complex4.getArgument();
      Complex complex8 = complex6.INF.sqrt();
      complex6.equals("j");
      Complex complex9 = complex4.INF.divide((-1.943473623641502E-9));
      complex6.equals("j");
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex10 = complex8.asin();
      Complex complex11 = complex0.pow(complex7);
      complex11.add(complex1);
      Complex complex12 = complex10.multiply(1026);
      complex12.ONE.multiply(complex0);
      Complex complex13 = Complex.valueOf((-1.4013456880651706E-8), 0.0);
      complex13.ONE.hashCode();
      Complex complex14 = complex1.multiply((-1.4013456880651706E-8));
      Complex complex15 = complex0.atan();
      Complex complex16 = complex15.multiply(complex3);
      complex16.ZERO.hashCode();
      Complex complex17 = complex2.sinh();
      complex17.I.abs();
      complex14.cos();
      complex15.pow(complex5);
      complex9.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.multiply(complex4);
      complex0.isNaN();
      Complex complex6 = complex3.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex8.ZERO.acos();
      complex3.readResolve();
      complex1.getField();
      complex6.readResolve();
      complex5.nthRoot(1006);
      complex2.multiply(8.43527683868743E-8);
      complex7.log();
      complex4.add((double) 1006);
      complex8.multiply(complex9);
      Complex complex10 = complex7.acos();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex((-766.125838284), (-2870.92506744366));
      Complex complex1 = complex0.pow((-1360.8463835));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.I.createComplex((-2870.92506744366), 0.0);
      Complex complex5 = complex1.NaN.cosh();
      Complex complex6 = complex2.NaN.log();
      Complex complex7 = complex3.add(0.0);
      Complex complex8 = complex7.multiply(0.0);
      Complex complex9 = complex7.subtract(complex4);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex0.multiply(complex7);
      Complex complex11 = complex10.I.pow(complex8);
      complex2.equals(complex3);
      Complex complex12 = complex8.NaN.add(complex6);
      complex7.createComplex(2.8401159516008676E283, (-1360.8463835));
      Complex complex13 = Complex.valueOf((-741.13283091));
      Complex complex14 = complex8.tanh();
      complex2.log();
      Complex complex15 = complex4.multiply((-1.0));
      assertTrue(complex15.equals((Object)complex9));
      
      Complex complex16 = complex10.exp();
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertTrue(complex16.equals((Object)complex11));
      
      double double0 = complex14.getArgument();
      assertTrue(complex14.equals((Object)complex10));
      assertEquals(-0.0, double0, 0.01);
      
      complex6.toString();
      assertFalse(complex1.equals((Object)complex15));
      assertNotSame(complex6, complex13);
      assertSame(complex2, complex5);
      assertSame(complex6, complex12);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(1083.087983931);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }
}
