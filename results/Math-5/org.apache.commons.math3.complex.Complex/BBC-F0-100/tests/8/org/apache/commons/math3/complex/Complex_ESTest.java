/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:22:58 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3.0573102223682595E264, 0.9999999347748);
      Complex complex2 = complex1.sqrt1z();
      complex2.acos();
      complex0.cosh();
      Complex complex3 = Complex.valueOf(6.522519998335751E-8);
      complex3.ZERO.pow(6.5225211811728E-8);
      complex1.divide(complex3);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(6.52252321321176E-8, 6.52252321321176E-8);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply(1812.7248255);
      complex2.isNaN();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.log();
      complex0.cosh();
      Complex complex5 = complex1.pow(complex4);
      complex5.INF.pow(1812.7248255);
      complex4.multiply(125);
      complex3.subtract(1812.7248255);
      Complex complex6 = new Complex((-1.1570594692045927E-9));
      complex6.nthRoot(780);
      complex4.sqrt();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex0.acos();
      Complex complex2 = complex0.asin();
      Complex.valueOf(2.0);
      Complex complex3 = Complex.ONE;
      complex1.tan();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.3057007442449645E-37, 1066.1671185114105);
      complex0.I.multiply((-3718.9308031643));
      Complex complex1 = complex0.acos();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-1638.19149998));
      complex2.isNaN();
      complex1.multiply(complex2);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex0.cosh();
      complex0.sqrt();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.createComplex(1638.19149998, 1638.19149998);
      complex2.ZERO.toString();
      Complex complex3 = complex2.divide(2471.296);
      complex1.tan();
      Complex complex4 = complex2.reciprocal();
      complex4.ZERO.reciprocal();
      complex0.INF.abs();
      complex1.cosh();
      complex2.createComplex((-20.0), 20.0);
      complex4.readResolve();
      complex3.subtract((-20.0));
      complex4.pow(Double.POSITIVE_INFINITY);
      complex0.multiply((-493));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1652.4594875709067));
      Complex complex1 = complex0.multiply((-1652.4594875709067));
      complex0.isInfinite();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.acos();
      complex3.log();
      Complex complex4 = complex3.subtract((-1652.4594875709067));
      complex4.equals(complex0);
      Complex.valueOf((-1652.4594875709067), (-1652.4594875709067));
      Complex complex5 = new Complex((-1184.3967542954883));
      Complex complex6 = complex1.createComplex(20.0, 20.0);
      Complex complex7 = Complex.valueOf((-1652.4594875709067), 20.0);
      complex0.add(complex7);
      complex0.divide((-1184.3967542954883));
      complex6.tanh();
      Complex complex8 = Complex.valueOf((-1184.3967542954883), (-1184.3967542954883));
      complex8.INF.tan();
      complex0.acos();
      complex3.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-2940.9), (-2940.9));
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.INF;
      complex1.multiply(complex4);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.multiply(1242);
      complex2.asin();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = Complex.valueOf(859.648826625105, (double) 1164);
      complex7.toString();
      complex6.sinh();
      Complex complex9 = new Complex((-3276.382694745349), 2490.79766914391);
      complex9.equals(complex8);
      complex0.tan();
      Complex complex10 = complex9.acos();
      complex10.ZERO.asin();
      complex10.reciprocal();
      complex10.tan();
      complex4.nthRoot(1242);
      complex5.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide((-2940.9));
      Complex complex3 = Complex.INF;
      complex1.multiply(complex2);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.multiply(1225);
      complex2.asin();
      complex1.sqrt1z();
      Complex complex6 = Complex.valueOf(2490.79766914391, 20.0);
      complex5.createComplex(5.1271712215233855E64, 1242);
      complex2.toString();
      Complex.valueOf((double) 1155);
      Complex complex7 = complex1.sinh();
      complex7.equals(complex1);
      Complex complex8 = complex6.tan();
      complex3.acos();
      Complex complex9 = complex8.reciprocal();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ZERO;
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.tanh();
      complex3.NaN.multiply(947306);
      Complex complex4 = new Complex(0.0);
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.divide((-1.0));
      complex3.tanh();
      Complex.valueOf(2.0, Double.NaN);
      Complex complex4 = complex3.asin();
      complex0.log();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 61.9336);
      Complex complex1 = complex0.createComplex(0.0, 1.0);
      Complex complex2 = complex0.add(complex1);
      complex2.divide(0.0);
      Complex complex3 = Complex.valueOf((-20.0), 1.0);
      Complex complex4 = complex3.tanh();
      complex4.ONE.sinh();
      Complex complex5 = Complex.valueOf((-1551.0), 0.0);
      complex3.asin();
      complex5.log();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.multiply((-1638.19149998));
      complex1.isNaN();
      Complex complex2 = Complex.I;
      complex2.I.pow(complex1);
      Complex complex3 = Complex.I;
      complex0.atan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      complex0.INF.pow(0.6981348364596209);
      complex0.multiply((-1638.19149998));
      Complex.valueOf((-1638.19149998));
      Complex complex2 = Complex.ONE;
      int int0 = 1030;
      // Undeclared exception!
      complex1.nthRoot(2049870754);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.abs();
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide((-2940.9));
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex3.sin();
      complex5.nthRoot(1030);
      complex5.multiply(1225);
      complex2.asin();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.valueOf(2490.79766914391, Double.POSITIVE_INFINITY);
      complex4.hashCode();
      complex4.atan();
      Complex complex8 = Complex.valueOf((-1381.073966));
      complex8.getField();
      complex5.tanh();
      Complex complex9 = complex4.add(1.6633478556884994E190);
      Complex complex10 = complex5.multiply(complex7);
      Complex complex11 = Complex.I;
      complex6.conjugate();
      complex10.cos();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1923.7142);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.sin();
      complex3.nthRoot(743);
      Complex complex4 = complex0.multiply((-463));
      complex3.asin();
      complex4.sqrt1z();
      Complex complex5 = Complex.valueOf((double) 743, 1923.7142);
      complex1.createComplex(1225, 1225);
      Complex complex6 = new Complex(1225);
      complex6.toString();
      Complex.valueOf((-4321.46));
      Complex complex7 = complex2.sinh();
      complex4.equals(complex3);
      complex5.tan();
      complex4.acos();
      complex7.reciprocal();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex0.getField();
      Complex complex2 = Complex.I;
      complex2.reciprocal();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex2.log();
      Complex complex6 = complex2.add(Double.NaN);
      complex5.sqrt1z();
      complex1.divide(complex2);
      complex5.add(complex3);
      Complex complex7 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.multiply(2594);
      complex8.hashCode();
      complex8.atan();
      complex6.getField();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      complex4.add(Double.NaN);
      complex4.multiply(complex3);
      Complex complex10 = Complex.I;
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      complex11.cos();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-1638.19149998));
      complex2.isNaN();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.tan();
      Complex complex6 = complex1.createComplex((-1638.19149998), (-1638.19149998));
      complex4.exp();
      complex0.add(complex2);
      complex5.divide((-1638.19149998));
      Complex complex7 = new Complex((-1638.19149998));
      complex7.tanh();
      Complex.valueOf((-1638.19149998), (-1638.19149998));
      complex3.acos();
      Complex complex8 = complex6.tan();
      complex5.acos();
      Complex complex9 = new Complex((-1638.19149998), (-1638.19149998));
      complex8.isNaN();
      Complex complex10 = new Complex(2275.4, 2275.4);
      complex10.readResolve();
      complex3.exp();
      Complex complex11 = Complex.NaN;
      complex7.divide(complex11);
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-1638.19149998));
      complex2.isNaN();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.log();
      Complex complex5 = complex1.add(1.6793752843984384E-262);
      complex4.sqrt1z();
      complex1.divide(complex3);
      Complex complex6 = complex1.add(complex3);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.divide((-20.0));
      complex8.multiply(1338);
      complex6.hashCode();
      complex2.atan();
      complex6.getField();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex1.add(0.31560879945755005);
      Complex complex11 = complex6.multiply(complex5);
      Complex complex12 = Complex.I;
      complex11.conjugate();
      complex10.cos();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide((-2940.9));
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.valueOf((-1.134963954323427E-7));
      Complex complex5 = complex2.tanh();
      complex2.sin();
      Complex complex6 = Complex.valueOf(0.17657967860751733);
      Complex complex7 = complex6.asin();
      complex2.multiply(0.17657967860751733);
      complex4.nthRoot(198);
      Complex complex8 = complex2.reciprocal();
      complex1.abs();
      Complex complex9 = Complex.INF;
      complex9.toString();
      Complex complex10 = complex9.createComplex(7, (-1681.26274));
      complex7.toString();
      Complex.valueOf((double) 7);
      complex8.equals(complex3);
      complex9.tan();
      complex9.acos();
      Complex complex11 = new Complex(0.567397952079773, 1.5193504738280654);
      complex8.isNaN();
      complex5.readResolve();
      complex3.exp();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4.3750396394525074E48);
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.tan();
      Complex complex2 = complex1.acos();
      Complex complex3 = new Complex(2132.444522613, Double.POSITIVE_INFINITY);
      complex1.isNaN();
      complex1.readResolve();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-1082.420372748));
      complex1.getArgument();
      complex0.isNaN();
      Complex complex2 = complex0.add((-2523.0));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex1.add(complex4);
      complex5.INF.hashCode();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.divide(2.996951909345924E-4);
      complex7.multiply(1025);
      complex7.hashCode();
      Complex complex8 = complex1.atan();
      complex6.getField();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex2.asin();
      complex3.sqrt1z();
      complex8.reciprocal();
      complex12.acos();
      complex10.asin();
      Complex.valueOf((-1082.420372748));
      complex2.readResolve();
      Complex complex13 = new Complex((-3.141592653589793), 2811);
      complex4.multiply(complex10);
      complex11.getField();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-1638.19149998));
      complex2.isNaN();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.tan();
      Complex complex6 = complex1.createComplex((-1638.19149998), (-1638.19149998));
      Complex complex7 = complex4.multiply(1431655765);
      complex5.asin();
      Complex complex8 = complex3.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-112.00069586507725));
      Complex complex9 = complex6.createComplex((-112.00069586507725), 5.1271712215233855E64);
      complex2.toString();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.sinh();
      Object object0 = complex9.readResolve();
      complex0.equals(object0);
      complex8.tan();
      complex8.acos();
      Complex complex10 = new Complex(4.055591016486347E-4, 2490.79766914391);
      Complex complex11 = Complex.I;
      complex11.isNaN();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex1.I.sin();
      complex5.ZERO.log();
      complex1.add(1.6793752843984384E-262);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex2.add(complex3);
      complex4.divide(1.6793752843984384E-262);
      complex5.atan();
      complex2.getField();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex5.acos();
      Complex complex11 = complex4.asin();
      complex8.sqrt1z();
      complex6.reciprocal();
      complex4.acos();
      complex11.asin();
      Complex complex12 = Complex.ONE;
      complex9.readResolve();
      complex10.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      complex0.ONE.log();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.I.atan();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.INF.add(1.6793752843984384E-262);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex0.divide(complex1);
      complex0.I.add(complex2);
      Complex complex8 = complex7.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.atan();
      complex9.I.getField();
      complex1.tanh();
      Complex complex10 = complex8.acos();
      complex4.asin();
      complex10.sqrt1z();
      Complex complex11 = complex3.reciprocal();
      complex11.acos();
      complex6.acos();
      Complex complex12 = new Complex((-3276.382694745349), Double.NaN);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2332.795));
      Complex complex1 = Complex.valueOf((-2332.795));
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = new Complex((-2.8786263916116364E-10));
      Complex complex4 = complex3.ONE.divide(complex0);
      complex3.ONE.readResolve();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.asin();
      complex2.sqrt1z();
      Complex complex7 = complex6.reciprocal();
      complex4.acos();
      complex1.asin();
      Complex complex8 = Complex.valueOf(-0.0);
      complex4.readResolve();
      complex7.multiply(complex6);
      complex6.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.atan();
      complex2.sin();
      Complex complex4 = Complex.NaN;
      complex4.log();
      Complex complex5 = complex3.add(2926.93498093);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex3.divide(complex5);
      complex7.add(complex1);
      Complex complex9 = complex8.divide(1.6793752843984384E-262);
      complex7.atan();
      complex0.tanh();
      Complex complex10 = new Complex(1930.243413448597);
      Complex complex11 = complex10.acos();
      complex0.asin();
      complex6.sqrt1z();
      Complex complex12 = complex0.add(complex1);
      complex6.hashCode();
      complex0.multiply(294);
      complex12.cosh();
      Complex complex13 = complex8.exp();
      Complex.valueOf(1639.3817899296823);
      complex9.readResolve();
      complex5.multiply(complex13);
      complex11.subtract(2926.93498093);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2.0, (-979.39263));
      Complex complex2 = complex0.sinh();
      complex2.abs();
      Complex complex3 = complex1.tan();
      complex3.createComplex((-979.39263), (-979.39263));
      complex2.exp();
      Complex complex4 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-1638.19149998));
      Complex.valueOf((-82.88));
      Complex complex3 = complex0.tanh();
      complex3.NaN.sin();
      Complex complex4 = Complex.valueOf((-3074.0));
      complex1.readResolve();
      complex3.createComplex(Double.NaN, 1355.6028152038);
      Complex complex5 = complex2.asin();
      complex5.reciprocal();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.ONE.createComplex(5.475072932318336E-266, 5.475072932318336E-266);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.multiply((double) 6);
      complex3.nthRoot(6);
      complex0.reciprocal();
      complex1.abs();
      complex1.toString();
      Complex complex5 = complex3.createComplex(20.0, 5.1271712215233855E64);
      complex2.toString();
      Complex complex6 = Complex.valueOf((double) 6);
      complex1.equals(complex2);
      complex5.NaN.asin();
      complex4.tan();
      Complex complex7 = complex5.acos();
      Complex complex8 = new Complex(Double.NaN, 5.1271712215233855E64);
      complex7.isNaN();
      complex6.readResolve();
      complex4.exp();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex1.I.sin();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex6.INF.add(1.6793752843984384E-262);
      complex7.sqrt1z();
      Complex complex8 = complex0.divide(complex1);
      complex0.I.add(complex3);
      complex8.asin();
      complex0.sqrt1z();
      Complex complex9 = Complex.valueOf(1653.3732718771469, 3152.7);
      Complex complex10 = complex6.createComplex(Double.POSITIVE_INFINITY, 591.289170708);
      complex10.toString();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.sinh();
      complex7.equals(complex4);
      complex2.tan();
      complex9.acos();
      Complex complex11 = new Complex(20.0, 591.289170708);
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-3729.92185));
      Complex complex1 = complex0.NaN.sinh();
      complex1.INF.abs();
      complex0.tan();
      Complex complex2 = complex1.createComplex((-3729.92185), (-3729.92185));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex2.divide(9.279423236781974E-8);
      complex1.tanh();
      complex0.log();
      complex2.reciprocal();
      complex2.acos();
      Complex.valueOf(2.0);
      complex5.readResolve();
      complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      complex0.abs();
      complex1.tan();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
      complex1.exp();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = Complex.valueOf(1640.601818);
      Complex complex5 = complex4.divide(2499.7486207);
      Complex complex6 = complex5.tanh();
      Complex complex7 = new Complex(1640.601818, 2499.7486207);
      complex5.reciprocal();
      complex4.acos();
      Complex complex8 = new Complex(1184.330765540248, (-1602.03969429));
      complex8.asin();
      Complex complex9 = Complex.valueOf(1.1902899496825317);
      complex9.readResolve();
      complex8.multiply(complex6);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide((-2940.9));
      Complex complex3 = complex2.asin();
      complex1.multiply(complex2);
      Complex complex4 = complex3.sin();
      complex4.nthRoot(1030);
      complex4.multiply(1225);
      Complex complex5 = complex2.asin();
      complex1.sqrt1z();
      Complex complex6 = Complex.valueOf(2490.79766914391, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.sqrt1z();
      complex7.subtract((double) 1242);
      complex1.multiply((-97));
      complex3.equals(complex0);
      Complex complex8 = new Complex(4889.8574476);
      complex8.getImaginary();
      complex0.sin();
      complex7.getImaginary();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide((-2940.9));
      Complex complex3 = complex2.asin();
      complex1.multiply(complex2);
      Complex complex4 = complex3.sin();
      complex4.nthRoot(1030);
      Complex complex5 = complex4.multiply(1225);
      Complex complex6 = complex2.asin();
      complex1.sqrt1z();
      Complex complex7 = Complex.valueOf(2490.79766914391, Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.createComplex(5.1271712215233855E64, 1242);
      complex2.toString();
      Complex.valueOf((double) 1030);
      Complex complex9 = complex1.sinh();
      complex9.equals(complex1);
      complex7.tan();
      complex0.acos();
      Complex complex10 = new Complex(5.1271712215233855E64, (-997.7));
      Complex complex11 = complex2.multiply(complex8);
      complex6.sqrt();
      complex11.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex1.INF.reciprocal();
      complex3.I.atan();
      Complex complex4 = complex1.I.sin();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex5.INF.add(14.46889843878353);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex0.divide(complex1);
      complex0.I.add(complex3);
      Complex complex9 = complex8.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex complex11 = complex9.acos();
      complex5.asin();
      complex6.multiply(1035677818);
      complex8.readResolve();
      complex5.getField();
      complex7.isInfinite();
      complex3.negate();
      complex5.multiply((-2041.39));
      complex2.subtract(complex11);
      Complex complex12 = Complex.INF;
      Complex complex13 = Complex.ZERO;
      complex12.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      complex0.isNaN();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.subtract((-1638.19149998));
      complex4.equals(complex1);
      Complex complex5 = Complex.valueOf((-1638.19149998), (-1638.19149998));
      Complex complex6 = complex0.createComplex((-1638.19149998), (-1184.3967542954883));
      complex5.asin();
      complex3.divide(complex5);
      complex5.sqrt1z();
      complex1.add(complex1);
      Complex complex7 = Complex.NaN;
      complex7.hashCode();
      complex7.multiply(6);
      complex2.exp();
      complex3.getImaginary();
      complex6.getImaginary();
      complex5.isInfinite();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      complex0.ONE.log();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.I.atan();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = Complex.INF;
      complex5.sqrt1z();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex0.I.add(complex2);
      Complex complex8 = complex6.ZERO.divide(Double.POSITIVE_INFINITY);
      complex6.atan();
      complex1.tanh();
      Complex complex9 = complex8.acos();
      complex4.asin();
      Complex complex10 = complex9.sqrt1z();
      complex5.add(complex2);
      complex10.hashCode();
      complex8.multiply(152);
      Complex complex11 = complex3.cosh();
      complex8.exp();
      complex11.pow((double) 152);
      complex4.getImaginary();
      Complex.valueOf(Double.NaN);
      complex9.readResolve();
      complex10.multiply(complex3);
      complex7.add(1.2015275955200195);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-1638.19149998));
      Complex complex3 = Complex.valueOf((-82.88));
      Complex complex4 = complex0.tanh();
      complex4.NaN.sin();
      complex2.nthRoot(7);
      complex4.getArgument();
      complex1.equals("@ocdU7");
      complex2.hashCode();
      complex3.hashCode();
      complex0.negate();
      Complex complex5 = complex0.acos();
      complex5.NaN.log();
      Complex complex6 = complex3.asin();
      Complex complex7 = new Complex(3.141592653589793);
      Complex complex8 = complex7.sqrt1z();
      complex8.divide(complex3);
      Complex complex9 = new Complex(1334.8902, (-1638.19149998));
      Complex complex10 = complex1.add(complex9);
      complex9.hashCode();
      complex8.multiply(7);
      Complex complex11 = Complex.ZERO;
      complex11.cosh();
      Complex complex12 = new Complex(20.0, (-1638.19149998));
      complex12.exp();
      complex10.pow(2009.8884852);
      complex2.getImaginary();
      complex6.getImaginary();
      complex10.isInfinite();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-3729.92185));
      Complex complex1 = complex0.NaN.sinh();
      complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex((-3729.92185), (-3729.92185));
      Complex complex4 = complex0.NaN.exp();
      Complex complex5 = complex2.NaN.add(complex3);
      Complex complex6 = complex3.divide((-3647.1771618));
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex3.log();
      Complex complex9 = complex8.multiply(2811);
      Complex complex10 = complex7.reciprocal();
      complex5.multiply(2811);
      Complex complex11 = new Complex((-1.0), (-1.0));
      complex4.exp();
      complex9.pow(7.549789948768648E-8);
      complex1.getImaginary();
      complex6.getImaginary();
      complex7.isInfinite();
      complex10.cosh();
      Complex complex12 = complex11.multiply((-422));
      complex0.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      complex0.I.toString();
      Complex complex2 = complex1.I.pow(complex0);
      complex1.I.tan();
      Complex.valueOf(228.2798457);
      Complex complex3 = complex2.INF.divide((-2940.9));
      complex2.asin();
      complex3.INF.tanh();
      complex3.ONE.add(complex2);
      complex1.ZERO.multiply(complex0);
      Complex complex4 = complex0.sin();
      complex0.nthRoot(1242);
      complex0.multiply((-1587));
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.valueOf((double) (-1587), Double.POSITIVE_INFINITY);
      complex7.I.createComplex((-1587), 1.0);
      complex6.toString();
      Complex complex8 = Complex.valueOf((-1297.046422261252));
      complex8.NaN.sinh();
      complex8.getImaginary();
      complex1.toString();
      Complex complex9 = Complex.I;
      complex9.nthRoot(860);
      complex5.subtract(1.0);
      complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex3.I.atan();
      complex0.ONE.toString();
      Complex complex5 = complex1.I.sin();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = Complex.valueOf((-4.370158073951499E193));
      Complex complex8 = complex7.sqrt();
      complex2.nthRoot(562);
      complex1.getArgument();
      complex4.equals("m");
      complex2.hashCode();
      complex8.hashCode();
      complex5.negate();
      Complex complex9 = complex8.acos();
      complex7.asin();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex0.divide(complex4);
      Complex complex12 = complex5.add(complex9);
      complex5.hashCode();
      complex6.multiply(152);
      Complex complex13 = complex6.cosh();
      complex10.exp();
      Complex complex14 = complex13.pow((double) 562);
      complex14.I.multiply(152);
      complex13.getImaginary();
      complex11.getImaginary();
      complex12.isInfinite();
      Complex complex15 = Complex.ZERO;
      complex15.cosh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-1638.19149998));
      Complex complex3 = Complex.valueOf((-82.88));
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex1.asin();
      complex6.multiply((double) 7);
      complex1.nthRoot(274);
      complex3.reciprocal();
      complex1.abs();
      complex0.toString();
      Complex complex7 = complex6.sqrt1z();
      complex0.subtract(20.0);
      complex3.multiply(1406);
      Complex complex8 = Complex.INF;
      complex4.equals(complex8);
      complex2.getImaginary();
      complex6.sin();
      complex7.getImaginary();
      complex2.conjugate();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-181.3571));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply(2823.7402087772457);
      Complex.valueOf((-181.3571));
      Complex complex3 = new Complex(1.4728503902006196E-4, (-829.7738747109));
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex2.asin();
      Complex complex7 = Complex.valueOf((-528.91207235), 0.06246116757392883);
      Complex complex8 = complex7.multiply((double) 7);
      complex4.nthRoot(7);
      Complex complex9 = complex3.reciprocal();
      complex2.abs();
      complex8.toString();
      Complex complex10 = complex7.sqrt1z();
      complex1.subtract((-6.370937412495338E-9));
      complex2.multiply(1);
      complex10.equals(complex6);
      complex3.getImaginary();
      complex0.sin();
      complex5.getImaginary();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998), (-3729.92185));
      Complex complex1 = complex0.sinh();
      complex0.abs();
      Complex complex2 = complex0.tan();
      complex1.createComplex(4073.817423217951, (-3729.92185));
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex4.divide((-1638.19149998));
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.log();
      complex7.multiply((-1282));
      complex5.reciprocal();
      complex3.acos();
      Complex complex8 = complex5.asin();
      Complex.valueOf((-341.4864753));
      complex8.readResolve();
      complex6.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      complex0.I.toString();
      Complex complex2 = complex1.I.pow(complex0);
      complex2.ONE.divide((-5367342.781213444));
      Complex complex3 = complex1.I.tan();
      complex3.getField();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.subtract(complex0);
      complex5.pow(566.54627);
      complex0.multiply((-2006.67331070123));
      complex5.getReal();
      complex3.ZERO.toString();
      complex4.sqrt1z();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide((-2940.9));
      Complex complex3 = complex2.asin();
      complex1.multiply(complex2);
      Complex complex4 = complex3.sin();
      complex4.nthRoot(1030);
      Complex complex5 = complex4.multiply(1225);
      complex2.asin();
      complex1.sqrt1z();
      Complex complex6 = Complex.valueOf(2490.79766914391, Double.POSITIVE_INFINITY);
      complex5.createComplex(5.1271712215233855E64, 1242);
      complex2.toString();
      Complex.valueOf((double) 1030);
      Complex complex7 = complex1.sinh();
      complex7.equals(complex1);
      complex6.tan();
      complex0.acos();
      Complex complex8 = new Complex(5.1271712215233855E64, (-997.7));
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-1638.19149998));
      complex2.isNaN();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.subtract((-1638.19149998));
      complex6.equals(complex1);
      Complex complex7 = Complex.valueOf((-1638.19149998), (-1638.19149998));
      complex0.createComplex((-1638.19149998), (-1184.3967542954883));
      complex7.asin();
      Complex complex8 = complex4.divide(complex7);
      Complex complex9 = complex3.multiply(0);
      Complex complex10 = complex7.multiply(complex1);
      complex5.readResolve();
      complex4.getField();
      complex7.isInfinite();
      complex9.negate();
      complex6.multiply((-3682.0));
      complex8.subtract(complex10);
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3394.777857375));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.I.cosh();
      complex0.abs();
      complex0.tan();
      Complex complex4 = Complex.valueOf(0.0, (-3394.777857375));
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex2.add(complex6);
      Complex complex8 = complex7.divide(1134.0887);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex4.log();
      complex6.multiply((-2147160439));
      complex3.reciprocal();
      Complex complex11 = complex5.acos();
      complex8.asin();
      Complex.valueOf(101.159245697);
      complex11.readResolve();
      complex9.multiply(complex10);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-3729.92185));
      Complex complex1 = complex0.NaN.sinh();
      complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex((-3729.92185), (-3729.92185));
      complex0.NaN.exp();
      complex2.NaN.add(complex3);
      complex3.divide((-3647.1771618));
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.multiply(2811);
      complex4.reciprocal();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex3.pow(complex7);
      complex6.log();
      complex6.tan();
      Complex complex9 = complex0.sqrt1z();
      complex9.sqrt();
      complex6.cos();
      complex0.getReal();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.338733196258545, 1.6544084224626834E220);
      complex0.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.asin();
      complex0.ONE.pow(complex1);
      complex1.I.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = Complex.INF;
      complex2.multiply(complex3);
      complex1.INF.abs();
      complex0.createComplex(6.283185307179586, 0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      complex0.I.toString();
      Complex complex2 = complex1.I.pow(complex0);
      complex1.I.tan();
      Complex complex3 = complex2.INF.divide((-2940.9));
      Complex complex4 = complex2.asin();
      complex1.ZERO.multiply(complex0);
      Complex complex5 = complex0.sin();
      complex0.nthRoot(1242);
      Complex complex6 = complex0.multiply((-1587));
      complex5.asin();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = Complex.valueOf((double) (-1587), Double.POSITIVE_INFINITY);
      complex8.I.createComplex((-1587), 1.0);
      complex7.toString();
      Complex complex9 = Complex.valueOf((-1297.046422261252));
      Complex complex10 = complex9.NaN.sinh();
      complex6.equals("(0.0, 1.0)");
      complex3.tan();
      complex10.acos();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      complex1.NaN.multiply(complex0);
      complex0.isInfinite();
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.add(complex0);
      Complex complex3 = Complex.valueOf(2.5257552661512635E-165, 2.5257552661512635E-165);
      complex3.ZERO.hashCode();
      Complex complex4 = complex3.I.add(2.5257552661512635E-165);
      complex4.tanh();
      complex3.isInfinite();
      Complex.valueOf(1.8122539547625083E-230, 1.8122539547625083E-230);
      complex4.divide(1.8122539547625083E-230);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ZERO.add(0.0);
      complex0.ONE.toString();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.INF.reciprocal();
      complex0.toString();
      complex3.NaN.toString();
      complex2.ZERO.cos();
      Complex complex5 = complex0.tanh();
      complex3.INF.multiply(complex1);
      complex1.isInfinite();
      complex2.getField();
      Complex complex6 = complex3.reciprocal();
      complex0.ONE.divide(0.0);
      complex6.ZERO.cos();
      Complex complex7 = complex6.divide((-1611.15367467802));
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = Complex.valueOf((-2096.9262479765594));
      complex9.ZERO.multiply((-1611.15367467802));
      complex9.NaN.getArgument();
      complex9.ZERO.readResolve();
      complex3.getReal();
      complex0.log();
      complex5.nthRoot(1);
      complex8.multiply(complex9);
      complex4.sin();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      complex0.INF.getField();
      Complex complex2 = complex0.atan();
      complex2.ZERO.multiply((-577.0557226037442));
      Complex complex3 = complex1.NaN.subtract((-4874.48908661));
      complex0.equals(complex2);
      complex2.I.abs();
      Complex complex4 = complex2.NaN.divide(0.0);
      complex4.ONE.multiply(0.0);
      Complex complex5 = complex1.divide(446.5381758);
      complex5.atan();
      complex2.isNaN();
      complex5.equals(complex0);
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-1082.420372748));
      complex1.getArgument();
      complex0.isNaN();
      Complex complex2 = complex1.multiply(complex0);
      complex2.NaN.acos();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex2.ONE.subtract((-3.141592653589793));
      complex1.equals(complex2);
      complex4.ZERO.tan();
      complex1.NaN.createComplex((-3.141592653589793), (-1082.420372748));
      Complex complex5 = complex0.asin();
      complex0.I.divide(complex3);
      Complex complex6 = complex5.multiply(0);
      Complex complex7 = complex5.ZERO.multiply(complex4);
      complex5.readResolve();
      complex7.getField();
      complex1.isInfinite();
      Complex complex8 = complex1.negate();
      complex8.multiply((-3682.0));
      complex7.subtract(complex6);
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1131.4758142041, 1131.4758142041);
      Complex complex1 = complex0.createComplex((-1.1570594692045927E-9), 1131.4758142041);
      Complex complex2 = Complex.ZERO;
      complex2.NaN.multiply(0.0);
      complex2.cos();
      complex1.NaN.cos();
      Complex complex3 = complex1.ZERO.add(complex2);
      complex3.cosh();
      complex1.subtract((-1.1570594692045927E-9));
      complex1.readResolve();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4065.404), (-4065.404));
      complex0.getArgument();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(0.0, (-2.356194490192345));
      complex3.ZERO.hashCode();
      complex2.abs();
      complex3.cos();
      Complex.valueOf((-2293.1762897088));
      complex0.getImaginary();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.getField();
      Complex complex2 = complex0.tanh();
      complex2.NaN.subtract(complex0);
      complex2.multiply((-2006.67331070123));
      complex0.getReal();
      complex2.sqrt1z();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.INF.conjugate();
      complex3.ZERO.multiply(complex0);
      complex0.getArgument();
      complex3.getImaginary();
      complex3.getField();
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex0.NaN.subtract(9.865115839786888E-9);
      complex4.ONE.negate();
      Complex complex5 = complex1.NaN.negate();
      complex5.ONE.divide(complex0);
      complex1.ZERO.getField();
      Complex complex6 = complex0.I.reciprocal();
      complex0.INF.getArgument();
      complex6.ZERO.subtract(complex1);
      Complex complex7 = complex6.I.divide(complex1);
      complex7.NaN.nthRoot(1186);
      complex0.NaN.getField();
      complex0.readResolve();
      Complex complex8 = Complex.valueOf(1720.7235134517362, 0.0);
      Complex complex9 = complex4.NaN.multiply(1186);
      complex9.ONE.getArgument();
      Complex.valueOf(0.7853981633974483);
      Complex complex10 = complex8.sinh();
      complex10.I.pow(complex2);
      complex1.log();
      complex10.tan();
      complex4.sqrt1z();
      complex3.sqrt();
      complex10.cos();
      complex7.getReal();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-3729.92185));
      Complex complex1 = complex0.NaN.sinh();
      complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex((-3729.92185), (-3729.92185));
      Complex complex4 = complex0.NaN.exp();
      complex2.NaN.add(complex3);
      Complex complex5 = complex3.divide((-3647.1771618));
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex3.log();
      complex7.multiply(2811);
      complex6.reciprocal();
      Complex complex8 = complex4.acos();
      complex5.asin();
      Complex complex9 = Complex.valueOf((-2133.36379628395));
      complex9.readResolve();
      complex9.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-2332.795));
      Complex complex1 = Complex.valueOf((-2332.795));
      complex0.INF.divide(complex1);
      Complex complex2 = new Complex((-2.8786263916116364E-10));
      complex2.ONE.divide(complex0);
      complex2.ONE.readResolve();
      Complex complex3 = complex2.I.add(0.0);
      complex0.multiply(complex2);
      complex0.conjugate();
      complex0.cos();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.multiply(Double.NaN);
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.createComplex(0.0, 0.0);
      complex5.divide(0.0);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.createComplex(1755.233682108688, (-4650.8));
      complex3.subtract(complex7);
      Complex complex8 = complex7.pow((-4650.8));
      complex6.asin();
      complex1.asin();
      complex2.tan();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-263.4089997));
      Complex complex2 = complex1.asin();
      complex2.ONE.nthRoot(247);
      complex0.I.sin();
      complex2.NaN.getArgument();
      complex2.multiply(247);
      Complex complex3 = complex2.NaN.add(57.625481995895);
      Complex complex4 = complex3.ONE.sin();
      complex4.subtract(Double.NaN);
      int int0 = 1;
      complex1.nthRoot(1);
      complex1.NaN.negate();
      complex1.getField();
      Complex complex5 = complex0.I.conjugate();
      complex5.INF.pow(complex2);
      try { 
        complex5.INF.nthRoot((-365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -365
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1088.496041);
      Complex complex1 = complex0.multiply(1088.496041);
      complex0.abs();
      Complex complex2 = complex0.ONE.subtract(3.4672966834277804E-186);
      complex0.I.reciprocal();
      complex0.hashCode();
      complex0.pow(1088.496041);
      complex0.log();
      Complex complex3 = Complex.ONE;
      complex1.subtract(complex3);
      complex2.pow(1088.496041);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      complex0.ONE.log();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.I.atan();
      complex0.ONE.toString();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.INF.add(1.6793752843984384E-262);
      complex5.sqrt1z();
      Complex complex6 = complex0.divide(complex1);
      complex0.I.add(complex2);
      complex6.ZERO.divide(Double.POSITIVE_INFINITY);
      complex6.atan();
      complex1.tanh();
      complex1.subtract((-620.9972012));
      Complex.valueOf(0.0);
      complex3.acos();
      Complex complex7 = complex0.conjugate();
      complex7.getArgument();
      complex3.ONE.getArgument();
      complex3.ONE.cosh();
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-692.9214));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.add((-692.9214));
      complex0.ONE.add(complex1);
      complex0.INF.cosh();
      Complex complex3 = complex0.sin();
      complex3.getField();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.ZERO.sin();
      complex5.I.conjugate();
      Complex complex6 = complex4.asin();
      complex6.I.getField();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex((-1526.28), 1707.20325191135);
      Complex complex2 = complex1.ONE.subtract((-1980.943672427566));
      Complex complex3 = complex1.ONE.multiply(394);
      complex0.negate();
      Complex complex4 = complex0.ONE.sqrt();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex1.NaN.asin();
      complex7.multiply(299.0);
      complex1.isInfinite();
      Complex complex8 = complex3.multiply(394);
      complex8.ZERO.sqrt();
      complex8.ONE.conjugate();
      complex5.multiply((double) 394);
      Object object0 = complex6.readResolve();
      complex1.equals(object0);
      complex3.reciprocal();
      Complex complex9 = complex2.sin();
      complex9.ZERO.toString();
      complex4.isInfinite();
      complex0.getArgument();
      Object object1 = new Object();
      complex5.equals(object1);
      complex0.sin();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.subtract((-3547.2745614416913));
      complex2.ONE.hashCode();
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex2.ONE.multiply(complex3);
      complex2.abs();
      Complex complex5 = complex0.divide(complex3);
      complex4.ONE.divide(3547.2745614416913);
      Complex complex6 = complex4.I.createComplex(3547.2745614416913, 0.0);
      complex6.ONE.multiply((-1039));
      complex5.NaN.getArgument();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex5.INF.exp();
      complex8.ZERO.conjugate();
      complex7.INF.negate();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.NaN.pow(complex5);
      Complex complex11 = complex10.NaN.log();
      Complex complex12 = complex11.INF.subtract(complex1);
      complex12.sin();
      complex4.equals(complex9);
      complex7.isInfinite();
      complex11.reciprocal();
      complex5.multiply(734);
      complex1.abs();
      complex12.getArgument();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3099.28102759525), 0.0);
      complex0.getArgument();
      Complex complex1 = complex0.sqrt1z();
      complex1.divide(complex0);
      Complex complex2 = complex1.multiply(1);
      complex2.divide((double) 1);
      complex0.ONE.abs();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex2.ZERO.readResolve();
      complex1.NaN.sqrt1z();
      Complex.valueOf(4.725191397657393E289, 0.0);
      complex2.abs();
      complex2.isNaN();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 61.9336);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(703.0);
      Complex complex1 = new Complex(703.0);
      complex0.NaN.divide(703.0);
      Complex complex2 = complex0.divide(complex1);
      complex1.NaN.abs();
      Complex complex3 = complex1.pow(Double.NaN);
      complex3.I.hashCode();
      Complex complex4 = complex2.multiply(complex0);
      complex3.asin();
      complex2.NaN.readResolve();
      complex1.equals(complex0);
      complex0.multiply(4.920784622407246E-8);
      Complex complex5 = complex1.exp();
      complex5.ZERO.atan();
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex4.pow(0.0);
      Complex complex8 = complex7.negate();
      complex8.toString();
      complex6.getField();
      complex3.readResolve();
      complex7.reciprocal();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 750.0);
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.isNaN();
      complex0.reciprocal();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = (-1554);
      try { 
        complex0.nthRoot((-1554));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,554
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.INF.sinh();
      complex3.nthRoot(1937);
      Complex complex4 = complex0.divide((-62.2712539));
      Complex complex5 = complex1.NaN.add(20.0);
      Complex complex6 = complex5.ZERO.multiply(complex1);
      complex5.INF.getArgument();
      Complex complex7 = complex3.NaN.divide(0.0);
      Complex complex8 = complex4.ONE.cos();
      complex1.getArgument();
      Complex complex9 = complex8.log();
      complex3.multiply(complex8);
      complex9.sqrt();
      complex7.ONE.createComplex((-612.4575), 1.0);
      Complex complex10 = complex2.createComplex((-692.38), 0.0);
      Complex complex11 = complex4.sinh();
      complex11.INF.nthRoot(1937);
      complex7.getArgument();
      complex10.subtract((-2897.741));
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-505.54));
      complex0.getField();
      Complex complex1 = complex0.NaN.sqrt();
      complex1.ONE.abs();
      complex1.NaN.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex1.tanh();
      complex6.I.sinh();
      Complex complex7 = complex5.subtract(complex3);
      Complex complex8 = complex6.cos();
      complex2.subtract(complex5);
      Complex complex9 = complex4.NaN.createComplex((-505.54), 20.0);
      complex9.INF.reciprocal();
      complex8.tanh();
      Complex complex10 = complex3.ZERO.createComplex((-505.54), 0.0);
      Complex complex11 = complex7.asin();
      Complex complex12 = complex3.sinh();
      complex3.cosh();
      Complex complex13 = complex5.INF.add(1.0);
      complex4.createComplex(0.0, (-537.208270844488));
      complex10.toString();
      Complex complex14 = complex11.multiply(0.0);
      complex2.INF.pow(complex8);
      complex8.pow(complex11);
      complex10.acos();
      complex7.equals(complex14);
      complex2.conjugate();
      complex13.multiply((-3987));
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(531.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.cos();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ZERO.divide(complex1);
      Complex complex5 = complex1.INF.sin();
      complex5.toString();
      Complex complex6 = complex1.multiply(1);
      Complex complex7 = complex3.exp();
      complex6.asin();
      complex7.ZERO.subtract(Double.POSITIVE_INFINITY);
      complex6.isInfinite();
      complex4.sqrt1z();
      complex5.getArgument();
      complex7.pow(0.0);
      Complex complex8 = complex0.subtract(531.0);
      complex5.cosh();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1517.7718588223627);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.add(complex0);
      complex0.getImaginary();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.sqrt1z();
      complex4.INF.multiply(2104);
      complex3.ONE.nthRoot(181);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.INF.subtract((double) 181);
      Complex complex6 = complex2.negate();
      complex0.createComplex(0.0, 0.0);
      complex0.createComplex(0.0, 219.4397);
      complex6.createComplex(0.0, 2628.678);
      Complex.valueOf(1368.69639);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3730.50092);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.multiply((-1.0126616322947826E158));
      Complex complex6 = complex5.multiply(0.0);
      complex0.NaN.sqrt1z();
      complex4.INF.subtract(1824.97281959691);
      Complex complex7 = complex6.INF.exp();
      complex4.log();
      Complex complex8 = Complex.valueOf(20.0);
      complex8.NaN.readResolve();
      Complex.valueOf(20.0, 3730.50092);
      Complex complex9 = complex2.reciprocal();
      complex0.pow(0.0);
      complex5.NaN.toString();
      Complex.valueOf(0.0);
      complex9.NaN.sqrt1z();
      Complex complex10 = complex3.pow(7.726344058192276E-172);
      Complex complex11 = complex9.reciprocal();
      complex10.readResolve();
      complex5.sinh();
      complex7.reciprocal();
      complex11.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.createComplex(0.6128603219985962, 0.6128603219985962);
      Complex complex4 = complex3.NaN.subtract(complex0);
      complex4.acos();
      Complex complex5 = complex2.ONE.exp();
      complex0.toString();
      Complex complex6 = complex0.acos();
      complex6.INF.conjugate();
      Complex complex7 = complex6.INF.add(complex1);
      Complex complex8 = complex6.subtract(0.0);
      Complex complex9 = complex8.INF.subtract(0.0);
      complex8.NaN.pow(0.6128603219985962);
      Complex complex10 = complex5.sinh();
      Complex complex11 = complex1.NaN.log();
      complex11.ONE.log();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex12 = complex2.subtract(complex10);
      Complex complex13 = complex5.tan();
      complex13.multiply(2);
      complex1.pow(complex2);
      Complex.valueOf((-1044.3489304));
      complex12.hashCode();
      complex9.cosh();
      complex12.subtract(1490.2);
      complex7.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      complex0.acos();
      complex0.multiply((-1638.19149998));
      Complex complex1 = Complex.valueOf((-82.88));
      Complex complex2 = complex0.tanh();
      complex2.NaN.sin();
      Complex complex3 = complex0.asin();
      complex3.ZERO.multiply(1993.8);
      complex1.nthRoot(7);
      Complex complex4 = complex0.reciprocal();
      complex4.abs();
      complex4.toString();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.subtract(4889.8574476);
      complex6.NaN.multiply(1);
      complex1.equals(complex3);
      complex4.getImaginary();
      complex1.sin();
      complex4.getImaginary();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(1.1910135746002197);
      complex0.ZERO.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex0.NaN.subtract(complex1);
      complex2.getReal();
      Complex complex5 = complex0.INF.subtract(complex1);
      Complex complex6 = complex1.NaN.conjugate();
      complex0.NaN.getArgument();
      complex2.isInfinite();
      Complex complex7 = complex1.acos();
      complex7.negate();
      Complex complex8 = complex2.reciprocal();
      complex8.ZERO.multiply(Double.NaN);
      Complex complex9 = complex8.ZERO.sqrt1z();
      complex1.cosh();
      complex9.NaN.getArgument();
      complex8.ONE.asin();
      complex1.I.divide(Double.NaN);
      complex1.conjugate();
      complex7.acos();
      complex3.subtract(1.1910135746002197);
      complex5.log();
      complex4.getImaginary();
      complex4.acos();
      complex6.log();
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.multiply((-1004.3866976893587));
      Complex complex4 = complex3.ZERO.divide(0.0);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.multiply((-1004.3866976893587));
      complex6.multiply(2203);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex2.subtract(complex4);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex7.pow(complex9);
      complex10.ZERO.multiply(complex2);
      complex5.isNaN();
      complex8.INF.atan();
      complex7.cos();
      complex8.readResolve();
      complex10.asin();
      Complex.valueOf(0.0);
      complex5.nthRoot(2203);
      complex0.createComplex(2203, 0.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3394.777857375));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex3.INF.multiply(complex2);
      Complex complex5 = Complex.valueOf((-3394.777857375));
      Complex complex6 = complex5.INF.sqrt();
      List<Complex> list0 = complex1.nthRoot(1);
      assertEquals(1, list0.size());
      
      complex3.getArgument();
      complex0.equals(complex1);
      complex3.hashCode();
      complex2.ZERO.hashCode();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex8.INF.asin();
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex8));
      
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex10.ONE.divide(complex8);
      Complex complex12 = complex11.ZERO.add(complex8);
      assertEquals((-1.110223024625157E-16), complex11.getImaginary(), 0.01);
      assertEquals(1.0000000000000002, complex11.getReal(), 0.01);
      
      complex4.hashCode();
      Complex complex13 = complex10.multiply(152);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      complex2.cosh();
      Complex complex14 = complex8.exp();
      Complex complex15 = complex14.ONE.pow(2.0);
      complex7.getImaginary();
      complex10.getImaginary();
      assertTrue(complex10.equals((Object)complex15));
      
      complex4.isInfinite();
      complex1.cosh();
      assertFalse(complex1.equals((Object)complex12));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.exp();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(0.0);
      complex0.negate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.INF.sinh();
      complex3.ONE.divide(0.0);
      Complex complex4 = complex2.ONE.cosh();
      complex2.ZERO.getArgument();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex4.atan();
      complex7.NaN.toString();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      complex5.multiply(0.0);
      Complex complex8 = complex5.NaN.negate();
      complex8.ZERO.atan();
      complex4.createComplex(0.0, 0.0);
      Complex complex9 = complex3.subtract(6.283185307179586);
      Complex complex10 = complex2.add(complex5);
      assertSame(complex10, complex9);
      assertNotSame(complex5, complex3);
      
      Complex complex11 = complex6.reciprocal();
      assertEquals((-0.6366197723675814), complex11.getReal(), 0.01);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex1.atan();
      assertFalse(complex1.equals((Object)complex7));
      assertEquals(0.0, complex12.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1462.9578818424513), (-3379.7801));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.pow((-1559.010096246));
      Complex complex3 = complex2.NaN.tanh();
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.9998742463777421, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.divide(173.0);
      Complex complex5 = complex0.multiply(0);
      Complex complex6 = complex5.sqrt();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.exp();
      assertFalse(complex7.isInfinite());
      assertEquals((-19.536301156069364), complex4.getImaginary(), 0.01);
      assertEquals(1.6435621787588224E-4, complex7.getReal(), 0.01);
  }
}
