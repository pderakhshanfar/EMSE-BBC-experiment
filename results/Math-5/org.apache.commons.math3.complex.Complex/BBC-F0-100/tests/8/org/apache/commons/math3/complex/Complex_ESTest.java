/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:06:12 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.15218681073E-311), (-4.15218681073E-311));
      Complex complex1 = Complex.ONE;
      complex0.ZERO.pow(complex1);
      Complex complex2 = complex0.reciprocal();
      complex2.acos();
      Complex.valueOf(1649.5835340036);
      Complex.valueOf(1649.5835340036);
      complex1.multiply(1649.5835340036);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.isNaN();
      Complex complex2 = new Complex(35.110613911696404, Double.POSITIVE_INFINITY);
      complex2.getField();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 35.110613911696404);
      complex1.multiply(complex2);
      Complex.valueOf(35.110613911696404, 0.9886889291017849);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.7070036982778518), (-13.259634890105591));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tanh();
      complex2.pow((-0.7070036982778518));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf((-646.679));
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.log();
      Complex complex7 = complex0.atan();
      complex1.atan();
      Complex complex8 = complex7.log();
      complex8.ZERO.acos();
      complex5.INF.hashCode();
      complex4.nthRoot(4218);
      complex5.getArgument();
      Complex complex9 = complex6.tanh();
      // Undeclared exception!
      complex9.I.nthRoot(4218);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-20.0));
      Complex complex2 = Complex.valueOf((-20.0));
      complex2.multiply(complex1);
      complex2.tanh();
      complex0.nthRoot(4961);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2691.98099), 1705.730863);
      Complex complex1 = Complex.valueOf(20.0, 1.9999999999990505);
      complex1.abs();
      Complex complex2 = Complex.ZERO;
      complex1.cos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.divide((-2691.98099));
      Complex complex5 = complex1.acos();
      complex1.tanh();
      complex5.pow((-2691.98099));
      complex4.atan();
      try { 
        complex0.nthRoot((-118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -118
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 35.110613911696404);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.add(complex0);
      complex2.ONE.cos();
      Complex complex3 = complex0.divide((-106.249));
      complex3.tanh();
      Complex complex4 = new Complex((-106.249));
      complex2.reciprocal();
      Complex complex5 = complex3.createComplex((-1660.9), 1.0);
      complex5.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.add(1.6879660933816274E223);
      complex0.INF.subtract((-2662.933876588835));
      complex1.INF.subtract((-20.0));
      complex0.multiply((-3989.06678));
      complex1.toString();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4499.9555639), (-1854.991853));
      Complex complex1 = new Complex((-1854.991853));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.INF.sqrt();
      Complex complex4 = complex2.I.pow(1502.0);
      Complex complex5 = complex3.ONE.createComplex(3040.799260305879, (-1854.991853));
      Complex.valueOf(1502.0, 6.283185307179586);
      complex4.ONE.abs();
      complex3.INF.sqrt1z();
      Complex complex6 = complex1.add((-1854.991853));
      Complex complex7 = complex3.sqrt();
      complex7.ZERO.subtract(complex0);
      complex5.I.conjugate();
      complex5.INF.tanh();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex8.pow(complex5);
      Complex complex10 = complex9.INF.pow(1502.0);
      Complex complex11 = complex4.divide(complex6);
      Complex complex12 = Complex.valueOf(1.0);
      Complex complex13 = complex12.sinh();
      complex13.readResolve();
      Complex complex14 = complex1.cos();
      complex2.add(1.986821492305628E-8);
      complex4.divide(1.986821492305628E-8);
      Complex complex15 = complex14.multiply(1.986821492305628E-8);
      complex12.INF.nthRoot(1870044067);
      complex11.readResolve();
      complex12.sqrt1z();
      complex10.createComplex(6.283185307179586, 3009.78);
      complex15.sinh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-275.8428), 3866.0);
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.6725504880860582E13, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex2.cos();
      complex2.divide((double) 1087);
      Complex complex3 = complex0.tanh();
      Complex.valueOf(Double.NaN);
      complex3.getField();
      Complex.valueOf(Double.NaN, (-1999.7));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex.valueOf((-1.0), (-1.0));
      Complex complex0 = Complex.valueOf(597.949202998602, 5.33839690397E-312);
      Complex complex1 = Complex.valueOf((-3729.92185), 35.110613911696404);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.divide((-1.0));
      complex2.tanh();
      Complex complex4 = complex3.log();
      Complex complex5 = new Complex((-3729.92185), (-1.0));
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.valueOf(1448.50836086, 2103.32810981);
      complex7.acos();
      complex2.asin();
      Complex complex8 = Complex.I;
      complex8.getField();
      complex4.conjugate();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.NaN.cosh();
      complex0.NaN.createComplex(459.7047929, (-5366.8640675));
      Complex complex3 = complex2.NaN.multiply(complex1);
      complex3.I.toString();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.NaN.divide(complex0);
      complex2.NaN.createComplex((-5366.8640675), (-5366.8640675));
      complex4.readResolve();
      Complex complex6 = complex1.cosh();
      complex2.ONE.atan();
      complex6.tanh();
      Complex complex7 = complex0.log();
      complex7.sqrt();
      int int0 = (-1195);
      try { 
        complex5.nthRoot((-1195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,195
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(967.491, 967.491);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      // Undeclared exception!
      complex0.nthRoot(2147222524);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(967.491);
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex.valueOf((-1.0), (-1.0));
      Complex complex0 = Complex.valueOf(0.4788752794265747, (-3729.92185));
      Complex complex1 = Complex.valueOf((-3729.92185), 2250.4);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.add(complex0);
      complex3.I.pow(complex0);
      Complex.valueOf((-20.0));
      Complex complex4 = complex1.add(complex3);
      complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 1528.9662498942696;
      Complex complex0 = Complex.valueOf(1528.9662498942696, (-628.061457448417));
      complex0.NaN.hashCode();
      complex0.sinh();
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 35.110613911696404);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      complex1.nthRoot(1305);
      Complex complex2 = new Complex((-1.0), 4696.0631717);
      complex1.multiply(70);
      Complex complex3 = Complex.valueOf((double) 1305, Double.NaN);
      complex3.INF.pow((double) 1305);
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 35.110613911696404);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.isNaN();
      Complex complex2 = new Complex(35.110613911696404, Double.POSITIVE_INFINITY);
      complex2.getField();
      complex2.multiply(complex0);
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(35.110613911696404);
      Complex complex1 = complex0.I.cosh();
      complex0.NaN.abs();
      complex1.ZERO.getField();
      Complex complex2 = complex0.cosh();
      complex1.NaN.abs();
      complex0.getField();
      complex0.NaN.reciprocal();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex1.I.sinh();
      complex6.ZERO.subtract(1.0);
      Complex complex7 = Complex.valueOf(Double.NaN, 35.110613911696404);
      Complex complex8 = complex4.divide(451.532212);
      Complex complex9 = complex5.pow(complex8);
      Complex complex10 = complex9.sin();
      Complex complex11 = complex7.subtract(complex0);
      complex8.add(Double.NaN);
      complex7.cosh();
      complex1.atan();
      complex2.add(35.110613911696404);
      Complex complex12 = complex11.negate();
      complex12.ONE.pow(35.110613911696404);
      complex4.sinh();
      complex11.add(419.4);
      complex10.reciprocal();
      Complex complex13 = complex1.atan();
      complex13.subtract(2.3524770736694336);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(35.110613911696404, 35.110613911696404);
      Complex complex2 = Complex.valueOf((-3605.543861156018), (-4241.2));
      Complex complex3 = Complex.valueOf(35.110613911696404, (-2546.366917));
      Complex complex4 = complex3.exp();
      complex1.add(complex2);
      complex2.divide((-3.1516131027023284E-8));
      complex4.tanh();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 0.4788752794265747);
      complex5.log();
      Complex complex6 = new Complex((-2777.21391196), 0.4788752794265747);
      complex2.multiply(863);
      Complex complex7 = Complex.I;
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.acos();
      complex9.asin();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = new Complex((-420.0), Double.POSITIVE_INFINITY);
      complex11.asin();
      Complex complex12 = Complex.ZERO;
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.atan();
      Complex complex1 = complex0.atan();
      complex1.nthRoot(3806);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(35.110613911696404, 35.110613911696404);
      complex0.readResolve();
      Complex complex2 = new Complex(35.110613911696404);
      complex1.equals(complex2);
      complex1.nthRoot(1386);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.multiply(complex1);
      complex4.reciprocal();
      complex7.tan();
      Complex complex8 = Complex.I;
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-2.76891678604868), 2.414213562373056);
      Complex complex3 = complex1.sinh();
      complex1.abs();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex3.createComplex(2250.4, (-2.76891678604868));
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.add(complex1);
      Complex complex8 = complex6.divide(complex4);
      Complex complex9 = new Complex(3173.3673);
      complex8.divide(complex3);
      complex7.readResolve();
      complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-294.9900927489263), (-2332.795));
      complex0.readResolve();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.getImaginary();
      Complex complex1 = complex0.sin();
      complex1.getImaginary();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ONE;
      complex2.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = Complex.I;
      complex0.getImaginary();
      complex2.multiply((-1.0));
      complex1.getReal();
      complex2.sqrt1z();
      complex2.cosh();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex1.sqrt1z();
      complex4.ONE.toString();
      Complex complex5 = new Complex((-1909.31415));
      complex3.pow(complex5);
      complex3.INF.readResolve();
      Complex complex6 = complex0.log();
      complex6.I.pow(1.0);
      Complex complex7 = Complex.valueOf(1.0657703081219677E51, 0.05551928305349284);
      complex1.tan();
      Complex complex8 = complex7.I.add((-421.88687));
      complex2.subtract(complex7);
      Complex complex9 = complex0.conjugate();
      complex7.cos();
      complex9.readResolve();
      complex9.ZERO.reciprocal();
      Complex complex10 = complex9.subtract(3099.280866267507);
      Complex complex11 = complex6.sinh();
      complex8.add(1.0657703081219677E51);
      complex5.asin();
      complex10.getField();
      complex1.sqrt();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4962.47, 3992.0);
      Complex complex1 = complex0.sinh();
      complex1.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex((-3729.92185), (-4.342161053332263E165));
      complex0.exp();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.divide(1.7934537145592996E-17);
      complex2.tanh();
      complex5.log();
      complex0.multiply(779);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.acos();
      complex0.asin();
      complex7.acos();
      complex6.isNaN();
      complex6.tanh();
      complex3.acos();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-21.37900123214646), 2.414213562373056);
      Complex complex3 = complex1.sinh();
      complex1.abs();
      complex2.tan();
      Complex complex4 = Complex.valueOf(2250.4);
      complex4.add(complex3);
      Complex complex5 = complex1.exp();
      complex5.add(complex1);
      Complex complex6 = new Complex((-437.453360079438), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tan();
      complex2.createComplex((-3729.92185), (-3729.92185));
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex0.getImaginary();
      complex2.multiply((-1.0));
      complex1.getReal();
      complex2.sqrt1z();
      complex2.cosh();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex((-1.0), 4916.663150254185);
      complex1.cos();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      complex0.abs();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 388.5469447);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.createComplex(Double.POSITIVE_INFINITY, (-2.091778723371942));
      Complex complex5 = complex3.exp();
      Complex complex6 = complex5.add(complex2);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.ZERO;
      complex7.tanh();
      Complex complex8 = complex0.log();
      complex4.multiply(2811);
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex6.acos();
      complex9.asin();
      Complex.valueOf((-3647.1771618));
      complex8.readResolve();
      Complex complex11 = Complex.ONE;
      complex10.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      complex2.divide(complex0);
      Complex complex3 = complex1.divide((-1481.80742221202));
      Complex complex4 = complex2.asin();
      complex2.multiply(complex3);
      Complex complex5 = complex4.sin();
      complex2.nthRoot(1242);
      Complex complex6 = Complex.ZERO;
      complex6.multiply((-1587));
      Complex complex7 = complex1.asin();
      complex4.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, 27.718714343203104);
      Complex complex8 = complex1.createComplex(0.0, (-1.4728503265359905E-4));
      complex4.toString();
      Complex complex9 = Complex.valueOf(0.0);
      complex8.sinh();
      Complex complex10 = Complex.I;
      complex9.equals(complex10);
      complex5.tan();
      complex7.acos();
      complex5.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.0, 4.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex0.negate();
      Complex.valueOf(4.0, 4.0);
      Complex complex5 = Complex.valueOf(1534.7646, 1534.7646);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.I.add(1534.7646);
      complex6.INF.pow(complex4);
      complex2.multiply(905);
      complex0.ZERO.toString();
      complex3.atan();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, (-1.0));
      complex1.NaN.subtract(complex7);
      complex4.I.tan();
      try { 
        complex4.nthRoot((-2049870754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,049,870,754
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3394.777857375));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex3.INF.multiply(complex2);
      Complex complex5 = Complex.valueOf((-3394.777857375));
      Complex complex6 = complex5.INF.sqrt();
      complex6.I.nthRoot(1);
      complex1.nthRoot(1);
      complex5.ONE.divide(complex0);
      complex3.getArgument();
      complex0.equals(complex1);
      complex3.hashCode();
      complex3.hashCode();
      Complex complex7 = complex3.negate();
      Complex complex8 = Complex.ZERO;
      complex8.acos();
      complex4.asin();
      complex8.sqrt1z();
      complex5.divide(complex1);
      Complex complex9 = Complex.I;
      complex7.add(complex9);
      complex1.hashCode();
      complex1.multiply(152);
      Complex complex10 = complex1.cosh();
      complex10.exp();
      Complex complex11 = complex2.pow((double) 1);
      complex10.getImaginary();
      complex10.getImaginary();
      Complex complex12 = complex11.acos();
      complex12.isNaN();
      complex12.tanh();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4962.47, 3992.0);
      Complex complex1 = complex0.sinh();
      complex1.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex((-3729.92185), (-4.342161053332263E165));
      complex0.exp();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.divide(1.7934537145592996E-17);
      Complex complex6 = complex2.tanh();
      complex5.log();
      complex0.multiply(779);
      Complex complex7 = complex2.reciprocal();
      complex7.acos();
      complex0.asin();
      Complex.valueOf((-2121.7814286419234));
      complex6.readResolve();
      Complex complex8 = Complex.ONE;
      complex8.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-3729.92185));
      Complex complex1 = complex0.NaN.sinh();
      complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex((-3729.92185), (-3729.92185));
      Complex complex4 = complex0.NaN.exp();
      Complex complex5 = complex2.NaN.add(complex3);
      Complex complex6 = complex3.divide((-3647.1771618));
      Complex complex7 = complex0.tanh();
      complex1.log();
      Complex complex8 = complex5.multiply((-390));
      complex3.reciprocal();
      complex4.acos();
      complex7.asin();
      Complex.valueOf((-3647.1771618));
      complex6.readResolve();
      Complex complex9 = Complex.valueOf((double) 2811);
      Complex complex10 = complex9.multiply(complex8);
      complex10.equals("_:lcAU'DoEs?CZb'./A");
      complex8.multiply((-3729.92185));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.divide((-2293.3));
      Complex complex6 = complex4.asin();
      Complex complex7 = complex5.multiply(complex6);
      Complex complex8 = complex7.sin();
      complex5.nthRoot(1242);
      complex4.multiply(1242);
      complex2.asin();
      complex2.sqrt1z();
      Complex complex9 = Complex.valueOf((-879.0), 1.1102230246251565E-16);
      complex9.toString();
      Complex.valueOf(1.0605288965077546E132);
      complex5.sinh();
      complex6.equals("L92^Xv9{;v");
      complex3.tan();
      complex8.isInfinite();
      complex9.cosh();
      Complex.valueOf(0.41421356237309515);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.divide(complex0);
      complex2.add(complex0);
      complex3.hashCode();
      complex3.multiply(1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex4.pow(0.9999998758299997);
      complex0.getImaginary();
      complex1.getImaginary();
      Complex complex7 = complex6.acos();
      complex7.isNaN();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-3729.92185));
      Complex complex1 = complex0.NaN.sinh();
      complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex((-3729.92185), (-3729.92185));
      complex0.NaN.exp();
      Complex complex4 = complex2.NaN.add(complex3);
      complex4.ONE.divide((-2433.065300779049));
      Complex complex5 = complex3.divide((-3647.1771618));
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex3.log();
      Complex complex8 = complex7.multiply(2811);
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex8.createComplex((-3083.7103972), (-3647.1771618));
      complex5.cosh();
      Complex complex12 = Complex.ONE;
      complex12.getImaginary();
      complex10.toString();
      complex2.isNaN();
      complex11.cosh();
      complex9.add(1443.5836016443445);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(675.72604535, 675.72604535);
      complex0.readResolve();
      Complex complex1 = new Complex((-2006.67331070123), 675.72604535);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex0.getImaginary();
      complex1.sin();
      Complex complex2 = new Complex((-1.0), (-2006.67331070123));
      complex2.getImaginary();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex3.I.atan();
      complex4.toString();
      Complex complex5 = complex1.I.sin();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex6.INF.add(0.0);
      complex7.sqrt1z();
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex0.I.add(complex3);
      Complex complex10 = complex8.ZERO.divide(Double.POSITIVE_INFINITY);
      complex8.atan();
      complex1.tanh();
      Complex complex11 = complex7.multiply(7);
      complex11.asin();
      complex9.sqrt1z();
      Complex complex12 = Complex.valueOf((-1.0), 0.0);
      complex4.createComplex(Double.POSITIVE_INFINITY, 1.1524517700923597E7);
      complex2.toString();
      Complex.valueOf(0.0);
      Complex complex13 = Complex.valueOf((-1.0));
      Complex complex14 = complex13.sinh();
      Object object0 = new Object();
      complex12.equals(object0);
      complex6.tan();
      complex10.acos();
      complex14.isNaN();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.sinh();
      complex0.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex((-3729.92185), (-3729.92185));
      double double0 = (-3647.1771618);
      complex3.exp();
      Complex complex4 = complex1.add(complex2);
      complex4.divide((-3647.1771618));
      try { 
        complex1.ONE.nthRoot((-843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -843
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-473.3605462229), (-473.3605462229));
      Complex complex1 = complex0.sinh();
      complex0.abs();
      complex0.tan();
      Complex complex2 = complex0.createComplex(669.4329043607615, (-1.0));
      complex2.exp();
      Complex complex3 = Complex.valueOf(6.283185307179586);
      complex2.add(complex3);
      Complex complex4 = complex1.divide(6.283185307179586);
      Complex complex5 = complex1.tanh();
      complex0.log();
      complex4.multiply(2811);
      complex5.reciprocal();
      Complex complex6 = complex4.acos();
      complex6.asin();
      Complex.valueOf(3048.15311484);
      complex6.readResolve();
      Complex complex7 = Complex.valueOf((-3647.1771618));
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1088.496041);
      Complex complex1 = complex0.multiply(1088.496041);
      complex0.abs();
      Complex complex2 = complex0.ONE.subtract(1088.496041);
      complex0.I.reciprocal();
      complex0.hashCode();
      complex0.pow(1088.496041);
      complex0.log();
      Complex complex3 = Complex.ONE;
      complex1.subtract(complex3);
      complex2.pow(1088.496041);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1088.496041);
      Complex complex1 = complex0.multiply(1088.496041);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.createComplex(1088.496041, 2.0);
      complex2.exp();
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex5.divide((-1281.7));
      complex1.tanh();
      complex2.log();
      Complex complex7 = complex4.multiply(2811);
      Complex complex8 = complex6.reciprocal();
      complex0.acos();
      complex1.asin();
      Complex.valueOf((-3647.1771618));
      complex7.readResolve();
      complex6.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-3729.92185));
      complex0.NaN.sinh();
      Complex complex1 = Complex.ZERO;
      complex1.isNaN();
      complex0.reciprocal();
      Complex.valueOf(0.41421356237309515);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex1.INF.reciprocal();
      complex3.I.atan();
      complex0.ONE.toString();
      Complex complex4 = complex1.I.sin();
      complex4.ZERO.log();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.ONE;
      complex6.sin();
      Complex complex7 = complex4.asin();
      complex3.multiply((-3052.61460510977));
      complex0.nthRoot(7);
      Complex complex8 = complex7.reciprocal();
      complex3.abs();
      complex8.toString();
      Complex complex9 = complex5.sqrt1z();
      complex8.subtract((double) 7);
      complex2.multiply((-4082));
      Complex complex10 = Complex.ONE;
      complex9.equals(complex10);
      complex2.getImaginary();
      complex9.sin();
      Complex complex11 = Complex.INF;
      complex11.getImaginary();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-1638.19149998));
      double double0 = (-82.88);
      Complex complex3 = Complex.valueOf((-82.88));
      Complex complex4 = complex0.add((-1638.19149998));
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex4.divide(complex1);
      complex5.add(complex1);
      complex4.divide((-82.88));
      Complex complex7 = complex0.atan();
      complex6.tanh();
      Complex complex8 = complex7.subtract((-620.9972012));
      Complex complex9 = Complex.valueOf(0.0);
      complex9.acos();
      complex1.conjugate();
      complex8.getArgument();
      complex3.getArgument();
      complex9.cosh();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = Complex.valueOf((-3729.92185));
      Complex complex6 = complex4.sqrt();
      complex5.nthRoot(4293);
      complex0.getArgument();
      complex4.equals(complex1);
      complex5.hashCode();
      complex2.hashCode();
      complex2.negate();
      Complex complex7 = complex3.acos();
      complex3.asin();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = new Complex((-1.0));
      complex9.divide(complex1);
      Complex complex10 = complex0.add(complex4);
      complex2.hashCode();
      complex5.multiply((-1104));
      complex7.exp();
      complex6.pow((-2.8245462428022094E-8));
      complex10.getImaginary();
      complex9.getImaginary();
      complex2.isInfinite();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3394.777857375));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.sinh();
      complex2.abs();
      Complex complex3 = complex2.tan();
      complex2.createComplex((-344.84609300798), (-77.207));
      Complex complex4 = new Complex(2.0);
      complex4.exp();
      Complex complex5 = Complex.valueOf((-344.84609300798));
      complex5.add(complex4);
      Complex complex6 = Complex.ZERO;
      complex6.divide(35.110613911696404);
      complex1.tanh();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.multiply(1000);
      complex3.reciprocal();
      Complex complex9 = complex6.acos();
      complex1.asin();
      Complex.valueOf(2.0);
      complex8.readResolve();
      complex9.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply((-1638.19149998));
      Complex complex3 = Complex.valueOf((-82.88));
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex0.asin();
      complex1.equals(complex4);
      complex1.hashCode();
      complex1.hashCode();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex5.acos();
      Complex complex9 = new Complex(533.7);
      complex9.asin();
      complex8.sqrt1z();
      Complex complex10 = complex1.divide(complex7);
      complex2.add(complex3);
      complex7.hashCode();
      complex6.multiply(7);
      complex5.cosh();
      Complex complex11 = complex7.exp();
      complex3.pow((double) 7);
      complex5.getImaginary();
      complex11.getImaginary();
      complex2.isInfinite();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = Complex.valueOf((-1028.7263078431), (-1611.15367467802));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.sinh();
      complex2.abs();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex1.createComplex(1911.568460682741, (-1611.15367467802));
      Complex complex7 = complex0.exp();
      complex4.add(complex7);
      complex2.divide(2.343525263620692E-8);
      Complex complex8 = Complex.valueOf((-1028.7263078431), 2.343525263620692E-8);
      complex8.tanh();
      complex2.log();
      complex5.multiply(2811);
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex9.acos();
      complex10.asin();
      Complex.valueOf(3.425518820814759);
      complex4.readResolve();
      complex2.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.338733196258545, 1.6544084224626834E220);
      complex0.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.asin();
      complex0.ONE.pow(complex1);
      complex1.I.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = Complex.INF;
      complex2.multiply(complex3);
      complex1.INF.abs();
      complex0.createComplex(6.283185307179586, 0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      complex0.I.toString();
      Complex complex2 = complex1.I.pow(complex0);
      complex1.I.tan();
      Complex complex3 = complex2.INF.divide((-2940.9));
      Complex complex4 = complex2.asin();
      complex1.ZERO.multiply(complex0);
      Complex complex5 = complex0.sin();
      complex0.nthRoot(1242);
      Complex complex6 = complex0.multiply((-1587));
      complex5.asin();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = Complex.valueOf((double) (-1587), Double.POSITIVE_INFINITY);
      complex8.I.createComplex((-1587), 1.0);
      complex7.toString();
      Complex complex9 = Complex.valueOf((-1297.046422261252));
      Complex complex10 = complex9.NaN.sinh();
      complex6.equals("(0.0, 1.0)");
      complex3.tan();
      complex10.acos();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      complex1.NaN.multiply(complex0);
      complex0.isInfinite();
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.add(complex0);
      Complex complex3 = Complex.valueOf(2.5257552661512635E-165, 2.5257552661512635E-165);
      complex3.ZERO.hashCode();
      Complex complex4 = complex3.I.add(2.5257552661512635E-165);
      complex4.tanh();
      complex3.isInfinite();
      Complex.valueOf(1.8122539547625083E-230, 1.8122539547625083E-230);
      complex4.divide(1.8122539547625083E-230);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ZERO.add(0.0);
      complex0.ONE.toString();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.INF.reciprocal();
      complex0.toString();
      complex3.NaN.toString();
      complex2.ZERO.cos();
      Complex complex5 = complex0.tanh();
      complex3.INF.multiply(complex1);
      complex1.isInfinite();
      complex2.getField();
      Complex complex6 = complex3.reciprocal();
      complex0.ONE.divide(0.0);
      complex6.ZERO.cos();
      Complex complex7 = complex6.divide((-1611.15367467802));
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = Complex.valueOf((-2096.9262479765594));
      complex9.ZERO.multiply((-1611.15367467802));
      complex9.NaN.getArgument();
      complex9.ZERO.readResolve();
      complex3.getReal();
      complex0.log();
      complex5.nthRoot(1);
      complex8.multiply(complex9);
      complex4.sin();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      complex0.INF.getField();
      Complex complex2 = complex0.atan();
      complex2.ZERO.multiply((-577.0557226037442));
      Complex complex3 = complex1.NaN.subtract((-4874.48908661));
      complex0.equals(complex2);
      complex2.I.abs();
      Complex complex4 = complex2.NaN.divide(0.0);
      complex4.ONE.multiply(0.0);
      Complex complex5 = complex1.divide(446.5381758);
      complex5.atan();
      complex2.isNaN();
      complex5.equals(complex0);
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-1082.420372748));
      complex1.getArgument();
      complex0.isNaN();
      Complex complex2 = complex1.multiply(complex0);
      complex2.NaN.acos();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex2.ONE.subtract((-3.141592653589793));
      complex1.equals(complex2);
      complex4.ZERO.tan();
      complex1.NaN.createComplex((-3.141592653589793), (-1082.420372748));
      Complex complex5 = complex0.asin();
      complex0.I.divide(complex3);
      Complex complex6 = complex5.multiply(0);
      Complex complex7 = complex5.ZERO.multiply(complex4);
      complex5.readResolve();
      complex7.getField();
      complex1.isInfinite();
      Complex complex8 = complex1.negate();
      complex8.multiply((-3682.0));
      complex7.subtract(complex6);
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1131.4758142041, 1131.4758142041);
      Complex complex1 = complex0.createComplex((-1.1570594692045927E-9), 1131.4758142041);
      Complex complex2 = Complex.ZERO;
      complex2.NaN.multiply(0.0);
      complex2.cos();
      complex1.NaN.cos();
      Complex complex3 = complex1.ZERO.add(complex2);
      complex3.cosh();
      complex1.subtract((-1.1570594692045927E-9));
      complex1.readResolve();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4065.404), (-4065.404));
      complex0.getArgument();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(0.0, (-2.356194490192345));
      complex3.ZERO.hashCode();
      complex2.abs();
      complex3.cos();
      Complex.valueOf((-2293.1762897088));
      complex0.getImaginary();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.getField();
      Complex complex2 = complex0.tanh();
      complex2.NaN.subtract(complex0);
      complex2.multiply((-2006.67331070123));
      complex0.getReal();
      complex2.sqrt1z();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.INF.conjugate();
      complex3.ZERO.multiply(complex0);
      complex0.getArgument();
      complex3.getImaginary();
      complex3.getField();
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex0.NaN.subtract(9.865115839786888E-9);
      complex4.ONE.negate();
      Complex complex5 = complex1.NaN.negate();
      complex5.ONE.divide(complex0);
      complex1.ZERO.getField();
      Complex complex6 = complex0.I.reciprocal();
      complex0.INF.getArgument();
      complex6.ZERO.subtract(complex1);
      Complex complex7 = complex6.I.divide(complex1);
      complex7.NaN.nthRoot(1186);
      complex0.NaN.getField();
      complex0.readResolve();
      Complex complex8 = Complex.valueOf(1720.7235134517362, 0.0);
      Complex complex9 = complex4.NaN.multiply(1186);
      complex9.ONE.getArgument();
      Complex.valueOf(0.7853981633974483);
      Complex complex10 = complex8.sinh();
      complex10.I.pow(complex2);
      complex1.log();
      complex10.tan();
      complex4.sqrt1z();
      complex3.sqrt();
      complex10.cos();
      complex7.getReal();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-3729.92185));
      Complex complex1 = complex0.NaN.sinh();
      complex1.INF.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.createComplex((-3729.92185), (-3729.92185));
      Complex complex4 = complex0.NaN.exp();
      complex2.NaN.add(complex3);
      Complex complex5 = complex3.divide((-3647.1771618));
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex3.log();
      complex7.multiply(2811);
      complex6.reciprocal();
      Complex complex8 = complex4.acos();
      complex5.asin();
      Complex complex9 = Complex.valueOf((-2133.36379628395));
      complex9.readResolve();
      complex9.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-2332.795));
      Complex complex1 = Complex.valueOf((-2332.795));
      complex0.INF.divide(complex1);
      Complex complex2 = new Complex((-2.8786263916116364E-10));
      complex2.ONE.divide(complex0);
      complex2.ONE.readResolve();
      Complex complex3 = complex2.I.add(0.0);
      complex0.multiply(complex2);
      complex0.conjugate();
      complex0.cos();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.multiply(Double.NaN);
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.createComplex(0.0, 0.0);
      complex5.divide(0.0);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.createComplex(1755.233682108688, (-4650.8));
      complex3.subtract(complex7);
      Complex complex8 = complex7.pow((-4650.8));
      complex6.asin();
      complex1.asin();
      complex2.tan();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-263.4089997));
      Complex complex2 = complex1.asin();
      complex2.ONE.nthRoot(247);
      complex0.I.sin();
      complex2.NaN.getArgument();
      complex2.multiply(247);
      Complex complex3 = complex2.NaN.add(57.625481995895);
      Complex complex4 = complex3.ONE.sin();
      complex4.subtract(Double.NaN);
      int int0 = 1;
      complex1.nthRoot(1);
      complex1.NaN.negate();
      complex1.getField();
      Complex complex5 = complex0.I.conjugate();
      complex5.INF.pow(complex2);
      try { 
        complex5.INF.nthRoot((-365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -365
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1088.496041);
      Complex complex1 = complex0.multiply(1088.496041);
      complex0.abs();
      Complex complex2 = complex0.ONE.subtract(3.4672966834277804E-186);
      complex0.I.reciprocal();
      complex0.hashCode();
      complex0.pow(1088.496041);
      complex0.log();
      Complex complex3 = Complex.ONE;
      complex1.subtract(complex3);
      complex2.pow(1088.496041);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.getField();
      complex0.ONE.log();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.I.atan();
      complex0.ONE.toString();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.INF.add(1.6793752843984384E-262);
      complex5.sqrt1z();
      Complex complex6 = complex0.divide(complex1);
      complex0.I.add(complex2);
      complex6.ZERO.divide(Double.POSITIVE_INFINITY);
      complex6.atan();
      complex1.tanh();
      complex1.subtract((-620.9972012));
      Complex.valueOf(0.0);
      complex3.acos();
      Complex complex7 = complex0.conjugate();
      complex7.getArgument();
      complex3.ONE.getArgument();
      complex3.ONE.cosh();
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-692.9214));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.add((-692.9214));
      complex0.ONE.add(complex1);
      complex0.INF.cosh();
      Complex complex3 = complex0.sin();
      complex3.getField();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.ZERO.sin();
      complex5.I.conjugate();
      Complex complex6 = complex4.asin();
      complex6.I.getField();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex((-1526.28), 1707.20325191135);
      Complex complex2 = complex1.ONE.subtract((-1980.943672427566));
      Complex complex3 = complex1.ONE.multiply(394);
      complex0.negate();
      Complex complex4 = complex0.ONE.sqrt();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex1.NaN.asin();
      complex7.multiply(299.0);
      complex1.isInfinite();
      Complex complex8 = complex3.multiply(394);
      complex8.ZERO.sqrt();
      complex8.ONE.conjugate();
      complex5.multiply((double) 394);
      Object object0 = complex6.readResolve();
      complex1.equals(object0);
      complex3.reciprocal();
      Complex complex9 = complex2.sin();
      complex9.ZERO.toString();
      complex4.isInfinite();
      complex0.getArgument();
      Object object1 = new Object();
      complex5.equals(object1);
      complex0.sin();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.subtract((-3547.2745614416913));
      complex2.ONE.hashCode();
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex2.ONE.multiply(complex3);
      complex2.abs();
      Complex complex5 = complex0.divide(complex3);
      complex4.ONE.divide(3547.2745614416913);
      Complex complex6 = complex4.I.createComplex(3547.2745614416913, 0.0);
      complex6.ONE.multiply((-1039));
      complex5.NaN.getArgument();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex5.INF.exp();
      complex8.ZERO.conjugate();
      complex7.INF.negate();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.NaN.pow(complex5);
      Complex complex11 = complex10.NaN.log();
      Complex complex12 = complex11.INF.subtract(complex1);
      complex12.sin();
      complex4.equals(complex9);
      complex7.isInfinite();
      complex11.reciprocal();
      complex5.multiply(734);
      complex1.abs();
      complex12.getArgument();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3099.28102759525), 0.0);
      complex0.getArgument();
      Complex complex1 = complex0.sqrt1z();
      complex1.divide(complex0);
      Complex complex2 = complex1.multiply(1);
      complex2.divide((double) 1);
      complex0.ONE.abs();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex2.ZERO.readResolve();
      complex1.NaN.sqrt1z();
      Complex.valueOf(4.725191397657393E289, 0.0);
      complex2.abs();
      complex2.isNaN();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 61.9336);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(703.0);
      Complex complex1 = new Complex(703.0);
      complex0.NaN.divide(703.0);
      Complex complex2 = complex0.divide(complex1);
      complex1.NaN.abs();
      Complex complex3 = complex1.pow(Double.NaN);
      complex3.I.hashCode();
      Complex complex4 = complex2.multiply(complex0);
      complex3.asin();
      complex2.NaN.readResolve();
      complex1.equals(complex0);
      complex0.multiply(4.920784622407246E-8);
      Complex complex5 = complex1.exp();
      complex5.ZERO.atan();
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex4.pow(0.0);
      Complex complex8 = complex7.negate();
      complex8.toString();
      complex6.getField();
      complex3.readResolve();
      complex7.reciprocal();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 750.0);
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.isNaN();
      complex0.reciprocal();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = (-1554);
      try { 
        complex0.nthRoot((-1554));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,554
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.INF.sinh();
      complex3.nthRoot(1937);
      Complex complex4 = complex0.divide((-62.2712539));
      Complex complex5 = complex1.NaN.add(20.0);
      Complex complex6 = complex5.ZERO.multiply(complex1);
      complex5.INF.getArgument();
      Complex complex7 = complex3.NaN.divide(0.0);
      Complex complex8 = complex4.ONE.cos();
      complex1.getArgument();
      Complex complex9 = complex8.log();
      complex3.multiply(complex8);
      complex9.sqrt();
      complex7.ONE.createComplex((-612.4575), 1.0);
      Complex complex10 = complex2.createComplex((-692.38), 0.0);
      Complex complex11 = complex4.sinh();
      complex11.INF.nthRoot(1937);
      complex7.getArgument();
      complex10.subtract((-2897.741));
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-505.54));
      complex0.getField();
      Complex complex1 = complex0.NaN.sqrt();
      complex1.ONE.abs();
      complex1.NaN.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex1.tanh();
      complex6.I.sinh();
      Complex complex7 = complex5.subtract(complex3);
      Complex complex8 = complex6.cos();
      complex2.subtract(complex5);
      Complex complex9 = complex4.NaN.createComplex((-505.54), 20.0);
      complex9.INF.reciprocal();
      complex8.tanh();
      Complex complex10 = complex3.ZERO.createComplex((-505.54), 0.0);
      Complex complex11 = complex7.asin();
      Complex complex12 = complex3.sinh();
      complex3.cosh();
      Complex complex13 = complex5.INF.add(1.0);
      complex4.createComplex(0.0, (-537.208270844488));
      complex10.toString();
      Complex complex14 = complex11.multiply(0.0);
      complex2.INF.pow(complex8);
      complex8.pow(complex11);
      complex10.acos();
      complex7.equals(complex14);
      complex2.conjugate();
      complex13.multiply((-3987));
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(531.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.cos();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ZERO.divide(complex1);
      Complex complex5 = complex1.INF.sin();
      complex5.toString();
      Complex complex6 = complex1.multiply(1);
      Complex complex7 = complex3.exp();
      complex6.asin();
      complex7.ZERO.subtract(Double.POSITIVE_INFINITY);
      complex6.isInfinite();
      complex4.sqrt1z();
      complex5.getArgument();
      complex7.pow(0.0);
      Complex complex8 = complex0.subtract(531.0);
      complex5.cosh();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1517.7718588223627);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.add(complex0);
      complex0.getImaginary();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.sqrt1z();
      complex4.INF.multiply(2104);
      complex3.ONE.nthRoot(181);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.INF.subtract((double) 181);
      Complex complex6 = complex2.negate();
      complex0.createComplex(0.0, 0.0);
      complex0.createComplex(0.0, 219.4397);
      complex6.createComplex(0.0, 2628.678);
      Complex.valueOf(1368.69639);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3730.50092);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.INF.subtract(complex1);
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.multiply((-1.0126616322947826E158));
      Complex complex6 = complex5.multiply(0.0);
      complex0.NaN.sqrt1z();
      complex4.INF.subtract(1824.97281959691);
      Complex complex7 = complex6.INF.exp();
      complex4.log();
      Complex complex8 = Complex.valueOf(20.0);
      complex8.NaN.readResolve();
      Complex.valueOf(20.0, 3730.50092);
      Complex complex9 = complex2.reciprocal();
      complex0.pow(0.0);
      complex5.NaN.toString();
      Complex.valueOf(0.0);
      complex9.NaN.sqrt1z();
      Complex complex10 = complex3.pow(7.726344058192276E-172);
      Complex complex11 = complex9.reciprocal();
      complex10.readResolve();
      complex5.sinh();
      complex7.reciprocal();
      complex11.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.createComplex(0.6128603219985962, 0.6128603219985962);
      Complex complex4 = complex3.NaN.subtract(complex0);
      complex4.acos();
      Complex complex5 = complex2.ONE.exp();
      complex0.toString();
      Complex complex6 = complex0.acos();
      complex6.INF.conjugate();
      Complex complex7 = complex6.INF.add(complex1);
      Complex complex8 = complex6.subtract(0.0);
      Complex complex9 = complex8.INF.subtract(0.0);
      complex8.NaN.pow(0.6128603219985962);
      Complex complex10 = complex5.sinh();
      Complex complex11 = complex1.NaN.log();
      complex11.ONE.log();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex12 = complex2.subtract(complex10);
      Complex complex13 = complex5.tan();
      complex13.multiply(2);
      complex1.pow(complex2);
      Complex.valueOf((-1044.3489304));
      complex12.hashCode();
      complex9.cosh();
      complex12.subtract(1490.2);
      complex7.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1638.19149998));
      complex0.acos();
      complex0.multiply((-1638.19149998));
      Complex complex1 = Complex.valueOf((-82.88));
      Complex complex2 = complex0.tanh();
      complex2.NaN.sin();
      Complex complex3 = complex0.asin();
      complex3.ZERO.multiply(1993.8);
      complex1.nthRoot(7);
      Complex complex4 = complex0.reciprocal();
      complex4.abs();
      complex4.toString();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.subtract(4889.8574476);
      complex6.NaN.multiply(1);
      complex1.equals(complex3);
      complex4.getImaginary();
      complex1.sin();
      complex4.getImaginary();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply(1.1910135746002197);
      complex0.ZERO.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex0.NaN.subtract(complex1);
      complex2.getReal();
      Complex complex5 = complex0.INF.subtract(complex1);
      Complex complex6 = complex1.NaN.conjugate();
      complex0.NaN.getArgument();
      complex2.isInfinite();
      Complex complex7 = complex1.acos();
      complex7.negate();
      Complex complex8 = complex2.reciprocal();
      complex8.ZERO.multiply(Double.NaN);
      Complex complex9 = complex8.ZERO.sqrt1z();
      complex1.cosh();
      complex9.NaN.getArgument();
      complex8.ONE.asin();
      complex1.I.divide(Double.NaN);
      complex1.conjugate();
      complex7.acos();
      complex3.subtract(1.1910135746002197);
      complex5.log();
      complex4.getImaginary();
      complex4.acos();
      complex6.log();
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.multiply((-1004.3866976893587));
      Complex complex4 = complex3.ZERO.divide(0.0);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.multiply((-1004.3866976893587));
      complex6.multiply(2203);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex2.subtract(complex4);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex7.pow(complex9);
      complex10.ZERO.multiply(complex2);
      complex5.isNaN();
      complex8.INF.atan();
      complex7.cos();
      complex8.readResolve();
      complex10.asin();
      Complex.valueOf(0.0);
      complex5.nthRoot(2203);
      complex0.createComplex(2203, 0.0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3394.777857375));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex3.INF.multiply(complex2);
      Complex complex5 = Complex.valueOf((-3394.777857375));
      Complex complex6 = complex5.INF.sqrt();
      List<Complex> list0 = complex1.nthRoot(1);
      assertEquals(1, list0.size());
      
      double double0 = complex3.getArgument();
      assertEquals(0.0, double0, 0.01);
      
      complex0.equals(complex1);
      complex3.hashCode();
      complex2.ZERO.hashCode();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex8.INF.asin();
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex10.ONE.divide(complex8);
      complex11.ZERO.add(complex8);
      assertEquals(1.0000000000000002, complex11.getReal(), 0.01);
      
      complex4.hashCode();
      complex10.multiply(152);
      complex2.cosh();
      Complex complex12 = complex8.exp();
      Complex complex13 = complex12.ONE.pow(2.0);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      complex7.getImaginary();
      complex10.getImaginary();
      assertTrue(complex10.equals((Object)complex13));
      
      complex4.isInfinite();
      assertFalse(complex3.equals((Object)complex13));
      
      complex1.cosh();
      assertFalse(complex1.equals((Object)complex10));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.exp();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(0.0);
      complex0.negate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.ONE.divide(0.0);
      Complex complex5 = complex2.ONE.cosh();
      complex2.ZERO.getArgument();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex5.atan();
      complex8.NaN.toString();
      assertEquals(0.9957901442164847, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex6.multiply(0.0);
      Complex complex10 = complex6.NaN.negate();
      complex10.ZERO.atan();
      assertSame(complex10, complex4);
      
      Complex complex11 = complex5.createComplex(0.0, 0.0);
      Complex complex12 = complex3.subtract(6.283185307179586);
      Complex complex13 = complex2.add(complex6);
      assertSame(complex6, complex12);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertSame(complex13, complex9);
      
      Complex complex14 = complex7.reciprocal();
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex1.atan();
      assertTrue(complex15.equals((Object)complex11));
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1462.9578818424513), (-3379.7801));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.pow((-1559.010096246));
      Complex complex3 = complex2.NaN.tanh();
      assertEquals(0.9998742463777421, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex4 = complex0.divide(173.0);
      Complex complex5 = complex0.multiply(0);
      Complex complex6 = complex5.sqrt();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex4.exp();
      assertEquals((-1.3475219511422184E-4), complex7.getImaginary(), 0.01);
      assertEquals(1.6435621787588224E-4, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
  }
}
