/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:24:20 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2.4137404318673354E119);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.sqrt();
      complex1.multiply((-1282.0));
      Complex complex4 = complex3.multiply((-1721));
      complex2.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-1721));
      complex5.add(2.4137404318673354E119);
      complex5.tan();
      Complex complex7 = complex5.ZERO.log();
      complex3.nthRoot(1188);
      complex7.ZERO.sinh();
      complex4.abs();
      complex2.multiply(1188);
      complex1.cosh();
      Complex complex8 = new Complex((-4.0573420909530794E223), 1188);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.INF.pow(complex1);
      Complex complex2 = Complex.valueOf((-1.1524714043067699E-7), 20.0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.asin();
      complex4.atan();
      complex4.tan();
      complex2.pow((-2.6437112632041807E-8));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.0000000000000004, Double.POSITIVE_INFINITY);
      complex1.NaN.abs();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(7.707580304749759, (-108.927));
      complex0.getArgument();
      Complex complex1 = complex0.divide(3.0227439688367925E-44);
      Complex complex2 = complex1.divide(complex0);
      complex0.hashCode();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.add(complex2);
      complex4.hashCode();
      Complex complex5 = Complex.valueOf(7.707580304749759, 3.0227439688367925E-44);
      Complex complex6 = complex5.tan();
      complex0.readResolve();
      Complex complex7 = Complex.valueOf(7.70758);
      complex1.isInfinite();
      Complex complex8 = Complex.valueOf(7.70758, 7.70758);
      complex8.multiply(3.0227439688367925E-44);
      Complex complex9 = complex3.log();
      complex9.divide(complex0);
      complex4.pow(complex7);
      Complex complex10 = complex3.cos();
      complex5.cos();
      Complex complex11 = complex6.tanh();
      complex7.sin();
      Complex complex12 = new Complex(0.0);
      complex12.add(0.0);
      Complex complex13 = complex11.conjugate();
      complex13.equals(complex7);
      Complex complex14 = complex13.pow((-1.5001549318126055));
      complex7.multiply((-57));
      complex14.cosh();
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2.4137404318673354E119);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.cos();
      complex0.add(complex3);
      Complex complex4 = new Complex(1.4815967715704613E-8);
      complex4.INF.getField();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.valueOf(1.4815967715704613E-8, 5.380185921962174E-32);
      complex6.tanh();
      complex1.nthRoot(244);
      Complex complex7 = complex4.pow((-1.0));
      complex6.abs();
      complex3.multiply(1747);
      complex3.cosh();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
      
      Complex complex1 = complex0.reciprocal();
      complex0.multiply((-748.0));
      Complex complex2 = Complex.NaN;
      complex1.getArgument();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf((-800.0), (-20.0));
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.conjugate();
      Complex complex2 = complex1.tanh();
      complex2.nthRoot(4910);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2.4137404318673354E119);
      complex1.hashCode();
      Complex complex2 = complex1.cos();
      complex0.add(complex2);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(1.4815967715704613E-8, 2.4137404318673354E119);
      Complex complex5 = Complex.valueOf((-3515.617), 659.884);
      complex4.tanh();
      complex5.atan();
      complex4.tan();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-19.385193384186106));
      Complex complex2 = complex1.tanh();
      complex2.createComplex((-19.385193384186106), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide(Double.NaN);
      Complex complex2 = Complex.valueOf((double) 1073741651, 1.569897512034637);
      Complex complex3 = complex0.multiply(1073741651);
      complex0.ONE.nthRoot(1222);
      complex3.INF.getArgument();
      Complex complex4 = complex1.ZERO.multiply((double) 1073741651);
      Complex complex5 = complex1.NaN.sin();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.ZERO.sinh();
      complex7.I.atan();
      Complex complex8 = complex6.subtract((double) 1073741651);
      complex8.INF.add(complex5);
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex9.NaN.multiply(566);
      Complex complex11 = complex9.INF.atan();
      Complex complex12 = complex3.pow(1.569897512034637);
      Complex complex13 = complex6.atan();
      complex13.ONE.sqrt1z();
      Complex complex14 = complex13.ZERO.tanh();
      complex0.divide(complex14);
      complex0.multiply(complex12);
      complex5.multiply(0.7853981633974483);
      complex5.pow(0.7853981633974483);
      complex2.nthRoot(1222);
      Complex complex15 = complex2.exp();
      complex6.add((double) 1222);
      complex11.exp();
      complex10.pow(complex15);
      complex4.cosh();
      complex8.cosh();
      complex7.pow((double) 566);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.999999999999948, Double.POSITIVE_INFINITY);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.reciprocal();
      double double0 = 1.43E-8;
      complex2.divide(1.43E-8);
      complex0.ONE.asin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.sqrt1z();
      complex4.INF.abs();
      double double1 = (-333.19);
      complex0.add((-333.19));
      Complex complex5 = complex4.subtract(Double.POSITIVE_INFINITY);
      try { 
        complex5.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.8, 0.8);
      Complex complex1 = new Complex(0.8);
      complex0.reciprocal();
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-1112.576));
      Complex complex3 = complex2.asin();
      complex1.readResolve();
      Complex complex4 = complex1.sqrt();
      complex4.getField();
      complex2.multiply(3299.3920842067096);
      complex3.atan();
      complex1.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-215.7616181764637));
      complex6.atan();
      Complex complex7 = complex4.tan();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.log();
      Complex complex1 = Complex.valueOf((-1112.576));
      complex1.asin();
      complex1.readResolve();
      Complex complex2 = complex1.sqrt();
      complex2.getField();
      Complex complex3 = complex2.tanh();
      complex1.multiply(Double.NaN);
      complex1.atan();
      complex2.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex((-1.6114314525832115E-7));
      complex5.atan();
      complex3.tan();
      complex2.exp();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.log();
      Complex complex1 = Complex.valueOf((-1112.576));
      Complex complex2 = complex1.asin();
      complex1.readResolve();
      Complex complex3 = complex1.sqrt();
      complex3.getField();
      Complex complex4 = complex3.tanh();
      complex1.multiply(Double.NaN);
      complex1.atan();
      complex3.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-1.6114314525832115E-7));
      complex6.atan();
      complex4.tan();
      Complex.valueOf((-1166.6), 1.0);
      Complex.valueOf((-2426.5678), (-1.6114314525832115E-7));
      complex1.INF.cosh();
      Complex complex7 = complex2.tanh();
      complex6.pow(2541.8);
      complex6.pow((-662.0886422971));
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.3480763914637323E214, (-0.780274921947194));
      complex1.subtract(complex0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.multiply(Double.NaN);
      Complex complex4 = complex3.atan();
      complex0.getArgument();
      Complex complex5 = Complex.ZERO;
      complex0.atan();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf(1737.9477485, Double.NaN);
      complex7.getArgument();
      complex7.INF.add(complex2);
      Complex.valueOf(2156.17, (-680.4771882391));
      Complex complex8 = complex6.tanh();
      complex8.toString();
      complex4.nthRoot(1182);
      complex3.conjugate();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.INF.divide(Double.POSITIVE_INFINITY);
      complex4.ZERO.hashCode();
      complex0.getField();
      complex3.multiply(complex1);
      complex1.reciprocal();
      complex0.multiply(complex4);
      complex0.log();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = complex0.asin();
      complex2.readResolve();
      Complex complex3 = complex1.sqrt();
      complex3.getField();
      complex0.ONE.subtract(156.0);
      Complex complex4 = complex2.INF.tanh();
      complex2.multiply(Double.NaN);
      complex3.atan();
      complex2.getArgument();
      Complex complex5 = Complex.ZERO;
      complex5.atan();
      complex5.tan();
      Complex complex6 = Complex.valueOf((-1021.6663), 288.69379266);
      complex4.divide(288.69379266);
      complex6.divide(Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = complex0.asin();
      complex2.readResolve();
      Complex complex3 = complex1.sqrt();
      complex3.getField();
      complex2.INF.tanh();
      complex2.multiply(Double.NaN);
      complex2.atan();
      complex3.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.atan();
      complex1.tan();
      Complex complex6 = Complex.valueOf((-1.0), (-1.0));
      complex6.divide(Double.NaN);
      complex4.divide(Double.NaN);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex1.atan();
      complex0.getArgument();
      Complex complex3 = Complex.ZERO;
      complex2.atan();
      complex1.tan();
      Complex complex4 = Complex.valueOf((-20.0), (-164.119613094002));
      Complex.valueOf((-1518.7), 1.2111317421229415E158);
      complex4.tanh();
      complex3.add(complex0);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.NaN.multiply(89);
      Complex complex2 = complex1.conjugate();
      complex2.equals(complex1);
      complex2.multiply(1400);
      complex2.asin();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.getField();
      Complex complex2 = complex1.tanh();
      complex0.multiply(1797.6909660376);
      Complex complex3 = complex2.atan();
      complex3.getArgument();
      complex0.atan();
      complex1.getArgument();
      Complex complex4 = Complex.ZERO;
      complex3.atan();
      complex1.tan();
      Complex.valueOf(1420.69675218773, (-1118.7909));
      Complex.valueOf(931.28078, Double.NaN);
      Complex complex5 = complex4.tanh();
      complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex1.reciprocal();
      complex1.getArgument();
      Complex complex3 = complex1.divide((-1.5707963267948966));
      Complex complex4 = complex0.divide(complex3);
      complex4.hashCode();
      Complex complex5 = complex1.cos();
      complex5.add(complex2);
      Complex complex6 = new Complex((-1522.696200277));
      Complex complex7 = Complex.INF;
      complex0.isNaN();
      complex3.getField();
      complex7.getImaginary();
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.NaN;
      complex9.getReal();
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex10.multiply(complex6);
      complex11.pow((-1975.4376));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
      Complex complex1 = complex0.asin();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex1.exp();
      complex1.reciprocal();
      complex2.reciprocal();
      complex1.divide(687.3884864107);
      Complex complex4 = complex2.multiply((-579.019309));
      complex1.hashCode();
      Complex complex5 = complex3.multiply(complex0);
      complex5.ONE.sqrt();
      Complex complex6 = Complex.valueOf(0.5816917419433594, (-1056.5335665728626));
      complex2.cos();
      complex6.tan();
      complex4.divide((-3.862412756175274E-8));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(466.82);
      Complex complex1 = complex0.atan();
      complex1.ZERO.nthRoot(625);
      Complex complex2 = complex1.ONE.sinh();
      complex2.I.getField();
      complex2.I.getField();
      complex1.readResolve();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.acos();
      complex4.ONE.hashCode();
      Complex complex5 = complex0.INF.sin();
      complex5.I.multiply(complex2);
      Complex complex6 = complex1.createComplex((-1.0024879757453686), (-1.0024879757453686));
      complex1.reciprocal();
      complex4.toString();
      complex6.abs();
      Complex complex7 = complex6.exp();
      complex7.ZERO.add(complex3);
      complex7.exp();
      complex7.createComplex(1.4177320914150509, 466.82);
      Complex complex8 = complex4.subtract((-1.0024879757453686));
      complex8.divide(complex1);
      complex7.add(0.8813735870195429);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(2988.9744383923435, (-1097.090350921086));
      Complex complex2 = complex0.acos();
      complex2.I.hashCode();
      Complex complex3 = Complex.valueOf(1554.427030515813);
      complex1.ZERO.getArgument();
      complex0.reciprocal();
      complex2.pow(complex3);
      complex1.abs();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.3480763914637323E214, (-0.780274921947194));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.add(1.3480763914637323E214);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex5.tan();
      Complex complex8 = Complex.INF;
      complex1.divide(1.3480763914637323E214);
      complex7.getField();
      Complex complex9 = Complex.ONE;
      complex9.abs();
      complex6.sin();
      Complex complex10 = complex3.multiply((-1462));
      complex10.exp();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.3480763914637323E214, (-0.780274921947194));
      complex1.subtract(complex0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.multiply(Double.NaN);
      Complex complex4 = complex3.atan();
      complex0.getArgument();
      Complex complex5 = Complex.ZERO;
      complex0.atan();
      Complex complex6 = complex0.tan();
      Complex.valueOf(1737.9477485, Double.NaN);
      Complex.valueOf(2156.17, (-680.4771882391));
      Complex complex7 = complex6.tanh();
      complex7.toString();
      complex4.nthRoot(1182);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.asin();
      Object object0 = complex2.readResolve();
      object0.equals(complex1);
      Complex complex3 = complex2.multiply(1014);
      Complex complex4 = complex0.asin();
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.NaN.multiply(89);
      Complex complex2 = complex1.I.reciprocal();
      complex1.ONE.getArgument();
      Complex complex3 = complex0.divide(2.4137404318673354E119);
      Complex complex4 = complex0.divide(complex3);
      complex0.hashCode();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex0.NaN.add(complex4);
      Complex complex7 = new Complex((-0.9371115779906664));
      Complex complex8 = Complex.INF;
      complex0.isNaN();
      Object object0 = new Object();
      complex5.equals(object0);
      complex1.getField();
      complex2.getImaginary();
      complex6.getImaginary();
      Complex complex9 = Complex.ONE;
      complex7.getReal();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex1.getField();
      Complex complex2 = complex0.sqrt1z();
      complex2.abs();
      complex2.subtract(0.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = new Complex(4.97);
      Complex complex5 = Complex.INF;
      complex5.isInfinite();
      complex1.equals("H&_U?");
      complex3.getField();
      complex3.getImaginary();
      Complex complex6 = Complex.ONE;
      complex6.getReal();
      complex4.add(complex2);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      Complex complex1 = complex0.asin();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = Complex.ZERO;
      complex2.abs();
      Complex complex4 = Complex.ZERO;
      complex4.subtract(0.0);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = new Complex(0.0);
      Complex complex7 = Complex.INF;
      complex0.isNaN();
      complex6.equals(complex5);
      complex0.getField();
      complex6.getImaginary();
      Complex complex8 = Complex.ONE;
      complex8.ONE.subtract(2.782159649779516);
      complex1.getReal();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-5.433154287341921E-8), (-5.433154287341921E-8));
      complex0.ZERO.log();
      Complex complex1 = Complex.valueOf(3612.8254350577454, (-0.8414709848078965));
      complex0.getField();
      complex1.getReal();
      complex1.toString();
      Complex complex2 = new Complex(3612.8254350577454);
      Complex complex3 = complex2.INF.subtract(complex0);
      complex3.ONE.log();
      complex3.I.conjugate();
      Complex.valueOf((-0.8414709848078965));
      Complex complex4 = complex0.NaN.subtract(3612.8254350577454);
      complex4.negate();
      complex4.ZERO.multiply(complex3);
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.sqrt();
      Complex.valueOf(2683.47714568, 3612.8254350577454);
      Complex complex7 = new Complex(204.756165114379, 1995.69);
      Complex complex8 = complex2.subtract(complex7);
      complex8.subtract(complex1);
      Complex complex9 = complex5.sinh();
      complex6.tanh();
      complex9.conjugate();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.3480763914637323E214, (-0.780274921947194));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.add(1169.883586);
      complex3.hashCode();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.asin();
      complex0.cos();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.divide((-0.780274921947194));
      Complex.valueOf(1169.883586);
      complex7.multiply(complex3);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.equals(complex1);
      complex1.multiply(1);
      Complex complex2 = complex1.asin();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.3480763914637323E214, (-0.780274921947194));
      Complex complex2 = complex1.subtract(complex0);
      double double0 = 1169.883586;
      Complex complex3 = complex2.add(1169.883586);
      complex3.hashCode();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex5.tan();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex1.divide(1.3480763914637323E214);
      complex7.getField();
      Complex complex10 = Complex.ONE;
      complex10.abs();
      Complex complex11 = complex6.sin();
      complex6.pow(complex4);
      Complex.valueOf((-0.780274921947194));
      complex11.divide(complex0);
      Complex complex12 = Complex.NaN;
      complex12.multiply(0.8813735870195428);
      Complex complex13 = Complex.valueOf(1.3480763914637323E214, (-38.776378));
      Complex complex14 = complex13.sinh();
      complex3.hashCode();
      complex14.sqrt();
      complex11.readResolve();
      complex9.tanh();
      Complex complex15 = Complex.valueOf(1.0, (-264.268454419982));
      try { 
        complex15.nthRoot((-122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -122
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.asin();
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex1.sqrt();
      complex4.getField();
      Complex complex5 = complex2.multiply(Double.NaN);
      complex2.subtract(Double.NaN);
      complex3.sqrt();
      Complex complex6 = new Complex(Double.NaN);
      Complex complex7 = Complex.INF;
      complex1.isNaN();
      complex6.equals("");
      complex4.getField();
      complex4.getImaginary();
      Complex complex8 = Complex.ONE;
      complex5.getReal();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.asin();
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex1.sqrt();
      complex4.getField();
      complex2.multiply(Double.NaN);
      Complex complex5 = complex2.atan();
      complex1.log();
      Complex complex6 = complex4.divide(complex2);
      complex3.pow(complex1);
      complex6.cos();
      complex6.cos();
      complex3.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.ZERO;
      complex8.sin();
      Complex complex9 = new Complex(3612.8254350577454);
      complex9.add(Double.NaN);
      Complex complex10 = complex0.conjugate();
      Complex complex11 = (Complex)complex10.readResolve();
      complex5.equals(complex11);
      complex10.pow(3612.8254350577454);
      complex5.multiply(2684);
      complex1.pow((double) 1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1);
      complex1.hashCode();
      Complex complex2 = Complex.valueOf(2.6961527829274643E215, 2.6961527829274643E215);
      Complex complex3 = complex1.tan();
      complex3.readResolve();
      complex3.isInfinite();
      complex1.multiply(2.6961527829274643E215);
      complex1.getArgument();
      Complex complex4 = Complex.ZERO;
      complex3.atan();
      Complex complex5 = Complex.INF;
      complex5.tan();
      Complex.valueOf((-0.8862269254527579), (-0.8862269254527579));
      Complex.valueOf(2490.227380989395, (-4384.22));
      complex2.toString();
      complex1.cos();
      Complex complex6 = Complex.valueOf((-4384.22), (-1338.7318775544002));
      Complex complex7 = Complex.INF;
      complex6.divide(complex7);
      complex3.cos();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
      Complex complex1 = complex0.INF.multiply(2.6961527829274643E215);
      complex1.INF.sinh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.asin();
      complex2.readResolve();
      Complex complex3 = complex1.sqrt();
      complex3.getField();
      Complex complex4 = complex2.multiply(Double.NaN);
      complex2.atan();
      complex3.getArgument();
      Complex complex5 = Complex.ZERO;
      complex5.atan();
      complex1.tan();
      Complex complex6 = Complex.valueOf(0.7853981633974484, Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf((-1076.774245779692), 1.3480763914637323E214);
      complex5.toString();
      Complex complex8 = Complex.valueOf((-1.1564717694090882E-280));
      complex8.cos();
      complex4.divide(complex6);
      complex8.getArgument();
      complex7.cos();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.1564717694090882E-280));
      Complex complex1 = complex0.ONE.add(1.0);
      Complex complex2 = Complex.valueOf(2.3686132431030273, 2.782159649779516);
      Complex complex3 = Complex.valueOf((-680.4771882391), 2.3686132431030273);
      complex1.toString();
      complex2.cos();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide(complex3);
      complex5.getArgument();
      complex5.cos();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.3480763914637323E214, (-0.780274921947194));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.add(1169.883586);
      complex3.hashCode();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.asin();
      complex0.cos();
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.multiply(2183.0);
      Complex complex10 = complex4.log();
      Complex complex11 = Complex.valueOf((-538.0), 1708.692);
      Complex complex12 = complex11.divide(complex1);
      Complex complex13 = complex6.pow(complex5);
      complex10.cos();
      complex12.cos();
      complex4.tanh();
      Complex complex14 = Complex.INF;
      complex5.sin();
      Complex complex15 = complex13.add(4837.0283201);
      complex9.conjugate();
      complex11.equals(complex10);
      complex6.pow((-810.34329));
      Complex complex16 = Complex.valueOf((-1198.232468364));
      complex16.multiply(1);
      complex15.pow((-241.7625154273));
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      complex1.NaN.divide(complex0);
      complex1.INF.nthRoot(8388607);
      Complex complex2 = new Complex((-1534.599077293749), (-665.763801));
      complex0.add(complex2);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.asin();
      complex2.readResolve();
      Complex complex3 = complex1.sqrt();
      complex3.getField();
      Complex complex4 = complex2.multiply(Double.NaN);
      complex2.atan();
      complex3.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.I;
      complex5.INF.subtract(complex6);
      complex4.multiply((-915));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex4 = complex1.subtract(1892.1636);
      complex4.atan();
      complex1.isInfinite();
      complex3.atan();
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply(1);
      Complex complex1 = complex0.negate();
      complex1.NaN.hashCode();
      complex1.tanh();
      Complex complex2 = Complex.INF;
      complex2.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex((-4793.2), 0.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.NaN.add(1169.883586);
      complex0.INF.hashCode();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex0.ZERO.asin();
      Complex complex6 = complex2.cos();
      complex0.tan();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.divide(3.8331545111676784E-249);
      complex6.getField();
      complex5.abs();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex2.pow(complex9);
      Complex complex11 = complex8.multiply(1169.883586);
      Complex complex12 = complex4.sinh();
      complex6.hashCode();
      Complex complex13 = complex10.sqrt();
      complex12.readResolve();
      complex7.sin();
      complex6.getField();
      Complex complex14 = complex5.sqrt1z();
      complex4.abs();
      complex13.subtract(732.53);
      complex8.sqrt();
      complex14.isNaN();
      Complex complex15 = new Complex(3.8331545111676784E-249, Double.NaN);
      complex5.equals(complex15);
      complex6.getField();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = Complex.ZERO;
      complex3.pow(complex0);
      Complex complex4 = Complex.valueOf((-0.9164027078115349), 0.9164027078115349);
      complex1.subtract(0.9164027078115349);
      complex0.atan();
      complex2.isInfinite();
      Complex complex5 = Complex.NaN;
      complex5.atan();
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.2365298585101096E-8), (-1.5460500618825853E264));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.tanh();
      complex1.ZERO.hashCode();
      Complex complex3 = Complex.valueOf((-4.2365298585101096E-8), 1904.055665);
      complex3.multiply(complex1);
      complex3.tanh();
      complex2.tan();
      complex3.divide(2.782159649779516);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex0.negate();
      complex2.NaN.hashCode();
      Complex complex3 = Complex.valueOf(1.4835954495341421E-214, (double) 1);
      complex3.subtract(1892.1636);
      complex0.atan();
      complex0.isInfinite();
      complex2.atan();
      complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1);
      complex1.hashCode();
      Complex complex2 = Complex.valueOf(2.6961527829274643E215, 2.6961527829274643E215);
      Complex complex3 = complex1.tan();
      complex3.readResolve();
      complex3.isInfinite();
      Complex complex4 = complex1.multiply(2.6961527829274643E215);
      complex2.log();
      Complex complex5 = complex3.divide(complex1);
      complex1.pow(complex0);
      Complex complex6 = complex2.cos();
      complex6.cos();
      Complex complex7 = complex5.tanh();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.sin();
      complex9.add(2.6961527829274643E215);
      complex5.conjugate();
      complex4.equals(complex6);
      complex7.pow((-810.34329));
      complex9.multiply(1);
      complex6.pow((-1118.89119));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.3480763914637323E214, (-0.780274921947194));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.add(1169.883586);
      complex3.hashCode();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex5.tan();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex1.divide(1.3480763914637323E214);
      complex7.getField();
      Complex complex10 = Complex.ONE;
      complex10.abs();
      Complex complex11 = complex6.sin();
      Complex complex12 = complex7.pow(complex2);
      Complex complex13 = Complex.valueOf(1.0);
      complex10.INF.divide(complex13);
      Complex complex14 = complex3.multiply(20.0);
      complex11.sinh();
      complex14.hashCode();
      complex4.sqrt();
      complex6.readResolve();
      Complex complex15 = complex7.sin();
      ComplexField complexField0 = complex9.getField();
      Complex complex16 = complex4.sqrt1z();
      complex9.abs();
      complex15.subtract(1.0);
      complex10.sqrt();
      Complex complex17 = new Complex(1.0);
      complex17.isNaN();
      complex6.equals(complexField0);
      complex16.getField();
      complex12.getImaginary();
      complex17.getReal();
      complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add((-4793.2));
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = new Complex(0.0, (-4793.2));
      Complex complex5 = Complex.NaN;
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      complex0.hashCode();
      complex0.getArgument();
      Complex complex2 = Complex.valueOf(0.0, (-1651.0));
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.asin();
      Complex complex5 = Complex.ONE;
      complex5.readResolve();
      complex1.sqrt();
      complex4.getField();
      complex1.multiply((-1488.0));
      complex3.atan();
      complex4.getArgument();
      complex4.atan();
      Complex complex6 = Complex.NaN;
      complex6.tan();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      complex6.toString();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.cos();
      complex6.divide(complex1);
      complex7.getArgument();
      complex3.cos();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex((-4793.2), 0.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.INF.hashCode();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.ZERO.asin();
      complex3.ONE.cos();
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.NaN.divide(1610.26840092953);
      complex6.NaN.getField();
      complex6.ZERO.abs();
      Complex complex8 = complex5.sin();
      complex0.multiply(1610.26840092953);
      Complex complex9 = complex0.sinh();
      complex7.hashCode();
      complex7.sqrt();
      complex6.readResolve();
      Complex complex10 = complex7.sin();
      complex5.getField();
      complex6.sqrt1z();
      complex1.abs();
      complex0.subtract((-1466.26917288405));
      complex2.sqrt();
      complex4.isNaN();
      complex9.equals(complex10);
      complex8.getField();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex((-4793.2), 0.0);
      complex0.ZERO.subtract(complex1);
      Complex complex2 = complex0.NaN.add(1169.883586);
      complex0.INF.hashCode();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.INF;
      complex7.NaN.divide(1610.26840092953);
      complex7.NaN.getField();
      complex7.ZERO.abs();
      complex6.sin();
      Complex complex8 = complex0.pow(complex7);
      Complex complex9 = complex8.multiply((-433.0));
      Complex complex10 = complex0.sinh();
      complex0.hashCode();
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.sqrt();
      complex10.readResolve();
      complex9.sin();
      complex0.getField();
      complex4.sqrt1z();
      complex9.abs();
      complex9.subtract(0.0);
      complex5.sqrt();
      complex12.isNaN();
      Object object0 = complex1.readResolve();
      complex4.equals(object0);
      complex7.getField();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.sqrt1z();
      complex2.INF.negate();
      Complex complex3 = complex0.createComplex((-1466.26917288405), 0.0);
      Complex complex4 = complex0.divide(complex3);
      complex4.INF.acos();
      complex3.asin();
      Complex complex5 = complex4.cos();
      complex3.I.createComplex((-1.1603891006723397E-7), (-1.1603891006723397E-7));
      Complex complex6 = complex5.multiply(2842.87281);
      complex6.I.sin();
      Complex complex7 = Complex.valueOf(6.283185307179586);
      complex5.asin();
      Complex complex8 = (Complex)complex4.readResolve();
      Complex complex9 = complex6.tan();
      Complex complex10 = complex9.ONE.exp();
      complex2.abs();
      complex10.subtract(599.11);
      complex8.sqrt();
      complex7.isNaN();
      complex10.equals(complex3);
      complex2.getField();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.2365298585101096E-8), (-1.5460500618825853E264));
      Complex complex1 = new Complex(4879.87977236225, (-4.2365298585101096E-8));
      Complex complex2 = complex1.add(6.283185307179586);
      complex0.hashCode();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.cos();
      complex3.tan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.divide((-1.5460500618825853E264));
      complex6.getField();
      complex0.abs();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex2.pow(complex1);
      complex8.multiply(1.5460500618825853E264);
      complex9.sinh();
      complex0.hashCode();
      complex0.sqrt();
      complex7.readResolve();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.sin();
      complex11.ONE.sin();
      complex4.getField();
      Complex complex12 = new Complex(3151.758754853121, 1099.6);
      Complex complex13 = complex12.sqrt1z();
      complex13.abs();
      Complex complex14 = complex8.subtract((-746.31));
      complex5.sqrt();
      complex14.isNaN();
      complex0.equals(complex12);
      complex3.getField();
      complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.sinh();
      Complex complex3 = complex0.tanh();
      complex3.hashCode();
      int int0 = 2140578555;
      // Undeclared exception!
      complex2.nthRoot(2140578555);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-1784));
      Complex complex2 = complex1.INF.sqrt1z();
      complex2.INF.hashCode();
      complex2.ZERO.getArgument();
      complex1.NaN.log();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = Complex.valueOf((-2.9013441705763093E-8), (double) (-1784));
      complex4.pow((double) (-1784));
      Complex complex5 = Complex.valueOf((double) (-1784), 4916011.866496819);
      Complex complex6 = complex5.reciprocal();
      complex6.getField();
      Complex.valueOf((-187.0));
      complex5.conjugate();
      Complex complex7 = new Complex(4.247320713683124E-8);
      complex7.getArgument();
      complex1.acos();
      complex3.getField();
      complex5.sin();
      complex6.sin();
      try { 
        complex1.nthRoot((-310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -310
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1708.692);
      Complex complex1 = complex0.I.divide(1708.692);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.INF.cosh();
      complex2.readResolve();
      Complex complex5 = complex2.sqrt();
      complex4.getField();
      Complex complex6 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex6.atan();
      complex0.getArgument();
      Complex complex7 = complex3.atan();
      complex7.tan();
      Complex complex8 = Complex.valueOf((-82.096309), 1.0);
      complex5.toString();
      complex8.cos();
      Complex complex9 = Complex.ZERO;
      complex8.getArgument();
      Complex.valueOf((-82.096309), 3.1294124403845975);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.NaN.multiply(89);
      Complex complex2 = complex1.I.reciprocal();
      complex1.ONE.getArgument();
      Complex complex3 = complex0.divide(2.4137404318673354E119);
      Complex complex4 = complex0.divide(complex3);
      complex0.hashCode();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex0.NaN.add(complex4);
      complex6.NaN.hashCode();
      Complex complex7 = Complex.valueOf((double) 89, (double) 89);
      complex4.tan();
      complex0.readResolve();
      complex0.isInfinite();
      Complex complex8 = complex5.multiply(2.4137404318673354E119);
      complex3.log();
      Complex complex9 = complex6.divide(complex2);
      complex9.pow(complex6);
      complex5.NaN.cos();
      complex2.INF.cos();
      Complex complex10 = complex7.tanh();
      complex9.sin();
      complex10.add(0.0);
      complex5.conjugate();
      complex0.equals((Object) null);
      Complex complex11 = complex8.pow((double) 89);
      complex8.multiply(1);
      complex11.pow((double) 89);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1575.879536068144);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex3.cos();
      complex2.ZERO.conjugate();
      complex2.ONE.divide(1460.0913);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.ONE.multiply(complex2);
      complex2.pow(complex4);
      complex5.pow(complex4);
      complex5.toString();
      complex2.INF.hashCode();
      Complex complex7 = complex4.sin();
      complex5.I.abs();
      Complex complex8 = complex7.ZERO.pow((-649.7729));
      complex8.NaN.acos();
      complex2.getReal();
      complex4.reciprocal();
      complex2.divide(0.0);
      complex1.pow(1575.879536068144);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.1564717694090882E-280));
      Complex complex1 = complex0.ONE.add(1.0);
      Complex complex2 = complex1.INF.divide(complex0);
      complex0.NaN.tan();
      complex0.ONE.createComplex((-1.1564717694090882E-280), 0.0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex0.divide(0.0);
      complex5.ZERO.readResolve();
      complex2.getReal();
      Complex complex6 = complex2.reciprocal();
      complex6.ONE.multiply(complex5);
      complex4.getField();
      complex5.getImaginary();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(509.626, 509.626);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.tan();
      complex0.ONE.getArgument();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex1.createComplex(0.0, Double.NaN);
      complex4.I.abs();
      complex2.abs();
      Complex complex5 = complex3.multiply(complex4);
      complex5.NaN.cos();
      complex1.pow(complex0);
      complex3.getReal();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex((-4793.2), 0.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.NaN.add(1169.883586);
      complex0.INF.hashCode();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex0.ZERO.asin();
      Complex complex6 = complex4.ONE.cos();
      Complex complex7 = complex0.tan();
      Complex complex8 = Complex.INF;
      complex8.NaN.divide(1610.26840092953);
      complex8.NaN.getField();
      complex8.ZERO.abs();
      complex7.sin();
      complex0.pow(complex8);
      Complex complex9 = complex3.multiply((-2113.13650688737));
      complex9.sinh();
      complex0.hashCode();
      Complex complex10 = complex7.sqrt();
      complex10.readResolve();
      complex7.sin();
      complex0.getField();
      Complex complex11 = complex0.sqrt1z();
      complex11.INF.abs();
      Complex complex12 = complex6.subtract(0.0);
      Complex complex13 = complex3.sqrt();
      complex2.isNaN();
      complex13.equals(complex12);
      complex6.getField();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(368.437);
      Complex complex1 = complex0.INF.divide(368.437);
      Complex complex2 = complex1.I.add(complex0);
      complex1.NaN.sqrt1z();
      complex2.ZERO.conjugate();
      complex1.NaN.multiply(368.437);
      try { 
        complex2.ZERO.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(434.66, 434.66);
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.INF.sin();
      complex3.NaN.cosh();
      complex1.getImaginary();
      Complex complex5 = complex4.multiply(434.66);
      Complex complex6 = complex5.INF.add(0.0);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex7.cos();
      complex8.INF.cosh();
      Complex complex9 = complex1.multiply(complex4);
      complex3.log();
      Complex complex10 = complex2.multiply(1722);
      complex10.sqrt1z();
      Complex complex11 = complex7.acos();
      complex4.pow(complex11);
      complex1.getField();
      complex3.cosh();
      Complex complex12 = Complex.valueOf(0.0, 0.7853981633974483);
      Complex complex13 = complex12.divide(2256.882827241962);
      complex13.I.log();
      complex5.multiply(complex10);
      complex6.negate();
      complex9.isNaN();
      complex8.createComplex(1.0724295693252266E89, (-210.27669));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      complex0.isNaN();
      complex1.INF.hashCode();
      complex1.I.nthRoot(1);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.exp();
      complex3.I.abs();
      Complex complex4 = complex3.multiply(0);
      complex4.INF.sqrt();
      Complex complex5 = complex1.NaN.sinh();
      complex4.ONE.subtract(complex3);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex1.subtract(complex6);
      complex6.hashCode();
      complex6.ONE.toString();
      complex7.getImaginary();
      complex6.I.subtract(Double.NaN);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.subtract(complex8);
      complex10.I.asin();
      complex10.ZERO.acos();
      complex7.ZERO.multiply(Double.NaN);
      complex9.INF.subtract(1.3017010688781738);
      complex8.createComplex(Double.NaN, 4641.939275284745);
      Complex complex11 = complex5.acos();
      complex2.pow((-963.4760154448549));
      complex11.createComplex(0.0, 0.47158926725387573);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-653.83129588));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.tan();
      complex3.multiply(complex2);
      complex3.exp();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex2.NaN.log();
      Complex complex5 = complex2.multiply(7);
      Complex complex6 = complex5.ONE.sinh();
      complex2.ZERO.multiply(656);
      complex0.nthRoot(1);
      Complex complex7 = complex1.subtract(1591.242692);
      Complex complex8 = complex7.atan();
      complex8.nthRoot(1462);
      complex4.multiply(complex0);
      complex5.add((double) 1);
      Complex complex9 = complex1.multiply(656);
      complex9.abs();
      complex2.multiply(17);
      complex9.multiply((double) 1462);
      complex4.abs();
      complex5.sqrt();
      complex6.equals((Object) null);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-4.6490379071586397E-10), (-4.6490379071586397E-10));
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex2.pow((-4.6490379071586397E-10));
      complex0.getImaginary();
      complex2.INF.abs();
      complex0.NaN.reciprocal();
      Complex complex6 = Complex.valueOf(0.0, 2.347886562347412);
      complex3.createComplex(0.0, 0.0);
      complex6.sinh();
      complex3.multiply(0.041666666666621166);
      complex5.log();
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.divide(0.0);
      complex2.INF.toString();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.NaN.add((-1.3445113140270216E-8));
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex4.I.exp();
      complex5.NaN.abs();
      complex5.NaN.getField();
      complex3.ZERO.hashCode();
      complex3.getReal();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.ZERO.multiply(0.0);
      Complex complex9 = complex1.I.subtract(complex4);
      complex1.ONE.divide(complex3);
      complex9.ZERO.tanh();
      complex7.NaN.add((-799.0));
      complex3.readResolve();
      Complex complex10 = complex1.sqrt1z();
      complex10.getField();
      complex7.hashCode();
      Complex complex11 = complex7.pow(complex10);
      complex11.getArgument();
      complex7.getField();
      Complex complex12 = complex2.tan();
      complex8.abs();
      complex12.getArgument();
      complex0.sin();
      complex2.getField();
      complex1.sinh();
      complex3.sinh();
      Complex complex13 = complex6.conjugate();
      complex13.divide((-2172.281800965997));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-915));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-948.181903));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.exp();
      complex2.I.negate();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = Complex.valueOf(0.0, 347.526);
      Complex complex5 = complex4.add(0.0);
      Complex complex6 = complex0.I.multiply(65);
      Complex complex7 = complex0.tanh();
      complex0.cosh();
      complex1.readResolve();
      Complex complex8 = complex3.atan();
      complex8.ONE.cos();
      complex6.I.getField();
      Complex complex9 = complex7.asin();
      complex6.I.tan();
      complex9.ZERO.cosh();
      complex8.multiply(complex6);
      Complex complex10 = complex8.exp();
      complex10.ZERO.hashCode();
      Object object0 = new Object();
      complex10.equals(object0);
      complex2.add(3.5549586192569994E-8);
      Complex complex11 = complex3.atan();
      complex11.NaN.abs();
      complex9.getArgument();
      complex9.acos();
      Complex.valueOf(2.0);
      complex5.hashCode();
      complex6.createComplex((-2850.7483617305), 65);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.2365298585101096E-8), (-1.5460500618825853E264));
      Complex complex1 = complex0.sinh();
      complex1.ONE.tanh();
      complex1.ZERO.hashCode();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex3.ZERO.multiply((-1.0));
      complex4.NaN.sin();
      Complex complex5 = Complex.valueOf((-1.0), 0.0);
      Complex complex6 = complex2.subtract(complex5);
      complex6.ZERO.exp();
      complex6.hashCode();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.ONE.pow(complex2);
      complex8.ZERO.createComplex(0.0, (-1802.9122606674707));
      Complex complex9 = complex2.subtract(complex3);
      complex3.ZERO.asin();
      complex9.I.subtract(complex1);
      Complex complex10 = complex9.multiply((-20.0));
      complex9.INF.asin();
      Complex complex11 = complex5.sin();
      complex11.NaN.toString();
      complex1.getField();
      complex10.cosh();
      complex1.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, (-371.1440957));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      try { 
        complex2.nthRoot((-1041));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,041
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.asin();
      Complex complex1 = complex0.add(0.0);
      complex1.multiply(complex0);
      Complex complex2 = complex0.tanh();
      complex0.tan();
      complex2.divide((-3311.014037528704));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-131.071808928577), (-131.071808928577));
      Complex complex1 = Complex.ZERO;
      complex1.INF.hashCode();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.divide(complex1);
      complex4.INF.nthRoot(17);
      complex4.NaN.subtract(complex2);
      complex4.toString();
      Complex complex5 = complex0.negate();
      complex5.conjugate();
      Complex complex6 = complex5.pow(0.0);
      complex6.getReal();
      complex0.createComplex((-1283.73115), (-1072.45929092008));
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = new Complex(0.0);
      complex0.INF.divide(complex1);
      Complex complex2 = complex0.INF.divide(0.0);
      complex2.NaN.sqrt1z();
      complex0.isNaN();
      Complex complex3 = Complex.valueOf(0.0, (-3595.5387208));
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex0.subtract((-3595.5387208));
      Complex complex6 = complex5.NaN.sin();
      complex6.ONE.getArgument();
      complex0.getImaginary();
      complex5.getImaginary();
      complex4.getArgument();
      complex4.NaN.nthRoot(166);
      complex4.isInfinite();
      complex1.tan();
      Complex complex7 = complex2.pow(2.0);
      complex2.log();
      complex4.subtract(complex5);
      complex7.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.sqrt1z();
      complex2.INF.negate();
      Complex complex3 = complex0.createComplex((-1466.26917288405), 0.0);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.INF.acos();
      complex3.asin();
      Complex complex6 = complex4.cos();
      complex3.I.createComplex((-1.1603891006723397E-7), (-1.1603891006723397E-7));
      Complex complex7 = complex6.multiply(2842.87281);
      complex7.I.sin();
      Complex.valueOf(6.283185307179586);
      Complex complex8 = complex6.asin();
      complex4.readResolve();
      Complex complex9 = complex7.tan();
      complex9.ONE.exp();
      complex8.sinh();
      complex6.conjugate();
      complex5.sinh();
      Complex.valueOf((-3068.7175), 0.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.log();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.I.add(complex3);
      Complex complex5 = complex4.INF.add(complex3);
      complex0.NaN.hashCode();
      Complex complex6 = complex3.INF.add(56.6166787);
      complex1.ZERO.sqrt1z();
      complex2.ZERO.createComplex(56.6166787, 56.6166787);
      Complex complex7 = complex1.acos();
      complex5.pow(56.6166787);
      complex2.negate();
      complex0.subtract(complex7);
      complex6.isNaN();
      complex6.pow(56.6166787);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1);
      complex1.ONE.sqrt1z();
      Complex complex2 = complex0.subtract(0.0);
      complex2.INF.sqrt1z();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.cos();
      complex4.ZERO.add(complex2);
      complex4.toString();
      complex3.createComplex(2.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply(1);
      Complex complex1 = complex0.negate();
      complex1.NaN.hashCode();
      complex1.ONE.asin();
      Complex complex2 = complex1.sqrt();
      complex2.divide(5.606492666349878E-9);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      complex1.NaN.reciprocal();
      complex1.INF.reciprocal();
      complex1.I.divide((-3265.0));
      Complex complex2 = complex0.ZERO.multiply((-3265.0));
      complex1.I.hashCode();
      complex0.getField();
      Complex complex3 = complex1.multiply((-4237));
      complex3.ZERO.add((-3265.0));
      Complex complex4 = complex3.NaN.subtract((double) (-4237));
      complex4.ZERO.toString();
      complex2.log();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1708.692);
      complex0.I.divide(1708.692);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt1z();
      complex2.INF.cosh();
      Complex complex3 = complex2.pow(1771.13772);
      Complex complex4 = complex2.I.reciprocal();
      complex4.ONE.getField();
      Complex complex5 = Complex.valueOf(1.0);
      complex0.conjugate();
      complex2.ZERO.getArgument();
      complex0.acos();
      complex1.NaN.getField();
      complex2.ONE.sin();
      Complex complex6 = complex5.sin();
      complex1.nthRoot(571);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex3.divide(complex7);
      complex8.ZERO.hashCode();
      complex6.nthRoot(1006);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ZERO.tanh();
      complex2.NaN.hashCode();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex3.ONE.conjugate();
      complex1.ONE.abs();
      complex0.I.acos();
      complex0.atan();
      complex0.ONE.hashCode();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.pow(complex1);
      complex5.sin();
      Complex complex6 = complex0.sin();
      complex4.ONE.exp();
      complex6.INF.add(1.0);
      Complex complex7 = complex4.createComplex(635.564693792032, 635.564693792032);
      complex4.add(1.0);
      Complex complex8 = Complex.valueOf(635.564693792032, 1.0);
      complex7.subtract(complex8);
      complex4.sqrt();
      complex8.reciprocal();
      Complex complex9 = complex1.cosh();
      try { 
        complex9.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.INF.multiply(complex1);
      complex2.I.readResolve();
      Complex complex3 = complex1.ZERO.pow(complex2);
      Complex complex4 = complex3.ZERO.sinh();
      complex4.ZERO.pow(0.0);
      Complex complex5 = complex3.INF.sin();
      Complex complex6 = Complex.valueOf(0.0, 493.234);
      complex0.hashCode();
      Complex complex7 = complex0.subtract(complex1);
      complex0.pow(0.0);
      Complex complex8 = complex5.sqrt();
      complex8.I.hashCode();
      Complex complex9 = complex7.pow(0.0);
      Complex complex10 = complex3.cos();
      complex9.subtract(Double.NaN);
      complex8.hashCode();
      complex4.multiply(complex10);
      complex6.divide(complex4);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      complex1.INF.nthRoot(8388607);
      Complex complex2 = new Complex(2372.5080453384, (-665.763801));
      complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.add(798.047063);
      complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      complex1.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(162.614038);
      Complex complex1 = complex0.multiply(496);
      Complex complex2 = complex1.I.exp();
      complex2.ZERO.subtract(162.614038);
      complex1.ZERO.multiply(496);
      complex0.tan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.pow(162.614038);
      complex3.getArgument();
      Complex complex5 = complex0.sin();
      complex1.atan();
      Complex complex6 = new Complex(0.0, 2.427152633666992);
      complex5.equals(complex6);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.add(0.0);
      complex0.getField();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex3.acos();
      complex4.ZERO.sinh();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex2.INF.tan();
      complex5.ONE.readResolve();
      complex5.ONE.tan();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.ZERO.divide(complex2);
      complex8.NaN.acos();
      complex8.getField();
      Complex complex9 = complex2.createComplex(3.216046320616945E29, 0.0);
      Complex complex10 = complex9.NaN.sinh();
      complex10.multiply(2697.4);
      complex1.ONE.atan();
      complex6.readResolve();
      Complex complex11 = complex1.asin();
      complex11.ONE.hashCode();
      complex11.ONE.multiply((-1937));
      complex6.createComplex(0.0, 3.216046320616945E29);
      Object object0 = new Object();
      complex9.equals(object0);
      complex8.add(3.216046320616945E29);
      complex11.getReal();
      complex1.log();
      complex6.createComplex((-1937), (-1937));
      try { 
        complex9.nthRoot((-1937));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,937
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = (-4665.01319);
      Complex complex0 = new Complex((-4665.01319));
      Complex complex1 = Complex.ONE;
      complex0.NaN.subtract(complex1);
      int int0 = 0;
      try { 
        complex0.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
