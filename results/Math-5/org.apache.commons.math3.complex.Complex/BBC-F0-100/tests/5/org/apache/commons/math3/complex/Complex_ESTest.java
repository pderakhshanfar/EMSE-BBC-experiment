/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:23:41 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-2999.82761352183), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-2999.82761352183));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf((-1112.8912271), (-2999.82761352183));
      Complex complex4 = Complex.NaN;
      complex4.I.reciprocal();
      Complex complex5 = complex3.ZERO.multiply(complex4);
      complex5.reciprocal();
      complex0.sqrt();
      complex2.getField();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.ZERO.tanh();
      complex7.I.readResolve();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.subtract(complex7);
      Complex complex10 = complex9.NaN.multiply(complex2);
      complex8.I.getArgument();
      Complex complex11 = complex6.pow((-1112.8912271));
      complex7.ZERO.acos();
      complex9.hashCode();
      Complex complex12 = complex0.add(complex9);
      complex12.I.cos();
      complex12.NaN.pow(1.5707963267948966);
      Complex complex13 = complex0.asin();
      complex13.ZERO.acos();
      complex1.divide(2.0);
      Complex complex14 = complex13.atan();
      complex14.multiply(complex10);
      complex11.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.toString();
      complex4.pow((-2528.54109424548));
      complex6.reciprocal();
      Complex complex15 = complex6.exp();
      complex15.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.18882258521873307);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.subtract(1.1752011936438014);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.divide(1.556498788526345E177);
      complex2.toString();
      Complex complex5 = Complex.valueOf(1.1752011936438014);
      complex3.NaN.cos();
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = new Complex(1.1752011936438014, 0.18882258521873307);
      Complex complex8 = complex7.exp();
      Complex complex9 = Complex.valueOf(2.4612985502035675E-155, 1.5707963267948966);
      complex9.subtract(2.4612985502035675E-155);
      complex9.getField();
      complex6.getReal();
      complex5.add(complex6);
      complex3.readResolve();
      complex6.tanh();
      complex1.hashCode();
      complex7.conjugate();
      complex8.hashCode();
      complex7.nthRoot(17);
      complex9.tanh();
      complex8.log();
      Complex complex10 = new Complex(17);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(495.041249);
      Complex complex1 = Complex.valueOf((-2113.73204), 758.0);
      Complex complex2 = complex1.acos();
      complex0.nthRoot(95);
      complex2.subtract(0.0);
      Complex complex3 = Complex.valueOf(2.0, 495.041249);
      Complex complex4 = complex0.log();
      complex1.log();
      Complex.valueOf(2423.6687);
      complex3.tanh();
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.9999999999999998, 0.9999999999999998);
      Complex complex2 = complex0.pow(0.9999999999999998);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.divide(1809.852270788856);
      complex3.toString();
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = new Complex(1.5707963267948966, 1.6038109389511792E-28);
      Complex complex7 = complex4.exp();
      Complex complex8 = complex1.subtract(1.6038109389511792E-28);
      complex2.getField();
      complex2.getReal();
      complex4.add(complex2);
      complex0.readResolve();
      complex5.tanh();
      complex2.hashCode();
      complex4.conjugate();
      complex5.hashCode();
      complex5.acos();
      complex6.nthRoot(973);
      complex7.tanh();
      complex8.multiply(973);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.negate();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 1.8112388823726723E41);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(906.51, 2219.4399144046124);
      Complex complex1 = new Complex((-4616.120100756), (-4616.120100756));
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = new Complex(6.301644008317453E-4);
      complex1.tanh();
      Complex complex2 = complex0.cos();
      Complex complex3 = new Complex((-17.0), (-2084.882788));
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = Complex.valueOf((-20.0), (-1079.44119304));
      Complex complex6 = complex5.createComplex(Double.POSITIVE_INFINITY, (-2084.882788));
      complex0.acos();
      Complex complex7 = Complex.INF;
      complex4.multiply(complex7);
      complex6.cosh();
      Complex complex8 = Complex.valueOf((-17.0), (-20.0));
      complex8.tan();
      Complex complex9 = new Complex((-1079.44119304));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1608.7572933359972), (-20.0));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.valueOf((-1608.7572933359972), (-1.0));
      complex4.tan();
      Complex complex5 = new Complex(7);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.createComplex(1.1489352403441815E-169, 212.901);
      Complex complex5 = complex4.acos();
      Complex complex6 = new Complex(3503.0);
      complex3.asin();
      complex4.multiply(complex1);
      complex1.cosh();
      complex5.readResolve();
      Complex complex7 = new Complex((-8.431743157356912), (-8.431743157356912));
      complex7.add(complex3);
      Complex complex8 = complex2.sqrt();
      complex8.log();
      Complex complex9 = Complex.valueOf((-8.431743157356912), 2594.4371648383);
      Complex complex10 = complex4.asin();
      Complex complex11 = complex10.multiply(0.2145126760005951);
      complex11.equals(";eG`*");
      complex7.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.ONE.readResolve();
      Complex complex5 = complex0.conjugate();
      complex2.nthRoot(1110);
      complex3.pow(0.9767212047637052);
      complex5.atan();
      complex4.pow(2772.66902214117);
      complex2.atan();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = Complex.INF;
      complex3.hashCode();
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.acos();
      Complex complex8 = Complex.ZERO;
      complex4.abs();
      complex4.divide(Double.POSITIVE_INFINITY);
      complex4.conjugate();
      complex5.sqrt();
      complex4.getReal();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-8.431743157356912), (-0.49999999999999994));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex1.INF.sin();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex5.divide((-0.49999999999999994));
      Complex complex7 = complex1.divide((-2288620.326761));
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.multiply((-2288620.326761));
      Complex complex10 = complex8.divide(complex9);
      complex10.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.multiply(1956);
      complex5.NaN.atan();
      complex5.ONE.conjugate();
      Complex complex12 = complex11.ZERO.atan();
      Complex complex13 = complex12.ONE.multiply((-8.431743157356912));
      complex3.nthRoot(1956);
      complex6.reciprocal();
      complex13.readResolve();
      complex7.multiply(Double.POSITIVE_INFINITY);
      complex8.reciprocal();
      complex0.tan();
      complex5.subtract((double) 1956);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex complex2 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1591.2274562031896));
      Complex complex1 = complex0.sqrt1z();
      complex0.getField();
      Complex complex2 = complex1.subtract((-1532.2691109));
      Complex complex3 = complex1.reciprocal();
      complex0.readResolve();
      complex1.getField();
      Complex complex4 = (Complex)complex3.readResolve();
      complex0.conjugate();
      Complex complex5 = (Complex)complex2.readResolve();
      Complex complex6 = Complex.INF;
      complex1.acos();
      Complex complex7 = complex6.add(complex5);
      complex4.sqrt();
      complex5.log();
      Complex.valueOf((-1591.2274562031896), (-519.2722649393006));
      complex7.asin();
      complex7.subtract((-1591.2274562031896));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 20.0);
      Complex complex1 = Complex.ONE;
      complex0.add(complex1);
      Complex complex2 = complex0.tan();
      complex2.nthRoot(428);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 815.2464803402735;
      Complex complex0 = new Complex(815.2464803402735);
      complex0.getField();
      complex0.I.exp();
      Complex complex1 = complex0.subtract(1.0000001974720367);
      complex1.exp();
      Complex complex2 = Complex.valueOf(815.2464803402735, 815.2464803402735);
      Complex complex3 = complex2.negate();
      complex0.getField();
      Complex complex4 = Complex.ZERO;
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(954);
      Complex complex2 = Complex.valueOf((-814.0));
      complex0.abs();
      Complex complex3 = complex1.divide((-6.221897889344726E-8));
      Complex complex4 = complex0.divide(complex3);
      complex4.subtract(2.0);
      complex1.getArgument();
      Complex complex5 = complex2.subtract((-6.221897889344726E-8));
      complex1.NaN.getField();
      complex5.INF.createComplex((-6.221897889344726E-8), (-1110.964));
      complex1.sqrt();
      Complex.valueOf((-1.0), 1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.NaN.divide(complex0);
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex1.pow(552.0);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.ONE.tan();
      complex1.acos();
      complex4.NaN.tan();
      complex1.getArgument();
      Complex.valueOf(813837.2168560036);
      Complex complex8 = Complex.NaN;
      complex3.abs();
      Complex complex9 = new Complex(Double.NaN, 552.0);
      Complex complex10 = Complex.ONE;
      complex9.add(complex5);
      Complex complex11 = Complex.valueOf(Double.NaN);
      complex11.getReal();
      Complex complex12 = new Complex(Double.NaN);
      Complex complex13 = complex7.multiply(complex12);
      complex12.tan();
      complex13.nthRoot(404);
      Complex.valueOf((-2532003.817374874), (-1.0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-395.9209919912392));
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.add(complex0);
      complex2.readResolve();
      complex2.readResolve();
      Complex complex3 = new Complex(2.2868466674913266E-7);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.cos();
      Complex complex6 = new Complex(906.51, Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.add(complex6);
      complex0.createComplex(Double.POSITIVE_INFINITY, 1359.08);
      Complex complex8 = complex7.acos();
      Complex complex9 = new Complex((-1075.213106407978));
      complex3.asin();
      complex7.multiply(complex5);
      complex2.cosh();
      complex7.readResolve();
      Complex complex10 = Complex.INF;
      complex10.add(complex0);
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.sqrt();
      Complex complex12 = Complex.INF;
      Complex complex13 = new Complex(2860832.0);
      Complex complex14 = new Complex(906.51, (-395.9209919912392));
      complex14.sqrt1z();
      complex4.exp();
      complex13.reciprocal();
      Complex complex15 = Complex.NaN;
      complex8.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.NaN.divide(complex0);
      complex1.NaN.sinh();
      complex0.INF.hashCode();
      complex1.pow(552.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.cos();
      complex4.ONE.tan();
      Complex complex5 = new Complex(20.0, 0.0);
      Complex complex6 = complex5.tanh();
      complex6.subtract(0.0);
      complex3.sqrt();
      Complex.valueOf(552.0, 20.0);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-395.9209919912392));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = new Complex(1.0, 1.0);
      complex2.I.sinh();
      complex0.tanh();
      Complex complex3 = complex0.subtract(Double.NaN);
      complex1.sqrt();
      Complex.valueOf((-395.9209919912392), (-395.9209919912392));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(1196);
      Complex complex2 = Complex.valueOf(1359.08);
      complex0.NaN.abs();
      complex2.ONE.divide(1359.08);
      Complex complex3 = complex2.I.divide(complex0);
      complex2.I.subtract(9.253781621373885E29);
      complex3.ONE.acos();
      complex1.getArgument();
      Complex.valueOf(1359.08);
      Complex complex4 = Complex.INF;
      complex4.abs();
      Complex complex5 = Complex.ONE;
      complex5.add(complex4);
      complex1.sinh();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1591.2274562031896));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply((-1591.2274562031896));
      complex0.getField();
      Complex complex3 = complex1.subtract((-1532.2691109));
      Complex complex4 = complex3.exp();
      complex4.abs();
      Complex complex5 = complex4.divide(388.0002781219);
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = complex6.subtract(2296.5541);
      complex6.acos();
      complex2.getArgument();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.INF;
      complex7.abs();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex4.add(complex2);
      complex10.getReal();
      complex6.multiply(complex4);
      complex0.tan();
      Complex.valueOf((-1591.2274562031896), (-8.065408064244494));
      try { 
        complex5.nthRoot((-2049870754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,049,870,754
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(1196);
      Complex complex2 = Complex.valueOf(1359.08);
      complex0.NaN.abs();
      Complex complex3 = complex2.ONE.divide(1359.08);
      Complex complex4 = complex2.I.divide(complex0);
      Complex complex5 = complex2.I.subtract(9.253781621373885E29);
      Complex complex6 = complex4.ONE.acos();
      complex1.getArgument();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex0.multiply(complex6);
      complex4.cosh();
      complex6.readResolve();
      Complex complex9 = complex7.add(complex5);
      complex6.log();
      Complex complex10 = new Complex((-416.083881581473));
      complex9.sqrt1z();
      complex3.exp();
      complex9.reciprocal();
      complex8.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-395.9209919912392));
      Complex complex1 = complex0.sinh();
      complex1.hashCode();
      Complex complex2 = complex0.pow(552.0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex5.tan();
      complex2.abs();
      Complex complex8 = complex7.multiply(552.0);
      Complex complex9 = Complex.valueOf((-395.9209919912392));
      Complex complex10 = complex9.conjugate();
      complex10.ZERO.negate();
      complex6.readResolve();
      Object object0 = new Object();
      Object object1 = complex8.readResolve();
      complex5.equals(object1);
      complex7.getArgument();
      complex0.sqrt1z();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1591.2274562031896));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply((-1591.2274562031896));
      complex0.getField();
      Complex complex3 = complex1.subtract((-1532.2691109));
      complex3.exp();
      Complex complex4 = complex2.reciprocal();
      complex2.readResolve();
      complex2.getField();
      complex4.readResolve();
      Complex complex5 = complex0.conjugate();
      complex3.readResolve();
      complex3.subtract(complex1);
      complex3.getField();
      Complex complex6 = complex1.acos();
      complex6.tan();
      complex3.abs();
      complex2.multiply((-1.0));
      Complex complex7 = new Complex((-236.1158));
      Complex complex8 = complex7.divide(1591.2274562031896);
      complex4.conjugate();
      complex5.readResolve();
      Object object0 = new Object();
      complex3.equals(complex8);
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex0.createComplex(Double.NaN, 2015.910911);
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.valueOf(2015.910911, Double.NaN);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex2.pow(complex8);
      complex2.getField();
      Complex complex10 = complex8.tan();
      complex4.cosh();
      complex10.getArgument();
      Complex complex11 = new Complex(Double.NaN, 427.15);
      Complex complex12 = new Complex(Double.NaN);
      Complex complex13 = complex12.subtract(complex10);
      complex7.abs();
      complex12.add(complex9);
      complex5.getReal();
      Complex complex14 = complex13.sinh();
      complex7.multiply(complex8);
      complex14.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-4358.49075331), (-4358.49075331));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sin();
      complex3.cos();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex4.createComplex(834.5840129, 2028.7643769819);
      complex3.acos();
      complex5.asin();
      Complex complex6 = complex0.multiply(complex3);
      complex4.cosh();
      Complex complex7 = Complex.I;
      complex7.readResolve();
      Complex complex8 = complex5.add(complex2);
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex6.log();
      complex2.exp();
      complex8.subtract(complex4);
      complex10.equals(complex9);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-318.2));
      Complex complex1 = complex0.createComplex(2930.1, Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex((-4358.49075331), (-318.2));
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = new Complex((-1.3810978455418157), Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.multiply(3.141592653589793);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.cosh();
      Complex complex10 = Complex.valueOf((-2177.090323525));
      Complex complex11 = Complex.valueOf(2930.1, (-1.3810978455418157));
      complex11.getImaginary();
      complex3.equals(complex11);
      Complex complex12 = Complex.NaN;
      complex8.divide(complex9);
      complex1.cosh();
      complex5.hashCode();
      complex7.getReal();
      complex5.getImaginary();
      Complex complex13 = complex2.add(complex0);
      complex10.subtract(complex7);
      complex4.nthRoot(37);
      complex8.subtract(3.141592653589793);
      complex13.log();
      complex2.sqrt1z();
      complex12.exp();
      complex13.reciprocal();
      complex0.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.toString();
      Complex complex1 = complex0.INF.multiply((-1532.2691109));
      complex0.I.getField();
      Complex complex2 = complex0.ONE.subtract((-1.0));
      Complex complex3 = complex1.INF.reciprocal();
      complex0.readResolve();
      complex0.INF.getField();
      Complex complex4 = complex3.sin();
      complex1.readResolve();
      Complex complex5 = Complex.valueOf((-2542.0595), (-1.0));
      complex5.subtract((-1.0));
      complex3.reciprocal();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex4.cos();
      complex2.add(complex2);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.createComplex((-1.0), 6.080174837146273E-8);
      Complex complex11 = complex6.acos();
      Complex complex12 = complex1.asin();
      complex11.multiply(complex10);
      complex12.cosh();
      complex0.readResolve();
      complex2.add(complex7);
      complex0.sqrt();
      complex1.log();
      complex9.sqrt1z();
      complex0.exp();
      complex8.reciprocal();
      complex11.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.toString();
      Complex complex1 = complex0.INF.multiply((-1532.2691109));
      complex0.I.getField();
      Complex complex2 = complex0.ONE.subtract((-1.0));
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex1.INF.reciprocal();
      Complex complex5 = (Complex)complex0.readResolve();
      Complex complex6 = complex5.I.negate();
      complex0.INF.getField();
      Complex complex7 = complex1.ZERO.add(complex0);
      Complex.valueOf((-1532.2691109));
      complex0.readResolve();
      complex2.ZERO.subtract(complex7);
      complex0.getField();
      Complex complex8 = complex0.pow((-1.0));
      Complex complex9 = complex8.ZERO.acos();
      Complex complex10 = complex0.INF.divide(20.0);
      complex1.toString();
      Complex complex11 = complex1.acos();
      complex10.exp();
      complex3.I.multiply(complex5);
      complex11.I.getField();
      complex3.getReal();
      Complex complex12 = Complex.INF;
      complex12.cosh();
      complex3.readResolve();
      complex9.add(complex4);
      complex2.sqrt();
      complex8.sin();
      complex6.reciprocal();
      complex11.atan();
      try { 
        complex7.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-4.4662073456574476E141);
      complex0.I.readResolve();
      Complex complex1 = Complex.valueOf((-4.4662073456574476E141));
      double double1 = (-151.0);
      Complex complex2 = complex0.divide((-151.0));
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.ONE.multiply((-5088));
      Complex complex5 = complex4.ONE.subtract((-151.0));
      double double2 = 2.343525263620692E-8;
      complex5.subtract(2.343525263620692E-8);
      complex4.INF.getArgument();
      complex3.INF.multiply(complex1);
      complex0.ONE.toString();
      Complex.valueOf((-4.4662073456574476E141));
      // Undeclared exception!
      complex3.ZERO.nthRoot(1073404430);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(815.2464803402735, 815.2464803402735);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.pow(complex0);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1712579802975851E287);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.createComplex(2015.910911, 2015.910911);
      complex2.sqrt();
      complex0.tanh();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.pow(complex4);
      complex6.getField();
      Complex complex7 = new Complex((-1567.2), 1.1712579802975851E287);
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.cosh();
      complex8.getArgument();
      Complex complex10 = new Complex(1.1712579802975851E287, (-1.0624059769391151E7));
      Complex complex11 = complex10.subtract(complex0);
      complex6.abs();
      Complex complex12 = complex11.add(complex9);
      complex6.getReal();
      complex8.sinh();
      Complex complex13 = complex12.multiply(complex10);
      complex12.tan();
      complex13.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex1 = Complex.ONE;
      complex1.getField();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.reciprocal();
      complex0.readResolve();
      complex4.getField();
      complex4.readResolve();
      Complex complex5 = complex3.conjugate();
      complex5.readResolve();
      Complex complex6 = complex1.subtract(complex4);
      complex0.getField();
      Complex complex7 = complex3.pow((-231.1169));
      complex7.acos();
      Complex complex8 = complex3.tan();
      complex2.abs();
      complex0.multiply(0.0);
      complex8.I.asin();
      complex4.divide(3002.978188784008);
      complex8.conjugate();
      complex5.readResolve();
      Object object0 = new Object();
      Object object1 = new Object();
      complex5.isInfinite();
      complex0.getArgument();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.toString();
      Complex complex1 = complex0.INF.multiply((-1532.2691109));
      complex0.I.getField();
      Complex complex2 = complex0.ONE.subtract((-1.0));
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex3.divide((-1532.2691109));
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = new Complex((-1532.2691109), (-1.0));
      Complex complex8 = complex7.sin();
      complex4.readResolve();
      Complex complex9 = complex6.subtract((-1532.2691109));
      complex8.reciprocal();
      Complex complex10 = complex8.tanh();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.sin();
      Complex complex13 = new Complex(1467.8784325938293);
      complex13.cos();
      Complex complex14 = complex2.add(complex10);
      complex13.createComplex(1.1083180046837618E231, (-1532.2691109));
      complex1.acos();
      Complex complex15 = complex1.asin();
      complex9.multiply(complex12);
      complex0.cosh();
      complex14.readResolve();
      complex12.add(complex7);
      complex15.sqrt();
      complex10.log();
      complex13.sqrt1z();
      complex15.exp();
      complex9.reciprocal();
      complex4.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-20.0));
      complex0.abs();
      Complex complex2 = complex1.divide(2015.910911);
      Complex complex3 = complex2.divide(complex1);
      complex3.subtract(2015.910911);
      complex1.acos();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.multiply(17);
      complex5.add(complex2);
      complex1.getReal();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3713798664443718E-8, 1.6332239966407844E-189);
      complex0.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.createComplex(1.6332239966407844E-189, 0.9171523356672743);
      Complex complex5 = complex4.NaN.sin();
      complex3.I.multiply(complex0);
      complex3.I.readResolve();
      Complex complex6 = Complex.valueOf(0.9171523356672743, 720.70750065);
      Complex complex7 = complex3.sqrt1z();
      complex1.I.exp();
      Complex complex8 = complex7.ZERO.tan();
      complex8.INF.nthRoot(174);
      complex7.ZERO.abs();
      Complex complex9 = complex6.ZERO.exp();
      complex9.conjugate();
      Complex complex10 = complex6.multiply((-1368));
      complex9.getField();
      complex2.equals((Object) null);
      complex10.atan();
      complex8.multiply(174);
      complex1.pow(complex5);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(1196);
      Complex complex2 = Complex.valueOf(1359.08);
      complex0.NaN.abs();
      Complex complex3 = complex2.ONE.divide(1359.08);
      complex3.conjugate();
      complex3.sin();
      Complex complex4 = complex2.reciprocal();
      complex4.readResolve();
      Complex complex5 = new Complex(1359.08, Double.NaN);
      Complex complex6 = complex1.divide(complex5);
      complex1.subtract(2410.9099);
      complex0.log();
      complex6.hashCode();
      Complex complex7 = complex5.sin();
      complex7.divide(3103.770179767);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.toString();
      Complex complex1 = complex0.INF.multiply((-1532.2691109));
      complex0.I.getField();
      Complex complex2 = complex0.ONE.subtract((-1.0));
      complex2.ONE.exp();
      complex1.INF.reciprocal();
      complex0.readResolve();
      complex0.INF.getField();
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = (Complex)complex3.INF.readResolve();
      complex3.INF.conjugate();
      complex0.readResolve();
      complex2.ZERO.subtract(complex3);
      complex0.getField();
      Complex complex5 = complex0.pow((-1.0));
      complex5.ZERO.acos();
      Complex complex6 = complex0.INF.divide(20.0);
      complex1.toString();
      complex1.acos();
      complex6.exp();
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(20.02498439449938);
      Complex complex2 = complex0.conjugate();
      complex1.sin();
      Complex complex3 = Complex.valueOf(2254.584, (-1619.117));
      Complex complex4 = complex3.reciprocal();
      complex2.readResolve();
      complex3.divide(complex0);
      complex4.subtract(20.02498439449938);
      complex2.log();
      complex0.I.sqrt();
      complex4.hashCode();
      complex0.sin();
      complex1.divide((-247.54215441788182));
      complex4.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-20.0));
      complex0.abs();
      Complex complex2 = complex1.divide(2015.910911);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.subtract(2015.910911);
      Complex complex5 = complex1.acos();
      complex2.nthRoot(154);
      Complex complex6 = complex4.exp();
      Complex complex7 = complex1.pow(complex0);
      complex3.atan();
      Complex complex8 = Complex.ZERO;
      complex8.getReal();
      Complex complex9 = complex5.sin();
      complex9.divide(complex7);
      complex9.abs();
      complex6.readResolve();
      complex3.equals((Object) null);
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.add(1066.546);
      Complex complex3 = complex2.NaN.conjugate();
      complex0.sin();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.cos();
      complex2.tan();
      complex1.acos();
      Complex complex7 = complex3.tan();
      complex7.abs();
      complex4.multiply(2.4686275919853326E192);
      complex4.divide(Double.NaN);
      complex7.conjugate();
      Complex complex8 = Complex.valueOf(Double.NaN, 1.4043786616805493E-54);
      complex8.readResolve();
      Object object0 = new Object();
      complex3.equals((Object) null);
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-20.0));
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.pow(complex1);
      complex3.I.exp();
      Complex complex4 = complex3.NaN.tanh();
      complex3.ONE.divide(0.0);
      complex1.INF.toString();
      Complex complex5 = complex0.acos();
      complex5.conjugate();
      Complex complex6 = complex0.NaN.conjugate();
      complex6.INF.reciprocal();
      complex3.readResolve();
      complex2.sqrt();
      Complex complex7 = complex1.multiply(2095137896);
      Complex complex8 = Complex.NaN;
      complex8.sin();
      complex4.nthRoot(2095137896);
      complex0.sqrt();
      complex7.tanh();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.NaN.divide(complex0);
      complex1.NaN.sinh();
      complex0.INF.hashCode();
      Complex complex3 = complex1.pow(552.0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.ONE.tan();
      complex1.acos();
      Complex complex7 = complex3.divide((-3510.887706440405));
      complex7.toString();
      Complex complex8 = complex2.acos();
      complex3.exp();
      complex8.getField();
      complex8.getReal();
      complex1.getReal();
      try { 
        complex6.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1359.6433));
      Complex complex1 = complex0.NaN.divide((-1359.6433));
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex1.INF.divide((-1359.6433));
      Complex complex6 = complex2.atan();
      Complex complex7 = complex3.INF.reciprocal();
      Complex complex8 = complex6.ONE.pow(1757.665209531939);
      complex0.subtract(complex3);
      Complex complex9 = complex2.acos();
      Complex complex10 = complex2.log();
      complex2.getArgument();
      complex5.nthRoot(336);
      complex7.exp();
      complex10.pow(complex6);
      complex9.atan();
      complex4.getReal();
      Complex complex11 = new Complex(Double.NaN);
      complex11.sin();
      complex1.divide(complex5);
      complex8.abs();
      complex9.readResolve();
      complex7.equals((Object) null);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1320.94388791808), (-1320.94388791808));
      Complex.valueOf(0.0, (-1320.94388791808));
      Complex complex1 = complex0.tanh();
      Complex.valueOf((-1541.7507762024));
      Complex complex2 = complex1.conjugate();
      complex0.exp();
      complex0.getField();
      complex2.ONE.pow(complex0);
      complex1.divide((-1320.94388791808));
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex2.sqrt1z();
      Complex.valueOf((-239.4517170360155));
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      complex0.multiply(0.0);
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.NaN.pow(complex1);
      Complex.valueOf(0.0, 2.6683101654052734);
      Complex complex6 = complex2.ONE.multiply((-2543));
      complex3.ZERO.getArgument();
      Complex complex7 = complex4.NaN.subtract(complex2);
      complex7.ZERO.sqrt1z();
      Complex.valueOf((-1762.2415526), (-1762.2415526));
      complex1.isInfinite();
      Complex complex8 = complex3.NaN.divide(complex7);
      complex1.acos();
      complex6.conjugate();
      complex8.conjugate();
      complex6.reciprocal();
      complex1.readResolve();
      complex3.createComplex((-2543), 1.8508157176809255);
      complex0.asin();
      complex3.tanh();
      complex5.abs();
      complex3.sin();
      complex1.divide(0.7080734182735711);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1359.6433));
      Complex complex1 = complex0.NaN.divide((-1359.6433));
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex1.INF.divide((-1359.6433));
      Complex complex7 = complex2.atan();
      Complex complex8 = complex4.INF.reciprocal();
      Complex complex9 = complex0.subtract(complex5);
      complex2.sqrt1z();
      Complex complex10 = Complex.valueOf((-1762.2415526), 1757.665209531939);
      complex10.isInfinite();
      complex7.divide(complex0);
      complex6.getField();
      complex4.multiply(128);
      complex1.pow((-1350.3609));
      complex10.sqrt();
      complex8.getArgument();
      complex3.acos();
      complex2.getArgument();
      complex0.abs();
      complex0.multiply(complex10);
      Complex complex11 = Complex.INF;
      complex11.asin();
      complex1.log();
      complex11.tanh();
      Complex complex12 = Complex.I;
      complex12.add((-0.6156264703860141));
      complex9.isInfinite();
      complex2.pow(2195.3138356579593);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1512.819), 0.0);
      Complex complex1 = complex0.ONE.atan();
      complex1.NaN.reciprocal();
      Complex complex2 = complex1.subtract((-1512.819));
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.INF.pow(complex0);
      complex5.sqrt();
      complex4.toString();
      complex6.ZERO.toString();
      complex6.toString();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex3.add((-1512.819));
      complex7.pow(complex1);
      complex3.sqrt();
      complex6.getReal();
      complex2.multiply((-357913942));
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.log();
      complex6.hashCode();
      complex8.getImaginary();
      complex6.tanh();
      complex1.divide(Double.NaN);
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.toString();
      Complex complex1 = complex0.INF.multiply((-1532.2691109));
      complex0.I.getField();
      Complex complex2 = complex0.ONE.subtract((-1.0));
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex1.INF.reciprocal();
      complex0.INF.getField();
      Complex complex5 = complex1.ZERO.add(complex0);
      complex5.INF.readResolve();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = (Complex)complex0.readResolve();
      complex2.ZERO.subtract(complex5);
      complex0.getField();
      Complex complex8 = complex6.ZERO.acos();
      Complex.valueOf(1809.66281257412, Double.POSITIVE_INFINITY);
      Complex complex9 = complex0.INF.divide(20.0);
      complex1.toString();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex9.exp();
      complex10.I.getField();
      complex3.getReal();
      complex9.getReal();
      complex1.add(complex0);
      complex8.readResolve();
      Complex complex12 = complex0.tanh();
      complex0.hashCode();
      complex11.conjugate();
      complex4.hashCode();
      complex4.reciprocal();
      complex7.atan();
      complex11.pow(complex12);
      Complex complex13 = complex11.sqrt1z();
      complex13.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.050833763855709E-193);
      complex0.I.atan();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.ZERO;
      complex4.getArgument();
      Complex complex5 = complex1.sqrt1z();
      complex2.I.multiply(4.050833763855709E-193);
      Complex complex6 = new Complex((-1542.94));
      Complex complex7 = complex6.conjugate();
      complex6.sqrt1z();
      Complex complex8 = complex7.pow(4.050833763855709E-193);
      complex0.ONE.acos();
      Complex.valueOf(17.0, (-1542.94));
      complex4.equals((Object) null);
      complex3.getField();
      complex8.subtract(1848628.90323489);
      Complex complex9 = Complex.INF;
      complex6.divide(17.0);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.createComplex(2015.910911, 2015.910911);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = Complex.valueOf(6.283185307179586, 2015.910911);
      complex7.getField();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex6.sqrt();
      complex4.add(2.439032554626465);
      complex2.exp();
      Complex complex10 = complex9.acos();
      Complex complex11 = Complex.valueOf(2.439032554626465, 6.283185307179586);
      complex11.subtract(complex5);
      complex10.reciprocal();
      complex0.negate();
      Complex complex12 = Complex.ZERO;
      complex12.getField();
      Complex complex13 = complex7.add(complex0);
      complex4.abs();
      Complex complex14 = complex5.log();
      complex8.conjugate();
      complex14.tan();
      complex13.sin();
      complex11.toString();
      complex14.tanh();
      Complex complex15 = new Complex((-1026.8470049551627), 1076.08514161032);
      complex15.sinh();
      complex6.add(1.0803071904263957);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-1359.6433));
      Complex complex1 = complex0.NaN.divide((-1359.6433));
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.negate();
      complex4.I.atan();
      complex1.INF.divide((-1359.6433));
      Complex complex5 = complex2.atan();
      Complex complex6 = complex4.INF.reciprocal();
      Complex complex7 = complex5.ONE.pow(1757.665209531939);
      complex5.cosh();
      complex3.cos();
      complex4.tan();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex0.tan();
      Complex complex10 = Complex.I;
      complex10.abs();
      complex10.tanh();
      complex7.multiply(1.0);
      complex0.divide(1.0);
      complex8.conjugate();
      complex0.divide(complex9);
      complex3.sqrt1z();
      complex10.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.050833763855709E-193);
      complex0.I.atan();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.createComplex(4.050833763855709E-193, 2015.910911);
      complex2.ZERO.sqrt();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex4.INF.pow(complex0);
      complex0.getField();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex1.cosh();
      complex6.getArgument();
      Complex complex9 = new Complex(Double.NaN, 4.050833763855709E-193);
      complex9.subtract(complex0);
      complex8.abs();
      complex9.add(complex5);
      complex7.getReal();
      complex9.sinh();
      complex8.multiply(complex9);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1358480453491211, (-639.11892345));
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.createComplex(0.1358480453491211, (-639.11892345));
      complex1.ONE.getArgument();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      complex2.reciprocal();
      complex2.ZERO.sqrt();
      Complex complex4 = complex2.I.multiply((-639.11892345));
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.valueOf(0.1358480453491211);
      Complex complex7 = new Complex(0.0, (-639.11892345));
      complex7.cos();
      Complex complex8 = complex7.tan();
      complex3.acos();
      complex5.tan();
      complex7.abs();
      complex2.tanh();
      complex5.multiply(2664.400466347969);
      complex0.divide(360.1);
      Complex complex9 = complex8.conjugate();
      complex2.divide(complex9);
      complex6.sqrt1z();
      complex0.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.050833763855709E-193);
      complex0.I.atan();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.createComplex(4.050833763855709E-193, 2015.910911);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ONE.cos();
      complex5.cosh();
      Complex complex6 = complex5.INF.pow(complex0);
      complex0.getField();
      complex5.tan();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.add(2354.681245343);
      complex2.ONE.exp();
      Complex complex9 = complex7.acos();
      Complex complex10 = complex2.subtract(complex0);
      complex2.I.reciprocal();
      complex10.INF.getField();
      complex0.NaN.add(complex7);
      complex0.abs();
      Complex complex11 = complex10.log();
      complex11.ONE.conjugate();
      complex3.tan();
      complex8.divide(6.283185307179586);
      Complex complex12 = Complex.INF;
      complex12.conjugate();
      Complex complex13 = Complex.valueOf(2015.910911);
      complex3.divide(complex13);
      complex9.sqrt1z();
      complex8.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      complex1.ONE.abs();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex.valueOf(1.0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.I.add(complex3);
      complex5.ZERO.reciprocal();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.divide(complex0);
      complex3.reciprocal();
      Complex complex8 = Complex.valueOf(1.0);
      complex8.readResolve();
      Complex complex9 = Complex.ONE;
      complex2.divide(complex9);
      complex5.subtract(1.0);
      complex7.log();
      complex3.hashCode();
      complex7.sin();
      complex6.divide(172.42700814);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-1359.6433));
      Complex complex1 = complex0.NaN.divide((-1359.6433));
      Complex complex2 = complex0.ZERO.exp();
      complex0.readResolve();
      Complex complex3 = complex0.negate();
      complex3.I.atan();
      Complex complex4 = complex1.INF.divide((-1359.6433));
      Complex complex5 = complex2.atan();
      complex3.INF.reciprocal();
      complex5.ONE.pow(1757.665209531939);
      complex0.subtract(complex3);
      complex2.acos();
      Complex complex6 = complex2.log();
      complex2.getArgument();
      Complex complex7 = complex1.sinh();
      complex7.NaN.abs();
      complex4.asin();
      Complex complex8 = complex5.sin();
      Complex.valueOf((-1714.126015), 0.0);
      complex5.nthRoot(1);
      complex8.sqrt1z();
      complex7.conjugate();
      complex6.divide((-2090.789724));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf(452.9, (-1.0));
      Complex complex2 = complex0.I.cosh();
      complex2.ONE.cos();
      Complex complex3 = complex0.tanh();
      complex3.ZERO.hashCode();
      Complex complex4 = Complex.valueOf((-948.35), (-948.35));
      complex3.reciprocal();
      Complex complex5 = complex4.multiply((-2466.286082057));
      Complex complex6 = complex1.cosh();
      complex6.getImaginary();
      complex5.cos();
      complex4.ZERO.hashCode();
      try { 
        complex0.nthRoot((-3327));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,327
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(212);
      complex1.exp();
      Complex complex2 = complex1.ONE.atan();
      complex0.abs();
      Complex complex3 = complex0.tanh();
      complex1.NaN.log();
      complex3.log();
      complex1.exp();
      Complex complex4 = complex2.conjugate();
      Complex.valueOf((double) 212);
      complex3.toString();
      complex4.add(242.3331172819163);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.INF.add(0.0);
      Complex.valueOf(0.0);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex3.ZERO.acos();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex0.tan();
      complex7.NaN.hashCode();
      Complex complex8 = complex1.sinh();
      complex7.isInfinite();
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex8.log();
      complex10.readResolve();
      complex1.NaN.getField();
      Complex complex11 = complex0.ZERO.multiply(1947);
      Complex complex12 = complex10.acos();
      complex12.getField();
      complex9.toString();
      Complex complex13 = complex11.acos();
      complex2.log();
      complex6.sin();
      complex4.subtract(complex13);
      complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex1.I.readResolve();
      Complex complex2 = complex0.I.add(complex1);
      complex0.ZERO.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex1.sin();
      complex6.I.getArgument();
      complex6.cos();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex5.divide(0.0);
      Complex complex9 = complex3.conjugate();
      complex9.ONE.subtract(1199.3352193201597);
      complex1.I.multiply(0.0);
      complex8.pow((-20.0));
      Complex complex10 = complex4.divide(14.0);
      complex0.ZERO.negate();
      complex9.reciprocal();
      complex7.getReal();
      complex4.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1358480453491211, (-639.11892345));
      int int0 = 0;
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.createComplex(0.1358480453491211, (-639.11892345));
      complex1.ONE.getArgument();
      complex2.ZERO.subtract(complex0);
      Complex complex3 = complex2.reciprocal();
      complex2.ZERO.sqrt();
      Complex complex4 = complex2.I.multiply((-639.11892345));
      Complex complex5 = complex4.cosh();
      Complex.valueOf(0.1358480453491211);
      complex2.getImaginary();
      complex2.equals(complex0);
      Complex complex6 = Complex.NaN;
      complex1.divide(complex6);
      complex6.cosh();
      complex5.NaN.hashCode();
      complex2.getReal();
      complex4.getImaginary();
      Complex complex7 = complex2.add(complex6);
      complex7.subtract(complex3);
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex2.sqrt1z();
      complex4.NaN.sinh();
      complex0.INF.hashCode();
      complex0.tanh();
      Complex complex5 = complex1.pow(552.0);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.cos();
      complex7.ONE.tan();
      complex1.acos();
      Complex complex8 = complex5.NaN.tan();
      complex8.NaN.abs();
      complex8.ONE.tanh();
      Complex complex9 = complex5.multiply((-1897.6114));
      Complex complex10 = complex0.divide(Double.POSITIVE_INFINITY);
      complex10.conjugate();
      complex10.INF.divide(complex0);
      complex9.sqrt1z();
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1216.4752219542745), (-1216.4752219542745));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ONE.pow((-1216.4752219542745));
      complex2.I.multiply(396);
      complex2.I.hashCode();
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex3.sinh();
      complex0.ZERO.readResolve();
      Complex complex5 = complex0.NaN.sin();
      complex5.I.add(complex4);
      complex0.getField();
      Complex complex6 = complex0.INF.tanh();
      Complex complex7 = complex0.createComplex(0.0, (-1216.4752219542745));
      Complex complex8 = complex6.conjugate();
      complex8.subtract(0.0);
      complex6.NaN.hashCode();
      Complex complex9 = complex4.negate();
      Complex complex10 = complex9.INF.pow(complex6);
      complex10.NaN.conjugate();
      complex3.subtract(1.0);
      Complex complex11 = complex7.atan();
      complex11.cosh();
      Complex complex12 = Complex.valueOf((-1216.4752219542745), 1.0);
      complex11.equals(complex12);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-708.565935005));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.add(complex0);
      complex0.INF.multiply((-708.565935005));
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex3.ONE.divide(0.0);
      Complex complex5 = complex3.ZERO.negate();
      Complex complex6 = complex5.ONE.acos();
      complex1.ONE.readResolve();
      complex0.getField();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex1.INF.add(complex3);
      Complex complex10 = complex8.log();
      complex8.I.cos();
      complex10.conjugate();
      complex0.getArgument();
      complex8.getArgument();
      complex4.createComplex(0.0, 3.141592653589793);
      Complex.valueOf(118.8004796);
      complex4.getReal();
      complex8.getReal();
      complex7.nthRoot(1291);
      Complex complex11 = complex10.negate();
      complex1.negate();
      complex1.subtract(complex5);
      complex1.reciprocal();
      complex9.multiply(Double.NaN);
      complex6.readResolve();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      complex11.equals(complex12);
      complex7.hashCode();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.multiply(2.1360492104281465E191);
      complex0.getImaginary();
      Complex complex2 = complex1.cos();
      complex1.readResolve();
      complex0.asin();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.NaN.divide(complex3);
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex5.INF.negate();
      complex4.NaN.reciprocal();
      Complex complex7 = complex1.exp();
      complex3.reciprocal();
      Complex complex8 = Complex.valueOf((-1477.34152993));
      Complex complex9 = complex8.conjugate();
      complex7.isNaN();
      complex0.isInfinite();
      complex0.toString();
      complex7.getArgument();
      complex1.add(complex2);
      complex3.subtract(complex9);
      complex0.divide(complex1);
      complex3.getReal();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.ONE.reciprocal();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex0.divide(complex1);
      complex5.NaN.pow(complex1);
      Complex complex6 = complex1.NaN.pow(2.6683101654052734);
      complex3.ONE.multiply((-2522));
      complex4.ZERO.getArgument();
      Complex complex7 = complex5.NaN.subtract(complex3);
      complex7.ZERO.sqrt1z();
      Complex complex8 = Complex.valueOf((-1762.2415526), (-1762.2415526));
      complex1.isInfinite();
      complex4.NaN.divide(complex7);
      complex8.getField();
      Complex complex9 = complex3.multiply(128);
      Complex complex10 = complex6.pow((double) 128);
      Complex complex11 = complex4.sqrt();
      complex11.NaN.getArgument();
      complex7.acos();
      complex1.getArgument();
      complex8.abs();
      Complex complex12 = complex2.multiply(complex10);
      complex1.ZERO.asin();
      complex12.ZERO.log();
      complex1.tanh();
      complex8.add(0.0);
      complex9.isInfinite();
      complex8.pow((-591.631831313));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.atan();
      complex0.isNaN();
      complex0.negate();
      Complex.valueOf((-1.1279742372661484E-266), 2410.59864575);
      complex0.subtract((-190.0454));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.NaN.negate();
      complex3.INF.createComplex(2.0, (-2787.8591454039));
      complex2.atan();
      complex2.abs();
      complex2.pow(2737.356635);
      Complex complex5 = complex2.asin();
      complex4.isNaN();
      try { 
        complex5.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      complex1.ONE.abs();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex.valueOf(1.0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.I.add(complex3);
      complex5.ZERO.reciprocal();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex7.ONE.sqrt1z();
      complex0.multiply(0.48068851232528687);
      complex2.isNaN();
      complex0.readResolve();
      complex8.tan();
      complex1.sin();
      complex3.reciprocal();
      complex9.multiply(1.0);
      Complex complex11 = complex2.divide(1.0);
      complex11.INF.atan();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2541.846);
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.tan();
      complex2.ONE.tanh();
      Complex complex3 = complex0.acos();
      complex3.I.multiply((double) 0);
      Complex complex4 = new Complex(2524.858);
      double double0 = 0.0;
      Complex complex5 = Complex.valueOf((double) 0, 0.0);
      complex5.I.multiply(2524.858);
      complex4.NaN.reciprocal();
      complex4.ONE.subtract(complex5);
      complex3.I.divide(complex4);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf((-6.4376298274983765E-273));
      complex2.ONE.pow(complex3);
      complex0.divide(complex3);
      Complex complex4 = complex2.conjugate();
      complex1.ZERO.abs();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.ZERO.add((-6.4376298274983765E-273));
      Complex complex7 = complex3.pow(complex1);
      complex7.cosh();
      complex0.ZERO.subtract((double) (-1605));
      Complex complex8 = complex6.multiply((-1605));
      complex8.I.log();
      Complex complex9 = complex6.multiply(complex0);
      complex9.INF.sinh();
      Complex complex10 = Complex.valueOf((double) (-1605), (-6.4376298274983765E-273));
      complex10.isInfinite();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.multiply(1196);
      Complex complex1 = Complex.valueOf(1359.08);
      complex0.NaN.abs();
      complex1.ONE.divide(1359.08);
      Complex complex2 = complex1.I.divide(complex0);
      complex1.I.subtract(9.253781621373885E29);
      complex2.ONE.acos();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.050833763855709E-193);
      complex0.I.atan();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.createComplex(4.050833763855709E-193, 2015.910911);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ONE.cos();
      complex5.cosh();
      Complex complex6 = complex5.INF.pow(complex0);
      complex0.getField();
      complex5.tan();
      Complex complex7 = complex1.sqrt();
      complex7.add(2354.681245343);
      complex2.ONE.exp();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex2.subtract(complex0);
      Complex complex10 = complex2.I.reciprocal();
      Complex complex11 = complex10.I.negate();
      complex9.INF.getField();
      Complex complex12 = complex0.NaN.add(complex7);
      complex0.abs();
      Complex complex13 = complex9.log();
      complex13.ONE.conjugate();
      Complex complex14 = complex3.tan();
      complex14.INF.sin();
      complex8.toString();
      complex6.tanh();
      complex11.sinh();
      complex12.add((-4689.05685824));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1512.819), 0.0);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.NaN.reciprocal();
      complex1.subtract((-1512.819));
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.INF.pow(complex0);
      Complex complex7 = complex5.sqrt();
      complex4.toString();
      complex6.ZERO.toString();
      complex6.toString();
      Complex complex8 = complex1.cos();
      complex3.add((-1512.819));
      Complex complex9 = complex8.pow(complex1);
      Complex complex10 = complex3.sqrt();
      complex6.getReal();
      complex2.atan();
      complex0.getReal();
      complex9.sin();
      complex1.divide(complex2);
      complex10.abs();
      Object object0 = complex7.readResolve();
      complex1.equals(object0);
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1152.69609144));
      Complex complex1 = complex0.ZERO.asin();
      complex0.getReal();
      Complex complex2 = complex0.sin();
      complex1.getArgument();
      Complex complex3 = complex0.INF.multiply(complex2);
      complex2.subtract(0.0);
      Complex complex4 = complex1.acos();
      complex0.NaN.atan();
      Complex complex5 = complex4.subtract(2730.374);
      Complex complex6 = complex5.NaN.add(2730.374);
      complex2.toString();
      complex5.ONE.getArgument();
      complex1.isNaN();
      complex3.acos();
      Complex.valueOf(2730.374, (-2852.363));
      complex1.abs();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.exp();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex0.readResolve();
      Complex complex3 = complex0.negate();
      complex3.atan();
      Complex complex4 = complex0.ONE.exp();
      complex4.NaN.getArgument();
      double double0 = 8.136316299122392E-192;
      try { 
        complex2.ZERO.nthRoot((-1163));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,163
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = new Complex(416.9584538);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.NaN.multiply(814);
      Complex complex6 = complex4.ONE.negate();
      complex6.INF.cos();
      Complex complex7 = complex6.NaN.add(1.8836492887460383E270);
      Complex complex8 = complex7.NaN.subtract(complex4);
      complex0.NaN.getField();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex1.NaN.readResolve();
      Complex complex9 = complex0.ONE.asin();
      complex9.I.getField();
      complex7.I.nthRoot(814);
      Complex complex10 = complex0.negate();
      complex8.nthRoot(814);
      complex10.log();
      complex10.equals(complex5);
      complex1.NaN.abs();
      Complex.valueOf(2519.07195781);
      Complex complex11 = complex1.createComplex(1.8836492887460383E270, Double.NaN);
      Complex complex12 = complex7.cos();
      Complex complex13 = complex12.I.acos();
      complex13.I.conjugate();
      complex5.negate();
      complex0.nthRoot(814);
      complex10.isNaN();
      complex3.divide(0.0038986406289041042);
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.pow(1921.1898709613);
      Complex complex2 = complex0.NaN.add(0.0);
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex4.INF.acos();
      complex4.I.pow(complex3);
      complex2.I.getField();
      complex0.getImaginary();
      Complex complex6 = complex2.cos();
      complex1.sinh();
      complex6.cos();
      Complex complex7 = complex5.pow(2880.8309);
      complex0.getArgument();
      Complex complex8 = complex4.divide(2880.8309);
      complex8.NaN.atan();
      complex8.sqrt1z();
      Complex complex9 = complex7.atan();
      complex9.getImaginary();
      complex5.negate();
      complex3.abs();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.add((-392.92734553));
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.multiply((-89));
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex3.I.conjugate();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex2.NaN.sqrt();
      Complex complex8 = complex2.asin();
      complex3.pow((-392.92734553));
      Complex complex9 = complex1.divide(0.0);
      complex9.ONE.getArgument();
      complex9.sinh();
      Complex complex10 = complex2.multiply(complex1);
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex11.INF.sin();
      Complex complex13 = complex0.add(0.0);
      complex2.abs();
      Complex complex14 = complex4.cosh();
      Complex.valueOf(0.0, 393.92734553);
      Complex complex15 = complex1.asin();
      complex6.isNaN();
      complex15.getReal();
      complex2.asin();
      Complex complex16 = complex8.subtract(complex0);
      complex16.INF.reciprocal();
      complex14.asin();
      complex3.cos();
      complex13.subtract(complex5);
      complex0.ONE.pow(complex11);
      complex12.tan();
      complex7.pow(complex10);
      complex15.isInfinite();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.sqrt1z();
      Complex complex1 = new Complex(0.0, 1346.2461896607);
      complex1.INF.exp();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.ONE.acos();
      complex3.NaN.reciprocal();
      complex0.ONE.readResolve();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ONE.subtract(0.0);
      complex4.I.acos();
      complex0.pow(complex2);
      complex0.log();
      complex0.asin();
      complex4.getReal();
      complex5.sin();
      complex1.divide(2.0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2360.0), 721.789724);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.I.multiply(577);
      complex3.INF.asin();
      Complex complex4 = complex3.multiply(complex1);
      complex4.NaN.divide(complex0);
      Complex complex5 = complex2.I.negate();
      complex5.NaN.sin();
      Complex.valueOf(2391.3663683371656);
      Complex complex6 = complex2.INF.exp();
      complex2.getArgument();
      Complex complex7 = complex6.INF.tanh();
      complex7.INF.acos();
      complex7.ZERO.sin();
      Complex complex8 = complex1.ONE.multiply(0.0);
      Complex complex9 = complex8.ZERO.atan();
      complex9.INF.conjugate();
      complex0.toString();
      Complex complex10 = complex2.divide(721.789724);
      complex10.subtract(2407.037058099);
      complex2.getReal();
      complex8.cos();
      complex2.multiply(1);
      complex0.tan();
      complex5.getField();
      complex5.hashCode();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-4358.49075331), (-4358.49075331));
      Complex complex1 = complex0.NaN.tanh();
      complex1.INF.sqrt();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.toString();
      Complex complex1 = complex0.INF.multiply((-1532.2691109));
      complex0.I.getField();
      Complex complex2 = complex0.ONE.subtract((-1.0));
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex1.INF.reciprocal();
      complex0.readResolve();
      complex0.INF.getField();
      Complex complex5 = complex1.ZERO.add(complex0);
      complex5.INF.readResolve();
      complex5.INF.conjugate();
      complex0.readResolve();
      complex2.ZERO.subtract(complex5);
      complex0.getField();
      Complex complex6 = complex0.pow((-1.0));
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex0.INF.divide(20.0);
      complex1.toString();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex8.exp();
      complex9.I.getField();
      complex3.getReal();
      complex8.getReal();
      complex1.add(complex0);
      complex7.readResolve();
      Complex complex11 = complex0.tanh();
      complex0.hashCode();
      complex10.conjugate();
      complex4.hashCode();
      complex4.reciprocal();
      complex6.atan();
      complex10.pow(complex11);
      Complex complex12 = complex10.sqrt1z();
      complex12.sin();
      complex6.pow(204.70048596075168);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.abs();
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.isInfinite();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex2.pow(complex3);
      complex5.I.multiply(complex4);
      Complex complex6 = complex1.add(complex2);
      complex6.cosh();
      Complex complex7 = new Complex(4006.0, 0.0);
      complex4.I.pow(20.0);
      Complex complex8 = complex0.multiply(complex7);
      complex0.isInfinite();
      complex7.ONE.subtract(complex8);
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex9.ZERO.conjugate();
      complex10.NaN.sqrt();
      Complex complex11 = complex10.sin();
      complex4.I.tan();
      complex8.log();
      Complex complex12 = complex4.createComplex(0.0, 0.0);
      complex1.toString();
      complex12.ZERO.exp();
      complex4.log();
      complex9.negate();
      Complex complex13 = complex6.add(complex0);
      complex13.negate();
      complex12.sqrt1z();
      complex11.isNaN();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.cosh();
      complex0.getArgument();
      Complex complex4 = complex3.sqrt1z();
      complex4.INF.conjugate();
      complex0.sqrt1z();
      complex4.I.pow(1.5707963267948966);
      Complex.valueOf(1.5707963267948966, (-702.106041));
      complex0.equals("");
      complex4.getField();
      complex3.subtract(1.5707963267948966);
      complex1.subtract(complex0);
      complex0.divide(399.47979353143);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-395.9209919912392));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.I.multiply(17);
      Complex complex4 = complex0.cosh();
      complex4.ZERO.getArgument();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      complex5.NaN.abs();
      Complex complex6 = complex4.add(complex1);
      complex0.getReal();
      Complex complex7 = complex4.sinh();
      complex7.multiply(complex6);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-70.294999704238));
      Complex complex1 = complex0.INF.add((-70.294999704238));
      complex0.isInfinite();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.NaN.asin();
      complex3.NaN.divide(complex1);
      Complex complex4 = complex3.NaN.pow((-70.294999704238));
      Complex complex5 = complex4.INF.createComplex((-70.294999704238), (-70.294999704238));
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = Complex.INF;
      complex8.readResolve();
      Complex complex9 = complex8.I.acos();
      assertEquals((-0.8813735870195429), complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex3.I.subtract(complex8);
      Complex complex11 = complex10.NaN.sin();
      assertEquals(Double.NEGATIVE_INFINITY, complex10.getImaginary(), 0.01);
      
      complex1.getArgument();
      complex1.add((-155.715135444362));
      Complex complex12 = complex5.negate();
      Complex complex13 = complex0.cos();
      complex13.NaN.abs();
      assertFalse(complex13.isInfinite());
      assertEquals(0.380960582976772, complex13.getReal(), 0.01);
      
      complex4.getArgument();
      Complex complex14 = complex2.divide(1211.1156823965412);
      Complex complex15 = complex14.negate();
      Object object0 = complex3.readResolve();
      assertTrue(object0.equals((Object)complex11));
      
      Complex complex16 = complex15.divide((-3682.2674));
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      complex0.isNaN();
      complex5.getReal();
      Complex complex17 = complex1.log();
      assertTrue(complex17.isInfinite());
      
      Complex complex18 = complex6.log();
      Complex complex19 = complex7.divide(complex3);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      Complex complex20 = complex14.sqrt1z();
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertEquals((-7.634211107888537E-4), complex14.getReal(), 0.01);
      
      Complex complex21 = complex2.multiply(complex18);
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      assertEquals((-0.4175294313057616), complex21.getReal(), 0.01);
      
      Complex complex22 = Complex.INF;
      Complex complex23 = complex12.multiply(complex22);
      assertSame(complex4, complex19);
      assertTrue(complex23.equals((Object)complex1));
  }
}
