/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:11:43 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(20.0);
      complex2.add(20.0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.multiply(complex3);
      complex4.nthRoot(1845);
      Complex complex5 = Complex.valueOf((double) 1845);
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.ZERO;
      complex7.ZERO.nthRoot(37);
      Complex complex8 = complex7.INF.acos();
      complex8.cos();
      complex5.tan();
      complex5.readResolve();
      Complex complex9 = Complex.ONE;
      complex9.pow(complex4);
      complex3.subtract((double) 1845);
      Complex.valueOf((double) 1845, (double) 1845);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex6.pow(complex10);
      Complex complex12 = complex3.tan();
      complex10.tanh();
      complex12.acos();
      complex5.pow((double) 1845);
      complex7.multiply(37);
      Complex complex13 = new Complex(20.0, (-2431.86710299008));
      complex11.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tanh();
      complex1.ZERO.asin();
      complex0.ONE.sqrt1z();
      complex1.getField();
      Complex complex3 = complex0.add((-2.0197142620980974E-8));
      Complex complex4 = complex3.ZERO.cosh();
      complex4.I.sinh();
      complex3.I.sin();
      complex3.readResolve();
      Complex complex5 = Complex.valueOf(2.1686991621493888E-17);
      Complex complex6 = complex3.NaN.sin();
      complex1.add(complex3);
      complex3.ONE.add(complex5);
      complex0.add(2.1686991621493888E-17);
      complex6.abs();
      complex3.getField();
      complex2.nthRoot(1367);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-1597.789), 7.690475570840264E294);
      Complex complex1 = complex0.log();
      complex1.ONE.negate();
      complex0.I.nthRoot(545);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.NaN.exp();
      complex4.ONE.exp();
      complex1.multiply((-1597.789));
      Complex complex5 = complex1.tan();
      complex5.ONE.acos();
      Complex complex6 = complex0.sqrt1z();
      complex2.ONE.asin();
      Complex complex7 = complex6.NaN.add(3529.356);
      complex7.ONE.pow((-4094.808732686));
      complex3.multiply(1881);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1502.3657), (-1502.3657));
      complex0.log();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.subtract(complex0);
      complex3.createComplex((-200.953), (-1502.3657));
      complex2.getArgument();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.tan();
      complex2.exp();
      complex2.abs();
      complex4.conjugate();
      complex5.tan();
      complex1.atan();
      int int0 = (-2115);
      try { 
        complex0.nthRoot((-2115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,115
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract((-183.5));
      complex0.abs();
      Complex complex1 = new Complex((-183.5), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
      complex0.multiply((-572));
      Complex complex1 = complex0.reciprocal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(0.2386477291584015, 12);
      Complex complex1 = Complex.valueOf(3.049800624E9);
      complex0.createComplex((-506.603212), 6.331009331992412E-18);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf(5.6843418860808015E-14, 5.6843418860808015E-14);
      complex3.readResolve();
      complex1.acos();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex4.pow((-1971.012931334931));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = Complex.NaN;
      complex5.multiply(complex8);
      complex2.getField();
      complex8.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.tanh();
      Complex complex1 = complex0.reciprocal();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = Complex.ONE;
      complex1.nthRoot(1195);
      Complex complex2 = Complex.valueOf(0.30271253940110104, 318.792103948868);
      complex2.hashCode();
      complex2.exp();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.INF.multiply(1195);
      complex4.ONE.conjugate();
      Complex complex5 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.099601248E9, 0.41421356237309515);
      Complex complex1 = complex0.tanh();
      complex1.getField();
      Complex complex2 = complex1.add(complex0);
      complex2.tan();
      Complex complex3 = complex0.asin();
      complex1.readResolve();
      complex3.negate();
      complex3.acos();
      complex2.reciprocal();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-136.9), Double.NaN);
      Complex complex2 = complex0.tanh();
      complex2.acos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tanh();
      complex1.acos();
      complex0.ONE.add(431.8162808181);
      complex0.createComplex((-2395.0), Double.NaN);
      Complex.valueOf(2660.97225046402);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
      complex0.createComplex(Double.POSITIVE_INFINITY, (-1497.8));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(518002.46343522053);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.add(complex2);
      complex2.abs();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex1.exp();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex4.multiply(3.0465278560980536E188);
      complex7.ONE.readResolve();
      Complex complex8 = complex6.divide(1486.0925972083694);
      complex8.INF.asin();
      Complex.valueOf(6.283185307179586);
      complex3.sqrt();
      Complex complex9 = complex3.multiply(1);
      complex9.ONE.abs();
      complex6.acos();
      complex9.getImaginary();
      complex0.divide(3.0465278560980536E188);
      complex0.asin();
      complex5.add(complex9);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(682);
      Complex complex1 = Complex.I;
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.9999994439543582), (-1.9740129448026905E-7));
      Complex complex1 = Complex.valueOf((-0.9999994439543582), (-0.9999994439543582));
      complex1.sinh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2796.471));
      Complex complex2 = complex1.exp();
      complex2.cos();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.subtract(1.0);
      complex1.equals("aYU0 J9FI9");
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.ONE;
      complex7.multiply(complex1);
      Complex complex8 = Complex.NaN;
      complex8.add(1.00683937499853);
      Complex complex9 = Complex.valueOf(1.00683937499853);
      complex3.pow(complex1);
      complex5.pow(1.5367772579193115);
      Complex complex10 = complex9.subtract(complex1);
      complex10.INF.tanh();
      complex6.multiply((-2808.10912766434));
      Complex.valueOf(1.00683937499853, 1838.81);
      complex3.hashCode();
      Complex complex11 = Complex.ONE;
      // Undeclared exception!
      complex11.nthRoot(1073741825);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2796.471));
      Complex complex2 = complex1.exp();
      complex2.reciprocal();
      Complex complex3 = complex0.subtract(1.0);
      complex1.equals("aYU0 J9FI9");
      complex3.negate();
      complex0.asin();
      Complex complex4 = Complex.ONE;
      complex4.multiply(complex1);
      Complex complex5 = Complex.NaN;
      try { 
        complex1.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.ZERO.subtract(complex0);
      Complex complex2 = Complex.valueOf(20.0, (double) 278);
      Complex complex3 = Complex.I;
      complex2.nthRoot(42);
      complex3.nthRoot(1334);
      complex0.exp();
      complex2.tan();
      complex1.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1896.53));
      Complex complex1 = Complex.valueOf((-1896.53));
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex3.ONE.atan();
      Complex.valueOf((-1896.53), (-1896.53));
      Complex complex5 = complex0.INF.divide(complex3);
      int int0 = 0;
      complex0.multiply(0);
      Complex complex6 = complex2.I.acos();
      complex6.ONE.abs();
      complex3.sqrt();
      Complex complex7 = complex1.pow(complex0);
      complex0.atan();
      complex4.INF.sqrt();
      Complex complex8 = complex7.sqrt1z();
      complex8.I.divide(complex1);
      complex4.getField();
      complex0.NaN.divide(complex3);
      complex5.atan();
      int int1 = (-4118);
      try { 
        complex3.nthRoot((-4118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,118
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(1130.8702922746434);
      complex0.getArgument();
      complex0.tanh();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf(1130.8702922746434, 1130.8702922746434);
      complex2.tanh();
      complex3.divide(Double.NaN);
      Complex complex4 = Complex.ZERO;
      complex4.isInfinite();
      complex4.sqrt1z();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(2.442600707513088E-36);
      complex0.pow((double) (-1));
      Complex complex1 = Complex.I;
      complex0.ONE.sinh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.acos();
      complex3.ZERO.tanh();
      complex1.cosh();
      Complex complex5 = complex0.tan();
      complex5.subtract(2.442600707513088E-36);
      Complex complex6 = Complex.valueOf(2.442600707513088E-36);
      complex6.divide(complex4);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.ZERO.subtract(complex0);
      Complex complex1 = Complex.valueOf(20.0, (double) 278);
      Complex complex2 = Complex.I;
      complex1.sqrt();
      Complex complex3 = Complex.valueOf((double) 278);
      complex3.asin();
      complex1.pow(complex3);
      complex0.tanh();
      Complex complex4 = Complex.valueOf(1806.702772808, 20.0);
      Complex complex5 = complex4.tanh();
      Complex.valueOf(1554.4711216, 3461.0);
      complex4.hashCode();
      complex3.nthRoot(10);
      complex2.hashCode();
      complex5.exp();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.acos();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex0.abs();
      Complex complex3 = complex0.I.cos();
      complex3.toString();
      complex3.ONE.divide(complex0);
      complex2.hashCode();
      complex0.asin();
      complex0.subtract(complex2);
      double double0 = 0.9999999999999999;
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tanh();
      complex0.pow(complex1);
      complex0.subtract((-833.055));
      double double0 = (-4096.0);
      Complex complex2 = complex1.add((-4096.0));
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.multiply(complex1);
      complex0.add(1912.385522135087);
      Complex.valueOf(Double.NaN);
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = Complex.I;
      complex0.ZERO.subtract(complex1);
      Complex.valueOf(20.0, (double) 235);
      Complex complex2 = complex1.multiply(235);
      complex0.getArgument();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.NaN.divide(20.0);
      Complex complex6 = complex5.ZERO.divide((double) 235);
      complex3.isInfinite();
      complex1.sqrt1z();
      complex3.INF.nthRoot(235);
      Complex complex7 = complex6.INF.sqrt1z();
      complex1.ZERO.nthRoot(235);
      complex2.equals(complex3);
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.multiply(complex7);
      Complex complex10 = Complex.ZERO;
      complex10.add(complex9);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-2549.1934));
      Complex complex2 = complex0.asin();
      Complex complex3 = new Complex((-48.270148636913), (-2565.976148397475));
      complex0.multiply(complex3);
      Complex complex4 = complex1.add((-2565.976148397475));
      Complex.valueOf(1.676081154074242E71);
      Complex complex5 = complex0.pow(complex2);
      complex2.pow(414.01);
      Complex complex6 = Complex.ZERO;
      complex5.subtract(complex6);
      complex6.multiply(1.7027192115783691);
      Complex complex7 = complex3.multiply(87.0);
      complex2.subtract(Double.NaN);
      complex2.readResolve();
      complex7.multiply(complex4);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tanh();
      complex1.pow(complex0);
      Complex complex2 = complex1.subtract(20.0);
      complex2.add((-1364.61));
      Complex complex3 = complex1.asin();
      complex0.multiply(complex3);
      Complex complex4 = complex0.add(87.0);
      Complex complex5 = Complex.valueOf((-1364.61));
      complex2.pow(complex4);
      complex2.pow(Double.NaN);
      Complex complex6 = Complex.ZERO;
      complex4.subtract(complex6);
      Complex complex7 = complex2.multiply(1105.36461920545);
      complex7.multiply(Double.NaN);
      Complex complex8 = complex0.subtract((-1803.159));
      Complex complex9 = (Complex)complex5.readResolve();
      complex2.multiply(complex8);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.ZERO.subtract(complex0);
      Complex.valueOf(20.0, (double) 278);
      Complex complex1 = Complex.I;
      complex0.getArgument();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.NaN.divide(20.0);
      complex2.tanh();
      Complex complex5 = complex4.ZERO.divide((double) 278);
      complex2.isInfinite();
      complex0.sqrt1z();
      complex5.INF.sqrt1z();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(2.442600707513088E-36);
      Complex complex1 = complex0.pow((double) (-1));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.conjugate();
      complex3.acos();
      complex2.cosh();
      complex3.tan();
      Complex complex4 = complex1.asin();
      complex0.pow(complex4);
      complex3.tanh();
      Complex complex5 = complex2.tanh();
      Complex.valueOf(1718.579287896, 3323.1575);
      complex5.hashCode();
      int int0 = 32;
      Complex complex6 = Complex.I;
      try { 
        complex6.nthRoot((-4921));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,921
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-2017.11), (-2017.11));
      Complex complex1 = complex0.ZERO.subtract((-2380.3619));
      Complex complex2 = complex0.pow((-2380.3619));
      complex1.subtract(complex0);
      Complex complex3 = complex0.multiply((-2017.11));
      complex3.INF.multiply((-3321.3221857748));
      complex2.multiply((-2017.11));
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.subtract(1106.6084943459985);
      complex5.toString();
      complex2.readResolve();
      complex5.multiply(complex2);
      Complex complex6 = Complex.ONE;
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract((-183.5));
      complex0.abs();
      complex0.conjugate();
      Complex complex1 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ZERO.subtract((-2808.10912766434));
      Complex complex4 = complex1.negate();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex0.divide(Double.NaN);
      Complex complex8 = Complex.NaN;
      complex8.divide((-2808.10912766434));
      complex0.sqrt1z();
      complex1.sqrt1z();
      complex7.nthRoot(636);
      complex6.equals(complex8);
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.INF;
      complex1.multiply(complex10);
      Complex complex11 = Complex.ZERO;
      complex8.add(complex3);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1983.184));
      complex0.isInfinite();
      Complex complex1 = complex0.tanh();
      complex0.ONE.pow(complex1);
      Complex complex2 = complex1.sin();
      complex2.createComplex(1.0, (-1983.184));
      complex0.sqrt();
      complex0.asin();
      complex2.pow(complex0);
      complex2.tanh();
      complex2.tanh();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = new Complex((-4.6694407626686244E235));
      complex3.hashCode();
      complex3.nthRoot(2944);
      complex0.hashCode();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.sinh();
      complex2.I.tan();
      Complex complex3 = Complex.valueOf(370.4578);
      complex3.exp();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.multiply(569);
      complex5.getReal();
      complex5.conjugate();
      Complex complex6 = Complex.valueOf((-20.0), (double) 569);
      complex6.sqrt1z();
      complex4.equals(complex6);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.pow(543.358);
      Complex.valueOf((double) (-4891));
      complex1.ONE.sin();
      Complex complex2 = complex0.multiply((-4891));
      Complex complex3 = complex2.ONE.createComplex(543.358, 0.0);
      complex3.INF.multiply(0.0);
      complex1.divide((-2.291749683541979E-9));
      complex1.getField();
      complex2.log();
      Complex complex4 = Complex.valueOf((-12.58907612288098));
      complex4.getImaginary();
      Complex complex5 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex((-1.0), (-1644.675));
      complex6.NaN.readResolve();
      complex5.INF.divide(complex6);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1983.184));
      complex0.isInfinite();
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = Complex.valueOf((-1899.059), 181.632234);
      complex0.multiply(235);
      complex2.getArgument();
      Complex complex3 = new Complex(2.2403693199157715);
      complex3.acos();
      Complex complex4 = complex0.divide(181.632234);
      complex4.NaN.subtract(complex0);
      complex1.negate();
      Complex complex5 = complex2.divide(181.632234);
      Complex complex6 = complex5.sqrt1z();
      complex3.sqrt1z();
      complex0.nthRoot(235);
      Complex complex7 = Complex.INF;
      complex0.equals(complex7);
      Complex complex8 = Complex.I;
      complex2.multiply(complex6);
      Complex complex9 = Complex.ZERO;
      complex9.add(complex1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tanh();
      complex1.pow(complex0);
      Complex complex2 = complex1.subtract(20.0);
      complex2.add((-1364.61));
      Complex complex3 = complex1.asin();
      complex0.multiply(complex3);
      Complex complex4 = complex0.add(87.0);
      Complex complex5 = Complex.valueOf((-1364.61));
      complex2.pow(complex4);
      complex2.pow(Double.NaN);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex4.subtract(complex6);
      Complex complex8 = complex2.multiply(1105.36461920545);
      complex8.multiply(Double.NaN);
      complex0.subtract((-1803.159));
      complex5.readResolve();
      complex7.multiply(complex6);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.pow(543.358);
      complex0.INF.multiply(0.0);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.multiply((-4891));
      Complex complex4 = complex3.ONE.createComplex(543.358, 0.0);
      complex4.INF.multiply(0.0);
      Complex.valueOf(0.0);
      complex0.multiply((-3376));
      complex2.cos();
      Complex complex5 = new Complex((-4891), 48.5133866);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.add(complex1);
      complex5.getArgument();
      Complex.valueOf((-2661.1957), (-18.0));
      Complex complex8 = Complex.ONE;
      complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.pow(543.358);
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = complex2.INF.sin();
      complex1.ONE.sin();
      Complex complex4 = complex0.multiply((-4891));
      Complex complex5 = complex4.ONE.createComplex(543.358, 0.0);
      complex5.subtract(complex3);
      complex5.INF.multiply(0.0);
      complex1.divide((-2.291749683541979E-9));
      complex1.getField();
      complex4.log();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.getImaginary();
      complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex(0.0, (-241.7136623692));
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-2017.11), (-2017.11));
      complex0.ZERO.subtract((-2380.3619));
      complex0.abs();
      Complex complex1 = Complex.valueOf((-95.0));
      complex1.getImaginary();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2796.471));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.subtract(1.0);
      complex1.equals("aYU0 J9FI9");
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.ONE;
      complex7.multiply(complex1);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.add(1.00683937499853);
      Complex complex10 = Complex.valueOf(1.00683937499853);
      complex3.pow(complex1);
      complex5.pow(1.5367772579193115);
      complex10.subtract(complex1);
      complex6.multiply((-2808.10912766434));
      complex5.multiply(0.14285714285714285);
      Complex complex11 = complex9.subtract(8.641652410606783);
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY, (-5.412881689012608E-8));
      complex12.readResolve();
      Complex complex13 = complex12.multiply(complex11);
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1887.53));
      Complex complex2 = Complex.ZERO;
      complex1.sqrt();
      complex1.multiply(0);
      complex1.getReal();
      complex0.toString();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-55.38756592));
      Complex complex1 = complex0.multiply((-55.38756592));
      complex1.I.atan();
      Complex complex2 = Complex.valueOf(3933017.777856, 3933017.777856);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.multiply(17);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1887.53), (-1887.53));
      Complex complex2 = complex1.pow(1.1168024085164686E112);
      complex1.multiply(543.358);
      Complex complex3 = complex0.sin();
      complex3.hashCode();
      Complex complex4 = complex2.multiply(1220);
      Complex complex5 = complex2.createComplex(0.0, 16.63029350213771);
      complex1.multiply((-3405.374939624));
      complex4.divide((-1887.53));
      complex5.getField();
      complex4.log();
      Complex.valueOf(1.1168024085164686E112);
      complex2.getImaginary();
      Complex complex6 = Complex.valueOf(0.0, (-1256.0));
      Complex complex7 = complex6.divide((-1887.53));
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex0.isInfinite();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.subtract(3046.0);
      Complex complex5 = Complex.INF;
      complex5.add(Double.POSITIVE_INFINITY);
      complex4.asin();
      complex3.multiply(complex4);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.add(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.sqrt1z();
      Complex complex9 = complex7.pow(complex2);
      complex5.pow((-1325.0));
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex9.subtract(complex10);
      complex2.multiply((-1325.0));
      complex0.multiply((-1.0));
      complex8.subtract(7.78113163345177E-20);
      complex4.readResolve();
      complex11.multiply(complex2);
      Complex complex12 = new Complex(7.78113163345177E-20, 7.78113163345177E-20);
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1983.184));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf((-1983.184), (-1983.184));
      Complex complex4 = complex3.subtract((-2808.10912766434));
      complex3.equals(complex0);
      complex1.negate();
      complex0.acos();
      Complex complex5 = complex1.tanh();
      complex4.sinh();
      Complex complex6 = complex2.createComplex((-2808.10912766434), 6151.433);
      complex6.getImaginary();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = Complex.I;
      complex8.asin();
      Complex complex9 = complex7.negate();
      Complex complex10 = complex8.conjugate();
      complex5.getArgument();
      complex10.negate();
      Complex complex11 = complex5.multiply(complex8);
      Complex complex12 = complex8.tan();
      Complex complex13 = new Complex(362.46846, 864.9966901702329);
      complex13.conjugate();
      complex9.readResolve();
      complex4.equals("");
      complex13.sinh();
      Complex complex14 = Complex.ONE;
      complex14.sinh();
      complex12.sqrt();
      Complex complex15 = Complex.valueOf(362.46846);
      complex15.multiply(complex3);
      Complex complex16 = Complex.NaN;
      complex16.add(complex14);
      complex11.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 2831.2688573626);
      complex0.ZERO.multiply(2831.2688573626);
      Complex complex1 = complex0.multiply(0.3333333333332802);
      Complex complex2 = complex0.sin();
      complex1.hashCode();
      Complex complex3 = complex1.multiply(206);
      complex1.createComplex((-1092.27), 20.0);
      Complex complex4 = complex3.multiply(0.3333333333332802);
      complex3.divide((-2.291749683541979E-9));
      complex2.getField();
      Complex complex5 = new Complex(605.90107525, (-48.60327525292));
      complex5.log();
      Complex.valueOf(1442.49364505);
      complex3.getImaginary();
      complex4.divide((-2197.704983));
      Complex complex6 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 2831.2688573626);
      Complex complex1 = complex0.ZERO.multiply(2831.2688573626);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = Complex.valueOf(20.0, (double) 235);
      complex2.toString();
      Complex complex4 = complex2.multiply(235);
      complex4.getArgument();
      Complex complex5 = complex3.tanh();
      complex0.divide((double) 235);
      Complex complex6 = complex3.divide(2831.2688573626);
      complex4.isInfinite();
      complex6.sqrt1z();
      complex4.sqrt1z();
      complex3.nthRoot(235);
      Complex complex7 = Complex.INF;
      complex1.equals(complex7);
      Complex.valueOf(2831.2688573626, 20.0);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1983.184));
      complex0.isInfinite();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex1.ONE.subtract((-1983.184));
      Complex complex4 = complex1.add((-1983.184));
      Complex complex5 = complex4.acos();
      Complex complex6 = complex3.tanh();
      complex4.sinh();
      Complex complex7 = complex4.createComplex((-1983.184), 2771.814);
      complex5.INF.acos();
      complex0.getImaginary();
      complex5.conjugate();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.asin();
      Complex complex10 = complex2.negate();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.conjugate();
      complex8.getArgument();
      Complex complex13 = complex6.negate();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex14.multiply(complex10);
      complex6.tan();
      Complex complex16 = complex1.conjugate();
      Complex complex17 = Complex.ZERO;
      complex17.readResolve();
      Object object0 = complex12.readResolve();
      complex15.equals(object0);
      complex6.sinh();
      complex9.sinh();
      complex13.sqrt();
      complex16.multiply(complex12);
      complex7.add(complex12);
      complex8.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ZERO.subtract((-2808.10912766434));
      complex0.equals((Object) null);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex6.I.sinh();
      complex7.createComplex((-2808.10912766434), (-2808.10912766434));
      complex0.getImaginary();
      Complex complex8 = complex4.conjugate();
      complex8.NaN.asin();
      Complex complex9 = complex4.ZERO.negate();
      complex0.conjugate();
      complex3.getArgument();
      Complex complex10 = complex8.negate();
      complex10.ONE.multiply(complex1);
      complex8.tan();
      complex10.INF.conjugate();
      Complex complex11 = (Complex)complex1.readResolve();
      complex10.equals(complex11);
      complex9.sinh();
      complex2.sinh();
      complex0.sqrt();
      Complex.valueOf(16.63029350213771, Double.POSITIVE_INFINITY);
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1983.184));
      complex0.isInfinite();
      Complex complex1 = complex0.tanh();
      complex0.ONE.pow(complex1);
      Complex complex2 = complex1.ONE.subtract((-1983.184));
      Complex complex3 = complex1.add((-1983.184));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.ONE.multiply(complex1);
      Complex complex6 = complex0.add(Double.NaN);
      Complex complex7 = Complex.valueOf((-1983.184));
      complex5.pow(complex0);
      complex6.sin();
      complex7.divide((-1983.184));
      Complex complex8 = Complex.valueOf(0.0, (-1983.184));
      complex8.sqrt1z();
      complex2.getArgument();
      Complex complex9 = complex4.multiply((-1983.184));
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex9.cosh();
      Complex complex12 = Complex.ZERO;
      complex10.readResolve();
      complex11.divide(complex3);
      Complex complex13 = Complex.valueOf(0.7615941559557649, 0.0);
      complex13.isNaN();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.cosh();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.tan();
      complex1.ZERO.nthRoot(2221);
      Complex complex3 = complex1.INF.tan();
      complex3.NaN.abs();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.INF.atan();
      complex3.INF.getArgument();
      Complex complex6 = complex4.exp();
      complex6.ZERO.nthRoot(2221);
      complex6.multiply(360.9);
      Complex complex7 = complex3.exp();
      complex7.pow(complex3);
      complex4.pow((double) 2221);
      complex4.subtract(complex1);
      Complex complex8 = Complex.valueOf(1910.0, (-2373.85113513));
      complex8.multiply((-731.62));
      Complex complex9 = Complex.valueOf(872.6362080853);
      Complex complex10 = complex9.multiply(1.054300899E9);
      complex10.subtract((-1.0));
      complex6.readResolve();
      complex2.multiply(complex6);
      Complex complex11 = complex5.tan();
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      double double0 = 543.358;
      Complex complex1 = complex0.pow(543.358);
      complex0.subtract(complex1);
      Complex complex2 = Complex.valueOf((-8.27343074126263E-8), (-2606.9));
      complex0.toString();
      complex2.multiply((-4891));
      complex1.getArgument();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.divide((-1692.0));
      complex0.divide(Double.NaN);
      complex3.isInfinite();
      complex5.sqrt1z();
      complex1.sqrt1z();
      Complex complex6 = Complex.ONE;
      try { 
        complex6.nthRoot((-4891));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,891
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cosh();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.pow(Double.NaN);
      Complex complex3 = complex2.multiply(1.8639901642011898E-209);
      Complex complex4 = complex1.sin();
      complex2.hashCode();
      complex3.multiply((-4891));
      complex3.createComplex(1.8639901642011898E-209, 20.0);
      Complex complex5 = complex4.divide((-460.0));
      complex0.getField();
      complex5.log();
      Complex.valueOf(20.0);
      complex3.getImaginary();
      complex2.divide(2.018584871269913);
      Complex.valueOf((double) (-4891), 2.018584871269913);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.subtract(543.358);
      Complex complex2 = complex0.pow((-1182.1993317393972));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.conjugate();
      complex3.divide(complex0);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex2.cosh();
      Complex complex7 = Complex.NaN;
      complex7.tan();
      complex1.subtract((-1182.1993317393972));
      complex4.getField();
      complex0.multiply(complex3);
      complex5.ZERO.sqrt();
      Complex complex8 = complex5.add(0.0);
      Complex complex9 = Complex.valueOf((-1182.1993317393972));
      Complex complex10 = Complex.valueOf(0.0, (double) (-1301));
      complex10.INF.asin();
      Complex complex11 = complex8.cos();
      complex9.cos();
      Complex complex12 = complex7.add(complex11);
      complex12.subtract(complex7);
      complex3.getArgument();
      Complex.valueOf((double) (-1301), 0.618990892446662);
      Complex complex13 = Complex.ONE;
      try { 
        complex6.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.exp();
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.multiply(0);
      complex0.getReal();
      complex2.createComplex(0, 0);
      complex1.sqrt1z();
      Complex complex3 = Complex.I;
      complex3.sqrt();
      Complex complex4 = new Complex(0);
      complex4.subtract((double) 0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ZERO.subtract((-2808.10912766434));
      complex0.equals((Object) null);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex5.INF.tanh();
      complex0.createComplex((-2808.10912766434), (-2808.10912766434));
      complex0.getImaginary();
      Complex complex7 = complex4.conjugate();
      complex7.NaN.asin();
      complex0.conjugate();
      complex3.getArgument();
      Complex complex8 = complex7.negate();
      complex8.ONE.multiply(complex1);
      complex7.tan();
      complex8.INF.conjugate();
      Object object0 = complex1.readResolve();
      complex8.equals(object0);
      complex1.sinh();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex0.sqrt();
      complex9.multiply(complex10);
      complex6.add(complex10);
      complex2.multiply(complex10);
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.cosh();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.pow((double) 2221);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex2.acos();
      complex0.cosh();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex4.subtract((-298.92506174));
      complex3.getField();
      Complex complex9 = complex5.multiply(complex8);
      complex7.add(8.633726388939636E-60);
      Complex.valueOf((-285.679139209601));
      complex8.multiply((-189));
      complex1.cos();
      complex6.cos();
      try { 
        complex9.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1006.778218896653), (-3240.722));
      complex0.abs();
      Complex complex1 = complex0.reciprocal();
      complex1.multiply((-3240.722));
      complex0.ONE.getArgument();
      Complex complex2 = complex0.subtract(447.8);
      complex2.ONE.abs();
      complex2.getField();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.atan();
      complex4.I.subtract(0.0);
      complex4.ONE.divide(447.8);
      complex5.ONE.log();
      try { 
        complex5.NaN.nthRoot((-1449));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,449
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.pow(complex1);
      complex0.sqrt();
      complex0.sinh();
      complex2.getReal();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.add(0.0);
      Complex complex3 = complex2.ONE.multiply(1557);
      Complex complex4 = complex3.ZERO.multiply(complex1);
      Complex complex5 = Complex.valueOf(490.9162094052376, 490.9162094052376);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.subtract(complex5);
      complex7.ZERO.nthRoot(1557);
      complex7.NaN.add((-160.66077546));
      complex0.isNaN();
      Complex complex8 = complex6.negate();
      complex1.nthRoot(647);
      complex1.readResolve();
      Complex complex9 = complex1.subtract((double) 647);
      Complex complex10 = complex8.add((double) 1557);
      complex10.I.negate();
      complex10.NaN.multiply(652);
      Complex complex11 = complex6.NaN.reciprocal();
      complex8.readResolve();
      complex10.isNaN();
      complex4.INF.tan();
      complex0.ONE.toString();
      complex4.getArgument();
      Complex complex12 = complex3.exp();
      complex12.isNaN();
      complex6.ONE.subtract(complex11);
      complex9.sin();
      complex11.getField();
      Complex complex13 = complex0.multiply(complex6);
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = (-897.58);
      Complex complex0 = new Complex((-897.58), (-897.58));
      Complex complex1 = complex0.NaN.multiply((-897.58));
      Complex complex2 = complex1.INF.sinh();
      complex2.ONE.exp();
      complex0.I.multiply((-897.58));
      Complex complex3 = Complex.valueOf((-897.58), (-897.58));
      complex0.add(complex3);
      Complex complex4 = null;
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cosh();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.subtract((-3354.495736308664));
      Complex complex3 = complex2.ZERO.pow((-1384.8897816166848));
      Complex complex4 = complex0.ONE.conjugate();
      complex2.divide(complex0);
      complex2.INF.acos();
      Complex complex5 = complex3.NaN.cosh();
      Complex complex6 = complex5.ONE.tan();
      complex3.I.subtract((-1384.8897816166848));
      complex6.I.getField();
      complex3.INF.multiply(complex0);
      complex0.INF.add(0.0);
      Complex complex7 = Complex.valueOf((-3354.495736308664));
      Complex complex8 = complex0.multiply(811);
      complex4.cos();
      complex7.cos();
      complex8.add(complex2);
      complex1.getArgument();
      Complex.valueOf((-308.862120182), (-1433.2531779320962));
      Complex complex9 = Complex.ONE;
      complex5.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1170.3540298313));
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.INF.subtract(complex1);
      complex0.NaN.hashCode();
      complex0.NaN.reciprocal();
      complex0.I.getField();
      complex0.pow(0.0);
      complex1.ONE.reciprocal();
      Complex complex4 = complex0.createComplex((-1170.3540298313), 1224.084467482292);
      complex4.ONE.add(0.0);
      complex1.toString();
      Complex complex5 = complex3.atan();
      complex5.NaN.add(complex4);
      complex5.getReal();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.multiply((-1));
      complex0.INF.log();
      Complex complex1 = Complex.INF;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(1630.6578433, 1630.6578433);
      Complex complex1 = complex0.subtract((-4633.284866212537));
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex1.ZERO.multiply(Double.NaN);
      complex4.ZERO.sqrt1z();
      complex4.I.subtract(complex1);
      complex3.ONE.cosh();
      Complex complex5 = complex1.pow(1.75879225876483E-25);
      complex5.getField();
      Complex complex6 = complex0.reciprocal();
      complex6.sqrt1z();
      complex6.add(complex5);
      complex2.add(complex3);
      Complex complex7 = new Complex(Double.NaN);
      complex3.add(complex7);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.784536881359796E-8, 3438.0727279879457);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.atan();
      complex2.add((-1.9648717830943396E-8));
      complex0.toString();
      Complex complex3 = complex0.sin();
      complex3.toString();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.sqrt1z();
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4569.874041108338));
      Complex complex1 = complex0.INF.atan();
      complex1.I.multiply(complex0);
      Complex complex2 = complex1.ZERO.cosh();
      complex2.multiply((-4569.874041108338));
      complex1.I.pow((-4569.874041108338));
      complex0.toString();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      complex3.getReal();
      complex3.sqrt();
      try { 
        complex3.nthRoot((-310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -310
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ZERO.subtract((-2808.10912766434));
      complex0.equals((Object) null);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex6.I.sinh();
      complex7.createComplex((-2808.10912766434), (-2808.10912766434));
      complex0.getImaginary();
      Complex complex8 = complex4.conjugate();
      complex8.NaN.asin();
      Complex complex9 = complex4.ZERO.negate();
      complex0.conjugate();
      complex3.getArgument();
      Complex complex10 = complex8.negate();
      complex10.ONE.multiply(complex1);
      complex8.tan();
      complex10.INF.conjugate();
      Object object0 = complex1.readResolve();
      complex10.equals(object0);
      complex9.sinh();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex0.sqrt();
      complex11.multiply(complex12);
      complex9.add(complex12);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.pow(543.358);
      Complex complex2 = complex0.INF.multiply(0.0);
      complex1.ONE.sin();
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.multiply((-4891));
      Complex complex4 = complex3.ONE.createComplex(543.358, 0.0);
      complex4.INF.multiply(0.0);
      complex1.divide((-2.291749683541979E-9));
      complex1.getField();
      complex3.log();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.getImaginary();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 2831.2688573626);
      Complex complex1 = complex0.ZERO.multiply(2831.2688573626);
      complex0.ZERO.subtract(complex1);
      Complex.valueOf(20.0, (double) 235);
      complex1.toString();
      Complex complex2 = complex1.multiply(235);
      complex0.getArgument();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.NaN.divide(2831.2688573626);
      Complex complex6 = complex5.ZERO.divide((double) 235);
      complex3.isInfinite();
      complex1.sqrt1z();
      complex6.INF.sqrt1z();
      complex1.ZERO.nthRoot(235);
      complex2.equals(complex3);
      Complex.valueOf(0.0, 20.0);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1983.184));
      complex0.isInfinite();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.pow(complex1);
      complex1.ONE.subtract((-1983.184));
      Complex complex3 = complex1.add((-1983.184));
      complex3.asin();
      Complex complex4 = complex3.ONE.multiply(complex1);
      Complex complex5 = complex0.add(Double.NaN);
      Complex.valueOf((-1983.184));
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex4.pow(0.0);
      complex4.subtract(complex2);
      Complex complex8 = complex6.multiply(872.6362080853);
      Complex complex9 = complex7.multiply(0.6249561309814453);
      complex8.subtract(0.6249561309814453);
      complex6.readResolve();
      complex9.multiply(complex6);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-1939.736), (-1939.736));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.createComplex(0.0, 1865.8);
      Complex complex4 = complex3.atan();
      complex4.I.subtract(complex2);
      Complex complex5 = complex3.acos();
      complex3.tan();
      complex5.cosh();
      complex4.toString();
      complex1.subtract(complex0);
      complex5.multiply(3038);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex2.ZERO.createComplex(1123.15442938, 1.0);
      complex4.ZERO.sqrt();
      complex1.ZERO.asin();
      Complex complex5 = complex0.NaN.pow(complex1);
      complex0.I.tanh();
      Complex complex6 = complex0.tanh();
      Complex.valueOf(1123.15442938, 1123.15442938);
      complex6.hashCode();
      complex0.nthRoot(32);
      complex1.pow(0.0);
      complex5.hashCode();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.I.divide(complex1);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(769.5523427503);
      Complex complex1 = complex0.tanh();
      complex0.INF.multiply(complex1);
      complex1.abs();
      complex1.hashCode();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex2.ONE.sqrt();
      Complex complex6 = complex5.ZERO.sinh();
      complex6.subtract((-2178.2560114362063));
      Complex complex7 = complex5.ZERO.pow(769.5523427503);
      complex7.NaN.readResolve();
      Complex complex8 = Complex.valueOf(1.0);
      Complex.valueOf(1.0, 0.0);
      complex3.sqrt1z();
      complex1.getImaginary();
      Complex complex9 = complex8.subtract(complex4);
      int int0 = (-4320);
      try { 
        complex9.ZERO.nthRoot((-4320));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,320
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex0.NaN.getField();
      Complex complex2 = complex1.ONE.exp();
      complex2.ONE.toString();
      complex0.sqrt1z();
      Complex complex3 = Complex.valueOf((-2082.5699927885));
      Complex complex4 = complex0.NaN.divide(complex3);
      complex1.NaN.sqrt1z();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.ZERO.pow(7.731253598);
      complex0.INF.multiply(870.2905976088628);
      complex1.isNaN();
      complex0.abs();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex0.subtract(7.731253598);
      complex6.subtract(Double.NaN);
      Complex complex10 = complex7.cos();
      complex4.multiply(complex10);
      Complex complex11 = complex2.log();
      complex11.ONE.sqrt();
      complex8.acos();
      complex7.pow(complex10);
      complex1.tan();
      complex9.cosh();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex0.negate();
      complex0.ONE.getArgument();
      complex2.ONE.divide(112.45378385322559);
      complex0.ONE.atan();
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex1.divide(0.0);
      complex2.pow(0.0);
      Complex.valueOf(0.0);
      Complex complex7 = complex6.INF.tanh();
      complex7.ONE.sqrt();
      complex7.INF.getArgument();
      complex1.nthRoot(782);
      Complex complex8 = complex6.subtract(complex3);
      Complex complex9 = complex8.INF.cosh();
      Complex complex10 = complex3.asin();
      Complex complex11 = complex10.ZERO.subtract(complex7);
      complex7.nthRoot(782);
      complex4.toString();
      Complex complex12 = complex5.exp();
      complex12.ZERO.hashCode();
      complex10.ONE.readResolve();
      Complex.valueOf(0.0);
      complex11.subtract((-4011.309992));
      complex5.abs();
      complex9.pow((-430.62464));
      complex11.add(0.7853981633974483);
      Complex.valueOf((-430.62464));
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.add(complex1);
      complex0.toString();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.sin();
      complex0.isInfinite();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex0.abs();
      Complex complex3 = complex0.I.multiply(665.833560872665);
      complex3.ZERO.abs();
      Complex complex4 = complex2.multiply(643);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.negate();
      complex6.ONE.tanh();
      complex5.sinh();
      complex2.createComplex((-263.47264246087), 1.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex(4958.67, 4958.67);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.INF.divide((-1428.559));
      Complex complex4 = complex1.ZERO.add(complex0);
      complex4.I.tanh();
      complex4.cos();
      Complex.valueOf(4958.67, 0.0);
      Complex complex5 = complex0.ZERO.multiply((-1631.7713422));
      Complex complex6 = complex3.INF.negate();
      complex6.I.pow(complex5);
      complex1.pow(complex0);
      try { 
        complex0.nthRoot((-4198));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,198
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.multiply(0.0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.NaN.multiply((-20.0));
      Complex complex3 = complex2.I.divide((-20.0));
      Complex complex4 = Complex.valueOf((-20.0));
      Complex complex5 = complex3.I.add(complex4);
      complex5.ONE.readResolve();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.INF.sqrt1z();
      complex2.multiply(3.537475449241181E-268);
      Complex complex8 = complex7.ONE.sqrt1z();
      complex8.divide(complex1);
      Complex.valueOf(102.0902106);
      complex4.INF.hashCode();
      complex4.ONE.log();
      complex6.toString();
      complex5.NaN.hashCode();
      complex0.NaN.multiply(complex2);
      complex7.ONE.divide((-20.0));
      try { 
        complex2.nthRoot((-834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -834
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.I.tan();
      complex2.ZERO.nthRoot(2221);
      Complex complex4 = complex2.INF.tan();
      complex4.NaN.abs();
      Complex complex5 = complex2.exp();
      complex5.INF.atan();
      Complex complex6 = complex5.exp();
      complex6.ZERO.nthRoot(2221);
      complex6.multiply(360.9);
      Complex complex7 = complex4.exp();
      Complex complex8 = complex5.pow(complex3);
      complex8.I.sin();
      complex4.INF.divide(0.0);
      complex3.sqrt1z();
      complex3.getArgument();
      Complex complex9 = complex1.multiply(Double.NaN);
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex9.cosh();
      complex11.NaN.subtract(Double.NaN);
      complex11.readResolve();
      complex7.divide(complex10);
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.ONE.atan();
      complex3.ZERO.nthRoot(548);
      complex3.ONE.sqrt1z();
      complex2.I.pow(complex0);
      complex1.NaN.abs();
      Complex complex4 = complex1.sinh();
      complex4.ONE.cosh();
      Complex complex5 = complex2.multiply(complex0);
      Complex.valueOf(20.0, Double.NaN);
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = Complex.valueOf((-1.6166170913368169E-12));
      complex8.INF.sinh();
      complex1.equals(complex8);
      complex7.createComplex(3561.0, (-20.0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.multiply(complex1);
      complex0.sin();
      complex2.getImaginary();
      complex0.multiply(complex2);
      complex1.hashCode();
      Complex complex5 = complex1.sqrt();
      complex5.ZERO.readResolve();
      complex3.multiply(0.0);
      complex2.reciprocal();
      complex4.pow((-645.5864505));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      double double1 = 0.0;
      Complex complex1 = new Complex(0.0);
      complex1.INF.cos();
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.createComplex(0, 0.0);
      complex2.NaN.conjugate();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide(0.0);
      complex1.ONE.divide(0.0);
      Complex complex2 = complex1.NaN.multiply(0.0);
      complex0.getReal();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex4.ZERO.readResolve();
      Complex complex5 = complex3.ZERO.asin();
      Complex complex6 = complex1.I.subtract((-317.48685));
      complex6.NaN.add(0.0);
      Complex complex7 = complex0.ONE.cosh();
      complex7.ZERO.cosh();
      complex7.I.getArgument();
      complex7.multiply(complex2);
      Complex complex8 = complex1.INF.reciprocal();
      complex7.getArgument();
      complex1.equals("");
      Complex complex9 = complex8.subtract(0.0);
      Complex complex10 = Complex.valueOf(351.0614157414);
      complex4.add(complex10);
      complex9.add(2.0);
      complex5.getImaginary();
      complex0.getReal();
      complex2.pow(complex4);
      complex0.readResolve();
      Complex complex11 = new Complex((-317.48685), 1.8612397134087598E-8);
      complex7.multiply(complex11);
      complex5.atan();
      Complex.valueOf(351.0614157414, 739.869674592836);
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-719.7245747056443), 0.0);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ONE.cosh();
      complex2.ONE.asin();
      complex2.NaN.cos();
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.add((-719.7245747056443));
      Complex complex6 = complex4.log();
      complex6.ONE.multiply(complex1);
      complex6.ZERO.tanh();
      Complex complex7 = Complex.valueOf(0.0);
      Complex.valueOf(0.0);
      Complex complex8 = complex7.I.tanh();
      complex5.ONE.hashCode();
      Complex complex9 = complex3.multiply(2441.745989);
      Complex complex10 = complex9.INF.sqrt1z();
      complex10.ZERO.tanh();
      complex4.getField();
      complex3.NaN.pow(0.0);
      Complex complex11 = complex3.add(0.0);
      Complex complex12 = complex1.asin();
      Complex complex13 = complex4.subtract(complex11);
      complex13.NaN.tanh();
      complex5.add(2441.745989);
      complex0.isInfinite();
      complex0.subtract(complex12);
      complex4.multiply(0.0);
      complex2.exp();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-2017.11), (-2017.11));
      complex0.ZERO.subtract((-2380.3619));
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.multiply(2351.80580514);
      complex2.I.abs();
      Complex complex3 = complex0.INF.divide(complex1);
      complex0.readResolve();
      complex3.NaN.sin();
      Complex.valueOf(0.0);
      Complex complex4 = complex3.NaN.tanh();
      complex4.INF.cosh();
      complex3.I.subtract(1.0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex6.NaN.pow(0.0);
      complex3.INF.createComplex(1.0, 1.0);
      Complex complex8 = complex3.sin();
      complex8.I.pow(complex7);
      complex8.pow(0.0);
      complex8.subtract(0.0);
      complex6.add(0.0);
      complex2.getReal();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.5696103572845459, 1991.77956131);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.nthRoot(7);
      complex0.INF.readResolve();
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.toString();
      Complex complex2 = complex0.divide((double) 7);
      Complex complex3 = complex2.INF.multiply(3404.0);
      complex3.ONE.hashCode();
      complex2.equals(list0);
      Complex complex4 = complex2.multiply(complex3);
      complex4.isInfinite();
      complex2.I.tan();
      complex2.getImaginary();
      Complex complex5 = complex2.multiply((double) 7);
      Complex complex6 = complex4.divide(complex5);
      complex6.hashCode();
      complex5.NaN.acos();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex5.divide(complex2);
      Complex complex9 = complex8.ONE.pow((double) 7);
      complex9.NaN.subtract((double) 7);
      Complex complex10 = complex8.I.tan();
      complex5.hashCode();
      Complex complex11 = Complex.ZERO;
      complex5.equals(complex11);
      complex7.cos();
      complex5.add((double) 7);
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      complex1.createComplex((-2280.5908), 0.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-571.09751));
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.ONE.subtract(complex0);
      complex1.I.multiply(918);
      Complex complex4 = complex0.ZERO.subtract((-571.09751));
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex6.tan();
      complex7.ONE.createComplex(918, 0.0);
      Complex complex8 = complex0.divide((-571.09751));
      complex1.NaN.createComplex(918, 0.0);
      complex5.NaN.sqrt1z();
      complex8.sqrt();
      complex3.subtract((-1.0));
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.acos();
      complex1.ZERO.hashCode();
      Complex complex4 = complex2.divide(complex0);
      complex3.I.readResolve();
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = complex1.pow(complex3);
      Complex complex7 = complex6.add(1.0);
      Complex complex8 = complex5.multiply(1.0);
      Complex complex9 = complex2.multiply(1);
      Complex complex10 = complex9.INF.tan();
      complex5.isInfinite();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex11.ZERO.subtract(complex1);
      complex12.NaN.toString();
      List<Complex> list0 = complex9.nthRoot(1);
      assertTrue(list0.contains(complex6));
      
      complex5.abs();
      Complex complex13 = complex2.sqrt1z();
      complex9.hashCode();
      Complex complex14 = complex9.sinh();
      assertEquals(1.1752011936438014, complex14.getReal(), 0.01);
      
      complex2.add(complex1);
      Complex complex15 = complex13.tanh();
      assertEquals(0.0, complex15.getReal(), 0.01);
      
      Complex complex16 = complex12.createComplex(1.0, 1);
      Complex complex17 = complex16.INF.multiply(1);
      Complex complex18 = complex10.multiply(0.0);
      String string0 = complex0.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex19 = Complex.valueOf(0.0);
      Complex complex20 = complex19.INF.add(complex18);
      assertEquals(0.0, complex19.getReal(), 0.01);
      assertSame(complex20, complex18);
      
      Complex complex21 = complex8.subtract(2439.16);
      assertEquals((-2438.16), complex21.getReal(), 0.01);
      
      Complex complex22 = complex7.pow(complex8);
      assertEquals(2.0, complex22.getReal(), 0.01);
      
      Complex complex23 = complex0.acos();
      assertTrue(complex23.equals((Object)complex15));
      assertEquals(0.0, complex23.getReal(), 0.01);
      assertEquals(-0.0, complex23.getImaginary(), 0.01);
      assertFalse(complex23.equals((Object)complex17));
      
      complex11.isInfinite();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertTrue(complex11.equals((Object)complex4));
      
      complex1.getField();
      assertTrue(complex1.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt1z();
      complex0.isNaN();
      Complex complex2 = complex1.conjugate();
      complex2.isInfinite();
      boolean boolean0 = complex2.equals(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(boolean0);
      assertTrue(complex2.equals((Object)complex1));
  }
}
