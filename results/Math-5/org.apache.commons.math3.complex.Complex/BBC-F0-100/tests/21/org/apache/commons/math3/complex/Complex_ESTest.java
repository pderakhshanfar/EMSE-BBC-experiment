/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:24:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-2.329967807055457E-10));
      Complex complex1 = complex0.tanh();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.INF;
      complex1.INF.add(complex3);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(-0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex0.toString();
      complex0.INF.sqrt1z();
      Complex complex3 = complex0.ZERO.conjugate();
      complex1.INF.multiply(849);
      complex3.ONE.negate();
      complex2.INF.subtract(complex1);
      complex0.subtract(Double.NaN);
      Complex complex4 = complex0.sqrt();
      complex1.divide(complex2);
      complex4.divide(Double.NaN);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.log();
      complex2.tanh();
      complex1.acos();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5864.56039057615), (-5864.56039057615));
      complex0.getField();
      complex0.acos();
      complex0.tanh();
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex1.tan();
      complex2.getArgument();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.I.nthRoot(1);
      Complex complex2 = new Complex(567.752043773048, (-20.0));
      complex2.tan();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.atan();
      complex5.NaN.hashCode();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.divide(complex4);
      complex7.log();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex0.reciprocal();
      complex1.tan();
      Complex complex2 = Complex.valueOf((-1.779945804977441E239));
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      complex0.nthRoot(1567);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.NaN;
      complex3.getArgument();
      Complex complex4 = complex2.atan();
      complex4.reciprocal();
      complex0.tan();
      Complex complex5 = complex0.multiply(Double.NaN);
      complex2.nthRoot(762);
      complex2.pow(201.2400912779957);
      complex5.multiply(1489);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, (-0.9997246768769205));
      double double0 = (-971.1561);
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.subtract((-2497.0348060712945));
      Complex.valueOf((-2497.0348060712945));
      complex4.nthRoot(1511);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex3.ZERO.subtract((-1.0));
      complex4.ONE.add((-1.0));
      complex0.ONE.sqrt();
      int int0 = 1431655765;
      complex3.NaN.sqrt1z();
      // Undeclared exception!
      complex0.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(complex0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-563.8752207833319), (-563.8752207833319));
      Complex complex1 = complex0.cosh();
      complex1.add(complex0);
      complex1.ONE.hashCode();
      complex1.subtract((-78.5941366658896));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.004317735625442098, 2503.504412185);
      complex0.INF.nthRoot(1506);
      Complex complex1 = complex0.ZERO.createComplex(Double.POSITIVE_INFINITY, 2503.504412185);
      complex1.ONE.reciprocal();
      complex0.ONE.multiply(complex1);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.INF.divide(complex2);
      Complex complex4 = complex3.ZERO.asin();
      complex3.NaN.atan();
      Complex complex5 = complex4.ONE.add(0.32341301441192627);
      complex5.ONE.add(0.004317735625442098);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.329967807055457E-10));
      Complex complex1 = Complex.ZERO;
      complex0.I.multiply((-2.329967807055457E-10));
      complex0.exp();
      complex0.subtract((-2.329967807055457E-10));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((double) 750, 5.092753117288608E212);
      complex2.multiply(750);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.329967807055457E-10));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply((-2.329967807055457E-10));
      Complex complex3 = complex0.sinh();
      Complex complex4 = new Complex(946.0337922599713, Double.NaN);
      complex4.subtract(1073.3616102);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex2.log();
      complex6.createComplex(946.0337922599713, (-2.329967807055457E-10));
      complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.329967807055457E-10));
      Complex complex1 = complex0.log();
      complex1.log();
      complex0.tanh();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.sin();
      complex4.getArgument();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.tanh();
      complex7.reciprocal();
      complex2.tan();
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.329967807055457E-10));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply((-2.329967807055457E-10));
      Complex complex3 = complex0.sinh();
      Complex complex4 = new Complex(Double.NaN, (-0.8936378186609834));
      complex4.subtract((-2495.5680656493));
      complex3.ONE.reciprocal();
      complex2.log();
      complex3.createComplex((-0.8936378186609834), Double.NaN);
      complex4.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(8.13035024310129);
      Complex complex2 = Complex.ZERO;
      complex2.INF.log();
      complex2.NaN.multiply(complex1);
      complex2.nthRoot(1819058340);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-2.329967807055457E-10), (-2.329967807055457E-10));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.I.multiply((-2.329967807055457E-10));
      complex0.sinh();
      Complex complex4 = complex3.tanh();
      complex4.ONE.createComplex(0.41421356237309515, (-2.329967807055457E-10));
      complex0.sqrt1z();
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.tanh();
      complex2.NaN.pow((-1.0772154376548336E-8));
      Complex complex7 = complex6.sin();
      complex4.getArgument();
      complex7.add(complex2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.329967807055457E-10));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply((-2.329967807055457E-10));
      complex0.sinh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.tanh();
      complex2.tanh();
      Complex complex5 = complex4.acos();
      complex0.sin();
      complex1.getArgument();
      complex1.atan();
      complex4.tanh();
      complex2.reciprocal();
      complex5.tan();
      complex3.pow(1007.8145);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-2324.64), 6.440430933947252E-58);
      complex0.ONE.toString();
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.createComplex(6.440430933947252E-58, (-137.1463));
      Complex complex3 = complex0.createComplex((-2324.64), (-6.990650304449166E-10));
      complex1.INF.acos();
      Complex complex4 = complex0.add(4737.4);
      complex4.I.abs();
      Complex complex5 = complex0.multiply(0.8813735870195434);
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.I.createComplex(0.0, (-954.0));
      complex5.cosh();
      complex7.add(complex2);
      complex5.sinh();
      complex4.readResolve();
      Complex complex8 = complex1.sinh();
      try { 
        complex8.nthRoot((-1369));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,369
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.329967807055457E-10));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply((-2.329967807055457E-10));
      complex0.exp();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.sqrt1z();
      complex4.ONE.acos();
      complex3.log();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.tanh();
      complex6.INF.add((-2.329967807055457E-10));
      complex6.NaN.acos();
      complex6.sin();
      complex3.getArgument();
      Complex complex7 = complex0.atan();
      complex7.tanh();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = Complex.valueOf((-2.329967807055457E-10));
      complex9.tan();
      complex2.exp();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2473.4369709142366));
      complex1.ZERO.tan();
      complex0.I.asin();
      Complex complex2 = Complex.valueOf((-2473.4369709142366), (-82.1223534649));
      complex2.getImaginary();
      Complex complex3 = complex1.divide((-82.1223534649));
      Complex complex4 = Complex.valueOf(2020.5426331334, 1874.305);
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.tanh();
      complex0.sqrt1z();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf(561.863);
      complex4.log();
      Complex complex5 = complex3.log();
      complex5.tanh();
      complex4.acos();
      Complex complex6 = complex4.sin();
      complex3.getArgument();
      complex3.atan();
      complex6.tanh();
      complex1.reciprocal();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      complex0.toString();
      Complex complex1 = complex0.cos();
      complex1.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex2.NaN.getArgument();
      complex1.readResolve();
      Complex complex3 = complex0.divide((-18.245195026686506));
      complex3.toString();
      complex1.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.asin();
      complex0.abs();
      complex1.toString();
      Complex complex4 = complex3.asin();
      Complex complex5 = new Complex(1.0);
      Complex complex6 = complex5.divide(complex2);
      complex1.getArgument();
      complex5.sqrt();
      complex3.multiply(complex6);
      Complex complex7 = complex1.sinh();
      complex0.equals(complex7);
      complex2.toString();
      Complex complex8 = complex0.tan();
      complex7.multiply(complex8);
      complex4.log();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.329967807055457E-10));
      Complex complex1 = complex0.I.add(complex0);
      Complex complex2 = complex0.I.multiply((-2.329967807055457E-10));
      complex0.sinh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex4.log();
      Complex complex8 = complex1.log();
      complex8.tanh();
      Complex complex9 = complex3.log();
      Complex complex10 = complex8.log();
      complex0.tan();
      Complex complex11 = complex6.tanh();
      complex11.sin();
      complex7.getArgument();
      Complex complex12 = complex10.atan();
      Complex complex13 = Complex.ZERO;
      complex13.tanh();
      complex12.add(complex7);
      complex9.multiply((-3.070890294475815));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.abs();
      complex1.toString();
      complex0.cos();
      complex1.I.sqrt();
      complex1.getImaginary();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.multiply((-1006039087));
      complex3.abs();
      Complex complex4 = complex0.pow(1712.91022);
      complex4.getImaginary();
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      complex2.toString();
      Complex complex5 = complex2.tan();
      complex5.multiply(complex2);
      complex5.log();
      Complex complex6 = new Complex((-1.5430806348152437), 1.0);
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.329967807055457E-10));
      Complex complex1 = complex0.I.add(complex0);
      Complex complex2 = complex0.I.multiply((-2.329967807055457E-10));
      complex0.sinh();
      complex0.exp();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.sqrt1z();
      complex4.ONE.acos();
      complex3.log();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.tanh();
      complex6.NaN.acos();
      Complex complex7 = complex6.sin();
      complex3.getArgument();
      Complex complex8 = complex0.atan();
      complex8.tanh();
      complex2.reciprocal();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.329967807055457E-10));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.I.multiply((-2.329967807055457E-10));
      complex0.sinh();
      complex0.exp();
      Complex complex4 = complex3.tanh();
      complex0.sqrt1z();
      Complex complex5 = complex4.log();
      Complex complex6 = complex2.log();
      Complex complex7 = new Complex((-1.0), (-1.0));
      complex6.pow(complex5);
      Complex complex8 = complex6.exp();
      complex0.toString();
      Complex complex9 = Complex.NaN;
      complex8.add(complex4);
      complex6.getReal();
      Complex complex10 = new Complex((-194.46795));
      complex6.conjugate();
      complex8.subtract(224.31559873);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.962956589227457E199);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.createComplex((-1514.6475572490808), (-1514.6475572490808));
      complex2.toString();
      complex1.abs();
      Complex complex3 = complex2.divide(1.0);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.tanh();
      complex2.cos();
      Complex complex6 = complex3.multiply(0);
      complex0.abs();
      Complex complex7 = complex5.sin();
      complex5.pow((-1514.6475572490808));
      complex5.getImaginary();
      Complex complex8 = complex7.sinh();
      complex4.equals(complex6);
      Complex complex9 = Complex.I;
      complex9.toString();
      complex8.tan();
      Complex complex10 = Complex.valueOf((-1676.257378763), 1.557407724654902);
      Complex complex11 = complex4.multiply(complex10);
      complex3.log();
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.asin();
      complex0.abs();
      complex3.INF.pow(complex2);
      complex3.toString();
      Complex complex4 = complex0.asin();
      Complex complex5 = new Complex(5.962956589227457E199);
      Complex complex6 = complex2.divide(complex4);
      complex4.getArgument();
      complex0.sqrt();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.multiply(complex6);
      Complex complex9 = complex3.divide(2810.25894131401);
      complex9.isInfinite();
      complex7.log();
      complex8.getArgument();
      complex4.add(complex6);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-2037.344425));
      complex0.NaN.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.ONE.divide(complex3);
      Complex complex5 = complex1.divide(20.0);
      Complex complex6 = complex1.I.divide(5.521082422279256E-42);
      Complex complex7 = complex6.INF.multiply(complex1);
      Complex complex8 = complex6.subtract(complex0);
      complex8.INF.multiply(complex7);
      complex1.getReal();
      complex0.log();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.valueOf((-2037.344425), (-2037.344425));
      complex10.abs();
      Complex complex11 = complex3.sqrt();
      complex11.INF.asin();
      Complex complex12 = Complex.valueOf(0.0, Double.NaN);
      complex2.divide(complex12);
      Complex complex13 = complex6.reciprocal();
      Complex complex14 = complex13.NaN.sqrt();
      complex1.I.negate();
      complex13.INF.pow(complex0);
      complex11.exp();
      complex6.toString();
      Complex complex15 = Complex.NaN;
      complex9.add(complex15);
      complex5.getReal();
      complex14.conjugate();
      complex4.reciprocal();
      Complex.valueOf(Double.NaN, 5.521082422279256E-42);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = (-2442.396855034604);
      Complex complex0 = Complex.valueOf((-2442.396855034604));
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.log();
      complex2.pow(complex0);
      complex2.abs();
      Complex complex4 = complex3.divide(1.0);
      Complex complex5 = complex2.cos();
      Complex complex6 = Complex.valueOf((-522.0850486152539));
      complex6.tanh();
      complex6.cos();
      Complex complex7 = complex6.multiply((-1941));
      complex6.abs();
      Complex complex8 = complex2.sin();
      complex8.pow((-2489.0039846416867));
      complex8.getImaginary();
      complex0.equals(complex5);
      complex0.toString();
      complex4.tan();
      complex2.multiply(complex7);
      complex6.log();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.I.sin();
      complex1.abs();
      complex1.toString();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.sqrt();
      complex0.getImaginary();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.tanh();
      complex3.add(complex4);
      complex0.tan();
      Complex complex7 = Complex.ZERO;
      complex7.sqrt1z();
      complex1.conjugate();
      complex6.nthRoot(1806);
      complex4.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.INF.subtract(0.0);
      Complex complex4 = complex2.sin();
      complex4.getArgument();
      complex1.NaN.add((-3.141592653589793));
      complex1.nthRoot(1999);
      Complex complex5 = complex2.NaN.reciprocal();
      Complex complex6 = complex5.createComplex((-1519.526931), 1999);
      complex5.INF.toString();
      Complex complex7 = complex2.ZERO.exp();
      complex2.ONE.hashCode();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.ZERO.sqrt1z();
      Complex complex10 = complex2.ZERO.add((double) 1999);
      Complex complex11 = complex8.NaN.subtract(complex10);
      Complex complex12 = Complex.valueOf((double) 1999, (-764.51609458));
      complex12.ZERO.pow(complex9);
      Complex complex13 = complex11.divide(complex9);
      complex3.reciprocal();
      Complex complex14 = Complex.valueOf((-3.141592653589793));
      Complex complex15 = complex14.sqrt();
      complex8.negate();
      complex15.pow(complex6);
      complex2.exp();
      complex13.toString();
      Complex complex16 = Complex.NaN;
      complex16.add(complex15);
      complex7.getReal();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(1.1918249660105651E-8);
      Complex complex1 = complex0.INF.multiply((-1527.97137425));
      Complex complex2 = complex0.ZERO.subtract(527.5414665);
      complex0.INF.abs();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = new Complex((-115.956146), Double.POSITIVE_INFINITY);
      complex4.divide(619.1726366069736);
      complex4.getReal();
      Complex complex5 = Complex.I;
      complex5.acos();
      Complex complex6 = complex3.tanh();
      complex1.sqrt1z();
      Complex complex7 = complex6.log();
      complex7.ZERO.toString();
      complex7.log();
      Complex complex8 = Complex.INF;
      complex8.atan();
      Complex complex9 = complex8.tanh();
      complex9.NaN.getField();
      complex2.sin();
      complex9.getArgument();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex.valueOf(5.962956589227457E199);
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1514.6475572490808), (-1514.6475572490808));
      complex1.toString();
      Complex complex2 = complex0.exp();
      complex0.hashCode();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.valueOf((-0.17520119364380138));
      Complex complex6 = complex5.add((-0.17520119364380138));
      complex0.subtract(complex2);
      complex6.getField();
      complex5.hashCode();
      complex2.getImaginary();
      complex5.tanh();
      complex2.atan();
      complex4.log();
      complex1.exp();
      complex0.getField();
      complex4.atan();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.I.log();
      complex0.ZERO.pow(complex2);
      complex0.abs();
      Complex complex5 = complex0.divide(276.64173986686);
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex0.tanh();
      complex7.ZERO.cos();
      complex4.ONE.multiply(2202);
      complex6.I.abs();
      complex6.sin();
      Complex complex8 = complex3.pow((-1676.257378763));
      complex4.getImaginary();
      Complex complex9 = complex6.I.sinh();
      Complex complex10 = complex0.tanh();
      complex3.atan();
      Complex complex11 = complex9.log();
      complex10.exp();
      complex10.getField();
      complex8.atan();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-118.6556), (-118.6556));
      complex0.isInfinite();
      Complex complex1 = complex0.sinh();
      complex0.getImaginary();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.sinh();
      complex3.I.cosh();
      complex0.getReal();
      complex2.log();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = Complex.ONE;
      complex6.abs();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.sqrt();
      complex1.asin();
      Complex.valueOf((-118.6556), (-2.130447095555397E-31));
      complex6.divide(complex4);
      Complex complex9 = Complex.valueOf((-118.6556), (-118.6556));
      complex9.reciprocal();
      Complex complex10 = Complex.INF;
      complex10.sqrt();
      Complex complex11 = complex2.negate();
      complex9.pow(complex5);
      complex1.exp();
      Complex complex12 = Complex.I;
      complex12.toString();
      Complex complex13 = Complex.NaN;
      complex8.add(complex11);
      complex0.getReal();
      Complex complex14 = Complex.ONE;
      complex14.conjugate();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.329967807055457E-10));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.I.multiply((-2.329967807055457E-10));
      complex2.hashCode();
      Complex complex4 = complex3.tanh();
      complex4.sinh();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.add(Double.NaN);
      complex5.subtract(complex6);
      Complex complex7 = Complex.NaN;
      complex7.getField();
      complex7.hashCode();
      complex5.getImaginary();
      Complex complex8 = complex3.tanh();
      complex2.atan();
      Complex complex9 = new Complex(Double.NaN);
      complex9.log();
      complex6.exp();
      complex7.getField();
      complex9.atan();
      complex8.conjugate();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.I.log();
      Complex complex5 = complex0.ZERO.pow(complex2);
      complex0.abs();
      Complex complex6 = complex0.divide(276.64173986686);
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex0.tanh();
      complex8.ZERO.cos();
      complex8.reciprocal();
      Complex complex9 = complex7.pow((-577.19092562584));
      complex4.reciprocal();
      Complex complex10 = Complex.INF;
      complex10.divide(complex4);
      Complex complex11 = complex3.exp();
      Complex complex12 = Complex.ZERO;
      complex12.divide(2.0);
      complex1.getReal();
      complex4.acos();
      Complex complex13 = new Complex(20.0);
      Complex complex14 = complex13.tanh();
      complex14.ONE.sin();
      Complex complex15 = complex9.sqrt1z();
      complex15.log();
      Complex complex16 = Complex.I;
      complex16.log();
      complex8.tanh();
      Complex complex17 = complex5.sin();
      complex11.getArgument();
      complex8.atan();
      complex17.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-2037.344425));
      complex0.NaN.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex1.cosh();
      complex2.ONE.divide(complex3);
      complex1.divide(20.0);
      Complex complex4 = complex1.I.divide(5.521082422279256E-42);
      Complex complex5 = complex4.INF.multiply(complex1);
      Complex complex6 = complex4.subtract(complex0);
      Complex complex7 = complex6.INF.multiply(complex5);
      complex1.getReal();
      Complex complex8 = complex0.log();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex3.multiply(complex9);
      complex10.abs();
      complex3.sqrt();
      complex2.abs();
      Complex complex11 = complex4.sin();
      Complex complex12 = new Complex((-2037.344425), (-1692.251));
      complex12.ONE.tanh();
      complex9.cos();
      complex12.pow(1981.5);
      complex1.getImaginary();
      complex11.sinh();
      Complex complex13 = Complex.valueOf((-118.6556), Double.NaN);
      complex10.equals(complex13);
      complex8.toString();
      complex10.tan();
      complex4.multiply(complex7);
      complex8.log();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.I.log();
      Complex complex5 = complex0.ZERO.pow(complex2);
      complex0.abs();
      Complex complex6 = complex2.NaN.cos();
      Complex complex7 = complex0.tanh();
      complex7.ZERO.cos();
      complex4.ONE.multiply(2202);
      complex6.I.abs();
      Complex complex8 = complex6.sin();
      complex3.pow((-1676.257378763));
      complex4.getImaginary();
      complex6.I.sinh();
      complex0.equals(complex2);
      complex6.toString();
      complex2.tan();
      complex7.multiply(complex8);
      complex5.multiply(2202);
      complex7.hashCode();
      complex1.divide((double) 2202);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.negate();
      complex1.INF.subtract(0.0);
      Complex complex3 = complex2.sin();
      complex3.getArgument();
      complex1.NaN.add((-3.141592653589793));
      complex1.nthRoot(1999);
      Complex complex4 = complex2.NaN.reciprocal();
      complex4.createComplex((-1519.526931), 1999);
      complex4.INF.toString();
      complex2.ZERO.exp();
      complex2.ONE.hashCode();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex1.add(complex5);
      Complex complex7 = complex5.ZERO.sqrt1z();
      Complex complex8 = complex2.ZERO.add((double) 1999);
      Complex complex9 = complex5.NaN.subtract(complex8);
      complex5.getField();
      complex5.hashCode();
      complex5.negate();
      complex5.pow(complex2);
      complex1.exp();
      complex7.toString();
      Complex complex10 = Complex.NaN;
      complex5.add(complex6);
      complex9.getReal();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.negate();
      complex1.INF.subtract(0.0);
      Complex complex3 = complex2.sin();
      complex3.getArgument();
      Complex complex4 = complex1.NaN.add((-3.141592653589793));
      complex1.nthRoot(1999);
      Complex complex5 = complex2.NaN.reciprocal();
      complex5.createComplex((-1519.526931), 1999);
      complex5.INF.toString();
      complex2.ZERO.exp();
      complex2.ONE.hashCode();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex1.add(complex6);
      complex7.tan();
      complex1.sqrt1z();
      Complex complex8 = Complex.ZERO;
      complex8.conjugate();
      complex4.nthRoot(1999);
      complex4.exp();
      Complex complex9 = complex3.add(2.8687983047866287E102);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = new Complex(20.0);
      Complex complex7 = complex6.divide(20.0);
      Complex complex8 = complex6.multiply(complex2);
      Complex complex9 = complex8.subtract(complex3);
      Complex complex10 = Complex.valueOf(20.0, (-1644.16279521));
      Complex complex11 = complex10.multiply(complex9);
      complex11.getReal();
      complex0.log();
      Complex complex12 = Complex.NaN;
      complex3.multiply(complex7);
      complex4.abs();
      complex4.sqrt();
      Complex complex13 = complex3.asin();
      Complex complex14 = Complex.valueOf(909.2026, 0.0);
      complex10.divide(complex13);
      complex3.reciprocal();
      complex5.sqrt();
      Complex complex15 = complex9.negate();
      Complex complex16 = complex0.pow(complex4);
      complex8.exp();
      complex14.toString();
      Complex complex17 = Complex.NaN;
      complex16.add(complex14);
      complex15.getReal();
      complex17.conjugate();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-2037.344425));
      Complex complex1 = Complex.valueOf(5.521082422279256E-42);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf((-2498.26118765046), (-2037.344425));
      complex3.asin();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.getArgument();
      complex3.sqrt();
      Complex complex6 = Complex.I;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, (-2037.344425));
      complex6.multiply(complex7);
      Complex complex8 = complex6.divide(5.521082422279256E-42);
      complex4.isInfinite();
      complex8.log();
      Complex complex9 = Complex.ONE;
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2498.26118765046));
      complex1.ZERO.tan();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex2.I.divide(complex0);
      complex3.ONE.getArgument();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = complex5.divide(0.0);
      complex6.isNaN();
      complex2.multiply(2937);
      complex3.hashCode();
      complex0.divide(3.48696647730028E101);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-118.6556), (-118.6556));
      complex0.isInfinite();
      Complex complex1 = complex0.sinh();
      complex0.getImaginary();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.sinh();
      complex3.pow((-2003.7843461746347));
      Complex complex4 = Complex.I;
      complex2.divide(complex3);
      Complex.valueOf((-2003.7843461746347), (-118.6556));
      Complex complex5 = Complex.valueOf((-118.6556));
      complex0.divide(complex5);
      complex2.add((-1.0));
      complex5.cosh();
      complex1.getArgument();
      Complex.valueOf((-1.0));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.asin();
      complex0.abs();
      complex1.toString();
      complex2.getImaginary();
      complex0.cos();
      Complex complex3 = complex2.I.sqrt();
      complex1.getImaginary();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex1.add(complex2);
      Complex complex7 = complex6.NaN.tan();
      complex0.getField();
      complex5.hashCode();
      complex4.getImaginary();
      complex6.tanh();
      complex7.atan();
      complex3.log();
      complex7.exp();
      complex4.getField();
      Complex complex8 = complex4.atan();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.INF.subtract(0.0);
      Complex complex4 = complex2.sin();
      complex4.getArgument();
      complex1.NaN.add((-3.141592653589793));
      complex1.nthRoot(1999);
      Complex complex5 = complex2.NaN.reciprocal();
      Complex complex6 = complex5.createComplex((-1519.526931), 1999);
      complex6.ZERO.pow(0.4975400183002317);
      complex5.INF.toString();
      complex2.ZERO.exp();
      complex2.ONE.hashCode();
      Complex complex7 = complex2.tanh();
      complex1.add(complex7);
      complex7.ZERO.sqrt1z();
      Complex complex8 = complex2.ZERO.add((double) 1999);
      Complex complex9 = complex7.NaN.subtract(complex8);
      Complex complex10 = complex8.sqrt1z();
      complex3.conjugate();
      complex10.nthRoot(2103);
      complex2.exp();
      Complex complex11 = complex3.add(1.2628846168518066);
      complex11.INF.abs();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.asin();
      complex0.abs();
      complex1.toString();
      Complex complex4 = complex3.asin();
      Complex complex5 = new Complex(1.0);
      Complex complex6 = complex5.divide(complex2);
      complex1.getArgument();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex3.multiply(complex6);
      complex4.divide(1.5707963267948966);
      complex5.isInfinite();
      complex5.log();
      complex7.getArgument();
      complex4.add(complex8);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.negate();
      complex1.INF.subtract(0.0);
      Complex complex3 = complex2.sin();
      complex3.getArgument();
      complex1.NaN.add((-3.141592653589793));
      complex1.nthRoot(1999);
      Complex complex4 = complex2.NaN.reciprocal();
      complex4.createComplex((-1519.526931), 1999);
      complex4.INF.toString();
      complex2.ZERO.exp();
      complex2.ONE.hashCode();
      Complex complex5 = complex2.tanh();
      complex1.add(complex5);
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex2.ZERO.add((double) 1999);
      complex5.NaN.subtract(complex7);
      complex5.getField();
      complex4.tanh();
      complex6.conjugate();
      Complex.valueOf((-1519.526931));
      complex1.cosh();
      complex4.pow((double) 1999);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2498.26118765046));
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = Complex.valueOf((-2498.26118765046));
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.multiply(1300);
      complex2.abs();
      complex3.sin();
      complex3.pow((-1676.257378763));
      complex4.getImaginary();
      complex6.sinh();
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.toString();
      complex4.multiply(complex0);
      complex5.multiply(759);
      complex6.hashCode();
      complex4.divide((double) 1300);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.962956589227457E199);
      Complex complex1 = complex0.exp();
      complex0.hashCode();
      Complex complex2 = Complex.ZERO;
      complex2.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.sqrt1z();
      complex4.add(276.64264356421404);
      Complex complex5 = Complex.INF;
      complex3.subtract(complex5);
      complex5.getField();
      complex0.hashCode();
      complex5.getImaginary();
      complex4.tanh();
      complex1.atan();
      complex1.log();
      complex4.exp();
      Complex complex6 = Complex.I;
      complex6.getField();
      Complex complex7 = Complex.ONE;
      complex7.atan();
      complex0.conjugate();
      complex3.add((-0.5));
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1963.38), (-1963.38));
      complex0.add(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.add(complex1);
      complex0.I.exp();
      complex3.ZERO.divide(0.0);
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.subtract(2.0);
      Complex complex8 = complex6.ZERO.cosh();
      complex2.isInfinite();
      Complex complex9 = complex7.reciprocal();
      complex2.abs();
      complex8.sin();
      complex5.pow((-1595.0426959808));
      complex4.getImaginary();
      complex5.sinh();
      Complex complex10 = Complex.valueOf(389.55074084, 2.0);
      complex5.equals(complex10);
      complex8.toString();
      Complex complex11 = new Complex((-1595.0426959808));
      Complex complex12 = complex11.tan();
      complex12.multiply(complex10);
      Complex complex13 = Complex.INF;
      complex13.multiply((-1096));
      complex0.hashCode();
      complex9.divide(-0.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.pow((-605.0));
      Complex complex6 = Complex.INF;
      complex0.divide(complex6);
      complex1.multiply((-1084.816715267));
      complex2.add(complex4);
      Complex complex7 = Complex.valueOf((-1084.816715267));
      complex7.sqrt();
      complex5.abs();
      Complex complex8 = new Complex((-1084.816715267), 0.16442140936851501);
      complex8.multiply((-605.0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.asin();
      complex0.abs();
      complex1.toString();
      complex2.getImaginary();
      complex0.cos();
      Complex complex3 = complex2.I.sqrt();
      complex1.getImaginary();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex1.add(complex2);
      Complex complex7 = complex6.NaN.tan();
      complex7.I.divide((-1.0));
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.I.conjugate();
      complex6.nthRoot(2103);
      complex5.exp();
      complex3.add((-1.0));
      complex2.sqrt();
      complex0.add(complex9);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.sinh();
      complex0.getImaginary();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.sinh();
      complex3.cosh();
      Complex complex4 = complex2.cos();
      complex2.cosh();
      complex4.conjugate();
      Complex complex5 = new Complex(3648.0002053077455);
      complex5.multiply(complex3);
      Complex complex6 = Complex.valueOf(0.0);
      complex6.tanh();
      Complex complex7 = new Complex(6.283185307179586);
      complex7.conjugate();
      Complex.valueOf(3648.0002053077455);
      complex0.cosh();
      complex1.pow(6.283185307179586);
      Complex complex8 = Complex.ONE;
      complex1.equals(complex8);
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-118.6556), (-118.6556));
      Complex complex1 = Complex.valueOf((-118.6556));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.divide(complex0);
      complex3.getArgument();
      complex2.sqrt();
      Complex complex5 = complex2.multiply(complex4);
      complex5.divide((-1.7050250045582582));
      complex1.isInfinite();
      complex5.log();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1896.4027);
      complex0.ONE.reciprocal();
      complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = Complex.valueOf((-856.8), 2906.7);
      complex1.NaN.acos();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ZERO.sin();
      complex3.NaN.multiply(0.0);
      Complex complex5 = complex0.ONE.tan();
      complex3.tan();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex3.subtract(1896.4027);
      complex8.ONE.sin();
      Complex complex9 = complex2.tan();
      Complex complex10 = complex6.acos();
      complex10.I.divide(complex1);
      Complex complex11 = complex3.atan();
      complex11.ZERO.negate();
      complex7.getField();
      complex9.getImaginary();
      complex5.multiply((-2315.837252985979));
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-118.6556), (-118.6556));
      complex0.isInfinite();
      Complex complex1 = complex0.sinh();
      complex0.getImaginary();
      complex1.INF.divide(complex0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.I.cosh();
      complex3.cos();
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex0.multiply(complex1);
      Complex.valueOf((-118.6556));
      complex5.tanh();
      complex6.conjugate();
      Complex complex7 = Complex.valueOf(1556.56);
      Complex complex8 = complex7.cosh();
      complex8.pow((-118.6556));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.exp();
      complex0.getField();
      complex0.INF.toString();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex3.multiply((double) 183);
      complex4.INF.add(complex1);
      Complex complex5 = complex0.INF.cosh();
      complex5.acos();
      complex0.NaN.getArgument();
      Complex complex6 = complex0.multiply(183);
      Complex complex7 = complex1.pow(complex6);
      Complex complex8 = Complex.valueOf(703.74384785, Double.NaN);
      Complex complex9 = complex1.ONE.multiply(complex6);
      complex9.ONE.pow(complex2);
      Complex complex10 = complex8.NaN.divide(1.1730463525082348E-7);
      Complex.valueOf(0.0);
      complex10.NaN.tanh();
      Complex complex11 = complex6.acos();
      Complex complex12 = complex11.multiply(1.1730463525082348E-7);
      complex12.I.toString();
      Complex complex13 = complex7.ONE.sqrt1z();
      complex6.readResolve();
      complex0.isInfinite();
      complex8.ONE.pow((double) 183);
      complex7.divide(complex0);
      complex1.getReal();
      complex8.sqrt();
      complex13.toString();
      complex13.abs();
      complex10.subtract(0.0);
      Complex complex14 = complex6.cos();
      complex14.add(complex3);
      complex12.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2.49564303442);
      Complex complex2 = Complex.valueOf(1167.2909271644005);
      complex0.ZERO.asin();
      Complex complex3 = Complex.valueOf((-222.49161586), 0.0);
      complex1.NaN.createComplex(1167.2909271644005, 5.361211684173837E-108);
      Complex complex4 = complex0.ONE.subtract(complex1);
      Complex complex5 = complex0.multiply(0.0);
      complex5.NaN.toString();
      complex2.pow(0.0);
      complex4.multiply(0);
      complex3.subtract(complex0);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.I.log();
      Complex complex5 = complex0.ZERO.pow(complex2);
      complex0.abs();
      Complex complex6 = complex0.divide(276.64173986686);
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex0.tanh();
      complex8.ZERO.cos();
      complex4.ONE.multiply(2202);
      complex7.I.abs();
      Complex complex9 = complex7.sin();
      complex3.pow((-1676.257378763));
      complex4.getImaginary();
      complex7.I.sinh();
      complex0.equals(complex6);
      complex7.toString();
      complex2.tan();
      complex8.multiply(complex9);
      complex5.multiply((-1447));
      complex8.hashCode();
      complex1.divide((double) 2202);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-577.9662326));
      Complex complex2 = complex0.subtract(complex1);
      complex0.INF.toString();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.subtract((-577.9662326));
      complex4.INF.cosh();
      complex3.INF.multiply(complex2);
      Complex complex5 = complex1.NaN.sqrt1z();
      complex5.I.pow(0.0);
      complex0.I.cosh();
      complex2.equals(complex3);
      Complex complex6 = complex0.tanh();
      complex6.divide((-1076.4354395));
      complex3.getField();
      complex4.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1963.38), (-1963.38));
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex0.I.exp();
      Complex complex6 = complex4.ZERO.divide(0.0);
      complex4.pow(0.0);
      complex0.tanh();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.subtract(2.0);
      complex7.ZERO.cosh();
      complex3.isInfinite();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex1.pow(104.514138384);
      Complex complex11 = complex3.reciprocal();
      complex11.ZERO.divide(complex9);
      complex11.INF.exp();
      complex11.INF.divide(20.0);
      complex10.getReal();
      complex0.acos();
      complex1.tanh();
      complex9.sqrt1z();
      complex8.log();
      complex6.log();
      complex5.tanh();
      complex0.sin();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1668.8);
      Complex complex1 = complex0.tanh();
      int int0 = 0;
      try { 
        complex1.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3314.25137463, 4.31880454864738E-203);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.ZERO.sqrt();
      complex3.multiply(1);
      Complex complex4 = Complex.valueOf(3314.25137463);
      complex4.INF.atan();
      Complex complex5 = complex4.NaN.pow(complex2);
      Complex complex6 = complex0.createComplex(4.31880454864738E-203, 1493.0);
      Complex complex7 = complex1.acos();
      complex7.INF.getField();
      Complex complex8 = complex7.NaN.divide(1.0);
      Complex complex9 = complex7.log();
      Complex complex10 = complex1.cos();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex8.NaN.multiply(complex11);
      complex5.INF.multiply(complex8);
      Complex complex13 = complex6.log();
      complex8.INF.atan();
      complex13.ZERO.readResolve();
      complex8.multiply(complex6);
      Complex complex14 = complex12.sin();
      Complex complex15 = complex12.subtract(complex10);
      complex6.asin();
      complex3.pow(complex9);
      Complex complex16 = complex14.cos();
      complex15.add(4.31880454864738E-203);
      complex4.isInfinite();
      complex8.ONE.sqrt1z();
      complex16.sqrt();
      complex5.readResolve();
      complex16.abs();
      complex12.sqrt1z();
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-796.3));
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.exp();
      complex2.ZERO.add(1327.0);
      Complex complex4 = Complex.valueOf(1327.0);
      Complex complex5 = complex2.divide(1510.505);
      Complex complex6 = complex2.cos();
      Complex complex7 = Complex.ZERO;
      complex5.I.subtract(complex7);
      complex5.getReal();
      Complex.valueOf(1510.505, (-2868.90968));
      complex3.I.toString();
      complex5.tan();
      complex3.getField();
      complex1.negate();
      Complex complex8 = complex6.cos();
      complex8.multiply(2829);
      complex1.exp();
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex0.asin();
      complex0.abs();
      complex1.toString();
      complex2.getImaginary();
      complex0.cos();
      Complex complex3 = complex2.I.sqrt();
      complex1.getImaginary();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex1.add(complex2);
      complex6.NaN.tan();
      Complex complex7 = complex0.sqrt1z();
      complex7.I.conjugate();
      complex6.nthRoot(2103);
      complex5.exp();
      complex3.add((-1.0));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.divide(complex1);
      complex2.INF.getField();
      complex1.ZERO.tan();
      Complex.valueOf(0.3269403576850891, 38.977414753978);
      Complex complex3 = complex0.divide(complex1);
      complex1.I.pow(complex3);
      complex3.subtract(0.0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.log();
      complex5.getField();
      Complex.valueOf(0.0, 1.1241179396053055E261);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.add(2205.271);
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.atan();
      complex0.getArgument();
      complex0.getImaginary();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex0.sinh();
      complex4.abs();
      complex3.readResolve();
      Complex complex5 = complex3.log();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex3.I.sqrt1z();
      Complex complex7 = complex6.INF.divide(0.0);
      complex5.INF.acos();
      Complex complex8 = complex1.add(complex6);
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = complex5.add(complex3);
      complex2.INF.multiply(663.97095653073);
      Complex complex11 = complex10.INF.sinh();
      Complex complex12 = complex11.ONE.atan();
      complex12.acos();
      complex12.exp();
      Complex complex13 = complex6.atan();
      complex7.multiply(1424);
      complex13.readResolve();
      Complex.valueOf(2064.840973);
      complex11.cos();
      complex9.sin();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.negate();
      complex1.INF.subtract(0.0);
      Complex complex3 = complex2.sin();
      complex3.getArgument();
      complex1.NaN.add((-3.141592653589793));
      complex1.nthRoot(1999);
      Complex complex4 = complex2.NaN.reciprocal();
      complex4.createComplex((-1519.526931), 1999);
      complex4.INF.toString();
      complex2.ZERO.exp();
      complex2.ONE.hashCode();
      Complex complex5 = complex2.tanh();
      complex1.add(complex5);
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex2.ZERO.add((double) 1999);
      complex5.NaN.subtract(complex6);
      complex5.getField();
      complex5.hashCode();
      complex0.getImaginary();
      complex2.tanh();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.log();
      complex8.exp();
      complex8.getField();
      complex8.INF.atan();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1621.772));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide((-1621.772));
      Complex complex3 = complex2.INF.cosh();
      complex3.I.acos();
      Complex complex4 = complex0.multiply(complex1);
      complex4.INF.log();
      complex4.acos();
      complex1.isInfinite();
      complex1.INF.sqrt1z();
      Complex complex5 = complex1.pow((-1621.772));
      Complex complex6 = complex5.I.subtract(complex1);
      Complex complex7 = complex6.NaN.multiply((-1621.772));
      Complex complex8 = complex1.cos();
      complex8.I.divide((-1621.772));
      complex8.acos();
      complex2.add(complex3);
      complex5.subtract((-1621.772));
      complex2.divide(complex8);
      complex7.sqrt();
      complex6.createComplex((-1621.772), (-444.870074553055));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-795.0750552420353), 0.38905513286590576);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.ZERO.atan();
      complex3.ONE.getField();
      complex1.ONE.atan();
      try { 
        complex1.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-1583.9));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.I.sqrt();
      complex2.NaN.nthRoot(1111);
      Complex complex3 = complex1.INF.multiply((-1583.9));
      complex0.toString();
      complex0.getImaginary();
      Complex complex4 = complex0.ZERO.multiply(complex1);
      complex0.getField();
      complex0.INF.toString();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ZERO.tan();
      complex7.cosh();
      complex1.getField();
      complex3.createComplex((-4.791602708710648E-8), (-469.31));
      complex3.add((-2633.9343));
      complex4.acos();
      Complex complex8 = complex0.exp();
      complex5.toString();
      Complex complex9 = complex3.sinh();
      complex9.tanh();
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex1.negate();
      complex10.acos();
      complex8.getImaginary();
      complex11.hashCode();
      complex11.add((-1499.939082741));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.createComplex(2.5635838508605957, 387.562436774);
      complex0.nthRoot(180);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.multiply(260);
      complex3.negate();
      complex1.ZERO.tanh();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ZERO.log();
      complex1.subtract(387.562436774);
      complex3.getReal();
      complex1.divide(387.562436774);
      Complex complex6 = complex0.I.cosh();
      complex6.sqrt();
      Complex complex7 = complex0.atan();
      complex7.NaN.multiply(0);
      complex1.nthRoot(260);
      complex5.add(2.5635838508605957);
      Complex complex8 = complex2.log();
      complex8.acos();
      complex8.acos();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.negate();
      Complex complex1 = complex0.INF.multiply(1.0);
      Complex complex2 = complex0.I.createComplex(0.0, 3529.238);
      complex0.isNaN();
      Complex complex3 = complex1.sinh();
      complex2.hashCode();
      complex1.multiply((-3288.0685824342));
      Complex.valueOf(0.0, 1.0);
      complex3.pow((-1412.896));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.962956589227457E199);
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.tanh();
      complex1.multiply((-1620));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(1.1918249660105651E-8);
      Complex complex1 = complex0.INF.multiply((-1527.97137425));
      complex0.ZERO.subtract(527.5414665);
      complex0.INF.abs();
      complex0.readResolve();
      Complex complex2 = complex0.negate();
      complex1.subtract(complex0);
      Complex complex3 = complex2.sqrt1z();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.I.pow((-166.6298075313412));
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.divide((-2936.1424558586));
      complex4.INF.add(Double.POSITIVE_INFINITY);
      complex4.NaN.multiply(complex0);
      complex2.isNaN();
      complex2.NaN.add(6.283185307179586);
      complex1.nthRoot(7);
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex5.sinh();
      complex6.getArgument();
      complex0.reciprocal();
      complex1.subtract(175.691699);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.acos();
      complex2.INF.tanh();
      complex2.NaN.cos();
      complex0.I.divide(0.0);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex1.divide(1839.842446221629);
      complex0.INF.asin();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.subtract(0.0);
      Complex complex7 = complex1.pow(complex3);
      complex6.NaN.pow(complex5);
      Complex complex8 = complex5.NaN.createComplex(1.2424439441817321E-60, 0.0);
      complex8.INF.add((-1808.12219571102));
      complex7.toString();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-930.9792), (-930.9792));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.pow((-930.9792));
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex2.NaN.negate();
      Complex complex5 = complex4.ONE.multiply((-930.9792));
      complex4.NaN.divide(2341.9426544666);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = new Complex((-930.9792));
      Complex complex8 = complex0.ZERO.tan();
      complex2.ZERO.pow(complex6);
      Complex complex9 = complex0.add(complex7);
      complex0.subtract(complex7);
      complex0.ONE.readResolve();
      complex6.ONE.abs();
      complex0.getImaginary();
      complex6.getArgument();
      complex7.I.cosh();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex10.I.cos();
      Complex complex12 = complex11.NaN.reciprocal();
      complex2.createComplex((-358.3129394), (-930.9792));
      complex8.log();
      complex6.getField();
      complex3.getReal();
      Complex complex13 = complex7.atan();
      complex13.tan();
      Complex complex14 = complex8.add(complex9);
      complex14.NaN.pow(complex13);
      complex7.multiply(complex5);
      complex6.isNaN();
      complex12.abs();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = Complex.valueOf((-20.0), 2.0);
      Complex complex4 = complex0.subtract(complex3);
      complex4.ZERO.hashCode();
      Complex complex5 = complex3.acos();
      complex5.NaN.readResolve();
      Complex complex6 = complex0.ONE.subtract(0.0);
      Complex complex7 = complex3.add((-20.0));
      complex7.ZERO.cos();
      complex0.hashCode();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex9.ONE.pow(complex3);
      complex0.hashCode();
      complex6.sqrt1z();
      complex10.sqrt1z();
      complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.ZERO.sin();
      complex2.ZERO.sqrt();
      complex0.toString();
      Complex complex4 = complex3.ONE.asin();
      complex0.abs();
      Complex complex5 = complex0.divide(complex1);
      complex1.NaN.readResolve();
      Complex complex6 = complex3.acos();
      complex2.asin();
      complex1.hashCode();
      complex4.cosh();
      complex5.abs();
      complex3.getReal();
      complex6.add(complex5);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2498.26118765046));
      complex1.ZERO.tan();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex2.I.divide(complex0);
      complex3.ONE.getArgument();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.multiply(complex4);
      complex5.divide(0.0);
      complex2.isInfinite();
      complex2.log();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.INF.asin();
      complex1.INF.abs();
      Complex complex2 = complex0.INF.sqrt();
      complex0.getArgument();
      Complex complex3 = complex2.NaN.pow(0.0);
      Complex complex4 = Complex.I;
      complex3.ZERO.divide(complex4);
      complex0.NaN.reciprocal();
      Complex complex5 = complex0.ONE.divide(complex2);
      complex0.add((-1.0));
      Complex complex6 = complex0.cosh();
      complex6.getArgument();
      Complex.valueOf((-1.0));
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1284.4);
      Complex complex1 = complex0.ONE.multiply(1);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex3.I.cosh();
      complex0.getImaginary();
      complex0.getImaginary();
      Complex complex5 = new Complex(1348.22);
      complex2.INF.sin();
      Complex complex6 = complex3.add(complex5);
      complex6.ZERO.negate();
      complex2.log();
      complex1.abs();
      complex0.negate();
      complex4.isInfinite();
      Complex complex7 = complex2.multiply((double) 1);
      complex7.divide(1284.4);
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-2037.344425));
      complex0.NaN.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex1.cosh();
      complex2.ONE.divide(complex3);
      Complex complex4 = complex1.divide(20.0);
      Complex complex5 = complex1.I.divide(5.521082422279256E-42);
      Complex complex6 = complex5.INF.multiply(complex1);
      Complex complex7 = complex5.subtract(complex0);
      complex7.INF.multiply(complex6);
      complex1.getReal();
      complex0.log();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex3.multiply(complex8);
      complex9.abs();
      Complex complex10 = complex3.sqrt();
      complex10.INF.asin();
      Complex complex11 = Complex.valueOf(0.0, Double.NaN);
      complex2.divide(complex11);
      Complex complex12 = complex5.reciprocal();
      Complex complex13 = complex12.NaN.sqrt();
      complex1.I.negate();
      complex12.INF.pow(complex0);
      complex10.exp();
      complex5.toString();
      Complex complex14 = Complex.NaN;
      complex8.add(complex14);
      complex4.getReal();
      complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.nthRoot(62);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ZERO.getField();
      complex3.NaN.hashCode();
      Complex complex4 = complex3.NaN.add(complex1);
      complex4.ZERO.pow(1137.59202682);
      complex3.ZERO.multiply(2122.05035285);
      complex0.INF.sqrt1z();
      complex0.divide(complex1);
      complex0.getImaginary();
      Complex complex5 = Complex.valueOf((-203.706135807), 0.0);
      Complex complex6 = complex0.pow(0.0);
      Complex complex7 = complex6.INF.multiply(complex5);
      Complex complex8 = complex2.divide(0.0);
      complex2.ONE.add(complex6);
      Complex complex9 = complex3.log();
      complex4.isInfinite();
      complex8.INF.reciprocal();
      complex3.divide((double) 62);
      complex9.getField();
      complex8.abs();
      complex7.asin();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-568.398483842), (-568.398483842));
      Complex complex1 = complex0.ONE.log();
      complex0.ONE.hashCode();
      complex1.ZERO.getArgument();
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.equals(object0);
      complex1.getField();
      complex1.getArgument();
      complex0.multiply(complex1);
      complex0.pow(8.725629524586503E-103);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3975.120248652089), (-3975.120248652089));
      complex0.ZERO.subtract(complex1);
      Complex complex2 = Complex.ONE;
      complex2.ZERO.multiply(complex0);
      Complex complex3 = complex0.INF.subtract(complex2);
      complex3.sqrt();
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex5.subtract(complex6);
      complex6.ZERO.readResolve();
      complex2.log();
      complex7.add(complex0);
      complex6.isNaN();
      complex6.tanh();
      complex4.pow(1.0);
      complex6.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-1950.07783093), (-1950.07783093));
      Complex complex1 = new Complex(0.0, (-1950.07783093));
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex0.NaN.pow(complex1);
      complex4.I.abs();
      Complex complex5 = complex1.sin();
      complex5.ZERO.hashCode();
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getImaginary(), 0.01);
      
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.pow(1.0);
      Complex complex9 = complex8.ZERO.cos();
      assertEquals(31.225613131930647, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals((-31.22561313193065), complex8.getImaginary(), 0.01);
      
      Complex complex10 = complex6.INF.add((-1950.07783093));
      complex6.getArgument();
      Complex complex11 = complex0.multiply(complex6);
      Complex complex12 = complex11.INF.cos();
      Complex complex13 = complex6.sqrt1z();
      Complex complex14 = complex13.reciprocal();
      Complex complex15 = complex6.ZERO.cosh();
      assertTrue(complex15.equals((Object)complex9));
      
      Complex complex16 = complex1.multiply(44);
      Complex complex17 = complex16.I.sqrt();
      assertEquals(0.7071067811865476, complex17.getReal(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertEquals((-85803.42456092), complex16.getImaginary(), 0.01);
      
      String string0 = complex10.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex18 = complex1.tanh();
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertEquals(1.1411074425674226, complex18.getImaginary(), 0.01);
      
      complex12.subtract(complex14);
      Complex complex19 = complex0.tan();
      assertEquals(0.0, complex19.getReal(), 0.01);
      
      Complex complex20 = complex13.multiply((-1319.118));
      assertSame(complex20, complex4);
      assertNotSame(complex20, complex3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.negate();
      complex0.ZERO.negate();
      Complex complex4 = complex3.I.pow(0.16442140936851501);
      Complex complex5 = complex4.ZERO.divide(complex3);
      assertEquals(0.25541077479894164, complex4.getImaginary(), 0.01);
      
      Complex complex6 = complex2.ZERO.multiply(0.0);
      Complex complex7 = complex2.add(complex0);
      Complex complex8 = complex7.sqrt();
      double double0 = complex6.abs();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex9 = complex8.multiply(0.16442140936851501);
      assertSame(complex9, complex5);
      assertSame(complex8, complex2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      Complex complex1 = complex0.I.sinh();
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex0.sqrt1z();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(19.974984355438178, complex3.getImaginary(), 0.01);
      
      complex2.getArgument();
      assertTrue(complex2.equals((Object)complex0));
      
      Complex complex4 = Complex.valueOf(0.5762182474136353);
      assertNotSame(complex4, complex2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      complex0.ONE.getArgument();
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.createComplex(1748.690388989461, 1748.690388989461);
      complex0.hashCode();
      Complex complex2 = complex1.divide(1748.690388989461);
      complex2.NaN.conjugate();
      complex1.NaN.divide(complex0);
      Complex.valueOf((-3621.1006436), 1.5707963267948966);
      complex0.abs();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.ONE.divide(2.008254051208496);
      complex4.INF.abs();
      complex4.ZERO.sinh();
      complex1.pow(0.0);
      try { 
        complex0.nthRoot((-413));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -413
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
