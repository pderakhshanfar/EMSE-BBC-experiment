/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:23:12 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(18.767684809830488, 18.767684809830488);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(18.767684809830488, 18.767684809830488);
      Complex complex3 = complex1.asin();
      complex1.getField();
      Complex complex4 = complex1.divide(0.07068414986133575);
      complex4.multiply(191);
      Complex complex5 = Complex.valueOf(1281.730201553825, 1281.730201553825);
      complex2.nthRoot(1897);
      complex1.subtract((double) 19);
      complex3.tan();
      complex2.getField();
      complex5.multiply(0.07068414986133575);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex0.reciprocal();
      complex0.NaN.exp();
      complex1.tan();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-611.3461569333095), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      complex0.add(1.0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.NaN;
      complex0.multiply((-3782.9324));
      complex2.getField();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-3339.2503946), (-905.98903136));
      Complex complex1 = complex0.conjugate();
      complex0.NaN.sin();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.ZERO.acos();
      int int0 = 2740;
      complex0.ONE.nthRoot(2740);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.INF.add(complex0);
      complex5.ONE.getField();
      Complex complex6 = Complex.valueOf((double) 2740, (double) 2740);
      Complex complex7 = complex0.reciprocal();
      complex7.add((-905.98903136));
      Complex complex8 = complex0.multiply((-840));
      Complex complex9 = complex0.multiply((-905.98903136));
      Complex complex10 = Complex.valueOf(1.2662018663984825E-17, Double.NaN);
      complex6.getArgument();
      complex9.pow(complex10);
      Complex complex11 = Complex.NaN;
      complex3.equals(complex11);
      complex8.nthRoot(2638);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(3888.65058, 3888.65058);
      Complex complex3 = complex0.ONE.sqrt();
      Complex complex4 = Complex.valueOf(3888.65058, 0.9999999974838503);
      complex3.ONE.add(complex4);
      Complex complex5 = Complex.valueOf(0.9999999974838503);
      Complex complex6 = new Complex(419.06);
      Complex complex7 = complex5.acos();
      Complex complex8 = new Complex(6.63595840453991E235, 1.0);
      Complex complex9 = complex8.asin();
      complex0.nthRoot(2703);
      Complex complex10 = complex8.tan();
      complex10.add(complex7);
      complex2.getField();
      Complex complex11 = Complex.valueOf(3.655589133934081E-8, 6.63595840453991E235);
      complex4.reciprocal();
      complex9.add(0.9999999974838503);
      complex11.sqrt();
      complex6.cosh();
      complex9.multiply(2709);
      Complex complex12 = new Complex(2709);
      Complex complex13 = Complex.I;
      complex13.getField();
      complex9.acos();
      complex1.tan();
      complex1.multiply(2709);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2907.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.add(complex1);
      complex0.I.cos();
      complex2.NaN.tanh();
      Complex complex3 = complex0.I.reciprocal();
      complex0.INF.sqrt1z();
      complex0.readResolve();
      complex0.abs();
      Complex complex4 = Complex.valueOf(1733.0474774234506, 1733.0474774234506);
      complex4.ZERO.cos();
      complex4.I.tanh();
      Complex complex5 = complex3.atan();
      complex2.readResolve();
      complex5.tanh();
      complex1.add(2907.0);
      complex0.negate();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex(9.903174064539538E203, (-1.0));
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.valueOf((-1.0));
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.log();
      complex6.readResolve();
      Complex complex7 = complex3.multiply(complex4);
      complex7.multiply(101);
      complex5.multiply(complex0);
      complex5.getArgument();
      Complex complex8 = new Complex((-20.0));
      Complex complex9 = complex8.multiply((-516));
      complex9.equals(complex6);
      Complex complex10 = new Complex((-6.203839803215248E-299), Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.add(complex0);
      complex3.tan();
      complex10.nthRoot(1995);
      complex6.cosh();
      complex10.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.abs();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.tanh();
      complex1.asin();
      complex1.INF.getField();
      Complex complex2 = complex0.ONE.divide((-648.125633867622));
      Complex complex3 = complex2.ONE.multiply(19);
      Complex complex4 = Complex.valueOf(20.0, (-2824.72));
      complex0.nthRoot(19);
      complex4.ZERO.conjugate();
      Complex complex5 = complex0.pow(2456.0);
      Complex.valueOf(0.0);
      complex5.toString();
      complex3.subtract(complex4);
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.subtract((-95.0));
      Complex complex2 = complex1.tan();
      complex2.pow(complex0);
      complex1.readResolve();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      double double0 = (-234.6148513722376);
      complex0.INF.readResolve();
      Complex complex2 = complex1.ONE.multiply((-234.6148513722376));
      complex2.ONE.log();
      complex1.abs();
      try { 
        complex0.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex1.ONE.divide(complex0);
      complex3.I.readResolve();
      complex2.ZERO.abs();
      Complex complex4 = complex0.INF.multiply((-2451));
      complex4.ONE.multiply((-2868.309800044242));
      Complex complex5 = complex0.cos();
      complex2.NaN.tanh();
      complex5.ZERO.getArgument();
      Complex complex6 = complex5.INF.conjugate();
      complex6.NaN.divide(complex2);
      Complex complex7 = complex5.sinh();
      complex5.exp();
      complex7.createComplex(0.0, 2710.076287303);
      complex1.cos();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.divide(complex8);
      Complex complex10 = Complex.valueOf((-2868.309800044242));
      Complex.valueOf(886.58720396);
      Complex complex11 = new Complex(886.58720396, (-2868.309800044242));
      complex4.isInfinite();
      complex5.divide(complex0);
      complex9.pow(complex10);
      complex8.tanh();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(3036.5899117);
      Complex complex1 = complex0.ONE.pow(1516.861);
      complex1.NaN.getArgument();
      complex0.isInfinite();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.sqrt1z();
      complex3.NaN.multiply((-3481395.749752571));
      Complex complex4 = complex2.createComplex(1516.861, 3036.5899117);
      complex4.I.abs();
      Complex complex5 = complex4.divide(complex1);
      complex3.subtract(3036.5899117);
      complex5.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1553.97517864, 1.907346499785443E21);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-70.4855092889708), 298.754486);
      complex1.subtract((-1.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      complex2.abs();
      complex1.log();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.I;
      Complex.valueOf(0.0, 2028.028707);
      Complex complex5 = Complex.I;
      complex5.abs();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex.valueOf((-1366.42977));
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-6481.642503723993));
      complex1.hashCode();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.divide(1.4142135623730951);
      complex0.abs();
      Complex complex1 = complex0.log();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = Complex.I;
      Complex.valueOf((-3481395.749752571), 1.2616519927978516);
      complex0.abs();
      complex1.tanh();
      Complex.valueOf(1.2616519927978516);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5052539519895093E306);
      Complex complex1 = complex0.I.exp();
      complex1.I.negate();
      complex1.log();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      complex3.NaN.sin();
      complex0.sqrt1z();
      complex2.ONE.getArgument();
      complex1.readResolve();
      Complex complex4 = Complex.valueOf(3.0357834799588566E112);
      Complex complex5 = complex2.pow(1.5052539519895093E306);
      Complex complex6 = complex5.ZERO.subtract(805.5);
      complex6.ZERO.cosh();
      Complex complex7 = complex5.pow(2.0);
      complex4.readResolve();
      complex4.acos();
      complex3.conjugate();
      complex4.divide((-835395.0));
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.multiply(2.1717383041010577E-300);
      Complex complex3 = new Complex(2.1717383041010577E-300);
      complex3.reciprocal();
      Complex complex4 = Complex.I;
      complex1.hashCode();
      Complex complex5 = Complex.valueOf((-730.0));
      complex2.asin();
      complex5.readResolve();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3481395.749752571), (-3481395.749752571));
      Complex complex1 = Complex.I;
      complex1.I.conjugate();
      complex1.getArgument();
      complex0.tan();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1366.42977));
      Complex complex1 = complex0.multiply(2547.804377646552);
      complex1.ZERO.reciprocal();
      Complex complex2 = Complex.I;
      complex2.INF.hashCode();
      Complex.valueOf((-996.610517050186));
      complex1.asin();
      Complex complex3 = (Complex)complex1.I.readResolve();
      // Undeclared exception!
      complex3.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex.valueOf(0.0, 0.0);
      Complex complex0 = Complex.I;
      complex0.getArgument();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = Complex.valueOf(7.243267286265823E-142);
      Complex complex3 = complex1.cosh();
      complex3.INF.asin();
      complex3.getArgument();
      Complex.valueOf(Double.NaN);
      Complex complex4 = Complex.I;
      complex4.tanh();
      complex2.pow((-40.1328439626295));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3529.35, 0.0);
      Complex complex1 = complex0.negate();
      complex1.cosh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.exp();
      complex0.getArgument();
      complex3.abs();
      complex1.log();
      Complex.valueOf((-964.3784760373361));
      complex3.abs();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.divide(1.4142135623730951);
      complex0.I.getField();
      Complex.valueOf(0.09317722916603088);
      Complex complex1 = new Complex(Double.NaN);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-6.461509354879894E29), (-3481395.749752571));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex0.ONE.asin();
      complex0.readResolve();
      Complex complex4 = complex0.negate();
      complex4.getReal();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex0.ZERO.sqrt1z();
      complex5.getReal();
      complex0.toString();
      Complex complex7 = complex4.I.exp();
      complex7.INF.createComplex((-3481395.749752571), (-1.0));
      Complex complex8 = complex3.add((-3481395.749752571));
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex2.negate();
      complex9.sqrt();
      complex5.pow(complex9);
      Complex complex11 = complex0.reciprocal();
      complex11.multiply((-3481395.749752571));
      complex10.subtract(complex6);
      complex8.add(complex3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sinh();
      complex0.getArgument();
      complex0.hashCode();
      complex0.getArgument();
      complex2.add((-585.0));
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex1.ZERO.divide((-1295.9792));
      complex0.sqrt();
      complex0.pow(complex0);
      complex0.hashCode();
      complex1.toString();
      Complex complex2 = Complex.NaN;
      Complex complex3 = new Complex((-1295.9792), (-1295.9792));
      complex3.reciprocal();
      complex0.multiply(940);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(3888.65058);
      complex0.ONE.sqrt();
      complex0.asin();
      Complex complex3 = complex0.I.multiply(1.4251641388208515E-21);
      complex3.ONE.subtract(3888.65058);
      complex1.I.multiply(1548);
      complex2.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.pow(419.06);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex5.tanh();
      complex7.log();
      complex5.ONE.createComplex(Double.POSITIVE_INFINITY, (-2.8977490516960565E-8));
      Complex complex8 = complex6.tan();
      complex8.ONE.multiply(14.893109580423973);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, 3.924948119147657E-4);
      complex9.ONE.getArgument();
      complex4.pow(complex2);
      complex6.equals(complex2);
      complex2.nthRoot(1548);
      Complex complex10 = complex5.sqrt1z();
      complex10.I.subtract(419.06);
      try { 
        complex5.nthRoot((-409));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -409
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.sqrt();
      complex3.getArgument();
      complex2.hashCode();
      complex0.getArgument();
      complex0.add((-2031.697249));
      Complex complex4 = complex0.createComplex((-163.1736989850135), 7207.999861265258);
      complex4.sinh();
      complex3.divide(complex4);
      complex3.abs();
      Complex complex5 = Complex.INF;
      complex5.asin();
      Object object0 = new Object();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.pow(829.8574);
      Complex complex1 = Complex.valueOf(829.8574);
      complex1.conjugate();
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.I;
      complex3.hashCode();
      Complex complex4 = Complex.ZERO;
      complex1.divide(complex4);
      complex3.tanh();
      complex2.asin();
      complex4.sqrt();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.divide(2383.58335);
      complex0.divide(complex3);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.asin();
      complex1.sqrt();
      complex5.pow(complex2);
      complex6.hashCode();
      complex1.toString();
      complex4.asin();
      complex1.reciprocal();
      complex5.multiply(59);
      Complex.valueOf((-334.8), (-2.2298267863810133E-8));
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = new Complex(0.0, 2403.282998579);
      complex2.ZERO.add(complex3);
      Complex complex4 = complex0.ZERO.multiply(0.13670018315315247);
      complex2.ONE.toString();
      Complex complex5 = Complex.ZERO;
      complex2.equals(complex5);
      Complex complex6 = complex1.conjugate();
      complex5.ZERO.divide(complex1);
      Complex complex7 = complex6.ONE.subtract(complex5);
      complex7.ONE.conjugate();
      complex1.I.getField();
      complex3.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.subtract(complex5);
      complex3.add(complex2);
      complex8.subtract(0.0);
      complex1.cosh();
      complex6.asin();
      complex4.getReal();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1366.42977));
      double double0 = 2547.804377646552;
      Complex complex1 = complex0.multiply(2547.804377646552);
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.I.sqrt1z();
      complex2.pow((-1.0));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf((-1366.42977), 2547.804377646552);
      Complex complex3 = complex0.cos();
      try { 
        complex3.nthRoot((-294855006));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -294,855,006
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.cosh();
      complex1.sqrt1z();
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex4.exp();
      complex5.getArgument();
      complex5.pow(Double.POSITIVE_INFINITY);
      complex3.abs();
      complex1.log();
      Complex complex6 = Complex.valueOf((-1295.9792));
      complex6.abs();
      Complex complex7 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.multiply((-926));
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = Complex.ONE;
      complex1.add(complex5);
      complex4.subtract(1.6016578405624026E-8);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(829.8574);
      Complex complex2 = Complex.valueOf(829.8574);
      Complex complex3 = complex2.conjugate();
      complex2.getArgument();
      complex2.add(Double.NaN);
      Complex complex4 = complex3.createComplex(829.8574, 0.0);
      Complex complex5 = complex4.sinh();
      complex4.divide(complex5);
      complex1.abs();
      Complex complex6 = new Complex(7207.999861265258, Double.NaN);
      complex6.equals(complex0);
      complex6.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.INF.tanh();
      Complex.valueOf(259.2502);
      Complex complex2 = complex0.multiply(complex1);
      complex1.getReal();
      complex2.ONE.sin();
      Complex complex3 = complex2.tan();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1461.632787333401, 1.094003438949585);
      complex0.ONE.getArgument();
      complex0.INF.abs();
      complex0.abs();
      complex0.getField();
      Complex complex1 = new Complex(2069.4813303);
      Complex complex2 = complex0.divide(complex1);
      complex2.INF.hashCode();
      complex2.ZERO.hashCode();
      complex1.INF.sqrt1z();
      complex0.multiply(complex1);
      complex2.ONE.readResolve();
      complex0.isInfinite();
      complex0.pow(complex1);
      Complex complex3 = complex0.asin();
      complex3.nthRoot(1021);
      complex3.I.nthRoot(1021);
      complex3.reciprocal();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1426.4177053919);
      Complex complex1 = complex0.multiply(2.81312841469177E128);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.I;
      complex0.hashCode();
      Complex complex4 = Complex.valueOf(2547.804377646552);
      complex0.asin();
      complex2.nthRoot(37);
      Complex complex5 = new Complex((-996.610517050186));
      Complex complex6 = complex2.atan();
      complex4.isNaN();
      complex0.isNaN();
      complex1.getImaginary();
      complex4.getArgument();
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.cos();
      complex3.log();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex8.cos();
      Complex complex11 = complex10.multiply((-2313));
      complex6.equals(complex1);
      complex9.acos();
      complex9.sqrt1z();
      complex11.createComplex(1426.4177053919, 2.010216236114502);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      complex0.getArgument();
      complex2.hashCode();
      complex1.getArgument();
      Complex complex3 = complex1.add(2069.4813303);
      complex0.createComplex((-2031.697249), 1741.44991);
      Complex complex4 = complex3.sinh();
      complex3.sqrt();
      Complex complex5 = complex0.divide(complex1);
      complex4.abs();
      complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      complex0.ONE.abs();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = Complex.I;
      complex3.sqrt1z();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = new Complex(1.0);
      complex1.getArgument();
      Complex complex7 = complex6.pow((-20.0));
      complex3.abs();
      Complex complex8 = complex4.log();
      complex8.divide(complex1);
      Complex.valueOf(1.0);
      complex7.abs();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-760.6232));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sqrt1z();
      complex0.exp();
      complex1.getArgument();
      Complex complex3 = complex2.pow((-760.6232));
      complex0.log();
      Complex.valueOf(1218.52330779585);
      complex3.abs();
      complex3.tanh();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1366.42977));
      Complex complex1 = complex0.multiply(2547.804377646552);
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.nthRoot(798);
      Complex complex3 = new Complex(2.601412773132324);
      Complex complex4 = complex1.atan();
      complex3.isNaN();
      complex2.isNaN();
      complex4.getImaginary();
      complex3.getArgument();
      Complex complex5 = Complex.I;
      complex1.cos();
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.sinh();
      complex7.abs();
      Complex complex8 = complex3.cos();
      complex7.multiply(1073741824);
      Complex complex9 = Complex.valueOf((-3339.2503946));
      complex8.equals(complex9);
      complex0.acos();
      Complex complex10 = Complex.valueOf((-1465.91));
      complex10.sqrt1z();
      complex0.createComplex(2031.697249, 2547.804377646552);
      complex5.divide((double) 1073741824);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(4108.5, (-762.0));
      Complex complex1 = new Complex((-762.0));
      Complex complex2 = complex0.divide(complex1);
      Complex.valueOf(4108.5, 4108.5);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex1.createComplex(4108.5, 2.0);
      complex4.ZERO.subtract(2.0);
      Complex complex5 = complex4.tanh();
      complex2.readResolve();
      complex3.cos();
      Complex complex6 = complex2.pow(complex3);
      complex6.NaN.sinh();
      Complex complex7 = complex4.sin();
      complex3.ZERO.divide(complex5);
      complex7.ONE.conjugate();
      complex7.getImaginary();
      complex6.conjugate();
      try { 
        complex5.nthRoot((-1006039087));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,006,039,087
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.5403023058681398, 0.5403023058681398);
      Complex complex1 = complex0.I.multiply(1145.03034885136);
      Complex complex2 = complex1.INF.add(complex0);
      complex0.readResolve();
      complex1.cos();
      Complex complex3 = complex0.multiply((-1028.812));
      complex3.log();
      complex0.pow((-3838.0));
      complex1.negate();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = new Complex(0.0, 2403.282998579);
      complex2.ZERO.add(complex3);
      Complex complex4 = complex0.ZERO.multiply(0.13670018315315247);
      complex2.ONE.toString();
      Complex complex5 = Complex.ZERO;
      complex2.equals(complex5);
      Complex complex6 = complex1.conjugate();
      complex5.ZERO.divide(complex1);
      complex6.ONE.subtract(complex5);
      complex1.I.getField();
      Complex complex7 = complex6.subtract(complex5);
      complex3.add(complex2);
      complex7.subtract(0.0);
      complex1.cosh();
      complex6.asin();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.INF.divide(complex2);
      complex2.abs();
      Complex complex4 = complex0.ZERO.add(1952.3554579);
      complex3.log();
      Complex complex5 = complex4.atan();
      complex5.add(complex0);
      complex1.pow(complex4);
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.I.sinh();
      complex1.I.acos();
      Complex complex3 = complex0.sqrt();
      complex3.getArgument();
      complex1.isInfinite();
      complex2.hashCode();
      complex2.getArgument();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.add((-1.0));
      Complex complex6 = complex4.createComplex((-1.1507496472539512E-93), 1306.56579049);
      Complex complex7 = complex6.sinh();
      complex3.divide(complex4);
      complex7.abs();
      Object object0 = complex7.readResolve();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.conjugate();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.sqrt();
      complex2.isInfinite();
      complex0.hashCode();
      complex2.getArgument();
      Complex complex3 = complex0.add(Double.NaN);
      Complex complex4 = complex3.createComplex(Double.NaN, 1072.2502854125512);
      complex4.sinh();
      Complex complex5 = complex4.divide(complex1);
      complex4.abs();
      Complex complex6 = Complex.I;
      complex6.equals((Object) null);
      complex3.toString();
      complex4.exp();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1366.42977));
      Complex complex1 = complex0.multiply(2547.804377646552);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = Complex.I;
      complex3.INF.hashCode();
      Complex complex4 = complex2.divide(complex3);
      complex1.tanh();
      complex3.asin();
      complex0.sqrt();
      Complex complex5 = complex1.pow(complex0);
      complex4.toString();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2370.0, (-1490.2802695775483));
      Complex complex1 = Complex.valueOf(1090.5650237, 948.58392878844);
      complex1.INF.subtract(complex0);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex3.ONE.multiply(complex2);
      complex4.ONE.hashCode();
      Complex complex5 = complex3.ZERO.log();
      complex5.ZERO.sqrt1z();
      Complex complex6 = new Complex((-1490.2802695775483), (-1490.2802695775483));
      Complex complex7 = complex0.I.pow(complex6);
      Complex.valueOf(948.58392878844);
      Complex complex8 = complex7.INF.cosh();
      Complex complex9 = complex0.log();
      complex9.readResolve();
      Complex complex10 = complex5.multiply(complex9);
      Complex complex11 = complex0.multiply((-516));
      Complex complex12 = complex11.multiply(complex1);
      complex10.NaN.getArgument();
      complex4.multiply((-516));
      complex7.equals(complex5);
      complex12.add(complex11);
      complex9.NaN.tan();
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1366.42977));
      Complex complex1 = complex0.multiply(2547.804377646552);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = Complex.I;
      complex3.INF.hashCode();
      Complex complex4 = complex1.ZERO.subtract(1.1507496472539512E-93);
      Object object0 = complex2.readResolve();
      complex3.equals(object0);
      complex4.log();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = Complex.NaN;
      complex6.sqrt1z();
      Complex.valueOf(2547.804377646552, (-1657.381182706));
      complex5.divide(complex6);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex7.add(1575.10247);
      complex0.readResolve();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = Complex.valueOf((-1366.42977));
      complex10.readResolve();
      complex9.cosh();
      complex3.add(909.1326424);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.createComplex(0.0, 1.1719142537166848E16);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.conjugate();
      complex3.INF.readResolve();
      complex3.NaN.asin();
      complex3.subtract(1.1719142537166848E16);
      complex1.cos();
      complex1.getArgument();
      complex1.add(1753.76689314555);
      Complex complex4 = Complex.NaN;
      complex4.getArgument();
      complex0.getField();
      complex1.divide(complex0);
      Complex complex5 = complex2.cos();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1366.42977));
      Complex complex1 = complex0.multiply(2547.804377646552);
      Complex complex2 = Complex.valueOf((-1366.42977), 673.0);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.valueOf((-1366.42977));
      complex3.getField();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex1.asin();
      complex3.hashCode();
      Complex complex7 = Complex.valueOf(6.624793114025702E-8);
      complex1.asin();
      complex5.nthRoot(798);
      complex2.atan();
      complex0.isNaN();
      complex2.isNaN();
      complex2.getImaginary();
      complex6.getArgument();
      Complex complex8 = complex7.cos();
      complex1.log();
      Complex complex9 = complex4.sinh();
      complex9.cos();
      complex8.multiply(357);
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex complex10 = complex6.acos();
      complex10.sqrt1z();
      complex5.createComplex(775.3068828, (-1.0));
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(3220.0, 3220.0);
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.ZERO.pow(1521.548);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = Complex.I;
      complex5.hashCode();
      Complex complex6 = complex1.subtract(8.189799618728228);
      Complex complex7 = complex6.cos();
      complex7.getArgument();
      Complex complex8 = complex2.add(2.1608633995056152);
      complex3.getArgument();
      complex0.getField();
      complex8.divide(complex4);
      complex1.cos();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      Complex complex1 = Complex.valueOf(1.1507496472539512E-93, 2547.804377646552);
      complex1.log();
      Complex complex2 = complex1.conjugate();
      complex2.readResolve();
      complex1.cosh();
      complex0.add(1.1507496472539512E-93);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2370.0, (-1492.8140958366));
      Complex complex1 = Complex.valueOf(1090.5650237, 948.58392878844);
      complex1.INF.subtract(complex0);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex3.ONE.multiply(complex2);
      complex4.ONE.hashCode();
      Complex complex5 = complex3.ZERO.log();
      complex5.ZERO.sqrt1z();
      Complex complex6 = new Complex((-1492.8140958366), (-1492.8140958366));
      Complex complex7 = complex0.I.pow(complex6);
      Complex.valueOf(948.58392878844);
      Complex complex8 = complex7.INF.cosh();
      Complex complex9 = complex0.log();
      complex9.readResolve();
      complex5.multiply(complex9);
      Complex complex10 = complex0.multiply((-516));
      Complex complex11 = complex10.multiply(complex1);
      complex4.multiply((-516));
      complex7.equals(complex5);
      complex11.add(complex10);
      complex9.NaN.tan();
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = new Complex(0.0, 2403.282998579);
      complex2.ZERO.add(complex3);
      Complex complex4 = complex0.ZERO.multiply(0.13670018315315247);
      complex2.ONE.toString();
      Complex complex5 = Complex.ZERO;
      complex2.equals(complex5);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex5.ZERO.divide(complex1);
      Complex complex8 = complex6.ONE.subtract(complex5);
      complex1.I.getField();
      Object object0 = complex5.readResolve();
      complex0.equals(object0);
      Complex complex9 = complex7.log();
      Complex complex10 = complex8.conjugate();
      complex1.sqrt1z();
      Complex.valueOf(0.0, 0.13670018315315247);
      complex8.divide(complex6);
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex7.add(0.0);
      complex12.NaN.readResolve();
      complex10.sqrt1z();
      complex8.readResolve();
      complex4.cosh();
      complex11.add(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.negate();
      Complex complex1 = complex0.multiply(506);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.subtract(complex1);
      complex3.ZERO.add(complex1);
      complex2.subtract((double) 506);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2955.0);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.conjugate();
      complex0.INF.nthRoot(3604);
      Complex complex3 = complex0.divide(Double.NaN);
      complex3.ONE.negate();
      Complex complex4 = Complex.valueOf((double) 3604);
      complex4.ONE.atan();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex4.log();
      Complex complex8 = complex7.NaN.subtract(complex4);
      Complex complex9 = Complex.valueOf(0.0, (-5.185064518887831E-9));
      complex4.getImaginary();
      Complex complex10 = complex4.asin();
      complex10.sin();
      Complex complex11 = complex5.cosh();
      complex11.INF.hashCode();
      complex8.sinh();
      complex9.divide(complex7);
      complex5.acos();
      complex1.log();
      complex4.getReal();
      complex6.conjugate();
      complex0.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-1819.0));
      Complex complex2 = complex1.INF.multiply(1445.686883201);
      complex1.INF.tan();
      Complex complex3 = complex1.createComplex((-1000.25771547168), 895.0054548316122);
      Complex complex4 = complex2.ZERO.atan();
      complex4.INF.add((-1.8535359161566028E-8));
      Complex.valueOf((-2154.2239465), (-1000.25771547168));
      Complex complex5 = Complex.valueOf((-1000.25771547168), (-1.8535359161566028E-8));
      complex5.ONE.getArgument();
      complex0.sin();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex7.cos();
      complex2.sinh();
      complex3.createComplex(950.0276857257236, 1445.686883201);
      Complex complex9 = complex0.sin();
      complex9.multiply(1106);
      Complex complex10 = Complex.valueOf(1445.686883201, 4.877860620031438E147);
      Complex complex11 = complex10.tanh();
      complex11.subtract(complex6);
      Complex complex12 = Complex.ZERO;
      complex8.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2335.4393));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex1.I.multiply(2360);
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex0.I.multiply(complex2);
      complex6.ONE.subtract((double) 2360);
      complex1.getField();
      Complex complex7 = complex1.ZERO.tanh();
      Complex complex8 = complex7.ONE.divide((-2335.4393));
      complex8.ZERO.tanh();
      Complex complex9 = complex8.INF.divide(215.3431633);
      complex0.ZERO.createComplex((-2335.4393), (-2335.4393));
      complex7.I.acos();
      complex7.I.getArgument();
      Complex complex10 = complex2.multiply(complex0);
      complex10.I.multiply(complex3);
      complex1.isInfinite();
      complex5.cosh();
      complex1.sqrt1z();
      complex0.readResolve();
      complex1.reciprocal();
      Complex complex11 = complex7.negate();
      complex11.acos();
      complex5.toString();
      complex0.log();
      complex9.cos();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(1573.69);
      Complex complex1 = complex0.ZERO.pow(2069.848385542);
      Complex.valueOf((-8.129483067));
      Complex complex2 = new Complex((-969.778), 2069.848385542);
      complex1.ONE.tanh();
      complex2.NaN.createComplex(494.0, (-2.870168560029448E-284));
      Complex complex3 = complex1.subtract(complex2);
      complex0.readResolve();
      complex0.cos();
      complex2.add(complex0);
      complex3.multiply(1);
      complex0.cosh();
      complex3.nthRoot(1);
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.acos();
      complex0.INF.divide(complex2);
      complex2.abs();
      Complex complex3 = complex0.ZERO.add(1952.3554579);
      Complex complex4 = complex2.log();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.INF.log();
      Complex complex7 = Complex.valueOf(1.0, (-1.0));
      complex7.INF.tanh();
      Complex.valueOf((-1.0));
      Complex complex8 = complex5.sin();
      complex8.sqrt1z();
      complex6.ZERO.cosh();
      complex0.INF.sqrt1z();
      Complex complex9 = complex3.exp();
      complex9.getArgument();
      Complex complex10 = complex4.pow((-1.0));
      complex10.ONE.abs();
      complex6.log();
      Complex.valueOf(0.0);
      complex0.abs();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex((-1263.9513414977), 0.0);
      complex0.getArgument();
      complex0.I.sinh();
      Complex complex1 = complex0.cosh();
      double double1 = (-711.110366736432);
      Complex complex2 = complex1.ONE.subtract((-711.110366736432));
      complex2.INF.readResolve();
      Complex complex3 = complex1.reciprocal();
      int int0 = 0;
      complex3.ZERO.createComplex(0.0, (-711.110366736432));
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(910.6105731, 910.6105731);
      Complex complex1 = Complex.ONE;
      double double0 = 2.1819935527247946E-7;
      Complex complex2 = complex1.ZERO.multiply(2.1819935527247946E-7);
      complex2.I.divide(910.6105731);
      complex1.I.tanh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.INF.sin();
      complex4.NaN.tanh();
      complex1.ZERO.nthRoot(361);
      double double1 = 2.6786368134431636E-33;
      complex3.divide(2.1819935527247946E-7);
      Complex complex5 = complex3.INF.multiply(2.6786368134431636E-33);
      complex5.reciprocal();
      complex5.multiply(910.6105731);
      try { 
        complex3.ONE.nthRoot((-905));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -905
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-1.246635423141374E-7));
      complex0.ZERO.pow((-1.246635423141374E-7));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.createComplex(0.0, 1.1719142537166848E16);
      complex1.subtract(complex0);
      complex0.conjugate();
      complex1.NaN.sinh();
      Complex complex2 = complex0.conjugate();
      complex1.hashCode();
      complex2.abs();
      complex0.toString();
      complex0.getField();
      complex1.nthRoot(419);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2769.04775776), (-1755.3829030374));
      Complex complex2 = complex0.add(complex1);
      complex2.ZERO.multiply((-40));
      Complex complex3 = complex2.ONE.atan();
      complex3.pow((-2769.04775776));
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.INF.pow(complex1);
      complex5.ONE.toString();
      complex0.getImaginary();
      complex4.tanh();
      complex0.nthRoot(247);
      complex4.getArgument();
      complex5.conjugate();
      Complex complex6 = complex1.NaN.cos();
      int int0 = (-1630);
      complex6.NaN.getField();
      try { 
        complex5.nthRoot((-1630));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,630
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.NaN.multiply((-2291));
      double double0 = (-673.603);
      complex0.add(complex1);
      double double1 = 1.3106298446655273;
      Complex complex2 = complex0.I.createComplex(1.3106298446655273, (-2291));
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex0.multiply((-673.603));
      complex4.divide(complex1);
      Complex complex5 = complex1.tanh();
      complex1.acos();
      complex5.toString();
      complex1.ZERO.subtract(complex3);
      try { 
        complex5.INF.nthRoot((-2291));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,291
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.reciprocal();
      complex0.ONE.abs();
      complex0.ONE.log();
      complex0.ZERO.atan();
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(394.754624);
      complex0.NaN.pow(73.7955941);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.createComplex(394.754624, 394.754624);
      complex3.sin();
      Complex complex4 = complex3.subtract(394.754624);
      Complex.valueOf(0.05786345899105072);
      complex2.getImaginary();
      Complex complex5 = complex4.exp();
      complex5.INF.subtract(4.2046187038837375E-8);
      complex5.ZERO.sqrt1z();
      complex1.I.asin();
      complex2.getField();
      Complex complex6 = complex0.divide(Double.NaN);
      complex6.toString();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(1.2290570545894685E191, 1.2290570545894685E191);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(1.2290570545894685E191, 1.2290570545894685E191);
      complex2.I.getArgument();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex2.NaN.conjugate();
      complex1.tan();
      complex4.NaN.subtract(1.5707963267948966);
      complex4.ZERO.sqrt();
      complex1.INF.multiply((-4471));
      complex3.hashCode();
      complex3.I.toString();
      complex3.I.pow(1160.73);
      complex0.pow(complex2);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex3.sin();
      complex1.equals(complex2);
      Complex complex7 = complex5.acos();
      complex7.divide(complex4);
      complex6.tanh();
      Complex complex8 = complex5.tan();
      complex8.ZERO.reciprocal();
      Complex complex9 = complex4.log();
      Complex complex10 = complex9.NaN.atan();
      Complex complex11 = complex8.add(complex1);
      complex11.log();
      complex1.subtract((-20.0));
      complex8.log();
      complex11.getImaginary();
      complex10.readResolve();
      complex10.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(3220.0, 3220.0);
      Complex complex2 = complex0.divide(0.0);
      complex2.ZERO.pow(1521.548);
      Complex complex3 = Complex.valueOf(3220.0, 1521.548);
      Complex complex4 = complex2.divide(complex0);
      Complex.valueOf(3220.0);
      complex0.ONE.getField();
      Complex complex5 = complex4.ZERO.cos();
      complex0.INF.asin();
      complex5.hashCode();
      Complex.valueOf(3220.0);
      Complex complex6 = complex4.asin();
      complex6.NaN.nthRoot(798);
      complex0.I.atan();
      complex0.isNaN();
      complex3.isNaN();
      complex1.getImaginary();
      complex3.getArgument();
      Complex complex7 = complex2.cos();
      complex7.ONE.log();
      Complex complex8 = complex4.sinh();
      complex3.cos();
      Complex complex9 = complex5.multiply(17);
      complex1.equals(complex3);
      complex9.acos();
      complex2.sqrt1z();
      complex8.createComplex(3529.932570668, 0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3669.8206762996388, 0.0);
      complex0.acos();
      int int0 = (-3843);
      Complex complex1 = complex0.multiply((-3843));
      complex1.INF.divide(complex0);
      complex0.createComplex(0.0, 3669.8206762996388);
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.I.getField();
      Complex complex3 = Complex.valueOf(2288.761, 1395.7721462002);
      Complex complex4 = Complex.valueOf((-1.0), (-2867.18034704));
      complex4.NaN.subtract((-2867.18034704));
      Complex complex5 = complex0.pow((-1158.5016));
      Complex complex6 = complex5.ONE.cosh();
      complex6.subtract(complex0);
      complex6.NaN.negate();
      Complex complex7 = complex0.divide(complex1);
      complex3.subtract(2288.761);
      Complex complex8 = complex0.cosh();
      complex8.cosh();
      Complex complex9 = complex5.cosh();
      complex9.NaN.pow((-1.0));
      Complex complex10 = Complex.valueOf(1395.7721462002);
      Complex complex11 = complex5.log();
      complex1.divide((-1.0));
      complex10.tanh();
      complex11.getImaginary();
      complex7.pow((-1.5343120819745468E95));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1366.42977));
      Complex complex1 = complex0.multiply(2547.804377646552);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = Complex.I;
      complex3.INF.hashCode();
      complex1.ZERO.subtract(1.1507496472539512E-93);
      Complex complex4 = complex1.NaN.cos();
      complex4.INF.getArgument();
      Complex complex5 = complex3.ONE.add(0.0);
      complex3.INF.getArgument();
      complex3.ZERO.getField();
      complex1.divide(complex3);
      complex2.cos();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2929.69985606));
      complex0.sin();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.ZERO.exp();
      complex3.ONE.divide(complex1);
      Complex complex4 = complex0.subtract((-922.2095983));
      complex0.log();
      Complex complex5 = complex2.conjugate();
      complex4.add((-1.0));
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex1.ONE.divide(complex0);
      complex3.I.readResolve();
      complex2.ZERO.abs();
      Complex complex4 = complex0.INF.multiply((-2451));
      complex4.ONE.multiply((-2868.309800044242));
      Complex complex5 = complex0.cos();
      complex2.NaN.tanh();
      complex5.ZERO.getArgument();
      Complex complex6 = complex5.INF.conjugate();
      complex6.NaN.divide(complex2);
      Complex complex7 = complex5.sinh();
      complex5.exp();
      complex7.createComplex(0.0, 2710.076287303);
      complex1.cos();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.divide(complex8);
      Complex complex10 = Complex.valueOf((-2868.309800044242));
      Complex complex11 = new Complex(886.58720396, (-2868.309800044242));
      complex7.equals(complex11);
      complex5.divide(complex0);
      complex9.pow(complex10);
      complex8.tanh();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.pow(0.0);
      complex1.NaN.divide(complex0);
      Complex complex2 = complex1.I.multiply(0.0);
      complex2.ZERO.createComplex(0.0, (-1347.5315465));
      complex2.I.multiply(2978.4173391);
      Complex complex3 = complex0.ZERO.sinh();
      complex0.readResolve();
      Complex complex4 = complex3.tan();
      complex4.reciprocal();
      complex1.getReal();
      complex2.toString();
      Complex.valueOf(1205.61);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.conjugate();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.sqrt();
      complex2.getArgument();
      complex0.isInfinite();
      complex2.hashCode();
      complex2.INF.getArgument();
      Complex complex3 = complex2.add((-505.080079855213));
      Complex complex4 = complex3.ONE.createComplex((-505.080079855213), 0.7853981633974483);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.divide(complex4);
      complex6.abs();
      complex5.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex1.INF.conjugate();
      complex0.getReal();
      complex0.toString();
      complex1.createComplex(1.0, 1292.257341258348);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.log();
      complex0.abs();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.multiply(1.0);
      complex3.multiply(0);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1104.888128393692));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(complex0);
      complex2.NaN.asin();
      Complex complex3 = complex1.I.sqrt();
      complex3.sqrt();
      complex3.ZERO.createComplex(405.931138154254, (-20.0));
      Complex complex4 = complex3.INF.multiply(0.0);
      complex4.I.pow(0.0);
      complex4.INF.conjugate();
      Complex complex5 = complex1.ONE.pow(complex2);
      complex1.sqrt();
      complex1.abs();
      Complex complex6 = complex1.sqrt1z();
      complex6.NaN.tanh();
      complex1.ZERO.getArgument();
      complex2.isNaN();
      complex0.subtract((-1104.888128393692));
      Complex complex7 = complex1.asin();
      complex7.cosh();
      complex0.getImaginary();
      complex0.exp();
      complex5.nthRoot(1);
      complex6.sin();
      complex0.divide((-1196.54139171766));
      Complex.valueOf(0.0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-163.1736989850135), (-163.1736989850135));
      complex0.cosh();
      Complex complex1 = complex0.exp();
      complex0.ONE.sqrt1z();
      int int0 = (-352);
      try { 
        complex1.NaN.nthRoot((-352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -352
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(20.0);
      complex1.NaN.readResolve();
      complex0.nthRoot(1);
      Complex.valueOf(152.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.divide((-1002.1713115382025));
      complex3.ZERO.negate();
      Complex complex4 = complex2.ONE.add((-1002.1713115382025));
      complex2.asin();
      complex0.sin();
      complex1.getArgument();
      complex4.isNaN();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      complex0.NaN.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex4.INF.tanh();
      complex6.INF.nthRoot(224);
      complex2.hashCode();
      Complex complex7 = complex2.cosh();
      complex4.tan();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex1.divide(complex5);
      Complex.valueOf(0.0, 0.0);
      complex8.conjugate();
      complex4.exp();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex1.subtract(8.467026501338835E-8);
      Complex complex4 = complex3.I.subtract(complex0);
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.INF.cosh();
      complex5.nthRoot(1089);
      complex0.INF.subtract(complex5);
      complex5.isNaN();
      complex3.ZERO.abs();
      complex0.isNaN();
      Complex complex7 = complex1.sin();
      complex0.divide((-1236.7269676));
      Complex complex8 = complex7.I.divide(181.41051557251762);
      complex2.pow((double) 1089);
      Complex complex9 = complex7.sqrt1z();
      complex0.I.log();
      complex6.abs();
      complex7.I.cosh();
      complex5.hashCode();
      complex2.sqrt1z();
      complex1.getField();
      complex2.tanh();
      complex9.sqrt();
      complex0.sin();
      Complex complex10 = Complex.valueOf(4999.609129332331, (-493.14204));
      Complex complex11 = complex4.multiply(complex10);
      complex3.getField();
      complex4.multiply((-6.990650304449166E-10));
      complex11.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.I.getArgument();
      Complex complex1 = new Complex((-775.31463097573));
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.NaN.log();
      complex2.ONE.multiply(1200);
      Complex complex4 = complex2.INF.add(1.5707963267948966);
      complex1.ONE.nthRoot(1);
      Complex.valueOf(1.8019459247589111);
      complex3.readResolve();
      Complex complex5 = complex2.multiply((-69));
      complex5.ONE.pow(2.9254832789181E165);
      Complex complex6 = complex5.ZERO.divide(complex2);
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex0.negate();
      complex8.I.readResolve();
      complex8.INF.multiply((-1069.8));
      Complex complex9 = Complex.valueOf((-775.31463097573));
      Complex complex10 = complex9.INF.tanh();
      complex3.cos();
      Complex complex11 = complex10.asin();
      complex10.NaN.conjugate();
      complex4.hashCode();
      Complex complex12 = complex7.sqrt1z();
      complex12.NaN.divide(0.0);
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 5419.3403766131);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = new Complex(0.0, 5.89953246760617E-101);
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex4.NaN.multiply(complex1);
      Complex complex7 = complex5.INF.exp();
      Complex complex8 = complex7.ZERO.subtract(complex1);
      Complex complex9 = Complex.valueOf((-134.774176607), 2231.3953956);
      assertEquals((-134.774176607), complex9.getReal(), 0.01);
      
      complex5.NaN.getArgument();
      complex4.ONE.hashCode();
      assertEquals(-0.0, complex4.getReal(), 0.01);
      
      Complex complex10 = complex2.exp();
      Complex complex11 = complex2.tanh();
      complex0.multiply((-1080.1));
      Complex complex12 = complex10.cos();
      Complex complex13 = complex1.sqrt();
      Complex complex14 = complex0.sin();
      assertTrue(complex14.equals((Object)complex6));
      
      Complex complex15 = Complex.valueOf((-1.692337384653611E-8));
      Complex complex16 = complex12.multiply((-645.411289149));
      assertEquals((-352.5686880679389), complex16.getReal(), 0.01);
      
      complex3.multiply(0.0);
      Complex complex17 = complex1.cos();
      assertSame(complex17, complex8);
      assertNotSame(complex17, complex15);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex17, complex13);
      
      Complex complex18 = complex11.sin();
      assertEquals(-0.0, complex18.getReal(), 0.01);
      assertEquals((-0.09318326729132183), complex11.getImaginary(), 0.01);
      
      complex12.cos();
      assertFalse(complex12.isInfinite());
      assertEquals(0.07796757993044819, complex12.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ONE.add(1001.1327820129225);
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.I.createComplex(0.0, 0.0);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.add(complex0);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      complex3.equals((Object) null);
      complex4.add(0.0);
      Complex complex9 = complex5.tanh();
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertTrue(complex9.equals((Object)complex6));
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      complex0.isNaN();
      Complex complex10 = complex4.subtract(complex3);
      assertEquals(0.38535742648327137, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1000.9575808192786), complex10.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3797.8784), (-373.54762));
      Complex complex1 = complex0.subtract(6.283185307179586);
      Complex complex2 = new Complex(1826.5110088369233, 1826.5110088369233);
      Complex complex3 = complex1.INF.pow(complex2);
      Complex complex4 = complex0.sqrt1z();
      complex4.NaN.getField();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.NaN.tan();
      assertTrue(complex6.equals((Object)complex3));
      
      Complex complex7 = complex0.multiply(17);
      complex7.INF.createComplex((-3797.8784), (-936.5631));
      assertEquals((-64563.9328), complex7.getReal(), 0.01);
      assertEquals((-6350.30954), complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex0.cos();
      Complex complex9 = complex0.sinh();
      assertTrue(complex9.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      
      Complex complex10 = complex5.subtract((-726.41278574));
      complex10.getImaginary();
      Complex complex11 = complex1.subtract(complex5);
      Complex complex12 = complex2.add(complex11);
      assertEquals((-5775.528976470256), complex12.getReal(), 0.01);
      assertEquals(373.5476328248614, complex4.getReal(), 0.01);
      assertEquals(1079.4157688369232, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex8.reciprocal();
      assertEquals(3.563006567234257E-163, complex13.getImaginary(), 0.01);
      assertEquals((-1.123434909924841E-162), complex13.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-760.6232));
      Complex complex1 = Complex.valueOf((-760.6232));
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex1.isInfinite());
      assertEquals(578547.65237824, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.pow(7.219393868923887E-8);
      Complex complex2 = Complex.valueOf(3977.6427959567445);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.add(3977.6427959567445);
      assertEquals(3978.6427959567445, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex7 = complex0.pow(767.2523136);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertTrue(complex7.equals((Object)complex5));
      
      Complex complex8 = complex3.add(complex0);
      assertSame(complex8, complex1);
      
      Complex complex9 = complex3.acos();
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.add(0.10291612148284912);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
