/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:47:47 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(4999);
      // Undeclared exception!
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.reciprocal();
      complex2.pow(complex1);
      Complex complex4 = complex2.sqrt();
      complex4.ZERO.tan();
      Complex complex5 = complex2.tan();
      complex3.NaN.tanh();
      complex5.ZERO.sinh();
      double double0 = (-4.443798187035849E125);
      try { 
        complex5.ONE.nthRoot((-5368));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,368
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(20.0);
      Complex complex2 = complex1.asin();
      complex2.NaN.conjugate();
      complex2.ONE.cosh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8811.437886511145));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(6.466404926591744E-13);
      complex1.multiply(3228.00388142);
      complex2.multiply(1.0623409350083556E20);
      Complex complex3 = Complex.I;
      complex3.asin();
      complex2.tan();
      Complex complex4 = Complex.valueOf(323.72, (-20.0));
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(1388.525716243541, Double.POSITIVE_INFINITY);
      complex0.INF.hashCode();
      complex0.I.pow(Double.POSITIVE_INFINITY);
      complex0.multiply(202);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.tan();
      complex0.nthRoot(25);
      complex0.reciprocal();
      Complex.valueOf((-2092.756914875429));
      Complex complex5 = new Complex(6.890014851450124E-89);
      Complex complex6 = Complex.valueOf((-613.0), Double.POSITIVE_INFINITY);
      complex6.getImaginary();
      complex1.multiply(4502);
      Complex complex7 = complex6.tanh();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex6.multiply(41.7475);
      complex8.asin();
      Complex complex9 = complex2.multiply((-2799.313244));
      complex5.negate();
      Complex complex10 = new Complex((-613.0), (-2799.313244));
      Complex complex11 = complex10.sinh();
      complex4.multiply(20.0);
      complex9.divide(complex7);
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex(680.844198758, Double.POSITIVE_INFINITY);
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-2092.756914875429), (-2092.756914875429));
      Complex complex1 = Complex.valueOf((-1.0953484767704112E226));
      complex1.acos();
      complex1.toString();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.asin();
      complex3.NaN.readResolve();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.multiply(Double.NaN);
      complex5.readResolve();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = new Complex((-20.0), (-279.971640957431));
      complex2.atan();
      Complex complex3 = new Complex((-20.0), (-279.971640957431));
      complex2.tanh();
      complex1.INF.createComplex(1309.909, (-279.971640957431));
      Complex complex4 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.39037787914276123);
      complex0.cosh();
      complex0.getImaginary();
      complex0.tanh();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.multiply((-7.330635250808021E64));
      complex3.asin();
      complex1.multiply(0.39037787914276123);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.sin();
      Complex complex2 = Complex.ONE;
      complex2.acos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(1.0, (-0.9984640741753186));
      Complex complex5 = new Complex(1.00605438061E-312);
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = complex2.tan();
      Complex complex8 = Complex.INF;
      complex7.negate();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex6.exp();
      complex1.sqrt();
      Complex complex11 = new Complex(449.413255, 449.413255);
      Complex.valueOf(1.0);
      complex8.pow(complex3);
      complex8.acos();
      Complex complex12 = new Complex((-2071.2453763302983), (-2489.226));
      complex12.toString();
      complex11.tan();
      complex10.exp();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      complex0.cos();
      Complex complex2 = complex0.negate();
      complex2.sin();
      complex1.acos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(1.0, 2654.961927171);
      complex3.divide(complex4);
      complex0.tan();
      Complex complex5 = Complex.INF;
      complex5.negate();
      Complex complex6 = Complex.INF;
      complex6.exp();
      complex0.sqrt();
      Complex complex7 = new Complex(1.0, (-2071.2453763302983));
      Complex complex8 = Complex.valueOf(1.0);
      complex2.pow(complex8);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex0.cos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.sin();
      complex2.multiply(399.0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex(1.0565816011650582E-264, 2654.961927171);
      complex1.divide(complex2);
      Complex complex6 = complex2.tan();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.negate();
      Complex complex9 = Complex.INF;
      complex2.exp();
      complex2.sqrt();
      Complex complex10 = complex8.divide(2654.961927171);
      Complex complex11 = Complex.valueOf(2654.961927171);
      Complex complex12 = complex5.pow(complex10);
      Complex complex13 = Complex.ONE;
      complex11.add(complex13);
      Complex.valueOf(2.6064987182617188);
      Complex complex14 = complex13.acos();
      complex14.ONE.add(complex0);
      complex4.toString();
      complex6.tan();
      complex12.exp();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      complex0.cos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.sin();
      complex1.acos();
      Complex complex4 = complex3.multiply(2654.961927171);
      complex4.NaN.acos();
      Complex complex5 = new Complex(1.0, 2654.961927171);
      complex5.sqrt();
      complex2.equals(complex2);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sin();
      complex1.acos();
      Complex complex5 = complex4.multiply(2654.961927171);
      Complex complex6 = Complex.NaN;
      Complex complex7 = new Complex(1.0, 2654.961927171);
      complex6.divide(complex7);
      Complex complex8 = complex0.tan();
      complex6.ZERO.add(2654.961927171);
      Complex complex9 = complex7.sin();
      complex9.negate();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.exp();
      complex0.sqrt();
      Complex complex12 = Complex.I;
      complex9.add(complex8);
      Complex.valueOf((-177.2));
      complex11.acos();
      complex0.toString();
      Complex complex13 = new Complex(2.6064987182617188, 0.7615941559557649);
      complex5.tan();
      complex2.exp();
      Complex complex14 = Complex.valueOf((-1.5703396742617153), (-1.5703396742617153));
      complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(1470.5699665740706, 1869.05);
      Complex complex1 = complex0.ZERO.sinh();
      complex1.I.hashCode();
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex4.tan();
      complex0.ONE.add(2220.5);
      Complex complex6 = Complex.valueOf(1470.5699665740706, 2220.5);
      complex2.ONE.abs();
      Complex complex7 = complex1.conjugate();
      Complex.valueOf(2220.5, 1.0);
      Complex complex8 = Complex.valueOf(1470.5699665740706, (-3.0417051809209134E136));
      complex7.I.pow((-5.52));
      complex0.ZERO.getField();
      complex7.I.toString();
      complex5.getImaginary();
      complex8.multiply(1227.8725084);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1683.3451474270375, Double.NaN);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.reciprocal();
      complex4.exp();
      complex4.sqrt();
      Complex complex5 = new Complex(1683.3451474270375, 1683.3451474270375);
      Complex complex6 = complex5.divide(0.9997);
      Complex.valueOf(1082.1);
      Complex complex7 = complex6.pow(complex5);
      Complex complex8 = Complex.INF;
      complex0.add(complex8);
      Complex complex9 = Complex.valueOf((-809.50219));
      Complex complex10 = complex9.acos();
      complex7.toString();
      complex6.tan();
      complex1.abs();
      complex1.nthRoot(2298);
      complex0.multiply(1136);
      Complex complex11 = Complex.ZERO;
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.atan();
      Complex complex1 = Complex.INF;
      complex1.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex2);
      complex1.reciprocal();
      complex0.getReal();
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = (Complex)complex0.ZERO.readResolve();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex5.reciprocal();
      complex6.NaN.readResolve();
      complex1.getReal();
      complex3.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sin();
      complex1.acos();
      complex4.multiply(2654.961927171);
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex(1.0, 2654.961927171);
      complex5.divide(complex6);
      complex0.tan();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.negate();
      Complex complex9 = Complex.INF;
      complex9.exp();
      complex0.sqrt();
      complex8.divide((-2061.45));
      Complex complex10 = Complex.valueOf(1.0);
      Complex complex11 = complex3.pow(complex10);
      Complex complex12 = complex11.add(complex4);
      Complex complex13 = Complex.valueOf(2.6064987182617188);
      complex2.acos();
      complex13.toString();
      complex4.tan();
      complex12.exp();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-2189.8486438315126));
      Complex complex1 = complex0.sin();
      complex0.readResolve();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.divide(complex2);
      complex4.reciprocal();
      complex0.getReal();
      complex3.divide((-28.470399999999994));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.subtract((-1124.1936027828208));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-2189.8486438315126));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.exp();
      complex0.ZERO.multiply(complex2);
      Complex complex3 = Complex.valueOf((-2189.8486438315126), (-2189.8486438315126));
      complex3.atan();
      Complex complex4 = complex3.cosh();
      complex4.getImaginary();
      complex2.tanh();
      complex0.multiply(228.82416);
      complex2.nthRoot(37);
      Complex complex5 = Complex.I;
      complex5.add((-2189.8486438315126));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2061.45));
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.divide((-2827.458109696));
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex0.cosh();
      complex3.pow((-2827.458109696));
      complex2.createComplex((-6177.088541916434), 20.0);
      complex1.add(20.0);
      Complex complex6 = Complex.NaN;
      complex0.subtract((-2061.45));
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
      complex4.add((-2061.45));
      Complex complex7 = new Complex((-20.0), Double.NaN);
      complex6.multiply(complex7);
      Complex complex8 = Complex.valueOf((-2827.458109696));
      Complex complex9 = complex8.negate();
      complex2.sqrt1z();
      complex9.isInfinite();
      complex5.exp();
      Complex complex10 = Complex.ZERO;
      complex6.exp();
      Complex complex11 = new Complex(20.0, (-20.0));
      Complex complex12 = complex11.tanh();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1921.484913317357));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = new Complex((-1921.484913317357), (-1921.484913317357));
      complex0.sqrt();
      Complex complex4 = Complex.INF;
      complex3.reciprocal();
      complex1.toString();
      complex2.getField();
      complex4.multiply(634);
      complex1.divide((-1921.484913317357));
      Complex.valueOf((-0.9170797744328516), (-1411.21018410246));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.exp();
      complex1.multiply(complex0);
      complex0.atan();
      complex2.cosh();
      complex1.getImaginary();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.ZERO;
      complex4.multiply(Double.NaN);
      try { 
        complex3.I.nthRoot((-2449));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,449
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(125076.96769764966, 1520.0);
      Complex complex1 = complex0.cos();
      complex0.NaN.conjugate();
      complex1.abs();
      Complex complex2 = complex1.NaN.subtract(2.0);
      complex1.ZERO.negate();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.I.exp();
      Complex complex5 = Complex.valueOf((-62.73094473), (-62.73094473));
      complex4.INF.exp();
      complex3.NaN.nthRoot(1373);
      complex3.sinh();
      complex2.multiply(complex3);
      complex5.add(5.291005291005291E-4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(2.5091784786580567, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.multiply(complex1);
      complex2.cosh();
      complex2.ONE.pow(1.5948774814605713);
      complex0.asin();
      complex1.multiply(2.5091784786580567);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.ZERO.abs();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.atan();
      complex0.cosh();
      complex3.getImaginary();
      complex2.tanh();
      complex3.multiply(0.0);
      complex2.nthRoot(37);
      Complex complex4 = Complex.valueOf((-1.6188856501152745E-4), (-1220.817844507901));
      complex4.add((-1220.817844507901));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1978.097329268));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = new Complex((-1978.097329268), (-1978.097329268));
      complex2.divide(complex3);
      complex1.ZERO.tanh();
      Complex complex4 = complex3.atan();
      complex1.ONE.subtract(2505.75560431645);
      complex3.INF.tan();
      Complex complex5 = complex0.NaN.pow(0.01745131121998362);
      Complex complex6 = complex4.INF.subtract(complex2);
      complex6.pow(complex5);
      Complex complex7 = complex6.ZERO.subtract(818.501);
      complex7.I.abs();
      complex0.subtract(complex3);
      complex0.multiply(complex5);
      complex5.sin();
      Complex.valueOf(1.0, 1.0);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1890.0));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.atan();
      complex3.readResolve();
      complex0.sqrt();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.divide(complex2);
      complex3.reciprocal();
      complex2.getReal();
      Complex complex6 = complex3.createComplex((-1890.0), (-5.291005291005291E-4));
      complex5.toString();
      complex5.getField();
      complex6.atan();
      Complex complex7 = Complex.NaN;
      complex7.pow(1811.408117734998);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sin();
      complex1.acos();
      complex4.multiply(2654.961927171);
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex(1.0, 2654.961927171);
      complex5.divide(complex6);
      complex0.tan();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.negate();
      Complex complex9 = Complex.INF;
      complex9.exp();
      complex0.sqrt();
      complex8.divide((-2061.45));
      Complex complex10 = Complex.valueOf(1.0);
      Complex complex11 = complex3.pow(complex10);
      Complex complex12 = complex11.add(complex4);
      Complex complex13 = Complex.valueOf(2.6064987182617188);
      complex2.acos();
      complex13.toString();
      complex4.tan();
      complex5.nthRoot(2298);
      complex12.multiply(12);
      Complex complex14 = Complex.ZERO;
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      complex1.I.cos();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.atan();
      Complex complex6 = Complex.valueOf(957.61, (-633.0));
      complex6.getField();
      complex6.getReal();
      complex3.abs();
      complex4.sinh();
      Complex complex7 = complex5.sinh();
      Complex complex8 = Complex.NaN;
      complex8.sinh();
      Complex complex9 = complex0.conjugate();
      complex2.cosh();
      complex7.abs();
      complex0.nthRoot(1);
      complex1.divide(2.4006398188427136);
      Complex complex10 = Complex.valueOf(858.2833207);
      Complex complex11 = complex10.multiply(2.4006398188427136);
      Complex complex12 = complex11.divide(957.61);
      Complex complex13 = complex9.createComplex(957.61, Double.NaN);
      complex13.divide(complex12);
      Complex complex14 = Complex.valueOf(Double.NaN, 2695.7451362846514);
      complex14.reciprocal();
      complex14.getReal();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-2189.8486438315126));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.exp();
      complex1.ZERO.multiply(complex3);
      Complex complex4 = complex0.atan();
      complex4.INF.cosh();
      complex1.getImaginary();
      Complex complex5 = complex4.tanh();
      complex2.multiply(3148.0);
      complex5.nthRoot(37);
      Complex.valueOf((-1764.2878));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      complex1.I.cos();
      Complex complex2 = Complex.INF;
      complex2.sqrt1z();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex3.ONE.atan();
      complex1.INF.getField();
      complex0.getReal();
      complex4.NaN.abs();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex6.ONE.conjugate();
      complex8.ZERO.cosh();
      complex6.INF.abs();
      complex6.nthRoot(1);
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex2.multiply((-82.84921));
      complex5.ZERO.divide(120.9397316369);
      complex7.createComplex(120.9397316369, (-2160.7675));
      Complex complex10 = complex8.divide(complex9);
      complex7.reciprocal();
      complex2.getReal();
      complex1.getField();
      complex5.atan();
      complex10.pow((-82.84921));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.atan();
      double double0 = 805.575;
      Complex complex3 = Complex.valueOf(805.575, 805.575);
      complex0.getField();
      complex0.getReal();
      complex2.abs();
      Complex complex4 = complex3.sinh();
      complex4.sinh();
      Complex complex5 = Complex.ONE;
      complex5.sinh();
      complex1.conjugate();
      complex3.cosh();
      complex2.abs();
      int int0 = 1;
      Complex complex6 = Complex.ONE;
      // Undeclared exception!
      complex6.nthRoot(2141262501);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      complex1.I.cos();
      Complex complex2 = Complex.INF;
      complex2.sqrt1z();
      Complex complex3 = complex1.I.tanh();
      complex3.atan();
      Complex complex4 = new Complex(344.191);
      complex4.readResolve();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.INF;
      complex5.equals(complex6);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.isInfinite();
      complex0.sin();
      Complex complex1 = Complex.ZERO;
      complex1.equals(complex0);
      complex1.nthRoot(3022);
      Complex complex2 = Complex.valueOf((double) 1605);
      complex2.multiply(0);
      complex0.log();
      Complex complex3 = Complex.ZERO;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.multiply((-413));
      Complex complex1 = complex0.multiply((-5980.33199061));
      complex1.toString();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.createComplex((-4028.9005113698), (-413));
      complex3.reciprocal();
      double double0 = 937.98889596203;
      try { 
        complex2.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1890.0));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.ONE.divide((-6177.088541916434));
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.cosh();
      complex2.ONE.pow((-20.0));
      complex1.ZERO.createComplex((-1890.0), 1.4302079642723736E55);
      Complex complex6 = complex4.ONE.add((-6177.088541916434));
      Complex complex7 = Complex.NaN;
      complex6.ZERO.subtract(1.454991340637207);
      complex2.equals(complex7);
      complex6.add(363.84446017);
      Complex complex8 = complex7.NaN.multiply(complex4);
      Complex complex9 = complex5.ONE.negate();
      complex7.sqrt1z();
      complex3.isInfinite();
      complex5.exp();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.createComplex((-849.477047188853), 1776.69418);
      Complex complex12 = complex3.sqrt();
      Complex.valueOf((-6177.088541916434));
      Complex complex13 = complex0.sinh();
      Complex complex14 = new Complex((-556.23451), (-849.477047188853));
      complex14.cosh();
      complex11.hashCode();
      complex13.reciprocal();
      complex11.abs();
      complex12.pow(complex9);
      Complex.valueOf((-2351.8718109741));
      complex8.pow((-849.477047188853));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.ZERO.abs();
      complex1.negate();
      Complex.valueOf(0.0);
      Complex complex2 = Complex.ONE;
      complex2.acos();
      complex0.toString();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.createComplex(Double.POSITIVE_INFINITY, (-942.98930715065));
      Complex complex6 = complex0.sqrt();
      Complex complex7 = Complex.valueOf(120.9397316369);
      complex3.sinh();
      complex5.cosh();
      complex6.hashCode();
      complex4.reciprocal();
      complex7.abs();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.665705680847168, 0.0);
      complex0.equals(complex1);
      complex0.isInfinite();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.INF;
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      complex2.I.sin();
      try { 
        complex3.nthRoot((-1073737857));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,073,737,857
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.isInfinite();
      complex0.sin();
      Complex complex1 = Complex.ZERO;
      complex1.equals(complex0);
      complex1.nthRoot(3022);
      Complex complex2 = Complex.valueOf((double) 1605);
      complex2.multiply(0);
      complex0.log();
      Complex complex3 = Complex.ZERO;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.INF.sin();
      complex3.acos();
      Complex complex5 = complex4.ONE.multiply(8.948877445235827E-8);
      Complex complex6 = complex4.NaN.divide(complex1);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.ZERO.sin();
      complex6.INF.negate();
      Complex complex9 = complex7.I.exp();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.divide((-2061.45));
      Complex complex12 = Complex.valueOf((-1978.097329268));
      Complex complex13 = complex12.pow(complex2);
      complex0.add(complex5);
      Complex.valueOf(8.948877445235827E-8);
      Complex complex14 = complex9.NaN.acos();
      complex8.toString();
      complex11.tan();
      Complex complex15 = complex9.divide(2728.3631259213576);
      Complex complex16 = complex11.createComplex((-2061.45), (-570.92588773164));
      complex2.divide(complex7);
      complex13.reciprocal();
      complex5.getReal();
      complex16.createComplex((-4900.792711), (-2160.7675));
      complex14.getField();
      complex15.atan();
      complex10.pow(1580.2843420238128);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      complex1.I.cos();
      Complex complex2 = Complex.INF;
      complex2.sqrt1z();
      Complex complex3 = complex1.I.tanh();
      complex3.ONE.atan();
      Complex complex4 = Complex.valueOf(120.9397316369, 120.9397316369);
      complex1.INF.getField();
      complex0.getReal();
      complex4.NaN.abs();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex6.ONE.conjugate();
      complex8.ZERO.cosh();
      complex6.INF.abs();
      complex6.nthRoot(1);
      complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex2.multiply((-82.84921));
      complex5.ZERO.divide(120.9397316369);
      complex7.createComplex(120.9397316369, (-2160.7675));
      Complex complex10 = complex8.divide(complex9);
      complex7.reciprocal();
      complex2.getReal();
      complex4.createComplex((-20.0), 3254.770291214);
      complex1.getField();
      complex5.atan();
      complex10.pow((-82.84921));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6512.81696581405, 2734.2815486132);
      Complex complex2 = complex1.conjugate();
      complex0.getArgument();
      complex1.hashCode();
      complex1.equals(complex2);
      complex2.isInfinite();
      Complex complex3 = complex2.sin();
      complex1.equals(complex2);
      Complex complex4 = new Complex(2734.2815486132);
      Complex complex5 = complex4.createComplex(1015.4943, (-297.905534518));
      complex0.sqrt();
      Complex complex6 = Complex.valueOf((-20.0));
      Complex complex7 = complex3.sinh();
      complex6.cosh();
      complex3.reciprocal();
      complex7.abs();
      complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.INF.sin();
      complex3.acos();
      Complex complex5 = complex4.ONE.multiply(8.948877445235827E-8);
      Complex complex6 = complex4.NaN.divide(complex1);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.ZERO.sin();
      complex6.INF.negate();
      Complex complex9 = complex7.I.exp();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.divide((-2061.45));
      Complex complex12 = Complex.valueOf((-1978.097329268));
      Complex complex13 = complex12.pow(complex2);
      complex0.add(complex5);
      Complex.valueOf(8.948877445235827E-8);
      complex9.NaN.acos();
      complex8.toString();
      Complex complex14 = complex11.tan();
      complex13.nthRoot(2298);
      complex14.multiply(4093);
      complex8.log();
      Complex complex15 = Complex.ZERO;
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1890.0));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.ONE.divide((-6177.088541916434));
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = Complex.valueOf((-6177.088541916434));
      complex5.ZERO.tanh();
      complex2.ONE.pow((-20.0));
      complex1.ZERO.createComplex((-1890.0), 1.4302079642723736E55);
      Complex complex6 = complex4.ONE.add((-6177.088541916434));
      Complex complex7 = Complex.NaN;
      complex6.ZERO.subtract(1.454991340637207);
      complex2.equals(complex7);
      complex6.add(363.84446017);
      complex7.NaN.multiply(complex4);
      complex5.ONE.negate();
      Complex complex8 = complex7.sqrt1z();
      complex8.ZERO.conjugate();
      complex3.isInfinite();
      complex5.exp();
      complex7.log();
      complex5.getImaginary();
      Complex complex9 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.multiply(160);
      Complex complex4 = complex2.ZERO.atan();
      complex4.INF.abs();
      complex1.getImaginary();
      complex2.getImaginary();
      complex3.sqrt();
      Complex.valueOf((-1584.7692684471));
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.createComplex(Double.POSITIVE_INFINITY, 20.0);
      Complex complex7 = complex4.ONE.atan();
      complex7.add(1476.358264);
      complex7.ONE.createComplex(2053.5332963, 0.5156965255737305);
      complex1.isInfinite();
      Complex complex8 = complex6.createComplex(Double.POSITIVE_INFINITY, Double.NaN);
      complex8.readResolve();
      Complex complex9 = complex5.exp();
      complex1.abs();
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex10.I.sqrt1z();
      complex7.createComplex(3802.59057, (-1584.7692684471));
      complex10.negate();
      complex9.add(complex1);
      complex11.add(3802.59057);
      complex9.sqrt1z();
      complex6.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6512.81696581405, 2734.2815486132);
      Complex complex2 = complex1.conjugate();
      complex0.getArgument();
      complex1.hashCode();
      complex1.equals(complex2);
      complex2.isInfinite();
      Complex complex3 = complex2.sin();
      complex1.equals(complex2);
      int int0 = 1605;
      try { 
        complex3.nthRoot((-1073737857));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,073,737,857
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      complex1.I.cos();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.I.tanh();
      complex4.ONE.atan();
      Complex complex5 = Complex.valueOf(120.9397316369, 120.9397316369);
      ComplexField complexField0 = complex1.INF.getField();
      complex0.getReal();
      complex5.NaN.abs();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.sinh();
      complex7.sinh();
      Complex complex8 = complex7.ONE.conjugate();
      complex8.ZERO.cosh();
      complex7.INF.abs();
      complex7.nthRoot(1);
      complex5.divide(Double.POSITIVE_INFINITY);
      complex8.isInfinite();
      Complex complex9 = new Complex(Double.NaN, 0.0);
      Complex complex10 = complex9.sin();
      complex4.equals(complexField0);
      complex3.nthRoot(1454);
      complex9.multiply(1454);
      complex0.log();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.multiply(1251.809);
      complex1.INF.subtract(1251.809);
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.add((-895.7));
      complex3.INF.abs();
      complex1.reciprocal();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.acos();
      complex5.NaN.getArgument();
      complex4.I.log();
      Complex complex6 = complex2.conjugate();
      complex2.getArgument();
      complex6.ZERO.hashCode();
      complex3.equals(complex4);
      Complex complex7 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.divide((-2149.55121577));
      Complex complex9 = complex4.createComplex(Double.NaN, (-2160.7675));
      Complex complex10 = new Complex(520.269072503, (-1.6850976862319495E-9));
      complex10.divide(complex9);
      complex10.reciprocal();
      complex4.getReal();
      complex8.createComplex(0.0, 3254.770291214);
      complex7.getField();
      complex10.atan();
      complex7.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.ZERO;
      complex3.readResolve();
      complex1.subtract(complex0);
      complex2.sqrt();
      Complex.valueOf(908.266654, 2186.735340171537);
      Complex complex4 = Complex.valueOf(1264.48, Double.POSITIVE_INFINITY);
      complex4.getReal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(1304.9270528732, 1304.9270528732);
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-4900.792711));
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.exp();
      Complex complex6 = complex1.reciprocal();
      complex1.add((-4900.792711));
      Complex complex7 = complex3.createComplex(844.7900026718869, 1304.9270528732);
      Complex complex8 = Complex.valueOf((-1024.25721));
      complex0.pow(complex8);
      Complex complex9 = complex6.multiply(1304.9270528732);
      complex2.negate();
      complex9.toString();
      Complex complex10 = complex3.tanh();
      complex0.conjugate();
      Complex complex11 = Complex.ZERO;
      complex11.isNaN();
      complex11.divide(0.0);
      complex7.toString();
      complex10.readResolve();
      Complex.valueOf((-6177.088541916434));
      Complex complex12 = Complex.I;
      complex12.subtract(complex5);
      complex10.getField();
      Complex complex13 = Complex.NaN;
      complex13.getReal();
      complex10.multiply((-506.28040361));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.valueOf(2520.56904262453, (-2776.2153));
      complex3.getField();
      complex0.getReal();
      complex0.abs();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex5.conjugate();
      complex7.cosh();
      complex3.abs();
      complex3.nthRoot(1);
      Complex complex9 = complex4.divide(2520.56904262453);
      Complex complex10 = complex9.multiply((double) 1);
      Complex complex11 = complex1.divide(2520.56904262453);
      complex6.createComplex(9.959152908532152E194, 3749.7519505416926);
      Complex complex12 = complex10.divide(complex1);
      complex11.reciprocal();
      complex8.getReal();
      complex11.createComplex(0.0, (-1989.1476157786));
      complex12.getField();
      Complex complex13 = Complex.NaN;
      Complex complex14 = Complex.ZERO;
      complex14.pow((-226.460839));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.INF.sin();
      complex3.acos();
      complex4.ONE.multiply(8.948877445235827E-8);
      Complex complex5 = complex4.NaN.divide(complex1);
      Complex complex6 = complex2.tan();
      complex6.ZERO.sin();
      Complex complex7 = complex5.INF.negate();
      complex6.I.exp();
      Complex complex8 = complex4.sqrt();
      complex1.I.sin();
      complex1.cos();
      complex8.INF.add(complex5);
      complex2.sqrt();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex9.divide(complex4);
      complex0.reciprocal();
      complex10.getReal();
      Complex complex11 = Complex.I;
      complex11.createComplex(1304.9270528732, (-20.0));
      complex7.getField();
      complex6.atan();
      complex5.pow(3254.770291214);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.INF.sinh();
      complex3.sqrt1z();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = Complex.valueOf(120.9397316369, 120.9397316369);
      complex1.INF.getField();
      complex0.getReal();
      complex6.NaN.abs();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex7.ONE.conjugate();
      complex9.ZERO.cosh();
      complex7.INF.abs();
      complex7.nthRoot(1);
      complex6.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex3.multiply((-82.84921));
      complex1.ZERO.divide(120.9397316369);
      complex8.createComplex(120.9397316369, (-2160.7675));
      Complex complex11 = complex9.divide(complex10);
      complex8.reciprocal();
      complex3.getReal();
      complex6.createComplex((-20.0), 3254.770291214);
      complex1.getField();
      complex5.atan();
      complex11.pow((-82.84921));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(370.5);
      Complex complex3 = complex2.tan();
      complex3.conjugate();
      complex0.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex4.ONE.multiply(8.948877445235827E-8);
      Complex complex7 = complex4.NaN.divide(complex1);
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.ZERO.sin();
      complex7.INF.negate();
      Complex complex10 = complex8.I.exp();
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex11.divide((-2061.45));
      Complex complex13 = Complex.valueOf((-1978.097329268));
      complex13.pow(complex2);
      complex0.add(complex6);
      Complex.valueOf(8.948877445235827E-8);
      complex10.NaN.acos();
      complex9.toString();
      Complex complex14 = complex12.tan();
      Complex complex15 = complex14.createComplex(4105.257486726394, 0.0);
      complex10.sqrt();
      Complex complex16 = Complex.valueOf((-556.23451));
      complex16.sinh();
      Complex complex17 = complex5.cosh();
      complex17.hashCode();
      complex4.reciprocal();
      complex6.abs();
      complex11.pow(complex15);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.multiply(complex1);
      complex4.isInfinite();
      complex0.getArgument();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex4.INF.sin();
      Complex complex8 = complex5.NaN.tan();
      Complex complex9 = complex8.I.subtract(0.0);
      complex8.NaN.cosh();
      complex9.ONE.readResolve();
      complex4.ONE.pow(complex3);
      Complex.valueOf(0.0, 0.0);
      complex6.sin();
      complex6.INF.exp();
      complex6.ZERO.readResolve();
      Complex complex10 = complex1.divide(0.0);
      Complex.valueOf(0.0);
      complex10.ONE.conjugate();
      complex6.cosh();
      Complex complex11 = complex0.divide(complex8);
      complex11.INF.getArgument();
      complex7.getImaginary();
      complex2.sin();
      complex10.abs();
      Complex complex12 = Complex.valueOf(2806.983733381, 2801.60804969454);
      Complex complex13 = complex12.multiply(2801.60804969454);
      complex13.sqrt();
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      complex1.ONE.acos();
      complex0.cos();
      Complex complex2 = complex0.reciprocal();
      complex2.INF.conjugate();
      Complex complex3 = Complex.valueOf(29.8429233, 29.8429233);
      complex3.NaN.getArgument();
      Complex complex4 = complex1.ONE.divide(complex0);
      Complex complex5 = complex1.ONE.asin();
      complex0.readResolve();
      complex4.ZERO.add((-3084.0));
      Complex complex6 = Complex.valueOf(1.0, 1.0);
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex7.INF.pow(complex5);
      Complex complex9 = complex6.sqrt();
      complex4.sqrt1z();
      complex9.NaN.cosh();
      complex7.nthRoot(2604);
      complex6.hashCode();
      complex0.multiply(730);
      complex2.readResolve();
      complex7.exp();
      complex8.sin();
      Complex complex10 = complex4.sinh();
      complex10.ONE.divide(complex8);
      complex10.pow(complex2);
      complex7.readResolve();
      complex9.ZERO.nthRoot(2604);
      complex9.pow(Double.POSITIVE_INFINITY);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.ZERO.multiply(complex2);
      Complex complex4 = complex3.I.tanh();
      complex4.ZERO.multiply(2401.8003);
      Complex complex5 = complex2.subtract((-2187.911909967817));
      complex3.nthRoot(654);
      Complex complex6 = complex0.I.multiply(complex3);
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex7.ONE.pow(complex2);
      Object object0 = new Object();
      complex7.INF.subtract(0.0);
      complex5.equals(object0);
      complex2.hashCode();
      complex5.add((-2187.911909967817));
      Complex complex9 = complex3.tan();
      complex5.isNaN();
      complex6.tan();
      complex6.multiply(complex3);
      complex6.getReal();
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex11.I.divide(complex8);
      complex11.ZERO.sqrt();
      complex12.ZERO.exp();
      complex7.getArgument();
      complex9.cos();
      complex10.ONE.subtract(complex0);
      complex11.pow(2.0);
      complex9.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.3455801602048414E-30));
      Complex complex1 = new Complex((-833.1), (-833.1));
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3717.257971299076);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.ZERO.add(complex2);
      complex0.INF.asin();
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = Complex.valueOf((-570.92588773164), 6.283185307179586);
      complex4.ONE.divide(complex6);
      complex5.NaN.reciprocal();
      complex1.ZERO.acos();
      complex2.nthRoot(37);
      complex1.toString();
      complex3.toString();
      complex4.multiply(3717.257971299076);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(4056.807885013237, 20.0);
      Complex complex1 = Complex.ONE;
      complex0.I.multiply(complex1);
      complex0.getField();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(4056.807885013237);
      Complex complex4 = complex0.divide(complex3);
      Complex.valueOf(4056.807885013237, 1078.4);
      complex4.INF.conjugate();
      complex4.getField();
      complex3.divide(3.865007795216205E-213);
      Complex complex5 = complex2.reciprocal();
      complex5.INF.atan();
      complex3.nthRoot(2988);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1890.0));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.ONE.divide((-6177.088541916434));
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.cosh();
      complex2.ONE.pow((-20.0));
      complex1.ZERO.createComplex((-1890.0), 1.4302079642723736E55);
      Complex complex6 = complex4.ONE.add((-6177.088541916434));
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex6.ZERO.subtract(1.454991340637207);
      complex2.equals(complex7);
      complex6.add(363.84446017);
      complex7.NaN.multiply(complex4);
      complex5.ONE.negate();
      Complex complex9 = complex7.sqrt1z();
      complex3.isInfinite();
      Complex complex10 = complex5.exp();
      complex7.log();
      complex5.getImaginary();
      Complex complex11 = complex1.negate();
      complex0.INF.multiply(complex1);
      complex0.I.tanh();
      complex6.pow(2410.64595193);
      complex11.cosh();
      complex10.divide(complex9);
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      complex1.I.cos();
      Complex complex2 = complex1.INF.sinh();
      complex2.sqrt1z();
      Complex complex3 = complex1.I.tanh();
      complex3.ONE.atan();
      Complex complex4 = Complex.valueOf(120.9397316369, 120.9397316369);
      complex1.INF.getField();
      complex0.getReal();
      complex4.NaN.abs();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex6.ONE.conjugate();
      complex8.ZERO.cosh();
      complex6.INF.abs();
      complex6.nthRoot(1);
      complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex2.multiply((-82.84921));
      complex5.ZERO.divide(120.9397316369);
      complex7.createComplex(120.9397316369, (-2160.7675));
      Complex complex10 = complex8.divide(complex9);
      complex7.reciprocal();
      complex2.getReal();
      complex4.createComplex((-20.0), 3254.770291214);
      complex1.getField();
      complex5.atan();
      complex10.pow((-82.84921));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.I.toString();
      Complex complex2 = complex0.NaN.negate();
      complex2.I.sqrt1z();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex3.INF.acos();
      complex5.ONE.toString();
      complex3.ONE.sqrt();
      complex1.asin();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex4.add(907.041);
      Complex complex8 = complex7.acos();
      complex6.pow(complex4);
      complex8.ZERO.cosh();
      complex8.getReal();
      Complex complex9 = complex8.log();
      Complex complex10 = complex3.negate();
      complex1.readResolve();
      complex10.equals(complex1);
      complex6.getArgument();
      complex8.negate();
      complex10.multiply(0);
      complex2.hashCode();
      complex10.divide(complex9);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.isNaN();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ONE.sqrt1z();
      complex3.ZERO.multiply(0.0);
      complex1.I.hashCode();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex4.ONE.multiply(complex0);
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex0.negate();
      complex6.ZERO.createComplex(1301.9689968408, (-3445.0));
      complex8.toString();
      Complex complex9 = complex6.sinh();
      complex9.readResolve();
      complex9.NaN.getArgument();
      Complex complex10 = complex9.pow(0.0);
      complex10.INF.toString();
      complex0.INF.pow(0.0);
      complex5.divide(8.306111510463843E-162);
      complex0.log();
      complex7.getField();
      complex2.getField();
      Complex.valueOf((-2124.87504519));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(1304.9270528732, 1304.9270528732);
      Complex complex1 = complex0.log();
      complex1.getImaginary();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex1.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex4 = complex3.subtract((-2940.2958984125));
      complex4.I.hashCode();
      complex4.ZERO.multiply(5612);
      complex0.tan();
      complex3.NaN.getField();
      Complex complex5 = complex0.NaN.subtract(complex3);
      complex1.ZERO.getField();
      Complex complex6 = Complex.valueOf(0.7853981633974483, 3.5371542244169364E-8);
      complex6.NaN.conjugate();
      complex5.equals(complex0);
      Complex complex7 = complex0.divide((double) 5612);
      Complex complex8 = complex7.ZERO.pow(complex2);
      complex3.ONE.add(complex8);
      Complex complex9 = complex1.pow((-3454.25961366));
      complex9.NaN.toString();
      Complex complex10 = complex1.tan();
      complex5.createComplex(0.0, 3164.009771);
      complex10.sqrt();
      complex10.sinh();
      complex7.cosh();
      complex4.hashCode();
      complex1.reciprocal();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex3.acos();
      complex4.ONE.multiply(8.948877445235827E-8);
      Complex complex6 = complex4.NaN.divide(complex1);
      Complex complex7 = complex2.tan();
      complex7.ZERO.sin();
      complex6.INF.negate();
      complex7.I.exp();
      Complex complex8 = complex4.sqrt();
      complex1.I.sin();
      Complex complex9 = complex1.cos();
      complex8.INF.add(complex6);
      Complex complex10 = complex2.sqrt();
      complex1.tanh();
      complex5.negate();
      Complex complex11 = complex10.asin();
      complex11.INF.cos();
      complex9.isInfinite();
      complex10.getField();
      complex0.toString();
      complex10.divide(8.948877445235827E-8);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-962.3942663682), (-962.3942663682));
      complex0.isNaN();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.sinh();
      complex2.INF.multiply(complex1);
      complex0.abs();
      complex0.isNaN();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ZERO.multiply(complex0);
      complex3.ZERO.readResolve();
      Complex complex5 = complex4.INF.createComplex((-962.3942663682), 6.283185307179586);
      Complex complex6 = complex5.ONE.pow(complex1);
      complex1.cos();
      Complex complex7 = complex1.exp();
      complex7.abs();
      complex6.pow(Double.NaN);
      complex7.createComplex(6.283185307179586, (-4037.94126250095));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      complex1.ONE.toString();
      Complex complex2 = complex1.NaN.acos();
      complex2.NaN.divide((-861.5));
      Complex complex3 = complex0.asin();
      complex3.exp();
      complex3.abs();
      complex1.getReal();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ZERO.divide(8.208715337901827E-9);
      complex0.subtract((-1124.1936027828208));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.882816299252225E132, (-2.483811732227808E-8));
      Complex complex1 = complex0.tan();
      complex1.ONE.hashCode();
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.valueOf(2.882816299252225E132, 750.8);
      complex2.I.sqrt1z();
      Complex complex4 = complex2.ZERO.asin();
      complex4.ONE.cos();
      Complex complex5 = complex0.NaN.tan();
      Complex complex6 = complex5.sinh();
      complex0.createComplex(0.0, 0.0);
      complex0.nthRoot(493);
      complex0.ZERO.tanh();
      complex0.nthRoot(998);
      complex6.getField();
      complex1.toString();
      complex5.cosh();
      complex5.nthRoot(2069);
      complex6.abs();
      Complex complex7 = complex4.createComplex(3227.832, 998);
      Complex complex8 = Complex.valueOf((-2369.6325466804396));
      complex7.NaN.divide(complex8);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-4121.0), 2270.87);
      Complex complex1 = complex0.log();
      complex1.INF.add(6.283185307179586);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2584.8814457560075);
      complex0.I.asin();
      Complex complex1 = Complex.valueOf(8.537829238438662E-288);
      Complex complex2 = complex0.I.pow(complex1);
      complex2.ZERO.acos();
      complex0.getArgument();
      complex0.multiply((-1366));
      complex2.subtract(2584.8814457560075);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.pow(863.669844664175);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.ONE.cosh();
      Complex complex3 = complex0.subtract(Double.NaN);
      complex3.getReal();
      complex1.toString();
      Complex complex4 = complex1.add(0.0);
      Complex complex5 = complex0.exp();
      complex5.multiply(0.0);
      Complex complex6 = complex4.sin();
      complex6.abs();
      int int0 = (-458);
      Complex complex7 = complex1.I.divide((double) (-458));
      double double0 = 1612.833929645;
      complex7.ONE.add(1612.833929645);
      complex6.multiply((-458));
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex8.cos();
      complex9.I.cosh();
      try { 
        complex4.nthRoot((-458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -458
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-888.2), 0.0);
      complex0.cos();
      Complex complex1 = Complex.valueOf(3011.14271541562);
      complex0.NaN.pow(complex1);
      Complex complex2 = complex0.sinh();
      complex2.INF.nthRoot(153);
      complex0.ONE.conjugate();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.multiply(1251.809);
      Complex complex2 = complex1.INF.subtract(1251.809);
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex0.add((-895.7));
      complex4.INF.abs();
      complex1.reciprocal();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.acos();
      complex6.NaN.getArgument();
      complex5.I.log();
      Complex complex7 = complex3.conjugate();
      complex3.getArgument();
      complex7.ZERO.hashCode();
      complex4.equals(complex5);
      complex7.isInfinite();
      complex7.ZERO.sin();
      complex7.equals((Object) null);
      complex7.ONE.nthRoot(1605);
      complex2.multiply(2584);
      complex7.log();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex1.asin();
      complex2.I.conjugate();
      Complex complex3 = complex1.subtract(complex0);
      complex3.sqrt();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.exp();
      complex0.multiply((double) (-1));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.atan();
      complex0.I.tan();
      Complex complex1 = complex0.conjugate();
      complex1.divide(7.436036590244714E-8);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.atan();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.ZERO.exp();
      complex0.getReal();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.readResolve();
      Complex complex4 = complex3.ZERO.pow((-2244.5056393619));
      Complex complex5 = complex3.reciprocal();
      complex4.INF.sqrt();
      complex0.ZERO.readResolve();
      complex5.I.createComplex(0.0, 3323.1097);
      complex4.ONE.getArgument();
      complex3.ZERO.nthRoot(1);
      Complex complex6 = complex1.add((-1177.56643));
      complex1.isNaN();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex4.ONE.sqrt1z();
      complex8.ONE.conjugate();
      complex6.getArgument();
      Complex complex9 = complex2.divide(complex0);
      complex6.conjugate();
      Complex complex10 = Complex.valueOf((-421.48689772690113), (double) 1);
      complex0.pow(complex1);
      Complex complex11 = complex10.sqrt();
      complex7.sqrt();
      complex11.sin();
      Complex complex12 = complex4.divide((-2244.5056393619));
      complex12.add(complex5);
      complex5.conjugate();
      complex4.multiply(0);
      Complex complex13 = complex9.sinh();
      complex13.asin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.divide(0.0);
      complex3.I.sin();
      Complex complex4 = complex3.INF.divide(2.4895682334899902);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex0.subtract(0.0);
      complex5.INF.negate();
      complex6.ZERO.abs();
      Complex complex7 = complex1.multiply(1);
      Complex complex8 = complex7.ZERO.add(complex0);
      Complex.valueOf(1.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex5.multiply((-5133.063283));
      complex9.ONE.reciprocal();
      complex5.readResolve();
      complex9.cosh();
      complex2.sin();
      complex8.reciprocal();
      complex8.hashCode();
      complex3.cosh();
      complex9.log();
      Complex complex10 = Complex.I;
      complex6.pow(complex10);
      Complex complex11 = Complex.ZERO;
      complex3.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.atan();
      complex2.readResolve();
      complex0.ONE.subtract(complex1);
      complex0.sqrt();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.atan();
      complex0.nthRoot(1);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.add((-1334.75));
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex2.tan();
      complex1.ONE.acos();
      complex4.cos();
      complex2.hashCode();
      complex0.getArgument();
      Complex complex5 = complex3.I.divide(complex2);
      Complex complex6 = complex1.createComplex(0.0, (-35.205));
      complex3.readResolve();
      complex6.INF.tanh();
      complex6.pow((-2957.9925806));
      Complex complex7 = complex6.subtract((-2957.9925806));
      Complex complex8 = complex7.divide(complex1);
      Complex complex9 = complex8.ONE.multiply(complex5);
      complex9.ZERO.cos();
      Complex complex10 = complex7.createComplex(0.0, 162.957205);
      complex6.isInfinite();
      complex7.conjugate();
      complex7.cos();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      complex0.sqrt1z();
      Complex complex1 = complex0.asin();
      complex1.acos();
      complex0.divide((-2623.34));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
      complex0.getField();
      complex0.ONE.abs();
      double double0 = (-143.3781);
      Complex complex1 = complex0.ONE.pow((-143.3781));
      int int0 = 0;
      try { 
        complex1.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2620.29467438313);
      double double0 = (-1.0);
      Complex complex1 = Complex.valueOf((-1.0));
      complex1.add(complex0);
      Complex complex2 = complex1.NaN.divide(complex0);
      complex2.NaN.acos();
      complex0.ONE.atan();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = Complex.INF;
      complex1.reciprocal();
      Complex complex3 = complex2.NaN.add((-231.16));
      complex3.add(complex2);
      complex3.ONE.readResolve();
      complex2.I.abs();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex1.ZERO.add(0.0);
      Complex complex6 = complex5.sqrt1z();
      complex6.NaN.subtract(complex2);
      Complex complex7 = complex4.reciprocal();
      complex7.ONE.multiply(0.0);
      complex2.sin();
      complex1.getImaginary();
      complex6.pow(complex7);
      complex0.reciprocal();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.pow(626.0);
      complex1.ONE.toString();
      complex1.ONE.add(complex0);
      complex1.divide(complex0);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.ZERO.multiply((-4.370104767451421E-10));
      complex3.INF.getArgument();
      complex0.nthRoot(787);
      complex2.isInfinite();
      Complex complex4 = complex2.subtract((double) 787);
      complex4.NaN.sin();
      Complex complex5 = complex2.conjugate();
      complex5.I.reciprocal();
      complex4.readResolve();
      complex1.getReal();
      complex0.isNaN();
      Complex complex6 = complex0.multiply(8.846862323478745E-8);
      complex6.multiply(1190);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1565.330552147));
      Complex complex1 = Complex.valueOf((-4900.792711));
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ONE.reciprocal();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex2.ONE.add(0.0);
      assertTrue(complex5.equals((Object)complex4));
      
      Complex complex6 = complex2.createComplex(1017.5869628490234, 0.0);
      Complex complex7 = complex6.pow(complex0);
      Complex complex8 = complex7.I.multiply(0.0);
      Complex complex9 = complex8.I.negate();
      complex2.toString();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex10.I.conjugate();
      complex7.isNaN();
      Complex complex12 = complex1.divide(0.0);
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      
      String string0 = complex8.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      complex10.readResolve();
      Complex complex13 = Complex.valueOf(1017.5869628490234);
      Complex complex14 = complex10.subtract(complex13);
      assertEquals((-1016.8253686930676), complex14.getReal(), 0.01);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      complex10.getField();
      complex6.getReal();
      Complex complex15 = complex9.multiply(0.0);
      assertTrue(complex15.equals((Object)complex7));
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertTrue(complex9.equals((Object)complex11));
      assertEquals(-0.0, complex9.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      List<Complex> list0 = complex0.NaN.nthRoot(1967);
      assertFalse(list0.contains(complex0));
      
      complex0.isNaN();
      Complex complex1 = complex0.ZERO.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.valueOf(4539.661849321, (-3522.3));
      Complex complex3 = complex2.INF.multiply((-670.17186998));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.log();
      complex5.abs();
      assertTrue(complex5.isInfinite());
      
      complex2.INF.getArgument();
      complex4.ONE.getField();
      complex4.I.subtract(complex0);
      Complex complex6 = Complex.valueOf(60.26889389388455, (-446.28241798));
      complex6.ZERO.log();
      Complex complex7 = complex4.log();
      Complex complex8 = complex7.multiply(20.0);
      Complex complex9 = complex3.createComplex(4539.661849321, (-446.28241798));
      Complex complex10 = complex9.I.log();
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex2.subtract(0.0);
      assertTrue(complex11.equals((Object)complex2));
      
      Complex complex12 = complex4.pow(0.0);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertTrue(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow((-2334.353094447189));
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = Complex.valueOf((-2334.353094447189), (-772.85615));
      assertEquals((-772.85615), complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.asin();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      complex0.getArgument();
      complex3.hashCode();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.multiply((-4256));
      assertEquals(4256.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = (Complex)complex3.readResolve();
      assertEquals(2.1543348071388458E-164, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      complex1.readResolve();
      assertFalse(complex1.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2078.25, 2078.25);
      complex0.INF.tanh();
      int int0 = (-1820);
      try { 
        complex0.nthRoot((-1820));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,820
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      complex0.getArgument();
      Complex complex2 = complex0.multiply(634);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(634.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }
}
