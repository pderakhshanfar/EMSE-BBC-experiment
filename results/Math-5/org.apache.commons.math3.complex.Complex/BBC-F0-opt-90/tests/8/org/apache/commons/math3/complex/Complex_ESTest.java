/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:59:58 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-317.1365037160331), Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.2066382528772518E268, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(2788.944327484905, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.negate();
      complex0.ZERO.conjugate();
      Complex complex2 = complex0.NaN.sqrt1z();
      complex2.ZERO.add(complex0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.subtract(0.8813735870195429);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.NaN.createComplex((-1.0), 620.8454201325843);
      complex4.INF.abs();
      complex6.INF.add(complex1);
      Complex complex7 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex4.sqrt1z();
      complex8.I.toString();
      complex3.INF.abs();
      Complex complex11 = complex2.ONE.atan();
      complex11.INF.sqrt1z();
      Complex complex12 = complex3.divide(complex9);
      Complex complex13 = complex12.INF.sqrt();
      complex13.ZERO.reciprocal();
      complex12.exp();
      Complex complex14 = complex4.sin();
      complex14.I.acos();
      Complex complex15 = Complex.valueOf(0.8813735870195429);
      complex10.acos();
      complex9.ONE.add(complex15);
      complex7.readResolve();
      complex12.sinh();
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.7734658676841284E20, 313.932521068806);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.ONE.add(complex1);
      complex0.ZERO.getArgument();
      complex3.ZERO.cos();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex4.add(complex5);
      complex1.sinh();
      Complex complex7 = Complex.valueOf(313.932521068806);
      complex1.multiply(complex7);
      complex5.NaN.getField();
      complex5.NaN.pow(complex7);
      complex7.multiply(0.0);
      Complex complex8 = complex6.multiply(complex4);
      complex5.negate();
      Complex complex9 = Complex.valueOf(0.0, (-1070.08721436988));
      Complex complex10 = complex2.exp();
      complex10.ZERO.conjugate();
      complex8.asin();
      complex9.nthRoot(124);
      complex10.cos();
      Complex complex11 = complex8.add(3.7734658676841284E20);
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(7.251548346906463E162, 0.11604541540145874);
      complex0.multiply(complex1);
      complex1.sqrt1z();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), 0.7853981633974483);
      complex0.createComplex(0.7853981633974483, 0.7853981633974483);
      Complex complex2 = new Complex((-20.0), 1342.6075387);
      Complex complex3 = complex1.tanh();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.pow(416.641);
      complex0.conjugate();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.pow(complex0);
      complex2.ONE.multiply((-612));
      complex1.NaN.add(complex0);
      complex1.sinh();
      complex1.tan();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1967.3, 1967.3);
      complex0.exp();
      complex0.nthRoot(2241);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1221.537078596337), 421.43994448);
      complex0.tanh();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.createComplex(773.82388805807, 773.82388805807);
      complex0.sin();
      Complex complex3 = (Complex)complex0.NaN.readResolve();
      complex3.atan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.add(798.897343032414);
      complex1.pow((-20.0));
      Complex complex6 = complex1.conjugate();
      complex6.multiply(455);
      Complex.valueOf(0.6905817003766437);
      complex2.subtract(complex0);
      complex2.conjugate();
      Complex.valueOf(773.82388805807, 798.897343032414);
      Complex complex7 = Complex.ONE;
      complex7.getImaginary();
      try { 
        complex5.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      complex0.ONE.negate();
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex2.tanh();
      complex1.multiply(5145.334256803);
      complex2.abs();
      Complex complex4 = Complex.NaN;
      complex4.subtract(2374.0);
      complex4.nthRoot(1360);
      Complex complex5 = new Complex(1.1309373378753662, 0.0);
      complex3.tan();
      complex0.readResolve();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.NaN;
      complex3.pow(complex7);
      complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-587.830121070948), (-587.830121070948));
      Complex complex1 = new Complex((-587.830121070948));
      complex0.divide(complex1);
      complex0.tanh();
      Complex complex2 = complex0.multiply(945.1302049844);
      complex1.abs();
      complex0.nthRoot(2);
      Complex complex3 = new Complex(20.0, 20.0);
      complex3.tan();
      complex0.readResolve();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.valueOf(20.0);
      complex5.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(complex0);
      Complex complex2 = complex0.ONE.negate();
      complex0.INF.abs();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.INF;
      complex2.ZERO.divide(complex0);
      Complex complex6 = complex3.add(complex4);
      Complex complex7 = complex6.exp();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2030.0849044685517));
      complex8.equals(complex1);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(complex0);
      Complex complex2 = complex0.ONE.negate();
      complex0.INF.abs();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf((-175.0));
      complex1.sqrt1z();
      complex0.divide(complex3);
      Complex complex6 = complex5.multiply(Double.POSITIVE_INFINITY);
      complex6.nthRoot(1360);
      complex4.tanh();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.sqrt();
      complex8.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(873.91);
      complex1.I.getArgument();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.acos();
      complex0.ONE.toString();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.NaN.sinh();
      complex2.NaN.getArgument();
      Complex complex4 = complex0.asin();
      complex1.ZERO.pow(complex3);
      Complex complex5 = complex4.asin();
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex0.ZERO.asin();
      Complex complex9 = complex7.INF.multiply(1612);
      complex9.NaN.getField();
      Complex complex10 = complex9.I.pow(complex8);
      Complex.valueOf(Double.NaN, (-262.5088609));
      Complex complex11 = complex8.ONE.cos();
      complex11.NaN.asin();
      Complex.valueOf(1.0);
      complex8.ZERO.getField();
      complex10.I.sinh();
      complex3.hashCode();
      complex3.reciprocal();
      complex10.pow(complex6);
      Complex.valueOf((double) 1612);
      complex5.nthRoot(1612);
      Complex complex12 = Complex.valueOf((-262.5088609));
      complex10.divide(complex12);
      Complex complex13 = complex3.cos();
      complex13.I.createComplex(Double.NaN, (-262.5088609));
      complex13.ONE.createComplex(Double.NaN, 0.0);
      complex0.subtract((-262.5088609));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      complex1.multiply(complex2);
      complex0.abs();
      complex2.subtract(1.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.ZERO;
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      complex0.INF.abs();
      complex2.ZERO.multiply(complex0);
      complex0.abs();
      Complex complex3 = Complex.valueOf(1.0);
      Complex complex4 = complex1.sqrt1z();
      complex2.divide(complex4);
      Complex complex5 = complex3.multiply(Double.POSITIVE_INFINITY);
      complex4.pow(1.0);
      complex1.conjugate();
      complex2.sinh();
      complex5.exp();
      complex0.exp();
      Complex complex6 = Complex.ONE;
      complex6.divide((double) 557);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.ONE.createComplex(773.82388805807, Double.POSITIVE_INFINITY);
      complex2.sin();
      complex3.multiply(2778);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.exp();
      complex2.equals(complex0);
      complex1.add((-1.5140150088220166E-8));
      Complex complex4 = complex3.divide((-1.5277127454062126E112));
      Complex.valueOf((-1.5140150088220166E-8));
      complex4.sqrt1z();
      complex0.divide(complex1);
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.ONE.createComplex(773.82388805807, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.sin();
      complex2.NaN.readResolve();
      Complex complex5 = Complex.valueOf(0.5039018405998233);
      Complex complex6 = complex5.I.multiply((-8.008561371849434E-8));
      complex1.divide(complex3);
      complex4.isNaN();
      complex0.conjugate();
      complex6.nthRoot(1);
      Complex complex7 = new Complex((-8.008561371849434E-8), 0.5039018405998233);
      Complex complex8 = complex6.tan();
      complex1.hashCode();
      complex8.exp();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.exp();
      complex2.equals(complex0);
      complex1.add((-1.5140150088220166E-8));
      Complex complex4 = complex3.divide((-1.5277127454062126E112));
      Complex.valueOf((-1.5140150088220166E-8));
      complex4.sqrt1z();
      Complex complex5 = complex0.divide(complex1);
      complex0.multiply((-1.1570594692045927E-9));
      Complex complex6 = Complex.valueOf((-1.5277127454062126E112), (-2615.845769769));
      Complex complex7 = new Complex(0.6296497583389282, 0.0);
      complex5.tan();
      complex6.sin();
      complex6.asin();
      Complex complex8 = complex4.reciprocal();
      complex6.conjugate();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.abs();
      Complex complex2 = complex1.multiply(complex0);
      complex0.abs();
      Complex complex3 = complex2.subtract(0.803724352560657);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.createComplex((-971.120381559), 0.803724352560657);
      Complex complex6 = complex0.tan();
      complex5.pow(complex3);
      Complex complex7 = new Complex(0.803724352560657, 209.95173974);
      Complex complex8 = new Complex(2681.175719270869, 137.30808966451);
      complex8.atan();
      complex5.add(1.0);
      complex6.pow((-971.120381559));
      Complex complex9 = complex1.conjugate();
      complex3.multiply(1431655765);
      complex7.cosh();
      complex3.add(complex8);
      Complex complex10 = complex4.divide(Double.POSITIVE_INFINITY);
      complex9.getField();
      complex10.subtract(complex0);
      Complex complex11 = Complex.INF;
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.multiply(406.0);
      complex3.abs();
      complex1.nthRoot(1360);
      complex2.hashCode();
      complex0.tanh();
      complex0.acos();
      Complex complex4 = Complex.valueOf(1715.57685622, (-20.0));
      Complex complex5 = new Complex(Double.NaN, (-171.804499));
      Complex complex6 = complex4.tan();
      complex6.sin();
      Complex complex7 = new Complex(574.1707063234767);
      complex7.asin();
      Complex complex8 = complex4.reciprocal();
      complex8.conjugate();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-4354.715248838579), 0.0);
      Complex.valueOf((-1.0), (-1736.8644431539074));
      Complex complex1 = complex0.tan();
      complex0.sin();
      Complex complex2 = complex0.asin();
      complex2.reciprocal();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.pow(complex0);
      complex2.ONE.createComplex(773.82388805807, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.subtract(918.603523396);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.createComplex((-1577.33477313), 1022.5967724319871);
      complex5.tan();
      Complex complex6 = Complex.ZERO;
      complex6.pow(complex4);
      Complex complex7 = new Complex((-1577.33477313), (-1577.33477313));
      complex2.atan();
      Complex complex8 = complex1.add(1022.5967724319871);
      Complex complex9 = complex2.pow(1022.5967724319871);
      complex3.conjugate();
      Complex complex10 = Complex.NaN;
      complex10.multiply(642);
      Complex.valueOf((double) 642);
      complex8.subtract(complex6);
      complex9.conjugate();
      Complex complex11 = new Complex(25633.985647173897, (-20.0));
      complex11.multiply((-27));
      Complex complex12 = Complex.INF;
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      complex0.INF.abs();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex1.abs();
      complex1.sin();
      complex2.readResolve();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex1.multiply(713.647908);
      Complex complex6 = complex3.add(complex1);
      Complex complex7 = complex3.cos();
      complex7.abs();
      complex6.atan();
      complex7.hashCode();
      complex1.getArgument();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex1.subtract(complex8);
      Complex complex10 = complex4.cosh();
      Complex complex11 = new Complex(1.0);
      complex10.add(complex11);
      complex0.divide((-1571.892258));
      complex11.getField();
      complex6.subtract(complex9);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.ONE.createComplex(773.82388805807, Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(3229.971466259774);
      Complex complex5 = complex4.tan();
      complex3.getField();
      Complex complex6 = Complex.valueOf(3229.971466259774);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.acos();
      complex9.nthRoot(2925);
      Complex complex10 = new Complex(1.792439567737114E-4, 1.0381848020926893E-8);
      complex0.subtract(complex4);
      complex4.readResolve();
      complex1.abs();
      complex5.nthRoot(7);
      complex8.hashCode();
      Complex complex11 = new Complex(713.647908);
      Complex complex12 = complex11.tanh();
      Complex complex13 = complex3.acos();
      Complex.valueOf((-20.0), (-1022.5967724319871));
      complex4.tan();
      complex0.sin();
      complex12.asin();
      complex13.reciprocal();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1570594692045927E-9));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.createComplex((-1.1570594692045927E-9), (-1022.5967724319871));
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.sin();
      complex3.readResolve();
      Complex.valueOf((-1.1570594692045927E-9));
      Complex complex6 = complex4.multiply((-8.008561371849434E-8));
      Complex complex7 = complex2.add(complex4);
      complex3.cos();
      Complex complex8 = Complex.ONE;
      complex8.abs();
      Complex complex9 = complex2.atan();
      complex7.hashCode();
      complex9.getArgument();
      Complex complex10 = Complex.ZERO;
      complex6.subtract(complex7);
      complex4.cosh();
      Complex complex11 = Complex.INF;
      complex0.add(complex11);
      complex5.divide((-8.008561371849434E-8));
      complex5.getField();
      Complex complex12 = Complex.ZERO;
      complex12.subtract(complex1);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.subtract(complex1);
      complex1.negate();
      complex2.abs();
      Complex complex3 = complex2.add(20.0);
      Complex complex4 = complex0.divide((-920.0));
      Complex complex5 = Complex.valueOf(1368.3032);
      complex1.sqrt1z();
      Complex complex6 = complex4.divide(complex3);
      complex0.multiply(Double.NaN);
      complex0.toString();
      complex5.getField();
      complex6.pow(complex0);
      complex0.hashCode();
      complex6.toString();
      complex6.sqrt();
      Complex.valueOf((-1.2522542401353875E-9), (-1.2522542401353875E-9));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sqrt1z();
      complex2.abs();
      Complex complex3 = complex0.multiply(complex2);
      complex3.I.acos();
      complex1.abs();
      complex3.subtract(1.0);
      Complex complex4 = Complex.valueOf(0.0, (-1.0));
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.createComplex(6.95931229841279E-4, (-1577.33477313));
      complex2.tan();
      Complex complex7 = complex4.pow(complex6);
      Complex complex8 = new Complex(968.0956505555, 6.95931229841279E-4);
      complex2.atan();
      Complex complex9 = complex2.add(6.95931229841279E-4);
      complex5.pow((-2145.362257));
      complex7.conjugate();
      complex9.multiply(557);
      Complex.valueOf(1.4822404384613037);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.valueOf(1.8412576154421806E-7, (-1577.33477313));
      complex10.subtract(complex11);
      complex0.conjugate();
      complex9.multiply((-401));
      Complex complex12 = Complex.INF;
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      complex0.INF.abs();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex1.abs();
      Complex complex4 = complex1.subtract(1.0);
      complex3.tanh();
      complex0.createComplex(Double.POSITIVE_INFINITY, 1284.25306398517);
      Complex complex5 = Complex.I;
      Complex complex6 = complex1.pow(complex3);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, (-20.0));
      complex6.atan();
      complex3.add(3951.6);
      Complex complex8 = complex4.pow(344.4078);
      complex4.conjugate();
      complex4.multiply(6);
      Complex.valueOf((-1436.223073));
      complex5.subtract(complex3);
      complex3.conjugate();
      complex7.multiply((-2281));
      Complex complex9 = Complex.INF;
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      complex0.INF.abs();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex1.abs();
      Complex complex4 = complex1.subtract(1.0);
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.sqrt1z();
      Complex complex7 = complex6.divide(complex4);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.multiply(Double.POSITIVE_INFINITY);
      complex9.toString();
      complex8.getField();
      complex4.pow(complex5);
      Complex complex10 = Complex.valueOf(2969.344);
      complex10.negate();
      complex2.hashCode();
      complex4.toString();
      complex6.sqrt();
      Complex.valueOf(2969.344, Double.NaN);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex1.ONE.negate();
      complex1.INF.abs();
      Complex complex4 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.INF.sqrt1z();
      Complex complex8 = complex7.ZERO.divide(complex1);
      Complex complex9 = complex8.INF.multiply(Double.NaN);
      complex3.abs();
      complex9.nthRoot(1360);
      complex6.hashCode();
      complex6.tanh();
      complex7.acos();
      Complex.valueOf((-36.99163640900838), Double.POSITIVE_INFINITY);
      Complex complex10 = new Complex(1.1309373378753662, Double.POSITIVE_INFINITY);
      complex10.tan();
      complex1.sin();
      complex5.asin();
      Complex complex11 = complex8.reciprocal();
      complex9.conjugate();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(3230.971466259774);
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.exp();
      complex3.equals(complex1);
      Complex complex4 = complex0.asin();
      complex2.abs();
      complex1.getReal();
      Complex complex5 = Complex.valueOf((-1.0), 0.0);
      complex2.isInfinite();
      Complex.valueOf(0.0, 3230.971466259774);
      double double0 = (-2921.68966591647);
      Complex complex6 = complex4.multiply((-2921.68966591647));
      Complex.valueOf(163.0648);
      complex6.abs();
      // Undeclared exception!
      complex5.nthRoot(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      complex0.INF.abs();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex1.abs();
      Complex complex4 = complex1.subtract(1.0);
      complex3.tanh();
      Complex complex5 = complex2.createComplex(1.0, (-1577.33477313));
      complex1.tan();
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = new Complex((-2873.8471766185), 1.0);
      complex7.atan();
      Complex complex8 = complex0.add((-2873.8471766185));
      complex6.pow(Double.POSITIVE_INFINITY);
      complex3.conjugate();
      Complex complex9 = complex7.multiply(557);
      Complex.valueOf((-1.6436423669122624E8));
      complex9.subtract(complex5);
      complex5.conjugate();
      complex8.multiply(557);
      Complex complex10 = Complex.INF;
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.pow(complex0);
      complex2.ONE.createComplex(773.82388805807, Double.POSITIVE_INFINITY);
      complex2.sin();
      complex2.NaN.readResolve();
      Complex complex3 = Complex.valueOf(0.5039018405998233);
      Complex complex4 = complex3.I.multiply((-8.008561371849434E-8));
      Complex complex5 = complex4.INF.add(complex0);
      Complex complex6 = complex4.I.cos();
      complex6.NaN.abs();
      complex3.atan();
      complex0.NaN.hashCode();
      complex5.getArgument();
      Complex complex7 = Complex.ZERO;
      complex0.subtract(complex7);
      complex5.cosh();
      complex3.add(complex6);
      complex6.divide(Double.NaN);
      complex4.getField();
      complex5.subtract(complex4);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-2308.4239684775857));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      complex1.INF.createComplex((-2308.4239684775857), (-3643.053));
      Complex complex3 = complex0.createComplex((-960.0), (-3643.053));
      Complex complex4 = complex2.ZERO.pow((-2308.4239684775857));
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.pow(complex1);
      complex1.toString();
      complex6.nthRoot(425);
      complex2.createComplex(3625.624515, 3625.624515);
      complex6.isNaN();
      complex1.sinh();
      complex3.exp();
      complex4.exp();
      complex5.divide((-1459.15323));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex1.ONE.atan();
      Complex complex5 = complex2.NaN.negate();
      Complex complex6 = complex3.multiply((-3481.2102140874));
      Complex.valueOf((-20.0));
      complex0.add(complex6);
      Complex complex7 = Complex.valueOf(5.855267177907345E90);
      complex4.subtract(complex5);
      complex2.readResolve();
      complex2.abs();
      complex0.nthRoot(1037);
      complex1.hashCode();
      Complex complex8 = complex5.tanh();
      complex7.acos();
      complex5.tan();
      complex4.sin();
      complex0.asin();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1570594692045927E-9));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.createComplex((-1.1570594692045927E-9), (-1022.5967724319871));
      Complex complex4 = complex3.exp();
      Complex complex5 = complex2.ONE.tan();
      complex5.ONE.getField();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.I.acos();
      complex7.NaN.nthRoot(37);
      Complex complex8 = new Complex(37, (-1.1570594692045927E-9));
      Complex complex9 = complex4.subtract(complex8);
      complex8.readResolve();
      complex2.abs();
      complex0.nthRoot(37);
      complex3.hashCode();
      complex0.tanh();
      complex1.acos();
      Complex complex10 = Complex.valueOf(3.423560333632085E-8, Double.POSITIVE_INFINITY);
      complex10.tan();
      complex9.sin();
      complex7.asin();
      complex7.reciprocal();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-2308.4239684775857));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.createComplex((-960.0), (-3643.053));
      Complex complex4 = complex2.ZERO.pow((-2308.4239684775857));
      Complex complex5 = complex2.INF.tanh();
      Complex complex6 = complex1.INF.createComplex(1632.9915148, 1.0459461212158203);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex0.INF.pow(complex1);
      complex7.readResolve();
      complex7.getArgument();
      complex8.toString();
      Complex complex9 = complex4.multiply((-2040109465));
      complex5.asin();
      Complex complex10 = complex3.tanh();
      complex7.subtract(complex2);
      complex0.subtract(1.0);
      Complex.valueOf(2043.619343, (-960.0));
      complex10.cos();
      complex9.divide(1.0459461212158203);
      complex1.hashCode();
      complex10.cosh();
      complex3.add(3671.28);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.423560333632085E-8, 3.423560333632085E-8);
      complex0.I.toString();
      complex0.NaN.abs();
      Complex complex1 = complex0.acos();
      complex1.isNaN();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.exp();
      complex1.INF.conjugate();
      Complex complex4 = complex1.NaN.createComplex((-5233.223), (-5233.223));
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex4.acos();
      complex7.readResolve();
      Complex complex8 = complex7.multiply((-2670.17776));
      Complex complex9 = complex7.log();
      complex0.readResolve();
      complex3.getArgument();
      complex1.toString();
      complex9.multiply(1);
      complex1.asin();
      complex6.tanh();
      Complex.valueOf((-1045081.3117229873));
      complex1.subtract(Double.NaN);
      Complex.valueOf(4694.3585, -0.0);
      complex3.cos();
      complex8.divide(20.0);
      complex3.hashCode();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.negate();
      complex3.reciprocal();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.negate();
      Complex complex6 = new Complex((-2696.291), 0.48504669010413437);
      complex6.log();
      complex6.negate();
      complex4.log();
      Complex complex7 = Complex.valueOf(524.68699079007);
      complex7.toString();
      complex3.equals("(524.68699079007, 0.0)");
      Complex complex8 = new Complex((-3481.2102140874), 2.373243808746338);
      Complex complex9 = new Complex((-3481.2102140874));
      complex9.pow(complex4);
      complex5.conjugate();
      complex7.multiply(complex2);
      complex3.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(3230.971466259774);
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.add(complex1);
      complex1.equals(complex1);
      Complex complex3 = complex0.asin();
      complex2.abs();
      complex1.getReal();
      Complex.valueOf((-1.0), 0.0);
      complex2.isInfinite();
      Complex complex4 = Complex.valueOf(0.0, 3230.971466259774);
      Complex complex5 = complex3.multiply((-2921.68966591647));
      Complex.valueOf(163.0648);
      complex3.add(complex0);
      complex0.getField();
      Complex complex6 = complex5.pow(complex3);
      complex0.getImaginary();
      complex2.negate();
      complex6.hashCode();
      Complex complex7 = Complex.INF;
      complex7.toString();
      complex4.sqrt();
      Complex.valueOf((-2921.68966591647), (-1.0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.423560333632085E-8, 3.423560333632085E-8);
      complex0.I.toString();
      complex0.NaN.abs();
      Complex complex1 = complex0.acos();
      complex1.isNaN();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = new Complex(3.423560333632085E-8, 3.423560333632085E-8);
      complex1.isInfinite();
      complex0.hashCode();
      complex2.cos();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.createComplex(2.2038806519542315E-267, 1.3949272132829371E-5);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = Complex.ONE;
      complex6.nthRoot(1);
      Complex complex7 = complex0.conjugate();
      complex3.reciprocal();
      Complex complex8 = complex5.createComplex(3.497714990137842E-133, 0.32199859619140625);
      complex1.pow(complex3);
      complex6.conjugate();
      complex3.conjugate();
      complex7.toString();
      Complex complex9 = Complex.ZERO;
      complex9.divide(complex8);
      double double0 = (-788.9061273761);
      Complex complex10 = Complex.valueOf((-788.9061273761), (-1.7999197335480384E-103));
      try { 
        complex10.nthRoot((-2049341562));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,049,341,562
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex1.INF.multiply((-2091.366585));
      complex1.I.getField();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.ONE.sin();
      complex3.INF.toString();
      Complex complex4 = complex2.tan();
      complex0.isInfinite();
      complex2.isInfinite();
      Complex complex5 = complex4.sqrt();
      complex5.readResolve();
      complex3.subtract((-1445.7970211246));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.6048921346664429);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.log();
      Complex complex4 = new Complex(596.0, (-1022.5967724319871));
      Complex complex5 = complex4.createComplex(596.0, 1.7712635751001657E127);
      Complex complex6 = complex5.exp();
      complex6.getArgument();
      Complex complex7 = complex4.tan();
      complex2.getField();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex5.acos();
      complex3.nthRoot(37);
      complex2.readResolve();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.sin();
      complex7.multiply(complex6);
      Complex complex13 = new Complex(2967.56);
      Complex complex14 = complex13.tan();
      complex14.pow(complex13);
      Complex.valueOf(2967.56);
      complex10.readResolve();
      complex9.tan();
      complex12.atan();
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1.5140150088220166E-8));
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.exp();
      complex2.equals(complex0);
      Complex complex4 = complex1.asin();
      complex2.abs();
      complex4.getReal();
      Complex.valueOf(1.2210872189854344E-232, (-1.1570594692045927E-9));
      Complex complex5 = new Complex(0.0);
      complex5.isInfinite();
      Complex complex6 = Complex.valueOf(0.0, (-1.1570594692045927E-9));
      Complex complex7 = complex2.multiply(1331.774);
      Complex.valueOf(0.0);
      Complex complex8 = Complex.I;
      complex4.add(complex8);
      Complex complex9 = Complex.valueOf(0.0037348724386288444);
      complex1.subtract(complex2);
      complex0.abs();
      complex5.nthRoot(1037);
      complex4.hashCode();
      complex3.tanh();
      Complex complex10 = complex9.acos();
      complex10.tan();
      Complex complex11 = complex6.sin();
      Complex complex12 = complex4.asin();
      complex7.reciprocal();
      complex12.conjugate();
      complex2.toString();
      Complex.valueOf(2045.5014921286866, 0.0);
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(3230.971466259774);
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.exp();
      complex3.equals(complex1);
      Complex complex4 = complex0.asin();
      complex2.abs();
      complex1.getReal();
      Complex.valueOf((-1.0), 0.0);
      complex2.isInfinite();
      Complex complex5 = Complex.valueOf(0.0, 3230.971466259774);
      Complex complex6 = complex4.multiply((-2921.68966591647));
      Complex complex7 = Complex.valueOf(163.0648);
      complex4.add(complex0);
      Complex complex8 = Complex.valueOf(6.283185307179586);
      complex7.subtract(complex6);
      complex7.ONE.readResolve();
      complex2.abs();
      complex7.nthRoot(1037);
      complex2.hashCode();
      Complex complex9 = complex8.tanh();
      complex3.acos();
      Complex complex10 = complex0.tan();
      complex5.sin();
      complex9.asin();
      complex10.reciprocal();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-2308.4239684775857));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      complex0.createComplex((-960.0), (-3643.053));
      Complex complex3 = complex2.ZERO.pow((-2308.4239684775857));
      complex3.abs();
      complex3.getReal();
      Complex complex4 = Complex.valueOf(Double.NaN, (-3643.053));
      complex3.isInfinite();
      Complex.valueOf((-1.5707963267948966), 0.0);
      complex4.multiply(Double.NaN);
      Complex complex5 = Complex.valueOf(1878.8);
      Complex complex6 = complex4.add(complex0);
      Complex.valueOf((-960.0));
      Complex complex7 = complex6.subtract(complex2);
      complex7.abs();
      complex5.nthRoot(1058);
      Complex complex8 = Complex.INF;
      complex8.hashCode();
      complex5.tanh();
      complex7.acos();
      Complex complex9 = Complex.ZERO;
      complex9.tan();
      Complex complex10 = complex7.sin();
      complex9.asin();
      Complex complex11 = complex10.reciprocal();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1736.8644431539074);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      complex1.sin();
      complex2.getArgument();
      complex1.toString();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.pow(complex3);
      complex4.getArgument();
      Complex complex5 = complex1.sqrt();
      double double0 = (-656.0486285980545);
      Complex complex6 = new Complex((-656.0486285980545), Double.NaN);
      complex6.multiply(complex5);
      try { 
        complex0.nthRoot((-1008));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,008
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = 3.423560333632085E-8;
      Complex complex0 = Complex.valueOf(3.423560333632085E-8, 3.423560333632085E-8);
      complex0.I.toString();
      complex0.NaN.abs();
      Complex complex1 = complex0.acos();
      complex1.isNaN();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.exp();
      complex1.INF.conjugate();
      complex2.negate();
      Complex complex4 = Complex.INF;
      complex4.add(Double.NaN);
      int int0 = 0;
      try { 
        complex3.nthRoot((-127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -127
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2413.1145559851675, 2413.1145559851675);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply(1784);
      Complex complex3 = complex0.ZERO.pow((-2895.3586));
      Complex complex4 = complex3.ONE.add(complex1);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex7.I.pow(complex1);
      complex8.ZERO.tanh();
      Complex complex9 = complex1.divide(complex0);
      Complex complex10 = complex9.I.conjugate();
      Complex complex11 = complex10.ONE.createComplex(1791.0283768514696, 1.0);
      Complex.valueOf(1791.0283768514696);
      Complex complex12 = complex1.subtract(complex2);
      complex8.conjugate();
      Complex complex13 = complex12.sin();
      complex8.getArgument();
      complex4.toString();
      Complex complex14 = complex4.pow(complex13);
      complex8.getArgument();
      complex11.sqrt();
      complex14.multiply(complex8);
      complex1.nthRoot(1784);
      complex13.multiply(2413.1145559851675);
      Complex complex15 = Complex.I;
      complex15.multiply(2325);
      complex6.subtract((double) (-1));
      complex14.readResolve();
      complex15.isNaN();
      complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.log();
      complex3.I.toString();
      complex2.add(1998.5);
      complex1.isNaN();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.cosh();
      complex1.isInfinite();
      Complex complex6 = complex0.acos();
      complex5.multiply(complex4);
      complex2.equals(complex6);
      Complex complex7 = Complex.NaN;
      complex7.hashCode();
      complex7.createComplex(1998.5, 1998.5);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.negate();
      complex2.ZERO.reciprocal();
      complex1.ONE.atan();
      complex2.NaN.negate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex3.log();
      complex0.toString();
      complex5.equals(complex1);
      Complex complex6 = new Complex(194.46, (-3481.2102140874));
      complex6.pow(complex5);
      Complex complex7 = complex5.conjugate();
      complex1.multiply(complex4);
      complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex1.createComplex((-1022.5967724319871), (-1022.5967724319871));
      Complex complex4 = complex2.exp();
      complex2.getArgument();
      Complex complex5 = complex0.tan();
      complex1.getField();
      Complex complex6 = complex3.reciprocal();
      complex2.acos();
      complex6.nthRoot(2336);
      complex3.readResolve();
      complex6.sin();
      Complex complex7 = Complex.ONE;
      complex7.multiply(complex2);
      complex3.tan();
      Complex.valueOf(40.509939);
      Complex complex8 = Complex.valueOf(0.4161468365471423, (double) 37);
      complex8.readResolve();
      complex4.tan();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      complex0.INF.abs();
      complex2.ZERO.multiply(complex0);
      complex0.abs();
      Complex complex3 = complex1.subtract(1.0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ZERO.pow(complex3);
      Complex complex6 = Complex.valueOf(Double.NaN, 6.209679892802781E222);
      Complex complex7 = complex6.createComplex(1.0, 1.0004144021723378);
      Complex complex8 = complex4.add(complex0);
      Complex complex9 = complex0.add(complex8);
      complex9.createComplex((-665.29128577), 292.3108551215291);
      Complex complex10 = complex0.atan();
      complex1.tanh();
      complex5.sqrt1z();
      complex5.getArgument();
      Complex complex11 = Complex.I;
      complex9.subtract(complex11);
      complex7.multiply(complex0);
      complex10.tanh();
      Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.asin();
      complex0.INF.subtract(complex1);
      complex1.ONE.negate();
      complex1.INF.abs();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.add(Double.POSITIVE_INFINITY);
      complex3.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = complex5.NaN.cos();
      complex6.NaN.cos();
      Complex complex7 = complex5.ZERO.divide(complex1);
      complex7.INF.multiply(Double.NaN);
      complex2.I.toString();
      complex0.getField();
      complex1.pow(complex0);
      complex1.getImaginary();
      Complex complex8 = complex2.negate();
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex9.hashCode();
      complex4.toString();
      complex8.sqrt();
      Complex.valueOf(219.1, (-4604.0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.asin();
      complex0.INF.subtract(complex1);
      complex1.ONE.negate();
      complex1.INF.abs();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.add(Double.POSITIVE_INFINITY);
      complex3.ONE.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex4.NaN.cos();
      complex5.NaN.cos();
      Complex complex6 = complex4.ZERO.divide(complex1);
      complex6.INF.multiply(Double.NaN);
      complex2.I.toString();
      complex0.getField();
      complex1.pow(complex0);
      complex1.getImaginary();
      complex2.toString();
      complex6.sqrt();
      Complex.valueOf(-0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.423560333632085E-8, 3.423560333632085E-8);
      complex0.I.toString();
      complex0.NaN.abs();
      Complex complex1 = complex0.acos();
      complex1.isNaN();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.INF.conjugate();
      complex1.NaN.createComplex((-5233.223), (-5233.223));
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.divide(complex5);
      complex6.I.nthRoot(1);
      complex5.INF.conjugate();
      Complex complex7 = complex4.NaN.reciprocal();
      complex7.NaN.pow(complex4);
      complex6.pow(complex5);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex3.conjugate();
      complex4.toString();
      complex4.divide(complex3);
      Complex.valueOf(0.32199859619140625, (-788.9061273761));
      complex1.nthRoot(1);
      complex0.ZERO.atan();
      complex0.abs();
      Complex complex10 = complex9.pow(complex1);
      complex10.I.readResolve();
      complex1.negate();
      complex4.log();
      complex10.nthRoot(3604);
      complex4.multiply(0);
      complex8.getImaginary();
      complex1.createComplex(0, 1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      complex0.INF.abs();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex0.abs();
      Complex complex4 = complex1.subtract(1.0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ZERO.pow(complex4);
      complex5.INF.toString();
      complex6.nthRoot(1);
      complex0.I.createComplex(0.35334908962249756, Double.POSITIVE_INFINITY);
      complex3.isNaN();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.multiply((-0.9092974268256817));
      complex8.multiply((-1651));
      Complex complex9 = Complex.ZERO;
      complex9.subtract((-2951.852245203));
      complex9.readResolve();
      complex6.isNaN();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1603.922348769648));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.add((-1603.922348769648));
      complex3.pow(complex1);
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex1.I.add(0.0);
      complex1.multiply(292.0);
      Complex complex5 = complex0.add(292.0);
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex5.subtract(complex1);
      complex7.nthRoot(993);
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex0.ONE.multiply(complex3);
      complex6.multiply((-1076));
      Complex complex10 = complex8.sqrt();
      complex4.INF.subtract(complex9);
      complex8.cos();
      Complex complex11 = complex0.multiply((-1076));
      complex0.tanh();
      complex4.getReal();
      complex11.isNaN();
      complex8.ZERO.cosh();
      complex5.ONE.exp();
      complex7.createComplex(2.6474285478041252E281, 0.0);
      Complex complex12 = complex5.divide(complex10);
      try { 
        complex12.nthRoot((-2562));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,562
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.INF.pow(complex1);
      Complex complex2 = complex1.I.sin();
      complex2.ZERO.divide(complex1);
      Complex complex3 = complex1.I.divide(171.0);
      Complex complex4 = complex1.INF.divide(complex0);
      complex0.isNaN();
      complex3.ZERO.conjugate();
      complex4.ZERO.nthRoot(1);
      complex4.acos();
      complex1.readResolve();
      complex3.hashCode();
      complex4.createComplex(171.0, 212.67052403);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1570594692045927E-9));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.createComplex((-1.1570594692045927E-9), (-1022.5967724319871));
      Complex complex4 = complex3.exp();
      complex4.ZERO.getArgument();
      Complex complex5 = complex2.ONE.tan();
      complex5.ONE.getField();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.I.acos();
      complex7.NaN.nthRoot(37);
      complex1.readResolve();
      complex1.ZERO.sin();
      complex1.multiply(complex2);
      complex2.tan();
      Complex complex8 = Complex.valueOf((double) 37);
      complex8.ZERO.readResolve();
      complex7.tan();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.INF.subtract(complex1);
      complex1.ONE.negate();
      complex1.INF.abs();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex3.add(Double.POSITIVE_INFINITY);
      complex4.ONE.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex5.NaN.cos();
      complex6.NaN.cos();
      Complex complex7 = complex5.ZERO.divide(complex1);
      complex7.INF.multiply(Double.NaN);
      complex3.I.toString();
      complex0.getField();
      complex1.pow(complex0);
      complex1.getImaginary();
      complex0.negate();
      complex2.hashCode();
      complex5.toString();
      complex7.sqrt();
      Complex.valueOf(1035.74, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.add(2570.59323326);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ONE.divide(complex1);
      complex0.equals((Object) null);
      complex0.multiply(37);
      complex2.readResolve();
      complex3.acos();
      complex1.nthRoot(37);
      complex1.NaN.divide(1.7826926708221436);
      Complex complex4 = complex1.cos();
      complex0.abs();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.ONE.add(complex5);
      complex3.multiply(1);
      complex1.multiply(1.0);
      complex3.tanh();
      complex4.sqrt1z();
      complex5.getArgument();
      complex1.add((double) 37);
      complex6.reciprocal();
      Complex.valueOf((-3526.600202058), (-3526.600202058));
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1736.8644431539074);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      complex2.ZERO.multiply(1005);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(883.0);
      complex0.createComplex(883.0, (-1151.68301308339));
      complex0.INF.toString();
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(883.0);
      Complex complex2 = complex0.I.subtract(2198.326581291);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.sqrt1z();
      complex4.ONE.atan();
      complex3.I.pow(complex4);
      complex1.equals(complex3);
      complex3.atan();
      Complex complex5 = complex0.subtract(complex1);
      complex0.getReal();
      complex5.pow(883.0);
      Complex complex6 = complex1.sqrt1z();
      complex6.ONE.toString();
      complex1.acos();
      Complex complex7 = complex2.conjugate();
      complex7.pow(883.0);
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract((-1404.59));
      complex1.log();
      Complex.valueOf((-1404.59));
      complex0.INF.nthRoot(7);
      complex0.getArgument();
      complex1.sqrt1z();
      complex0.pow(complex1);
      complex1.add(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.3560888171195984;
      Complex complex1 = complex0.I.multiply(0.3560888171195984);
      complex1.ZERO.subtract(0.3560888171195984);
      Complex complex2 = complex0.exp();
      complex2.isNaN();
      complex0.ZERO.cos();
      Complex complex3 = null;
      try { 
        complex2.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply((-1.5821896727910552E-8));
      Complex complex2 = complex0.divide((-1.5821896727910552E-8));
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = Complex.valueOf((-655.8033520223687), 0.0);
      complex4.NaN.readResolve();
      complex2.I.sinh();
      Complex complex5 = complex3.NaN.divide(0.0);
      complex2.getArgument();
      complex0.pow((-1.5821896727910552E-8));
      Complex.valueOf(0.0);
      Complex complex6 = complex0.tan();
      complex6.NaN.sin();
      complex5.pow(0.0);
      complex1.multiply((-1424));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.atan();
      complex3.I.toString();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex3.ONE.sqrt();
      complex0.cosh();
      Complex complex6 = complex4.ZERO.multiply(0.0);
      Complex complex7 = complex5.ONE.atan();
      complex7.ZERO.atan();
      Complex complex8 = complex0.log();
      complex8.INF.sqrt();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex9.INF.cos();
      complex9.getField();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex7.subtract(0.0);
      complex12.cos();
      complex9.sin();
      complex4.getField();
      complex6.getImaginary();
      complex10.getArgument();
      complex0.reciprocal();
      complex5.asin();
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.423560333632085E-8, 3.423560333632085E-8);
      complex0.I.toString();
      complex0.NaN.abs();
      Complex complex1 = complex0.acos();
      complex1.isNaN();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.INF.conjugate();
      complex1.NaN.createComplex((-5233.223), (-5233.223));
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.divide(complex5);
      complex6.I.nthRoot(1);
      complex5.INF.conjugate();
      complex4.NaN.reciprocal();
      complex6.ZERO.createComplex(3.423560333632085E-8, 0.32199859619140625);
      complex6.pow(complex5);
      complex0.conjugate();
      Complex complex7 = complex3.conjugate();
      complex4.toString();
      complex4.divide(complex3);
      Complex.valueOf(0.32199859619140625, (-788.9061273761));
      complex1.nthRoot(1);
      complex0.ZERO.atan();
      complex0.abs();
      Complex complex8 = complex7.pow(complex1);
      complex8.I.readResolve();
      complex1.negate();
      complex4.log();
      complex8.nthRoot(3604);
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2388.686745145816));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.tan();
      complex3.INF.multiply((-2388.686745145816));
      complex1.abs();
      complex0.subtract(0.7615941559557649);
      Complex complex4 = complex3.cosh();
      complex4.tan();
      Complex complex5 = Complex.valueOf(0.0, 0.7615941559557649);
      complex5.INF.log();
      complex0.ZERO.subtract(0.0);
      complex0.pow((-2388.686745145816));
      complex0.sqrt();
      complex3.abs();
      try { 
        complex1.nthRoot((-3251));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,251
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt();
      complex0.ZERO.readResolve();
      complex1.ONE.negate();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex0.reciprocal();
      complex5.INF.negate();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex1.acos();
      complex7.multiply(complex5);
      complex4.divide(complex0);
      Complex complex8 = complex7.tan();
      complex8.INF.tan();
      Complex complex9 = complex5.conjugate();
      complex6.log();
      complex3.subtract(complex9);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      complex1.nthRoot(1);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.tanh();
      double double0 = (-617.0292907351201);
      Complex complex5 = complex4.INF.multiply((-617.0292907351201));
      try { 
        complex5.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.ONE.divide(0.5205078726367633);
      Complex complex4 = complex0.tanh();
      complex4.NaN.abs();
      Complex complex5 = complex2.sqrt();
      complex5.ZERO.exp();
      complex5.getField();
      complex5.ZERO.nthRoot(1);
      complex1.ONE.getArgument();
      Complex complex6 = complex0.ONE.sin();
      Complex complex7 = complex6.ZERO.sqrt();
      complex7.INF.getField();
      Complex.valueOf(Double.NaN, (double) 1);
      Complex complex8 = complex1.sin();
      complex8.ONE.multiply(2606);
      Complex complex9 = complex2.pow(Double.NaN);
      complex4.I.divide(complex9);
      Complex complex10 = complex9.sin();
      complex2.hashCode();
      complex3.ONE.multiply(complex10);
      Complex complex11 = complex4.pow(1455.0);
      complex11.ONE.getField();
      Complex complex12 = complex11.NaN.tan();
      complex4.toString();
      complex12.NaN.tan();
      Complex.valueOf(0.5205078726367633, 0.5205078726367633);
      complex12.getField();
      Complex complex13 = complex3.sqrt1z();
      Complex complex14 = complex10.add(complex12);
      complex2.sin();
      complex13.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-2308.4239684775857));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.createComplex((-960.0), (-3643.053));
      complex2.ZERO.pow((-2308.4239684775857));
      complex2.INF.tanh();
      Complex complex4 = complex1.INF.createComplex(1632.9915148, 1.0459461212158203);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.INF.pow(complex1);
      Complex complex7 = complex6.atan();
      complex7.add((-2308.4239684775857));
      complex0.pow((-2308.4239684775857));
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex8.multiply(557);
      Complex complex10 = Complex.valueOf(0.0);
      complex5.ONE.subtract(complex9);
      complex10.conjugate();
      complex9.sin();
      complex9.ONE.getArgument();
      complex9.INF.toString();
      complex9.I.pow(complex0);
      complex0.getArgument();
      Complex complex11 = complex0.sqrt();
      complex9.multiply(complex2);
      complex2.nthRoot(557);
      complex6.multiply((-960.0));
      Complex complex12 = complex11.multiply((-1));
      complex5.subtract(0.0);
      complex5.readResolve();
      complex12.isNaN();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(53.20814, 53.20814);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.NaN.createComplex(53.20814, 950.2185280446);
      complex1.INF.getArgument();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex4.I.negate();
      Complex complex7 = complex0.add(complex4);
      complex5.INF.reciprocal();
      Complex complex8 = complex0.ONE.multiply(complex5);
      complex8.ZERO.toString();
      complex0.NaN.hashCode();
      Complex complex9 = complex4.subtract(complex0);
      Complex complex10 = complex2.add(53.20814);
      Complex complex11 = complex0.subtract(53.20814);
      complex11.ONE.abs();
      complex7.multiply(complex6);
      complex4.asin();
      complex2.add(complex4);
      Complex.valueOf(53.20814, 0.7853981633974483);
      Complex complex12 = complex4.cosh();
      complex2.equals(complex10);
      Complex complex13 = complex9.atan();
      Complex complex14 = complex0.divide(complex1);
      complex14.subtract((-2521.7330362002));
      complex1.multiply(complex13);
      complex3.atan();
      Complex complex15 = complex1.reciprocal();
      complex15.NaN.getArgument();
      complex10.multiply(1);
      complex12.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      complex0.INF.abs();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex0.abs();
      Complex complex4 = complex1.subtract(1.0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ZERO.pow(complex4);
      complex5.INF.toString();
      complex6.nthRoot(1);
      complex0.I.createComplex(0.35334908962249756, Double.POSITIVE_INFINITY);
      complex3.isNaN();
      Complex complex7 = complex0.sinh();
      complex7.I.exp();
      complex6.exp();
      complex3.divide(5468.8324923202);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 996.84062;
      Complex complex1 = complex0.INF.multiply(996.84062);
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.I.sinh();
      double double1 = 1375.49;
      Complex complex3 = complex0.subtract(1375.49);
      try { 
        complex3.ONE.nthRoot((-1340));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,340
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex2.multiply((-1633));
      Complex complex5 = complex4.ONE.add(complex0);
      complex5.toString();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex5.ZERO.acos();
      complex7.readResolve();
      complex0.multiply(Double.NaN);
      complex4.INF.log();
      complex4.ONE.readResolve();
      complex0.getArgument();
      complex4.toString();
      complex2.multiply((-1633));
      Complex complex8 = complex0.asin();
      complex8.I.tanh();
      Complex complex9 = complex3.subtract(complex1);
      complex9.I.subtract(Double.NaN);
      Complex.valueOf(Double.NaN, 2043.619343);
      complex1.cos();
      complex7.divide(0.0);
      complex8.hashCode();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.pow(complex1);
      complex2.sin();
      Complex.valueOf((-20.0));
      complex2.toString();
      complex3.abs();
      complex1.I.acos();
      Complex complex4 = complex3.pow(complex1);
      complex4.multiply(0.0);
      Complex complex5 = complex3.exp();
      complex5.getReal();
      complex4.sinh();
      Complex.valueOf((-86.432));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(9.02268127425393E-232, 1693.929571);
      Complex complex1 = complex0.NaN.multiply((-1350.0355146));
      complex1.getField();
      Complex complex2 = complex0.ZERO.sqrt();
      complex2.ONE.toString();
      complex2.getArgument();
      Complex complex3 = complex0.subtract((-279.9185042593307));
      complex3.ZERO.abs();
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex0.asin();
      complex3.NaN.exp();
      complex0.atan();
      complex4.INF.hashCode();
      Complex.valueOf(20.0);
      Complex complex6 = Complex.valueOf(9.02268127425393E-232);
      complex6.I.toString();
      Complex complex7 = complex6.divide((-1350.0355146));
      Complex complex8 = complex7.ZERO.sqrt();
      complex2.isInfinite();
      complex4.toString();
      complex8.cos();
      Complex complex9 = Complex.valueOf(2226.882);
      complex9.I.multiply(complex1);
      complex5.isInfinite();
      complex8.createComplex(0.0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.INF.multiply(complex1);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.acos();
      complex0.ONE.toString();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.NaN.sinh();
      complex2.NaN.getArgument();
      Complex complex4 = complex0.asin();
      complex1.ZERO.pow(complex3);
      Complex complex5 = complex4.asin();
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex0.ZERO.asin();
      Complex complex9 = complex7.INF.multiply(1612);
      complex9.NaN.getField();
      Complex complex10 = complex9.I.pow(complex8);
      Complex.valueOf(Double.NaN, (-262.5088609));
      Complex complex11 = complex8.ONE.cos();
      complex11.NaN.asin();
      Complex.valueOf(1.0);
      complex8.ZERO.getField();
      complex10.I.sinh();
      complex3.hashCode();
      complex3.reciprocal();
      complex9.getImaginary();
      complex10.pow(complex6);
      Complex.valueOf((double) 1612);
      complex5.nthRoot(1612);
      Complex complex12 = Complex.valueOf((-262.5088609));
      complex10.divide(complex12);
      Complex complex13 = complex3.cos();
      complex13.I.createComplex(Double.POSITIVE_INFINITY, (-262.5088609));
      complex13.ONE.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex0.subtract((-262.5088609));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1872.8200717457833), (-1872.8200717457833));
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.I.getField();
      Complex complex3 = complex2.I.subtract((-1872.8200717457833));
      Complex complex4 = complex2.ONE.divide(complex0);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex5.conjugate();
      complex7.NaN.hashCode();
      Complex complex8 = complex6.multiply(1165);
      Complex complex9 = complex8.ONE.multiply((-1872.8200717457833));
      complex9.ZERO.add(complex5);
      complex1.divide((-20.0));
      complex8.INF.readResolve();
      Complex complex10 = complex8.divide(complex4);
      Complex complex11 = complex10.log();
      complex11.I.exp();
      complex1.ZERO.divide(0.0);
      complex10.NaN.getArgument();
      complex1.divide((double) 1165);
      Complex complex12 = complex2.pow((double) 1165);
      complex12.NaN.multiply(434);
      Complex complex13 = complex6.conjugate();
      Complex complex14 = complex13.cos();
      complex10.isInfinite();
      complex12.asin();
      complex13.tan();
      complex14.isNaN();
      complex8.pow(complex3);
      complex4.divide((double) 434);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      double double0 = (-1833.8370101696);
      Complex complex0 = Complex.valueOf((-1833.8370101696));
      Complex complex1 = Complex.ZERO;
      try { 
        complex0.INF.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(68.5614);
      Complex complex1 = Complex.valueOf((-1.0), 68.5614);
      Complex complex2 = complex1.ONE.add((-1.0));
      Complex complex3 = Complex.valueOf(68.5614);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.NaN.acos();
      complex2.ONE.sin();
      complex2.ONE.pow(complex0);
      complex0.conjugate();
      complex2.multiply((-305));
      complex1.add(1053.0292153631);
      complex5.add(complex1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.negate();
      complex2.ZERO.reciprocal();
      complex1.ONE.atan();
      complex2.NaN.negate();
      Complex complex3 = complex1.add((-3481.2102140874));
      int int0 = 0;
      try { 
        complex3.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.log();
      Complex complex1 = complex0.NaN.acos();
      complex1.I.nthRoot(1);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.add(0.0);
      complex4.I.multiply(0.0);
      complex0.INF.acos();
      Complex.valueOf(0.0, 6.283185307179586);
      Complex.valueOf(1.977118730545044, 1.977118730545044);
      complex3.reciprocal();
      complex2.log();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.ONE.negate();
      complex2.cosh();
      Complex complex3 = Complex.valueOf(2672.341608936773, 2672.341608936773);
      complex1.ONE.subtract(complex3);
      complex2.NaN.abs();
      Complex complex4 = complex2.I.createComplex(2672.341608936773, 2638.633322);
      complex2.ONE.hashCode();
      Complex complex5 = complex4.ONE.tan();
      complex4.NaN.toString();
      complex0.INF.hashCode();
      Complex complex6 = complex0.I.subtract(2672.341608936773);
      complex6.I.toString();
      Complex complex7 = complex0.I.negate();
      complex0.nthRoot(1);
      Complex.valueOf((double) 1, 2.095732474644446E-309);
      complex6.isNaN();
      complex2.createComplex(0.0, 0.0);
      Complex complex8 = complex1.sin();
      complex8.INF.cos();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex0.NaN.multiply(complex7);
      complex10.NaN.toString();
      complex6.I.sinh();
      complex5.readResolve();
      complex6.exp();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(204.18629409);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.log();
      complex0.INF.getArgument();
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex1.pow(866.49);
      complex0.multiply(complex1);
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = Complex.valueOf(0.0, 204.18629409);
      Complex complex7 = complex4.ONE.log();
      Complex complex8 = complex1.divide(complex5);
      String string0 = complex4.toString();
      assertEquals("(-Infinity, -Infinity)", string0);
      
      Complex complex9 = complex2.tan();
      double double0 = complex4.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex10 = complex5.ZERO.subtract(complex9);
      double double1 = complex6.getArgument();
      assertEquals(1.5707963267948966, double1, 0.01);
      
      Complex complex11 = complex3.multiply(complex0);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex12 = complex8.multiply(complex7);
      assertTrue(complex12.equals((Object)complex11));
      
      Complex complex13 = complex7.subtract(2318.279);
      complex10.subtract(complex5);
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex13.add(complex14);
      assertTrue(complex15.equals((Object)complex13));
      
      Complex complex16 = complex5.divide(complex9);
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      
      Complex complex17 = complex5.add(0.7853981633974483);
      assertTrue(complex17.isInfinite());
      assertEquals(204.1838453311328, complex1.getImaginary(), 0.01);
      
      Complex complex18 = complex0.subtract((-536.952787));
      assertEquals(741.13908109, complex18.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4152.39563), (-4152.39563));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = (Complex)complex2.ZERO.readResolve();
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex4.ONE.divide(complex0);
      Complex complex6 = complex5.NaN.divide(0.0);
      assertSame(complex6, complex2);
      
      complex5.NaN.getArgument();
      assertEquals(1.1752011936438014, complex4.getReal(), 0.01);
      assertEquals((-1.2041241840917745E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex7 = complex0.sqrt1z();
      assertEquals((-4152.395569793791), complex7.getImaginary(), 0.01);
      assertEquals(4152.39569020621, complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.subtract(3993.676);
      assertEquals((-8146.07163), complex8.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.INF.add(0.0);
      complex3.ZERO.cos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.ZERO.atan();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      complex4.getArgument();
      assertTrue(complex4.equals((Object)complex6));
      
      Complex complex7 = complex1.add(complex3);
      assertEquals(0.7071067811865475, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }
}
