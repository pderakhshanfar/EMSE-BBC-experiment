/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:46:45 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-13.353497));
      Complex complex2 = complex0.negate();
      complex1.nthRoot(1286);
      complex1.readResolve();
      Complex complex3 = Complex.INF;
      complex0.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
      complex1.multiply(complex3);
      Complex complex4 = complex2.cosh();
      complex2.atan();
      complex4.isNaN();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-13.353497));
      Complex complex2 = complex0.multiply(complex1);
      complex1.INF.sin();
      complex1.pow((-13.353497));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-13.353497), (-13.353497));
      complex1.divide(complex0);
      Complex complex2 = Complex.valueOf((-1812.2934), 20.0);
      Complex complex3 = Complex.valueOf((-20.0));
      complex3.hashCode();
      Complex complex4 = Complex.I;
      Complex.valueOf((-20.0));
      complex1.log();
      Complex complex5 = Complex.valueOf(2.586214542388916);
      complex5.divide(complex4);
      Complex.valueOf((-20.0));
      Complex complex6 = new Complex((-1812.2934), (-1.0));
      complex6.nthRoot(588);
      Complex complex7 = complex5.sqrt1z();
      complex6.tan();
      Complex.valueOf((-20.0));
      complex2.tan();
      complex5.tanh();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.092753117288608E212, 427.62662);
      Complex complex1 = complex0.log();
      complex1.ONE.tan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.sqrt1z();
      complex0.multiply(complex3);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.log();
      complex0.NaN.tanh();
      Complex complex1 = Complex.ZERO;
      complex1.NaN.divide((-2735.0));
      complex0.sqrt1z();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(1.4198782892306878E-112, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.divide(0.05417001247406006);
      Complex complex2 = complex1.INF.exp();
      complex2.ZERO.subtract(complex1);
      Complex.valueOf(1481.833572685, 0.05417001247406006);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.cosh();
      complex0.I.nthRoot(3350);
      complex4.ONE.atan();
      try { 
        complex0.nthRoot((-777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -777
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 3373;
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.tanh();
      Complex.valueOf((-20.0), (-1312.42366907));
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      complex2.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.092753117288608E212, 427.62662);
      Complex complex1 = complex0.log();
      complex0.acos();
      complex1.sqrt();
      // Undeclared exception!
      complex0.nthRoot(2045225392);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      complex2.multiply((-2657.4705490190145));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.log();
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.createComplex(30.78, 6.283185307179586);
      Complex complex2 = complex0.tan();
      int int0 = 4967;
      Complex complex3 = complex0.multiply(6.283185307179586);
      complex1.nthRoot(4967);
      complex2.multiply(complex1);
      Complex complex4 = complex3.pow(6.283185307179586);
      Complex complex5 = complex4.acos();
      // Undeclared exception!
      complex5.ONE.nthRoot(4967);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(575);
      complex0.abs();
      Complex complex2 = complex1.reciprocal();
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.hashCode();
      Complex complex1 = Complex.valueOf(20.0, 1975.794180591);
      Complex complex2 = complex1.acos();
      Complex.valueOf(20.0, 1975.794180591);
      complex2.sqrt();
      Complex complex3 = Complex.valueOf((-4316.4892553268855));
      Complex complex4 = complex3.tan();
      complex0.subtract(Double.NaN);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(2981.880997871858, 1.0);
      complex0.NaN.asin();
      Complex complex1 = complex0.NaN.createComplex(3569.94807693508, 5.478173702502056E-119);
      complex1.divide(complex0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(2981.880997871858, 2981.880997871858);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex1.acos();
      complex5.NaN.asin();
      complex3.I.nthRoot(2175);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.subtract(complex2);
      complex3.nthRoot(1042);
      complex4.ONE.cos();
      complex6.pow(complex2);
      complex5.sqrt();
      complex8.ZERO.cos();
      Complex complex9 = complex8.log();
      complex9.tanh();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 2.414213562373095;
      double double1 = 3306.13;
      Complex complex0 = new Complex(2.414213562373095, 3306.13);
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract((-2112.27911576586));
      complex2.NaN.multiply((-2146677819));
      complex2.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      complex2.log();
      complex2.log();
      Complex.valueOf(452.264764633);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.divide(complex0);
      complex3.log();
      Complex.valueOf(452.264764633);
      complex4.log();
      complex1.reciprocal();
      complex4.exp();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.sqrt1z();
      Complex complex1 = Complex.valueOf((-1612.49938467289), (-1612.49938467289));
      complex1.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(20.0, 20.0);
      Complex complex2 = complex1.multiply(complex0);
      complex2.divide(1.3197894864835201E-120);
      Complex complex3 = complex1.sinh();
      complex0.ZERO.multiply((-1073741824));
      Complex complex4 = complex3.I.log();
      complex3.NaN.conjugate();
      Complex complex5 = complex4.multiply(706.1817);
      complex3.asin();
      complex5.INF.cos();
      Complex complex6 = complex0.pow(complex5);
      complex1.sinh();
      complex6.ZERO.tanh();
      complex6.reciprocal();
      complex4.equals("");
      complex4.acos();
      complex1.toString();
      complex3.nthRoot(758);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0644943714141846);
      Complex.valueOf(1.0644943714141846, (double) 1);
      Complex complex1 = Complex.valueOf(1.0644943714141846, (double) 1);
      Complex complex2 = Complex.valueOf(1.0644943714141846, (double) 1);
      complex2.log();
      complex1.log();
      Complex.valueOf(Double.NaN);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = new Complex((-1.3839477920475328E-8), Double.NaN);
      Complex complex5 = complex0.divide(complex4);
      complex1.log();
      Complex.valueOf((-1.0));
      complex5.sqrt1z();
      complex4.subtract((-3609.03532831));
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.INF;
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2408.00789), Double.NaN);
      Complex complex1 = complex0.asin();
      complex0.sin();
      Complex complex2 = new Complex((-8.571477929711754E-270));
      complex2.cosh();
      complex1.subtract(20.0);
      Complex complex3 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.586214542388916, 2.586214542388916);
      Complex complex1 = complex0.log();
      complex1.cosh();
      Complex complex2 = complex0.log();
      complex2.multiply(9.255930399376666E-5);
      Complex complex3 = Complex.valueOf(452.264764633);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.divide(complex4);
      Complex.valueOf((-1.0));
      Complex complex6 = Complex.valueOf(2.03391170501709, 524.2186);
      Complex.valueOf(326.889990744);
      Complex complex7 = complex6.tanh();
      complex7.tanh();
      complex5.multiply(359);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      complex1.INF.negate();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.cosh();
      complex1.I.getArgument();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.INF.divide(complex2);
      complex0.conjugate();
      complex2.acos();
      Complex complex4 = Complex.valueOf(3.2940421731384895E-113, 4409.25690216);
      complex4.I.toString();
      complex0.pow(complex4);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.sin();
      complex3.INF.add((-1.9922647370144735));
      Complex complex4 = new Complex((-1.9922647370144735));
      complex2.cosh();
      complex3.log();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.sqrt();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(427.62662, (-2683.93774689));
      Complex complex1 = Complex.valueOf(5.092753117288608E212, 427.62662);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(2.586214542388916, 2.586214542388916);
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.log();
      Complex complex6 = Complex.valueOf(452.264764633);
      Complex complex7 = Complex.ZERO;
      complex6.divide(complex7);
      complex2.log();
      Complex.valueOf((-1.0));
      complex1.sqrt1z();
      complex1.subtract(0.6900914120361634);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex5.negate();
      complex9.reciprocal();
      complex4.sqrt();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1.6611075762612901);
      complex0.readResolve();
      complex0.nthRoot(390);
      Complex complex1 = complex0.ZERO.multiply(390);
      Complex complex2 = complex1.ONE.add(complex0);
      complex1.INF.getArgument();
      Complex.valueOf((double) 390);
      Complex complex3 = Complex.valueOf((double) 390);
      complex3.INF.sqrt1z();
      Complex complex4 = complex0.createComplex(390, 2822.7);
      Complex complex5 = complex0.multiply((double) 390);
      complex5.INF.toString();
      complex5.cos();
      complex0.atan();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.ZERO;
      complex6.I.subtract(complex7);
      complex6.ZERO.tan();
      Complex complex8 = Complex.valueOf(0.0, 2822.7);
      Complex complex9 = complex2.asin();
      Complex complex10 = complex4.multiply(0);
      complex10.I.getField();
      complex9.ONE.sinh();
      Complex complex11 = complex10.I.subtract(3.0);
      Complex complex12 = complex11.NaN.add(complex8);
      try { 
        complex12.INF.nthRoot((-2045222522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,522
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2683.93774689));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.createComplex(2.356194490192345, 1035.578830159);
      complex2.readResolve();
      Complex complex3 = complex2.createComplex((-3.2988275966721426E-4), (-4732.20130197892));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.add(1035.578830159);
      complex5.hashCode();
      Complex complex6 = complex5.asin();
      complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.multiply(37);
      Complex complex8 = complex4.divide((-4732.20130197892));
      complex6.sqrt1z();
      Complex complex9 = complex8.pow(Double.POSITIVE_INFINITY);
      complex3.toString();
      Complex complex10 = Complex.INF;
      complex10.cos();
      complex6.I.acos();
      complex9.multiply(complex5);
      complex0.getArgument();
      complex7.equals(complex3);
      complex6.add(1.0);
      try { 
        complex5.nthRoot((-36));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -36
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1.7188958587407816E-8), (-1.8981247089866317E-7));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.log();
      complex1.divide(complex2);
      complex4.log();
      Complex complex5 = Complex.valueOf(1508.0198003499158);
      Complex.valueOf((-1.7188958587407816E-8), 1508.0198003499158);
      Complex.valueOf((-1.129242035557684E-7));
      complex2.pow(complex4);
      complex5.abs();
      complex5.tanh();
      complex4.tanh();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(522.1165);
      Complex complex1 = complex0.INF.cosh();
      complex1.abs();
      Complex complex2 = Complex.valueOf(2.3805896467049493E-39, 522.1165);
      complex2.readResolve();
      Complex complex3 = complex1.subtract(522.1165);
      Complex complex4 = complex0.multiply(complex3);
      complex0.reciprocal();
      complex3.multiply(complex1);
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.ZERO;
      complex4.equals(complex6);
      complex5.getImaginary();
      complex5.add(Double.NaN);
      complex6.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1515.69), (-4660.1592));
      complex0.I.divide(complex1);
      Complex complex2 = complex0.log();
      complex2.NaN.log();
      complex2.divide(complex0);
      complex0.ONE.log();
      Complex.valueOf((-4660.1592));
      Complex complex3 = Complex.valueOf(524.2186, 524.2186);
      Complex complex4 = Complex.valueOf(1993.6812442);
      Complex complex5 = complex4.pow(complex3);
      complex4.abs();
      complex4.pow((-979.0));
      Complex complex6 = Complex.I;
      complex6.conjugate();
      Complex complex7 = new Complex(2001.5722434490597);
      Complex complex8 = complex7.exp();
      complex5.multiply((-1));
      complex8.isInfinite();
      Complex.valueOf(1.7012104536759924, (-4660.1592));
      Complex complex9 = Complex.ZERO;
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(522.1165);
      Complex complex1 = complex0.atan();
      complex1.getArgument();
      Complex complex2 = complex1.conjugate();
      complex1.abs();
      Complex complex3 = complex1.sin();
      complex1.getReal();
      complex2.cosh();
      complex0.getArgument();
      complex0.exp();
      Complex complex4 = complex1.cos();
      Complex complex5 = Complex.I;
      complex5.cosh();
      Complex complex6 = Complex.I;
      complex6.getReal();
      complex5.sqrt1z();
      complex4.asin();
      complex2.getArgument();
      complex0.pow(complex5);
      complex2.divide(753.152273812);
      Complex complex7 = Complex.INF;
      complex7.getField();
      Complex complex8 = complex5.subtract(complex3);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0644943714141846);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = Complex.valueOf((double) 1, 2.0);
      complex0.NaN.nthRoot(1);
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.add((-1660.29528681));
      Complex complex5 = new Complex(Double.NaN, (-3636.6118728810566));
      complex5.tanh();
      Complex complex6 = complex1.sinh();
      complex6.getImaginary();
      Complex.valueOf(1.0);
      complex6.atan();
      Complex complex7 = complex4.sin();
      complex7.acos();
      Complex complex8 = Complex.ZERO;
      complex8.sinh();
      complex2.hashCode();
      complex0.hashCode();
      complex3.subtract(complex5);
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ZERO.multiply(complex0);
      complex2.divide(0.0);
      Complex complex5 = complex3.acos();
      Complex complex6 = Complex.I;
      complex0.pow(complex6);
      complex5.sqrt1z();
      complex4.abs();
      Complex complex7 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf(2963923.94937674, Double.POSITIVE_INFINITY);
      complex8.readResolve();
      complex5.subtract(0.0);
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex9.multiply(complex5);
      Complex complex11 = complex9.reciprocal();
      complex0.multiply(complex11);
      complex11.pow(complex10);
      Complex complex12 = new Complex(0.0);
      complex12.equals(complex11);
      Complex complex13 = Complex.INF;
      complex6.equals(complex7);
      complex1.getImaginary();
      Complex complex14 = Complex.valueOf(1497.6654227960628);
      complex14.add((-717.2));
      Complex complex15 = Complex.valueOf(2616.672729008503, (-717.2));
      complex15.multiply(878.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.ONE.sin();
      complex2.ONE.sin();
      complex2.readResolve();
      Complex complex3 = complex1.createComplex(Double.NaN, (-684.400253554209));
      complex0.add(12.463071719321034);
      complex0.hashCode();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.divide(Double.POSITIVE_INFINITY);
      complex5.INF.createComplex((-684.400253554209), (-684.400253554209));
      Complex complex6 = complex1.multiply(1252);
      complex4.divide(12.463071719321034);
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, (-2867.92491468));
      Complex complex9 = complex8.pow(2.5526681615684215E63);
      complex3.exp();
      complex3.toString();
      complex6.cos();
      Complex complex10 = complex9.multiply(complex2);
      complex7.add(complex2);
      complex10.sqrt();
      complex6.sqrt();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1515.69), (-4660.1592));
      complex0.I.divide(complex1);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.NaN;
      complex0.divide(complex4);
      Complex complex5 = complex1.log();
      Complex.valueOf((-2963923.94937674));
      Complex complex6 = Complex.valueOf(524.2186, (-4660.1592));
      Complex complex7 = Complex.valueOf((-1515.69));
      complex3.pow(complex7);
      complex5.abs();
      Complex complex8 = complex2.pow((-1515.69));
      Complex complex9 = complex8.conjugate();
      Complex complex10 = Complex.valueOf((-2988.5), 8.7037100448114);
      complex10.exp();
      complex6.multiply((-1));
      Complex complex11 = Complex.INF;
      complex11.isInfinite();
      Complex.valueOf((-4660.1592), (-1515.69));
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1515.69), (-4660.1592));
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.INF;
      complex3.log();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex4.log();
      complex5.ZERO.readResolve();
      Complex.valueOf((-4660.1592));
      Complex complex6 = Complex.valueOf((-1048.23797307), (-1048.23797307));
      Complex complex7 = Complex.valueOf(524.2186);
      complex0.pow(complex6);
      complex7.abs();
      Complex complex8 = complex4.pow(524.2186);
      complex3.exp();
      Complex complex9 = complex1.multiply(4912);
      complex8.isInfinite();
      complex9.getArgument();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1.7188958587407816E-8), (-1.8981247089866317E-7));
      Complex complex1 = Complex.valueOf((-1.8981247089866317E-7));
      complex1.ZERO.asin();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.log();
      complex2.pow(606.795);
      complex2.conjugate();
      complex3.exp();
      Complex complex4 = Complex.ONE;
      complex4.multiply((-1));
      Complex complex5 = new Complex(4193.8767, (-1.7188958587407816E-8));
      complex5.isInfinite();
      Complex complex6 = Complex.valueOf((-3166.0), 861.652487);
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals(complex0);
      complex0.createComplex(232.7246734, 232.7246734);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1176.4), 330.4944648);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.tanh();
      complex1.INF.acos();
      Complex complex3 = complex1.NaN.add(complex2);
      complex1.multiply(1149.11);
      complex0.I.add(complex1);
      Complex complex4 = complex0.add((-765.08));
      Complex complex5 = Complex.valueOf(2044.0181, 2.4318976402282715);
      Complex complex6 = complex1.sinh();
      complex6.INF.getArgument();
      complex4.acos();
      complex1.subtract(complex5);
      complex4.abs();
      complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1721.6053407726);
      Complex complex1 = complex0.ZERO.sin();
      complex1.createComplex(1721.6053407726, 2.739090595934893E-119);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex0.tan();
      complex3.ZERO.sin();
      complex4.subtract(complex0);
      complex4.negate();
      Complex complex5 = complex1.sqrt1z();
      complex5.atan();
      complex1.subtract(2.739090595934893E-119);
      complex3.getField();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add((-1.7188958587407816E-8));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.add(0.0);
      complex3.nthRoot(2189);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.negate();
      Complex complex5 = complex0.reciprocal();
      complex0.atan();
      Complex complex6 = complex1.multiply(0.0);
      complex6.ZERO.negate();
      Complex complex7 = new Complex(0.0, 2189);
      complex0.pow((-1927.822346668571));
      complex0.nthRoot(1233);
      complex4.subtract(0.0);
      complex0.getReal();
      Complex.valueOf(Double.NaN);
      complex7.divide(complex5);
      try { 
        complex0.nthRoot((-1130));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,130
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = (-2683.93774689);
      Complex complex0 = new Complex(427.62662, (-2683.93774689));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.createComplex(2597.354377, (-3677.0));
      complex2.readResolve();
      Complex complex3 = complex1.createComplex(5367.875675461376, 427.62662);
      Complex complex4 = complex1.add(5.3169565639);
      complex0.hashCode();
      complex3.asin();
      Complex complex5 = complex2.divide(1.9405686632132564E-4);
      complex5.multiply(37);
      Complex complex6 = complex2.divide((-867.6797857065069));
      complex6.sqrt1z();
      complex6.pow(1064.357564);
      complex4.toString();
      complex5.cos();
      complex6.multiply(complex5);
      Object object0 = new Object();
      complex4.equals(object0);
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(427.62662, (-2683.93774689));
      complex0.I.asin();
      Complex complex1 = new Complex((-706.0), 896.781912216673);
      Complex complex2 = complex1.createComplex(896.781912216673, 427.62662);
      complex2.readResolve();
      complex1.createComplex(427.62662, (-1431.02));
      complex0.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.divide(896.781912216673);
      Complex complex5 = complex0.multiply(37);
      complex3.divide(140.8196);
      complex5.sqrt1z();
      complex4.pow((-2683.93774689));
      complex0.toString();
      Complex complex6 = Complex.INF;
      complex6.cos();
      Complex complex7 = complex6.multiply(complex4);
      complex1.equals(complex6);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, (-2683.93774689));
      Complex complex9 = complex8.add(complex0);
      complex7.sqrt();
      complex9.sqrt();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.I.asin();
      Complex complex2 = complex1.sin();
      complex1.ZERO.atan();
      complex2.ZERO.getArgument();
      complex2.NaN.conjugate();
      complex2.ONE.abs();
      Complex complex3 = complex0.sin();
      complex3.getReal();
      Complex complex4 = complex1.cosh();
      complex4.I.getArgument();
      Complex complex5 = complex1.exp();
      complex5.NaN.cos();
      complex3.cosh();
      complex2.getReal();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.ONE.asin();
      // Undeclared exception!
      complex7.nthRoot(2142839439);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1515.69), (-4660.1592));
      Complex complex2 = complex0.I.divide(complex1);
      complex1.readResolve();
      Complex complex3 = complex2.createComplex((-102.0936), 1064.357564);
      Complex complex4 = complex3.add((-102.0936));
      complex3.hashCode();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex1.divide(3324.2177);
      complex0.multiply((-2214));
      Complex complex7 = complex6.divide((-102.0936));
      Complex complex8 = complex7.sqrt1z();
      complex4.pow(3324.2177);
      complex0.toString();
      complex0.cos();
      complex5.multiply(complex7);
      complex7.equals(complex8);
      Complex complex9 = Complex.NaN;
      complex1.add(complex9);
      Complex complex10 = complex7.sqrt();
      complex10.sqrt();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(427.62662, (-2683.93774689));
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.createComplex(427.62662, 427.62662);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.log();
      complex6.divide(complex2);
      complex3.log();
      Complex.valueOf((-2683.93774689));
      Complex.valueOf((-2683.93774689), 427.62662);
      Complex complex7 = Complex.valueOf(7300722.847625497);
      Complex complex8 = complex2.pow(complex0);
      complex5.abs();
      complex5.pow((-2020.321341));
      complex4.conjugate();
      complex7.exp();
      Complex complex9 = complex0.multiply((-7));
      complex9.isInfinite();
      complex6.divide(complex1);
      Complex complex10 = Complex.valueOf(6.311588061510217E-5);
      complex10.add(complex2);
      complex9.multiply(complex8);
      Complex complex11 = Complex.INF;
      complex10.multiply(complex11);
      complex1.isInfinite();
      Complex complex12 = Complex.INF;
      complex12.abs();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(427.62662, (-2683.93774689));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.multiply(complex2);
      complex3.log();
      Complex complex4 = complex0.add(1126.89297);
      complex1.tanh();
      Complex complex5 = complex1.sinh();
      complex0.getImaginary();
      Complex.valueOf((-0.8414709848078965));
      complex1.atan();
      complex5.sin();
      Complex complex6 = complex0.acos();
      complex6.sinh();
      Complex complex7 = Complex.ZERO;
      complex7.hashCode();
      complex6.hashCode();
      complex0.subtract(complex7);
      complex4.multiply(7);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.divide(20.0);
      complex1.negate();
      complex4.readResolve();
      complex5.equals("H:Sf9{nfEr+|");
      complex4.multiply(complex0);
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex5.atan();
      complex5.isNaN();
      complex6.reciprocal();
      complex2.log();
      complex7.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.ZERO.atan();
      complex3.ZERO.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf(524.2186, 0.0);
      Complex.valueOf(0.0);
      Complex complex7 = complex5.pow(complex6);
      complex3.abs();
      complex7.pow((-88.3524331673012));
      complex5.INF.multiply(326.59949);
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex4.exp();
      complex2.isInfinite();
      complex8.divide(complex9);
      complex0.add(complex2);
      Complex complex10 = complex2.multiply(complex7);
      complex10.isInfinite();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1515.69), (-4660.1592));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex3.divide(complex0);
      complex3.conjugate();
      complex2.abs();
      complex1.sin();
      complex1.getReal();
      complex2.cosh();
      complex1.ZERO.atan();
      complex2.getArgument();
      complex0.cos();
      complex3.cosh();
      complex1.getReal();
      complex5.sqrt1z();
      Complex complex6 = Complex.NaN;
      complex6.asin();
      complex1.getArgument();
      Complex complex7 = Complex.NaN;
      complex7.pow(complex6);
      Complex complex8 = complex0.divide((-4660.1592));
      complex5.getField();
      complex8.subtract(complex0);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ZERO.multiply(complex0);
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.add(1126.89297);
      Complex complex7 = complex5.tanh();
      complex1.sinh();
      complex5.getArgument();
      Complex complex8 = complex7.exp();
      Complex complex9 = new Complex((-3.141592653589793), (-3.141592653589793));
      Complex complex10 = complex9.cos();
      Complex complex11 = complex2.cosh();
      complex10.getReal();
      Complex complex12 = complex8.sqrt1z();
      complex12.asin();
      complex3.getArgument();
      complex4.pow(complex11);
      Complex complex13 = complex3.divide(0.0);
      complex12.getField();
      complex6.subtract(complex13);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.sin();
      complex1.ZERO.atan();
      complex3.ZERO.getArgument();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.sin();
      complex5.getReal();
      Complex complex6 = complex1.cosh();
      Complex complex7 = new Complex(0.0);
      complex7.INF.nthRoot(1);
      complex7.getImaginary();
      Complex complex8 = Complex.valueOf(0.0);
      complex6.ONE.subtract(complex4);
      Complex complex9 = complex5.atan();
      Complex complex10 = complex9.sin();
      complex10.I.sqrt1z();
      Complex complex11 = complex3.acos();
      complex5.sinh();
      complex6.hashCode();
      complex3.hashCode();
      complex11.subtract(complex8);
      complex2.multiply((-1894));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0644943714141846);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = Complex.valueOf((double) 1, 2.0);
      complex0.NaN.nthRoot(1);
      Complex complex3 = complex0.divide(1.0644943714141846);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.I.pow(complex3);
      Complex complex6 = complex5.NaN.sqrt1z();
      complex0.ZERO.sqrt1z();
      complex3.abs();
      Complex complex7 = Complex.valueOf(1.0, 2.0);
      Complex complex8 = complex4.subtract(1.0);
      complex8.sqrt1z();
      complex1.multiply(complex8);
      Complex complex9 = complex2.reciprocal();
      complex8.sin();
      complex9.multiply(complex7);
      complex0.equals(complex8);
      Complex complex10 = complex3.pow(0.0016082609806256033);
      complex4.equals(complex9);
      complex6.getImaginary();
      complex10.add(Double.NaN);
      complex5.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0644943714141846);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = Complex.valueOf((double) 1, 2.0);
      complex0.NaN.nthRoot(1);
      Complex complex3 = complex0.divide(1.0644943714141846);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.I.pow(complex3);
      Complex complex6 = complex5.NaN.sqrt1z();
      complex3.abs();
      Complex complex7 = Complex.valueOf(1.0, 2.0);
      complex2.readResolve();
      complex4.subtract(3954.16);
      Complex complex8 = complex4.sqrt1z();
      complex2.multiply(complex6);
      Complex complex9 = complex1.reciprocal();
      complex9.I.negate();
      Complex complex10 = complex1.multiply(complex9);
      complex5.equals(complex10);
      complex0.pow(1.0);
      complex8.equals("");
      complex7.getImaginary();
      complex3.add(131.8210528469);
      Complex complex11 = Complex.valueOf(0.0);
      complex11.multiply((-281.868751744516));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.ZERO.atan();
      complex3.ZERO.getArgument();
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = complex5.log();
      complex2.add(0.0);
      complex4.ZERO.tanh();
      Complex complex7 = complex4.tanh();
      complex5.sinh();
      complex4.getImaginary();
      Complex.valueOf(0.0);
      Complex complex8 = complex7.atan();
      Complex complex9 = Complex.valueOf(0.0, 5.6449830153121034);
      complex9.sin();
      complex2.acos();
      Complex complex10 = complex6.sinh();
      complex8.hashCode();
      complex1.hashCode();
      complex7.subtract(complex10);
      Complex complex11 = complex3.multiply((-252335669));
      complex11.tan();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2125.0), (-3038.3634234903047));
      Complex complex1 = complex0.NaN.sin();
      complex1.pow(complex0);
      Complex complex2 = complex0.INF.add((-3038.3634234903047));
      Complex complex3 = complex2.asin();
      complex0.getField();
      complex0.divide((-2125.0));
      complex3.abs();
      complex0.equals(complex2);
      Complex complex4 = complex2.log();
      complex4.exp();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(282.868751744516);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.subtract((-985.5499141653477));
      Complex complex4 = complex3.INF.sqrt1z();
      complex1.ONE.subtract(complex2);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.NaN.exp();
      complex6.INF.divide(0.0);
      Complex complex7 = complex0.ONE.subtract(282.868751744516);
      Complex complex8 = complex1.cos();
      complex8.ZERO.sinh();
      complex0.pow((-1.0));
      complex1.getImaginary();
      Complex complex9 = complex5.log();
      complex8.getField();
      complex1.I.createComplex(282.868751744516, 2.2077903747558594);
      Complex complex10 = complex9.createComplex(2.2077903747558594, 0.0);
      complex10.ZERO.nthRoot(3990);
      complex9.sqrt();
      complex8.getReal();
      complex0.readResolve();
      complex0.reciprocal();
      complex7.log();
      complex2.conjugate();
      complex2.exp();
      complex9.readResolve();
      Complex complex11 = complex4.multiply(1);
      complex11.I.sqrt();
      complex11.hashCode();
      complex6.hashCode();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.readResolve();
      complex0.I.toString();
      Complex complex1 = complex0.tan();
      complex1.INF.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.acos();
      complex3.NaN.nthRoot(2907);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.I;
      complex4.ZERO.multiply(complex5);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.I.tan();
      complex7.ZERO.nthRoot(2907);
      complex3.multiply(2907);
      Complex complex8 = complex6.negate();
      complex8.I.tanh();
      complex4.pow(complex6);
      complex4.conjugate();
      complex1.isInfinite();
      Complex complex9 = complex0.tanh();
      complex4.isInfinite();
      complex3.pow(complex9);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.conjugate();
      complex0.tan();
      Complex complex4 = complex1.acos();
      complex1.nthRoot(328);
      Complex complex5 = complex4.multiply(complex0);
      complex5.NaN.asin();
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.INF.multiply(complex7);
      Complex complex9 = Complex.valueOf((double) 328);
      Object object0 = new Object();
      complex3.equals(object0);
      complex6.atan();
      complex9.divide(2257.6677717219227);
      Complex complex10 = complex8.tanh();
      complex10.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-2132.33), (-2132.33));
      Complex complex1 = complex0.tanh();
      complex0.readResolve();
      complex1.hashCode();
      complex1.I.multiply(complex0);
      complex0.reciprocal();
      Complex complex2 = complex1.reciprocal();
      complex2.abs();
      complex0.nthRoot(1687);
      Complex complex3 = complex1.sqrt1z();
      complex3.ONE.tanh();
      complex3.INF.divide(0.0);
      complex3.ONE.divide(complex0);
      Complex complex4 = complex3.reciprocal();
      Complex.valueOf((-2132.33));
      Complex complex5 = complex4.NaN.add(1.0);
      Complex complex6 = complex1.divide(1.0);
      Complex complex7 = complex6.I.multiply((-2132.33));
      complex0.divide((-482.6089655734));
      Complex complex8 = complex6.negate();
      complex8.ONE.divide((-360.67295535));
      complex5.NaN.add(2304.96);
      Complex complex9 = complex7.pow(complex0);
      complex9.add(complex7);
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex1.NaN.add(20.0);
      complex0.ZERO.nthRoot(2189);
      Complex complex3 = Complex.valueOf(0.0, 3258.67799044);
      Complex complex4 = complex3.negate();
      complex0.reciprocal();
      complex4.ZERO.atan();
      Complex complex5 = complex4.multiply(0.0);
      Complex complex6 = complex4.asin();
      complex6.pow((double) 2189);
      complex5.nthRoot(2189);
      complex3.NaN.subtract(3258.67799044);
      complex2.getReal();
      Complex.valueOf(0.0);
      Complex complex7 = complex4.divide(complex5);
      try { 
        complex7.INF.nthRoot((-1130));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,130
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1184.85511, 1184.85511);
      complex0.NaN.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.multiply(17);
      Complex complex4 = Complex.valueOf(3.280586734644871E82);
      Complex complex5 = complex2.INF.acos();
      Complex complex6 = Complex.valueOf((double) 17);
      Complex complex7 = complex2.I.multiply(complex4);
      complex2.isInfinite();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex9.subtract(3.280586734644871E82);
      complex7.ONE.acos();
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex7.atan();
      complex1.sqrt1z();
      complex2.ZERO.add(complex7);
      Complex complex13 = complex12.reciprocal();
      complex9.toString();
      complex12.I.subtract(1184.85511);
      complex10.hashCode();
      complex5.log();
      complex13.toString();
      complex6.pow(complex5);
      complex3.add(complex5);
      complex11.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.INF.atan();
      complex2.INF.conjugate();
      Complex complex5 = complex4.I.divide(0.0);
      complex5.NaN.hashCode();
      Complex complex6 = complex0.ZERO.negate();
      complex6.ZERO.nthRoot(1286);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex7 = complex4.multiply(complex2);
      complex7.NaN.cosh();
      complex7.atan();
      complex7.isNaN();
      complex3.reciprocal();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1515.69), (-4660.1592));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex3.divide(complex0);
      complex0.ONE.log();
      Complex complex6 = Complex.valueOf((-4660.1592));
      Complex complex7 = Complex.valueOf((-1515.69), 524.2186);
      Complex complex8 = Complex.valueOf(1993.6812442);
      complex3.ONE.pow(complex5);
      complex6.abs();
      Complex complex9 = complex2.pow((-1515.69));
      complex2.I.conjugate();
      Complex complex10 = complex4.exp();
      complex2.multiply((-1));
      complex9.isInfinite();
      complex0.ZERO.divide(complex4);
      Complex complex11 = complex9.add(complex10);
      complex11.ONE.multiply(complex4);
      complex6.multiply(complex9);
      complex7.isInfinite();
      complex8.abs();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-1071.87349606));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sinh();
      complex1.ONE.reciprocal();
      Complex complex3 = complex2.I.multiply(363);
      complex1.isNaN();
      complex0.pow(2359.603433953);
      complex0.toString();
      Complex complex4 = complex3.sqrt1z();
      complex4.NaN.subtract(complex3);
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.log();
      Complex complex1 = complex0.ZERO.add((-1.0));
      Complex complex2 = complex1.INF.createComplex(0.0, 0.0);
      complex2.sin();
      Complex complex3 = complex1.I.multiply(609);
      Complex complex4 = complex0.I.sin();
      complex0.ONE.hashCode();
      complex4.ZERO.sqrt();
      complex4.ZERO.conjugate();
      complex0.multiply((-1184.92123056));
      complex0.hashCode();
      Complex complex5 = complex4.reciprocal();
      Complex.valueOf(0.0, 257.65903992);
      complex5.ZERO.abs();
      Complex complex6 = complex4.subtract(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1.0));
      Complex complex7 = complex4.acos();
      complex6.multiply(complex7);
      complex3.abs();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1068.07891), (-1068.07891));
      complex0.createComplex((-1068.07891), 8.713990131749256E-9);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.sqrt();
      complex0.add(complex3);
      Complex complex4 = complex2.log();
      complex4.INF.multiply(8.713990131749256E-9);
      complex3.INF.multiply(0);
      complex4.ZERO.reciprocal();
      complex1.I.exp();
      Complex.valueOf((-1068.07891), (-1.1660424775832058E-7));
      complex1.getArgument();
      complex2.conjugate();
      complex0.acos();
      complex3.multiply((-1068.07891));
      complex0.equals("Pu.");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1174.207724744466);
      complex0.ZERO.multiply(complex1);
      Complex complex2 = Complex.valueOf((-380.0692666496316), 1174.207724744466);
      complex2.INF.getField();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.I.cosh();
      complex0.readResolve();
      Complex complex5 = complex3.INF.cosh();
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex6.createComplex((-380.0692666496316), (-380.0692666496316));
      Complex complex8 = complex7.asin();
      complex6.I.cos();
      Complex complex9 = complex4.createComplex((-380.0692666496316), (-380.0692666496316));
      complex9.abs();
      complex8.getField();
      Complex.valueOf((-380.0692666496316), (-2134.2681));
      complex5.log();
      complex4.tanh();
      complex7.reciprocal();
      complex4.acos();
      Complex.valueOf(537.4991115371053);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.7188958587407816E-8), (-1.8981247089866317E-7));
      Complex complex2 = Complex.valueOf((-1.8981247089866317E-7));
      complex2.ZERO.asin();
      complex2.ZERO.cosh();
      complex0.ZERO.subtract(complex1);
      complex0.add((-1.8981247089866317E-7));
      complex0.getReal();
      Complex complex3 = complex1.log();
      complex3.NaN.tanh();
      Complex.valueOf(Double.NaN, (-1.7188958587407816E-8));
      complex1.I.tanh();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.multiply(214);
      complex0.add(0.0);
      complex1.nthRoot(214);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3957.3036186));
      complex0.INF.readResolve();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.ONE.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex3.pow((-3957.3036186));
      Complex complex4 = complex1.divide(complex0);
      complex1.hashCode();
      complex4.ZERO.createComplex(0.0, 0.0);
      Complex complex5 = complex0.INF.pow((-798.7351320396));
      complex0.toString();
      complex1.log();
      Complex complex6 = Complex.valueOf((-3198.03076), 0.0);
      complex1.readResolve();
      complex2.toString();
      complex5.exp();
      complex4.tanh();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex7.ZERO.exp();
      complex4.createComplex((-798.7351320396), 0.0);
      complex8.negate();
      complex1.add(Double.POSITIVE_INFINITY);
      complex6.getField();
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(427.62662, (-2683.93774689));
      Complex complex1 = complex0.I.asin();
      complex1.createComplex(427.62662, 427.62662);
      complex1.ONE.readResolve();
      Complex complex2 = complex1.NaN.createComplex(Double.POSITIVE_INFINITY, 1064.357564);
      Complex complex3 = complex2.ZERO.add(427.62662);
      complex2.NaN.hashCode();
      Complex complex4 = complex0.asin();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex3.ONE.multiply(37);
      Complex complex5 = complex2.I.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.INF.sqrt1z();
      complex6.ZERO.pow(427.62662);
      complex1.ONE.toString();
      complex1.cos();
      complex3.multiply(complex4);
      complex4.equals("(1.0, 0.0)");
      complex3.add(complex5);
      complex2.sqrt();
      complex5.sqrt();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract(8.999821367768787E-8);
      Complex complex2 = complex0.log();
      complex0.ONE.sqrt1z();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.divide(complex2);
      complex4.I.getField();
      complex2.NaN.acos();
      complex0.NaN.subtract(complex1);
      Complex complex5 = complex2.sin();
      complex5.I.divide(complex2);
      complex3.toString();
      Complex complex6 = complex2.sqrt();
      complex6.atan();
      complex2.multiply(complex3);
      complex5.add((-8.324100783330331E-109));
      complex6.getImaginary();
      complex5.sin();
      complex0.cosh();
      complex6.subtract(0.6223390102386475);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      complex2.tan();
      complex2.ZERO.multiply(complex0);
      Complex complex3 = complex2.log();
      complex3.add(1126.89297);
      complex3.tanh();
      Complex complex4 = complex1.sinh();
      complex0.getImaginary();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex0.sin();
      complex7.NaN.acos();
      Complex complex8 = complex1.sinh();
      complex8.I.hashCode();
      complex4.hashCode();
      Complex complex9 = complex2.subtract(complex6);
      complex9.multiply((-1947));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex0.tan();
      complex2.ONE.reciprocal();
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = new Complex(1.7663064617118723E-8, (-59.1709));
      Complex complex6 = complex0.divide(complex5);
      complex6.ZERO.add((-59.1709));
      complex0.INF.subtract(complex4);
      Complex.valueOf(0.0, (-858.5477));
      complex6.I.cosh();
      complex6.add(complex3);
      complex0.I.cos();
      complex0.isNaN();
      Complex complex7 = Complex.valueOf(0.0, (-59.1709));
      complex7.ONE.multiply((-59.1709));
      complex4.getImaginary();
      Complex complex8 = complex5.multiply(complex4);
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex1.getReal();
      Complex complex9 = complex7.sinh();
      complex4.multiply(3152);
      complex9.subtract(0.0);
      Complex complex10 = Complex.valueOf(0.0);
      complex3.negate();
      Complex complex11 = new Complex((-59.1709), 1.7663064617118723E-8);
      complex10.equals(complex11);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = Complex.valueOf(2813.59441926836);
      Complex complex3 = complex2.INF.asin();
      complex3.ZERO.createComplex(185.9948810771484, 2813.59441926836);
      complex3.ONE.subtract(2813.59441926836);
      Complex complex4 = complex3.negate();
      complex4.ZERO.reciprocal();
      Complex complex5 = complex1.ONE.add(complex2);
      complex0.getReal();
      complex5.tanh();
      complex1.toString();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.tanh();
      int int0 = (-2321);
      try { 
        complex1.ONE.nthRoot((-2321));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,321
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.toString();
      Complex complex1 = complex0.pow(2962.170531819813);
      Complex complex2 = complex0.ZERO.add(0.0);
      complex1.ZERO.hashCode();
      complex0.I.abs();
      Complex complex3 = complex0.atan();
      complex3.ONE.createComplex(0.0, 1436.91314547);
      Complex complex4 = complex2.sin();
      complex4.ZERO.abs();
      complex0.INF.sin();
      complex1.toString();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(582.0652288074, (-32.46));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.subtract(complex1);
      complex2.getArgument();
      complex1.I.asin();
      complex2.INF.toString();
      complex1.add(3523.61677974);
      complex0.ZERO.getArgument();
      Complex complex3 = complex2.divide((-2.9275804461593914E217));
      Complex complex4 = complex3.acos();
      complex3.abs();
      Complex complex5 = complex2.sqrt1z();
      complex0.ZERO.subtract(complex4);
      complex5.equals((Object) null);
      complex0.pow(complex1);
      complex5.multiply(3621);
      Object object0 = complex1.readResolve();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.asin();
      complex1.ONE.hashCode();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.ONE.pow(complex1);
      Complex complex6 = complex1.ZERO.divide(2161.16649302);
      complex6.I.asin();
      Complex complex7 = complex0.INF.tanh();
      Complex complex8 = complex0.add(complex1);
      complex8.I.cos();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = complex0.negate();
      complex2.hashCode();
      Complex complex12 = complex1.sin();
      complex12.ZERO.pow(2161.16649302);
      complex12.tan();
      complex7.sinh();
      Complex complex13 = Complex.valueOf(1.0648786018364265E-63, 2161.16649302);
      complex2.getArgument();
      complex7.pow(Double.NaN);
      complex11.reciprocal();
      Complex complex14 = complex10.atan();
      complex5.subtract(1.0648786018364265E-63);
      complex14.negate();
      complex13.getArgument();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.9242560971295217E-8), (-3.9242560971295217E-8));
      Complex complex1 = complex0.ZERO.createComplex((-2043.78798033637), (-1791.4259754823445));
      complex1.NaN.hashCode();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      complex0.INF.add(6.283185307179586);
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.getField();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.I.acos();
      complex3.NaN.pow(0.0);
      complex2.INF.getArgument();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.cosh();
      complex5.ONE.add(0.7853981633974483);
      Complex.valueOf(20.0, 0.7853981633974483);
      Complex complex6 = Complex.valueOf((-1139.867726700855));
      Complex complex7 = complex6.INF.divide(20.0);
      complex7.INF.readResolve();
      complex7.INF.subtract(complex1);
      Complex complex8 = complex6.NaN.sin();
      complex2.getReal();
      complex0.tan();
      complex0.subtract((-1139.867726700855));
      complex8.exp();
      Complex complex9 = Complex.valueOf(2.011589233663723E-10, 0.0);
      complex9.sin();
      complex6.multiply((-3670.400105893975));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      complex0.ONE.toString();
      complex0.getField();
      complex1.readResolve();
      Complex complex2 = complex1.multiply(3.9036541111764032E-140);
      complex2.ZERO.toString();
      Complex complex3 = complex2.ZERO.log();
      complex3.INF.atan();
      Complex complex4 = complex2.subtract(3.9036541111764032E-140);
      complex4.isInfinite();
      complex1.isNaN();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex1.negate();
      complex6.NaN.reciprocal();
      complex4.getImaginary();
      complex2.INF.getField();
      complex2.isInfinite();
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2480.3718217));
      Complex complex1 = complex0.NaN.atan();
      complex0.toString();
      complex0.isInfinite();
      complex0.tan();
      Complex complex2 = complex0.add((-2480.3718217));
      Complex complex3 = complex2.ONE.multiply(3605);
      complex3.createComplex(0.5069117546081543, (-3664.789881026609));
      complex2.I.exp();
      Complex complex4 = complex1.log();
      complex4.INF.abs();
      complex1.acos();
      complex1.divide(complex0);
      complex0.pow(complex1);
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(2.1165289002286, 2.1165289002286);
      complex0.ZERO.subtract((-2849.857553675584));
      Complex complex1 = Complex.valueOf(2686.0, 1.0);
      Complex complex2 = complex1.I.conjugate();
      complex2.getArgument();
      complex2.INF.tanh();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.add((-4140.79146212093));
      Complex complex5 = complex4.INF.sqrt1z();
      complex2.ZERO.cos();
      complex5.ZERO.add(complex2);
      complex1.cosh();
      Complex complex6 = complex0.divide((-1.5707963267948966));
      complex6.ONE.tan();
      Complex complex7 = complex4.multiply((-4140.79146212093));
      complex7.ZERO.tan();
      complex7.sqrt();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.nthRoot(1488);
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.nthRoot(1488);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ONE.createComplex(1488, (-1481.285));
      Complex.valueOf((double) 1488);
      complex3.ONE.nthRoot(1488);
      Complex complex4 = complex3.I.exp();
      complex3.INF.createComplex(1457.0434750211846, 9.02268127425393E-232);
      Complex complex5 = Complex.valueOf(0.22392448782920837);
      complex5.INF.getField();
      Complex complex6 = complex0.INF.add((-1481.285));
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.INF.sin();
      complex8.ONE.sqrt1z();
      Complex.valueOf((-1407.3509564072895));
      complex2.getImaginary();
      complex1.nthRoot(1488);
      complex6.atan();
      complex5.abs();
      complex4.sin();
      Complex complex9 = complex6.conjugate();
      complex9.INF.acos();
      complex4.negate();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.I.createComplex(0.0, 0.0);
      Complex complex5 = complex1.INF.sqrt();
      Complex complex6 = complex5.NaN.multiply(121);
      complex5.ONE.hashCode();
      Complex complex7 = complex1.ONE.tanh();
      double double0 = complex1.abs();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex0.cosh();
      complex9.I.readResolve();
      complex2.isInfinite();
      complex7.NaN.hashCode();
      Complex complex10 = complex9.acos();
      complex3.isInfinite();
      complex0.getReal();
      Complex complex11 = complex1.pow(complex0);
      Complex complex12 = complex10.conjugate();
      double double1 = complex3.getReal();
      assertEquals(double1, double0, 0.01);
      
      complex7.getField();
      complex11.ONE.getField();
      Complex complex13 = complex11.cosh();
      assertSame(complex13, complex6);
      
      complex7.getArgument();
      Object object0 = new Object();
      complex12.equals(object0);
      complex4.isNaN();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      
      complex11.readResolve();
      Complex complex14 = complex12.log();
      Complex complex15 = complex14.I.log();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertTrue(complex14.isInfinite());
      
      Complex complex16 = complex8.exp();
      assertEquals(2.3103131971234365, complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertTrue(complex0.equals((Object)complex10));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-0.8735078));
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.ONE.subtract(2.0);
      assertEquals((-1.0), complex4.getReal(), 0.01);
      
      String string0 = complex0.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      Complex complex5 = complex0.NaN.sqrt1z();
      assertNotSame(complex5, complex1);
      
      Complex complex6 = complex2.ZERO.multiply(complex3);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = complex0.cos();
      assertEquals(0.7598765399267142, complex7.getReal(), 0.01);
      
      complex2.hashCode();
      Complex complex8 = complex2.multiply((-3447.964970685));
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals((-2708.0253554347355), complex8.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.asin();
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.ZERO.atan();
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      complex3.ZERO.getArgument();
      Complex complex5 = complex3.NaN.conjugate();
      complex3.ONE.abs();
      Complex complex6 = complex0.sin();
      complex6.getReal();
      Complex complex7 = complex1.cosh();
      complex7.I.getArgument();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex6.cosh();
      complex3.getReal();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex11.ONE.asin();
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      complex11.ONE.getArgument();
      Complex complex13 = complex11.NaN.pow(complex9);
      assertEquals(1.2569907153141482, complex11.getReal(), 0.01);
      
      Complex complex14 = complex8.ONE.divide(0.0);
      complex10.getField();
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      complex9.subtract(complex5);
      assertSame(complex9, complex14);
      assertEquals(0.8373830985134536, complex3.getImaginary(), 0.01);
      assertSame(complex9, complex13);
      
      Complex complex15 = complex8.reciprocal();
      assertEquals((-0.690076070875319), complex15.getImaginary(), 0.01);
      assertEquals(0.7237368419565788, complex15.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2127.661149);
      complex0.INF.negate();
      Complex complex1 = complex0.reciprocal();
      complex1.I.log();
      complex0.isInfinite();
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(0.0);
      complex0.equals(complex1);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ONE.pow(317.66633936649464);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      
      Complex complex5 = complex1.acos();
      complex1.isNaN();
      Complex complex6 = complex5.log();
      Complex complex7 = complex1.negate();
      assertFalse(complex7.equals((Object)complex0));
      assertSame(complex7, complex6);
      assertTrue(complex0.equals((Object)complex3));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex4));
  }
}
