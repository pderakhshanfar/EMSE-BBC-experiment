/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:44:41 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.I.createComplex(0.0, 2685.6);
      complex2.ONE.readResolve();
      complex0.INF.abs();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.valueOf(2685.6, Double.POSITIVE_INFINITY);
      complex2.ONE.pow(complex3);
      Complex complex5 = Complex.valueOf(22.80777720796574);
      Complex.valueOf(Double.POSITIVE_INFINITY, 6.283185307179586);
      complex0.isNaN();
      Complex complex6 = complex1.negate();
      complex6.I.multiply(complex4);
      complex6.INF.hashCode();
      complex6.I.getArgument();
      Complex complex7 = complex1.cosh();
      Complex complex8 = Complex.ZERO;
      complex5.tan();
      Complex complex9 = complex8.I.subtract(complex2);
      Complex complex10 = complex9.ZERO.cos();
      Complex complex11 = complex8.negate();
      complex11.NaN.log();
      complex9.ZERO.createComplex(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex12 = complex8.tan();
      complex12.I.exp();
      complex4.sinh();
      complex8.hashCode();
      Complex.valueOf(1589.49987, Double.POSITIVE_INFINITY);
      Complex complex13 = complex10.divide(2685.6);
      complex13.NaN.cosh();
      complex13.divide(complex5);
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.createComplex(1.1247213964487372E264, 9.231260965463741E-176);
      complex0.nthRoot(4999);
      // Undeclared exception!
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2146322467);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.tan();
      complex1.divide(complex4);
      complex2.getArgument();
      complex0.readResolve();
      Complex.valueOf((-0.0024013962678459764), (-1.5707963267948966));
      Complex complex5 = complex2.divide((-1.5707963267948966));
      complex2.negate();
      Complex complex6 = Complex.NaN;
      complex2.add(complex6);
      Complex complex7 = complex6.tanh();
      complex7.getField();
      complex5.multiply((-1.5707963267948966));
      complex6.exp();
      complex3.sinh();
      complex4.cosh();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(495.2249706, 1875.65);
      Complex complex3 = complex1.add(3071.3041266);
      Complex complex4 = complex1.add(3071.3041266);
      complex4.ONE.getField();
      complex4.ZERO.subtract(3071.3041266);
      Complex complex5 = complex1.asin();
      complex0.pow(complex3);
      Complex complex6 = complex4.divide(complex2);
      complex6.INF.divide(495.2249706);
      try { 
        complex5.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.exp();
      complex0.tan();
      Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = new Complex((-20.0), (-20.0));
      complex1.pow(428.1);
      complex2.negate();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1.5930591104709298E15), Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      complex0.INF.createComplex(1264.221827798, 1.9913176783611184E14);
      complex0.readResolve();
      Complex.valueOf((-1174.1), (-7.83892088580041E80));
      Complex complex1 = Complex.valueOf((-399.0), (-7.83892088580041E80));
      Complex complex2 = complex1.divide((-7.83892088580041E80));
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex2.tanh();
      complex3.getField();
      Complex complex6 = complex4.multiply((-7.83892088580041E80));
      complex6.exp();
      complex5.cosh();
      complex4.nthRoot(7);
      Complex complex7 = complex4.divide(complex3);
      Complex complex8 = Complex.valueOf(1.5707963267948966, 1.8356062677502141E202);
      complex8.sqrt1z();
      complex7.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1582.27), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.exp();
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.pow(2124.7347023504803);
      Complex complex1 = new Complex((-129.89), Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.reciprocal();
      complex0.conjugate();
      complex1.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.3733830589835937E32);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.multiply(0.9166666666666666);
      complex0.divide(complex2);
      Complex complex4 = complex3.pow(1.3733830589835937E32);
      Complex complex5 = complex2.tan();
      complex0.tanh();
      Complex complex6 = new Complex(2288.6502481401644);
      complex3.pow(complex6);
      complex4.exp();
      Complex complex7 = complex2.asin();
      complex1.subtract((-2084.624323472749));
      complex1.sin();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = Complex.ONE;
      complex0.add(complex9);
      complex6.divide(1.0);
      Complex complex10 = Complex.valueOf((-2084.624323472749), 1.0);
      Complex complex11 = complex10.log();
      complex8.abs();
      Complex complex12 = new Complex(151.7274641435);
      complex12.subtract(Double.POSITIVE_INFINITY);
      complex5.abs();
      complex12.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex13 = new Complex(1.0);
      complex13.subtract(0.9748771133355701);
      complex12.subtract(complex11);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.I;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1264);
      Complex complex1 = Complex.valueOf((double) 1264, (double) 1264);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.add(Double.POSITIVE_INFINITY);
      complex3.abs();
      complex2.cosh();
      complex1.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.add(Double.NaN);
      Complex complex4 = complex0.atan();
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(Double.NaN);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = new Complex(2.0, 392.7);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.tanh();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 2.0);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex2.hashCode();
      Complex complex3 = complex1.reciprocal();
      complex1.multiply((-1821.72));
      complex3.getField();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.cos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.atan();
      complex6.tanh();
      Complex complex8 = complex1.acos();
      Complex.valueOf(1914.162917892, 912.2);
      complex7.tanh();
      complex3.reciprocal();
      Complex complex9 = complex8.sinh();
      complex5.add(7.389056205749512);
      complex9.createComplex(3246.097681073501, 260.618293275579);
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4009.2474), (-4009.2474));
      Complex complex1 = new Complex((-4009.2474), 2960.610921662227);
      Complex complex2 = Complex.valueOf((-1582.27), Double.POSITIVE_INFINITY);
      complex0.exp();
      complex2.acos();
      Complex complex3 = new Complex((-4009.2474), Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.tanh();
      Complex complex5 = new Complex(139.0, (-4009.2474));
      complex4.cos();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex((-4009.2474));
      Complex complex3 = new Complex((-1024.9307211910245), 1.0);
      Complex.valueOf(1.0, 818.58);
      complex1.exp();
      complex2.acos();
      Complex complex4 = new Complex(Double.NaN, (-650.59207));
      complex0.tanh();
      Complex complex5 = new Complex(6.283185307179586, 1458.16);
      complex4.cos();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-18.562595151556057));
      complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(18.562595151556057);
      Complex complex3 = new Complex(10.95715466198305, 524.1);
      complex3.I.exp();
      complex1.acos();
      Complex complex4 = new Complex(1327.709314588574, Double.NaN);
      complex1.tanh();
      Complex complex5 = new Complex((-4569.0), 524.1);
      complex1.cos();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = (-18.562595151556057);
      Complex complex0 = Complex.valueOf((-18.562595151556057));
      complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.acos();
      Complex complex3 = new Complex(10.95715466198305, 18.562595151556057);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex2.add(complex4);
      Complex complex7 = Complex.ONE;
      complex7.tan();
      Complex.valueOf(10.95715466198305);
      complex5.readResolve();
      complex0.readResolve();
      Complex complex8 = complex0.atan();
      complex8.add(complex6);
      try { 
        complex7.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.ZERO.abs();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = new Complex(0.0);
      Complex complex6 = new Complex(6848.764045, 0.0);
      complex4.exp();
      Complex complex7 = new Complex(0.0);
      complex7.acos();
      Complex complex8 = complex4.multiply((-37.098234842717844));
      Complex complex9 = Complex.INF;
      complex7.readResolve();
      Complex complex10 = Complex.valueOf((-0.08054482231609668), (-1034.74));
      complex10.readResolve();
      complex0.equals(complex8);
      complex3.readResolve();
      complex10.negate();
      complex0.multiply((-0.08054482231609668));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = Complex.valueOf(0.0, Double.NaN);
      Complex complex3 = complex2.exp();
      complex0.acos();
      Complex complex4 = new Complex((-702.46013184), 0.540589621);
      complex1.tanh();
      Complex complex5 = new Complex((-1285.435422), (-2015.12941155507));
      complex3.cos();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.multiply(0.0);
      Complex.valueOf((-20.0));
      Complex complex2 = new Complex((-20.0), (-1370.4813133179791));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.abs();
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex((-868.80373), (-0.9999927188480373));
      Complex complex5 = complex1.exp();
      complex5.acos();
      complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.INF;
      complex5.readResolve();
      Complex.valueOf(524.1, (-0.9999927188480373));
      complex5.readResolve();
      complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex0.createComplex((-1821.72), (-0.29152279818238136));
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.valueOf(2407.9288306105, (-3654.12963704756));
      complex6.multiply(892);
      Complex complex7 = complex2.multiply((-2987));
      complex7.divide(complex4);
      Complex complex8 = Complex.valueOf(0.0);
      complex5.abs();
      complex7.subtract(complex4);
      Complex.valueOf((-20.0));
      Complex complex9 = complex8.divide(complex7);
      complex2.toString();
      complex5.sqrt1z();
      complex2.cos();
      complex9.multiply(complex5);
      complex3.getArgument();
      complex5.multiply(278.0);
      complex9.reciprocal();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.ZERO.abs();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.ZERO.sinh();
      complex0.acos();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.sin();
      complex0.NaN.asin();
      complex6.add(complex4);
      complex1.tan();
      Complex.valueOf(0.0);
      complex3.readResolve();
      complex5.readResolve();
      complex5.atan();
      complex2.add(complex5);
      complex5.add(complex1);
      Complex complex7 = Complex.I;
      complex3.add((-30.034793656));
      complex3.pow((-2873.5786395239));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.sqrt();
      complex0.ONE.sqrt1z();
      complex2.ONE.subtract(complex1);
      Complex complex3 = complex0.ONE.conjugate();
      int int0 = (-3263);
      try { 
        complex3.ONE.nthRoot((-3263));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,263
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.createComplex(6.283185307179586, 1.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.valueOf((-3654.12963704756), 2.242558002471924);
      Complex complex5 = complex4.multiply(892);
      complex3.multiply(2145884634);
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = Complex.valueOf((-3654.12963704756));
      complex7.abs();
      complex6.subtract(complex7);
      Complex.valueOf(15.48310919);
      complex3.divide(complex2);
      complex7.toString();
      complex2.sqrt1z();
      complex0.cos();
      complex6.multiply(complex5);
      complex0.getArgument();
      Complex complex8 = Complex.NaN;
      complex8.multiply(2.242558002471924);
      Complex complex9 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex3.asin();
      complex0.add(complex1);
      Complex complex8 = complex3.tan();
      Complex complex9 = Complex.valueOf((-1867.29478967134));
      complex1.readResolve();
      complex8.readResolve();
      complex9.atan();
      Complex complex10 = complex5.add(complex6);
      complex7.add(complex10);
      Complex complex11 = Complex.I;
      complex10.add((-1867.29478967134));
      complex2.pow((-1867.29478967134));
      complex10.subtract(6.283185307179586);
      complex5.multiply(complex7);
      Object object0 = new Object();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-18.562595151556057));
      complex0.abs();
      complex0.hashCode();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-481.548451370945), 0.0);
      complex2.toString();
      complex1.hashCode();
      Complex complex3 = Complex.valueOf(3183.0750928796942, (-2865.18));
      Complex complex4 = Complex.valueOf(10.95715466198305, 20.0);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex3.negate();
      complex2.hashCode();
      complex6.pow((-2865.18));
      complex2.asin();
      Complex complex7 = complex2.atan();
      complex5.multiply(767);
      Complex complex8 = complex5.pow(complex7);
      complex4.pow(complex5);
      complex7.subtract(complex1);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.cosh();
      complex10.NaN.subtract(Double.NaN);
      complex6.pow(complex9);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = Complex.valueOf((-20.0));
      complex0.createComplex((-1821.72), (-0.29152279818238136));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex3.asin();
      complex4.add(complex0);
      complex4.tan();
      Complex.valueOf(20.0);
      complex2.readResolve();
      complex3.readResolve();
      Complex complex6 = new Complex(1055.184079, 2218.89);
      Complex complex7 = complex6.atan();
      Complex complex8 = Complex.valueOf((-20.0));
      complex8.add(complex2);
      complex4.add(complex5);
      Complex complex9 = Complex.I;
      complex1.add(2.628788218289742E129);
      Complex complex10 = complex0.pow(2407.9288306105);
      complex5.getImaginary();
      complex10.divide(1.8302826836033937E7);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-1867.29478967134), (-4278.180435189));
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.exp();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.valueOf((-4278.180435189), 3183.0750928796942);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex1.negate();
      Complex complex9 = Complex.valueOf(Double.NaN, 3183.0750928796942);
      complex9.hashCode();
      Complex complex10 = complex4.pow((-1867.29478967134));
      complex6.asin();
      complex8.atan();
      Complex complex11 = complex9.multiply(3446);
      Complex complex12 = Complex.ONE;
      complex12.pow(complex10);
      complex6.pow(complex4);
      complex5.subtract(complex7);
      Complex complex13 = Complex.ONE;
      complex10.cosh();
      Complex complex14 = Complex.valueOf(991.345413635988, 800.42943849409);
      complex14.pow(complex11);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.986821492305628E-8, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.I.asin();
      complex3.INF.negate();
      complex3.NaN.negate();
      complex3.I.cos();
      Complex complex4 = new Complex(2442.29521869, 2237.978426168846);
      Complex complex5 = new Complex(2442.29521869, 2237.978426168846);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1867.29478967134));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.divide((-635.0));
      Complex complex5 = complex2.reciprocal();
      complex3.hashCode();
      Complex complex6 = complex4.reciprocal();
      complex0.toString();
      complex3.hashCode();
      Complex complex7 = Complex.valueOf(3183.0750928796942, (-1867.29478967134));
      Complex complex8 = complex5.tan();
      complex5.negate();
      complex5.hashCode();
      Complex complex9 = Complex.I;
      Complex complex10 = complex8.asin();
      complex8.atan();
      complex6.multiply((-1457));
      complex9.pow(complex7);
      complex2.pow(complex1);
      Complex complex11 = complex4.subtract(complex7);
      complex11.cosh();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex12.cosh();
      complex13.INF.readResolve();
      complex0.pow(complex13);
      complex12.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.ZERO.abs();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.asin();
      complex0.divide(1438.866741970621);
      Complex complex4 = complex0.reciprocal();
      complex3.hashCode();
      Complex complex5 = new Complex(20.0, 1656.4126503371);
      Complex complex6 = complex5.reciprocal();
      complex1.toString();
      complex1.hashCode();
      Complex complex7 = Complex.valueOf(578.47289, 0.9591085231536501);
      complex6.tan();
      Complex complex8 = new Complex(0.0);
      complex8.negate();
      complex6.hashCode();
      complex7.pow((-635.0));
      complex8.asin();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex6.multiply((-1457));
      complex4.pow(complex9);
      Complex complex11 = complex8.pow(complex7);
      complex9.subtract(complex10);
      Complex complex12 = complex11.cosh();
      complex3.pow(complex8);
      Complex complex13 = new Complex((-1457), 0.0);
      complex13.subtract(complex8);
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.toString();
      Complex complex1 = Complex.INF;
      complex1.abs();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.acos();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex0.cos();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-1867.29478967134), (-4278.180435189));
      Complex complex3 = Complex.I;
      complex3.exp();
      complex2.reciprocal();
      Complex complex4 = new Complex((-4278.180435189));
      Complex complex5 = complex4.asin();
      complex1.negate();
      complex4.NaN.negate();
      Complex complex6 = Complex.I;
      complex5.cos();
      complex3.log();
      complex0.multiply((-4278.180435189));
      Complex complex7 = Complex.INF;
      Object object0 = complex4.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.atan();
      Complex complex1 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.ZERO.abs();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = Complex.valueOf(3404.21261607, (-2053.4969918));
      complex4.exp();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex5.negate();
      Complex complex8 = Complex.I;
      Complex complex9 = complex6.I.divide(3404.21261607);
      complex7.cos();
      complex4.log();
      complex6.multiply((-1.0));
      Complex complex10 = Complex.INF;
      complex10.equals(complex0);
      complex9.add(0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.INF.negate();
      complex0.nthRoot(17);
      Complex complex4 = complex1.pow((double) 17);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex1.multiply(17);
      Complex complex7 = complex1.pow(complex0);
      complex7.pow(complex2);
      Complex complex8 = complex6.subtract(complex4);
      Complex complex9 = Complex.ONE;
      complex8.pow(complex9);
      complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1.4564130306243896);
      Complex complex1 = new Complex(1.6363908999859822E12);
      Complex complex2 = complex1.divide(1337.3278019277);
      complex2.readResolve();
      Complex complex3 = complex2.reciprocal();
      complex2.tan();
      complex3.hashCode();
      complex3.log();
      complex1.createComplex(1337.3278019277, 2.056466263408266E-8);
      complex1.sinh();
      Complex complex4 = new Complex(1237.73, 2.087996442390733E-11);
      complex4.isInfinite();
      Complex complex5 = complex1.subtract(1.6363908999859822E12);
      complex1.acos();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-468.8456));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sqrt();
      complex2.INF.log();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = Complex.valueOf(4.940883275207154E117, 4.940883275207154E117);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.multiply(complex0);
      complex3.ONE.reciprocal();
      Complex complex7 = complex3.INF.subtract((-468.8456));
      complex7.ONE.exp();
      complex3.ONE.multiply(0);
      complex0.isNaN();
      Complex complex8 = complex0.asin();
      complex0.log();
      Complex complex9 = Complex.ZERO;
      complex8.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(2133.04049);
      complex1.subtract(complex2);
      Complex complex3 = complex2.exp();
      Complex complex4 = new Complex((-4.940883275207154E117));
      complex4.multiply(2734);
      Complex complex5 = complex4.atan();
      complex5.divide(complex3);
      Complex.valueOf(0.0, (-2799.4892315));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-951.53986360502));
      Complex complex1 = complex0.INF.createComplex((-1), 1.986821492305628E-8);
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.subtract(2437.05);
      complex5.exp();
      Complex complex6 = new Complex((-1));
      Complex complex7 = complex6.multiply(0);
      complex1.isNaN();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex7.log();
      Complex complex10 = complex7.divide((double) (-1));
      complex5.readResolve();
      complex1.reciprocal();
      Complex complex11 = Complex.valueOf((double) 0, (-0.0010664503807902292));
      complex11.tan();
      Complex complex12 = new Complex((-1.3782394940142479E-8), 1.986821492305628E-8);
      complex12.hashCode();
      complex8.log();
      complex6.createComplex(1.986821492305628E-8, 460.4990674);
      Complex.valueOf(460.4990674);
      complex2.sinh();
      complex11.isInfinite();
      complex9.subtract(705.074);
      complex10.acos();
      complex10.sinh();
      complex6.add(1.986821492305628E-8);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.986821492305628E-8, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.I.asin();
      complex3.INF.negate();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.I.cos();
      complex5.ONE.log();
      complex5.NaN.multiply(0.0);
      Complex complex6 = Complex.INF;
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1.4564130306243896);
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      complex0.I.hashCode();
      Complex complex1 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex0.subtract(6.283185307179586);
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex5 = complex0.divide(complex3);
      complex5.NaN.divide(complex1);
      complex5.ZERO.getArgument();
      complex1.log();
      Complex complex6 = complex4.multiply(696);
      complex6.I.getArgument();
      complex6.exp();
      complex3.multiply(complex1);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.7976931348623157E308);
      complex1.hashCode();
      Complex complex2 = complex0.createComplex(1.7976931348623157E308, 1.7976931348623157E308);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.subtract(1.7976931348623157E308);
      Complex complex5 = complex2.subtract(Double.NaN);
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      complex2.divide(complex0);
      complex4.divide(complex3);
      complex6.getArgument();
      Complex complex7 = complex0.log();
      complex5.multiply(696);
      complex5.exp();
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.add((-421.764));
      Complex.valueOf((-2145.0), (-2145.0));
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex2.tan();
      complex4.INF.sqrt1z();
      complex0.readResolve();
      complex2.readResolve();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex2.add(complex5);
      complex6.add(complex0);
      Complex complex7 = new Complex(0.41421356237309515, (-421.764));
      complex7.add(1.0);
      complex1.pow(5.482208065983983E-194);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.I.reciprocal();
      complex1.multiply(0);
      Complex complex2 = complex0.multiply((-762.909974086));
      Complex complex3 = Complex.valueOf(1621.55944361794);
      complex0.sqrt();
      Complex complex4 = complex2.multiply((-2144933158));
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.pow(complex6);
      Complex complex8 = Complex.ZERO;
      complex8.getField();
      Complex complex9 = Complex.valueOf((-635.0));
      Complex complex10 = complex1.divide(complex9);
      Complex complex11 = complex6.tanh();
      complex3.hashCode();
      complex11.tanh();
      complex7.hashCode();
      Complex complex12 = complex8.multiply(577.348037454725);
      complex9.conjugate();
      complex10.sqrt();
      complex7.sinh();
      complex0.tan();
      complex9.cos();
      complex4.subtract(1.0);
      complex12.getReal();
      complex5.exp();
      try { 
        complex0.nthRoot((-2144933158));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,144,933,158
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-468.8456));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sqrt();
      complex2.INF.log();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = Complex.valueOf(4.940883275207154E117, (-1571.3764668298463));
      Complex complex5 = complex4.conjugate();
      complex5.multiply(complex0);
      complex3.ONE.reciprocal();
      Complex complex6 = complex3.INF.subtract((-468.8456));
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex3.ONE.multiply(0);
      complex0.isNaN();
      complex0.asin();
      Complex complex9 = complex0.log();
      complex9.INF.divide((-468.8456));
      complex9.ONE.readResolve();
      complex7.reciprocal();
      Complex complex10 = complex3.tan();
      complex2.hashCode();
      complex1.ZERO.log();
      Complex.valueOf((-1573.903213));
      complex10.ONE.sinh();
      complex6.isInfinite();
      Complex complex11 = complex2.subtract(4.940883275207154E117);
      Complex complex12 = complex8.acos();
      complex12.sinh();
      complex11.pow(1555.751);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(1.4564130306243896);
      complex0.sinh();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.divide(1.4564130306243896);
      Complex complex7 = complex5.reciprocal();
      complex3.hashCode();
      Complex complex8 = complex3.reciprocal();
      complex2.toString();
      complex7.hashCode();
      Complex complex9 = Complex.valueOf(0.0, (-839.988909388429));
      Complex complex10 = complex2.tan();
      complex10.negate();
      Complex complex11 = Complex.ZERO;
      complex11.hashCode();
      Complex complex12 = complex0.pow((-635.0));
      complex12.asin();
      complex9.atan();
      Complex complex13 = complex0.multiply((-1457));
      Complex complex14 = complex9.pow(complex1);
      Complex complex15 = new Complex((-1457));
      complex15.pow(complex8);
      Complex complex16 = Complex.NaN;
      complex4.subtract(complex16);
      complex14.cosh();
      Complex complex17 = new Complex(0.0, 0.0);
      complex15.pow(complex17);
      complex13.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(763.909974086, 763.909974086);
      Complex complex1 = complex0.ZERO.log();
      complex1.ZERO.getField();
      Complex complex2 = complex1.ZERO.subtract(1906.0);
      complex1.createComplex(0.0, (-1767.018793761435));
      complex1.ONE.sqrt1z();
      Complex complex3 = complex1.ONE.subtract(complex0);
      complex1.NaN.multiply(1.0287251472473145);
      Complex.valueOf(1906.0);
      complex0.tan();
      Complex complex4 = complex0.multiply(353);
      complex4.INF.subtract(complex3);
      Complex complex5 = complex3.reciprocal();
      complex5.readResolve();
      complex0.negate();
      complex2.pow((-1690.402015));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1541.4), (-1541.4));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.subtract(1167.913);
      Complex complex5 = complex4.negate();
      complex2.getReal();
      complex4.I.divide((-57.2826652));
      complex3.NaN.atan();
      Complex complex6 = complex3.acos();
      complex6.I.sinh();
      complex6.ZERO.abs();
      Complex complex7 = complex1.ZERO.asin();
      complex2.NaN.sin();
      complex5.INF.readResolve();
      Complex complex8 = Complex.INF;
      complex4.pow(complex8);
      Complex complex9 = complex0.createComplex((-1541.4), 0.0);
      complex9.NaN.subtract(complex7);
      complex5.isInfinite();
      complex7.I.cos();
      complex2.toString();
      complex2.getReal();
      Complex complex10 = complex7.multiply((-552));
      complex2.multiply((-205.9));
      Complex complex11 = complex10.reciprocal();
      complex11.readResolve();
      complex2.sinh();
      complex6.conjugate();
      Complex.valueOf(1835.984, 1.2616519927978516);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.ZERO.abs();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.sin();
      complex0.NaN.asin();
      Complex complex8 = complex6.divide((-635.0));
      complex5.NaN.reciprocal();
      complex8.INF.hashCode();
      complex0.reciprocal();
      complex5.toString();
      complex2.hashCode();
      Complex.valueOf(0.0, 0.0);
      complex1.tan();
      Complex complex9 = complex8.negate();
      complex9.ONE.hashCode();
      complex9.I.pow(0.0);
      Complex complex10 = complex4.asin();
      complex1.I.atan();
      Complex complex11 = complex5.multiply((-1457));
      complex11.pow(complex4);
      complex0.pow(complex5);
      complex7.subtract(complex3);
      complex2.cosh();
      Complex complex12 = complex9.pow(complex5);
      complex10.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-6.183525570536406E93), (-1.0));
      complex0.ONE.add(complex1);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.exp();
      complex2.I.multiply(3931);
      Complex complex4 = complex3.I.atan();
      complex4.I.divide(complex2);
      Complex.valueOf(0.0, (-2799.4892315));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.readResolve();
      complex0.getField();
      Complex complex1 = new Complex((-2532.633));
      Complex complex2 = complex1.ZERO.add((-724.309));
      complex1.NaN.sin();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.add((-20.0));
      complex4.INF.tanh();
      complex2.isInfinite();
      Complex complex5 = Complex.valueOf(2.0, 2.0);
      complex5.pow((-2532.633));
      complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(668.4475639062, 0.0);
      complex1.ZERO.conjugate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sinh();
      complex0.ONE.acos();
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex0.INF.subtract(0.24401789903640747);
      Complex complex6 = complex5.reciprocal();
      complex4.ZERO.tan();
      complex6.I.multiply(complex4);
      Complex complex7 = complex5.ONE.multiply(complex3);
      complex2.subtract(5.914537964556077E-8);
      complex7.INF.createComplex(668.4475639062, 618.695736);
      complex5.sinh();
      complex7.tan();
      Complex complex8 = complex0.sin();
      complex6.readResolve();
      complex7.conjugate();
      complex8.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3046.0458), 1581.7034);
      complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.multiply(17);
      complex2.ONE.abs();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.ZERO.add(complex1);
      Complex complex5 = complex4.ZERO.sinh();
      complex5.sqrt();
      Complex complex6 = complex0.INF.pow(complex1);
      complex1.NaN.negate();
      Complex complex7 = new Complex(1577.0663727506, 17);
      complex6.ZERO.add(complex7);
      Complex complex8 = complex0.sinh();
      complex6.getArgument();
      Complex complex9 = complex8.acos();
      complex9.ZERO.getArgument();
      Complex complex10 = Complex.valueOf(1581.7034, (-3046.0458));
      complex10.ZERO.sin();
      complex10.toString();
      complex1.sin();
      Complex complex11 = complex8.sqrt();
      complex10.nthRoot(17);
      complex11.divide(complex10);
      Complex complex12 = Complex.valueOf(3719.99);
      complex10.pow(complex12);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.add((-1.0));
      complex2.multiply(909);
      Complex complex3 = complex0.multiply(577.348037454725);
      Complex complex4 = Complex.valueOf(1621.55944361794);
      complex4.ZERO.sqrt();
      Complex complex5 = complex2.I.multiply(909);
      complex1.ONE.sqrt1z();
      complex4.INF.pow(complex1);
      complex3.I.getField();
      Complex complex6 = complex1.divide(complex3);
      Complex complex7 = complex0.ONE.tanh();
      complex6.hashCode();
      Complex complex8 = complex2.tanh();
      complex6.hashCode();
      Complex complex9 = complex5.multiply((-788.64862));
      complex9.INF.conjugate();
      Complex complex10 = complex6.sqrt();
      complex10.sinh();
      Complex complex11 = complex8.tan();
      Complex complex12 = complex7.cos();
      complex6.subtract(1621.55944361794);
      complex12.getReal();
      complex7.exp();
      complex11.nthRoot(646);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-840.151));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.subtract(0.0);
      complex0.isInfinite();
      Complex complex3 = complex1.multiply((-1477));
      complex1.NaN.readResolve();
      complex3.NaN.multiply(0.0);
      Complex complex4 = complex3.NaN.negate();
      Complex.valueOf((-717.028130947));
      complex4.INF.subtract(complex2);
      Complex.valueOf((-717.028130947), (double) (-1477));
      Complex complex5 = complex3.divide((-840.151));
      Complex complex6 = complex5.ONE.asin();
      complex6.ZERO.cos();
      complex5.getArgument();
      complex5.exp();
      complex5.pow(0.0);
      Complex.valueOf(2.0, (-840.151));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.subtract(1019.9);
      complex1.negate();
      Complex complex3 = complex2.INF.acos();
      complex3.INF.hashCode();
      Complex complex4 = complex1.multiply((-2767.9));
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex4.divide((-2767.9));
      complex1.abs();
      complex4.NaN.getField();
      Complex complex7 = complex5.multiply(complex6);
      complex7.NaN.nthRoot(7);
      complex6.nthRoot(7);
      complex5.reciprocal();
      complex5.pow(complex1);
      Complex.valueOf(0.0, (-2767.9));
      complex2.pow(complex4);
      complex6.readResolve();
      complex1.acos();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-2616.0));
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.readResolve();
      complex1.getArgument();
      Complex complex3 = complex0.NaN.multiply(complex2);
      Complex complex4 = complex0.reciprocal();
      Complex.valueOf(2.0);
      complex0.cos();
      complex2.ZERO.pow(2148.8992929);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.ZERO.divide(2.0);
      complex6.ZERO.hashCode();
      complex3.I.nthRoot(3281);
      Complex complex7 = complex3.subtract((-2578.61817186));
      complex7.ZERO.tanh();
      int int0 = 4099;
      // Undeclared exception!
      complex5.nthRoot(4099);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.986821492305628E-8, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.INF.negate();
      complex3.NaN.negate();
      Complex complex5 = complex3.I.cos();
      complex5.ONE.log();
      Complex complex6 = complex5.NaN.multiply(0.0);
      Complex complex7 = Complex.valueOf((-2436.05));
      complex7.INF.createComplex(1182.0, Double.POSITIVE_INFINITY);
      complex7.INF.sqrt();
      complex7.INF.multiply(892);
      Complex complex8 = complex2.NaN.multiply((-2987));
      complex8.ONE.divide(complex4);
      Complex complex9 = Complex.valueOf(2442.29521869);
      complex9.NaN.abs();
      Complex complex10 = complex2.INF.subtract(complex1);
      Complex complex11 = Complex.valueOf((-2802.0));
      Complex complex12 = complex1.divide(complex11);
      complex12.INF.toString();
      Complex complex13 = complex12.sqrt1z();
      complex13.I.cos();
      complex2.multiply(complex9);
      complex0.getArgument();
      complex10.multiply((-20.0));
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-811.45180583));
      complex0.ZERO.abs();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.ONE.multiply(0);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.createComplex(1482.3470575, (-811.45180583));
      complex5.multiply(complex4);
      complex5.NaN.add(0.0);
      complex3.pow((-610.3214613327));
      complex5.getImaginary();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      complex0.subtract(0.0);
      Complex complex1 = complex0.multiply(0);
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.exp();
      complex0.acos();
      complex1.add(complex2);
      complex0.acos();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.toString();
      complex0.getImaginary();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex2.I.sin();
      Complex complex3 = complex2.INF.tanh();
      complex3.NaN.exp();
      Complex complex4 = complex0.log();
      complex4.INF.reciprocal();
      complex2.hashCode();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.sin();
      complex3.INF.add(1509.32557767);
      Complex complex4 = complex2.ZERO.multiply(complex3);
      Complex complex5 = complex3.I.log();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex6.NaN.conjugate();
      complex6.ZERO.nthRoot(1709);
      Complex complex8 = complex0.I.multiply(0.0);
      complex7.INF.abs();
      Complex complex9 = complex6.subtract((-3.344806129021162E-131));
      Complex complex10 = complex9.INF.asin();
      Complex complex11 = complex9.ZERO.add((double) 1709);
      complex0.hashCode();
      complex2.hashCode();
      complex5.subtract(complex7);
      Complex complex12 = complex4.atan();
      complex0.getArgument();
      complex2.nthRoot(1709);
      Complex complex13 = complex6.subtract(complex1);
      Complex.valueOf((double) 1709);
      complex7.abs();
      complex3.atan();
      Complex complex14 = complex5.cos();
      complex14.I.add(1466.139126);
      complex12.getField();
      complex3.negate();
      complex7.add(complex10);
      complex8.nthRoot(1709);
      complex11.sqrt();
      complex13.sin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.NaN.abs();
      Complex complex2 = complex1.INF.cosh();
      complex0.subtract(complex1);
      complex2.INF.add(complex1);
      complex1.add(complex0);
      complex2.ZERO.reciprocal();
      Complex complex3 = complex2.multiply(38);
      complex3.cosh();
      complex3.acos();
      int int0 = (-658);
      try { 
        complex1.nthRoot((-658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -658
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-528.70168448622), 2.2185957416622524E-48);
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.sqrt1z();
      complex0.getReal();
      complex1.log();
      Complex complex4 = complex1.multiply((-490.7551594440486));
      complex4.INF.pow(Double.NaN);
      complex4.ONE.sin();
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.INF.add(complex2);
      complex6.INF.multiply(Double.NaN);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex7.createComplex(0.0, 0.0);
      Complex complex9 = complex7.sqrt();
      Complex complex10 = Complex.valueOf(0.2501201629638672);
      complex8.ONE.toString();
      complex10.ONE.createComplex(Double.NaN, 0.0);
      complex0.cos();
      complex8.NaN.pow(2.2185957416622524E-48);
      complex8.nthRoot(587);
      Complex.valueOf((-490.7551594440486), 0.2501201629638672);
      complex8.getField();
      complex3.multiply(587);
      complex9.pow((-1175.338));
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      complex0.I.hashCode();
      Complex complex1 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex0.subtract(6.283185307179586);
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex5 = complex0.divide(complex3);
      complex5.NaN.divide(complex1);
      complex5.ZERO.getArgument();
      complex1.log();
      Complex complex6 = complex4.multiply(696);
      complex6.exp();
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.NaN.multiply(988);
      complex2.ZERO.readResolve();
      complex2.NaN.getArgument();
      complex0.isInfinite();
      complex0.acos();
      complex2.equals((Object) null);
      complex1.reciprocal();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(2854.447117, 2854.447117);
      Complex complex1 = complex0.atan();
      complex1.I.hashCode();
      Complex complex2 = complex1.ONE.add(complex0);
      complex2.ONE.conjugate();
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex.valueOf(2854.447117, 2854.447117);
      Complex complex5 = complex4.ONE.divide(2.0003490682463053E196);
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex0.subtract(2854.447117);
      Complex complex8 = complex1.pow(2854.447117);
      complex8.toString();
      Complex complex9 = complex0.I.log();
      Complex complex10 = complex9.NaN.log();
      Complex complex11 = complex10.asin();
      complex7.ZERO.log();
      Complex complex12 = complex0.createComplex(0.0, 2785.00425);
      complex12.ONE.hashCode();
      Complex.valueOf(0.0, 2854.447117);
      Complex complex13 = complex7.ONE.add(complex11);
      complex5.readResolve();
      complex12.abs();
      complex6.hashCode();
      complex9.multiply(complex7);
      Complex.valueOf(32.7659346203, 0.0);
      complex13.nthRoot(2075);
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1671.44933098737);
      complex0.ZERO.getField();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.multiply((-418));
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex3.INF.add(0.0);
      complex0.nthRoot(2124);
      Complex complex5 = Complex.INF;
      complex5.INF.sqrt();
      complex3.NaN.log();
      complex0.add(complex5);
      complex4.multiply(0.0);
      Complex complex6 = complex2.multiply(0.0);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-468.8456));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sqrt();
      complex2.INF.log();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = Complex.valueOf(4.940883275207154E117, (-1571.3764668298463));
      Complex complex5 = complex4.conjugate();
      complex5.multiply(complex0);
      complex3.ONE.reciprocal();
      Complex complex6 = complex3.INF.subtract((-468.8456));
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex3.ONE.multiply(0);
      complex0.isNaN();
      complex0.asin();
      Complex complex9 = complex0.log();
      complex9.INF.divide((-468.8456));
      complex9.ONE.readResolve();
      complex7.reciprocal();
      Complex complex10 = complex3.tan();
      complex2.hashCode();
      complex1.ZERO.log();
      complex10.I.createComplex((-468.8456), 0);
      Complex.valueOf((-1573.903213));
      complex10.ONE.sinh();
      complex6.isInfinite();
      complex2.subtract(4.940883275207154E117);
      Complex complex11 = complex8.acos();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      complex0.NaN.sinh();
      Complex complex2 = complex1.add(complex0);
      complex2.INF.sqrt1z();
      complex1.ONE.subtract(0.0);
      complex0.getArgument();
      Complex complex3 = complex1.ZERO.sin();
      complex3.ZERO.subtract((-20.0));
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = complex0.multiply(1);
      Complex complex6 = complex5.acos();
      complex1.acos();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex7.ZERO.multiply(1.5707963267948966);
      complex8.INF.sinh();
      Complex complex9 = complex1.divide(939.6066416547155);
      Complex complex10 = complex9.sin();
      Complex complex11 = complex7.ZERO.asin();
      Complex complex12 = Complex.valueOf(3792.615934974859, 0.0);
      Complex complex13 = complex0.atan();
      complex6.getArgument();
      complex13.I.abs();
      Complex complex14 = complex6.multiply(complex3);
      complex4.add(complex10);
      Complex complex15 = complex14.pow(complex7);
      complex11.add(complex13);
      complex7.multiply(complex12);
      complex15.negate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-951.53986360502));
      Complex complex1 = complex0.INF.createComplex((-1), 1.986821492305628E-8);
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex0.sin();
      complex1.abs();
      complex1.ONE.pow(complex2);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex4.I.exp();
      complex1.equals(complex3);
      complex5.nthRoot(1);
      complex0.readResolve();
      complex4.createComplex((-1), (-1.0));
      Complex.valueOf((-823.304));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-4009.2474));
      complex0.divide(2.4621305031382827E-33);
      complex0.divide(410.2364);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.subtract((-2.5731071572354522E-8));
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.subtract(complex2);
      Complex complex7 = complex3.sinh();
      complex4.getArgument();
      Complex complex8 = complex0.divide((-2.5731071572354522E-8));
      complex8.ZERO.add(complex5);
      Complex complex9 = complex6.multiply(0.0);
      complex1.abs();
      complex3.INF.cosh();
      Complex complex10 = complex8.sqrt1z();
      complex10.INF.nthRoot(1);
      complex10.createComplex(0.0, (-1506.821771));
      complex9.sqrt1z();
      Object object0 = complex9.readResolve();
      complex7.equals(object0);
      complex8.readResolve();
      complex2.getImaginary();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      complex1.I.add(349.3283345867609);
      Complex complex2 = complex0.INF.add(complex1);
      complex0.NaN.tan();
      complex0.NaN.readResolve();
      complex0.readResolve();
      Complex complex3 = complex1.atan();
      complex2.ZERO.add(complex0);
      Complex complex4 = complex0.add(complex3);
      complex4.I.add(0.0);
      complex2.pow(5.482208065983983E-194);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.pow(complex0);
      complex0.INF.negate();
      complex0.nthRoot(17);
      Complex complex3 = complex0.pow((-375.12927707027));
      complex2.exp();
      complex2.divide(0.0);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-2388.6783));
      Complex complex1 = complex0.add((-2388.6783));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.I.asin();
      complex2.INF.conjugate();
      Complex complex4 = complex0.ONE.add(complex2);
      complex4.NaN.reciprocal();
      complex4.NaN.subtract((-1.3334367969274016E-50));
      complex1.getArgument();
      Complex complex5 = complex2.multiply(0.0);
      complex5.asin();
      Complex complex6 = Complex.valueOf((-2813.607819695696));
      complex6.getArgument();
      Complex complex7 = complex0.NaN.createComplex(3.141592653589793, (-2388.6783));
      complex7.ONE.sqrt();
      double double0 = 0.0;
      complex3.multiply(0.0);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex((-6613.95));
      complex0.ONE.toString();
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = Complex.valueOf((-6613.95), (-2601.4032334312));
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex0.divide((-6613.95));
      complex2.ONE.subtract(4310.21760208423);
      complex5.atan();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex0.INF.sinh();
      complex7.INF.nthRoot(997);
      complex6.nthRoot(1);
      complex3.getImaginary();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.sin();
      complex2.ZERO.getArgument();
      complex2.ZERO.toString();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex0.divide(complex1);
      complex4.getField();
      complex1.NaN.log();
      Complex complex5 = complex3.INF.pow(728.7778696250115);
      Complex.valueOf(0.0, 0.0);
      complex5.ZERO.sqrt();
      complex5.ONE.hashCode();
      complex5.I.tanh();
      Complex.valueOf((-20.0));
      complex1.getReal();
      complex0.readResolve();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      complex0.I.sin();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.I.divide(complex0);
      complex1.ONE.sqrt1z();
      complex3.INF.log();
      Complex complex4 = complex0.add(complex1);
      complex0.ZERO.subtract(complex3);
      complex4.NaN.add(0.0);
      Complex complex5 = complex4.NaN.subtract(0.0);
      complex5.I.reciprocal();
      Complex complex6 = Complex.valueOf(1497.9595224218535, 0.0);
      complex6.I.sqrt1z();
      Complex complex7 = complex0.acos();
      Complex complex8 = Complex.I;
      complex8.ZERO.tan();
      complex7.subtract(complex8);
      complex0.cosh();
      Complex.valueOf(0.0);
      Complex complex9 = complex7.createComplex(0.0, 0.0);
      complex9.pow(535.2915);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = (-4.0151502150238136E-8);
      complex0.I.cos();
      Complex complex1 = complex0.I.multiply((-4.0151502150238136E-8));
      complex1.ZERO.log();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.I.createComplex(0.0, 2685.6);
      complex2.ONE.readResolve();
      complex0.INF.abs();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.INF.subtract(0.0);
      Complex complex5 = complex2.ONE.pow(complex3);
      Complex complex6 = Complex.valueOf(22.80777720796574);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 6.283185307179586);
      assertTrue(complex7.isInfinite());
      
      complex0.isNaN();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.I.multiply(complex4);
      complex8.INF.hashCode();
      complex8.I.getArgument();
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex6.tan();
      assertEquals(1.0644961540174396, complex12.getReal(), 0.01);
      
      Complex complex13 = complex11.I.subtract(complex2);
      Complex complex14 = complex13.ZERO.cos();
      Complex complex15 = complex11.negate();
      Complex complex16 = complex15.NaN.log();
      complex13.ZERO.createComplex(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex17 = complex11.tan();
      complex17.I.exp();
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertEquals((-3.7235625327063044E-4), complex17.getImaginary(), 0.01);
      
      Complex complex18 = complex4.sinh();
      assertTrue(complex4.equals((Object)complex9));
      
      complex11.hashCode();
      Complex.valueOf(1589.49987, Double.POSITIVE_INFINITY);
      Complex complex19 = complex14.divide(2685.6);
      Complex complex20 = complex19.NaN.cosh();
      assertNotSame(complex20, complex18);
      assertSame(complex20, complex16);
      
      Complex complex21 = complex19.divide(complex6);
      assertEquals(1.6325846534029958E-5, complex21.getReal(), 0.01);
      
      double double0 = complex10.getArgument();
      assertTrue(complex10.equals((Object)complex5));
      assertEquals(0.0, double0, 0.01);
  }
}
