/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:05:27 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.pow(1.5707963267948966);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.log();
      complex1.equals(complex2);
      complex3.isInfinite();
      complex0.divide(complex3);
      complex0.sqrt();
      Complex complex5 = new Complex(6.283185307179586);
      complex4.abs();
      complex3.abs();
      Complex complex6 = complex0.createComplex(1670.229681, 6.154786508667658E261);
      Complex complex7 = complex2.atan();
      complex6.log();
      complex6.pow(1397.9954804697975);
      Complex complex8 = complex6.add(2.9526468566013895E-7);
      Complex complex9 = complex1.asin();
      complex1.nthRoot(17);
      complex8.sqrt1z();
      complex3.hashCode();
      complex9.tan();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.getArgument();
      Complex complex2 = complex1.pow(3.947457923821984E-183);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.asin();
      complex1.log();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex1.isInfinite();
      Complex complex5 = complex4.divide(complex2);
      complex5.createComplex(1.5707963267948966, 0.0);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = new Complex(1.3895451488688666);
      complex7.abs();
      complex6.abs();
      complex2.createComplex(1.0, 1.0311034276196487E-7);
      Complex complex8 = new Complex(3.947457923821984E-183);
      Complex complex9 = complex8.atan();
      complex1.log();
      Complex complex10 = complex8.pow(1.5707963267948966);
      complex0.add(431.72471405);
      complex7.asin();
      complex9.createComplex(1.0311034276196487E-7, 2.904884772864E13);
      complex1.nthRoot(17);
      Complex complex11 = complex1.sqrt1z();
      complex10.atan();
      complex2.hashCode();
      complex5.tan();
      complex4.add(complex11);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2270.996635919665), Double.POSITIVE_INFINITY);
      complex1.multiply((-187));
      complex1.ONE.getArgument();
      complex0.nthRoot(3001);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2270.996635919665), Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2262.744), Double.POSITIVE_INFINITY);
      complex1.multiply((-2262.744));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(19.46293763117983);
      complex0.ZERO.subtract(complex2);
      Complex complex3 = Complex.valueOf(20.0, 19.46293763117983);
      complex3.tanh();
      complex1.readResolve();
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      complex2.abs();
      complex1.acos();
      Complex complex3 = new Complex((-3.7999795083850525E-8), Double.POSITIVE_INFINITY);
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.multiply(37);
      Complex complex2 = complex1.ONE.reciprocal();
      complex0.ONE.nthRoot(1561);
      Complex complex3 = complex0.pow((-20.0));
      Complex complex4 = complex0.createComplex((-20.0), (-1096.9532632807288));
      complex4.add((double) 1561);
      complex4.cosh();
      complex3.ONE.multiply((-3172));
      complex2.multiply(complex1);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.NaN.cosh();
      complex8.NaN.subtract(complex5);
      complex4.getField();
      Complex complex9 = complex4.cos();
      Complex complex10 = complex9.INF.asin();
      Complex complex11 = complex9.INF.negate();
      complex4.tanh();
      Complex complex12 = complex2.pow(0.9060367009005804);
      Complex complex13 = complex0.tanh();
      complex12.I.multiply(37);
      complex13.NaN.pow((double) (-3172));
      complex1.multiply(37);
      complex10.cos();
      complex7.multiply(complex12);
      Complex complex14 = complex6.createComplex(1448.91, (-20.0));
      complex14.I.add((-1096.9532632807288));
      complex8.nthRoot(37);
      complex11.multiply(0.9060367009005804);
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2229.482621), 2797.04990442954);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(984.3, 4466.0);
      complex0.sinh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(2.0);
      complex1.I.readResolve();
      complex0.ZERO.asin();
      Complex complex2 = complex1.multiply(1595);
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex3.ZERO.exp();
      complex4.I.negate();
      complex1.readResolve();
      Complex complex5 = Complex.valueOf(2.0);
      Complex complex6 = Complex.valueOf(2.0);
      complex6.NaN.createComplex((-753.009426879346), (-753.009426879346));
      complex1.divide(complex6);
      Complex complex7 = complex5.I.pow((-875.2421155182614));
      complex7.INF.tanh();
      Complex.valueOf(139.3598674);
      complex5.I.add(complex6);
      complex7.negate();
      Complex complex8 = complex5.add((-2.0406580894051073E243));
      complex8.multiply(complex2);
      complex8.ZERO.toString();
      complex6.pow(complex5);
      complex1.nthRoot(1595);
      Complex complex9 = complex5.createComplex((-2.0406580894051073E243), 2.0);
      Complex complex10 = complex9.NaN.divide((-875.2421155182614));
      complex9.acos();
      complex6.add((-875.2421155182614));
      complex1.log();
      complex10.tanh();
      complex4.sin();
      complex3.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = Complex.valueOf((-360.675550227));
      Complex complex2 = complex1.multiply(complex0);
      complex1.getField();
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 6.283185307179586);
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.subtract((-360.675550227));
      Complex complex7 = Complex.NaN;
      complex5.pow(complex7);
      complex6.multiply(complex1);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      complex2.abs();
      complex2.asin();
      complex1.acos();
      Complex complex3 = new Complex((-3.7999795083850525E-8), Double.POSITIVE_INFINITY);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.nthRoot(382);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.add((double) 382);
      Complex complex3 = complex1.tan();
      complex3.divide(4528.059325797041);
      complex2.getField();
      Complex complex4 = complex2.multiply(complex1);
      complex3.getField();
      Complex complex5 = Complex.ONE;
      Object object0 = complex2.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.log();
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      complex2.tan();
      Complex complex3 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.nthRoot(382);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex.valueOf((double) 382);
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-2927.9317587294));
      complex0.abs();
      complex0.ONE.sin();
      complex0.asin();
      Complex complex1 = Complex.INF;
      complex1.tan();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.asin();
      complex1.ONE.log();
      complex0.isNaN();
      Complex complex3 = complex2.sqrt();
      complex3.ONE.subtract(complex0);
      complex0.abs();
      complex3.atan();
      Complex complex4 = complex3.log();
      Complex complex5 = complex1.pow(20.0);
      complex4.divide(Double.NaN);
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(559.3389468, 559.3389468);
      Complex complex1 = new Complex(559.3389468, 559.3389468);
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.add(complex0);
      complex1.NaN.getField();
      Complex complex4 = complex0.ZERO.add(complex2);
      complex4.ONE.negate();
      Complex complex5 = complex0.add(complex1);
      complex5.cosh();
      Complex complex6 = complex5.conjugate();
      complex0.INF.toString();
      Complex complex7 = complex0.cos();
      complex2.toString();
      Complex complex8 = complex2.subtract(complex6);
      Complex complex9 = complex6.add((-638.278927));
      complex9.ZERO.exp();
      complex8.tanh();
      Complex complex10 = complex0.I.divide((-20.0));
      complex10.I.cosh();
      complex0.divide(559.3389468);
      complex3.conjugate();
      Complex.valueOf(1350.9505153);
      complex7.abs();
      complex5.readResolve();
      Complex.valueOf((-1.0), 1350.9505153);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.pow(1.5995566844940186);
      complex0.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = complex1.ONE.log();
      complex0.isNaN();
      complex2.divide(complex4);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = new Complex(0.0);
      complex5.add(complex3);
      complex7.abs();
      complex0.abs();
      complex3.createComplex(1.5995566844940186, (-2793.635282642754));
      complex5.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(5.415131809829094E-8, 5.415131809829094E-8);
      Complex complex1 = Complex.NaN;
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.ONE.divide(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.valueOf((-1.0), 5.415131809829094E-8);
      Complex complex5 = complex4.sinh();
      complex5.ZERO.asin();
      Complex.valueOf(5.415131809829094E-8, (-1.2394309433209758E7));
      complex3.toString();
      Complex.valueOf(1.0098135471343994, (-1.0));
      complex5.multiply(719.430636408586);
      complex3.acos();
      complex1.cosh();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-439.2194030410896));
      Complex complex2 = new Complex((-439.21940304109));
      complex2.asin();
      complex0.asin();
      Complex complex3 = Complex.valueOf(-0.0, (-439.2194030410896));
      Complex complex4 = Complex.I;
      complex4.multiply(complex1);
      complex3.sin();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.divide(4.4228706309734985E-8);
      Complex complex7 = complex4.multiply(2814);
      complex7.multiply(Double.POSITIVE_INFINITY);
      complex6.divide(4.4228706309734985E-8);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.asin();
      complex0.tan();
      complex1.log();
      Complex.valueOf(1.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.1064911705560668E176);
      Complex complex2 = new Complex((-9.149755188170102E-9));
      Complex complex3 = complex1.asin();
      complex0.add(1.0);
      complex2.getField();
      complex3.tan();
      Complex.valueOf(1459.9307282102186, 2.1064911705560668E176);
      complex0.getField();
      complex3.multiply(complex3);
      complex3.getField();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1722.8, 0.48068851232528687);
      Complex complex1 = Complex.NaN;
      complex1.ONE.subtract(complex0);
      complex0.pow(complex1);
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-50.4896582));
      Complex complex1 = new Complex((-50.4896582));
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(6.778144952019354);
      Complex complex2 = new Complex(6.778144952019354);
      Complex complex3 = new Complex(6.778144952019354, (-2083.407));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.add(745.728);
      complex4.getField();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex5.divide(1459.9307282102186);
      complex8.getField();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex6.multiply(complex9);
      complex10.getField();
      Complex complex11 = Complex.ONE;
      complex7.pow(complex6);
      Complex complex12 = complex4.divide(1459.9307282102186);
      complex12.ZERO.hashCode();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.nthRoot(382);
      Complex complex1 = new Complex((-1534.986959455625));
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 382);
      Complex complex3 = complex2.multiply(complex1);
      complex3.sin();
      Complex complex4 = Complex.ZERO;
      complex4.ONE.divide((-1534.986959455625));
      Complex complex5 = complex4.multiply(2814);
      Complex complex6 = complex1.multiply(2447.095616);
      complex5.divide(Double.POSITIVE_INFINITY);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0662027949814858E-7));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.valueOf((-2119.764530555), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.INF.asin();
      complex3.I.readResolve();
      Complex complex4 = complex3.ZERO.divide(1430.0906782203);
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex2.cos();
      complex5.INF.sqrt1z();
      complex7.divide(complex3);
      complex6.ZERO.cosh();
      Complex complex8 = Complex.valueOf((-2694.8842891939926), 1156.46);
      complex4.ONE.divide(complex8);
      Complex complex9 = complex8.I.subtract(complex3);
      Complex complex10 = complex8.ZERO.conjugate();
      complex5.readResolve();
      Complex complex11 = complex0.multiply(complex3);
      Complex complex12 = Complex.valueOf(0.9999982260306516);
      complex9.NaN.multiply(complex12);
      Complex complex13 = complex2.sqrt();
      complex13.conjugate();
      complex9.multiply((-340));
      complex4.acos();
      complex11.getField();
      Complex complex14 = complex6.createComplex((-2119.764530555), 0.9999982260306516);
      complex14.ONE.conjugate();
      complex1.conjugate();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.log();
      complex1.isNaN();
      complex1.isNaN();
      Complex complex4 = new Complex(Double.NaN);
      complex4.divide(complex2);
      complex4.sqrt();
      Complex complex5 = new Complex(2500.87596);
      complex4.abs();
      Complex complex6 = Complex.valueOf(Double.NaN, 2500.87596);
      complex6.abs();
      Complex complex7 = complex6.createComplex(0.013758401956897585, 1.6385396676990034E-7);
      complex7.atan();
      complex6.log();
      Complex complex8 = Complex.I;
      complex8.pow(445.5884719);
      complex5.add(1.6385396676990034E-7);
      try { 
        complex3.nthRoot((-205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -205
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1);
      complex0.hashCode();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((double) 1, (-1540.5650253));
      complex0.pow(complex1);
      Complex.valueOf(975.0271874, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(106.9931765);
      complex0.abs();
      complex0.abs();
      complex0.I.nthRoot(1219);
      Complex complex1 = new Complex(106.9931765);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.sin();
      complex3.multiply(4132);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(7.630546413718035E-10, 7.630546413718035E-10);
      Complex complex1 = complex0.INF.multiply(7.630546413718035E-10);
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.NaN.pow((-1.8021197722549054E-8));
      Complex complex4 = complex0.subtract((-1.8021197722549054E-8));
      Complex complex5 = Complex.valueOf(1.2252256870269775);
      Complex complex6 = complex0.subtract(7.630546413718035E-10);
      complex6.I.acos();
      Complex complex7 = complex0.reciprocal();
      complex7.NaN.cos();
      complex5.getField();
      Complex complex8 = complex3.sqrt();
      complex8.ONE.pow(complex2);
      complex8.equals("FAILED_FRACTION_CONVERSION");
      complex3.sqrt1z();
      Complex.valueOf((-29.31174023539), 3150.0);
      Complex complex9 = complex4.sqrt();
      complex9.add(1843.9);
      complex3.sqrt();
      Complex complex10 = complex3.subtract((-2970.99377898));
      complex10.multiply(1080);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(106.9931765);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.add((-20.0));
      complex3.getField();
      complex2.tan();
      Complex complex4 = Complex.ONE;
      complex4.getField();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex0.createComplex(106.9931765, 2607.931819315);
      complex6.INF.abs();
      complex5.getField();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.atan();
      complex8.hashCode();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(619.0);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-21.455824064320453), (-21.455824064320453));
      Complex complex1 = complex0.multiply(1219);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.createComplex((-21.455824064320453), 1.0);
      complex0.getField();
      complex4.reciprocal();
      Complex complex5 = complex1.subtract(402.91604290235);
      complex2.divide(complex0);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      // Undeclared exception!
      complex0.nthRoot(434039601);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.I.readResolve();
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.I.multiply(79);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex0.I.conjugate();
      Complex complex7 = complex5.ZERO.acos();
      complex6.I.asin();
      Complex complex8 = (Complex)complex4.readResolve();
      Complex complex9 = complex3.acos();
      complex9.NaN.subtract(complex3);
      complex9.abs();
      complex0.I.sqrt();
      Complex complex10 = complex6.add(complex7);
      complex0.acos();
      complex5.tanh();
      complex8.abs();
      complex9.cos();
      complex10.acos();
      complex9.sinh();
      complex3.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.ZERO;
      complex3.equals(complex4);
      Complex complex5 = complex4.negate();
      complex5.atan();
      complex0.acos();
      complex5.abs();
      Complex complex6 = new Complex(0.0, (-3897.97));
      complex6.cos();
      complex1.acos();
      Complex complex7 = Complex.valueOf((-1234.005405739803), (-3897.97));
      complex7.sinh();
      complex3.getField();
      complex2.sin();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex((-14.728267016434756), (-14.728267016434756));
      complex2.log();
      complex3.tanh();
      complex3.add((-14.728267016434756));
      Complex.valueOf((-2739.098474940477));
      Complex complex4 = complex2.divide((-2739.098474940477));
      complex4.tanh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.asin();
      complex1.readResolve();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.subtract(complex2);
      complex1.abs();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = new Complex(1.4674011002723395, 0.634147739988177);
      complex7.add(complex8);
      complex1.acos();
      Complex complex9 = complex3.tanh();
      complex5.add(1376.43723605);
      complex9.equals(complex0);
      complex4.isNaN();
      Complex complex10 = new Complex(1376.43723605, 0.0);
      complex10.getArgument();
      Complex complex11 = Complex.NaN;
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.divide((-2328.79537803756));
      complex2.getField();
      complex1.ONE.getField();
      complex0.INF.pow(complex1);
      complex0.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), (-1626.32240326));
      Complex complex2 = complex0.INF.multiply(complex1);
      complex2.readResolve();
      Complex complex3 = complex2.ZERO.subtract((-20.0));
      Complex complex4 = complex3.sqrt();
      complex4.INF.pow(complex2);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex2.tanh();
      complex7.ONE.pow(complex1);
      complex3.equals(complex6);
      complex3.negate();
      Complex complex8 = complex7.atan();
      complex8.NaN.acos();
      complex1.abs();
      complex0.cos();
      complex2.acos();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = new Complex((-2641.78435054816));
      complex2.pow(2.009373308933024);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex0.multiply(2821.3618478278513);
      Complex complex6 = Complex.valueOf(0.7249995199969751, 1150.2262044);
      Complex complex7 = complex4.atan();
      complex7.abs();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = new Complex((-1.6379825102473853E-8));
      complex9.sqrt1z();
      complex8.nthRoot(1);
      Complex complex10 = complex2.pow(complex5);
      Complex complex11 = complex3.add((-200.469612));
      complex0.cos();
      complex10.reciprocal();
      complex11.toString();
      complex6.tan();
      complex2.hashCode();
      complex2.getImaginary();
      complex4.readResolve();
      Complex complex12 = Complex.ZERO;
      complex6.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.I.multiply(complex0);
      Complex complex2 = Complex.I;
      complex2.ONE.toString();
      Complex complex3 = Complex.INF;
      complex3.multiply(1011.7);
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.ONE;
      complex4.getReal();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1722.8, 0.48068851232528687);
      Complex complex1 = complex0.acos();
      complex0.sin();
      Complex complex2 = complex0.pow(1722.8);
      Complex complex3 = complex2.add(1722.8);
      Complex complex4 = complex1.divide(1657.212958746971);
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.divide(complex0);
      Complex complex7 = complex6.tan();
      complex7.readResolve();
      complex7.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.NaN.createComplex(Double.NaN, 0.0);
      Complex complex2 = new Complex(Double.NaN);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex2.INF.divide(complex4);
      complex5.I.pow((-2641.78435054816));
      complex5.NaN.add(complex4);
      Complex complex6 = complex4.INF.subtract(complex2);
      complex6.NaN.multiply((-9.3939454));
      Complex complex7 = Complex.valueOf(0.0, 1758.11713709);
      Complex complex8 = complex0.ONE.atan();
      complex8.I.abs();
      Complex complex9 = Complex.valueOf(Double.NaN);
      Complex complex10 = complex9.ONE.sqrt1z();
      complex10.nthRoot(1);
      complex9.I.pow(complex4);
      complex7.ONE.add((-1.0));
      complex0.ZERO.cos();
      Complex complex11 = complex7.reciprocal();
      complex2.toString();
      Complex complex12 = complex11.tan();
      complex11.hashCode();
      complex1.getImaginary();
      complex10.ZERO.readResolve();
      complex6.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.I.readResolve();
      Complex complex2 = complex0.ONE.add(complex1);
      int int0 = 79;
      complex2.I.multiply(79);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex0.I.conjugate();
      Complex complex7 = complex5.ZERO.acos();
      complex6.I.asin();
      complex4.readResolve();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex5.atan();
      complex9.NaN.subtract(complex3);
      complex8.abs();
      complex0.I.sqrt();
      Complex complex10 = complex6.add(complex7);
      complex0.acos();
      Complex complex11 = complex10.tanh();
      complex8.I.add(4.0);
      Complex complex12 = complex10.ZERO.sqrt1z();
      complex11.NaN.sinh();
      complex12.INF.cosh();
      complex11.ONE.negate();
      try { 
        complex11.ONE.nthRoot((-3022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,022
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(1.5995566844940186);
      complex0.hashCode();
      Complex complex2 = Complex.I;
      complex1.I.getArgument();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = (Complex)complex2.readResolve();
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex2.ONE.log();
      complex5.equals(complex6);
      complex4.isNaN();
      complex0.getArgument();
      complex5.acos();
      complex3.sin();
      Complex complex7 = complex6.pow(1.5707963267948966);
      Complex complex8 = complex4.add(1014.20179804538);
      complex7.divide(0.0);
      Complex complex9 = complex2.multiply(complex0);
      Complex complex10 = Complex.valueOf((-3751.3561), 1651.65);
      complex10.INF.abs();
      complex10.divide(complex8);
      complex9.multiply((-2045222521));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3211.1934, Double.NaN);
      Complex complex2 = complex0.log();
      complex2.multiply(Double.NaN);
      complex0.log();
      complex1.negate();
      complex1.conjugate();
      complex2.abs();
      Complex complex3 = Complex.ONE;
      complex3.ZERO.sqrt();
      complex3.getReal();
      complex2.sqrt();
      Complex.valueOf(4.4896127778163155E38);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.add(2.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex1.asin();
      complex1.sqrt();
      complex2.sin();
      Complex complex3 = Complex.valueOf(2.0, (-3156.1126803563207));
      complex3.getField();
      complex1.sqrt1z();
      complex2.sin();
      Complex.valueOf((-3156.1126803563207), 0.0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.ZERO.acos();
      complex1.NaN.sqrt1z();
      Complex complex4 = complex0.multiply(2274);
      complex4.createComplex(7.120586694432509E53, 7.120586694432509E53);
      complex1.subtract(complex4);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.reciprocal();
      complex0.hashCode();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex7.divide(complex8);
      Complex complex10 = Complex.ONE;
      complex10.sqrt();
      complex4.abs();
      complex0.abs();
      complex3.createComplex(2274.0, 1.0);
      complex5.atan();
      Complex complex11 = complex9.log();
      complex11.ZERO.atan();
      complex11.pow(7.120586694432509E53);
      complex2.add(17.517320092907617);
      complex4.nthRoot(1198);
      complex6.sqrt1z();
      complex7.atan();
      Complex complex12 = Complex.I;
      complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.asin();
      complex1.ZERO.pow(complex0);
      Complex complex4 = complex0.pow((-1294.15213));
      complex2.subtract((-1294.15213));
      Complex complex5 = complex0.conjugate();
      complex2.subtract(906.2033314);
      Complex complex6 = complex2.add((-4.949331199790077E-8));
      complex4.subtract(906.2033314);
      Complex complex7 = complex1.asin();
      complex4.sqrt();
      Complex complex8 = complex7.tan();
      complex7.divide(complex8);
      complex0.multiply(complex3);
      complex5.cosh();
      complex6.sqrt1z();
      Complex complex9 = Complex.valueOf((-2434.683918705078));
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.cos();
      Complex complex1 = Complex.valueOf(0.0, 2.6869297963554945E-8);
      Complex complex2 = complex1.multiply((-5.0054634662706464E-9));
      complex2.tanh();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(1.5995566844940186);
      complex0.hashCode();
      Complex complex2 = Complex.I;
      complex1.I.getArgument();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = (Complex)complex2.readResolve();
      Complex complex5 = complex0.ONE.asin();
      complex2.ONE.log();
      complex0.equals(complex4);
      complex1.isNaN();
      complex3.divide(complex5);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = new Complex(0.0);
      complex7.abs();
      complex0.abs();
      Complex complex8 = complex4.createComplex(1.5995566844940186, (-2793.635282642754));
      Complex complex9 = complex6.atan();
      Complex complex10 = complex6.log();
      Complex complex11 = complex2.pow(20.0);
      complex10.add(1.5707963267948966);
      complex8.nthRoot(17);
      complex11.sqrt1z();
      complex9.atan();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.asin();
      complex1.I.asin();
      Complex complex2 = complex0.NaN.add(0.0);
      complex2.I.getField();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex3.INF.subtract((-513.91454));
      complex5.INF.multiply(17);
      Complex complex7 = complex5.createComplex((-513.91454), (-513.91454));
      complex5.ZERO.getField();
      complex4.pow((-513.91454));
      complex3.add((-2901.836037401821));
      Complex complex8 = complex6.divide(6.283185307179586);
      complex8.multiply(complex7);
      complex6.divide(complex3);
      complex6.multiply((-821));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex((-20.0), 1633.904288536142);
      Complex complex2 = complex0.reciprocal();
      complex2.I.sqrt1z();
      complex2.ONE.getField();
      complex2.ZERO.sinh();
      complex2.getReal();
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex1.reciprocal();
      complex4.pow(complex1);
      complex1.asin();
      complex3.nthRoot(751);
      Complex.valueOf(6.283185307179586);
      Complex.valueOf(1867.8627);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1);
      complex0.hashCode();
      complex0.getImaginary();
      Complex complex1 = complex0.atan();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-20.0));
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.readResolve();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.ZERO.sinh();
      complex2.I.abs();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.I.multiply(complex5);
      complex3.toString();
      Complex complex7 = complex4.ZERO.atan();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex9.subtract(complex8);
      complex8.ONE.sqrt1z();
      complex6.NaN.getArgument();
      complex9.tanh();
      complex8.reciprocal();
      complex2.readResolve();
      complex6.multiply((-77));
      complex10.isInfinite();
      complex1.createComplex(Double.POSITIVE_INFINITY, (-77));
      complex0.hashCode();
      complex7.sqrt1z();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex(0.0, 593.0712229);
      Complex complex2 = complex0.ONE.createComplex((-30.77995850449), 1979.1185);
      complex2.ZERO.log();
      Complex complex3 = complex2.NaN.log();
      complex0.isInfinite();
      Complex complex4 = complex2.conjugate();
      complex0.getImaginary();
      Complex complex5 = complex4.cosh();
      complex0.readResolve();
      complex0.getField();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex3.sin();
      complex5.getArgument();
      complex7.multiply(0.0);
      Complex complex8 = complex7.atan();
      complex8.INF.createComplex(593.0712229, 1979.1185);
      Complex complex9 = complex6.divide(complex1);
      complex2.readResolve();
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1123.4102903722);
      complex0.I.log();
      Complex complex2 = complex1.ONE.add(complex0);
      complex1.isInfinite();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex5.NaN.divide(complex3);
      complex2.log();
      complex4.multiply(1123.4102903722);
      complex6.add(2680.656);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      complex1.I.exp();
      complex0.INF.getField();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.NaN.add(2.9240221157844312E-8);
      complex1.ONE.cos();
      complex4.ZERO.abs();
      Complex complex5 = Complex.valueOf(2.9240221157844312E-8);
      Complex complex6 = complex0.sqrt1z();
      complex6.INF.divide(884.7599);
      complex2.ONE.sin();
      complex3.getField();
      complex5.ZERO.subtract(2.9240221157844312E-8);
      complex3.sqrt1z();
      complex2.INF.multiply((-982));
      complex5.multiply((-172));
      complex3.NaN.getArgument();
      complex5.cosh();
      complex2.toString();
      complex4.equals(complex6);
      Complex complex7 = complex4.asin();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = (-852.2269461634319);
      Complex complex0 = new Complex((-852.2269461634319), (-852.2269461634319));
      Complex complex1 = complex0.multiply((-4882));
      complex0.I.abs();
      complex1.cos();
      Complex complex2 = complex1.I.sqrt();
      complex2.INF.cosh();
      complex0.getArgument();
      Complex complex3 = complex0.tanh();
      complex2.getField();
      complex0.atan();
      complex1.asin();
      complex2.conjugate();
      Complex complex4 = complex2.multiply(complex3);
      complex4.ZERO.exp();
      complex2.abs();
      Complex complex5 = complex2.subtract(complex3);
      try { 
        complex5.NaN.nthRoot((-2025));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,025
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2996.332329049282));
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex2.INF.add(complex1);
      complex0.getReal();
      Complex complex3 = complex1.reciprocal();
      complex3.ZERO.sqrt();
      Complex complex4 = complex3.ONE.asin();
      complex4.ZERO.hashCode();
      Complex complex5 = complex1.add(complex3);
      complex5.asin();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.asin();
      complex1.I.asin();
      Complex complex2 = complex0.NaN.add(0.0);
      complex2.I.getField();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex4.acos();
      complex3.INF.subtract((-513.91454));
      complex5.INF.multiply(17);
      complex5.createComplex((-513.91454), (-513.91454));
      complex5.ZERO.getField();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex2.sqrt();
      complex0.sin();
      complex6.getField();
      complex6.sqrt1z();
      complex7.sin();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.NaN.add(330.2040262405);
      complex2.negate();
      complex1.getArgument();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex3.subtract(-0.0);
      Complex complex6 = complex0.conjugate();
      complex5.NaN.multiply(complex4);
      complex6.ONE.getArgument();
      complex6.I.add(complex1);
      complex3.sin();
      int int0 = (-2968);
      try { 
        complex3.nthRoot((-2968));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,968
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4366366863250732);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.NaN.nthRoot(7);
      complex0.NaN.subtract(complex1);
      complex0.INF.negate();
      Complex.valueOf(1.4366366863250732);
      complex1.I.toString();
      complex0.multiply(17);
      complex0.multiply(17);
      Complex.valueOf((double) 17, 0.0);
      Complex.valueOf(0.0);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.NaN.createComplex(Double.NaN, 0.0);
      Complex complex2 = new Complex(Double.NaN);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex2.INF.divide(complex4);
      complex5.NaN.add(complex4);
      Complex complex6 = complex4.INF.subtract(complex2);
      complex6.NaN.multiply((-9.3939454));
      Complex complex7 = Complex.valueOf(0.0, 1758.11713709);
      Complex complex8 = complex0.ONE.atan();
      complex8.I.abs();
      Complex complex9 = Complex.valueOf(Double.NaN);
      Complex complex10 = complex9.ONE.sqrt1z();
      complex10.nthRoot(1);
      complex9.I.pow(complex4);
      complex7.ONE.add((-1.0));
      complex0.ZERO.cos();
      Complex complex11 = complex7.reciprocal();
      complex2.toString();
      complex11.tan();
      complex11.hashCode();
      complex1.getImaginary();
      complex10.ZERO.readResolve();
      complex10.subtract(2346.67404506219);
      complex11.nthRoot(1);
      complex8.tanh();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.sqrt();
      complex2.NaN.nthRoot(315);
      complex1.nthRoot(315);
      complex1.pow(complex2);
      complex1.exp();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.negate();
      complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2006.05170607));
      Complex complex1 = Complex.valueOf((-2006.05170607));
      Complex complex2 = complex0.tan();
      complex2.INF.sqrt();
      Complex complex3 = complex0.INF.subtract((-2006.05170607));
      Complex complex4 = complex0.divide(998.03299303);
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.ONE.subtract(998.03299303);
      complex4.getReal();
      Complex complex7 = complex0.I.conjugate();
      complex7.ZERO.add(complex2);
      complex3.getReal();
      Complex complex8 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex8.ONE.getField();
      Complex complex9 = complex3.acos();
      complex9.I.pow(complex3);
      Complex complex10 = complex4.exp();
      complex8.getImaginary();
      complex9.subtract(complex7);
      complex6.INF.conjugate();
      complex0.readResolve();
      Complex complex11 = complex2.ONE.conjugate();
      Complex complex12 = complex2.tanh();
      Complex complex13 = complex10.divide(complex9);
      complex13.ZERO.toString();
      Complex complex14 = complex2.cosh();
      complex14.NaN.atan();
      complex12.add(complex0);
      complex11.add(complex5);
      complex6.readResolve();
      complex9.sqrt();
      Complex complex15 = complex10.exp();
      complex1.toString();
      complex0.multiply(0);
      complex15.exp();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(106.9931765);
      complex0.abs();
      complex0.toString();
      complex0.abs();
      complex0.I.nthRoot(1219);
      Complex complex1 = new Complex(2447.095616);
      Complex complex2 = complex0.multiply(complex1);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      Complex complex1 = complex0.createComplex(1.7602040767669678, (-2157.874092));
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex0.add(complex2);
      complex6.toString();
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex2.pow(complex1);
      Complex.valueOf(2.0, 0.0);
      Complex.valueOf(0.0);
      complex4.sinh();
      Complex complex9 = complex7.cosh();
      complex3.readResolve();
      Complex complex10 = complex4.I.acos();
      complex7.NaN.exp();
      complex4.ZERO.cos();
      Complex complex11 = complex10.I.divide((-410.87382349));
      Complex complex12 = complex11.I.reciprocal();
      Complex complex13 = complex8.tanh();
      complex13.INF.atan();
      complex13.ZERO.acos();
      complex9.sin();
      complex5.toString();
      Complex complex14 = complex6.atan();
      complex14.acos();
      complex8.tanh();
      complex12.negate();
      Complex.valueOf(1197.17);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-2728.4029238710427), (-2728.4029238710427));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.I.subtract(complex0);
      Complex complex5 = complex3.sqrt();
      complex5.NaN.abs();
      complex5.subtract((-3085.100769844755));
      complex0.ONE.tan();
      complex3.createComplex(0.0, 0.0);
      Complex complex6 = complex0.createComplex(0.0, 2492.92171016328);
      complex2.pow(Double.NaN);
      complex0.log();
      complex4.hashCode();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(977.20964724, 977.20964724);
      Complex complex2 = complex0.subtract(complex1);
      complex2.I.pow(complex1);
      Complex complex3 = complex0.log();
      complex2.I.reciprocal();
      Complex complex4 = complex3.ZERO.divide(0.0);
      complex4.ZERO.sqrt();
      complex2.equals("HtCE");
      complex0.ONE.readResolve();
      complex3.cosh();
      try { 
        complex3.INF.nthRoot((-523));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -523
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(1.5995566844940186);
      complex0.hashCode();
      Complex complex2 = Complex.I;
      complex1.I.getArgument();
      Complex complex3 = complex2.pow(0.0);
      Object object0 = complex2.readResolve();
      complex0.ONE.asin();
      Complex complex4 = complex2.ONE.log();
      complex0.equals(object0);
      complex1.isNaN();
      complex2.getArgument();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.INF.sin();
      complex1.pow(1.5995566844940186);
      complex1.add(1014.20179804538);
      Complex complex7 = complex4.divide(1651.65);
      complex7.INF.multiply(complex6);
      complex1.divide(complex3);
      complex4.multiply((-821));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.I.sinh();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.multiply((-1554.18));
      complex1.ZERO.sin();
      complex3.sqrt();
      Complex complex4 = complex2.pow(0.0);
      try { 
        complex4.ZERO.nthRoot((-3674));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,674
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2764.116);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.acos();
      complex1.ONE.log();
      complex0.getImaginary();
      complex1.getReal();
      complex2.NaN.createComplex(1328.431829203, 0.0);
      Complex complex3 = complex0.subtract(complex2);
      complex3.I.sin();
      complex3.I.sqrt1z();
      Complex complex4 = complex3.INF.negate();
      complex4.ONE.readResolve();
      int int0 = (-1);
      try { 
        complex2.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.equals("");
      Complex complex1 = Complex.ZERO;
      complex0.add(complex1);
      Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf(0.0, 1531.09750287605);
      complex0.pow(complex2);
      Complex complex3 = complex1.subtract((-861.080563239));
      Complex complex4 = complex3.pow(0.0);
      complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(697.724537, 697.724537);
      Complex complex1 = complex0.ZERO.acos();
      complex1.NaN.abs();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex0.acos();
      complex3.add(complex0);
      complex0.getReal();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex1.I.readResolve();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.INF.divide(complex1);
      Complex complex5 = complex0.subtract(0.0);
      complex4.ONE.pow(complex5);
      complex3.ZERO.nthRoot(1);
      complex3.ZERO.sqrt1z();
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = complex4.asin();
      complex2.toString();
      Complex complex8 = complex6.cosh();
      complex8.ZERO.getArgument();
      complex7.add(complex1);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.nthRoot(1);
      Complex complex1 = Complex.valueOf(24.06018010988);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex1.INF.cos();
      complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.ZERO.cos();
      complex4.reciprocal();
      complex3.I.sin();
      Complex complex5 = complex3.ONE.createComplex(0.01934296265244484, 0.0);
      complex0.hashCode();
      Complex complex6 = complex0.I.divide(complex3);
      Complex complex7 = complex2.pow(complex3);
      complex7.INF.tanh();
      Complex complex8 = complex5.sinh();
      complex8.isInfinite();
      complex0.getField();
      complex1.getReal();
      Complex complex9 = Complex.valueOf(24.06018010988);
      Complex complex10 = complex2.multiply(24.06018010988);
      complex10.NaN.cosh();
      Complex.valueOf(0.0);
      complex10.divide(0.0);
      Complex complex11 = complex5.multiply(494.48);
      complex9.asin();
      Complex.valueOf(494.48, 267.9966662655046);
      Complex complex12 = complex11.add((-4849.4130348));
      complex6.getReal();
      complex12.createComplex((-4849.4130348), 857.9725618828303);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ONE.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.ONE.sqrt();
      complex0.ONE.abs();
      complex3.NaN.sin();
      complex0.isNaN();
      complex1.toString();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.INF;
      complex1.add(1.0);
      Complex complex6 = complex4.I.divide(complex5);
      Complex complex7 = Complex.valueOf(0.0);
      complex7.ZERO.sinh();
      Complex complex8 = complex4.add(complex1);
      complex5.ONE.createComplex(0.3810817003250122, 0.0);
      complex8.INF.getField();
      complex4.I.subtract(1.0);
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.NaN.multiply(1553);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.ONE.tan();
      complex11.ZERO.pow(complex2);
      complex6.multiply(complex11);
      complex6.sqrt();
      Complex complex13 = complex2.asin();
      Complex complex14 = complex13.NaN.log();
      complex14.NaN.pow(complex0);
      complex12.tanh();
      complex10.isInfinite();
      complex8.cos();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(49.233042011797, Double.NaN);
      complex0.NaN.reciprocal();
      Complex.valueOf(0.0, 240.3177155332297);
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.I.tanh();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex1.createComplex((-451.41148889), (-451.41148889));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-3.09044), 0.0);
      complex0.isInfinite();
      Complex.valueOf((-3.09044));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow((-1080.459552));
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex0.cos();
      complex3.tan();
      Complex complex4 = complex2.ONE.multiply(1);
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex5.ZERO.subtract((-2641.78435054816));
      Complex complex7 = complex6.ONE.tanh();
      assertEquals(2641.78435054816, complex6.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex0.ONE.reciprocal();
      assertTrue(complex9.equals((Object)complex4));
      
      Complex complex10 = complex3.tan();
      Complex complex11 = complex5.ZERO.pow(451.646763009);
      Complex complex12 = complex5.reciprocal();
      Complex complex13 = complex0.ZERO.atan();
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      complex1.isNaN();
      complex2.getField();
      assertTrue(complex2.equals((Object)complex11));
      
      Complex complex14 = complex3.I.tanh();
      assertEquals(1.557407724654902, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex5.ONE.add(complex12);
      assertEquals(1.6366197723675815, complex15.getReal(), 0.01);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      Complex complex16 = complex8.multiply(0);
      Complex complex17 = complex16.divide(complex5);
      Complex complex18 = complex17.I.add((-2641.78435054816));
      Complex.valueOf((double) 0, (-1080.459552));
      complex3.negate();
      Complex complex19 = complex18.reciprocal();
      assertEquals((-1.432864792008188E-7), complex19.getImaginary(), 0.01);
      
      complex1.multiply((-1080.459552));
      assertSame(complex1, complex17);
      
      Complex complex20 = Complex.valueOf(1.9782818312325887E-8);
      complex0.equals(complex20);
      assertEquals(1.9782818312325887E-8, complex20.getReal(), 0.01);
      
      Complex complex21 = complex8.multiply(1029);
      assertNotSame(complex21, complex11);
      assertSame(complex21, complex10);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
      
      Complex complex2 = Complex.valueOf((-1.0), Double.NaN);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.multiply((-1.0));
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex2.I.multiply(0.0);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      
      Complex complex9 = complex5.add(complex6);
      assertEquals(1.7615941559557649, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      Complex.valueOf((-1.0), Double.NaN);
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex5.add(Double.NaN);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex11 = complex2.sqrt();
      double double0 = complex3.abs();
      assertSame(complex3, complex10);
      assertSame(complex2, complex11);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.NaN.cos();
      complex1.INF.conjugate();
      try { 
        complex0.I.nthRoot((-1213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,213
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.INF.pow(complex0);
      complex2.asin();
      Complex complex3 = complex1.ZERO.pow(complex0);
      double double0 = (-1294.15213);
      complex0.pow((-1294.15213));
      Complex complex4 = complex1.I.multiply(830);
      complex4.createComplex(830, (-1294.15213));
      complex3.NaN.subtract(complex1);
      complex1.I.reciprocal();
      complex0.INF.hashCode();
      Complex complex5 = complex0.INF.reciprocal();
      complex5.NaN.tan();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(1.0);
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.isInfinite());
      
      Complex complex4 = complex0.divide(complex2);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(864.6390039625774);
      Complex complex1 = complex0.NaN.createComplex(864.6390039625774, 864.6390039625774);
      complex1.ZERO.createComplex(864.6390039625774, 864.6390039625774);
      complex0.createComplex(864.6390039625774, 864.6390039625774);
      Complex complex2 = complex0.add(864.6390039625774);
      complex2.ZERO.hashCode();
      Complex complex3 = Complex.valueOf(864.6390039625774, 1.0);
      assertEquals(864.6390039625774, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.NaN.cos();
      complex2.getImaginary();
      Complex complex5 = complex0.INF.sin();
      double double0 = complex2.abs();
      assertEquals(1729.2780079251547, double0, 0.01);
      
      Complex complex6 = complex0.sqrt();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(29.404744582508744, complex6.getReal(), 0.01);
      
      complex5.getReal();
      assertTrue(complex5.equals((Object)complex4));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1722.8, 0.48068851232528687);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(1722.8, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(0.48068851232528687, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.log();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      
      Complex complex2 = complex0.I.cos();
      complex2.NaN.hashCode();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
      
      complex0.getField();
      complex0.getField();
      Complex complex3 = complex0.subtract(0.0);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.8019036618832785E141, (-2895.560341329296));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex1.multiply((-709.8318));
      Complex complex4 = complex1.multiply(723);
      assertEquals(2093490.126781081, complex4.getReal(), 0.01);
      
      complex3.getReal();
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex0.NaN.pow(1.0);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex2.divide((-2055360.8090943887));
      Complex complex9 = complex8.ONE.divide(complex1);
      complex7.getImaginary();
      Complex complex10 = complex7.divide(complex9);
      Complex complex11 = complex8.acos();
      assertSame(complex11, complex6);
      
      complex1.atan();
      Complex complex12 = complex1.log();
      assertEquals(326.0000000171059, complex12.getReal(), 0.01);
      
      Complex complex13 = complex10.pow(complex5);
      assertEquals(2.003228101764752E-280, complex9.getReal(), 0.01);
      assertEquals((-0.0035981345046942914), complex13.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(6.283185307179586);
      Complex complex3 = complex0.ZERO.log();
      assertTrue(complex3.isInfinite());
      
      Complex complex4 = complex2.I.negate();
      assertEquals(-0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.ZERO.conjugate();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      complex2.abs();
      assertEquals(13.725308270369121, complex2.getReal(), 0.01);
      assertEquals(4.934802200544679, complex2.getImaginary(), 0.01);
      
      complex1.getReal();
      Complex complex6 = complex1.sqrt();
      assertEquals(1.500966792094538, complex6.getReal(), 0.01);
      assertEquals(0.26163075943254455, complex6.getImaginary(), 0.01);
      
      Complex complex7 = Complex.valueOf(2.184450656689318);
      assertFalse(complex7.equals((Object)complex1));
  }
}
