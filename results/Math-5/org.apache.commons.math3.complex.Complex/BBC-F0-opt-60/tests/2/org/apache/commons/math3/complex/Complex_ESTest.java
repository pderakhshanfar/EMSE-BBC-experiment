/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:45:08 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(892.4135830071, (-87.5146777));
      complex2.ONE.getArgument();
      Complex complex3 = complex2.reciprocal();
      complex2.toString();
      complex0.nthRoot(2110);
      complex2.I.tan();
      complex2.nthRoot(530);
      Complex complex4 = complex3.pow(2397.59062148);
      complex4.hashCode();
      Complex complex5 = Complex.valueOf(892.4135830071);
      complex5.INF.subtract(892.4135830071);
      Complex complex6 = complex1.divide(complex3);
      complex6.subtract(complex1);
      Complex complex7 = complex6.exp();
      complex0.sinh();
      complex7.NaN.getField();
      Complex complex8 = complex7.divide(complex4);
      complex8.I.sinh();
      complex6.sin();
      complex3.getField();
      complex4.add(complex3);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-8.56825295972308E226));
      complex1.getField();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.56825295972308E226));
      complex0.log();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1399.0435865463132), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.tanh();
      complex0.multiply(complex1);
      complex2.multiply(1242);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide(0.6828403472900391);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.multiply(complex3);
      complex4.nthRoot(2477);
      Complex complex5 = complex4.pow((double) 2477);
      complex0.asin();
      complex5.asin();
      complex4.multiply(1461);
      complex1.log();
      Complex complex6 = complex0.negate();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.56825295972308E226), 20.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.multiply(complex2);
      complex4.sqrt();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex1.I.subtract(825.1586);
      Complex complex3 = complex0.NaN.pow(complex1);
      complex3.ONE.sqrt1z();
      complex1.toString();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ONE.reciprocal();
      complex6.ONE.multiply(631.0);
      complex4.I.sin();
      Complex complex7 = Complex.valueOf(2481.34464935, (-20.0));
      Complex complex8 = complex7.tan();
      complex8.NaN.pow(complex6);
      Complex complex9 = Complex.valueOf(825.1586, 542.4263730855679);
      complex9.pow(complex2);
      Complex complex10 = Complex.INF;
      complex10.readResolve();
      complex4.multiply((-1561));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(3636);
      Complex complex1 = Complex.valueOf((-488.7070883534), (-488.7070883534));
      complex1.acos();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3834.128), (-3834.128));
      Complex complex1 = new Complex((-3834.128), (-3834.128));
      Complex complex2 = new Complex(3.5127708120698784E48, Double.NaN);
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex((-1538.7404983));
      complex0.tanh();
      complex3.tan();
      Complex complex6 = Complex.INF;
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-3433.66502), (-3433.66502));
      complex1.acos();
      Complex.valueOf((-3433.66502));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = new Complex(20.0);
      complex3.tanh();
      Complex complex4 = complex2.tan();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(1931.577164280947, (-8.56825295972308E226));
      complex0.acos();
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(2.0);
      complex0.tanh();
      Complex complex3 = Complex.I;
      complex3.tan();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4076.6658889466994));
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3834.128), (-3834.128));
      Complex complex1 = Complex.I;
      complex0.multiply(1272);
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-2403.73591645381), 3299571.1567784385);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.sinh();
      complex0.subtract(complex3);
      complex0.sqrt1z();
      complex1.createComplex((-15.009303065501504), (-2015.72));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.721792454659934E12));
      complex0.acos();
      Complex complex1 = Complex.I;
      complex1.tanh();
      Complex complex2 = new Complex((-2.721792454659934E12));
      complex2.asin();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex.valueOf((-3834.128), (-3834.128));
      Complex complex0 = new Complex((-8.56825295972308E226), 1302.0);
      Complex complex1 = Complex.valueOf((-682.301), 0.5478278398513794);
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3834.128), (-3834.128));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.cosh();
      complex0.negate();
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = new Complex((-1504.73));
      Complex complex7 = complex5.pow(Double.NaN);
      complex7.getArgument();
      complex4.divide(1608.0);
      complex7.readResolve();
      complex0.isInfinite();
      Complex complex8 = Complex.I;
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-64.473749522));
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.abs();
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.add(0.7853981633974483);
      Complex complex2 = complex1.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.INF.createComplex(764.7, Double.POSITIVE_INFINITY);
      complex3.I.divide(complex2);
      complex0.nthRoot(131);
      complex0.getReal();
      complex0.pow((double) 131);
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-6.714376022102489E279), (-20.0));
      Complex complex1 = Complex.valueOf((-20.0), 0.0);
      complex1.tanh();
      Complex complex2 = complex0.multiply(complex1);
      complex2.ONE.cosh();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(4377.9238922438435, 157.1259530290154);
      Complex complex3 = complex1.reciprocal();
      complex3.divide((-864.083963744));
      Complex complex4 = Complex.NaN;
      complex4.divide(complex2);
      Complex.valueOf(455.066776905133, 455.066776905133);
      complex0.pow((-864.083963744));
      complex1.getArgument();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.divide(157.1259530290154);
      Object object0 = new Object();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.I;
      complex7.equals(complex8);
      complex3.atan();
      complex6.sin();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4101.314);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.tanh();
      complex3.divide(Double.NaN);
      Complex complex4 = Complex.valueOf(4101.314);
      complex1.equals(complex4);
      complex2.atan();
      Complex complex5 = Complex.valueOf((-1921.90312));
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4101.314);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(4101.314);
      complex3.divide(complex0);
      Complex.valueOf(506.3603, 4.748140799544371E-10);
      complex1.pow(4101.314);
      complex3.getArgument();
      Complex complex4 = complex1.divide(4.748140799544371E-10);
      complex2.readResolve();
      complex4.equals(complex3);
      complex2.atan();
      Complex complex5 = Complex.valueOf(4101.314);
      complex5.sin();
      Complex complex6 = Complex.valueOf(506.3603, 506.3603);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(4101.314);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.cosh();
      complex3.INF.add(complex0);
      Complex.valueOf((-2343.762619314657));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1496.74875032, 157.125953);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(20.0);
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = Complex.valueOf(455.066776905133, 2764.3488673848287);
      complex2.pow((-3938.58370260126));
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex(Double.NaN);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex5.tan();
      complex7.nthRoot(19);
      complex0.hashCode();
      Complex.valueOf(455.066776905133, (-3938.58370260126));
      complex6.log();
      complex10.sin();
      complex10.readResolve();
      try { 
        complex2.nthRoot((-2147003325));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,147,003,325
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1282.869687);
      Complex complex2 = complex1.I.acos();
      complex0.INF.hashCode();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.tan();
      complex4.ONE.tan();
      Complex complex5 = complex0.subtract(complex1);
      Complex.valueOf(1282.869687);
      complex4.I.pow(complex2);
      Complex complex6 = complex5.ZERO.createComplex(1282.869687, (-1653.8381645));
      complex6.INF.hashCode();
      Complex complex7 = complex0.add(2251.154426539);
      Complex complex8 = complex7.ZERO.add(complex0);
      complex5.cos();
      Complex complex9 = complex3.asin();
      complex9.INF.createComplex(1282.869687, 2251.154426539);
      complex4.add(complex0);
      complex8.subtract(4.748140799544371E-10);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1799.9));
      complex0.add((-20.0));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.conjugate();
      Complex complex3 = new Complex((-1799.9));
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex1.log();
      complex4.toString();
      complex2.toString();
      complex5.sqrt();
      complex5.exp();
      Complex complex6 = complex4.multiply(3715);
      complex3.cosh();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(4.748140799544371E-10, 4.748140799544371E-10);
      Complex complex1 = Complex.valueOf(4.748140799544371E-10, 4.748140799544371E-10);
      Complex complex2 = new Complex(0.788232876916375, (-3839.987));
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1799.9));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.createComplex(1171.9971322169, (-1263.114035));
      complex1.hashCode();
      Complex complex4 = complex0.add(2260.69328);
      complex4.add(complex3);
      Complex complex5 = complex3.cos();
      complex5.asin();
      complex1.add(complex2);
      complex2.reciprocal();
      complex0.add(3911.4337);
      Complex complex6 = Complex.valueOf((-3.0093702248062957E-7), (-3.0093702248062957E-7));
      complex6.tanh();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.add((-1799.9));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.pow(complex1);
      Complex complex5 = complex1.log();
      complex4.toString();
      complex0.toString();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex2.exp();
      complex7.I.toString();
      complex6.multiply(3715);
      complex1.cosh();
      complex5.cosh();
      complex1.getReal();
      complex5.cosh();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1799.9));
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.NaN;
      complex2.getReal();
      complex1.multiply((-949.1589));
      complex2.subtract(complex0);
      complex2.add(48.0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(4101.314, 4101.314);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex(4101.314);
      complex3.tanh();
      complex1.tan();
      complex3.reciprocal();
      complex3.divide((-991.739104350758));
      complex0.divide(complex2);
      Complex complex4 = Complex.valueOf(2879.9, 4101.314);
      complex4.pow(946.8);
      Complex complex5 = Complex.NaN;
      complex5.add(4847.82);
      Complex complex6 = Complex.NaN;
      try { 
        complex6.nthRoot((-216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -216
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.tanh();
      complex3.tan();
      Complex.valueOf(1297.5507537414933);
      Complex complex4 = complex2.reciprocal();
      complex3.divide(946.8);
      complex2.divide(complex1);
      Complex complex5 = complex4.pow((-991.739104350758));
      complex5.toString();
      Complex complex6 = new Complex((-991.739104350758));
      Complex complex7 = complex6.sqrt();
      complex7.exp();
      complex3.multiply(3715);
      complex0.cosh();
      Complex complex8 = new Complex((-2646.9847), (-3932.944));
      complex8.cosh();
      complex0.createComplex((-2317.2391), (-2317.2391));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1799.9));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide((-1.3953728897042917E-8));
      complex2.sqrt();
      Complex complex3 = complex2.conjugate();
      complex3.abs();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.ONE.createComplex(1.0, 3490.3603661919283);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex4.asin();
      complex5.I.abs();
      Complex complex6 = complex1.multiply(complex0);
      complex1.sqrt1z();
      complex6.readResolve();
      complex0.ZERO.divide(3490.3603661919283);
      Complex complex7 = complex0.pow(3490.3603661919283);
      Complex complex8 = complex7.divide(complex1);
      complex7.sin();
      Complex complex9 = complex1.ONE.add(complex2);
      complex6.I.multiply(327.02597);
      Complex complex10 = Complex.valueOf(2005.1);
      complex0.toString();
      complex8.readResolve();
      complex3.tan();
      Complex complex11 = complex6.add(complex10);
      complex11.NaN.cosh();
      Complex complex12 = complex5.sin();
      Complex complex13 = Complex.valueOf(2005.1, 1.0);
      complex4.toString();
      complex13.exp();
      Complex complex14 = complex12.acos();
      complex9.multiply((-32.62253643));
      complex14.nthRoot(1120);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1282.869687);
      Complex complex2 = complex1.I.acos();
      complex0.INF.hashCode();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex0.subtract(complex1);
      Complex.valueOf(1282.869687);
      complex4.I.pow(complex2);
      Complex complex7 = complex6.ZERO.createComplex(1282.869687, (-1653.8381645));
      complex7.INF.hashCode();
      Complex complex8 = complex0.add(2251.154426539);
      complex8.ZERO.add(complex0);
      complex6.cos();
      complex3.asin();
      complex4.add(complex0);
      complex4.reciprocal();
      complex4.add(Double.POSITIVE_INFINITY);
      Complex.valueOf((-1799.9), 1282.869687);
      complex5.tanh();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1692.16365812, 0.0);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.multiply(complex0);
      complex0.ONE.reciprocal();
      complex0.getField();
      complex1.getReal();
      complex0.ZERO.hashCode();
      Complex complex3 = complex2.INF.pow(complex0);
      complex1.INF.exp();
      complex3.exp();
      complex2.readResolve();
      Complex complex4 = Complex.valueOf(2.718281828459045, 1692.16365812);
      complex2.equals(complex4);
      complex3.atan();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.acos();
      complex0.add((-1799.9));
      Complex complex1 = Complex.valueOf((-1799.9));
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.INF;
      complex3.add((-1799.9));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.multiply(3602);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex3.tanh();
      complex3.hashCode();
      Complex complex8 = complex1.log();
      complex0.abs();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex10.multiply(complex9);
      complex11.reciprocal();
      complex6.exp();
      complex3.cos();
      complex6.asin();
      complex5.toString();
      Complex complex12 = Complex.I;
      complex12.I.pow(Double.POSITIVE_INFINITY);
      complex4.divide(complex12);
      Complex complex13 = new Complex(3.466887271843006E138);
      Complex complex14 = complex4.pow(complex13);
      complex5.readResolve();
      complex14.multiply(9);
      complex8.add(5.909593881191159E-4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1692.16365812, 0.0);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.multiply(complex0);
      complex0.ONE.reciprocal();
      complex0.getField();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.divide(1963.7310931298068);
      complex1.divide(complex4);
      complex3.pow(2602.6329);
      complex4.ZERO.tan();
      complex2.add(1.2569907153141482);
      complex0.nthRoot(6);
      complex4.hashCode();
      complex3.atan();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.tanh();
      complex3.tan();
      Complex complex4 = complex2.reciprocal();
      complex3.divide(946.8);
      Complex complex5 = complex2.divide(complex1);
      complex4.pow((-991.739104350758));
      complex4.add(1.4255188208147591);
      complex4.nthRoot(37);
      complex5.hashCode();
      Complex complex6 = complex1.atan();
      complex6.NaN.log();
      complex4.sin();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.add((-1799.9));
      Complex complex3 = Complex.valueOf((-1799.9));
      complex3.conjugate();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ONE.log();
      complex5.toString();
      complex4.NaN.toString();
      complex3.I.sqrt();
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.INF;
      complex7.toString();
      Complex complex8 = Complex.I;
      complex3.divide(complex8);
      Complex complex9 = complex2.pow(complex5);
      complex2.readResolve();
      complex8.multiply((-928426670));
      complex6.divide((-1799.9));
      complex2.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      assertSame(complex2, complex0);
      
      Complex complex3 = complex1.multiply(1.0);
      Complex complex4 = complex3.createComplex(3230.4136425, 3230.4136425);
      assertTrue(complex1.equals((Object)complex3));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1692.16365812, 0.0);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.multiply(complex0);
      complex0.ONE.reciprocal();
      complex0.getField();
      complex1.getReal();
      complex0.ZERO.hashCode();
      complex2.divide((-22.140692632779267));
      complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.negate();
      complex4.cosh();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex1.tanh();
      complex3.pow(complex4);
      Complex complex8 = complex7.multiply(complex5);
      complex3.getArgument();
      complex8.sin();
      Complex complex9 = new Complex(2.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.asin();
      Complex complex11 = Complex.ZERO;
      complex11.multiply(complex10);
      Complex complex12 = Complex.INF;
      complex0.pow(complex12);
      complex3.subtract(5396.21003233409);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1692.16365812, 0.0);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.multiply(complex0);
      complex0.ONE.reciprocal();
      complex0.getField();
      complex1.getReal();
      complex0.ZERO.hashCode();
      Complex complex3 = complex2.INF.pow(complex0);
      complex2.ONE.log();
      Complex complex4 = complex2.multiply(1692.16365812);
      complex4.pow(1955.824227);
      complex3.add(0.0);
      try { 
        complex4.nthRoot((-651));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -651
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1692.16365812, 0.0);
      complex0.ONE.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.add((-1280.72));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.multiply((-1881));
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex4.tanh();
      complex2.hashCode();
      complex3.log();
      complex6.abs();
      Complex complex9 = new Complex((-1881), 20.0);
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = Complex.ONE;
      complex11.cos();
      Complex complex12 = complex5.multiply(complex0);
      complex8.reciprocal();
      Complex complex13 = complex10.exp();
      complex12.cos();
      complex12.asin();
      complex13.toString();
      complex10.divide(complex11);
      complex7.pow(complex13);
      complex4.readResolve();
      complex9.multiply(24);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(799);
      Complex complex2 = complex1.add((double) 799);
      Complex complex3 = complex2.tanh();
      complex0.ONE.add(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.NaN.cos();
      complex4.cosh();
      complex1.pow(8.227620163729258E-235);
      complex1.toString();
      Complex complex6 = complex1.atan();
      complex6.I.hashCode();
      complex4.I.getField();
      Complex complex7 = complex6.divide(complex1);
      complex6.nthRoot(799);
      Complex complex8 = complex7.pow(complex5);
      Complex complex9 = complex7.tan();
      complex9.I.cosh();
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex4.pow(complex7);
      complex8.sqrt1z();
      complex8.abs();
      complex11.pow(complex7);
      complex5.equals("(NaN, NaN)");
      Complex complex12 = complex1.negate();
      complex10.equals(complex1);
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.conjugate();
      Complex complex1 = complex0.sqrt1z();
      complex0.getReal();
      Complex complex2 = complex1.asin();
      complex1.tanh();
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf(2.0, (-1951.52396234));
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = Complex.ZERO;
      complex5.multiply(0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      complex0.ONE.reciprocal();
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex0.ONE.sin();
      complex1.INF.add((double) 3602);
      complex4.INF.multiply(3602);
      Complex complex5 = complex0.conjugate();
      complex5.ZERO.tanh();
      complex0.hashCode();
      Complex complex6 = complex0.log();
      complex0.abs();
      complex1.sqrt1z();
      Complex complex7 = complex4.cos();
      complex6.INF.multiply(complex5);
      Complex complex8 = complex7.ONE.reciprocal();
      Complex complex9 = complex2.ONE.exp();
      complex1.cos();
      complex5.asin();
      complex8.nthRoot(799);
      Complex complex10 = Complex.valueOf((-1.0));
      complex10.hashCode();
      complex5.log();
      complex9.abs();
      complex3.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.tan();
      complex1.ONE.getField();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.pow(complex1);
      double double0 = 3149.7;
      Complex complex6 = complex5.INF.add(3149.7);
      complex6.ONE.sqrt1z();
      Complex complex7 = complex1.pow(0.0);
      Complex complex8 = complex7.INF.subtract(1.0);
      double double1 = 3239639.0100000002;
      complex3.subtract(3239639.0100000002);
      complex8.getReal();
      complex6.sqrt();
      complex6.isInfinite();
      // Undeclared exception!
      complex0.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex2.NaN.multiply(complex0);
      Complex complex5 = complex1.atan();
      Complex complex6 = complex1.tan();
      Complex complex7 = new Complex(0.6828403472900391);
      complex7.pow(complex0);
      Complex complex8 = complex4.add(0.6828403472900391);
      complex6.sqrt1z();
      complex3.pow(0.6828403472900391);
      complex5.subtract(1533.79);
      double double0 = 2.3984878190403553E-145;
      complex8.sinh();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.tan();
      complex1.ONE.getField();
      complex1.sin();
      Complex complex3 = complex2.add(1.463305638201413E-302);
      Complex complex4 = Complex.INF;
      complex4.multiply(778);
      complex1.conjugate();
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.ONE;
      complex6.hashCode();
      complex4.log();
      complex3.abs();
      Complex complex7 = complex0.sqrt1z();
      complex4.cos();
      complex7.multiply(complex6);
      Complex complex8 = complex1.reciprocal();
      complex5.exp();
      Complex complex9 = complex0.cos();
      complex9.asin();
      complex4.divide(complex6);
      complex8.readResolve();
      complex2.readResolve();
      complex5.getField();
      Complex complex10 = Complex.valueOf(0.0);
      complex10.getField();
      complex9.nthRoot(778);
      Complex complex11 = complex2.pow((-149.0836));
      Complex complex12 = Complex.NaN;
      complex12.tanh();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.acos();
      double double0 = (-1799.9);
      Complex complex1 = complex0.add((-1799.9));
      Complex complex2 = Complex.valueOf((-1799.9));
      complex2.asin();
      double double1 = 3149.7;
      Complex complex3 = complex1.add((-1810.0));
      Complex complex4 = Complex.NaN;
      complex4.sqrt1z();
      complex3.pow((-1810.0));
      complex4.subtract((-1799.9));
      double double2 = 2.3984878190403553E-145;
      complex3.sinh();
      try { 
        complex4.nthRoot((-1900));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,900
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.pow(Double.NaN);
      complex1.I.subtract(825.1586);
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.ONE.sqrt1z();
      complex1.toString();
      Complex complex3 = complex0.negate();
      complex0.conjugate();
      complex3.I.sin();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex0.multiply(864);
      Complex complex6 = complex5.I.reciprocal();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex7 = complex3.sin();
      Complex complex8 = complex5.asin();
      complex8.ONE.subtract(825.1586);
      complex4.getReal();
      Complex complex9 = complex5.sqrt();
      complex5.isInfinite();
      complex3.nthRoot(864);
      complex9.cos();
      Complex complex10 = complex0.sqrt();
      complex10.NaN.toString();
      complex0.exp();
      complex2.isNaN();
      Complex complex11 = complex3.multiply(complex0);
      Complex complex12 = new Complex(0.0);
      complex11.divide(complex12);
      complex7.acos();
      Complex.valueOf(Double.NaN);
      complex6.exp();
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.add((-1799.9));
      Complex complex3 = Complex.valueOf((-1799.9));
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.ONE.log();
      complex6.toString();
      complex5.NaN.toString();
      complex5.exp();
      complex4.multiply(3715);
      complex5.sqrt();
      complex2.subtract(1963.0798639);
      complex6.acos();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.divide((-1.0));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.INF.exp();
      complex3.INF.conjugate();
      complex3.ZERO.pow(3439.02);
      Complex complex4 = Complex.ZERO;
      complex0.equals(complex4);
      complex0.log();
      Complex complex5 = Complex.ZERO;
      complex5.abs();
      complex5.multiply(1443);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-1.6820775526596002E7), (-1.6820775526596002E7));
      Complex complex1 = complex0.multiply(1311957612);
      complex1.tan();
      complex0.ZERO.divide((-1.6820775526596002E7));
      complex1.NaN.conjugate();
      complex0.readResolve();
      Complex complex2 = complex0.cosh();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = 0.9980417590821932;
      Complex complex0 = new Complex(0.9980417590821932, 0.9980417590821932);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.tan();
      complex1.ONE.getField();
      complex2.NaN.atan();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.INF.add(3149.7);
      complex5.ONE.sqrt1z();
      Complex complex6 = complex1.pow(0.9980417590821932);
      complex6.INF.subtract(1.0);
      double double1 = 2.3984878190403553E-145;
      Complex complex7 = complex2.NaN.sinh();
      try { 
        complex7.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(6.319146317890346E-8, 905.8010135857844);
      Complex complex2 = complex1.pow(complex0);
      complex2.readResolve();
      complex0.multiply((-609));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      complex0.ONE.reciprocal();
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex0.ONE.sin();
      complex1.INF.add((double) 3602);
      Complex complex5 = complex4.INF.multiply(3602);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.ZERO.tanh();
      complex0.hashCode();
      Complex complex8 = complex0.log();
      complex0.abs();
      complex1.sqrt1z();
      Complex.valueOf((double) 3602, 1.2715470790863037);
      complex4.cos();
      complex8.INF.multiply(complex6);
      Complex complex9 = complex0.INF.log();
      complex9.ONE.reciprocal();
      complex2.ONE.exp();
      Complex complex10 = complex1.cos();
      Complex complex11 = Complex.I;
      complex11.sqrt();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.toString();
      complex10.exp();
      complex9.isNaN();
      complex7.multiply(complex3);
      Complex complex13 = new Complex(0.0);
      complex5.divide(complex12);
      Complex complex14 = complex5.acos();
      complex11.sqrt();
      complex14.subtract(Double.POSITIVE_INFINITY);
      complex2.acos();
      complex7.sinh();
      complex10.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2102.513206851742), (-2102.513206851742));
      complex1.cos();
      Complex complex2 = complex0.reciprocal();
      complex0.sqrt();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.createComplex(2084.788918128, (-904.8010135857844));
      Complex complex5 = complex4.atan();
      complex5.nthRoot(17);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex2.divide(complex6);
      Complex complex8 = new Complex(2.0);
      complex8.getArgument();
      complex7.exp();
      complex6.add(complex2);
      complex2.tanh();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.conjugate();
      Complex complex1 = complex0.sqrt1z();
      complex0.getReal();
      Complex complex2 = complex1.asin();
      complex1.tanh();
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf((-2102.513206851742), 0.0);
      complex3.ZERO.reciprocal();
      complex0.INF.sqrt();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.ZERO.createComplex(0.0, 2084.788918128);
      complex3.NaN.atan();
      complex4.exp();
      complex4.isNaN();
      Complex complex7 = new Complex((-1.4674011002723395));
      complex7.multiply(complex4);
      Complex complex8 = new Complex(2084.788918128);
      complex7.divide(complex4);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.acos();
      complex6.sqrt();
      complex4.subtract(0.0);
      complex6.acos();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex1.I.subtract(825.1586);
      Complex complex3 = complex0.NaN.pow(complex1);
      complex3.ONE.sqrt1z();
      complex1.toString();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.conjugate();
      complex4.I.sin();
      Complex complex6 = complex4.NaN.sinh();
      Complex complex7 = complex0.multiply(864);
      complex7.I.reciprocal();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex8 = complex4.sin();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex9.ONE.subtract(825.1586);
      complex6.getReal();
      Complex complex11 = complex7.sqrt();
      complex7.isInfinite();
      complex4.nthRoot(864);
      Complex complex12 = complex11.cos();
      Complex complex13 = complex0.sqrt();
      complex13.NaN.toString();
      complex10.nthRoot(1135);
      Complex complex14 = Complex.I;
      complex5.I.toString();
      complex14.divide(complex2);
      complex12.getArgument();
      complex5.exp();
      complex8.add(complex9);
      Complex complex15 = Complex.INF;
      complex15.tanh();
      complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.sqrt1z();
      complex0.getReal();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.valueOf((-2102.513206851742), 0.0);
      Complex complex7 = complex3.log();
      complex0.abs();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex6.multiply(complex7);
      complex9.log();
      complex8.reciprocal();
      complex7.exp();
      Complex complex11 = complex9.cos();
      complex1.asin();
      complex11.divide(complex5);
      complex9.readResolve();
      complex4.readResolve();
      complex10.getField();
      Complex complex12 = new Complex(0.0);
      complex12.getField();
      complex3.nthRoot(1142);
      complex1.pow(0.0);
      Complex complex13 = Complex.I;
      complex13.tanh();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex1.I.subtract(825.1586);
      Complex complex3 = complex0.NaN.pow(complex1);
      complex3.ONE.sqrt1z();
      complex1.toString();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.conjugate();
      complex5.ONE.reciprocal();
      complex4.I.sin();
      Complex.valueOf(2481.34464935, (-20.0));
      Complex complex6 = Complex.valueOf(825.1586, 542.4263730855679);
      complex6.pow(complex2);
      Complex complex7 = Complex.INF;
      complex7.readResolve();
      complex4.multiply((-1561));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      int int0 = 864;
      complex1.multiply(2022);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.reciprocal();
      Complex.valueOf((double) 864, 6.319146317890346E-8);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sin();
      complex4.asin();
      Complex complex6 = complex5.subtract((double) 864);
      Complex complex7 = Complex.valueOf(6.319146317890346E-8);
      complex7.getReal();
      complex4.sqrt();
      complex3.isInfinite();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(1.0883076226453258E-9);
      complex4.divide(complex2);
      complex4.pow(1955.824227);
      Complex complex5 = complex4.add(2058.260651985);
      complex4.nthRoot(2059);
      complex5.hashCode();
      Complex complex6 = complex5.log();
      complex0.abs();
      complex6.multiply(554);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.ONE.multiply((-2607.068));
      complex2.ONE.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.subtract((-709.3556452923));
      complex4.I.sqrt1z();
      try { 
        complex2.nthRoot((-2675));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,675
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.pow(392.7964125232);
      complex1.I.getArgument();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.I.tan();
      complex3.cosh();
      Complex complex4 = complex2.ZERO.multiply(364);
      complex1.multiply(complex0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex6.INF.pow(complex0);
      Complex complex8 = complex0.exp();
      complex8.INF.multiply(1480.602671019947);
      Complex complex9 = complex8.ONE.subtract(complex2);
      complex9.NaN.tanh();
      complex4.isInfinite();
      Complex complex10 = complex6.acos();
      complex10.I.add((-956.21401264));
      Complex.valueOf((-1836.92037840864), 2102.412231);
      Complex complex11 = complex4.sqrt();
      complex11.tan();
      complex5.INF.add(812.2727347);
      Complex complex12 = complex11.INF.tanh();
      complex12.NaN.abs();
      Complex complex13 = complex0.divide(complex4);
      complex1.sqrt1z();
      complex12.tanh();
      Complex complex14 = Complex.ONE;
      complex7.add(complex14);
      complex7.conjugate();
      complex3.getField();
      complex13.getImaginary();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(2168.6752);
      complex0.sin();
      Complex complex2 = complex1.ZERO.multiply((-1));
      Complex complex3 = Complex.valueOf((-914.8008352261));
      complex3.ZERO.sin();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.ONE.createComplex((-2.33974236642384E-7), (-1));
      complex5.NaN.atan();
      complex1.getField();
      Complex complex6 = complex2.createComplex((-1), (-1));
      complex1.subtract(complex4);
      complex6.createComplex((-2.33974236642384E-7), (-2.33974236642384E-7));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getField();
      Complex complex1 = complex0.ZERO.tanh();
      complex0.tan();
      complex0.INF.reciprocal();
      Complex complex2 = complex0.NaN.divide(946.8);
      Complex complex3 = complex2.I.divide(complex1);
      complex3.ONE.pow(1955.824227);
      complex2.ONE.add(0.0);
      complex0.nthRoot(1);
      complex2.hashCode();
      Complex complex4 = complex2.log();
      complex0.abs();
      complex4.multiply((-28));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex1.NaN.sin();
      Complex complex5 = complex0.NaN.multiply(complex1);
      complex4.ZERO.atan();
      Complex complex6 = complex0.sinh();
      complex0.abs();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex3.subtract(complex4);
      Complex complex9 = complex8.NaN.createComplex(Double.NaN, (-113.32));
      complex6.INF.tan();
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex10.ZERO.exp();
      complex11.ONE.cosh();
      complex7.multiply(complex3);
      complex7.hashCode();
      complex8.asin();
      complex7.log();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.abs();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 784.02942513886);
      Complex complex1 = complex0.INF.createComplex((-191.891255196911), (-982.9));
      complex1.toString();
      complex0.cosh();
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex1.atan();
      complex1.getArgument();
      Complex complex3 = Complex.valueOf((-1.7636008637223322), 0.0);
      Complex complex4 = complex2.multiply(complex1);
      complex4.equals(complex3);
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-6223));
      Complex complex2 = complex1.subtract(complex0);
      complex2.NaN.pow((double) (-6223));
      Complex complex3 = Complex.valueOf(6.283185307179586, 0.0);
      complex2.ZERO.negate();
      complex1.I.hashCode();
      Complex complex4 = complex2.ONE.pow((-2094.2276779));
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex5.multiply(17);
      complex7.ONE.negate();
      Complex complex8 = complex6.subtract((-2094.2276779));
      Complex complex9 = complex6.I.log();
      Complex complex10 = complex0.reciprocal();
      complex10.I.abs();
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex6.negate();
      complex12.NaN.add(complex10);
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex1.cos();
      complex3.pow(complex11);
      complex4.cosh();
      Complex complex15 = complex2.exp();
      complex9.getField();
      complex10.getField();
      complex6.getField();
      complex14.getReal();
      complex9.abs();
      complex7.getImaginary();
      complex15.subtract(complex7);
      complex10.exp();
      complex13.hashCode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.NaN.multiply((-1193.037));
      Complex complex3 = Complex.valueOf((-1237.0), 0.0);
      Complex complex4 = complex3.sin();
      complex0.subtract(complex3);
      complex3.exp();
      Complex complex5 = complex3.NaN.multiply(complex1);
      complex5.NaN.conjugate();
      complex4.ZERO.reciprocal();
      complex2.isNaN();
      complex3.INF.hashCode();
      Complex complex6 = complex4.exp();
      complex6.NaN.toString();
      complex6.ONE.getArgument();
      Complex complex7 = complex3.I.conjugate();
      try { 
        complex7.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(1.0883076226453258E-9);
      Complex complex1 = complex0.pow((-59.2087));
      Complex complex2 = complex1.sqrt();
      complex2.ONE.add(1.0883076226453258E-9);
      complex2.I.getArgument();
      Complex complex3 = Complex.valueOf((-133.5052));
      complex3.I.nthRoot(2070);
      complex3.INF.readResolve();
      complex3.I.pow(1.0883076226453258E-9);
      complex0.getArgument();
      complex1.ONE.abs();
      complex0.add((-59.2087));
      Complex complex4 = complex1.multiply((-133.5052));
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex6.cos();
      Complex.valueOf(4556.03298391, (-6.406189112730307E-11));
      complex5.getArgument();
      complex8.sin();
      Complex complex9 = complex7.multiply(Double.NaN);
      complex9.multiply(complex6);
      complex0.toString();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.I.subtract(1816.0);
      complex3.I.toString();
      Complex complex4 = complex1.ZERO.cos();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex0.pow(2600.1487314368);
      Complex complex8 = complex0.I.add(1634.275487078677);
      Complex complex9 = complex8.ZERO.subtract(0.0);
      complex9.INF.reciprocal();
      complex9.I.cos();
      complex7.NaN.tanh();
      Complex complex10 = complex1.add((-2021.254254));
      Complex complex11 = complex0.divide(complex1);
      Complex.valueOf(0.0);
      Complex complex12 = complex7.createComplex(1816.0, 218.8964892691);
      complex10.multiply(857);
      Complex complex13 = complex6.add(complex2);
      complex13.ZERO.exp();
      complex8.getField();
      complex10.negate();
      complex5.cosh();
      complex13.ONE.sqrt1z();
      complex12.subtract(1816.0);
      complex13.isNaN();
      complex11.cos();
      complex6.add(complex10);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.conjugate();
      Complex complex1 = complex0.sqrt1z();
      complex0.getReal();
      Complex complex2 = complex1.asin();
      complex1.tanh();
      Complex complex3 = complex2.exp();
      Complex.valueOf((-2102.513206851742), 0.0);
      complex3.NaN.cos();
      complex3.ZERO.reciprocal();
      complex0.INF.sqrt();
      Complex complex4 = Complex.I;
      complex4.ZERO.createComplex(0.0, 2084.788918128);
      complex3.NaN.atan();
      try { 
        complex4.INF.nthRoot((-507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -507
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.exp();
      complex1.ONE.sqrt1z();
      Complex complex3 = complex2.I.cosh();
      complex3.ONE.toString();
      complex2.hashCode();
      complex0.getArgument();
      complex2.pow(complex0);
      complex1.cos();
      Complex complex4 = complex0.exp();
      complex2.divide(0.0);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.ONE.divide(0.0);
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.pow(Double.NaN);
      complex1.I.subtract(825.1586);
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.ONE.sqrt1z();
      complex1.toString();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.conjugate();
      complex3.I.sin();
      Complex complex5 = complex3.NaN.sinh();
      Complex complex6 = complex0.multiply(864);
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex9 = complex3.sin();
      Complex complex10 = complex6.asin();
      complex10.ONE.subtract(825.1586);
      complex5.getReal();
      Complex complex11 = complex6.sqrt();
      complex6.isInfinite();
      complex3.nthRoot(864);
      complex11.cos();
      Complex complex12 = complex0.sqrt();
      complex12.NaN.toString();
      complex0.exp();
      complex2.isNaN();
      Complex complex13 = complex3.multiply(complex0);
      Complex complex14 = new Complex(0.0);
      complex13.divide(complex14);
      complex9.acos();
      complex8.sqrt();
      complex4.subtract((-1584.59));
      complex7.acos();
      complex14.sinh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.I.add(1526.96521163004);
      complex2.ONE.tanh();
      complex1.NaN.conjugate();
      complex1.ONE.add(complex2);
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex4.ONE.multiply((-43));
      try { 
        complex5.ONE.nthRoot((-43));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -43
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0, 1232.778497);
      Complex complex2 = complex1.ONE.createComplex(0.0, (-1764.4));
      complex2.ZERO.cos();
      Complex complex3 = complex1.ZERO.conjugate();
      complex3.NaN.abs();
      complex0.reciprocal();
      double double1 = Double.POSITIVE_INFINITY;
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.sqrt1z();
      complex2.NaN.add(complex3);
      complex1.isNaN();
      Complex complex5 = complex4.conjugate();
      complex4.ONE.hashCode();
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = complex6.ONE.multiply(Double.POSITIVE_INFINITY);
      complex7.I.divide(complex0);
      complex5.nthRoot(2353);
      Complex complex8 = complex1.INF.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.ONE.multiply(complex3);
      complex1.readResolve();
      Complex complex10 = complex0.multiply(complex2);
      complex5.INF.subtract(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex11 = complex3.conjugate();
      complex10.getField();
      complex10.NaN.exp();
      complex8.asin();
      Complex complex12 = complex5.sin();
      complex12.I.atan();
      Complex complex13 = complex5.sqrt();
      Complex complex14 = complex10.multiply((-3864.17));
      complex13.isInfinite();
      complex10.isInfinite();
      complex13.hashCode();
      complex14.getReal();
      complex13.add(complex9);
      Complex complex15 = complex11.multiply(complex0);
      complex15.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex0.I.divide(718.19990373);
      Complex complex2 = complex1.sqrt();
      complex2.ONE.conjugate();
      complex1.abs();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-6.714376022102489E279), (-20.0));
      Complex complex1 = Complex.valueOf((-20.0), 0.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.ONE.cosh();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.add((-1799.9));
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.pow(complex1);
      complex5.ONE.log();
      complex5.NaN.toString();
      complex5.exp();
      complex4.multiply(3715);
      Complex.valueOf((-1799.9));
      complex2.exp();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.pow((-7.187922490287331E-8));
      complex0.log();
      Complex complex2 = Complex.ZERO;
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1692.16365812, 0.0);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.multiply(complex0);
      complex0.ONE.reciprocal();
      complex0.getField();
      complex1.getReal();
      complex0.ZERO.hashCode();
      complex2.ONE.log();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex2.INF.pow(complex0);
      Complex complex5 = complex2.ONE.log();
      Complex complex6 = complex2.multiply(1692.16365812);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.ZERO.divide(2.0);
      complex8.I.tanh();
      Complex complex9 = complex7.INF.pow(complex1);
      Complex complex10 = complex2.multiply(complex1);
      complex10.getArgument();
      Complex complex11 = complex3.sin();
      complex11.ZERO.asin();
      complex11.I.multiply(complex6);
      complex1.pow(complex6);
      complex5.subtract(449.696);
      complex1.getField();
      complex1.multiply(complex4);
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3054.39), (-3054.39));
      complex0.I.asin();
      complex0.ONE.toString();
      Complex complex1 = complex0.divide(5.014010481958507E150);
      complex1.NaN.cos();
      complex1.I.abs();
      Complex complex2 = Complex.valueOf((-1278.1047));
      complex2.I.hashCode();
      complex2.conjugate();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(262.076884, (-3206.36453));
      Complex complex1 = Complex.ZERO;
      complex1.cos();
      complex1.negate();
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.NaN.acos();
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex4.NaN.multiply(1298);
      complex5.NaN.hashCode();
      complex3.ONE.nthRoot(1298);
      Complex complex6 = complex4.INF.atan();
      complex6.ZERO.sqrt1z();
      complex0.NaN.add(4926.449);
      Complex complex7 = complex0.exp();
      complex7.ZERO.abs();
      complex3.subtract(0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      complex0.ONE.reciprocal();
      complex2.NaN.multiply(complex0);
      Complex complex3 = complex0.ONE.sin();
      complex1.INF.add((double) 3602);
      Complex complex4 = complex3.INF.multiply(3602);
      Complex complex5 = complex0.conjugate();
      complex5.ZERO.tanh();
      complex0.hashCode();
      Complex complex6 = complex0.log();
      complex0.abs();
      complex1.sqrt1z();
      complex3.cos();
      complex6.INF.multiply(complex5);
      Complex complex7 = complex0.INF.log();
      complex7.ONE.reciprocal();
      complex2.ONE.exp();
      complex1.cos();
      complex5.asin();
      Complex complex8 = complex0.divide(complex6);
      complex2.readResolve();
      complex5.readResolve();
      complex0.getField();
      complex8.getField();
      complex4.nthRoot(1142);
      complex1.pow((double) 1142);
      complex8.tanh();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(complex2);
      complex0.conjugate();
      complex2.equals(complex3);
      complex2.getReal();
      complex3.multiply(0.0);
      complex1.subtract(complex2);
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.ONE.readResolve();
      complex0.isInfinite();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.INF.log();
      complex2.I.hashCode();
      Complex complex4 = complex2.exp();
      complex4.INF.conjugate();
      Complex complex5 = complex4.multiply(0);
      complex5.INF.conjugate();
      complex5.INF.abs();
      complex1.subtract(complex3);
      Complex complex6 = complex1.add(8.252116273466952E112);
      complex6.sinh();
      complex1.subtract(8.252116273466952E112);
      Complex complex7 = Complex.valueOf(8.252116273466952E112, 0.0);
      complex7.I.sinh();
      Complex complex8 = complex4.multiply(3377.9287563731805);
      complex8.negate();
      complex7.sqrt();
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.log();
      complex0.divide(complex1);
      complex2.log();
      Complex complex3 = complex1.reciprocal();
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.tan();
      complex1.ONE.getField();
      complex2.NaN.atan();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.INF.add(3149.7);
      complex5.ONE.sqrt1z();
      Complex complex6 = complex1.pow(0.0);
      complex6.INF.subtract(1.0);
      double double1 = 2.3984878190403553E-145;
      Complex complex7 = complex2.NaN.sinh();
      try { 
        complex7.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1949.6571), (-1949.6571));
      double double0 = (-20.0);
      Complex complex1 = new Complex(0.0, (-20.0));
      complex1.INF.getArgument();
      Complex complex2 = complex0.multiply(complex1);
      complex1.I.negate();
      try { 
        complex2.NaN.nthRoot((-439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -439
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2143.807389795237), 0.0);
      Complex complex1 = Complex.valueOf((-31.05211427), (-2471.633));
      complex1.divide((-31.05211427));
      complex1.divide(complex0);
      Complex complex2 = Complex.valueOf((-1556.1), (-3.158898981674071E-9));
      Complex complex3 = complex0.subtract(complex2);
      complex3.ZERO.cosh();
      Complex complex4 = complex3.ONE.tanh();
      complex0.reciprocal();
      complex2.add(complex3);
      Complex complex5 = complex2.NaN.negate();
      complex5.ONE.cosh();
      complex4.ONE.hashCode();
      complex4.NaN.sinh();
      complex0.acos();
      complex4.log();
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.NaN.toString();
      complex0.NaN.nthRoot(7);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.pow((-3243.69157372587));
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.acos();
      complex3.ZERO.divide(complex1);
      Complex complex5 = complex2.ONE.acos();
      Complex complex6 = complex4.ZERO.sinh();
      Complex complex7 = complex6.NaN.sqrt1z();
      complex1.NaN.getArgument();
      Complex complex8 = complex1.ZERO.tan();
      assertTrue(complex8.equals((Object)complex6));
      
      complex0.equals((Object) null);
      Complex complex9 = complex1.divide((-3243.69157372587));
      complex0.log();
      Complex complex10 = complex9.log();
      Complex complex11 = complex10.cos();
      complex10.cos();
      complex2.hashCode();
      Complex.valueOf(332.57);
      Complex complex12 = complex0.negate();
      complex12.readResolve();
      Complex complex13 = complex4.acos();
      assertEquals(1.0232274785475506, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      complex9.abs();
      Complex complex14 = complex1.subtract((-1302.2441167999914));
      complex5.getField();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex15 = complex1.multiply(1046);
      Complex complex16 = complex12.multiply(complex11);
      assertSame(complex16, complex7);
      assertFalse(complex9.equals((Object)complex15));
      assertEquals(Double.POSITIVE_INFINITY, complex9.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex14));
      assertNotSame(complex16, complex2);
      assertTrue(complex10.isInfinite());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(4.748140799544371E-10, (-782.7515333));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.ONE.exp();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      String string0 = complex0.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex3 = complex0.asin();
      List<Complex> list0 = complex0.nthRoot(37);
      assertEquals(37, list0.size());
      
      double double0 = complex3.abs();
      assertEquals(7.3559629076573305, double0, 0.01);
      assertEquals(6.065956721621672E-13, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, Double.NaN);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.conjugate();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = Complex.valueOf(1499.819496002, Double.NaN);
      Complex complex6 = complex3.multiply((-1.5460500618825853E264));
      complex0.getField();
      boolean boolean0 = complex6.isInfinite();
      assertSame(complex6, complex3);
      assertSame(complex6, complex5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      int int0 = (-1347);
      try { 
        complex1.nthRoot((-1347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,347
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(6.319146317890346E-8, 6.319146317890346E-8);
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex2.readResolve();
      assertTrue(object0.equals((Object)complex2));
      assertSame(complex2, complex0);
      
      Complex complex3 = complex1.multiply(0);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(6.319146317890346E-8, complex1.getReal(), 0.01);
      assertEquals(6.319146317890346E-8, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.INF.createComplex(Double.POSITIVE_INFINITY, 63.37202896772);
      assertTrue(complex4.isInfinite());
      
      Complex complex5 = complex2.ONE.sqrt();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex0.log();
      Complex complex6 = complex1.negate();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertTrue(complex6.equals((Object)complex3));
      
      complex2.cosh();
      assertTrue(complex2.equals((Object)object0));
      
      Complex complex7 = complex0.cosh();
      assertTrue(complex0.equals((Object)complex5));
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.readResolve();
      Complex complex1 = complex0.I.exp();
      try { 
        complex1.INF.nthRoot((-378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -378
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      int int0 = 458;
      complex0.INF.log();
      Complex complex1 = Complex.valueOf(2104.2378509);
      complex0.I.add(complex1);
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.NaN.subtract((-20.0));
      Complex complex4 = complex2.divide(complex0);
      assertEquals((-0.07853981633974483), complex4.getReal(), 0.01);
      
      Complex.valueOf((-1126.3), 2436.1077422);
      Complex complex5 = complex0.divide(0.0);
      assertSame(complex5, complex3);
      
      Complex complex6 = Complex.valueOf(1.3106843166204263E-9, 2554.6);
      Complex complex7 = complex1.divide(1.3106843166204263E-9);
      Complex complex8 = complex2.multiply(complex6);
      assertEquals(4012.7562964254084, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex6.add(complex7);
      Complex complex10 = complex2.pow(complex9);
      assertEquals(Double.POSITIVE_INFINITY, complex10.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex2.subtract(1.3106843166204263E-9);
      assertEquals(1.5707963254842123, complex11.getReal(), 0.01);
      assertEquals((-3.6882538673612966), complex11.getImaginary(), 0.01);
      
      Complex complex12 = (Complex)complex6.readResolve();
      assertEquals(1.3106843166204263E-9, complex12.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = Complex.valueOf((-1282.0250457116306));
      assertEquals((-1282.0250457116306), complex2.getReal(), 0.01);
      
      Complex complex3 = Complex.valueOf(0.0, (-1282.0250457116306));
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      complex0.isInfinite();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ONE.atan();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.tanh();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertTrue(complex6.equals((Object)complex1));
  }
}
