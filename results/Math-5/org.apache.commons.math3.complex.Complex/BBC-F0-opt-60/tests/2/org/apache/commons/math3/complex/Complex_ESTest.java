/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:00:51 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.8380461271305958E74, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2006.0), Double.POSITIVE_INFINITY);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-8.654192870261035E-5));
      complex0.readResolve();
      complex0.getField();
      Complex complex2 = Complex.valueOf((-8.654192870261035E-5), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.pow(710.64343);
      Complex complex4 = complex2.tanh();
      Complex complex5 = new Complex((-2951.828925), 4.296027044486766E-61);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.subtract(0.9302571404425942);
      Complex complex8 = Complex.valueOf(4107.05873563);
      complex8.asin();
      complex7.sqrt();
      Complex complex9 = complex8.reciprocal();
      complex7.cosh();
      complex6.acos();
      complex2.getField();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex9.multiply(0.9302571404425942);
      Complex.valueOf((-3853.36), 1.366908234652164);
      complex2.multiply((-2147481345));
      complex8.equals(complex3);
      complex4.multiply(3513);
      complex10.sqrt();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.subtract(complex0);
      Complex complex2 = complex0.multiply(17);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.createComplex(1559.7544, 3.7933813995221254E-6);
      Complex complex5 = complex1.negate();
      Complex complex6 = complex0.subtract(1559.7544);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.divide(complex3);
      Complex complex9 = complex1.log();
      complex9.log();
      complex8.log();
      complex6.hashCode();
      complex4.reciprocal();
      complex5.reciprocal();
      complex9.getField();
      complex2.tanh();
      complex3.tanh();
      Complex complex10 = Complex.INF;
      complex10.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(174);
      complex0.asin();
      Complex complex2 = complex1.sinh();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
      Complex complex2 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 2296.07075802);
      Complex complex1 = complex0.NaN.createComplex(20.0, 2296.07075802);
      Complex complex2 = complex1.ONE.subtract(448.0);
      Complex complex3 = Complex.valueOf(4.971378973445109E-8, 4.971378973445109E-8);
      complex3.ZERO.sqrt();
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex4.ONE.divide(448.0);
      Complex complex6 = complex0.tanh();
      Complex complex7 = Complex.valueOf(20.0);
      complex7.NaN.multiply((-1454));
      complex6.asin();
      Complex complex8 = complex0.createComplex(2296.07075802, 20.0);
      Complex complex9 = complex8.NaN.divide(complex1);
      complex9.I.log();
      Complex complex10 = complex2.log();
      complex10.I.hashCode();
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex11.reciprocal();
      complex5.tanh();
      complex12.log();
      Complex complex13 = complex7.exp();
      complex13.getField();
      Complex complex14 = complex7.multiply((-2312.0769921));
      complex14.acos();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(2291.2386189, 2291.2386189);
      Complex complex1 = complex0.I.sqrt();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.cosh();
      complex0.INF.hashCode();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.ONE.add(2291.2386189);
      Complex complex7 = complex3.multiply(1422);
      Complex complex8 = complex0.NaN.cosh();
      complex7.nthRoot(1422);
      Complex complex9 = complex0.NaN.sqrt();
      complex4.NaN.subtract(complex8);
      complex3.abs();
      complex1.multiply(Double.NaN);
      complex2.pow(6.283185307179586);
      complex9.multiply(complex6);
      complex8.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.I.multiply(complex0);
      complex2.NaN.abs();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.sinh();
      complex3.ONE.sin();
      Complex complex5 = complex3.pow((-1368.594623));
      Complex complex6 = complex4.multiply(complex0);
      complex5.I.log();
      complex0.ZERO.tan();
      complex5.pow(Double.NaN);
      complex2.log();
      Complex complex7 = complex0.sin();
      complex0.I.divide((-1368.594623));
      Complex.valueOf(Double.NaN, Double.NaN);
      complex7.NaN.tan();
      complex5.toString();
      complex6.sqrt1z();
      complex6.atan();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      complex1.INF.sqrt1z();
      Complex complex2 = complex0.NaN.createComplex(20.0, 1.4977047507315718E290);
      Complex complex3 = complex1.NaN.createComplex(20.0, 157448.1164868385);
      complex1.toString();
      complex3.pow(complex1);
      Complex complex4 = complex3.I.sqrt1z();
      complex0.readResolve();
      Complex complex5 = complex0.multiply(1);
      complex5.I.multiply(20.0);
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex8.ONE.subtract(20.0);
      complex9.NaN.toString();
      Complex complex10 = complex9.NaN.sqrt1z();
      complex10.I.readResolve();
      Complex complex11 = complex6.reciprocal();
      Complex complex12 = complex7.atan();
      Complex complex13 = complex12.conjugate();
      complex13.NaN.divide(198.27);
      complex2.asin();
      complex3.divide(complex6);
      complex7.pow((-1591.0039147888));
      complex13.exp();
      complex6.negate();
      complex0.sqrt1z();
      complex4.createComplex(198.27, 1);
      complex11.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = Complex.valueOf(1668.751254110098, 1668.751254110098);
      Complex complex3 = complex2.ZERO.subtract((-3094.404069739));
      Complex complex4 = complex3.INF.multiply((-3094.404069739));
      Complex complex5 = complex1.ONE.multiply(complex2);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex0.multiply(1072);
      complex7.hashCode();
      Complex complex8 = complex7.pow((double) 1072);
      complex8.ZERO.acos();
      Complex complex9 = complex8.ZERO.divide(complex4);
      complex9.ONE.cos();
      complex8.INF.log();
      complex8.abs();
      Complex complex10 = complex5.sin();
      complex10.NaN.subtract(5680.2);
      complex10.cos();
      complex5.negate();
      complex9.sqrt();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(8.069984512111955E198);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex.valueOf((-20.0));
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.conjugate();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.tan();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.log();
      complex4.divide(Double.POSITIVE_INFINITY);
      complex2.cosh();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.subtract(3466.772392753459);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex3.acos();
      complex4.getField();
      Complex complex8 = complex2.sqrt();
      complex6.multiply(26.724072800154655);
      Complex complex9 = Complex.valueOf(723.69, 1.9151693415969248E-174);
      complex9.exp();
      Object object0 = new Object();
      complex7.equals(object0);
      complex7.getReal();
      complex0.divide(26.724072800154655);
      Complex complex10 = new Complex(9.295948298604103E-8, 3466.772392753459);
      Complex complex11 = Complex.INF;
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.negate();
      double double0 = 2.0;
      complex0.asin();
      complex2.INF.multiply(2.0);
      complex1.INF.sinh();
      complex1.ONE.pow(5.68253547942899E295);
      complex0.NaN.add(complex1);
      Complex complex3 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.INF;
      complex0.divide(complex3);
      complex4.log();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-5.564538942776648));
      complex0.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex1 = new Complex((-5.564538942776648), (-5.564538942776648));
      object0.equals(complex1);
      complex1.getReal();
      complex1.subtract((-383.3241));
      Complex complex2 = Complex.valueOf(6.989914264479507E-28, (-962.8378336946533));
      complex2.NaN.add((-962.8378336946533));
      complex2.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex1.reciprocal();
      Complex complex2 = complex1.ONE.divide(complex0);
      Object object0 = new Object();
      complex2.equals(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.INF.subtract(1.2765281565737816E60);
      complex4.divide(complex0);
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(Double.NaN, 0.0);
      Complex complex2 = complex0.reciprocal();
      complex0.divide(complex2);
      Object object0 = new Object();
      Complex complex3 = Complex.ONE;
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      complex0.cosh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      complex3.ONE.conjugate();
      Complex complex4 = complex3.subtract(2723.575);
      complex2.toString();
      Complex complex5 = complex4.subtract(Double.NaN);
      complex5.ZERO.reciprocal();
      Complex.valueOf(Double.NaN, 1801.77932);
      complex5.I.pow(1801.77932);
      try { 
        complex3.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-2473.5));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex6.divide(complex3);
      complex4.log();
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.log();
      complex2.toString();
      complex0.getImaginary();
      Complex complex3 = new Complex(2526.359678943, Double.NaN);
      complex3.pow(complex0);
      complex1.negate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.negate();
      Object object0 = complex1.readResolve();
      complex5.equals(object0);
      Complex complex6 = Complex.NaN;
      complex6.add(2526.359678943);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.log();
      double double0 = (-1868.1989);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.add(complex2);
      complex0.tan();
      complex0.tanh();
      Complex complex4 = Complex.INF;
      try { 
        complex3.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-2473.5), (-2473.5));
      Complex complex1 = complex0.asin();
      complex1.tan();
      complex0.reciprocal();
      complex1.cosh();
      complex0.divide(complex1);
      Complex complex2 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.add(complex0);
      complex2.INF.abs();
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.multiply(1010);
      complex3.INF.sin();
      complex1.cos();
      Complex complex6 = complex3.acos();
      complex6.I.readResolve();
      complex1.add(1.0);
      complex3.createComplex(1.0, Double.POSITIVE_INFINITY);
      complex5.readResolve();
      complex3.cos();
      complex1.subtract((-20.0));
      complex1.nthRoot(585);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1747.074296126565), (-1747.074296126565));
      Complex complex1 = complex0.subtract((-1747.074296126565));
      complex1.ZERO.multiply((-966.18673259));
      complex0.equals((Object) null);
      complex0.add((-1747.074296126565));
      // Undeclared exception!
      complex0.nthRoot(255986326);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-429.624928));
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.sin();
      complex0.isInfinite();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.I.tan();
      complex4.ONE.sqrt();
      Complex complex7 = Complex.ONE;
      complex7.divide(complex3);
      complex5.equals(complex1);
      complex6.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2656);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.subtract(complex1);
      complex0.I.cosh();
      try { 
        complex3.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2473.5));
      Complex complex1 = Complex.ZERO;
      complex0.log();
      complex0.toString();
      complex1.getImaginary();
      Complex complex2 = new Complex(3.204135737993823E-8, (-2473.5));
      complex0.pow(complex2);
      Complex complex3 = complex0.negate();
      complex3.acos();
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      complex1.getReal();
      complex3.I.log();
      complex1.subtract(2526.359678943);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tan();
      complex1.sqrt();
      complex1.divide((double) (-846));
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.log();
      Complex complex5 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.pow(complex3);
      Complex complex7 = complex4.negate();
      Complex complex8 = complex7.acos();
      complex2.equals(complex7);
      complex8.getReal();
      complex6.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      complex1.sqrt();
      complex1.divide(21.468592304970272);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.cos();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex2.asin();
      complex1.atan();
      complex7.nthRoot(1157);
      complex6.reciprocal();
      complex4.negate();
      complex5.acos();
      complex4.reciprocal();
      complex3.pow(1055.094326854);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.multiply((-1758.32));
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = Complex.valueOf((-1758.32));
      Complex complex5 = complex4.ZERO.sqrt();
      complex0.ZERO.getArgument();
      complex4.INF.exp();
      complex3.I.sqrt();
      complex4.readResolve();
      Complex complex6 = complex0.pow(2157.183687);
      complex6.I.subtract(complex3);
      complex2.INF.getField();
      Complex complex7 = complex6.ONE.add(0.9999999999999998);
      Complex complex8 = complex2.log();
      complex0.nthRoot(700);
      complex0.multiply(complex8);
      Complex complex9 = complex2.subtract((double) 700);
      complex8.add((double) 700);
      Complex complex10 = complex7.exp();
      Complex complex11 = complex4.subtract(complex3);
      complex5.nthRoot(671);
      complex11.NaN.asin();
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex12.NaN.cos();
      complex13.INF.add(complex9);
      complex10.ZERO.getArgument();
      complex1.equals(complex7);
      complex5.isInfinite();
      complex10.getField();
      complex6.conjugate();
      complex2.getField();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex2.multiply(1282);
      Complex complex4 = complex0.ONE.log();
      complex0.I.multiply(complex1);
      Complex complex5 = Complex.valueOf(2602.8);
      Complex complex6 = complex0.add(complex5);
      complex0.readResolve();
      complex5.pow(793.51);
      Complex complex7 = complex5.exp();
      complex7.isInfinite();
      complex2.getField();
      Complex complex8 = complex4.pow(complex2);
      Complex complex9 = complex6.multiply(2526.359678943);
      complex0.acos();
      complex8.sinh();
      complex9.cosh();
      try { 
        complex3.nthRoot((-1358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,358
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2653);
      Complex complex2 = complex1.subtract(3964.351365674669);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = new Complex(3964.351365674669);
      complex3.readResolve();
      complex4.equals((Object) null);
      complex1.pow(3382.0);
      complex1.subtract(1863.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(2553.41703149);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      complex2.ZERO.sin();
      complex0.isInfinite();
      Complex complex3 = complex0.conjugate();
      complex0.negate();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = Complex.valueOf(2553.41703149, (-20.0));
      Complex complex7 = complex6.tan();
      complex7.acos();
      complex5.reciprocal();
      complex4.pow(3452.604777);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.log();
      complex3.toString();
      complex2.getImaginary();
      complex2.log();
      Complex complex4 = complex0.tan();
      complex4.sqrt();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.divide(20.0);
      Complex complex6 = new Complex(0.6317287683486938, 3.597600556519039E85);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex1.sqrt();
      complex8.INF.tan();
      complex7.atan();
      Complex complex9 = new Complex(20.0);
      complex9.nthRoot(2659);
      complex6.reciprocal();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(1711.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ONE;
      complex2.ZERO.sin();
      complex0.isInfinite();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.negate();
      complex3.I.tan();
      complex4.sqrt();
      Complex complex5 = Complex.INF;
      complex5.divide(Double.NaN);
      Complex complex6 = complex1.cos();
      complex5.sqrt();
      complex5.atan();
      complex6.nthRoot(102);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      complex1.isInfinite();
      Complex complex2 = complex1.conjugate();
      complex0.negate();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.sqrt();
      complex0.divide(1.3289115531074511E-110);
      Complex complex5 = complex2.cos();
      complex5.sqrt();
      complex1.atan();
      complex4.nthRoot(2659);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.NaN;
      complex3.toString();
      complex2.getImaginary();
      complex2.log();
      Complex complex4 = Complex.INF;
      complex4.getField();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = Complex.valueOf(609.404354071507);
      complex6.readResolve();
      complex5.equals(complex0);
      complex3.getReal();
      complex6.subtract((-846.0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-807.25));
      Complex complex2 = complex1.ONE.divide(complex0);
      complex0.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.cos();
      complex4.INF.pow(complex2);
      complex1.NaN.createComplex(0.0, (-807.25));
      Complex complex5 = complex1.cosh();
      complex4.acos();
      Complex complex6 = new Complex(1.0000000817233625, 2.9621181706527444E172);
      complex5.pow(complex1);
      complex0.negate();
      Complex complex7 = complex3.acos();
      complex7.reciprocal();
      complex1.pow((-807.25));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(2553.41703149);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.sin();
      complex2.isInfinite();
      Complex complex4 = complex3.conjugate();
      complex0.negate();
      Complex complex5 = complex3.tan();
      complex3.sqrt();
      Complex complex6 = complex1.divide(2553.41703149);
      Complex complex7 = complex2.cos();
      complex2.sqrt();
      complex5.asin();
      complex2.atan();
      complex4.nthRoot(7);
      Complex complex8 = complex6.reciprocal();
      complex2.subtract(complex8);
      complex8.getField();
      Complex complex9 = Complex.valueOf(135.9351, (-760.4292604));
      complex4.add(complex9);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.NaN;
      complex4.toString();
      complex3.getImaginary();
      complex4.log();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.pow(complex3);
      complex1.negate();
      Complex complex6 = Complex.NaN;
      complex6.acos();
      complex5.reciprocal();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.log();
      Complex complex4 = new Complex((-1868.1989), (-1868.1989));
      complex4.add(complex0);
      complex3.tan();
      complex3.tanh();
      Complex complex5 = Complex.INF;
      complex2.divide(complex5);
      Complex complex6 = complex1.log();
      complex6.sqrt();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.readResolve();
      Complex complex8 = new Complex(6.283185307179586, 1.6151834292371802E124);
      complex7.equals(complex8);
      complex8.getReal();
      complex1.subtract((-2826.8461242112417));
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-807.25));
      Complex complex2 = complex1.log();
      Complex complex3 = new Complex((-1868.1989), (-807.25));
      Complex complex4 = complex3.add(complex0);
      complex4.tan();
      Complex complex5 = complex2.tanh();
      Complex complex6 = Complex.INF;
      complex4.divide(complex5);
      complex1.log();
      complex1.exp();
      Complex complex7 = Complex.valueOf((-5.848862070736576E-9), (-1868.1989));
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex1.sqrt();
      complex3.sinh();
      Complex complex10 = new Complex(3102.4, 0.0);
      complex10.multiply(complex9);
      complex8.log();
      Complex.valueOf(0.6823468208312988, 0.0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(2553.41703149);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.tan();
      complex4.reciprocal();
      Complex complex5 = new Complex(1639.70830128357, 2553.41703149);
      complex5.cosh();
      Complex complex6 = complex4.sinh();
      complex0.divide(complex5);
      complex2.reciprocal();
      Complex complex7 = Complex.INF;
      complex3.readResolve();
      complex4.exp();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1747.074296126565), (-1747.074296126565));
      Complex complex1 = new Complex(2526.359678943, 516.72238661871);
      Complex complex2 = new Complex((-1747.074296126565), (-1747.074296126565));
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = Complex.NaN;
      complex4.negate();
      complex0.acos();
      Complex complex5 = Complex.ONE;
      complex5.ZERO.sin();
      complex3.pow(8.506536571384565);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.NaN.log();
      complex1.ONE.multiply(complex3);
      complex0.NaN.hashCode();
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = Complex.valueOf(0.4794800877571106, 0.4794800877571106);
      Complex complex6 = complex4.ZERO.negate();
      Complex complex7 = complex6.INF.subtract(0.4794800877571106);
      complex2.ONE.readResolve();
      Complex complex8 = complex0.negate();
      complex8.ZERO.getField();
      complex8.NaN.nthRoot(1);
      complex0.tanh();
      complex2.tanh();
      Complex complex9 = complex6.createComplex(1311.640938, 1);
      Complex complex10 = complex9.ONE.cos();
      complex10.NaN.multiply(52);
      Complex complex11 = Complex.valueOf(1311.640938, 0.4794800877571106);
      Complex complex12 = complex11.conjugate();
      complex12.INF.multiply((-354));
      Complex complex13 = complex5.tanh();
      complex13.divide(complex2);
      complex9.createComplex(0.265214741230011, (-20.0));
      complex7.tan();
      complex7.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex((-4.980137196792674), (-807.25));
      Complex complex1 = complex0.divide((-807.25));
      complex0.cosh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sqrt1z();
      complex3.tan();
      complex1.add((-807.25));
      complex0.toString();
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.sqrt();
      complex1.getImaginary();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.divide(complex2);
      complex0.reciprocal();
      complex0.readResolve();
      complex3.exp();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1747.074296126565), (-1747.074296126565));
      complex0.acos();
      complex0.sqrt1z();
      Complex complex1 = complex0.tan();
      complex0.add(1150.7);
      complex1.toString();
      Complex.valueOf(895.1041813);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(2553.41703149);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      complex2.ZERO.sin();
      complex0.isInfinite();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.I.tan();
      Complex complex6 = complex3.ONE.sqrt();
      Complex complex7 = complex6.I.divide(2553.41703149);
      Complex complex8 = complex4.cos();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex0.INF.asin();
      Complex complex11 = complex10.I.atan();
      complex3.nthRoot(2659);
      complex9.reciprocal();
      complex3.subtract(complex2);
      complex11.getField();
      complex11.add(complex7);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3568.23);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.log();
      complex1.NaN.multiply(1);
      Complex complex3 = complex0.I.cosh();
      complex2.INF.subtract((-7.724182294653349E62));
      Complex complex4 = complex3.INF.asin();
      complex2.ZERO.divide(complex1);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.atan();
      complex2.readResolve();
      Complex complex6 = complex1.sqrt1z();
      complex6.cos();
      complex4.pow(1.2530649392922358E-242);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-807.25));
      Complex complex2 = complex1.ONE.divide(complex0);
      complex0.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.cos();
      complex4.createComplex(0.0, 0.0);
      Complex complex5 = complex4.INF.pow(complex2);
      Complex complex6 = complex1.sinh();
      Complex complex7 = Complex.valueOf(3237.406165523911, 1.6616523265838623);
      complex7.ONE.toString();
      Complex complex8 = complex6.multiply(complex5);
      complex8.log();
      Complex complex9 = complex8.sqrt();
      complex9.ONE.divide((-807.25));
      complex4.log();
      Complex complex10 = Complex.I;
      complex2.equals(complex4);
      complex3.abs();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.log();
      Complex complex4 = new Complex((-1868.1989), (-1868.1989));
      Complex complex5 = complex4.add(complex0);
      complex3.tan();
      complex3.tanh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.divide(complex6);
      complex1.log();
      complex1.exp();
      complex0.cosh();
      complex2.sqrt();
      complex5.sinh();
      complex7.multiply(complex4);
      complex0.log();
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      complex0.sqrt();
      complex1.getField();
      Complex complex2 = complex1.pow((-2029.3031908));
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.subtract(84.68101111528);
      complex2.asin();
      complex2.reciprocal();
      complex5.cosh();
      complex1.acos();
      complex5.getField();
      complex3.sqrt();
      Object object0 = new Object();
      complex4.equals(object0);
      complex2.getReal();
      Complex complex6 = Complex.valueOf(0.0, Double.NaN);
      complex6.subtract(1098.5956723187783);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2473.5));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex2.NaN.cosh();
      complex4.NaN.sinh();
      Complex complex5 = complex4.ONE.reciprocal();
      complex1.getImaginary();
      complex5.divide(complex2);
      complex1.reciprocal();
      complex1.readResolve();
      complex3.exp();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-807.25));
      Complex complex2 = complex1.ONE.divide(complex0);
      complex0.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.cos();
      complex4.INF.pow(complex2);
      complex1.NaN.createComplex(0.0, (-807.25));
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex4.acos();
      Complex complex7 = Complex.INF;
      complex7.getField();
      complex5.sqrt();
      Complex complex8 = Complex.valueOf(6.283185307179586);
      Object object0 = complex8.readResolve();
      complex8.equals(object0);
      complex6.getReal();
      complex0.subtract((-1224.0263805980821));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = Complex.ZERO;
      complex1.multiply(complex3);
      complex2.subtract(complex0);
      complex2.nthRoot(658);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.reciprocal();
      complex4.subtract(complex0);
      complex4.getField();
      complex5.acos();
      complex4.multiply((double) (-3086));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      complex0.getImaginary();
      complex0.divide(complex1);
      Complex complex2 = complex1.reciprocal();
      complex2.readResolve();
      complex0.exp();
      Complex complex3 = Complex.ZERO;
      complex3.getReal();
      complex3.subtract(429.2104);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-807.25));
      Complex complex2 = complex1.ONE.divide(complex0);
      complex0.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.cos();
      complex4.INF.pow(complex2);
      Complex complex5 = complex1.NaN.createComplex(0.0, (-807.25));
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex1.exp();
      complex2.isInfinite();
      complex5.nthRoot(873);
      complex5.sqrt();
      complex6.add(complex7);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2473.5));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      complex2.NaN.reciprocal();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.NaN.sinh();
      complex0.reciprocal();
      Complex complex5 = complex1.sqrt();
      complex4.getField();
      complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex4.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex0.asin();
      Complex complex10 = complex2.reciprocal();
      complex5.cosh();
      complex7.acos();
      complex9.getField();
      Complex complex11 = complex3.sqrt();
      Complex complex12 = Complex.valueOf((-2475.81383541387), 164.0);
      complex8.equals(complex12);
      complex11.getReal();
      complex10.subtract((-2475.81383541387));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2473.5));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex2.NaN.cosh();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex0.sqrt();
      complex5.getField();
      Complex complex8 = complex3.pow((-2473.5));
      Complex complex9 = complex0.tanh();
      complex8.subtract(5.321990399912051E-172);
      Complex complex10 = complex7.asin();
      complex9.reciprocal();
      Complex complex11 = complex1.cosh();
      Complex complex12 = complex4.acos();
      complex11.getField();
      complex12.sqrt();
      Object object0 = new Object();
      complex10.equals(object0);
      complex3.getReal();
      complex6.subtract((-2012.59337965));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      complex0.divide(complex2);
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.valueOf((-2012.59337965));
      complex4.asin();
      Complex complex5 = Complex.valueOf(0.5827828645706177);
      Complex complex6 = complex5.cos();
      complex4.pow(complex6);
      Complex complex7 = complex2.createComplex((-2012.59337965), 0.5827828645706177);
      Complex complex8 = Complex.ONE;
      complex8.cosh();
      complex7.exp();
      Complex complex9 = Complex.ONE;
      complex9.acos();
      complex3.getArgument();
      complex3.add(complex8);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1646.562), 0.0010693068367709495);
      Complex complex2 = complex0.acos();
      Complex complex3 = new Complex(354.46061879, (-1130.0163733463));
      complex3.log();
      Complex complex4 = complex2.multiply(2505);
      Complex complex5 = complex2.cosh();
      complex1.subtract((-304.1505));
      complex4.asin();
      complex1.divide(complex5);
      Complex.valueOf((-1646.562));
      complex0.readResolve();
      complex0.sqrt1z();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7136.460140125493);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.sin();
      complex3.log();
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex3.tan();
      complex2.tanh();
      complex2.exp();
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = new Complex(7136.460140125493);
      Complex complex8 = complex7.log();
      Complex complex9 = complex3.exp();
      complex8.cosh();
      complex4.sqrt();
      complex6.sinh();
      Complex complex10 = complex4.multiply(complex0);
      complex10.I.exp();
      complex9.log();
      Complex.valueOf(0.0, 738.39);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(347.33619, 3945.63618);
      complex0.getArgument();
      complex0.nthRoot(989);
      Complex complex1 = complex0.sqrt();
      complex0.NaN.getField();
      complex0.I.getArgument();
      Complex complex2 = complex1.multiply(1946.415);
      complex1.exp();
      Complex complex3 = Complex.valueOf(0.28597164154052734);
      Complex complex4 = complex1.INF.subtract((-1.0));
      Complex.valueOf(0.0, 1.482992203064172);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.divide(complex1);
      complex2.NaN.multiply(complex5);
      complex5.NaN.exp();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex7.reciprocal();
      complex8.ONE.negate();
      complex5.sin();
      Complex complex9 = complex6.divide(complex7);
      complex9.ZERO.tan();
      Complex complex10 = complex7.pow(complex6);
      complex3.getImaginary();
      complex9.I.log();
      complex6.hashCode();
      complex4.acos();
      Complex complex11 = Complex.I;
      complex0.INF.multiply(complex11);
      complex9.cosh();
      complex0.conjugate();
      complex10.divide((-856.3332569));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, (-807.25));
      Complex complex2 = complex1.ONE.divide(complex0);
      complex0.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.cos();
      complex4.INF.pow(complex2);
      Complex complex5 = complex1.NaN.createComplex(0.0, (-807.25));
      complex5.INF.cosh();
      Complex complex6 = complex1.exp();
      complex0.acos();
      complex6.getArgument();
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.INF.multiply((-4291.58061));
      complex2.ONE.pow(complex1);
      Complex complex3 = complex2.add((-4291.58061));
      complex3.INF.getArgument();
      Complex complex4 = complex1.NaN.sinh();
      complex0.readResolve();
      Complex complex5 = complex0.atan();
      complex5.ZERO.pow(complex4);
      Complex complex6 = Complex.valueOf(112.109799, 112.109799);
      try { 
        complex6.ONE.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1777.290349));
      Complex complex1 = complex0.ONE.divide((-1777.290349));
      complex1.NaN.cosh();
      Complex complex2 = complex1.ZERO.acos();
      complex2.sqrt1z();
      complex2.ZERO.tan();
      complex1.ZERO.add(1150.7);
      complex0.toString();
      Complex.valueOf(1150.7);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-1.1961357917482867E-148));
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.NaN.reciprocal();
      complex0.getReal();
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex1.createComplex(1.0, 1.0);
      Complex complex6 = complex5.ONE.pow((-1.1961357917482867E-148));
      complex0.abs();
      complex4.getField();
      Complex complex7 = complex0.sqrt();
      complex3.tan();
      complex4.getArgument();
      complex6.toString();
      complex7.multiply((-1081));
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.ONE.toString();
      complex1.I.sqrt1z();
      Complex complex2 = complex0.I.add(complex1);
      double double1 = 0.5827828645706177;
      complex0.I.exp();
      Complex complex3 = Complex.valueOf(0.0, 0.5827828645706177);
      complex0.divide(0.0);
      Complex complex4 = complex1.I.subtract(0.0);
      complex4.ZERO.tan();
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex5.divide(complex3);
      complex6.I.conjugate();
      complex2.isNaN();
      try { 
        complex3.nthRoot((-1473));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,473
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.log();
      complex1.add(complex0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex1.exp();
      complex6.divide(complex3);
      Complex complex8 = complex3.log();
      complex0.NaN.exp();
      complex5.cosh();
      complex6.sqrt();
      complex4.sinh();
      complex5.multiply(complex7);
      complex8.log();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = Complex.valueOf(789.776, (-393.7510973999651));
      complex0.multiply(1347);
      complex1.getArgument();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ONE.sqrt();
      complex3.I.readResolve();
      Complex complex4 = complex2.pow((-1.797135137545755E-8));
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-1176.3398429051);
      Complex complex1 = complex0.I.conjugate();
      complex1.ONE.log();
      Complex.valueOf((-1176.3398429051), (-1176.3398429051));
      Complex complex2 = Complex.valueOf((-1176.3398429051));
      complex2.NaN.readResolve();
      complex2.NaN.multiply(0);
      complex0.NaN.readResolve();
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf((-1176.3398429051));
      complex2.ONE.tan();
      Complex complex4 = complex0.I.subtract(complex3);
      Complex complex5 = complex4.NaN.sin();
      complex5.ONE.abs();
      Complex complex6 = complex3.multiply(complex2);
      complex4.NaN.pow((double) 0);
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex0.tan();
      complex8.add(complex4);
      complex7.subtract((-3683.5837547670494));
      Complex complex9 = Complex.valueOf(0.0, (double) 0);
      complex9.cosh();
      complex6.reciprocal();
      complex8.tan();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.multiply(complex1);
      int int0 = (-3086);
      complex2.ZERO.subtract(complex0);
      try { 
        complex0.nthRoot((-3086));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,086
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(1870.37);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.NaN.pow(2.24669039465627E188);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.tanh();
      complex1.sinh();
      complex5.NaN.getArgument();
      Complex.valueOf(1205.7387);
      Complex complex6 = complex0.ZERO.acos();
      Complex complex7 = complex6.ONE.sin();
      complex7.ONE.acos();
      complex5.createComplex(1870.37, 0.0);
      Complex complex8 = Complex.valueOf(4.3418021646459346E167);
      complex8.ONE.multiply(2.24669039465627E188);
      complex1.hashCode();
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex9.NaN.cos();
      complex9.INF.add(complex10);
      Complex complex11 = complex10.ONE.tan();
      complex2.getField();
      complex3.exp();
      complex0.tanh();
      complex10.acos();
      complex10.reciprocal();
      complex11.createComplex((-1.0), 0.0);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex2.asin();
      complex4.ONE.tan();
      Complex complex5 = complex3.ZERO.createComplex(0.0, (-1.0));
      complex5.INF.conjugate();
      Complex complex6 = complex5.ONE.multiply(1);
      complex6.ZERO.abs();
      Complex complex7 = complex4.pow(complex2);
      Complex complex8 = complex3.tanh();
      complex8.ZERO.nthRoot(1);
      Complex complex9 = complex4.cosh();
      complex9.NaN.sqrt();
      complex9.NaN.hashCode();
      Complex complex10 = complex7.sqrt1z();
      complex2.sqrt();
      Complex complex11 = complex3.subtract(0.0);
      Complex complex12 = complex11.sin();
      Complex.valueOf((-322.6277));
      complex12.asin();
      complex10.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.I;
      complex2.NaN.readResolve();
      Complex complex3 = complex0.pow(complex2);
      complex2.ONE.hashCode();
      Complex complex4 = complex3.INF.cosh();
      complex4.I.getField();
      Complex complex5 = complex2.atan();
      complex0.acos();
      complex2.createComplex(0.13499516248703003, 0.13499516248703003);
      complex5.sin();
      Object object0 = new Object();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3568.23);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.log();
      complex1.NaN.multiply(1);
      Complex complex3 = complex0.I.cosh();
      complex2.INF.subtract((-7.724182294653349E62));
      complex3.INF.asin();
      complex2.ZERO.divide(complex1);
      Complex.valueOf(0.0);
      complex2.readResolve();
      Complex complex4 = complex1.sqrt1z();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-3.987619123706934E79), (-3.987619123706934E79));
      complex0.getImaginary();
      Complex complex1 = complex0.multiply((-3.987619123706934E79));
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.INF.multiply(0);
      Complex complex4 = complex1.ZERO.add(complex0);
      complex4.ZERO.cos();
      Complex complex5 = new Complex((-3.987619123706934E79));
      Complex complex6 = complex5.I.pow((-3.987619123706934E79));
      Complex complex7 = complex6.I.add(complex1);
      Complex complex8 = complex6.NaN.multiply(76);
      Complex complex9 = complex8.INF.atan();
      complex9.INF.createComplex(76, 0);
      Complex complex10 = complex5.subtract((-3.987619123706934E79));
      Complex complex11 = complex0.subtract(complex5);
      complex11.NaN.add(complex3);
      complex1.tan();
      Complex complex12 = complex10.INF.sqrt();
      complex2.getImaginary();
      Complex complex13 = complex10.acos();
      complex13.subtract((-3.987619123706934E79));
      complex0.conjugate();
      complex10.INF.sin();
      complex6.ZERO.nthRoot(715);
      complex12.nthRoot(76);
      complex12.abs();
      complex7.isInfinite();
      complex2.nthRoot(701);
      Complex complex14 = complex3.conjugate();
      complex2.atan();
      Complex complex15 = new Complex(0.0);
      complex14.equals(complex15);
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.multiply(4374);
      complex2.INF.add(complex1);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.ONE.negate();
      complex4.INF.log();
      complex2.getReal();
      complex0.tanh();
      complex3.add(complex2);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.divide(complex1);
      Complex complex2 = complex1.ZERO.pow(1175.7970124706);
      complex0.sin();
      complex2.pow(1175.7970124706);
      complex1.asin();
      complex0.divide(complex1);
      complex2.INF.tanh();
      complex2.getField();
      complex1.tan();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.subtract(2.0862154960632324);
      complex5.ONE.cos();
      int int0 = 554;
      complex3.I.multiply(554);
      int int1 = 0;
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.79214305133496E-187);
      Complex complex1 = Complex.valueOf(0.20660123229026794);
      complex1.NaN.cosh();
      Complex complex2 = complex0.divide(complex1);
      complex1.subtract(0.0);
      Complex.valueOf((-402.273));
      complex2.ZERO.log();
      Complex complex3 = complex0.sin();
      complex0.ZERO.pow(complex3);
      Complex complex4 = complex3.sqrt();
      complex4.pow(complex0);
      Complex complex5 = Complex.valueOf(0.20660123229026794);
      complex5.add((-294.75002));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex1.conjugate();
      complex1.NaN.toString();
      complex0.getImaginary();
      complex1.log();
      Complex complex3 = complex2.pow(complex1);
      complex2.negate();
      complex2.acos();
      complex3.reciprocal();
      complex3.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.add(complex0);
      complex0.NaN.abs();
      complex2.getField();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex1.pow(2746.5801527143853);
      complex3.NaN.add(Double.NaN);
      complex4.ONE.toString();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex3.add(complex4);
      complex6.hashCode();
      complex6.createComplex(6.283185307179586, 6.283185307179586);
      complex3.I.reciprocal();
      Complex complex7 = complex5.sin();
      complex2.readResolve();
      Complex complex8 = complex4.tanh();
      complex8.add(complex3);
      Complex.valueOf(2746.5801527143853);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.NaN.nthRoot(1054);
      Complex complex2 = complex1.ONE.divide((double) 1054);
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex0.pow(complex1);
      complex0.INF.readResolve();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex5.divide(2725.1693119247);
      complex5.NaN.sqrt();
      Complex complex8 = complex7.NaN.cosh();
      complex7.NaN.toString();
      complex8.subtract(complex6);
      complex1.toString();
      Complex complex9 = complex5.ZERO.acos();
      Complex complex10 = complex1.cos();
      complex10.I.conjugate();
      complex10.I.log();
      Complex complex11 = complex0.pow((-2282.685910453));
      complex11.NaN.atan();
      complex11.INF.getArgument();
      Complex complex12 = complex1.INF.conjugate();
      Complex complex13 = complex12.subtract(complex4);
      complex13.NaN.divide(complex3);
      complex7.reciprocal();
      complex8.abs();
      Complex complex14 = complex1.I.multiply(0.0);
      complex14.I.readResolve();
      complex7.pow((-2218.205319));
      complex9.asin();
      complex12.sqrt();
      complex14.nthRoot(1054);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(263.562484049261);
      Complex complex1 = complex0.createComplex(1.1677812418806031E-60, 1.1677812418806031E-60);
      complex0.INF.pow(complex1);
      complex0.NaN.cosh();
      Complex complex2 = complex1.createComplex(263.562484049261, (-5379.2));
      complex2.NaN.getArgument();
      complex2.INF.sqrt();
      complex2.getField();
      Complex complex3 = Complex.ZERO;
      complex3.NaN.tan();
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(723.2264109129663);
      complex0.NaN.toString();
      Complex complex1 = complex0.INF.tan();
      complex0.acos();
      Complex.valueOf(140.622393, 140.622393);
      complex1.cosh();
      complex0.divide(4977.0);
      complex0.pow(complex1);
      Complex complex2 = Complex.ZERO;
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      complex0.ZERO.getField();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.atan();
      complex2.toString();
      Complex complex5 = complex4.INF.multiply(1560);
      complex4.isNaN();
      complex5.INF.abs();
      complex4.abs();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex7.NaN.tan();
      complex8.multiply(2.0003490682463053E196);
      Complex complex9 = complex3.acos();
      complex0.isInfinite();
      complex6.isNaN();
      complex2.isInfinite();
      complex5.getReal();
      Complex complex10 = complex2.divide(complex9);
      complex10.I.nthRoot(1560);
      complex9.ONE.sin();
      complex2.cos();
      complex8.add(complex7);
      Complex complex11 = complex9.multiply(1560);
      Complex.valueOf((-6.451285264969768E-9));
      complex0.pow(complex1);
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.I.add(0.0);
      complex2.NaN.tan();
      Complex complex3 = complex0.subtract(0.129004567861557);
      complex0.NaN.divide(complex1);
      Complex complex4 = Complex.valueOf(20.0);
      Complex complex5 = complex4.I.sin();
      complex0.getField();
      complex0.multiply(complex3);
      complex5.acos();
      Complex.valueOf((-1001.59588), 20.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(2553.41703149);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.sin();
      complex0.isInfinite();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.negate();
      complex4.I.tan();
      Complex complex6 = complex4.ONE.sqrt();
      complex6.I.divide(2553.41703149);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex0.INF.asin();
      complex9.I.atan();
      complex4.nthRoot(2659);
      Complex complex10 = complex4.subtract(complex1);
      complex10.ZERO.sinh();
      Complex.valueOf((double) 2659, 2553.41703149);
      complex0.NaN.multiply(complex5);
      complex3.log();
      complex3.sqrt();
      complex10.log();
      Complex complex11 = Complex.I;
      complex3.equals(complex11);
      complex8.abs();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      complex0.exp();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.negate();
      complex2.ZERO.conjugate();
      complex0.getReal();
      complex2.INF.sinh();
      Complex complex3 = complex0.subtract(Double.NaN);
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.I.subtract(complex0);
      complex5.I.toString();
      complex5.NaN.reciprocal();
      complex0.ONE.divide(2443.29);
      Complex complex6 = complex3.log();
      complex6.NaN.tanh();
      Complex.valueOf(190.94110574339);
      complex0.ZERO.sinh();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(1724.362);
      Complex complex2 = Complex.valueOf(0.0, 1724.362);
      complex2.INF.getArgument();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex0.multiply(1724.362);
      Complex complex5 = complex4.ZERO.add(1724.362);
      complex4.getReal();
      Complex complex6 = complex1.add(1.4366366863250732);
      complex4.ZERO.getArgument();
      Complex complex7 = complex4.cosh();
      complex6.ZERO.cos();
      complex5.getImaginary();
      Complex complex8 = complex7.sqrt1z();
      complex8.INF.reciprocal();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex9.exp();
      complex8.getField();
      complex10.atan();
      Complex complex11 = complex6.log();
      complex7.multiply(complex11);
      complex0.add(1.4366366863250732);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.multiply((-636));
      complex0.NaN.hashCode();
      complex0.I.getArgument();
      complex0.getArgument();
      complex0.getArgument();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.I.sqrt1z();
      complex0.subtract(complex1);
      complex1.isNaN();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      complex1.ONE.readResolve();
      Complex complex2 = complex1.NaN.tan();
      complex2.INF.tan();
      complex0.sqrt();
      complex1.divide(1290.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.hashCode();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.divide(9.45732984079136E214);
      Complex complex2 = complex0.subtract(1.552583321178453E-10);
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.ZERO.sin();
      complex2.INF.toString();
      complex3.NaN.add(1.0);
      complex2.NaN.nthRoot(17);
      complex1.add(complex2);
      complex2.getReal();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.pow((-795.0));
      try { 
        complex0.nthRoot((-342));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -342
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.5477436429), 1296.0);
      complex1.ONE.tan();
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex2.ONE.toString();
      Complex complex3 = complex0.sqrt();
      complex3.NaN.asin();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.add(complex0);
      complex0.getImaginary();
      complex5.tanh();
      try { 
        complex4.nthRoot((-1131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,131
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.exp();
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      complex1.NaN.subtract(complex0);
      complex1.I.acos();
      try { 
        complex1.ZERO.nthRoot((-578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -578
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-1747.074296126565), (-1747.074296126565));
      complex0.equals((Object) null);
      complex0.add((-1747.074296126565));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(1771.0, (-1335.97612814234));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.sinh();
      complex0.getReal();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.multiply((-1335.97612814234));
      Complex complex5 = Complex.NaN;
      complex4.NaN.divide(complex5);
      complex4.INF.pow(complex3);
      complex3.tan();
      Complex complex6 = complex1.divide(0.0);
      complex3.getImaginary();
      Complex complex7 = complex6.pow(complex1);
      complex7.INF.conjugate();
      complex7.toString();
      Complex complex8 = Complex.valueOf(0.0);
      complex0.ONE.conjugate();
      Complex complex9 = complex7.INF.acos();
      complex6.getImaginary();
      complex1.getField();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex0.add(Double.NaN);
      complex2.log();
      complex10.divide(0.0);
      complex2.getArgument();
      Complex complex12 = complex9.multiply(1.2384658100355657E72);
      Complex complex13 = complex12.exp();
      complex8.getImaginary();
      Complex complex14 = complex5.divide(complex11);
      complex13.sin();
      complex10.acos();
      complex12.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2694.117055602399);
      Complex complex1 = complex0.I.multiply(2694.117055602399);
      Complex complex2 = complex0.tanh();
      complex0.getImaginary();
      complex0.NaN.hashCode();
      Complex.valueOf(2694.117055602399, 0.0);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.INF.add(0.0);
      Complex complex6 = complex4.negate();
      complex4.sqrt();
      Complex complex7 = complex5.I.createComplex(0.0, 0.0);
      complex2.equals(complex4);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex1.add(0.0);
      Complex complex10 = Complex.valueOf(0.0, (-2202.182540617));
      complex10.createComplex((-615.4150258837), 1891.759);
      complex7.getArgument();
      complex4.nthRoot(1149);
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex11.I.negate();
      complex12.INF.add(1189.4030855542726);
      complex12.divide(complex8);
      complex11.sqrt1z();
      complex0.add(complex11);
      complex9.tanh();
      complex6.exp();
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      complex0.getImaginary();
      complex0.divide(complex1);
      Complex complex2 = complex1.reciprocal();
      complex2.readResolve();
      complex0.exp();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2473.5));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex2.NaN.cosh();
      complex4.NaN.sinh();
      Complex complex5 = complex4.ONE.reciprocal();
      complex5.ZERO.sqrt();
      complex2.getField();
      Complex complex6 = complex0.pow(2.0);
      complex2.tanh();
      Complex complex7 = complex3.subtract((-2473.5));
      complex6.asin();
      complex7.INF.reciprocal();
      complex2.I.cosh();
      Complex complex8 = complex7.acos();
      complex8.ONE.getField();
      complex3.sqrt();
      complex4.equals(complex0);
      complex1.getReal();
      complex4.subtract((-1.5707963267948966));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(1026.155701975);
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.ONE.getArgument();
      Complex complex3 = complex1.NaN.subtract((-1.0028661472061573E-7));
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.NaN.multiply(complex0);
      complex0.isInfinite();
      Complex complex6 = complex4.add(987.291223588);
      complex6.hashCode();
      complex1.add(0.0);
      complex0.isInfinite();
      Complex complex7 = complex1.I.add(complex5);
      complex3.multiply(3198);
      Complex complex8 = complex1.createComplex(3198, 1.7043828964233398);
      Complex complex9 = complex8.INF.cosh();
      complex9.I.tanh();
      Complex complex10 = complex0.cosh();
      complex10.I.nthRoot(3198);
      complex6.cos();
      complex3.conjugate();
      complex4.acos();
      try { 
        complex7.nthRoot((-2826));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,826
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-846));
      Complex complex2 = complex1.ONE.subtract(3964.351365674669);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-3963.351365674669), complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.subtract(complex1);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(847.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.cosh();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      
      Complex complex5 = Complex.valueOf((double) (-846), (double) (-846));
      assertFalse(complex5.isInfinite());
      assertEquals((-846.0), complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.ONE.negate();
      complex2.NaN.add(complex1);
      complex1.getArgument();
      complex0.ZERO.toString();
      complex0.I.abs();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
      Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.reciprocal();
      int int0 = 1;
      complex0.nthRoot(1);
      complex0.cos();
      complex0.ONE.getArgument();
      complex1.NaN.nthRoot(1335);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.sqrt1z();
      complex3.multiply(0.0);
      try { 
        complex2.nthRoot((-1346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,346
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
