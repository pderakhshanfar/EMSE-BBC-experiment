/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:50:06 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.pow((-3404.1228777583));
      complex4.NaN.multiply(1817);
      complex4.ZERO.nthRoot(638);
      Complex complex5 = complex2.pow(complex0);
      complex5.getArgument();
      Complex complex6 = complex2.multiply(640.9781);
      complex5.I.toString();
      complex6.INF.getField();
      complex2.negate();
      complex5.exp();
      complex5.nthRoot(4814);
      Complex complex7 = complex2.createComplex(4814, (-3404.1228777583));
      Complex complex8 = complex7.pow(Double.NaN);
      complex8.ZERO.abs();
      complex8.ZERO.pow(complex6);
      Complex complex9 = complex1.createComplex(0.29473721981048584, 4.062894701808608E154);
      Complex complex10 = complex4.negate();
      complex9.sqrt1z();
      Complex complex11 = complex9.cosh();
      complex10.exp();
      try { 
        complex11.nthRoot((-2143832622));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,143,832,622
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-11.796679605224067), (-11.796679605224067));
      complex0.nthRoot(607);
      Complex complex1 = Complex.valueOf((-11.796679605224067));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply(2130);
      Complex complex4 = complex1.tanh();
      Complex complex5 = new Complex(2.5312442779541016, Double.POSITIVE_INFINITY);
      complex3.multiply(complex5);
      Complex.valueOf(37.0);
      complex4.nthRoot(607);
      Complex complex6 = Complex.valueOf((double) 607, (double) 37);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(20.0);
      complex2.tanh();
      Complex.valueOf(20.0, 1.6503086546628772E-97);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-11.454536));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.pow((-11.454536));
      Complex.valueOf(5.147575929018918E-9, 2598.6549);
      complex0.multiply(219);
      complex2.toString();
      complex1.pow(complex0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.pow((-20.0));
      complex5.equals(complex0);
      complex5.asin();
      complex6.acos();
      Complex complex7 = complex5.reciprocal();
      complex3.nthRoot(259);
      complex7.exp();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1298.8753601, 1298.8753601);
      Complex complex2 = complex1.divide(1298.8753601);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = new Complex(1174.23171);
      Complex complex5 = complex3.multiply(2.0299429893493652);
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = Complex.valueOf((-20.0));
      complex7.tanh();
      complex1.subtract(1174.23171);
      complex4.divide((-40.0961862));
      complex7.hashCode();
      Complex.valueOf(2.0299429893493652);
      complex1.tan();
      Object object0 = new Object();
      int int0 = 17;
      try { 
        complex6.nthRoot((-429));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -429
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      Complex complex1 = new Complex(2231.4742296137874, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.log();
      complex2.multiply(2.414213562373095);
      Complex complex3 = new Complex(3263.1275809);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.tanh();
      complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex2.subtract((-2078.258));
      complex0.asin();
      complex7.add(2.414213562373095);
      complex6.sqrt();
      complex5.pow((-2078.258));
      complex2.sqrt1z();
      Complex complex9 = complex6.multiply((-959));
      complex4.pow(complex5);
      Complex complex10 = complex9.sin();
      complex6.conjugate();
      Complex complex11 = new Complex(3263.1275809, (-3118.0));
      complex11.pow(2.414213562373095);
      Complex complex12 = new Complex((-20.0));
      Object object0 = complex6.readResolve();
      complex8.equals(object0);
      complex10.asin();
      Complex.valueOf((-2761363.944315654));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(8.92737729121985E-11, (-4853.008));
      Complex complex2 = complex1.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.atan();
      complex0.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      complex1.I.reciprocal();
      Complex complex2 = new Complex((-1.0));
      complex2.multiply(1174.23171);
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(1174.23171);
      Complex complex5 = new Complex(1174.23171);
      complex4.divide(2.6066743963326644E-6);
      Complex complex6 = Complex.valueOf(8.831699889789037E154, 0.06593192724971701);
      Object object0 = new Object();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1837.64545110027));
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf((-648.35725451377), (-2817.0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-11.386421042018174), Double.POSITIVE_INFINITY);
      complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-11.386421042018174), 3680.043423);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(775.0, 1.7740094661712646);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = Complex.ONE;
      complex3.ONE.log();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.multiply(complex2);
      complex6.I.pow(complex4);
      complex6.toString();
      Complex complex7 = complex5.cos();
      complex7.acos();
      Complex complex8 = complex1.sin();
      complex8.INF.hashCode();
      complex3.nthRoot(1669);
      Complex complex9 = complex3.pow((double) 1669);
      complex9.ZERO.subtract((double) 1669);
      complex9.NaN.toString();
      complex2.ZERO.multiply(complex5);
      Complex complex10 = Complex.I;
      complex10.readResolve();
      complex10.ZERO.getField();
      complex5.multiply(complex10);
      Complex complex11 = Complex.valueOf(775.0);
      complex11.I.toString();
      Complex complex12 = complex2.exp();
      complex12.ZERO.acos();
      complex0.exp();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex.valueOf(2.624377727508545, 2.624377727508545);
      Complex complex0 = new Complex(2.624377727508545, 2116.79207569);
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.036957962769010304, 0.036957962769010304);
      Complex complex1 = complex0.acos();
      complex1.tan();
      // Undeclared exception!
      complex0.nthRoot(2126955174);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(3.1408919441362495E-288, 20.0);
      Complex complex1 = Complex.NaN;
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.tan();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-7774413.119999999), (-1309.7564450242));
      complex1.NaN.cosh();
      Complex complex2 = complex0.INF.createComplex(5840.4398317, (-5.198295198128238E28));
      complex2.ONE.pow(complex0);
      complex2.ONE.abs();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex3.ONE.subtract(complex0);
      complex4.I.abs();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.cosh();
      complex6.NaN.getField();
      complex2.getField();
      Complex complex7 = complex5.divide(0.0);
      complex2.multiply(complex7);
      Complex complex8 = Complex.valueOf((-2288.41), Double.POSITIVE_INFINITY);
      complex6.divide((-1083.4));
      complex8.multiply(2204.6337421674);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.5461324453353882, 2.6113557852262235E15);
      Complex complex1 = complex0.cos();
      complex1.NaN.acos();
      Complex complex2 = complex0.I.asin();
      Complex.valueOf(2.6113557852262235E15);
      complex0.ONE.add(complex2);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.pow(complex4);
      complex5.ONE.createComplex(2.6113557852262235E15, 1443.81);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1262.5));
      Complex complex1 = complex0.NaN.exp();
      complex1.readResolve();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      complex2.subtract(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.getImaginary();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.ZERO.sin();
      complex6.I.cos();
      complex5.abs();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex4.add(Double.POSITIVE_INFINITY);
      complex7.INF.exp();
      complex7.createComplex((-838.0), 1262.5);
      Complex complex9 = complex0.negate();
      complex4.ONE.sqrt();
      complex3.cosh();
      complex1.createComplex(7.0, (-1812.1678225));
      Complex complex10 = complex8.sin();
      complex9.equals(complex1);
      complex8.exp();
      complex5.createComplex(1.6575487379666E-4, (-2396.71));
      Complex complex11 = complex9.createComplex((-2396.71), Double.POSITIVE_INFINITY);
      complex6.cosh();
      complex4.tan();
      complex11.acos();
      complex10.multiply(697);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.sinh();
      complex2.I.hashCode();
      Complex complex3 = complex1.cosh();
      complex1.getArgument();
      complex1.INF.divide(complex0);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.NaN.reciprocal();
      complex5.abs();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex1.tanh();
      complex5.subtract(Double.NaN);
      complex6.getField();
      complex0.I.reciprocal();
      Complex complex8 = complex7.subtract(complex6);
      complex8.ONE.divide(complex1);
      complex3.add(5.521082422279256E-42);
      complex0.INF.acos();
      Complex.valueOf(0.0, 1763.4);
      complex4.toString();
      complex0.exp();
      complex8.multiply(Double.NaN);
      complex5.toString();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-7774413.119999999));
      Complex complex1 = Complex.valueOf((-7774413.119999999), (-7774413.119999999));
      complex0.getImaginary();
      Complex complex2 = complex1.divide((-7774413.119999999));
      complex2.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-10.629304586714191), (-10.629304586714191));
      Complex complex1 = complex0.add((-10.629304586714191));
      Complex complex2 = complex1.reciprocal();
      complex2.I.cos();
      Complex complex3 = Complex.ZERO;
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex2.sin();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.subtract(0.34508460760116577);
      Complex complex7 = complex6.subtract(Double.POSITIVE_INFINITY);
      complex7.asin();
      complex2.sqrt();
      complex5.reciprocal();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      complex1.acos();
      Complex complex2 = complex0.tanh();
      complex0.multiply(2.414213562373095);
      Complex complex3 = complex2.sin();
      complex3.NaN.multiply(238.289);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.subtract(2.414213562373095);
      Complex complex6 = Complex.ONE;
      Complex complex7 = new Complex(8.626321445655133, Double.POSITIVE_INFINITY);
      complex5.acos();
      Complex complex8 = Complex.NaN;
      complex8.tan();
      Complex complex9 = Complex.NaN;
      Complex complex10 = new Complex((-2078.258), 8.626321445655133);
      Complex complex11 = new Complex(2.0, (-20.0));
      complex11.divide(2.0);
      complex11.sqrt();
      complex0.abs();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.conjugate();
      Complex complex1 = complex0.tanh();
      complex1.log();
      Complex complex2 = complex0.multiply(2.414213562373095);
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex2.tanh();
      Complex complex6 = Complex.valueOf(2.414213562373095, Double.NaN);
      Complex complex7 = complex6.subtract(Double.NaN);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex3.subtract(20.0);
      Complex complex10 = complex6.asin();
      complex7.add(2.414213562373095);
      complex8.sqrt();
      complex10.pow((-2078.258));
      complex10.sqrt1z();
      complex7.multiply(1081);
      complex7.pow(complex4);
      complex4.sin();
      complex9.conjugate();
      complex7.pow(20.0);
      Object object0 = new Object();
      complex8.equals(object0);
      complex6.asin();
      Complex.valueOf(Double.NaN);
      complex5.pow((double) 1081);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-3.5522873306307314), (-3.5522873306307314));
      Complex complex1 = complex0.reciprocal();
      complex1.tanh();
      Complex.valueOf((-3.5522873306307314));
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      complex1.nthRoot(1085);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = new Complex(341.719928);
      complex4.subtract(1.5040859580039978E-7);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex4.add((double) 1085);
      complex6.sqrt();
      complex4.pow(1554.83198917328);
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.multiply(1085);
      Complex complex11 = complex3.pow(complex7);
      complex10.sin();
      complex10.conjugate();
      complex2.pow((double) (-954));
      complex3.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.pow(complex8);
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      complex1.nthRoot(1085);
      complex2.sin();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = new Complex(1174.23171);
      Complex complex5 = complex4.multiply((-2832.933));
      complex4.add(complex5);
      complex0.tanh();
      complex4.getField();
      complex3.abs();
      complex2.getField();
      Complex complex6 = complex1.tan();
      Complex complex7 = new Complex(1174.23171);
      complex6.equals(complex0);
      Complex.valueOf(4.810477380965351);
      Complex complex8 = Complex.I;
      complex8.hashCode();
      complex5.readResolve();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      complex1.nthRoot(1085);
      complex2.sin();
      complex2.conjugate();
      Complex complex3 = new Complex(1174.23171);
      Complex complex4 = complex3.multiply((-2832.933));
      Complex complex5 = complex3.add(complex4);
      complex1.toString();
      Complex complex6 = Complex.ONE;
      Complex complex7 = new Complex((-2832.933), 418389.2166898477);
      complex7.add(complex1);
      complex5.sin();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex0.multiply(complex3);
      complex6.reciprocal();
      complex9.tanh();
      complex3.createComplex(418389.2166898477, 1.1752011936438014);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.getField();
      Complex complex2 = complex1.NaN.cos();
      complex0.hashCode();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.subtract(complex1);
      complex2.getField();
      complex5.pow(2.723009182661306E-8);
      Complex complex6 = complex1.add(6.283185307179586);
      complex0.hashCode();
      complex0.reciprocal();
      complex2.reciprocal();
      complex4.cosh();
      complex5.multiply(238);
      Complex complex7 = Complex.ONE;
      complex7.log();
      complex5.cos();
      complex0.tan();
      complex0.sqrt1z();
      complex5.log();
      complex6.equals(complex6);
      Complex.valueOf(0.0, 6.283185307179586);
      Complex complex8 = Complex.valueOf(2.723009182661306E-8);
      complex8.multiply(238);
      complex8.multiply(2.723009182661306E-8);
      Complex complex9 = complex4.log();
      complex8.sin();
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-452.48426636815), (-452.48426636815));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = new Complex((-452.48426636815));
      complex2.ONE.hashCode();
      Complex complex3 = Complex.valueOf((-452.48426636815), (-452.48426636815));
      complex1.reciprocal();
      complex3.getImaginary();
      complex3.sinh();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      complex1.nthRoot(1085);
      complex2.sin();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = new Complex(1174.23171);
      Complex complex5 = complex4.multiply((-2832.933));
      Complex complex6 = complex4.add(complex5);
      complex1.toString();
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex((-2832.933), 418389.2166898477);
      complex8.add(complex1);
      complex6.sin();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex0.multiply(complex4);
      complex7.reciprocal();
      complex10.tanh();
      complex4.createComplex(418389.2166898477, 1.1752011936438014);
      complex3.createComplex(1174.23171, 1.1752011936438014);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = (-20.0);
      double double1 = 6737.535794119535;
      Complex complex0 = Complex.valueOf((-20.0), 6737.535794119535);
      double double2 = 2.0;
      Complex complex1 = complex0.I.divide(2.0);
      Complex complex2 = complex0.divide(6.243669516810509E102);
      complex2.ZERO.pow(complex0);
      Complex complex3 = complex1.ZERO.acos();
      complex3.I.pow(Double.POSITIVE_INFINITY);
      complex3.ZERO.acos();
      complex2.I.abs();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex((-534.875861934));
      complex1.toString();
      Complex complex3 = complex1.divide((-899897.9758370135));
      complex3.sqrt();
      complex0.abs();
      Complex complex4 = Complex.ONE;
      complex4.nthRoot(1182);
      complex0.getImaginary();
      complex0.createComplex(1.0, 253.0819675491051);
      complex4.add(complex0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-534.875861934), (-534.875861934));
      Complex complex3 = complex2.tanh();
      complex3.getField();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex1.pow(complex0);
      complex1.nthRoot(1085);
      complex3.sin();
      complex3.conjugate();
      complex0.toString();
      complex4.reciprocal();
      complex5.getImaginary();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      Complex complex1 = complex0.divide(1497.61984);
      complex1.NaN.readResolve();
      complex0.add(1497.61984);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.add(1497.61984);
      complex3.divide(complex1);
      complex3.cos();
      Complex complex4 = Complex.valueOf((-1725.0), (-1725.0));
      complex4.tanh();
      Complex complex5 = complex4.add((-1725.0));
      complex2.abs();
      complex1.subtract(Double.NaN);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1262.5));
      Complex complex1 = complex0.NaN.exp();
      complex1.readResolve();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      complex2.subtract(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.getImaginary();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.ZERO.sin();
      complex6.I.cos();
      complex5.abs();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex4.add(Double.POSITIVE_INFINITY);
      complex7.INF.exp();
      Complex complex9 = complex7.createComplex((-838.0), 1262.5);
      Complex complex10 = complex0.negate();
      complex4.ONE.sqrt();
      complex3.cosh();
      complex1.createComplex(7.0, (-1812.1678225));
      complex8.sin();
      complex10.equals(complex1);
      complex8.exp();
      complex5.createComplex(1.6575487379666E-4, (-2396.71));
      complex10.createComplex((-2396.71), Double.POSITIVE_INFINITY);
      complex6.cosh();
      complex4.tan();
      complex8.atan();
      complex9.cosh();
      complex8.pow((-548.151110475));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.acos();
      complex3.atan();
      Complex complex5 = complex0.NaN.add(complex1);
      complex2.reciprocal();
      complex2.ZERO.add(complex3);
      complex4.NaN.tan();
      complex4.nthRoot(2891);
      complex5.divide(0.5215104818344116);
      Complex complex6 = Complex.valueOf((-2294.6558628), 1607.2989698541599);
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = complex0.add((double) 2891);
      Complex complex9 = complex7.NaN.exp();
      complex8.INF.conjugate();
      Complex complex10 = complex6.exp();
      complex10.sinh();
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex7.multiply((double) 2891);
      complex3.multiply(2891);
      Complex complex13 = complex6.atan();
      Complex complex14 = Complex.valueOf((-2294.6558628), (double) 2891);
      complex14.asin();
      complex12.subtract(complex1);
      complex13.negate();
      complex11.sqrt1z();
      complex9.pow(0.5215104818344116);
      complex6.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1971.6), (-1971.6));
      complex1.subtract(20.0);
      Complex complex2 = Complex.INF;
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      complex0.tanh();
      complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      try { 
        complex1.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-907.34798579698), (-1962.9680600880001));
      Complex complex1 = Complex.ONE;
      complex0.tan();
      Complex complex2 = Complex.valueOf((-534.875861934), (-534.875861934));
      Complex complex3 = complex2.tan();
      complex3.hashCode();
      Complex complex4 = complex1.tanh();
      complex3.readResolve();
      complex4.sqrt();
      Complex complex5 = complex1.divide((-521.3781521136));
      complex0.sqrt();
      complex4.abs();
      complex5.getImaginary();
      complex4.getField();
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      complex1.pow(complex0);
      complex1.nthRoot(1085);
      Complex complex2 = Complex.ONE;
      complex1.abs();
      complex1.getImaginary();
      Complex complex3 = Complex.NaN;
      complex3.divide(0.06593192724971701);
      complex0.subtract(Double.NaN);
      Complex.valueOf(0.06593192724971701);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-534.875861934), 839.9);
      Complex complex3 = complex2.tanh();
      complex3.getField();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex1.pow(complex0);
      complex1.nthRoot(1085);
      Complex complex6 = complex3.sin();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = Complex.I;
      complex6.multiply(2754.4339354213);
      Complex complex9 = complex6.add(complex4);
      Complex complex10 = complex6.tanh();
      complex5.subtract(1.268005639758485E-4);
      complex0.divide(0.0);
      Complex complex11 = Complex.valueOf((-534.875861934), (-3247.2875));
      complex11.reciprocal();
      complex10.getImaginary();
      complex7.sinh();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(4.8935021740786486E-8);
      complex0.toString();
      Complex complex1 = complex0.reciprocal();
      complex1.abs();
      complex1.getImaginary();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.tanh();
      complex0.add(2.0);
      complex2.abs();
      Complex complex4 = Complex.ZERO;
      complex4.cos();
      complex2.pow(188.01632);
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      List<Complex> list0 = complex1.nthRoot(1085);
      complex2.sin();
      complex2.conjugate();
      Complex complex3 = new Complex(1174.23171);
      Complex complex4 = complex3.multiply((-2832.933));
      complex3.add(complex4);
      complex0.tanh();
      Complex complex5 = complex0.subtract(15.6);
      Complex complex6 = complex3.divide(0.0);
      complex0.hashCode();
      Complex.valueOf(0.06593192724971701, (-40.0961862));
      complex2.getField();
      complex5.abs();
      complex6.getField();
      complex1.tan();
      complex6.equals(list0);
      Complex.valueOf(1174.23171);
      complex3.hashCode();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-367.80061317038), (-367.80061317038));
      Complex complex1 = complex0.cosh();
      complex0.ONE.toString();
      complex1.ONE.readResolve();
      complex1.NaN.tan();
      complex0.INF.getArgument();
      complex1.ZERO.log();
      complex0.I.tanh();
      complex0.NaN.tan();
      Complex complex2 = complex0.sinh();
      complex1.getArgument();
      complex1.getImaginary();
      complex2.add((-684.8334));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.NaN.cos();
      Complex complex2 = complex1.asin();
      complex2.ONE.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.I.tanh();
      complex2.ZERO.getField();
      Complex complex6 = complex2.conjugate();
      complex6.I.pow(complex0);
      complex0.sin();
      complex3.conjugate();
      Complex complex7 = new Complex((-40.0961862));
      complex7.I.multiply((-2832.933));
      complex0.INF.add(complex7);
      Complex complex8 = new Complex((-2007.1020538811817));
      complex8.acos();
      complex8.tan();
      complex0.add(0.17922431230545044);
      complex0.sin();
      Object object0 = new Object();
      complex6.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sin();
      Complex complex1 = Complex.valueOf((-534.875861934), 839.9);
      Complex complex2 = complex1.ZERO.tan();
      complex2.I.hashCode();
      Complex complex3 = complex1.reciprocal();
      complex0.tan();
      complex0.abs();
      complex2.cos();
      Complex complex4 = complex1.pow((-534.875861934));
      complex4.getField();
      complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.ZERO.atan();
      complex1.cos();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.ZERO;
      complex4.getField();
      Complex complex5 = complex1.add(187.75212386658743);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex2.cos();
      complex1.toString();
      Complex complex8 = new Complex(425.06687220416);
      complex8.hashCode();
      Complex complex9 = complex5.add(complex3);
      complex7.acos();
      complex2.atan();
      complex6.sqrt();
      complex2.readResolve();
      Complex complex10 = new Complex(187.75212386658743, 1226.203777);
      Complex complex11 = complex10.cos();
      Complex.valueOf(2.0, 1323.09524996);
      complex11.createComplex(1227.1502592, (-1996.79985480112));
      Complex complex12 = new Complex(Double.NaN, 1323.09524996);
      complex12.sinh();
      complex11.isNaN();
      complex3.negate();
      Complex complex13 = Complex.NaN;
      complex13.getField();
      complex9.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      complex0.tanh();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.ZERO;
      complex3.divide(0.0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = new Complex((-1971.6), (-1971.6));
      Complex complex6 = complex5.acos();
      complex6.tan();
      complex6.sqrt1z();
      Complex complex7 = Complex.valueOf(0.6833335161209106);
      Complex complex8 = complex5.add(complex7);
      Complex complex9 = complex8.sin();
      complex1.add((-20.0));
      Complex complex10 = Complex.ONE;
      complex2.multiply(complex9);
      Complex complex11 = Complex.NaN;
      complex11.reciprocal();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.add((-717.2));
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex1.tanh();
      complex5.getField();
      Complex complex7 = complex4.add((-717.2));
      complex0.reciprocal();
      Complex complex8 = Complex.I;
      complex8.cos();
      complex1.toString();
      complex5.hashCode();
      complex7.add(complex5);
      complex0.acos();
      complex1.atan();
      complex6.sqrt();
      Complex complex9 = new Complex((-389.434591), (-717.2));
      complex9.readResolve();
      complex9.cos();
      Complex.valueOf((-4168.48), (-717.2));
      complex0.createComplex((-3074.539246), 1262.5);
      Complex complex10 = complex7.sinh();
      complex7.isNaN();
      Complex complex11 = Complex.INF;
      complex11.negate();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(1497.61984);
      complex2.NaN.readResolve();
      Complex complex3 = complex0.add(1497.61984);
      complex2.sqrt();
      complex3.multiply(complex0);
      Complex complex4 = new Complex(1497.61984, 1497.61984);
      Complex complex5 = complex4.ZERO.divide(complex2);
      complex5.I.atan();
      Complex complex6 = complex3.add(1497.61984);
      complex6.cos();
      Complex complex7 = complex3.tanh();
      complex1.getField();
      Complex complex8 = new Complex(1497.61984, 1323.09524996);
      Complex complex9 = Complex.valueOf(1323.09524996);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex7.cos();
      complex11.I.toString();
      complex11.hashCode();
      complex0.add(complex5);
      complex9.acos();
      Complex complex12 = Complex.ZERO;
      complex10.sqrt();
      complex7.readResolve();
      complex10.cos();
      Complex complex13 = Complex.valueOf(1323.09524996, 1497.61984);
      complex13.NaN.createComplex(1497.61984, 1323.09524996);
      complex4.sinh();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-10.985288203529251), 4.8935021740786486E-8);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt1z();
      complex1.multiply(1);
      Complex complex3 = Complex.ONE;
      complex3.getField();
      complex2.readResolve();
      complex0.multiply(4532);
      complex2.nthRoot(393);
      Complex complex4 = complex0.cos();
      complex3.multiply(complex4);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(1497.61984);
      complex2.NaN.readResolve();
      Complex complex3 = complex0.add(1497.61984);
      Complex complex4 = complex2.sqrt();
      complex3.multiply(complex0);
      Complex complex5 = complex4.add(1497.61984);
      Complex complex6 = complex5.ZERO.divide(complex2);
      complex6.I.atan();
      Complex complex7 = complex3.add(1497.61984);
      complex7.cos();
      Complex complex8 = complex3.tanh();
      complex1.getField();
      complex8.ONE.add(188.01632);
      Complex complex9 = Complex.valueOf(1323.09524996);
      Complex complex10 = Complex.valueOf(1497.61984);
      Complex complex11 = complex8.cos();
      complex11.I.toString();
      complex11.hashCode();
      complex0.add(complex6);
      complex9.acos();
      complex3.atan();
      complex10.sqrt();
      complex8.readResolve();
      complex10.cos();
      Complex complex12 = Complex.valueOf(1323.09524996, 1497.61984);
      complex12.NaN.createComplex(1497.61984, 1323.09524996);
      complex5.sinh();
      complex0.isNaN();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-534.875861934), 839.9);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = new Complex((-1.0));
      Complex complex5 = complex4.divide((-1.0));
      complex4.asin();
      Complex complex6 = complex2.acos();
      complex2.acos();
      complex3.divide(complex4);
      complex2.tanh();
      complex6.cosh();
      complex1.getArgument();
      complex5.getField();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      complex0.tanh();
      complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.divide(0.0);
      complex0.sqrt();
      Complex complex4 = new Complex((-1971.6), (-1971.6));
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex5.sqrt1z();
      complex6.multiply((-2045222521));
      complex1.getField();
      complex5.readResolve();
      Complex complex8 = complex7.createComplex(4265.97882155786, (-2.631656656397244E120));
      complex8.multiply((-2639));
      Complex complex9 = Complex.NaN;
      complex9.nthRoot(1);
      complex3.cos();
      complex7.multiply(complex9);
      complex6.toString();
      Complex complex10 = Complex.valueOf(0.0, (-1971.6));
      complex4.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(613.0);
      Complex complex1 = complex0.NaN.multiply(1922);
      complex1.NaN.hashCode();
      complex0.hashCode();
      Complex complex2 = new Complex(1922);
      Complex complex3 = new Complex(1922, 1922);
      Complex complex4 = new Complex(1922);
      Complex complex5 = complex4.multiply((-1.0));
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex0.subtract((-2832.933));
      complex5.divide(1403.0989201830819);
      complex7.hashCode();
      complex6.getField();
      complex3.abs();
      Complex complex9 = Complex.I;
      complex9.getField();
      complex8.tan();
      complex2.equals("W;m1'ZZ*RG");
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.multiply((-2.631656656397244E120));
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.multiply((-709));
      Complex complex5 = complex1.negate();
      complex5.getField();
      complex2.conjugate();
      Complex complex6 = complex1.pow(complex0);
      complex2.nthRoot(7);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = new Complex((-709));
      Complex complex10 = complex8.multiply((-2832.933));
      complex3.add(complex10);
      complex2.tanh();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.subtract(1.053956282234684E82);
      Complex complex13 = complex8.divide(4165.0);
      complex12.hashCode();
      complex13.getField();
      complex13.abs();
      complex4.getField();
      complex0.tan();
      complex6.equals(complex3);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.getField();
      Complex complex2 = complex1.NaN.cos();
      complex0.hashCode();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.subtract(complex1);
      complex2.getField();
      complex5.pow(2.723009182661306E-8);
      Complex complex6 = complex1.add(6.283185307179586);
      complex0.hashCode();
      complex0.reciprocal();
      complex2.reciprocal();
      complex4.cosh();
      complex5.multiply(238);
      Complex complex7 = Complex.ONE;
      complex7.log();
      complex5.cos();
      complex0.tan();
      complex0.sqrt1z();
      Complex complex8 = complex6.subtract((double) 238);
      complex5.log();
      complex6.equals(complex8);
      Complex.valueOf(0.0, 6.283185307179586);
      Complex complex9 = Complex.valueOf(2.723009182661306E-8);
      complex9.multiply(2.723009182661306E-8);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(2265.3178742501, 0.0);
      Complex complex1 = complex0.INF.multiply((-3767));
      Complex complex2 = complex1.createComplex(1657.3437, 1811.73282);
      Complex complex3 = complex0.pow(2.0);
      complex3.ZERO.reciprocal();
      complex3.I.pow((-1.0));
      Complex.valueOf(0.42119236759434797, 0.47766464948654175);
      Complex complex4 = complex0.multiply((-3767));
      complex3.isNaN();
      Complex complex5 = complex0.sin();
      complex5.NaN.add(1323.6871656655796);
      complex3.getImaginary();
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.tan();
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.sqrt1z();
      complex0.abs();
      complex0.abs();
      complex0.getField();
      Complex complex2 = complex0.tan();
      complex2.ONE.abs();
      complex0.equals(complex2);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.getField();
      complex1.NaN.cos();
      complex0.hashCode();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex4.I.tanh();
      complex2.ZERO.getField();
      complex2.conjugate();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.divide((-38.64729915184));
      complex3.sqrt();
      complex6.acos();
      Complex complex9 = new Complex(506.8654238);
      Complex complex10 = complex9.tan();
      complex0.sqrt1z();
      Complex complex11 = Complex.ZERO;
      complex11.multiply(2985);
      complex6.getField();
      complex0.readResolve();
      complex10.createComplex((-38.64729915184), 2985);
      complex8.multiply(740);
      complex1.nthRoot(1);
      Complex complex12 = complex11.cos();
      complex9.multiply(complex5);
      complex7.toString();
      complex12.atan();
      complex7.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      Complex complex1 = complex0.divide(1497.61984);
      Object object0 = complex1.NaN.readResolve();
      ((Complex) object0).ZERO.multiply((-3709.334));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.sqrt();
      complex2.multiply(complex0);
      Complex complex4 = complex3.add(1497.61984);
      Complex complex5 = complex4.ZERO.divide(complex1);
      complex5.I.atan();
      Complex complex6 = complex2.add(1497.61984);
      complex6.cos();
      Complex complex7 = complex2.tanh();
      complex2.getField();
      Complex complex8 = complex7.ONE.add(188.01632);
      Complex complex9 = Complex.valueOf(1323.6871656655796);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex7.cos();
      complex11.I.toString();
      complex11.hashCode();
      complex0.add(complex5);
      complex9.acos();
      complex2.atan();
      Complex complex12 = complex10.sqrt();
      complex7.readResolve();
      complex10.cos();
      Complex complex13 = Complex.valueOf(1323.6871656655796, 1497.61984);
      complex10.createComplex(7.31115423069187E-228, 7.31115423069187E-228);
      Complex complex14 = Complex.NaN;
      complex14.sinh();
      complex12.isNaN();
      complex8.negate();
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.I.exp();
      complex3.INF.sinh();
      Complex complex4 = complex0.negate();
      complex0.ZERO.tan();
      complex0.sqrt1z();
      complex2.add(complex3);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((-6.746431126005811E-8));
      Complex complex2 = Complex.valueOf(0.0);
      complex2.ONE.getArgument();
      Complex complex3 = complex1.pow(0.0);
      complex2.INF.subtract(complex0);
      Complex complex4 = complex3.sinh();
      complex3.ZERO.asin();
      Complex complex5 = complex4.multiply(1912);
      complex5.getField();
      Complex complex6 = complex0.multiply((-6.746431126005811E-8));
      complex1.abs();
      complex6.divide(complex2);
      complex2.getReal();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.reciprocal();
      complex0.ONE.toString();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.add(complex1);
      complex1.sin();
      complex2.add(0.0);
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(250.32336);
      Complex complex1 = complex0.createComplex(250.32336, (-773.4806));
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.INF.tanh();
      complex1.ZERO.toString();
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.cosh();
      complex4.NaN.divide((-773.4806));
      complex1.I.tan();
      complex0.isNaN();
      complex0.ONE.conjugate();
      Complex complex5 = complex3.subtract(250.32336);
      complex5.I.sqrt();
      Complex.valueOf((-773.4806), (-773.4806));
      complex3.ZERO.sqrt1z();
      complex0.tan();
      complex5.createComplex(250.32336, 0.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.acos();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.pow(0.5690577030181885);
      complex3.ZERO.hashCode();
      Complex complex4 = Complex.valueOf(1232.18618, 1232.18618);
      Complex complex5 = complex2.NaN.multiply(complex4);
      complex2.ZERO.hashCode();
      complex2.I.nthRoot(745);
      Complex complex6 = complex2.ZERO.createComplex(9.429257929713919E-133, 9.429257929713919E-133);
      Complex complex7 = complex6.ONE.cosh();
      complex0.toString();
      complex7.I.sinh();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex2.cos();
      complex9.multiply(745);
      complex3.sin();
      complex8.add(complex7);
      Complex complex10 = Complex.valueOf(9.429257929713919E-133);
      complex0.ZERO.pow(complex5);
      Complex complex11 = complex7.sinh();
      complex1.readResolve();
      complex10.negate();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex0.add(7.174547784678893E-8);
      complex1.getArgument();
      complex0.INF.multiply(879);
      Complex complex2 = Complex.valueOf(503.85876, 0.0);
      Complex complex3 = new Complex((-20.0));
      Complex complex4 = complex2.ONE.divide(complex3);
      complex4.ZERO.abs();
      Complex complex5 = complex2.NaN.divide(complex1);
      complex5.INF.subtract(2986.08);
      complex0.I.add(complex1);
      Complex complex6 = complex2.ONE.reciprocal();
      Complex complex7 = complex6.ONE.log();
      complex1.isInfinite();
      Complex complex8 = Complex.valueOf(7.174547784678893E-8, 503.85876);
      complex8.NaN.getArgument();
      complex8.I.cos();
      complex1.pow((-2775.5105));
      complex7.conjugate();
      complex6.isInfinite();
      Complex complex9 = complex8.multiply(complex4);
      complex9.ONE.asin();
      complex9.I.getArgument();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1076716069929933E-95, 2.1076716069929933E-95);
      complex0.multiply(2.1076716069929933E-95);
      complex0.INF.sinh();
      complex0.abs();
      Complex complex1 = complex0.asin();
      Complex.valueOf((-2990.1921196));
      complex0.abs();
      complex0.getArgument();
      complex1.sqrt1z();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      double double0 = (-2096.396425);
      Complex complex2 = complex1.ONE.createComplex(0.0, (-2096.396425));
      complex0.reciprocal();
      complex2.I.readResolve();
      complex1.NaN.log();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.divide(complex1);
      complex4.I.subtract(complex0);
      complex1.sinh();
      complex0.divide(complex3);
      Complex complex5 = complex1.multiply(complex2);
      complex2.INF.sin();
      complex4.ZERO.sinh();
      double double1 = (-779.2099630889);
      complex5.I.add((-779.2099630889));
      Complex complex6 = complex2.log();
      complex6.NaN.log();
      complex0.ONE.acos();
      complex4.INF.getArgument();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex3.ZERO.asin();
      complex4.ONE.cosh();
      Complex complex5 = complex2.NaN.sqrt1z();
      complex5.NaN.createComplex(4.062894701808608E154, 0.0);
      complex5.NaN.cos();
      Complex complex6 = complex0.createComplex((-3013.6445), (-20.0));
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex1.negate();
      complex2.sqrt();
      complex1.NaN.conjugate();
      Complex.valueOf((-6.764191876212205E-9), (-2689.0));
      complex9.pow((-3148.5268));
      complex8.add(0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.add(4.2459748085663055E253);
      Complex complex3 = complex2.NaN.tan();
      complex0.ZERO.readResolve();
      Complex complex4 = complex1.divide((-154.3078496579036));
      complex4.I.cos();
      Complex complex5 = Complex.valueOf(4.2459748085663055E253);
      complex5.INF.multiply(complex1);
      Complex complex6 = complex4.NaN.cos();
      complex1.INF.getArgument();
      Complex complex7 = complex6.NaN.sqrt();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.NaN.multiply(complex8);
      complex9.NaN.multiply(complex3);
      Complex complex10 = complex6.I.tan();
      Complex complex11 = complex10.subtract(complex4);
      Complex complex12 = complex11.NaN.multiply(3507);
      complex12.I.sqrt();
      complex12.ONE.sqrt1z();
      complex4.getArgument();
      Complex complex13 = Complex.valueOf(Double.NaN);
      Complex complex14 = complex13.ZERO.asin();
      Complex complex15 = complex4.cos();
      complex4.cos();
      complex15.I.pow(0.7853981633974483);
      complex13.pow(Double.NaN);
      complex14.getReal();
      complex15.exp();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(4.8935021740786486E-8, 4.8935021740786486E-8);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.add(4.8935021740786486E-8);
      complex2.sin();
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(1497.61984);
      complex2.NaN.readResolve();
      Complex complex3 = complex0.add(1497.61984);
      Complex complex4 = complex2.sqrt();
      complex3.multiply(complex0);
      Complex complex5 = complex4.add(1497.61984);
      Complex complex6 = complex5.ZERO.divide(complex2);
      complex6.I.atan();
      Complex complex7 = complex3.add(1497.61984);
      complex7.cos();
      Complex complex8 = complex3.tanh();
      complex1.getField();
      complex8.ONE.add(188.01632);
      Complex complex9 = Complex.valueOf(1323.09524996);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex8.cos();
      complex11.I.toString();
      complex11.hashCode();
      complex0.add(complex6);
      complex9.acos();
      complex3.atan();
      complex10.sqrt();
      complex8.readResolve();
      complex10.cos();
      Complex complex12 = Complex.valueOf(1323.09524996, 1497.61984);
      complex12.NaN.createComplex(1497.61984, 1323.09524996);
      complex5.sinh();
      complex0.isNaN();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.ZERO.asin();
      complex2.ZERO.acos();
      complex2.INF.acos();
      Complex complex3 = complex1.INF.divide(complex0);
      complex3.INF.tanh();
      complex1.ONE.cosh();
      complex0.getArgument();
      complex2.getField();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.pow((-1451.253341046));
      Complex complex2 = complex0.cos();
      complex1.exp();
      Complex complex3 = complex2.divide(complex0);
      complex3.ONE.reciprocal();
      complex1.createComplex(0.0, (-1451.253341046));
      Complex complex4 = complex1.createComplex((-2368.703942), (-2491.432));
      complex3.readResolve();
      Complex complex5 = complex2.INF.divide(0.0);
      Complex complex6 = complex5.NaN.acos();
      complex6.INF.multiply(complex0);
      complex6.ZERO.atan();
      complex4.INF.tan();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.ZERO.multiply((-1451.253341046));
      complex8.INF.atan();
      complex3.createComplex(20.0, 6.283185307179586);
      complex7.reciprocal();
      Complex complex9 = complex4.conjugate();
      complex5.reciprocal();
      complex9.isInfinite();
      complex9.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      complex0.ONE.divide(complex1);
      complex0.ONE.multiply(0);
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex2.ZERO.negate();
      complex0.INF.hashCode();
      complex0.ONE.getField();
      complex0.cos();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(2265.3178742501, 0.0);
      Complex complex1 = complex0.INF.multiply((-3767));
      Complex complex2 = complex0.pow(2.0);
      complex2.ZERO.reciprocal();
      Complex complex3 = complex2.sin();
      Complex complex4 = new Complex(1510.2);
      Complex complex5 = complex1.add(complex4);
      complex5.I.sinh();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.NaN.cos();
      complex1.INF.getArgument();
      complex1.I.getField();
      complex2.NaN.asin();
      complex0.nthRoot(1225);
      complex1.hashCode();
      Complex complex3 = complex1.createComplex(3236.23139093, 1225);
      Complex complex4 = complex3.atan();
      complex4.NaN.nthRoot(1225);
      complex2.sinh();
      Complex complex5 = complex1.log();
      complex5.NaN.negate();
      complex3.getReal();
      complex2.divide(0.7853981633974483);
      complex1.toString();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sin();
      complex1.I.pow(complex0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex0.negate();
      Complex complex3 = complex1.INF.subtract(complex0);
      complex3.INF.cos();
      complex3.INF.getField();
      Complex complex4 = complex1.cosh();
      complex2.getReal();
      Complex complex5 = complex4.ONE.sin();
      complex4.ONE.acos();
      Complex complex6 = Complex.valueOf(Double.NaN, (-286.6954306788579));
      Complex complex7 = complex4.acos();
      Complex complex8 = complex0.ONE.sqrt();
      complex8.NaN.add(complex5);
      complex0.I.sqrt1z();
      Complex complex9 = complex4.pow((-1592.6454227547047));
      complex9.ONE.createComplex(Double.NaN, (-1592.6454227547047));
      complex5.sinh();
      complex7.negate();
      complex9.isNaN();
      complex2.atan();
      complex1.divide(Double.NaN);
      Complex complex10 = complex5.sqrt();
      complex10.add(6.301585387776819E255);
      complex6.subtract(Double.NaN);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getField();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex1.ZERO.multiply(314);
      Complex complex4 = complex0.pow((-20.0));
      Complex complex5 = complex1.acos();
      complex4.NaN.getArgument();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.I.asin();
      complex7.NaN.divide(complex3);
      complex6.I.pow(complex1);
      complex4.isInfinite();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.multiply((-2.631656656397244E120));
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.multiply((-709));
      complex4.ZERO.getField();
      complex2.I.pow((double) (-709));
      Complex complex5 = complex0.ZERO.add(0.0);
      complex0.hashCode();
      complex3.reciprocal();
      Complex complex6 = complex1.reciprocal();
      complex6.ZERO.cosh();
      Complex complex7 = complex4.multiply((-709));
      Complex complex8 = complex7.log();
      Complex complex9 = complex8.INF.cos();
      complex9.INF.tan();
      complex5.sqrt1z();
      complex5.subtract((-2.631656656397244E120));
      Complex complex10 = complex4.log();
      complex10.equals("initial column {1} after final column {0}");
      Complex complex11 = Complex.valueOf((-531.30609159), 0.0);
      complex11.INF.multiply((-531.30609159));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = Complex.valueOf(0.0, (-380.24754583937));
      Complex complex5 = complex2.multiply((-1));
      complex5.I.negate();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex5.INF.reciprocal();
      complex7.INF.nthRoot(1488);
      complex0.isInfinite();
      Complex.valueOf((-380.24754583937));
      complex2.hashCode();
      complex1.getImaginary();
      Complex complex8 = complex0.subtract(complex4);
      complex0.getField();
      complex8.getImaginary();
      complex3.acos();
      complex8.getImaginary();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.multiply(0.0);
      Complex complex1 = complex0.divide((-3121.01480434043));
      complex0.INF.sqrt();
      Complex complex2 = Complex.valueOf(5.82825404854514E-8);
      Complex complex3 = Complex.valueOf(1.7329144477844238, (-1657.19209));
      complex2.INF.acos();
      complex1.ONE.multiply(2984);
      complex0.nthRoot(2984);
      complex3.conjugate();
      complex3.getReal();
      complex1.getField();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex3.multiply(1);
      complex6.ONE.exp();
      complex2.atan();
      complex4.sqrt1z();
      Complex complex7 = complex6.exp();
      complex5.nthRoot(1);
      complex7.ONE.atan();
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      complex0.asin();
      complex0.getImaginary();
      complex1.I.sin();
      complex0.getArgument();
      complex0.getImaginary();
      Complex.valueOf((-672.19157386569));
      complex0.ZERO.conjugate();
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1345.013473), (-6.342604067787756E-8));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ONE.createComplex((-1345.013473), 0.0);
      Complex complex4 = complex2.ZERO.sqrt();
      complex4.nthRoot(1056);
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex1.tan();
      complex6.ONE.pow(complex5);
      complex6.NaN.abs();
      complex1.I.cos();
      Complex complex7 = complex1.multiply((-6.342604067787756E-8));
      Complex complex8 = complex1.INF.log();
      complex8.toString();
      complex8.INF.exp();
      Complex complex9 = complex2.acos();
      complex7.isNaN();
      complex3.tan();
      complex7.toString();
      complex3.toString();
      Complex complex10 = Complex.valueOf(0.0, 2560.419440608);
      Complex complex11 = complex2.INF.divide(complex10);
      complex11.NaN.cos();
      Complex.valueOf((-866.3569796));
      Complex complex12 = complex4.multiply((-20.0));
      complex9.sqrt1z();
      complex4.pow(complex10);
      complex12.sqrt();
      complex5.acos();
      complex7.sqrt1z();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = 2819.4481;
      Complex complex0 = Complex.valueOf(2819.4481);
      complex0.ZERO.atan();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.multiply(2819.4481);
      Complex complex4 = complex0.ONE.exp();
      complex4.ZERO.divide(2819.4481);
      Complex complex5 = complex3.ONE.acos();
      complex5.INF.pow((-878.60149));
      complex2.ZERO.readResolve();
      complex4.I.readResolve();
      complex2.reciprocal();
      Complex complex6 = complex0.pow((-5279.72));
      Complex complex7 = complex2.subtract(complex4);
      Complex complex8 = complex7.ZERO.exp();
      complex8.I.toString();
      Complex complex9 = complex3.acos();
      complex9.INF.sin();
      try { 
        complex6.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.subtract(0.0);
      complex1.ZERO.log();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      complex0.createComplex(1661.735707375252, 0.7853981633974483);
      complex0.createComplex(1.6284313912612293E-9, 0.33953672647476196);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-196.690701857), (-196.690701857));
      Complex complex1 = Complex.valueOf((-196.690701857), (-2550.0));
      complex1.nthRoot(712);
      Complex complex2 = complex0.add(complex1);
      complex2.I.acos();
      complex1.nthRoot(1194);
      Complex complex3 = complex0.multiply((double) 712);
      Complex complex4 = complex3.I.log();
      complex4.divide(complex0);
      complex3.INF.subtract((-2550.0));
      complex3.pow((double) 712);
      Complex.valueOf((-196.690701857), (double) 1194);
      Complex complex5 = complex2.createComplex(Double.NaN, 0.0);
      complex4.reciprocal();
      Complex complex6 = complex5.add((-1034.5341466963));
      complex6.I.sin();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-534.875861934), 839.9);
      Complex complex3 = complex2.ZERO.tan();
      complex3.I.hashCode();
      Complex complex4 = complex3.NaN.tanh();
      complex1.readResolve();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.divide(4265.97882155786);
      complex6.NaN.sqrt();
      complex0.acos();
      complex1.tan();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.NaN.multiply(1);
      complex5.getField();
      complex7.INF.readResolve();
      complex6.INF.createComplex((-534.875861934), 839.9);
      Complex complex9 = complex7.multiply(1);
      complex6.nthRoot(1);
      complex9.cos();
      complex8.multiply(complex0);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(613.0);
      Complex complex1 = complex0.NaN.multiply(1922);
      complex1.NaN.hashCode();
      complex0.hashCode();
      Complex complex2 = complex1.ONE.sqrt();
      complex2.I.acos();
      complex2.hashCode();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ZERO.tanh();
      complex0.multiply(complex1);
      complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3967.4, 0.0);
      Complex.valueOf(738.79306, 738.79306);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.ZERO.log();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.createComplex(3967.4, 0.0);
      Complex complex4 = complex3.atan();
      complex4.NaN.atan();
      complex4.atan();
      complex4.atan();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(0.0, 3105.1574679874934);
      complex0.ZERO.subtract(2016.271716865);
      Complex complex1 = complex0.divide(985.7);
      Complex complex2 = complex1.createComplex(2016.271716865, (-3038.219473407941));
      complex0.add(complex2);
      complex1.multiply((-1915));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.readResolve();
      complex0.ZERO.atan();
      try { 
        complex0.INF.nthRoot((-513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -513
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2119.024452), 420.99);
      Complex complex1 = complex0.NaN.exp();
      complex1.NaN.cos();
      complex0.getImaginary();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.NaN.log();
      complex2.ONE.add(complex1);
      try { 
        complex3.I.nthRoot((-423));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -423
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = complex0.conjugate();
      complex2.INF.sin();
      complex1.getField();
      complex2.hashCode();
      complex1.toString();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.getField();
      Complex complex2 = complex1.NaN.cos();
      complex0.hashCode();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.subtract(complex1);
      complex3.negate();
      complex5.I.tanh();
      complex3.ZERO.getField();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.I.pow(complex0);
      complex0.nthRoot(7);
      complex0.sin();
      complex5.conjugate();
      Complex complex8 = new Complex((-40.0961862));
      complex8.I.multiply((-2832.933));
      complex0.INF.add(complex8);
      complex0.ONE.tanh();
      Complex complex9 = complex4.subtract(1.053956282234684E82);
      Complex complex10 = complex7.divide((double) 7);
      complex10.I.hashCode();
      complex2.getField();
      complex9.abs();
      complex5.getField();
      complex4.tan();
      complex6.equals(complex0);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.ZERO.multiply((-1901));
      Complex complex3 = Complex.valueOf(0.0, 2328.2751534717);
      complex3.ZERO.readResolve();
      complex0.asin();
      complex0.pow(complex3);
      complex1.getArgument();
      complex1.hashCode();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.tan();
      complex0.reciprocal();
      complex0.abs();
      complex1.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(431.8786267);
      Complex complex1 = complex0.divide(431.8786267);
      complex0.NaN.sqrt1z();
      complex1.NaN.abs();
      complex0.INF.divide(431.8786267);
      Complex complex2 = complex1.subtract((-1253.63831));
      try { 
        complex2.nthRoot((-2725));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,725
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-903.81), (-903.81));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.pow((-903.81));
      Complex complex5 = complex4.I.subtract((-903.81));
      complex5.ZERO.createComplex(2130.13, (-903.81));
      assertEquals(903.81, complex5.getReal(), 0.01);
      
      complex2.reciprocal();
      complex0.isNaN();
      complex2.ONE.tanh();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex0.I.sqrt();
      assertEquals(0.7071067811865475, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex1.INF.log();
      assertTrue(complex8.isInfinite());
      
      Complex complex9 = complex1.divide(0.0);
      complex6.I.getField();
      Complex complex10 = complex9.ONE.sqrt();
      assertEquals(1.0, complex10.getReal(), 0.01);
      
      complex9.NaN.reciprocal();
      complex9.NaN.sinh();
      Complex complex11 = complex2.add((-903.81));
      Complex complex12 = complex6.negate();
      Complex complex13 = complex2.I.divide(complex4);
      Complex complex14 = complex13.ONE.tanh();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertSame(complex13, complex12);
      assertEquals(0.7615941559557649, complex14.getReal(), 0.01);
      
      complex1.readResolve();
      double double0 = complex11.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex15 = complex6.sinh();
      Complex complex16 = complex15.ONE.sin();
      assertEquals(0.8414709848078965, complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex15.ONE.asin();
      assertEquals(1.5707963267948966, complex17.getReal(), 0.01);
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      
      double double1 = complex4.getArgument();
      assertEquals(-0.0, double1, 0.01);
  }
}
