/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:56:24 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(9.248598815279678E300, 792.2955426055579);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(9.248598815279678E300, 1603.258722972);
      Complex complex3 = complex1.multiply(9.248598815279678E300);
      complex3.INF.getField();
      Complex complex4 = complex3.I.createComplex(5.685720022003016E24, 1603.258722972);
      complex0.NaN.hashCode();
      Complex complex5 = complex3.I.negate();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex2.add(1.2962895828766152E7);
      Complex complex8 = complex7.createComplex(9.248598815279678E300, 792.2955426055579);
      complex8.I.nthRoot(924);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex9.ZERO.divide(1.2962895828766152E7);
      complex4.readResolve();
      Complex complex11 = complex4.acos();
      complex11.NaN.sqrt();
      Complex complex12 = complex5.tanh();
      complex11.pow(complex12);
      Complex complex13 = complex0.multiply(1.2962895828766152E7);
      complex10.readResolve();
      complex5.divide(0.2813319120819311);
      complex5.conjugate();
      Complex complex14 = Complex.valueOf(5.685720022003016E24, (-812.0982));
      complex4.abs();
      Complex complex15 = complex0.exp();
      complex15.multiply(5.685720022003016E24);
      complex15.asin();
      complex14.getField();
      complex13.cosh();
      complex6.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.026772467749944E-235, 2.1906094551086426);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.tanh();
      complex0.getArgument();
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.I;
      Complex complex7 = new Complex(1.5707963267948966, 3.026772467749944E-235);
      Complex complex8 = complex2.pow(6.283185307179586);
      complex0.getField();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex3.sinh();
      complex9.readResolve();
      complex4.conjugate();
      complex2.NaN.acos();
      complex5.acos();
      complex9.sinh();
      Complex complex11 = Complex.valueOf((-1.0633845571643594E20), 0.5127768516540527);
      complex10.divide(complex11);
      Complex complex12 = complex5.exp();
      complex1.acos();
      complex11.getReal();
      Complex complex13 = Complex.INF;
      complex13.getArgument();
      complex12.multiply(2.1906094551086426);
      Complex complex14 = new Complex(0.7853981633974483);
      complex7.tan();
      Complex complex15 = (Complex)complex7.readResolve();
      complex7.abs();
      complex15.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.cosh();
      complex0.abs();
      Complex complex1 = Complex.NaN;
      complex1.ONE.subtract(1.0);
      complex0.INF.conjugate();
      Complex complex2 = complex0.add(complex1);
      complex1.getField();
      complex1.I.sin();
      complex2.NaN.abs();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex5.asin();
      complex5.toString();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.I.tan();
      complex9.NaN.getArgument();
      Complex complex10 = complex0.asin();
      Complex complex11 = Complex.valueOf(1.0);
      complex10.INF.pow(complex2);
      complex2.ONE.multiply(complex11);
      complex4.readResolve();
      complex2.toString();
      Complex complex12 = complex6.atan();
      complex10.toString();
      Complex complex13 = complex7.add(complex0);
      Complex complex14 = complex11.add((-399.0));
      complex2.abs();
      complex0.acos();
      complex13.subtract(complex8);
      complex12.abs();
      complex14.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(3.026772467749944E-235, 1.5707963267948966);
      Complex.valueOf((-1.2093068629412478E-8), (-2343.0893239));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2564.6776744602, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0108001232147217, Double.POSITIVE_INFINITY);
      complex0.I.sinh();
      complex0.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.511427628805191E111);
      Complex complex1 = complex0.I.negate();
      complex0.tanh();
      complex0.sqrt();
      complex1.nthRoot(1791);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((double) 974);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sin();
      complex0.sinh();
      complex0.readResolve();
      Complex complex4 = new Complex(974);
      complex4.conjugate();
      Complex complex5 = Complex.INF;
      complex3.acos();
      complex1.subtract(Double.NaN);
      complex0.multiply(974);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.511427628805191E111);
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-476.42827394289), 1381.942606);
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex(799.361, (-476.42827394289));
      Complex complex3 = complex2.pow(7.43676272093501E-8);
      complex3.getField();
      Complex complex4 = complex1.cosh();
      complex0.sin();
      Complex complex5 = complex0.sinh();
      complex3.readResolve();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex5.acos();
      complex6.divide(Double.NaN);
      complex2.exp();
      Complex complex9 = complex3.acos();
      complex0.getReal();
      complex8.multiply(1916.17895);
      complex3.hashCode();
      complex9.exp();
      complex6.nthRoot(974);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.INF.acos();
      complex0.createComplex(Double.POSITIVE_INFINITY, 2901.35241);
      complex3.equals(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.add((-341.7182142300818));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 6481447.914383038);
      complex0.ZERO.sinh();
      Complex complex1 = new Complex(974, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 6481447.914383038);
      complex0.ZERO.sinh();
      complex0.pow((double) 974);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(127.2137, (-20.0));
      complex1.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.multiply(1111.7236);
      complex5.ONE.add((-20.0));
      complex2.tan();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1604.05388069411), 1.511427628805191E111);
      Complex complex1 = new Complex((-1604.05388069411), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex1.negate();
      Complex complex2 = Complex.I;
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-1035.146620824), (-1035.146620824));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      complex2.readResolve();
      complex0.conjugate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.divide((-1035.146620824));
      Complex complex6 = Complex.valueOf((-517.2884875503), 2691.262484953005);
      Complex complex7 = new Complex(1.0, 1.0);
      Complex complex8 = complex7.exp();
      complex8.I.pow(complex6);
      complex2.acos();
      complex5.getReal();
      complex6.multiply(Double.NaN);
      complex4.hashCode();
      Complex complex9 = Complex.I;
      complex9.exp();
      complex2.cos();
      try { 
        complex3.nthRoot((-1325));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,325
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1345.631242476701);
      Complex complex1 = Complex.valueOf(1345.631242476701, 1301880.0);
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.INF;
      complex3.ZERO.add(complex2);
      complex3.getReal();
      complex2.getArgument();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-386.0));
      complex0.pow(2785.623974339);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(5.440559532453721E-75, 5.440559532453721E-75);
      complex0.equals("");
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.511427628805191E111);
      complex0.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(8.306111510463843E-162);
      complex2.hashCode();
      Complex complex3 = complex1.exp();
      complex3.cos();
      complex0.nthRoot(2796);
      complex0.multiply(1.511427628805191E111);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1035.146620824), (-1035.146620824));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.negate();
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1.511427628805191E111);
      Complex complex1 = Complex.valueOf(1.511427628805191E111);
      Complex complex2 = complex0.divide(3.026772467749944E-235);
      Complex complex3 = complex1.acos();
      complex0.getImaginary();
      complex0.cosh();
      complex2.subtract(complex3);
      Complex complex4 = Complex.ZERO;
      complex3.equals(complex2);
      complex4.reciprocal();
      Complex complex5 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1345.631242476701);
      Complex complex1 = new Complex(1301880.0);
      Complex complex2 = Complex.valueOf(1345.631242476701, 1301880.0);
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.INF;
      complex4.ZERO.add(complex3);
      complex4.getReal();
      complex3.getArgument();
      Complex complex5 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex3.acos();
      complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1345.631242476701);
      Complex complex1 = new Complex(0.3762463764520021);
      Complex complex2 = Complex.valueOf(1345.631242476701, 20.0);
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.add(complex3);
      complex5.getReal();
      complex5.getArgument();
      complex3.multiply(20.0);
      complex5.tan();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1773.2);
      Complex complex1 = Complex.valueOf(1773.2, 1773.2);
      complex0.equals(complex1);
      complex0.isInfinite();
      complex0.getImaginary();
      Complex.valueOf(1773.2, 0.0);
      complex1.divide(complex0);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1.511427628805191E111);
      Complex complex1 = new Complex(3.026772467749944E-235, (-1.2093068629412478E-8));
      Complex complex2 = complex0.divide(3.026772467749944E-235);
      Complex complex3 = complex1.acos();
      complex0.getImaginary();
      complex1.reciprocal();
      Complex complex4 = complex3.add((-1.2093068629412478E-8));
      Complex complex5 = complex2.acos();
      complex3.getReal();
      complex4.getArgument();
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1.889488909834863E-8), (-1.889488909834863E-8));
      Complex complex1 = new Complex((-1.889488909834863E-8));
      ComplexField complexField0 = complex0.getField();
      complex0.hashCode();
      complex0.nthRoot(974);
      complex1.cosh();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.ZERO;
      complex1.equals(complexField0);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = new Complex(2545.848137546);
      complex5.reciprocal();
      Complex complex6 = Complex.INF;
      complex4.multiply(complex6);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(1345.631242476701);
      Complex complex1 = new Complex(1345.631242476701);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.divide(complex2);
      complex0.sinh();
      Complex complex4 = Complex.INF;
      complex4.subtract(1345.631242476701);
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.log();
      complex3.multiply(127);
      Complex complex4 = Complex.INF;
      complex3.ZERO.tan();
      complex1.sin();
      complex1.toString();
      Complex complex5 = new Complex(1051.5070996);
      Complex complex6 = Complex.valueOf(1051.5070996);
      complex6.ONE.hashCode();
      complex6.negate();
      complex6.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1.511427628805191E111);
      Complex complex1 = complex0.divide((-20.0));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf((-20.0), (-6481341.739350231));
      complex1.exp();
      complex1.asin();
      Complex complex6 = complex4.acos();
      complex2.getReal();
      Complex complex7 = Complex.ONE;
      complex7.getArgument();
      complex1.multiply(0.0);
      complex5.hashCode();
      complex3.exp();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1.511427628805191E111);
      Complex complex1 = new Complex(3.026772467749944E-235, (-1.2093068629412478E-8));
      Complex complex2 = complex0.divide(3.026772467749944E-235);
      complex1.acos();
      complex0.getImaginary();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2533.94038221));
      complex3.tanh();
      complex2.tan();
      Complex complex4 = complex2.acos();
      complex4.getReal();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2297.73140345, 658.0418495373);
      Complex complex2 = complex0.sinh();
      complex0.nthRoot(974);
      complex1.cosh();
      complex2.subtract(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf(6481447.914383038, (-1001.18505440143));
      complex4.equals(complex2);
      Complex complex5 = Complex.valueOf(2.9020207004099463);
      complex5.reciprocal();
      Complex complex6 = Complex.I;
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1658.5));
      Complex complex1 = complex0.ZERO.multiply(20.0);
      Complex complex2 = complex0.ZERO.negate();
      complex2.INF.log();
      complex2.I.atan();
      complex1.I.getField();
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex3.I.asin();
      Complex complex5 = Complex.valueOf(1.25947072527746, 977.4201452);
      complex5.NaN.conjugate();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.sqrt1z();
      complex0.NaN.toString();
      Complex complex8 = complex0.pow(complex7);
      complex3.abs();
      complex5.cos();
      Complex complex9 = complex7.I.divide((-0.17520119364380138));
      complex9.ZERO.hashCode();
      Complex.valueOf((-1658.5), 1.25947072527746);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex8.pow(complex10);
      Complex complex12 = Complex.ONE;
      complex4.multiply(complex12);
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 6481447.914383038);
      Complex complex1 = complex0.ZERO.sinh();
      complex0.nthRoot(974);
      complex0.cosh();
      complex0.subtract(complex1);
      Complex complex2 = Complex.ZERO;
      complex1.equals(complex2);
      complex1.reciprocal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3836.541329691473);
      complex0.hashCode();
      Complex complex1 = complex0.add((double) (-146));
      complex1.readResolve();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.pow(3836.541329691473);
      Complex complex5 = complex1.atan();
      complex2.getField();
      complex4.sinh();
      Complex complex6 = complex5.createComplex(5870.27035676, (-3393.6402713854945));
      Complex.valueOf(6.666909874218774E-231);
      complex6.isInfinite();
      complex1.multiply((-840252329));
      Complex complex7 = complex5.acos();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(3.4405490416979487E257, 0.38374656438827515);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.INF.add(3.4405490416979487E257);
      complex0.NaN.getField();
      complex0.hashCode();
      Complex complex4 = new Complex((-2701.7926581));
      complex0.divide(complex4);
      complex4.NaN.acos();
      complex2.sin();
      complex1.sinh();
      complex0.readResolve();
      Complex complex5 = complex0.conjugate();
      complex1.acos();
      complex0.sinh();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.divide(complex6);
      complex3.exp();
      complex1.acos();
      Complex complex9 = Complex.NaN;
      complex9.getReal();
      complex8.getArgument();
      complex8.multiply(9.250422086873268E-8);
      Complex complex10 = new Complex((-2097.0354));
      complex1.tan();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.atan();
      Complex complex2 = Complex.valueOf(697.291);
      complex2.getField();
      Complex complex3 = complex0.createComplex(4152.97, Double.NaN);
      Complex.valueOf((-2229.81413517));
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.asin();
      complex2.I.pow(0.0);
      complex1.divide(complex0);
      Complex complex3 = Complex.valueOf(877.00825, Double.NaN);
      Complex complex4 = complex3.log();
      complex1.add(complex3);
      complex1.asin();
      complex4.getArgument();
      Complex complex5 = complex1.reciprocal();
      complex2.add(Double.NaN);
      Complex complex6 = new Complex(0.0);
      Complex complex7 = Complex.NaN;
      complex2.acos();
      complex5.getReal();
      complex1.getArgument();
      complex0.multiply(Double.NaN);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.026772467749944E-235, 2.1906094551086426);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.tan();
      complex0.getArgument();
      Complex complex6 = complex0.negate();
      complex5.sqrt();
      Complex complex7 = Complex.valueOf(1.5707963267948966);
      Complex complex8 = complex5.pow(6.283185307179586);
      complex0.getField();
      complex8.cosh();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex3.sinh();
      complex9.readResolve();
      complex4.conjugate();
      complex6.acos();
      complex9.sinh();
      Complex complex11 = Complex.valueOf((-1.0633845571643594E20), 0.5127768516540527);
      complex10.divide(complex11);
      Complex complex12 = complex6.exp();
      complex1.acos();
      complex11.getReal();
      Complex complex13 = Complex.NaN;
      complex13.getArgument();
      complex12.multiply(2.1906094551086426);
      Complex complex14 = new Complex(Double.NaN);
      complex7.tan();
      complex7.readResolve();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9002683120561414E-4);
      Complex complex1 = complex0.ZERO.sin();
      complex0.I.asin();
      complex0.NaN.pow(3.0118151956855568E-9);
      Complex complex2 = complex0.atan();
      complex2.ONE.hashCode();
      Complex complex3 = complex2.ONE.sqrt();
      complex3.ONE.atan();
      Complex complex4 = complex0.log();
      complex4.add(complex0);
      complex4.sqrt();
      complex0.tanh();
      complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      complex0.toString();
      complex2.add(991.71);
      complex0.readResolve();
      complex2.atan();
      complex1.acos();
      Complex complex3 = Complex.valueOf(0.0, 2155.610630999035);
      complex3.pow(0.0);
      complex1.atan();
      complex3.getField();
      Complex complex4 = Complex.ONE;
      complex0.createComplex(991.71, 1394.233947118851);
      Complex complex5 = Complex.valueOf((-880.9));
      Complex complex6 = Complex.INF;
      complex6.isInfinite();
      complex5.multiply((-840252329));
      Complex complex7 = complex5.acos();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.0118152047565877E-9), (-3.0118152047565877E-9));
      complex0.ONE.multiply((-754.3662454410401));
      Complex complex1 = complex0.divide((-3.0118152047565877E-9));
      Complex complex2 = complex0.acos();
      complex1.getImaginary();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf((-754.3662454410401), 3266.106825771786);
      complex4.tan();
      Complex complex5 = complex0.acos();
      complex5.getReal();
      Complex complex6 = Complex.ZERO;
      complex6.getArgument();
      Complex complex7 = complex4.multiply(1.9002683120561414E-4);
      complex4.tan();
      complex2.multiply(complex5);
      complex3.log();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.026772467749944E-235, 2.1906094551086426);
      Complex complex1 = new Complex(3.026772467749944E-235, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.cos();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.acos();
      complex1.getImaginary();
      complex2.tanh();
      complex0.tan();
      complex4.acos();
      complex2.getReal();
      complex0.getArgument();
      complex3.multiply(0.17520119364380138);
      Complex complex5 = Complex.NaN;
      complex5.conjugate();
      complex5.tan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.asin();
      complex2.I.pow(0.0);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.ZERO.sinh();
      complex4.I.sin();
      Complex complex5 = complex1.tan();
      complex0.NaN.acos();
      complex0.NaN.pow((-3541.92702));
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.ZERO.divide((-3541.92702));
      Complex complex8 = complex3.add((-3541.92702));
      complex5.nthRoot(699);
      Complex complex9 = new Complex((-4036.9592184036));
      complex9.multiply(280);
      complex9.cos();
      Complex.valueOf(823.63888);
      complex4.abs();
      complex1.reciprocal();
      complex7.log();
      complex8.sinh();
      Complex complex10 = new Complex(699, 187.0);
      complex1.getField();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1.889488909834863E-8), (-1.889488909834863E-8));
      Complex complex1 = new Complex((-1.889488909834863E-8));
      complex0.getField();
      complex0.hashCode();
      double double0 = 2545.848137546;
      Complex complex2 = Complex.valueOf(2545.848137546, (-1.889488909834863E-8));
      complex1.log();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex3.asin();
      complex3.getArgument();
      Complex complex5 = complex4.reciprocal();
      complex5.add((-0.17520119364380138));
      complex1.abs();
      // Undeclared exception!
      complex4.nthRoot(602907335);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.sqrt();
      complex3.add(complex1);
      Complex complex5 = complex3.conjugate();
      complex1.createComplex(0.0, 0.0);
      complex5.readResolve();
      Complex complex6 = complex1.add(0.0);
      Complex complex7 = complex4.sqrt1z();
      complex1.getReal();
      complex7.cos();
      complex3.asin();
      complex7.add(2779.376972929902);
      complex1.subtract(complex0);
      Complex complex8 = new Complex((-304.7441430088));
      complex8.acos();
      Complex complex9 = complex6.conjugate();
      Complex complex10 = Complex.valueOf(2779.376972929902, (-4154.521210111361));
      complex10.tan();
      Complex complex11 = complex5.sin();
      Complex complex12 = Complex.NaN;
      complex1.toString();
      Complex complex13 = complex11.cosh();
      Complex complex14 = complex9.sqrt1z();
      complex12.pow((-1330.3345316839657));
      complex14.getArgument();
      complex13.pow(complex12);
      complex4.log();
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1.889488909834863E-8), (-1.889488909834863E-8));
      Complex complex1 = new Complex((-1.889488909834863E-8));
      complex0.getField();
      complex0.hashCode();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.add(complex0);
      complex3.asin();
      complex3.getArgument();
      Complex complex4 = complex3.pow((-1.889488909834863E-8));
      complex4.ZERO.sinh();
      complex1.hashCode();
      complex1.add(complex1);
      complex0.reciprocal();
      complex2.divide(2545.848137546);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(1345.631242476701);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = new Complex(1345.631242476701);
      Complex complex3 = complex2.negate();
      complex2.divide(complex3);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.0118152047565877E-9), (-3.0118152047565877E-9));
      Complex complex1 = complex0.pow((-20.0));
      complex1.divide(complex0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.conjugate();
      complex3.createComplex(1623.002057704, (-131.61714515678293));
      Complex complex6 = Complex.I;
      complex6.readResolve();
      Complex complex7 = complex1.add((-38.8));
      complex5.sqrt1z();
      complex7.getReal();
      Complex complex8 = complex2.cos();
      complex8.asin();
      Complex complex9 = complex8.add((-20.0));
      complex5.subtract(complex0);
      Complex complex10 = complex3.acos();
      complex9.conjugate();
      complex8.tan();
      Complex complex11 = complex4.sin();
      Complex complex12 = Complex.NaN;
      Complex complex13 = Complex.valueOf((-20.0));
      complex13.toString();
      Complex complex14 = complex10.cosh();
      Complex complex15 = complex14.sqrt1z();
      complex11.pow((-304.7441430088));
      complex15.getArgument();
      complex12.pow(complex0);
      complex12.log();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.I.pow((-131.61714515678293));
      Complex complex5 = complex0.divide(complex1);
      complex5.I.sqrt();
      Complex complex6 = new Complex((-131.61714515678293), (-131.61714515678293));
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex6.createComplex(0.0, (-304.7441430088));
      complex0.ZERO.readResolve();
      complex6.add(0.0);
      Complex complex9 = complex8.sqrt1z();
      complex9.I.asin();
      complex1.getReal();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex1.asin();
      complex11.INF.add(0.3594330038102771);
      Complex complex12 = complex8.I.subtract(complex4);
      Complex complex13 = complex2.ZERO.acos();
      Complex complex14 = complex13.I.conjugate();
      complex14.tan();
      complex0.sin();
      Complex complex15 = Complex.NaN;
      complex15.toString();
      Complex complex16 = complex3.cosh();
      complex16.sqrt1z();
      complex8.pow(0.0);
      complex15.getArgument();
      complex13.pow(complex7);
      complex12.log();
      complex2.getField();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1201.48));
      Complex complex1 = complex0.ONE.pow((-1.889488909834863E-8));
      Complex complex2 = complex1.NaN.add((-1201.48));
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.divide(complex2);
      complex5.I.readResolve();
      Complex complex6 = complex4.reciprocal();
      complex4.conjugate();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex1.multiply(complex0);
      complex8.acos();
      Complex complex9 = complex7.conjugate();
      complex9.I.nthRoot(1344);
      complex1.sin();
      complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex3.multiply(127);
      Complex complex5 = complex3.I.atan();
      Complex complex6 = complex3.ZERO.tan();
      Complex complex7 = complex1.sin();
      complex1.toString();
      Complex complex8 = complex7.add(2155.610630999035);
      complex7.readResolve();
      Complex complex9 = complex7.atan();
      complex9.ONE.acos();
      Complex complex10 = complex6.reciprocal();
      Complex complex11 = complex0.acos();
      Complex complex12 = complex9.add(complex10);
      complex2.readResolve();
      Complex complex13 = Complex.valueOf((double) 127);
      complex13.equals("spline partition must have at least {0} points, got {1}");
      Complex complex14 = new Complex(0.0);
      complex14.readResolve();
      complex13.equals(complex5);
      complex11.negate();
      complex6.readResolve();
      complex6.pow(0.0);
      complex4.pow(complex12);
      complex3.hashCode();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.026772467749944E-235, 2.1906094551086426);
      Complex complex1 = new Complex(3.026772467749944E-235, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.divide(2.1906094551086426);
      Complex complex4 = complex3.acos();
      complex1.getImaginary();
      complex2.tanh();
      complex0.tan();
      complex4.acos();
      complex2.getReal();
      complex0.getArgument();
      complex3.multiply(0.17520119364380138);
      Complex complex5 = Complex.NaN;
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex3.multiply(127);
      complex3.I.atan();
      Complex complex5 = complex3.ZERO.tan();
      Complex complex6 = complex1.sin();
      complex1.toString();
      Complex complex7 = complex6.add(2155.610630999035);
      Complex complex8 = (Complex)complex6.readResolve();
      Complex complex9 = complex6.atan();
      complex9.ONE.acos();
      complex9.cos();
      Complex complex10 = complex7.asin();
      Complex complex11 = complex8.add(0.0);
      Complex complex12 = complex0.subtract(complex4);
      complex0.acos();
      complex0.conjugate();
      complex2.tan();
      Complex complex13 = Complex.ZERO;
      complex4.acos();
      complex5.toString();
      complex12.cosh();
      Complex complex14 = complex2.sqrt1z();
      complex14.pow(7.38346795202);
      complex13.getArgument();
      complex10.pow(complex0);
      complex11.log();
      complex14.getField();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.026772467749944E-235, 2.1906094551086426);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex1.add(complex2);
      complex0.tanh();
      Complex complex3 = complex0.tan();
      complex0.getArgument();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex0.pow(3.026772467749944E-235);
      complex0.INF.getField();
      Complex complex8 = complex4.I.cosh();
      Complex complex9 = complex4.sqrt1z();
      complex6.getReal();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex6.asin();
      complex8.add(1.0);
      complex5.subtract(complex3);
      complex10.acos();
      complex7.conjugate();
      complex9.tan();
      Complex complex12 = complex7.sin();
      complex2.acos();
      complex12.toString();
      Complex complex13 = complex11.cosh();
      complex0.sqrt1z();
      Complex complex14 = Complex.I;
      Complex complex15 = complex14.pow(Double.NaN);
      complex4.getArgument();
      complex15.pow(complex2);
      Complex complex16 = Complex.INF;
      complex16.log();
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.ONE.conjugate();
      complex2.I.pow((-131.61714515678293));
      Complex complex4 = Complex.valueOf((-131.61714515678293));
      complex4.I.sqrt();
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex4.INF.conjugate();
      Complex complex7 = complex5.createComplex(0.0, (-304.7441430088));
      Complex complex8 = (Complex)complex0.ZERO.readResolve();
      Complex complex9 = complex5.add(0.0);
      complex9.createComplex((-1509.5), (-1509.5));
      Complex complex10 = complex7.sqrt1z();
      complex1.getReal();
      complex7.cos();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex11.INF.add(0.0);
      Complex complex13 = complex12.subtract(complex2);
      Complex complex14 = complex13.acos();
      complex8.conjugate();
      Complex complex15 = complex8.tan();
      complex0.sin();
      complex10.acos();
      complex7.toString();
      complex6.cosh();
      complex9.sqrt1z();
      Complex complex16 = complex6.pow((-304.7441430088));
      complex16.exp();
      complex14.getArgument();
      complex3.pow(complex8);
      complex15.log();
      complex1.getField();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.I.pow((-131.61714515678293));
      Complex complex5 = complex0.divide(complex1);
      complex5.I.sqrt();
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex6.createComplex(5.982180242124184E65, (-304.7441430088));
      complex0.ZERO.readResolve();
      Complex complex9 = complex6.add(5.982180242124184E65);
      Complex complex10 = Complex.ONE;
      complex1.getReal();
      complex8.cos();
      Complex complex11 = complex1.asin();
      complex11.INF.add(0.0);
      complex8.I.subtract(complex4);
      Complex complex12 = complex2.ZERO.acos();
      Complex complex13 = complex12.I.conjugate();
      complex13.tan();
      complex0.sin();
      Complex complex14 = complex9.acos();
      complex14.toString();
      Complex complex15 = complex3.cosh();
      complex15.sqrt1z();
      complex8.pow(0.0);
      complex14.getArgument();
      complex12.pow(complex7);
      Complex complex16 = Complex.ONE;
      complex2.getField();
      complex9.sqrt1z();
      Complex.valueOf(6923251.752288768, (-304.7441430088));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.asin();
      complex2.I.pow(0.0);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex5.createComplex(0.0, (-749.90300989182));
      complex1.readResolve();
      complex0.add(0.0);
      complex0.sqrt1z();
      Complex complex8 = Complex.I;
      complex8.getReal();
      Complex complex9 = complex6.cos();
      Complex complex10 = complex2.asin();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.add(0.0);
      complex7.subtract(complex1);
      Complex complex13 = complex2.acos();
      Complex complex14 = complex8.conjugate();
      Complex complex15 = complex14.tan();
      Complex complex16 = complex12.sin();
      complex16.I.add((-749.90300989182));
      complex3.acos();
      complex14.toString();
      complex10.cosh();
      complex10.sqrt1z();
      Complex complex17 = complex1.pow(2.733249750024271E-236);
      complex17.ONE.cosh();
      complex9.getArgument();
      complex13.pow(complex14);
      complex15.log();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.I.pow((-131.61714515678293));
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.sinh();
      complex4.sin();
      Complex complex7 = complex3.tan();
      complex4.acos();
      Complex complex8 = complex1.pow((-131.61714515678293));
      complex3.sin();
      Complex complex9 = Complex.NaN;
      complex9.divide((-3541.92702));
      Complex complex10 = complex5.log();
      complex8.reciprocal();
      complex5.add((double) 719);
      complex7.abs();
      complex3.nthRoot(719);
      complex2.multiply(719);
      complex0.cos();
      Complex complex11 = Complex.valueOf((-1.0));
      complex0.abs();
      complex11.reciprocal();
      complex10.log();
      complex4.sinh();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.026772467749944E-235, 2.1906094551086426);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.pow((-327.0));
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex0.sinh();
      complex4.sin();
      Complex complex5 = complex2.tan();
      complex3.acos();
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.sin();
      Complex complex8 = Complex.valueOf(2.1906094551086426);
      complex8.divide(1.0);
      Complex complex9 = complex6.log();
      complex7.reciprocal();
      complex3.add(187.0);
      complex0.nthRoot(1372);
      complex0.multiply(1);
      complex9.cos();
      Complex.valueOf((double) 1);
      complex8.abs();
      complex6.reciprocal();
      complex2.log();
      complex6.sinh();
      Complex complex10 = new Complex(2.1906094551086426, 20.0);
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.026772467749944E-235, 2.1906094551086426);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex1.add(complex2);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.tan();
      complex0.getArgument();
      Complex complex5 = complex0.negate();
      complex4.sqrt();
      Complex.valueOf(Double.NaN);
      Complex complex6 = complex0.pow(3.026772467749944E-235);
      complex0.INF.getField();
      complex5.I.cosh();
      complex5.NaN.sin();
      Complex complex7 = complex6.sinh();
      complex7.I.readResolve();
      complex7.INF.conjugate();
      complex7.NaN.acos();
      complex5.sinh();
      Complex complex8 = Complex.valueOf(Double.NaN, 1.5707963267948966);
      complex7.ONE.divide(complex8);
      complex7.I.exp();
      Complex complex9 = complex6.acos();
      complex5.getReal();
      complex3.getArgument();
      complex9.multiply((-1.5707963267948966));
      Complex complex10 = new Complex((-38.359232372751144));
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      complex0.ONE.divide(568.1);
      Complex complex2 = complex0.acos();
      complex2.getImaginary();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.createComplex(6.283185307179586, 2.5257552661512635E-165);
      Complex complex7 = complex5.exp();
      complex2.multiply(complex7);
      Complex complex8 = complex4.multiply((-1));
      complex6.I.asin();
      complex4.subtract(complex3);
      complex8.abs();
      complex2.isInfinite();
      complex6.tan();
      Complex complex9 = Complex.valueOf(-0.0, 6.283185307179586);
      complex9.divide(complex1);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.exp();
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.I.conjugate();
      complex1.NaN.readResolve();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.I.divide(complex1);
      complex3.abs();
      complex3.INF.acos();
      complex0.readResolve();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ZERO.asin();
      complex5.ONE.tan();
      complex0.isNaN();
      complex4.NaN.hashCode();
      complex4.ONE.sqrt1z();
      Complex complex6 = complex4.pow(87.5059048);
      complex6.readResolve();
      Complex complex7 = complex4.add(0.0);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(186.48251628064);
      complex1.I.hashCode();
      complex0.getImaginary();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.INF.createComplex(914, 914);
      Complex complex4 = complex3.I.asin();
      complex0.nthRoot(914);
      Complex complex5 = complex0.multiply(Double.NaN);
      Complex complex6 = complex0.NaN.conjugate();
      complex6.ONE.readResolve();
      Complex complex7 = complex5.I.pow(complex0);
      Complex complex8 = Complex.valueOf(2161.9238163, Double.NaN);
      Complex complex9 = complex5.INF.pow(Double.NaN);
      complex7.INF.negate();
      Complex complex10 = complex1.subtract(complex0);
      Complex complex11 = complex5.multiply(complex7);
      complex11.INF.multiply((-2013));
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex10.NaN.sqrt();
      complex4.ZERO.subtract(complex1);
      complex10.reciprocal();
      complex7.abs();
      complex8.asin();
      complex12.hashCode();
      complex4.getField();
      complex4.subtract(complex10);
      complex12.nthRoot(914);
      complex13.divide((double) (-2013));
      Complex complex14 = complex2.add(complex13);
      Complex complex15 = complex8.pow(complex14);
      complex15.asin();
      complex4.subtract(complex8);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.multiply(952.01298972);
      complex3.NaN.pow(complex2);
      Complex complex4 = Complex.valueOf(952.01298972, 952.01298972);
      complex4.NaN.toString();
      Complex complex5 = Complex.valueOf(952.01298972, 1453.557408);
      Complex complex6 = complex5.sin();
      complex4.hashCode();
      Complex complex7 = complex4.subtract(complex6);
      complex7.NaN.conjugate();
      complex1.atan();
      try { 
        complex3.nthRoot((-92));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -92
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1.511427628805191E111);
      complex0.divide((-20.0));
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(658.0);
      complex1.equals(complex2);
      Complex complex3 = complex0.acos();
      complex2.sqrt1z();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      complex0.NaN.getField();
      complex0.isNaN();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.NaN.atan();
      complex2.ONE.getField();
      Complex complex4 = complex2.INF.asin();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = Complex.ZERO;
      complex6.INF.nthRoot(1456);
      complex6.ZERO.add(0.0);
      Complex complex7 = complex6.subtract(0.0);
      complex4.ONE.getArgument();
      complex5.equals(complex6);
      Complex complex8 = complex5.log();
      complex8.tan();
      Complex complex9 = complex5.ZERO.exp();
      complex1.I.conjugate();
      Complex complex10 = complex0.pow((-400.1635868445));
      complex0.INF.pow(0.0);
      complex5.negate();
      complex10.pow((double) 1456);
      complex6.add(complex4);
      complex6.getImaginary();
      complex4.atan();
      Complex complex11 = complex6.tanh();
      complex3.multiply(complex9);
      Complex complex12 = complex11.NaN.createComplex(0.0, 0.0);
      complex3.sin();
      complex11.add((double) 1456);
      Complex complex13 = complex6.divide(complex0);
      complex13.tanh();
      complex12.nthRoot(1456);
      complex7.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(3.418237608335161E-166);
      Complex complex2 = complex0.divide(3.418237608335161E-166);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex2.subtract(complex0);
      complex0.getImaginary();
      Complex.valueOf(2040.043, (-1484.0246849825));
      Complex complex5 = complex2.pow(3.418237608335161E-166);
      complex4.toString();
      complex3.exp();
      complex2.ZERO.tan();
      complex1.acos();
      Complex complex6 = complex1.subtract(complex2);
      complex6.I.getArgument();
      complex6.getImaginary();
      complex5.multiply((-1484.0246849825));
      complex5.multiply(1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.I.pow((-131.61714515678293));
      Complex complex5 = complex0.divide(complex1);
      complex5.I.sqrt();
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex6.createComplex(0.0, (-304.7441430088));
      complex0.ZERO.readResolve();
      Complex complex9 = complex6.add(0.0);
      complex8.sqrt1z();
      complex1.getReal();
      complex8.cos();
      Complex complex10 = complex1.asin();
      complex10.INF.add(0.0);
      Complex complex11 = complex8.I.subtract(complex4);
      Complex complex12 = complex2.ZERO.acos();
      Complex complex13 = complex12.I.conjugate();
      complex13.tan();
      complex0.sin();
      Complex complex14 = complex9.acos();
      complex14.toString();
      Complex complex15 = complex3.cosh();
      complex15.sqrt1z();
      complex8.pow(0.0);
      complex14.getArgument();
      complex12.pow(complex7);
      complex11.log();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.026772467749944E-235, 2.1906094551086426);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex1.add(complex2);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.tan();
      complex0.getArgument();
      Complex complex5 = complex0.negate();
      complex4.sqrt();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex0.pow(3.026772467749944E-235);
      complex0.INF.getField();
      complex5.I.cosh();
      complex5.NaN.sin();
      Complex complex8 = complex7.sinh();
      complex8.I.readResolve();
      complex8.INF.conjugate();
      Complex complex9 = complex8.NaN.acos();
      complex5.sinh();
      Complex complex10 = Complex.valueOf(Double.NaN, 1.5707963267948966);
      Complex complex11 = complex8.ONE.divide(complex10);
      Complex complex12 = complex8.I.exp();
      Complex complex13 = complex2.asin();
      complex6.createComplex((-97.14029106), 1.5707963267948966);
      Complex complex14 = complex0.exp();
      Complex complex15 = complex3.multiply(complex13);
      Complex complex16 = complex8.multiply((-3552));
      complex16.subtract(complex15);
      complex0.abs();
      complex14.isInfinite();
      complex9.tan();
      Complex.valueOf(Double.NaN, 3.026772467749944E-235);
      complex11.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 20.0);
      Complex complex1 = complex0.ZERO.sinh();
      complex0.nthRoot(974);
      complex0.cosh();
      Complex complex2 = complex0.subtract(complex1);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-643.7763280765118));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = complex0.log();
      complex1.multiply(complex2);
      complex0.sqrt();
      complex2.readResolve();
      complex4.subtract(complex3);
      complex4.acos();
      Complex.valueOf(0.0, (-1292.69393));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex((-1.395320103272191E-57), 0.0);
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex2.ZERO.acos();
      complex4.ONE.tan();
      complex2.exp();
      Complex complex5 = Complex.valueOf((-1.395320103272191E-57), (-724.689));
      complex3.I.pow(complex5);
      Complex complex6 = complex0.multiply(1433);
      complex6.NaN.exp();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.INF.sinh();
      complex8.ONE.getArgument();
      Complex complex9 = complex6.subtract(complex0);
      Complex complex10 = complex9.log();
      complex10.NaN.hashCode();
      complex10.ZERO.getArgument();
      Complex complex11 = complex1.sinh();
      complex11.ONE.multiply((double) 1433);
      Complex complex12 = complex0.asin();
      Complex complex13 = complex12.ZERO.asin();
      complex13.NaN.sqrt1z();
      Complex complex14 = complex10.cos();
      complex14.hashCode();
      complex10.log();
      complex14.multiply(complex9);
      complex6.getReal();
      complex5.abs();
      Object object0 = complex12.readResolve();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.abs();
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex2.I.subtract(complex1);
      complex0.getReal();
      Complex complex5 = complex1.cosh();
      complex1.equals(complex0);
      Complex complex6 = complex4.multiply(complex2);
      complex6.INF.asin();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex2.multiply((-2452));
      complex6.ZERO.pow(complex2);
      Complex complex9 = complex8.NaN.tan();
      complex7.toString();
      complex0.getReal();
      complex1.abs();
      complex2.getImaginary();
      complex2.abs();
      Complex complex10 = complex2.asin();
      complex10.INF.sin();
      complex1.abs();
      complex5.acos();
      complex2.equals(complex6);
      Complex complex11 = complex9.cosh();
      complex11.conjugate();
      complex3.pow(complex0);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.acos();
      complex1.hashCode();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.log();
      double double0 = (-3775.81252282);
      Complex complex5 = complex4.ZERO.pow((-3775.81252282));
      Complex complex6 = Complex.valueOf((-154.1759397), 1708.0);
      complex5.I.subtract(complex6);
      complex4.I.getArgument();
      complex3.subtract(complex2);
      Complex complex7 = complex0.multiply(7);
      try { 
        complex7.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ONE.divide(568.1);
      Complex complex3 = complex0.acos();
      complex3.getImaginary();
      complex3.tanh();
      complex0.I.tan();
      Complex complex4 = complex3.acos();
      complex2.getReal();
      complex1.getArgument();
      complex4.multiply(568.1);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex3.multiply(127);
      complex3.I.atan();
      complex3.ZERO.tan();
      Complex complex5 = complex1.sin();
      complex1.toString();
      complex5.add(2155.610630999035);
      complex5.readResolve();
      Complex complex6 = complex5.atan();
      complex6.ONE.acos();
      Complex complex7 = complex6.pow(0.0);
      Complex complex8 = complex4.atan();
      complex4.getField();
      complex2.ZERO.sinh();
      complex2.createComplex(5870.27035676, (-20.0));
      Complex.valueOf((-2229.81413517));
      Complex complex9 = complex4.pow(1.5216652792122652E-7);
      complex8.getReal();
      Complex.valueOf(358.526);
      complex8.sin();
      complex6.add(complex5);
      complex9.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-1035.146620824), (-1035.146620824));
      complex0.pow((-1035.146620824));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3836.541329691473);
      complex0.hashCode();
      Complex complex1 = Complex.I;
      complex1.I.negate();
      complex0.divide(complex1);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(1.145412771487496E-7, 1.145412771487496E-7);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.I.divide(complex3);
      complex3.multiply(297);
      Complex complex5 = Complex.valueOf(3.273212962622764E-8, (-902.5727837818312));
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = Complex.valueOf(1.145412771487496E-7);
      complex2.I.subtract(complex4);
      complex0.abs();
      complex1.NaN.multiply(complex8);
      Complex complex9 = complex6.multiply(complex3);
      complex9.ZERO.subtract((double) 297);
      complex7.INF.log();
      Complex complex10 = complex6.tanh();
      complex2.getField();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex11.tan();
      complex12.subtract(complex3);
      Complex complex13 = complex7.sinh();
      complex13.hashCode();
      Complex complex14 = complex5.acos();
      complex14.add(complex9);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(3679.46254);
      Complex complex2 = complex0.INF.add(3679.46254);
      complex2.hashCode();
      complex1.ONE.readResolve();
      Complex complex3 = complex0.cos();
      complex3.I.readResolve();
      complex3.I.getArgument();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.ONE;
      complex3.INF.subtract(complex5);
      Complex complex6 = complex3.exp();
      Complex complex7 = complex1.sinh();
      complex0.getField();
      Complex complex8 = complex4.asin();
      complex7.cosh();
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = complex9.INF.sin();
      complex10.abs();
      complex8.INF.tan();
      complex7.NaN.conjugate();
      complex6.sqrt1z();
      complex8.NaN.add(3679.46254);
      Complex complex11 = complex8.tan();
      complex11.getField();
      complex11.INF.cosh();
      complex7.add(3679.46254);
      try { 
        complex7.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.divide(complex1);
      complex1.NaN.add(complex2);
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.abs();
      Complex complex4 = complex1.tanh();
      complex4.I.acos();
      complex2.INF.exp();
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex0.cos();
      complex6.ZERO.multiply(1053);
      complex6.ONE.hashCode();
      complex5.log();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex0.sqrt();
      complex7.abs();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(6.283185307179586);
      complex0.ONE.add(complex1);
      complex0.INF.nthRoot(1415);
      complex0.ZERO.getField();
      Complex complex2 = Complex.NaN;
      complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex(1782.7600615, 0.0);
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.INF.divide(22.392);
      complex3.I.pow((-693.4329304));
      Complex complex4 = Complex.valueOf(22.392);
      Complex complex5 = complex0.exp();
      complex5.NaN.getArgument();
      complex0.I.toString();
      complex5.isNaN();
      complex5.NaN.add((-1379.0));
      Complex.valueOf(Double.NaN, (-1379.0));
      complex0.exp();
      complex5.hashCode();
      Complex complex6 = complex0.subtract(22.392);
      Complex complex7 = complex6.ONE.multiply((-3439.1348749));
      complex6.ONE.tanh();
      complex6.sin();
      Complex complex8 = complex0.conjugate();
      complex8.ZERO.multiply(0.0);
      Complex complex9 = Complex.valueOf(2179.6428, 3921.415858606164);
      complex9.multiply(complex4);
      Complex complex10 = complex7.acos();
      complex10.ONE.nthRoot(450);
      complex1.getReal();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1621.788248);
      complex0.ONE.cosh();
      Complex.valueOf((-1789.1));
      complex0.I.log();
      Complex complex1 = complex0.createComplex(0.0, 6.283185307179586);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.INF.asin();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.I.subtract(0.0);
      complex2.ONE.tanh();
      Complex complex4 = complex3.ONE.negate();
      complex4.I.acos();
      try { 
        complex1.nthRoot((-3102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,102
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.getField();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex1.multiply(6.283185307179586);
      complex3.INF.getField();
      complex0.tan();
      Complex complex7 = new Complex(172.37594888053, 172.37594888053);
      Complex complex8 = complex0.multiply(complex7);
      complex8.NaN.subtract(6.283185307179586);
      Complex complex9 = complex7.I.multiply((-1813.4));
      complex6.ZERO.sqrt1z();
      Complex complex10 = complex4.pow(complex3);
      complex3.readResolve();
      complex2.getField();
      Complex complex11 = complex6.ZERO.subtract(complex3);
      Complex complex12 = complex11.ZERO.add(Double.POSITIVE_INFINITY);
      complex3.sqrt();
      complex4.ONE.getField();
      Complex complex13 = complex7.divide(complex4);
      complex13.I.add(complex10);
      complex6.isInfinite();
      Complex complex14 = complex7.subtract(complex13);
      complex5.negate();
      complex0.multiply(0.7853981633974483);
      complex6.cosh();
      complex14.subtract(complex4);
      complex14.multiply(complex7);
      complex12.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(1345.631242476701);
      Complex complex1 = complex0.ONE.exp();
      complex1.INF.multiply(1314);
      complex0.nthRoot(2807);
      Complex.valueOf(1345.631242476701, 1345.631242476701);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      complex0.ZERO.hashCode();
      Complex complex2 = complex1.I.divide((double) 0);
      Complex complex3 = complex1.NaN.multiply(0);
      complex1.ONE.getArgument();
      complex0.abs();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.INF.negate();
      complex4.ZERO.getArgument();
      complex0.getReal();
      Complex complex6 = complex3.I.atan();
      complex6.reciprocal();
      complex0.getImaginary();
      complex3.multiply((-1595.3765446965));
      Complex complex7 = complex3.exp();
      complex7.ZERO.pow(complex2);
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(7.989378677301346E-301);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.divide(complex2);
      complex4.NaN.divide(complex2);
      complex4.add((-2191.169738598203));
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.ZERO.sqrt();
      complex7.getArgument();
      Complex complex9 = complex6.INF.sqrt1z();
      complex9.ONE.log();
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex0.multiply(7.989378677301346E-301);
      complex5.NaN.tan();
      complex6.pow(2.0);
      complex10.negate();
      complex8.isInfinite();
      complex3.equals(complex8);
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(3529.3);
      try { 
        complex1.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(78.45643358);
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.subtract(complex1);
      complex0.ZERO.cosh();
      complex2.I.getField();
      complex2.ONE.readResolve();
      Complex complex3 = complex2.log();
      complex2.I.abs();
      Complex complex4 = complex2.sin();
      complex2.divide(complex0);
      Complex complex5 = complex0.tanh();
      complex3.getImaginary();
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex6.I.multiply(1);
      complex6.NaN.conjugate();
      complex6.add(complex4);
      complex4.subtract(0.0);
      complex0.getImaginary();
      complex7.isNaN();
      complex0.cosh();
      Complex complex8 = Complex.valueOf(1.5400881501571645E-51, 0.0);
      complex8.I.pow(complex5);
      Complex complex9 = new Complex(1646.6010093388, 0.14518201351165771);
      complex1.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.0118152047565877E-9), (-3.0118152047565877E-9));
      Complex complex1 = complex0.ONE.multiply((-754.3662454410401));
      complex1.I.createComplex((-17.844), 0.4475363492965698);
      Complex complex2 = Complex.INF;
      complex0.ZERO.subtract((-1.0));
      complex2.INF.hashCode();
      complex0.add(complex2);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex4.ONE.pow(complex2);
      complex2.I.getArgument();
      Complex complex6 = complex4.ONE.add(4344.3844);
      complex6.NaN.exp();
      Complex complex7 = complex0.NaN.conjugate();
      complex0.getArgument();
      complex7.isInfinite();
      complex3.I.toString();
      Complex complex8 = complex0.I.cos();
      complex0.toString();
      complex2.INF.pow(1.5707963267948966);
      Complex complex9 = complex7.pow(complex3);
      Complex complex10 = complex0.reciprocal();
      complex10.ZERO.subtract(complex8);
      Complex complex11 = complex9.ZERO.cos();
      complex11.I.add(6.283185307179586);
      Complex complex12 = complex2.sqrt1z();
      complex12.I.readResolve();
      complex12.conjugate();
      complex9.getReal();
      Complex complex13 = complex11.log();
      complex9.tan();
      Complex complex14 = complex13.multiply((-895.1641042700361));
      complex14.ONE.readResolve();
      complex14.conjugate();
      complex5.hashCode();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex((-1.889488909834863E-8), (-1.889488909834863E-8));
      Complex complex1 = complex0.ZERO.asin();
      complex0.getField();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(2545.848137546, (-1.889488909834863E-8));
      complex1.log();
      Complex complex3 = complex2.add(complex0);
      complex3.asin();
      complex3.getArgument();
      Complex complex4 = complex3.pow((-1.889488909834863E-8));
      Complex complex5 = complex1.add(2545.848137546);
      Complex complex6 = complex3.subtract(1848.012654);
      complex5.isInfinite();
      complex6.multiply(3079);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.I.pow(0.0);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      complex1.divide(complex0);
      Complex complex4 = complex0.ZERO.sinh();
      complex4.I.sin();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.NaN.acos();
      Complex complex7 = complex0.NaN.pow((-3541.92702));
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.ZERO.divide((-3541.92702));
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertTrue(complex8.equals((Object)complex4));
      
      Complex complex10 = complex0.log();
      assertTrue(complex10.isInfinite());
      
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex11.ZERO.add((double) 719);
      assertEquals(719.0, complex12.getReal(), 0.01);
      
      complex11.I.abs();
      List<Complex> list0 = complex7.ONE.nthRoot(719);
      assertTrue(list0.contains(complex3));
      assertEquals(719, list0.size());
      
      Complex complex13 = complex0.multiply(719);
      Complex complex14 = complex13.cos();
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = Complex.valueOf(0.0);
      complex15.I.abs();
      Complex complex16 = complex13.reciprocal();
      assertSame(complex16, complex5);
      
      Complex complex17 = complex6.log();
      complex17.I.sinh();
      complex7.getField();
      assertFalse(complex0.equals((Object)complex2));
      assertSame(complex7, complex1);
      assertFalse(complex0.equals((Object)complex14));
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(3.4405490416979487E257, 0.38374656438827515);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.INF.add(3.4405490416979487E257);
      complex0.NaN.getField();
      complex0.hashCode();
      Complex complex4 = new Complex((-2701.7926581));
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex4.NaN.acos();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex7.INF.acos();
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      Complex complex9 = complex5.add(complex4);
      Object object0 = complex9.readResolve();
      complex0.equals(object0);
      complex1.readResolve();
      complex9.equals(object0);
      Complex complex10 = complex3.negate();
      assertEquals(Double.NEGATIVE_INFINITY, complex10.getImaginary(), 0.01);
      
      Object object1 = complex9.readResolve();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(-0.0, complex5.getReal(), 0.01);
      
      Complex complex11 = complex1.pow(0.0);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex6.pow(complex4);
      assertFalse(complex4.equals((Object)complex7));
      assertSame(complex6, complex12);
      assertTrue(complex4.equals((Object)object1));
      
      complex3.hashCode();
      assertTrue(complex2.equals((Object)complex5));
      
      Complex complex13 = complex1.exp();
      assertFalse(complex13.equals((Object)complex8));
  }
}
