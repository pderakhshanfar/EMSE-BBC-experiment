/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:57:52 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2786.23679721);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = Complex.valueOf(2786.23679721, (double) 588);
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = complex5.add((-693.38592285));
      complex3.nthRoot(588);
      complex1.pow((-9.036933434595339E-8));
      Complex complex7 = complex4.multiply((-693.38592285));
      complex1.multiply(588);
      complex3.toString();
      Complex complex8 = Complex.I;
      Complex complex9 = complex4.multiply(complex8);
      complex5.ONE.abs();
      complex9.reciprocal();
      Complex complex10 = complex6.log();
      complex7.tanh();
      complex1.exp();
      complex10.nthRoot(1201);
      Complex complex11 = Complex.valueOf((-8.194157257980706E-9), Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.multiply((-865.07594458));
      complex12.acos();
      Complex.valueOf((double) 1201, (-865.07594458));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(4999);
      // Undeclared exception!
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.006737947463989258, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.reciprocal();
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf((-1.607434968107079E-8), (-1.0088898215431471E52));
      Complex complex1 = Complex.valueOf((-1.607434968107079E-8), Double.POSITIVE_INFINITY);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(3307.034335971);
      complex3.pow(complex1);
      complex0.ONE.multiply(3307.034335971);
      Complex complex4 = Complex.ONE;
      complex4.abs();
      complex4.NaN.cos();
      complex3.INF.divide(complex4);
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex4.multiply((-2424));
      Complex complex7 = complex6.INF.tan();
      complex7.I.hashCode();
      complex2.getField();
      complex2.pow((double) (-2424));
      complex1.atan();
      complex7.multiply((-2424));
      complex5.add(complex7);
      complex6.tanh();
      complex2.nthRoot(3940);
      complex2.add((double) (-2424));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-926.917), (-926.917));
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-926.917));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.INF.tanh();
      complex0.I.nthRoot(37);
      Complex complex5 = complex2.I.multiply(complex0);
      complex0.INF.add(1648.0);
      complex0.ONE.getArgument();
      Complex complex6 = complex2.ONE.asin();
      Complex complex7 = complex6.INF.acos();
      complex0.I.readResolve();
      complex0.asin();
      complex7.I.abs();
      Complex complex8 = new Complex(6.918194644874781E-4);
      Complex complex9 = complex2.add(complex8);
      Complex complex10 = complex4.acos();
      Complex complex11 = complex10.pow(complex9);
      complex5.hashCode();
      complex5.asin();
      Complex complex12 = Complex.valueOf(1.0);
      complex0.toString();
      complex12.atan();
      complex3.getArgument();
      complex10.divide(complex11);
      Complex complex13 = new Complex(0.0, (-926.917));
      complex13.exp();
      complex6.subtract((-1926.3475862535327));
      complex7.pow(1.0);
      Complex complex14 = Complex.INF;
      complex14.exp();
      Complex.valueOf((-294.1791464853984), (-294.1791464853984));
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex0.pow(complex1);
      complex1.tan();
      int int0 = (-1);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      complex1.INF.sin();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.equals((Object) null);
      complex0.INF.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(4211.17383091);
      Complex complex2 = complex1.divide(complex0);
      complex2.acos();
      complex2.INF.tan();
      Complex complex3 = Complex.valueOf(0.0, 150.605);
      Complex complex4 = complex2.tan();
      complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(112.3363261484102);
      Complex complex1 = complex0.divide((-1977.55444));
      complex0.INF.nthRoot(604);
      Complex complex2 = complex0.ZERO.tan();
      complex1.nthRoot(628);
      Complex complex3 = complex0.asin();
      complex3.getArgument();
      complex0.ZERO.asin();
      complex0.ZERO.nthRoot(604);
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex4.I.sin();
      complex5.NaN.tanh();
      complex5.INF.pow(complex1);
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.INF.sinh();
      complex7.I.abs();
      Complex complex8 = complex6.NaN.createComplex(2.414213562373095, 0.08513787388801575);
      complex8.I.atan();
      Complex.valueOf((double) 604);
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex6.sin();
      complex9.toString();
      complex10.divide((-2893365.9801));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(4354.36237095618, (-1.0088898215431471E52));
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739, 1752.26855739);
      complex0.acos();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.acos();
      Complex complex3 = new Complex(20.0, 20.0);
      Complex complex4 = new Complex(20.0);
      complex3.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(Double.NaN);
      complex1.ONE.add(complex0);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = (-419.598128);
      Complex complex0 = Complex.valueOf((-419.598128), (-419.598128));
      complex0.toString();
      Complex complex1 = complex0.tan();
      complex0.ONE.pow(complex1);
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.equals("");
      Complex complex1 = new Complex(1742.2, 1742.2);
      complex1.divide(complex0);
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(2505.97534, (-1484.9154531209));
      complex1.getField();
      complex0.readResolve();
      Complex complex3 = complex0.tan();
      complex1.exp();
      complex3.readResolve();
      Complex complex4 = Complex.I;
      complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.equals(complex3);
      complex2.add(complex3);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1211.983);
      complex0.INF.pow(complex1);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.subtract(Double.NaN);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(4354.36237095618, (-1.0088898215431471E52));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.reciprocal();
      complex2.tan();
      Complex complex5 = new Complex((-1.0088898215431471E52), 4354.36237095618);
      Complex complex6 = complex0.tan();
      complex5.asin();
      complex4.NaN.pow(complex6);
      complex4.abs();
      complex3.multiply(2140);
      complex6.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739, 1752.26855739);
      Complex complex1 = complex0.divide(1752.26855739);
      complex1.acos();
      Complex complex2 = new Complex(20.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.reciprocal();
      complex4.tan();
      Complex complex5 = new Complex((-3.145260242151865), (-631.5504660355173));
      Complex complex6 = complex5.tan();
      complex3.asin();
      Complex complex7 = complex4.pow(complex2);
      complex6.abs();
      complex4.multiply(2140);
      complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(4354.36237095618, (-1.0088898215431471E52));
      complex1.acos();
      complex1.tanh();
      Complex complex2 = Complex.valueOf((-913.3261), 4354.36237095618);
      complex1.tan();
      complex0.asin();
      complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.0088898215431471E52), 4.908843759498681E-306);
      complex1.divide(1964.07443);
      complex0.acos();
      Complex complex2 = Complex.valueOf(4.908843759498681E-306, Double.NaN);
      complex2.tanh();
      Complex complex3 = complex2.reciprocal();
      complex3.tan();
      Complex complex4 = new Complex((-1.0088898215431471E52), Double.NaN);
      Complex complex5 = complex1.tan();
      complex5.I.getField();
      complex5.pow(complex0);
      complex4.abs();
      complex4.multiply(471);
      Complex complex6 = Complex.ONE;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf(0.9999997242429851);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex2.pow(complex2);
      Complex complex8 = complex4.acos();
      complex6.sinh();
      complex1.tan();
      complex7.pow(0.9999997242429851);
      complex3.readResolve();
      Complex complex9 = complex8.tanh();
      Complex complex10 = new Complex(Double.NaN, 0.5801463195356185);
      complex10.equals((Object) null);
      complex0.divide(complex8);
      complex8.getImaginary();
      complex9.multiply((-654));
      complex7.divide(complex8);
      Complex.valueOf((-5.148989321866988E-116));
      Complex complex11 = Complex.ONE;
      complex11.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.acos();
      complex2.tanh();
      complex1.pow(complex2);
      Complex complex3 = new Complex(1752.26855739);
      Complex complex4 = complex0.sinh();
      complex4.tan();
      Complex complex5 = complex2.pow(0.0);
      complex2.readResolve();
      Complex complex6 = Complex.ZERO;
      complex2.equals(complex6);
      complex4.divide(complex1);
      complex3.getImaginary();
      Complex complex7 = complex5.multiply((-654));
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.divide(complex8);
      Complex.valueOf((double) (-654));
      complex9.multiply((-654));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(2.237894048535414E-172, 2.237894048535414E-172);
      Complex complex1 = complex0.ZERO.createComplex((-32.764127662), (-32.764127662));
      Complex complex2 = complex1.reciprocal();
      complex0.subtract(2.237894048535414E-172);
      complex0.conjugate();
      complex2.subtract((-1.3289231465997192E-9));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tan();
      complex1.add(5.4557485189210095E73);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.add(5.4557485189210095E73);
      complex2.asin();
      Complex complex5 = Complex.INF;
      complex5.abs();
      complex3.getReal();
      complex0.cos();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, -0.0);
      Complex complex7 = new Complex(-0.0, -0.0);
      Complex complex8 = Complex.I;
      complex8.equals((Object) null);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tan();
      complex1.add(5.4557485189210095E73);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.multiply(complex1);
      complex3.add(5.4557485189210095E73);
      complex0.getField();
      complex2.readResolve();
      Complex complex4 = complex0.tanh();
      complex1.tan();
      Object object0 = new Object();
      complex1.equals(complex0);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3288.7486961));
      Complex complex1 = complex0.ZERO.log();
      complex1.INF.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.negate();
      complex3.multiply(704.5466935383633);
      Complex complex4 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex4.I.createComplex(704.5466935383633, (-124.4301621));
      complex0.readResolve();
      Complex complex5 = Complex.valueOf((-3288.7486961));
      complex5.ONE.atan();
      Complex complex6 = complex0.NaN.createComplex(Double.NaN, (-3288.7486961));
      complex6.I.cos();
      complex2.ONE.tanh();
      try { 
        complex2.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.I.readResolve();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = Complex.valueOf((-1.113609775758657E7), (-1.113609775758657E7));
      complex0.divide(2.81312841469177E128);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.asin();
      complex3.add((-1.113609775758657E7));
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex6.sin();
      complex7.I.toString();
      Complex complex8 = complex4.log();
      Complex complex9 = complex6.pow(complex2);
      Complex complex10 = complex6.acos();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex8.sqrt();
      complex10.tan();
      complex11.conjugate();
      complex12.reciprocal();
      Complex complex13 = Complex.valueOf((-1.113609775758657E7), (-1.602000800745108E-9));
      complex13.multiply((-1615.6755045501));
      complex9.divide(complex12);
      complex6.negate();
      Complex.valueOf((-5.380016714089483E-9), 2948.42448);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1959.68533));
      Complex complex1 = complex0.divide((-1959.68533));
      Complex complex2 = complex1.acos();
      Complex.valueOf(0.5000000000042687);
      Complex complex3 = complex1.tanh();
      complex0.reciprocal();
      Complex.valueOf(2.8534441162264557E-4);
      Complex complex4 = complex0.tan();
      complex2.add(2.8534441162264557E-4);
      complex3.tanh();
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex2.add(0.0);
      Complex.valueOf(0.5000000000042687, 2.8534441162264557E-4);
      Complex complex7 = Complex.NaN;
      complex7.getField();
      complex5.readResolve();
      complex3.tan();
      complex6.exp();
      complex4.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739);
      Complex complex1 = complex0.subtract(1392.121323107);
      Complex complex2 = new Complex((-1.0), (-1.0409573038524821E7));
      Complex complex3 = Complex.valueOf(653.7797845504, 3284.48);
      complex3.exp();
      Complex complex4 = complex2.add((-2530.3));
      Complex complex5 = complex0.tanh();
      complex2.multiply(complex5);
      complex3.add((-1.4983162054704735E-4));
      complex4.getField();
      complex2.readResolve();
      Complex complex6 = complex1.tan();
      complex3.exp();
      complex6.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1668.53968769));
      complex0.multiply(complex1);
      Complex complex2 = complex1.add((-1668.53968769));
      Complex complex3 = new Complex((-2.2132706360079843E-9), 1648.0);
      complex3.getArgument();
      complex1.readResolve();
      Complex complex4 = complex2.asin();
      complex2.abs();
      complex3.getReal();
      complex4.cos();
      complex3.abs();
      complex2.hashCode();
      complex2.divide(complex4);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.createComplex(832.57, 0.9999997531889484);
      Complex complex8 = Complex.I;
      // Undeclared exception!
      complex7.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-926.917), (-926.917));
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-926.917));
      Complex complex2 = complex1.asin();
      complex0.abs();
      complex0.getReal();
      complex2.abs();
      complex0.hashCode();
      Complex complex3 = new Complex(2.300227165222168, 14.724199097451903);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex5.tan();
      Complex complex8 = Complex.valueOf(14.724199097451903, Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.INF.subtract(complex8);
      complex9.INF.getField();
      complex4.divide(complex1);
      Complex complex10 = Complex.I;
      complex7.multiply(1654.9546009906692);
      complex4.divide(complex10);
      complex6.abs();
      complex10.acos();
      Complex complex11 = Complex.NaN;
      complex0.pow(complex1);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 0.006399168654101482;
      Complex complex1 = Complex.valueOf(0.006399168654101482);
      double double1 = 0.0;
      complex1.divide(0.0);
      Complex complex2 = Complex.valueOf((-1199.23201));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.tanh();
      complex3.reciprocal();
      double double2 = 2803.794558;
      Complex.valueOf(2803.794558);
      complex4.tan();
      Complex.valueOf(1.1010850265503658);
      complex3.tan();
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(2.909767667939852E-7, 651.9427773641795);
      Complex complex1 = complex0.acos();
      double double0 = Double.NaN;
      complex0.ONE.multiply(79);
      Complex complex2 = Complex.valueOf(651.9427773641795, Double.NaN);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.I.cos();
      complex3.ZERO.asin();
      complex4.ONE.multiply((-903));
      Complex complex5 = complex2.I.add(complex1);
      complex5.ZERO.exp();
      Complex complex6 = complex1.INF.subtract((-20.0));
      Complex.valueOf(2.99663154009977E-4);
      Complex complex7 = Complex.valueOf(Double.NaN, 0.20501139760017395);
      complex6.I.getField();
      complex6.INF.hashCode();
      Complex complex8 = complex0.pow(2.909767667939852E-7);
      Complex complex9 = complex8.negate();
      complex9.NaN.sin();
      Complex complex10 = complex8.tanh();
      complex10.I.divide(complex2);
      complex7.divide(complex1);
      Complex complex11 = complex5.tanh();
      complex11.I.conjugate();
      try { 
        complex11.ZERO.nthRoot((-903));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -903
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex1.readResolve();
      Complex complex2 = complex0.asin();
      complex1.abs();
      complex0.getReal();
      Complex complex3 = complex0.cos();
      complex0.abs();
      complex2.hashCode();
      complex3.divide(complex1);
      Complex complex4 = Complex.ZERO;
      complex1.toString();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex3.pow(complex7);
      Complex complex9 = new Complex(2758.48613499, Double.POSITIVE_INFINITY);
      complex6.getField();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex0.divide(complex3);
      complex3.multiply(1625.10856);
      Complex complex12 = Complex.ZERO;
      complex11.divide(complex8);
      complex3.abs();
      complex7.abs();
      complex3.hashCode();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-926.917), (-926.917));
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-926.917));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.INF.tanh();
      complex0.I.nthRoot(37);
      Complex complex5 = complex2.I.multiply(complex0);
      complex0.INF.add(1648.0);
      complex0.ONE.getArgument();
      Complex complex6 = complex2.ONE.asin();
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = (Complex)complex0.I.readResolve();
      Complex complex9 = complex0.asin();
      complex7.I.abs();
      complex6.getReal();
      complex1.abs();
      complex1.hashCode();
      Complex complex10 = new Complex(37, 0.0);
      Complex complex11 = complex10.conjugate();
      complex11.ZERO.multiply((-4305.69424838));
      Complex complex12 = complex2.divide(complex0);
      Complex complex13 = complex12.sqrt1z();
      complex10.getField();
      complex9.add(0.1767723262310028);
      Complex complex14 = Complex.ONE;
      complex14.cos();
      complex8.log();
      complex4.getArgument();
      complex13.add((-926.917));
      complex3.multiply(Double.NaN);
      complex5.tanh();
      complex8.atan();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1668.53968769));
      complex0.multiply(complex1);
      Complex complex2 = complex1.add((-1668.53968769));
      Complex complex3 = complex2.multiply((-3192));
      complex3.getImaginary();
      Complex complex4 = complex0.tan();
      complex3.divide((double) (-3192));
      complex2.exp();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.acos();
      Complex.valueOf(0.9999997242429851);
      Complex complex3 = complex2.tanh();
      complex0.readResolve();
      Complex complex4 = complex3.asin();
      complex1.abs();
      complex3.getReal();
      Complex complex5 = complex1.cos();
      complex1.abs();
      complex3.hashCode();
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = Complex.ZERO;
      complex4.toString();
      complex6.conjugate();
      complex1.divide(complex4);
      complex6.pow(complex0);
      Complex complex8 = Complex.valueOf(Double.NaN, 1752.26855739);
      complex2.getField();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex1.divide(complex5);
      Complex complex11 = complex3.multiply(0.0);
      Complex complex12 = Complex.ZERO;
      complex3.divide(complex9);
      complex9.abs();
      complex8.abs();
      complex8.hashCode();
      complex4.sinh();
      complex11.readResolve();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739);
      complex0.divide(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf(0.9999997242429851);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.tan();
      complex3.pow(complex3);
      complex4.acos();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex2.cosh();
      complex3.toString();
      Complex complex9 = Complex.valueOf((-952.4046));
      complex9.conjugate();
      complex5.divide(complex8);
      complex7.pow(complex9);
      Complex complex10 = new Complex(4744.0, (-952.4046));
      complex0.getField();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex3.divide(complex7);
      complex10.multiply((-952.4046));
      Complex complex13 = Complex.ZERO;
      Complex complex14 = Complex.INF;
      complex14.divide(complex11);
      complex6.abs();
      Complex complex15 = Complex.NaN;
      complex15.abs();
      complex5.hashCode();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.I.acos();
      Complex complex3 = Complex.valueOf((-2824.89597));
      complex3.ONE.tanh();
      Complex complex4 = Complex.valueOf((-2824.89597));
      complex2.sin();
      Complex complex5 = complex0.add(1752.26855739);
      complex5.abs();
      Complex complex6 = complex2.tan();
      complex1.pow(0.0);
      complex4.equals(complex6);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.divide(complex1);
      complex6.getImaginary();
      complex7.multiply(2300);
      complex8.divide(complex5);
      Complex.valueOf((-706.743));
      complex4.divide(4744.0);
      complex8.exp();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(1283.7);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.add(complex0);
      complex3.INF.add(complex1);
      complex2.readResolve();
      complex1.sqrt();
      Complex complex4 = Complex.valueOf((-3129.69365));
      complex4.tanh();
      complex2.pow(complex3);
      double double0 = (-376.916488016625);
      try { 
        complex2.ONE.nthRoot((-3278));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,278
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2846.6408));
      Complex complex1 = Complex.NaN;
      complex1.INF.nthRoot(385);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.ZERO.divide(2461.0);
      Complex complex5 = complex3.I.multiply((-3943.7654628));
      complex5.INF.nthRoot(385);
      complex5.ZERO.toString();
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex3.divide(complex1);
      Complex complex8 = complex3.ONE.subtract(403.6385355);
      complex4.INF.sin();
      complex8.ZERO.sqrt();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex9.NaN.tan();
      complex3.cosh();
      complex0.log();
      complex4.divide((-1214.0));
      Complex complex11 = complex4.pow(complex2);
      Complex complex12 = complex1.sqrt();
      complex12.ZERO.getField();
      complex11.sin();
      complex12.equals(complex6);
      complex7.asin();
      complex1.multiply(3.9776772027043775E-302);
      complex0.cos();
      complex10.acos();
      complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.nthRoot(1889);
      Complex complex1 = complex0.acos();
      complex0.ONE.log();
      Complex complex2 = complex0.INF.cos();
      complex0.NaN.hashCode();
      Complex complex3 = complex1.NaN.multiply(1889);
      complex3.ZERO.nthRoot(477);
      complex0.isInfinite();
      Complex complex4 = complex0.sqrt();
      complex2.I.multiply((double) 477);
      Complex complex5 = complex4.I.add(complex0);
      complex5.ONE.multiply((double) 1889);
      Complex complex6 = complex1.acos();
      complex6.INF.pow(complex1);
      complex1.isInfinite();
      Complex.valueOf((double) 1889, (double) 1889);
      complex2.tanh();
      complex2.isInfinite();
      complex5.sinh();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.0605), (-5.0605));
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex1.NaN.multiply(0.08692999184131622);
      Complex complex3 = complex1.NaN.multiply((-5.0605));
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex4.ONE.sqrt1z();
      complex5.ZERO.getArgument();
      complex5.NaN.readResolve();
      Complex.valueOf(0.0);
      Complex complex6 = complex4.ONE.conjugate();
      Complex complex7 = complex6.asin();
      complex7.I.exp();
      Complex complex8 = complex3.NaN.pow(complex2);
      Complex complex9 = complex0.negate();
      complex8.pow(complex7);
      Complex complex10 = complex5.acos();
      complex0.sinh();
      Complex complex11 = complex4.cosh();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex0.createComplex((-5.0605), (-3.408223442335828));
      Complex complex14 = complex2.sinh();
      complex9.pow(0.0);
      complex11.getArgument();
      complex11.nthRoot(1128);
      Complex complex15 = complex13.createComplex(Double.POSITIVE_INFINITY, 3034.83325590483);
      complex15.divide(complex14);
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(159.8510908984295, 159.8510908984295);
      Complex.valueOf((-1721.95313));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.createComplex(159.8510908984295, (-1721.95313));
      Complex complex5 = complex1.subtract(159.8510908984295);
      Complex complex6 = new Complex(159.8510908984295, 4642.433995);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex0.subtract(complex2);
      Complex complex9 = Complex.I;
      Complex complex10 = complex6.subtract(complex8);
      complex3.isNaN();
      complex2.equals("");
      Complex complex11 = complex0.subtract(complex4);
      Complex complex12 = complex10.pow(complex11);
      complex10.toString();
      Complex complex13 = complex12.sqrt1z();
      complex0.getField();
      complex7.add((-1721.95313));
      complex11.cos();
      Complex complex14 = complex3.multiply(complex0);
      complex14.log();
      complex6.getArgument();
      complex13.add(4642.433995);
      complex9.multiply(4642.433995);
      complex0.hashCode();
      Complex complex15 = complex4.tanh();
      complex15.atan();
      complex7.conjugate();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      complex1.ZERO.abs();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex2.subtract(1955.5009758);
      Complex.valueOf(433.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.multiply((-2491.5269553592));
      Complex complex6 = complex5.sqrt();
      complex0.readResolve();
      complex6.ZERO.abs();
      complex5.ONE.pow(1955.5009758);
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex6.tanh();
      complex8.NaN.log();
      complex8.NaN.sin();
      complex4.atan();
      Complex complex9 = complex0.sinh();
      complex9.ONE.subtract(928.2);
      Complex complex10 = complex0.atan();
      complex10.acos();
      Complex.valueOf(1955.5009758, (-1734.7));
      complex3.log();
      complex0.NaN.multiply(complex7);
      complex7.nthRoot(1722);
      Complex complex11 = complex5.reciprocal();
      complex1.cosh();
      complex4.log();
      complex11.subtract(1.1976919074588434E201);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.createComplex((-316.3489204880786), (-316.3489204880786));
      Complex complex4 = complex3.subtract((-316.3489204880786));
      Complex complex5 = new Complex(2.0, (-245.4697803458533));
      Complex complex6 = complex4.cos();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.subtract(complex6);
      Complex complex9 = Complex.I;
      Complex complex10 = complex2.subtract(complex6);
      complex1.isNaN();
      Object object0 = complex6.readResolve();
      complex8.equals(object0);
      Complex complex11 = complex0.subtract(complex7);
      Complex complex12 = complex5.pow(complex2);
      complex7.toString();
      complex11.getField();
      Complex complex13 = complex10.add((-1.0));
      Complex complex14 = complex11.cos();
      complex2.multiply(complex14);
      complex13.log();
      Complex complex15 = Complex.INF;
      complex15.getArgument();
      complex10.add((-473.825));
      complex15.multiply((-473.825));
      complex11.hashCode();
      complex1.tanh();
      complex10.atan();
      complex12.toString();
      complex11.pow((-316.3489204880786));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.0605), (-5.0605));
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex1.NaN.multiply(0.08692999184131622);
      Complex complex3 = complex1.NaN.multiply((-5.0605));
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex4.ONE.sqrt1z();
      complex5.ZERO.getArgument();
      Complex complex6 = (Complex)complex5.NaN.readResolve();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex4.ONE.conjugate();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex9.I.exp();
      complex3.NaN.pow(complex2);
      Complex complex11 = complex0.negate();
      Complex complex12 = complex5.subtract(complex10);
      complex12.isNaN();
      complex1.equals(complex11);
      complex6.subtract(complex11);
      complex6.pow(complex3);
      complex8.toString();
      Complex complex13 = complex3.sqrt1z();
      complex13.getField();
      Complex complex14 = complex10.add(2.550088463698309E-16);
      complex13.cos();
      complex0.multiply(complex9);
      complex13.log();
      complex9.getArgument();
      complex7.add((-1530.427424));
      complex14.multiply(592.1400947862921);
      complex11.hashCode();
      complex11.tanh();
      complex13.atan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739);
      complex0.divide(0.0);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = Complex.valueOf((-2824.89597));
      Complex complex3 = complex2.ONE.tanh();
      complex1.reciprocal();
      Complex complex4 = Complex.valueOf(1752.26855739);
      Complex complex5 = complex2.tan();
      complex5.pow(complex0);
      Complex complex6 = complex3.acos();
      complex6.sinh();
      complex4.cosh();
      Complex complex7 = Complex.NaN;
      complex7.createComplex(0.0, (-7.421724145607836));
      Complex complex8 = complex4.sinh();
      complex5.pow(1052.6291332836);
      complex1.getArgument();
      complex2.nthRoot(1128);
      complex2.createComplex((-0.5113252103366475), 1752.26855739);
      complex0.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      complex2.add(0.1970241367816925);
      Complex complex3 = complex1.multiply(0);
      complex1.getImaginary();
      Complex complex4 = Complex.NaN;
      complex4.tan();
      Complex complex5 = complex0.divide((-51.21732050000001));
      Complex complex6 = complex2.exp();
      complex6.ZERO.log();
      Complex complex7 = Complex.valueOf((-1.2680354928109105E-8));
      complex7.getField();
      complex3.divide(complex5);
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739);
      complex0.divide(0.0);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = Complex.valueOf((-2824.89597));
      Complex complex3 = complex2.ZERO.multiply(2657);
      complex3.pow(complex0);
      Complex complex4 = Complex.valueOf((-2824.89597));
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.exp();
      complex6.ONE.exp();
      Complex complex7 = complex0.tanh();
      complex7.NaN.negate();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex(722.73167513743, 722.73167513743);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.acos();
      complex1.readResolve();
      Complex complex7 = complex6.asin();
      complex6.abs();
      complex4.getReal();
      Complex complex8 = complex7.cos();
      complex0.abs();
      complex5.hashCode();
      complex7.divide(complex1);
      complex4.toString();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex5.divide(complex3);
      complex2.pow(complex9);
      complex0.getField();
      complex6.tan();
      Complex complex11 = new Complex((-926.917), 2460.647472687486);
      complex8.divide(complex11);
      Complex complex12 = complex10.multiply(2460.647472687486);
      complex12.divide(complex5);
      Complex complex13 = new Complex((-926.917), 1.0);
      complex13.abs();
      complex13.hashCode();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex(722.73167513743, 722.73167513743);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.multiply(complex3);
      complex2.toString();
      Complex complex5 = Complex.valueOf(722.73167513743);
      Complex complex6 = complex2.sin();
      complex0.add(1184.2703838293496);
      complex4.abs();
      Complex complex7 = complex3.tan();
      complex0.pow(1532.4228890781956);
      Object object0 = new Object();
      complex7.equals(object0);
      Complex complex8 = complex3.divide(complex4);
      complex3.getImaginary();
      Complex complex9 = complex7.multiply((-437));
      Complex complex10 = complex9.divide(complex5);
      Complex.valueOf(1604.7991629431856);
      complex0.subtract(complex6);
      complex10.multiply(1);
      complex2.hashCode();
      Object object1 = new Object();
      complex4.equals(object1);
      complex8.pow(0.9997566916989427);
      complex0.subtract(2.403806217004454E138);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.I.add(0.0);
      Complex complex2 = complex0.multiply(0);
      complex2.getImaginary();
      Complex complex3 = complex2.tan();
      complex1.divide((-1.2680354928109105E-8));
      complex0.exp();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(2.1294407844543457);
      Complex complex1 = complex0.INF.multiply(2.1294407844543457);
      Complex.valueOf(0.5882205963134766, (-1379.068984207169));
      complex0.I.cosh();
      complex0.I.toString();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.add(899.856222385152);
      complex3.getReal();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(3477.610097994, (-1918.481));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.cosh();
      complex2.ONE.tanh();
      Complex.valueOf(3477.610097994);
      complex2.NaN.asin();
      Complex complex3 = complex1.NaN.multiply((-20.0));
      complex1.hashCode();
      complex0.getReal();
      Complex complex4 = complex0.conjugate();
      complex4.NaN.multiply(1);
      Complex complex5 = complex0.log();
      complex5.I.acos();
      complex3.createComplex(2792.901, (-1442.2905773801));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 2297.55114693711);
      Complex complex1 = complex0.NaN.cosh();
      complex1.I.tan();
      Complex complex2 = complex0.acos();
      Complex.valueOf(2297.55114693711, 2297.55114693711);
      Complex complex3 = complex0.ZERO.negate();
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(1686.3);
      complex4.NaN.multiply(1);
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex1.atan();
      complex5.ZERO.acos();
      complex6.NaN.tan();
      Complex complex7 = complex5.cos();
      complex7.NaN.sqrt1z();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex8.log();
      complex8.ZERO.sinh();
      complex9.I.negate();
      complex4.isNaN();
      complex9.subtract(complex2);
      complex9.I.hashCode();
      complex3.isNaN();
      complex0.tan();
      complex5.divide(2297.55114693711);
      Complex complex10 = complex7.subtract(20.0);
      complex9.toString();
      Complex.valueOf(20.0);
      Complex complex11 = Complex.ZERO;
      complex10.pow(complex11);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.exp();
      complex0.abs();
      complex0.INF.sqrt1z();
      Complex complex4 = complex0.add((-2364.0805738539));
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex5.pow(2635.6);
      Complex.valueOf(0.0, 20.0);
      complex3.I.getField();
      complex2.abs();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.negate();
      Complex complex9 = complex6.negate();
      complex9.multiply(complex3);
      complex9.pow(4074.86245684924);
      complex8.sqrt1z();
      complex9.reciprocal();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.exp();
      complex2.INF.multiply(2125);
      complex3.NaN.conjugate();
      complex1.I.subtract(complex0);
      Complex complex4 = complex3.NaN.createComplex(701.085613468271, 0.0);
      Complex complex5 = complex4.ZERO.subtract(0.0);
      Complex complex6 = new Complex(0.0, 701.085613468271);
      complex4.NaN.cos();
      Complex complex7 = complex5.ZERO.subtract(complex6);
      Complex complex8 = Complex.I;
      complex7.NaN.subtract(complex8);
      complex2.isNaN();
      complex0.equals(complex1);
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex1.pow(complex2);
      complex1.toString();
      complex0.sqrt1z();
      complex3.getField();
      Complex complex11 = complex0.add(0.0);
      Complex complex12 = complex11.cos();
      complex11.multiply(complex12);
      complex0.log();
      complex10.getArgument();
      complex11.add(0.0);
      complex9.multiply(0.0);
      complex0.hashCode();
      complex12.tanh();
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.pow(4.0036393271908754E121);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ONE.divide(Double.NaN);
      complex2.readResolve();
      complex2.readResolve();
      Complex complex4 = complex1.reciprocal();
      complex2.cos();
      Complex complex5 = complex2.pow(0.0);
      Complex complex6 = complex0.add(complex5);
      complex2.toString();
      Complex complex7 = Complex.I;
      complex6.ONE.divide(complex7);
      Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex2.add(0.0);
      Complex complex9 = complex6.pow(0.0);
      complex3.ZERO.negate();
      complex9.atan();
      complex3.reciprocal();
      complex8.conjugate();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-1959.68533));
      Complex complex1 = complex0.ZERO.subtract((-1561.20765));
      Complex complex2 = new Complex(3284.48, (-1959.68533));
      Complex complex3 = complex2.ONE.exp();
      complex2.INF.add((-1959.68533));
      complex3.INF.tanh();
      Complex complex4 = complex0.multiply(complex2);
      complex4.NaN.add((-1959.68533));
      complex4.getField();
      complex4.readResolve();
      Complex complex5 = complex0.tan();
      complex1.exp();
      complex5.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-926.917), (-926.917));
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-926.917));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.INF.tanh();
      complex0.I.nthRoot(37);
      Complex complex5 = complex2.I.multiply(complex0);
      complex0.INF.add(1648.0);
      complex0.ONE.getArgument();
      Complex complex6 = complex2.ONE.asin();
      Complex complex7 = complex6.INF.acos();
      complex0.I.readResolve();
      Complex complex8 = complex0.asin();
      complex7.I.abs();
      complex6.getReal();
      complex4.I.cos();
      complex1.abs();
      complex1.hashCode();
      Complex complex9 = complex7.divide(complex4);
      complex5.ONE.toString();
      Complex complex10 = complex9.conjugate();
      complex2.divide(complex0);
      Complex complex11 = complex4.pow(complex5);
      complex11.INF.getField();
      Complex complex12 = complex8.tan();
      complex11.divide(complex10);
      complex6.multiply(1.5707963267948966);
      Complex complex13 = complex11.divide(complex8);
      complex11.abs();
      complex12.abs();
      complex13.hashCode();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double double0 = 703.2832435;
      Complex complex0 = Complex.valueOf(703.2832435, 703.2832435);
      double double1 = 1547.79769618528;
      Complex complex1 = complex0.INF.asin();
      complex1.I.tanh();
      Complex complex2 = complex1.ZERO.asin();
      Complex.valueOf(20.0);
      complex2.tanh();
      Complex complex3 = new Complex(1547.79769618528);
      Complex complex4 = complex0.INF.multiply(complex3);
      double double2 = 3668.75;
      try { 
        complex4.ZERO.nthRoot((-5705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,705
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf((-1.830335419852293E-147), (-2560.5544));
      Complex complex5 = complex3.INF.pow(complex0);
      complex5.exp();
      Complex complex6 = Complex.valueOf(20.0);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex0.multiply(2153);
      complex2.equals("empty selected row index array");
      complex8.divide((-5.452692909894593E-65));
      complex8.I.nthRoot(1);
      complex1.isNaN();
      Complex complex9 = complex8.multiply(complex6);
      complex4.getReal();
      complex0.pow(complex7);
      Complex complex10 = complex2.divide(complex8);
      complex9.INF.sin();
      complex10.ONE.divide((-382.629348479735));
      complex1.tan();
      complex9.tan();
      complex1.equals(complex10);
      complex7.tan();
      Complex.valueOf(0.0, 0.0);
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-1665.7874512055955));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.INF.divide(complex0);
      complex0.sqrt();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex3.I.acos();
      complex1.readResolve();
      complex0.sinh();
      complex2.pow(complex1);
      complex2.divide(1.3608995799112174E108);
      complex4.negate();
      Complex.valueOf((-613.755187), (-5261.0));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.subtract(3405.0);
      complex0.ZERO.divide((-1487.5230203359285));
      complex0.INF.conjugate();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add(0.0);
      complex1.ONE.readResolve();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.multiply(complex2);
      complex4.toString();
      Complex complex5 = Complex.valueOf((-1530.3036));
      complex2.ZERO.sin();
      Complex complex6 = complex3.NaN.add(1532.4228890781956);
      complex0.abs();
      complex2.I.tan();
      complex4.INF.pow(0.0);
      complex4.equals(complex0);
      complex3.divide(complex0);
      complex4.getImaginary();
      complex2.multiply((-437));
      complex2.divide(complex5);
      Complex complex7 = Complex.valueOf((-315.633284968));
      complex6.subtract(complex7);
      complex5.multiply(1);
      complex1.hashCode();
      complex5.equals("(NaN, NaN)");
      complex5.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.26855739);
      Complex complex1 = complex0.divide(0.0);
      complex0.I.acos();
      Complex complex2 = Complex.valueOf((-2824.89597));
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex2.ZERO.multiply(2657);
      complex4.pow(complex0);
      Complex complex5 = Complex.valueOf((-2824.89597));
      Complex complex6 = complex0.subtract(complex5);
      complex6.exp();
      complex3.NaN.toString();
      Complex complex7 = Complex.valueOf((-20.0), 0.0);
      Complex complex8 = complex3.ONE.pow(complex7);
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = complex8.I.cosh();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex4.add(complex11);
      complex3.add(0.0);
      complex12.I.reciprocal();
      complex11.NaN.nthRoot(2964);
      Complex complex13 = complex3.exp();
      complex3.log();
      complex13.ONE.tan();
      Complex complex14 = complex13.tanh();
      complex11.getField();
      complex5.pow(1752.26855739);
      complex14.multiply(2964);
      complex14.getReal();
      complex9.getReal();
      complex1.subtract(complex10);
      complex12.reciprocal();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.I.multiply(1801);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.702271091849158E-8), 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.divide((-1.1555923403029638E-8));
      complex1.I.divide((-1.1555923403029638E-8));
      complex0.ONE.createComplex(0.0, 1.0);
      Complex complex3 = complex1.ZERO.cosh();
      complex1.NaN.nthRoot(1);
      Complex complex4 = complex0.pow((-3.702271091849158E-8));
      Complex complex5 = Complex.valueOf((double) 1, 2516.66);
      complex1.sqrt1z();
      complex0.subtract(2384.924728469427);
      complex4.abs();
      complex5.getImaginary();
      Complex complex6 = complex5.atan();
      complex6.multiply(1);
      Complex complex7 = Complex.valueOf((-3.702271091849158E-8), 1.0);
      Complex complex8 = complex2.negate();
      complex8.ONE.sqrt1z();
      Complex complex9 = complex7.sin();
      complex9.ONE.tanh();
      complex3.getArgument();
      Complex complex10 = complex7.createComplex(0.0, 1123.0);
      complex10.I.pow(complex6);
      complex6.createComplex(0.0, 0.0);
      complex5.sinh();
      complex10.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2544.26), 3319.168316);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.NaN.tan();
      complex1.NaN.toString();
      Complex complex3 = complex0.INF.sqrt1z();
      complex3.I.toString();
      Complex complex4 = complex3.ZERO.atan();
      complex4.NaN.toString();
      Complex complex5 = complex3.I.sqrt();
      complex3.ONE.conjugate();
      complex3.createComplex((-1180.03402694902), (-838.103));
      complex0.isInfinite();
      Complex complex6 = complex4.tan();
      complex4.NaN.readResolve();
      complex3.getField();
      complex4.getField();
      Complex complex7 = complex0.subtract(0.0);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex7.divide((-2544.26));
      Complex complex10 = complex9.I.tan();
      complex10.createComplex((-2544.26), (-8.254443919468538E-9));
      complex5.getField();
      complex8.isNaN();
      complex8.ONE.sin();
      Complex complex11 = complex8.sqrt1z();
      complex11.I.divide(8.378574405736031E-247);
      complex11.INF.add(complex5);
      Complex complex12 = complex2.pow(0.0);
      complex6.readResolve();
      Complex complex13 = complex12.subtract((-1.957497997726303E-8));
      complex13.divide(8.378574405736031E-247);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(837.4849422868);
      Complex complex1 = complex0.ZERO.divide(837.4849422868);
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.ONE.atan();
      complex3.getArgument();
      Complex.valueOf((-2112.999088966653));
      complex0.getField();
      Complex complex4 = complex2.exp();
      complex0.getImaginary();
      complex4.I.sinh();
      complex1.getReal();
      Complex complex5 = complex4.cosh();
      complex5.getImaginary();
      complex0.getReal();
      Complex.valueOf(2.0862243734177337E-306);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      complex1.subtract((-930.0));
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.ZERO.multiply(complex1);
      Complex complex5 = complex4.NaN.pow(complex2);
      Complex complex6 = complex1.NaN.multiply(complex3);
      complex6.ZERO.subtract(49.1337374);
      complex3.ZERO.createComplex((-2972.277703751613), (-2972.277703751613));
      complex6.cosh();
      complex0.abs();
      complex1.tan();
      Complex complex7 = complex0.tanh();
      complex7.ONE.acos();
      complex3.divide(complex5);
      complex5.abs();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex2.ZERO.log();
      complex2.ONE.abs();
      Complex complex3 = complex2.add(0.0);
      complex3.I.getField();
      Complex complex4 = Complex.INF;
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      complex0.abs();
      int int0 = (-1);
      try { 
        complex4.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-3248.0269), 5.5846006716348844E-8);
      Complex complex1 = Complex.valueOf(1347.1);
      complex0.ZERO.getField();
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.divide(1347.1);
      complex2.cos();
      Complex.valueOf(1347.1, 5.5846006716348844E-8);
      Complex complex3 = complex0.negate();
      complex3.INF.add(1347.1);
      try { 
        complex1.nthRoot((-2170));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,170
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.createComplex(0.0, 356.6436);
      complex0.equals(complex1);
      complex1.ONE.divide(0.0);
      Complex complex3 = complex1.divide((-4081.0));
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex2.pow(complex1);
      complex5.NaN.tan();
      complex4.I.tan();
      int int0 = 0;
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-1569.1163286710023), (-2370.2053849091926));
      Complex.valueOf((-1569.1163286710023));
      complex0.INF.divide(0.0);
      Complex complex1 = complex0.add(510.7);
      complex1.pow((-2919.545534));
      complex1.ONE.createComplex((-1.2023077889892748E196), (-1.2023077889892748E196));
      Complex complex2 = complex0.pow((-2370.2053849091926));
      complex2.I.pow((-1569.1163286710023));
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.add((-2919.545534));
      complex4.isNaN();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-2846.6408));
      complex0.NaN.readResolve();
      Complex complex1 = complex0.I.createComplex(0.0, (-2846.6408));
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex3.I.add((-2846.6408));
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.ZERO.log();
      complex7.ONE.tanh();
      Complex complex8 = complex4.ONE.multiply(512);
      complex8.abs();
      complex8.NaN.getArgument();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.NaN.negate();
      Complex.valueOf(0.0, (double) 512);
      Complex complex11 = complex9.NaN.asin();
      complex11.NaN.getArgument();
      complex11.INF.getField();
      complex9.isInfinite();
      complex4.abs();
      Complex complex12 = complex9.ONE.pow((-2846.6408));
      complex12.ZERO.multiply(complex3);
      complex4.getField();
      complex5.ONE.cos();
      complex3.readResolve();
      complex1.reciprocal();
      complex9.acos();
      complex2.pow(complex5);
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex2.I.atan();
      complex4.ZERO.log();
      Complex complex5 = complex4.I.exp();
      complex2.ONE.tanh();
      Complex complex6 = complex0.subtract(complex2);
      complex6.NaN.asin();
      complex6.NaN.acos();
      complex0.createComplex(759.429322302, 759.429322302);
      complex0.sin();
      Complex complex7 = complex4.add(complex0);
      Complex complex8 = complex4.acos();
      Complex complex9 = complex0.pow(complex5);
      complex9.INF.hashCode();
      complex9.ONE.asin();
      Complex complex10 = Complex.valueOf(759.429322302);
      complex3.toString();
      complex8.atan();
      complex8.getArgument();
      complex7.divide(complex3);
      Complex complex11 = complex0.exp();
      complex11.NaN.subtract(Double.NaN);
      complex10.pow(Double.NaN);
      complex7.exp();
      Complex.valueOf(759.429322302, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex1.ZERO.atan();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex2.ONE.multiply(0.0);
      Complex complex5 = complex1.NaN.tanh();
      Complex complex6 = complex5.ONE.multiply((-2.011072593789072E-7));
      complex1.getReal();
      complex0.ZERO.getArgument();
      complex0.hashCode();
      Complex complex7 = complex0.log();
      Complex complex8 = complex1.sin();
      complex7.NaN.multiply(0.0);
      complex1.toString();
      Complex complex9 = complex7.exp();
      complex9.ZERO.sinh();
      complex9.subtract(complex8);
      complex3.conjugate();
      complex2.reciprocal();
      Object object0 = complex2.readResolve();
      complex6.equals(object0);
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(311.42744997926565, 311.42744997926565);
      complex0.abs();
      complex0.ONE.negate();
      Complex complex1 = complex0.cosh();
      complex0.log();
      complex1.toString();
      complex0.getReal();
      complex1.tanh();
      complex1.tan();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3280.284993181168), (-3280.284993181168));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.cos();
      complex2.getArgument();
      Complex complex5 = complex0.INF.divide((-3298.0));
      Complex complex6 = complex0.sin();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.asin();
      complex8.NaN.add(complex5);
      complex7.NaN.subtract(complex4);
      complex5.ZERO.multiply((-3298.0));
      complex7.ONE.divide((-3298.0));
      Complex complex9 = complex6.createComplex((-3280.284993181168), (-3298.0));
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex10.I.multiply((-3298.0));
      complex11.ZERO.readResolve();
      Complex complex12 = complex9.NaN.conjugate();
      complex12.ZERO.pow(4462.381828);
      complex2.isNaN();
      complex9.abs();
      complex0.isInfinite();
      complex5.hashCode();
      complex0.multiply(complex7);
      complex11.exp();
      complex3.sqrt();
      Complex.valueOf(0.0, 0.7855505659465846);
      complex12.exp();
      complex12.acos();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1204.878259379));
      Complex complex1 = complex0.NaN.acos();
      complex1.ZERO.log();
      Complex.valueOf((-1204.878259379));
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.ZERO.acos();
      complex3.NaN.readResolve();
      complex0.I.sinh();
      Complex complex4 = complex2.ONE.sin();
      complex0.getArgument();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex3.log();
      complex6.I.atan();
      Complex complex7 = complex5.ZERO.tanh();
      complex0.isInfinite();
      complex3.getReal();
      complex0.createComplex((-6.339226165697), (-6.339226165697));
      Complex complex8 = complex5.acos();
      Complex complex9 = complex8.ONE.conjugate();
      complex3.hashCode();
      complex4.NaN.tanh();
      complex8.INF.log();
      complex3.I.sin();
      Complex complex10 = complex7.tan();
      complex10.INF.multiply(142);
      Complex complex11 = complex4.cosh();
      complex11.isNaN();
      complex9.divide(complex1);
      complex8.subtract(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex(722.73167513743, 722.73167513743);
      complex1.NaN.add(complex0);
      Complex complex2 = complex0.log();
      complex2.ONE.reciprocal();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.NaN.tan();
      Complex complex4 = complex2.INF.pow(complex0);
      Complex complex5 = complex4.ZERO.acos();
      complex5.sinh();
      complex4.cosh();
      Complex complex6 = complex0.createComplex(0.0, 0.0);
      Complex complex7 = complex0.sinh();
      complex6.pow(0.0);
      complex7.getArgument();
      complex1.nthRoot(1128);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.cosh();
      Complex complex1 = complex0.log();
      complex1.acos();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-123.84207198005));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.INF.hashCode();
      Complex complex3 = complex0.multiply((-123.84207198005));
      Complex complex4 = complex0.log();
      Complex complex5 = complex3.ONE.atan();
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      
      Complex complex6 = Complex.valueOf((-123.84207198005));
      Complex complex7 = complex3.NaN.cos();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex3.tan();
      List<Complex> list0 = complex0.nthRoot(443);
      assertEquals(443, list0.size());
      assertFalse(list0.contains(complex7));
      
      Complex complex10 = complex9.divide(complex8);
      complex10.NaN.sqrt1z();
      Complex complex11 = complex4.negate();
      Complex complex12 = complex10.acos();
      Complex complex13 = complex12.ZERO.exp();
      Complex complex14 = complex1.subtract(complex7);
      Complex complex15 = complex2.reciprocal();
      Complex complex16 = complex15.acos();
      complex6.isInfinite();
      complex15.multiply(complex8);
      Complex complex17 = complex4.divide(complex1);
      Complex complex18 = complex17.ONE.subtract(complex13);
      assertEquals((-19.414597319539585), complex17.getReal(), 0.01);
      
      complex11.subtract(complex3);
      Complex complex19 = complex10.acos();
      complex19.atan();
      Complex complex20 = Complex.ZERO;
      Complex complex21 = complex10.pow(complex20);
      assertNotSame(complex20, complex14);
      assertTrue(complex8.equals((Object)complex18));
      assertEquals((-0.4187236250391907), complex9.getReal(), 0.01);
      assertSame(complex21, complex16);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      double double0 = (-5.0605);
      Complex complex0 = Complex.valueOf((-5.0605), (-5.0605));
      int int0 = 0;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex1.NaN.multiply(0.08692999184131622);
      Complex complex3 = complex1.NaN.multiply((-5.0605));
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex4.ONE.sqrt1z();
      complex5.ZERO.getArgument();
      complex5.NaN.readResolve();
      Complex.valueOf(0.0);
      Complex complex6 = complex4.ONE.conjugate();
      Complex complex7 = complex6.asin();
      complex7.I.exp();
      Complex complex8 = complex3.NaN.pow(complex2);
      Complex complex9 = complex0.negate();
      Complex complex10 = complex0.asin();
      complex10.I.pow((-5.0605));
      complex8.readResolve();
      complex1.negate();
      Complex complex11 = complex1.exp();
      complex9.INF.multiply(complex5);
      complex11.ZERO.abs();
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
