/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 16:53:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2.5938024520874023);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(142.2607997, (-20.0));
      Complex complex3 = complex0.multiply((-940.3));
      complex3.divide(complex1);
      complex0.nthRoot(1211);
      complex2.tan();
      Complex.valueOf((-291.152725), (-940.3));
      try { 
        complex0.nthRoot((-1177));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,177
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2423.1814, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(2423.1814, 548.0);
      complex2.sqrt();
      complex2.multiply(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.tan();
      complex2.tan();
      complex2.abs();
      complex3.readResolve();
      Complex complex5 = Complex.ZERO;
      complex1.multiply(complex5);
      complex5.acos();
      complex4.pow(Double.POSITIVE_INFINITY);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex0.conjugate();
      Complex complex2 = complex1.pow(851.694261280133);
      complex2.sqrt1z();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = new Complex(0.4855077862739563, Double.POSITIVE_INFINITY);
      complex3.sqrt();
      Complex complex5 = Complex.ONE;
      complex4.reciprocal();
      complex0.tan();
      Complex complex6 = complex4.cosh();
      complex6.sqrt();
      Complex complex7 = complex3.tanh();
      complex2.getField();
      complex7.multiply(1425);
      complex4.tan();
      Complex.valueOf((double) 322);
      complex4.multiply(1425);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.subtract(3975.195748440061);
      Complex complex5 = Complex.ZERO;
      complex4.getArgument();
      Complex complex6 = complex4.cosh();
      complex6.ZERO.readResolve();
      Complex complex7 = Complex.valueOf(0.7853981633974483, (-1187.8367045276027));
      Complex complex8 = complex7.exp();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex7.cos();
      Complex complex11 = new Complex((-1187.8367045276027), Double.POSITIVE_INFINITY);
      complex2.sqrt();
      Complex complex12 = Complex.ONE;
      complex12.reciprocal();
      complex1.tan();
      Complex complex13 = new Complex((-1327.1));
      complex13.cosh();
      complex10.sqrt();
      complex0.tanh();
      complex8.getField();
      complex9.multiply(1201);
      complex6.tan();
      complex10.sqrt();
      Complex complex14 = new Complex(3975.195748440061, 2.3602423155368473E-50);
      complex14.exp();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1794);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.INF;
      complex1.subtract(1914.2);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = new Complex(20.0);
      complex4.getArgument();
      Complex complex5 = complex2.cosh();
      Complex complex6 = new Complex(20.0, (-2919.0933986));
      Complex.valueOf(0.7615941559557649, 3437.42577);
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex3.add(20.0);
      Complex complex10 = complex8.sqrt();
      Complex complex11 = Complex.ONE;
      complex5.reciprocal();
      Complex complex12 = Complex.I;
      complex12.tan();
      Complex complex13 = complex7.cosh();
      complex10.sqrt();
      complex9.tanh();
      complex13.getField();
      complex7.nthRoot(2877);
      complex7.pow((-2099.86302635551));
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex1.INF.asin();
      complex1.asin();
      complex1.cosh();
      Complex complex2 = Complex.ONE;
      complex2.multiply(Double.NaN);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3371.86517479671, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.multiply(17);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.acos();
      complex3.ONE.cosh();
      Complex complex4 = complex0.divide((-1754.95228142));
      Complex complex5 = complex4.I.add(complex2);
      Complex complex6 = complex5.INF.multiply((double) 17);
      Complex complex7 = complex6.NaN.negate();
      complex7.NaN.cosh();
      Complex complex8 = complex4.INF.divide(Double.POSITIVE_INFINITY);
      complex8.INF.abs();
      Complex complex9 = Complex.valueOf((-2058.47), (-4090.0));
      Complex complex10 = complex2.subtract(complex9);
      Complex complex11 = complex2.subtract(complex5);
      complex1.NaN.hashCode();
      complex6.multiply(5066.563472382);
      Complex complex12 = complex9.sqrt1z();
      complex2.toString();
      Complex complex13 = complex12.multiply(complex0);
      Complex complex14 = complex9.NaN.multiply(2310.843797);
      complex13.I.acos();
      Complex complex15 = complex10.subtract((-4090.0));
      complex15.divide(complex11);
      complex14.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
      complex2.pow(Double.NaN);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.createComplex((-949.025), (-949.025));
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.negate();
      complex0.INF.sqrt1z();
      complex1.nthRoot(1);
      complex6.atan();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.INF.sinh();
      double double0 = 1397.76211697;
      Complex complex3 = complex2.I.subtract(1397.76211697);
      int int0 = 613;
      complex3.I.nthRoot(613);
      complex3.ZERO.getArgument();
      complex3.I.log();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex0.nthRoot(1);
      complex0.cosh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.sqrt();
      Complex complex2 = complex0.divide(complex1);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-3000.6062115));
      Complex complex1 = complex0.pow((-3000.6062115));
      complex0.toString();
      Complex complex2 = complex1.sqrt1z();
      complex1.getArgument();
      Complex complex3 = complex1.createComplex(4028.638, 2.0699801445007324);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.add(0.0);
      Complex complex6 = new Complex(4028.638, (-3000.6062115));
      Complex complex7 = complex3.negate();
      complex6.nthRoot(1);
      Complex complex8 = complex7.cosh();
      complex5.atan();
      complex8.isInfinite();
      complex0.add(complex7);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.getArgument();
      complex0.cosh();
      double double0 = (-1224.0);
      Complex complex2 = Complex.valueOf((-1224.0), (-1224.0));
      Complex complex3 = complex2.exp();
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.getArgument();
      complex0.toString();
      Complex complex1 = new Complex((-248.0), Double.NaN);
      Complex complex2 = complex1.sqrt1z();
      complex1.getArgument();
      Complex complex3 = complex2.createComplex(2293.59, (-753.4131));
      Complex complex4 = Complex.ONE;
      complex4.add((-298.699263506));
      Complex complex5 = complex3.tan();
      complex5.negate();
      int int0 = 1;
      try { 
        complex4.nthRoot((-326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -326
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getArgument();
      Complex complex1 = Complex.valueOf((-298.699263506));
      complex0.NaN.subtract(complex1);
      complex0.nthRoot(1800);
      complex1.add(Double.NaN);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.31148624420166);
      complex0.INF.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.atan();
      complex2.INF.abs();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex3.getImaginary();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.pow((-4.9951475039444535));
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.divide(complex5);
      complex6.negate();
      complex7.multiply(complex1);
      Complex complex10 = complex2.pow((-1.4332909945803253E-16));
      complex9.toString();
      complex4.getArgument();
      complex10.acos();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.ONE.log();
      complex0.isNaN();
      complex0.abs();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex2.divide(complex0);
      complex4.multiply(complex3);
      Complex complex5 = Complex.valueOf(6.283185307179586, 20.0);
      Complex complex6 = complex1.subtract((-2750.2168202407));
      complex6.isNaN();
      complex5.isNaN();
      complex3.createComplex(0.0, 871.32459463);
      complex0.pow((-373.11479695124075));
      complex6.tanh();
      complex3.abs();
      complex5.tan();
      Complex.valueOf(0.0);
      Complex complex7 = Complex.ONE;
      complex7.reciprocal();
      complex4.log();
      complex3.add((-1533.3557));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-3780.0), 3244.05);
      Complex complex1 = complex0.multiply((-1647.525517));
      Complex complex2 = complex1.pow(3244.05);
      complex0.INF.atan();
      Complex complex3 = Complex.valueOf((-4509.1481108), (-1607.89793618286));
      Complex complex4 = complex3.I.multiply(Double.POSITIVE_INFINITY);
      complex3.tanh();
      complex0.negate();
      complex2.add((-9.036933434595339E-8));
      complex0.sin();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.exp();
      complex2.ONE.getField();
      complex1.I.add(1.5627006743114285E-7);
      Complex complex3 = complex1.ONE.createComplex(1.5627006743114285E-7, (-927.5659796514233));
      complex0.readResolve();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex3.multiply(complex4);
      Complex.valueOf(6.28287989314225E-92, (-38.0332));
      Complex complex6 = Complex.NaN;
      complex6.subtract((-38.0332));
      complex5.isNaN();
      complex4.isNaN();
      complex5.createComplex((-38.0332), 1684.1);
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.tanh();
      Complex.valueOf((-1.9256682968755803E-7));
      complex8.abs();
      complex2.readResolve();
      complex3.multiply(2144637088);
      Complex complex9 = Complex.ONE;
      complex8.add(complex4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-854.44984), (-854.44984));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.31148624420166);
      complex0.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.atan();
      complex2.INF.abs();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex3.INF.subtract(50744.04207438878);
      complex1.multiply(complex0);
      complex0.NaN.getArgument();
      Complex complex4 = complex0.cosh();
      complex4.exp();
      Complex complex5 = complex4.ONE.subtract(complex2);
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex5.cos();
      complex2.ZERO.sqrt();
      complex3.getReal();
      Complex complex8 = complex7.pow(complex5);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex4.multiply(complex9);
      Complex complex11 = complex8.conjugate();
      complex10.pow(complex4);
      complex11.equals(complex7);
      complex10.pow(1.0);
      complex6.readResolve();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.exp();
      complex2.ONE.getField();
      Complex complex3 = complex1.I.add(1.5627006743114285E-7);
      Complex complex4 = complex1.ONE.createComplex(1.5627006743114285E-7, (-928.0));
      Complex complex5 = (Complex)complex0.readResolve();
      Complex complex6 = complex5.subtract(3975.195748440061);
      Complex complex7 = complex6.multiply(complex2);
      complex6.getArgument();
      complex6.cosh();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.subtract(complex2);
      Complex complex10 = new Complex(3.141592653589793, (-1224.0));
      complex6.cos();
      complex7.add(50744.04207438878);
      complex6.sqrt();
      complex3.getReal();
      complex5.readResolve();
      complex7.reciprocal();
      complex5.tan();
      complex4.cosh();
      Complex complex11 = Complex.valueOf((-20.0), 2.3602423155368473E-50);
      complex9.sqrt();
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-447.0), 1497.9642811355216);
      Complex complex1 = complex0.createComplex((-119.050226845223), (-447.0));
      Complex complex2 = complex1.subtract((-119.050226845223));
      complex2.hashCode();
      Complex complex3 = complex2.divide((-447.0));
      complex3.I.reciprocal();
      complex2.add((-20.0));
      complex2.tan();
      Complex complex4 = new Complex(312.450531744092, 1497.9642811355216);
      complex4.negate();
      complex0.nthRoot(1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.cosh();
      Complex.valueOf(125.89909078744, 1461.8872845934247);
      complex2.sqrt();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(602.53225297, 0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.I.divide((-3172.4944551529493));
      complex2.NaN.cos();
      complex0.equals(complex1);
      complex0.ZERO.getField();
      complex0.getArgument();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.conjugate();
      complex1.pow(complex5);
      complex2.equals(complex3);
      Complex complex6 = Complex.valueOf(602.53225297, 602.53225297);
      complex6.pow(602.53225297);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.726036941135634E176, 5.726036941135634E176);
      complex0.NaN.getArgument();
      complex0.isInfinite();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex.valueOf(8.5783829741487, 2940.4181988);
      Complex complex3 = new Complex(5.726036941135634E176, 8.5783829741487);
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = complex5.NaN.conjugate();
      complex3.multiply((-2220.8030112981896));
      Complex complex7 = complex6.I.divide(complex4);
      Complex complex8 = complex3.INF.sqrt();
      complex8.toString();
      complex8.nthRoot(1697);
      complex8.I.multiply(5.726036941135634E176);
      Complex complex9 = complex0.multiply(complex3);
      Complex complex10 = complex3.subtract(complex4);
      Complex complex11 = complex10.ONE.sinh();
      complex2.atan();
      complex1.reciprocal();
      Complex complex12 = Complex.ONE;
      complex12.ONE.hashCode();
      complex11.multiply(complex12);
      complex10.cosh();
      complex5.reciprocal();
      complex9.exp();
      complex7.tanh();
      complex5.cosh();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.getArgument();
      Complex complex1 = Complex.valueOf((-298.699263506));
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex0.nthRoot(1800);
      complex2.add((-298.699263506));
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex(1.545539007875769E25);
      Complex complex3 = complex2.divide(2572.982505629);
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex((-1678.2854226144), 2.31148624420166);
      complex5.multiply(complex0);
      Complex.valueOf((-11.546214743125862), 2568.963);
      Complex complex6 = complex5.subtract(2046.654017279);
      complex2.isNaN();
      complex2.isNaN();
      complex2.createComplex((-11.546214743125862), 0.0);
      Complex complex7 = complex0.pow(2046.654017279);
      Complex complex8 = complex1.tanh();
      Complex.valueOf(2568.963);
      complex0.abs();
      complex7.getArgument();
      complex6.pow(complex8);
      complex5.multiply(complex0);
      complex7.conjugate();
      Complex complex9 = complex3.pow(complex5);
      complex0.equals(complex3);
      Complex complex10 = complex7.pow(0.0);
      complex9.readResolve();
      complex10.abs();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.cosh();
      complex3.pow(851.694261280133);
      complex3.ONE.toString();
      Complex complex4 = Complex.valueOf(0.0, (-753.4131));
      Complex complex5 = complex4.pow(complex2);
      complex0.sqrt();
      complex3.NaN.log();
      Complex complex6 = new Complex(1118.75);
      complex6.tan();
      Complex complex7 = Complex.ONE;
      complex7.pow(1118.75);
      Complex complex8 = Complex.INF;
      complex7.divide(complex8);
      complex5.negate();
      complex2.sin();
      complex7.multiply(complex2);
      complex3.pow(0.8414709848078965);
      // Undeclared exception!
      complex7.nthRoot(2146943427);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1615.437150043756));
      complex0.NaN.getArgument();
      Complex complex1 = new Complex(2.31148624420166);
      Complex complex2 = complex0.pow(complex1);
      complex2.ONE.sinh();
      complex0.toString();
      Complex complex3 = complex0.sinh();
      complex1.I.getArgument();
      complex0.add(1.6828820705413818);
      Complex complex4 = complex1.sinh();
      complex4.ONE.add(complex1);
      Complex complex5 = complex3.subtract(complex0);
      double double0 = 984.3;
      int int0 = (-2794);
      try { 
        complex5.NaN.nthRoot((-2794));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,794
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.436135220472006E-9), (-8.436135220472006E-9));
      complex0.readResolve();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-8.436135220472006E-9), (-8.436135220472006E-9));
      complex2.ZERO.hashCode();
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.I.divide(complex3);
      Complex complex6 = complex4.ONE.pow(complex2);
      complex3.NaN.subtract((-8.436135220472006E-9));
      Complex complex7 = complex0.atan();
      complex3.I.sin();
      Complex complex8 = complex7.subtract(0.5707147121429443);
      Complex complex9 = complex3.INF.multiply(complex2);
      Complex complex10 = complex9.NaN.atan();
      complex9.I.abs();
      complex3.readResolve();
      Complex complex11 = complex0.exp();
      complex11.NaN.subtract(102.6524484533);
      complex10.I.multiply(1.0);
      Complex complex12 = complex8.pow(1.7430980205535889);
      complex12.negate();
      complex3.sqrt();
      complex3.sqrt();
      complex8.log();
      complex10.cos();
      Complex.valueOf(767.9356561784, 767.9356561784);
      Complex.valueOf(9.708167499411502E-5);
      complex4.equals(complex6);
      complex2.sqrt();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.31148624420166);
      complex0.INF.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.atan();
      complex2.INF.abs();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex3.INF.subtract(50744.04207438878);
      Complex.valueOf(148.591293708653, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.subtract(148.591293708653);
      complex4.isNaN();
      complex4.isNaN();
      Complex complex5 = new Complex(0.0);
      complex5.createComplex((-1144.4), 50744.04207438878);
      Complex complex6 = complex2.pow(Double.POSITIVE_INFINITY);
      complex0.tanh();
      Complex complex7 = Complex.valueOf(0.0);
      complex5.abs();
      Complex complex8 = Complex.NaN;
      complex8.getArgument();
      Complex complex9 = Complex.NaN;
      complex9.pow(complex3);
      Complex complex10 = complex5.multiply(complex0);
      complex7.conjugate();
      Complex complex11 = Complex.I;
      complex11.pow(complex6);
      complex3.equals(complex10);
      complex1.pow(148.591293708653);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.acos();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex(1.545539007875769E25);
      Complex complex3 = complex2.divide(2572.982505629);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = Complex.valueOf(1272.486356284, 567632.29925161);
      complex6.getImaginary();
      Complex complex7 = complex6.pow(complex0);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = new Complex((-0.5403023058681398));
      Complex complex10 = complex9.tan();
      complex10.pow(75.05673218873598);
      Complex complex11 = Complex.INF;
      complex8.divide(complex11);
      Complex complex12 = complex10.negate();
      complex9.sin();
      Complex complex13 = complex2.multiply(complex5);
      Complex complex14 = complex12.pow((-2033.7));
      complex0.nthRoot(2283);
      complex7.toString();
      complex3.sin();
      complex4.readResolve();
      complex13.add(complex2);
      complex7.getArgument();
      Complex complex15 = Complex.I;
      Complex complex16 = complex15.acos();
      complex7.reciprocal();
      Complex complex17 = Complex.INF;
      complex16.add(complex17);
      complex14.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.exp();
      Complex complex4 = Complex.valueOf((-2477.9719452600657), 2549.197456643);
      Complex complex5 = complex1.asin();
      complex5.reciprocal();
      complex5.log();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.divide(complex4);
      complex5.log();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.add(complex3);
      complex7.getArgument();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.acos();
      complex9.reciprocal();
      Complex.valueOf(2549.197456643, 1733.6302326306925);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-2101.831229), 2.2872459081581904);
      complex0.INF.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.atan();
      complex2.INF.abs();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex3.INF.subtract(50748.27106973189);
      Complex complex4 = complex1.multiply(complex0);
      complex0.NaN.getArgument();
      Complex complex5 = complex0.cosh();
      Complex complex6 = new Complex(50748.27106973189);
      Complex complex7 = complex5.ONE.subtract(complex2);
      complex5.ONE.sinh();
      complex7.cos();
      Complex complex8 = complex6.add(0.0);
      complex8.ZERO.sqrt();
      complex3.getReal();
      complex0.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.reciprocal();
      complex0.tan();
      complex7.pow((-2.812076759125914E-8));
      complex1.getReal();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = complex0.sin();
      complex1.ZERO.atan();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex1.log();
      Complex complex5 = complex2.divide(complex1);
      complex3.ZERO.log();
      complex3.ZERO.add(complex5);
      complex4.getArgument();
      complex5.nthRoot(1248);
      Complex complex6 = complex1.sqrt1z();
      complex1.sqrt1z();
      complex3.exp();
      complex6.multiply((double) 1248);
      complex1.reciprocal();
      Complex complex7 = Complex.NaN;
      complex6.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.tanh();
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.divide((-697.6));
      Complex complex3 = Complex.ONE;
      complex3.exp();
      Complex complex4 = Complex.valueOf(0.42275158565596294, 1.0);
      complex0.asin();
      complex3.reciprocal();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.divide(complex4);
      Complex complex7 = complex2.log();
      complex7.add(complex1);
      complex6.ONE.multiply((-2657));
      complex7.getArgument();
      Complex.valueOf((-1607.75203179), 602.53225297);
      complex6.acos();
      Complex complex8 = Complex.NaN;
      complex8.reciprocal();
      Complex.valueOf(1198.1352, (-3726.223526416135));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.NaN.conjugate();
      complex2.asin();
      complex3.reciprocal();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.divide(complex3);
      complex3.log();
      Complex complex6 = Complex.valueOf((-3670.88010701), (-3670.88010701));
      complex6.sinh();
      Complex complex7 = complex4.cos();
      Complex complex8 = Complex.INF;
      complex8.add(0.0);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.sqrt();
      complex7.getReal();
      complex6.readResolve();
      Complex.valueOf(2612.7574);
      Complex complex10 = complex0.reciprocal();
      complex10.tan();
      complex5.pow((-3670.88010701));
      complex10.getReal();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex((-3.34847E-8), (-2263.9013562282075));
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.log();
      complex1.divide(complex2);
      Complex complex5 = new Complex((-3.34847E-8));
      complex3.add(complex4);
      complex4.getArgument();
      complex4.acos();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.exp();
      complex2.ONE.getField();
      Complex complex3 = complex1.I.add(1.5627006743114285E-7);
      Complex complex4 = complex1.ONE.createComplex(1.5627006743114285E-7, (-928.0));
      Complex complex5 = (Complex)complex0.readResolve();
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = Complex.valueOf((-1977.15), 0.0);
      complex7.ZERO.subtract((-928.0));
      complex5.isNaN();
      complex4.isNaN();
      complex6.getArgument();
      Complex complex8 = complex1.createComplex((-1977.15), 1.5627006743114285E-7);
      Complex complex9 = complex0.subtract(Double.NaN);
      complex8.hashCode();
      complex5.divide(1.5627006743114285E-7);
      Complex complex10 = complex9.add(2800.28235086663);
      Complex complex11 = Complex.ZERO;
      complex11.tan();
      Complex complex12 = complex5.negate();
      complex0.nthRoot(1);
      complex3.cosh();
      Complex.valueOf(0.0, Double.NaN);
      complex12.sqrt();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex0.multiply(0.0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.pow(851.694261280133);
      complex2.ONE.toString();
      Complex complex4 = Complex.valueOf(5.597398155472547E-178, (-753.4131));
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.createComplex(2.0, 3671.257871667066);
      Complex complex7 = complex2.tanh();
      Complex complex8 = Complex.valueOf(2552.0373947542043);
      complex0.abs();
      complex0.getArgument();
      Complex complex9 = complex0.pow(complex1);
      complex9.multiply(complex8);
      Complex complex10 = complex7.conjugate();
      complex6.pow(complex9);
      complex8.equals(complex1);
      Complex complex11 = Complex.INF;
      complex11.pow(9.854154449263851E-34);
      Complex complex12 = Complex.valueOf(2.0);
      complex11.nthRoot(37);
      complex10.sqrt1z();
      Complex complex13 = complex12.sqrt1z();
      complex13.exp();
      complex5.multiply(5.597398155472547E-178);
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1327.711);
      complex0.ONE.sin();
      complex0.readResolve();
      complex0.readResolve();
      Complex complex1 = complex0.tan();
      complex1.ZERO.createComplex(1327.711, 1327.711);
      complex1.exp();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = complex0.divide(Double.NaN);
      complex0.exp();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = Complex.valueOf(1202.24044850578);
      Complex complex4 = complex3.sinh();
      complex3.divide(complex4);
      complex2.cos();
      Complex.valueOf((-692.16669508416), 2121.806981513569);
      complex0.sinh();
      Complex complex5 = complex1.subtract(1.0218241650236027E13);
      complex0.abs();
      complex2.isNaN();
      complex5.asin();
      Complex complex6 = complex5.asin();
      complex5.acos();
      complex6.multiply(1944.0068753899);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(0.0);
      complex1.cosh();
      Complex.valueOf(2138.358, 3930.593671516075);
      Complex complex3 = Complex.valueOf(1.1913723189736356E-7);
      Complex complex4 = new Complex(20.0, 1227.56502461157);
      complex4.sinh();
      complex4.divide(complex2);
      complex3.cos();
      Complex complex5 = Complex.valueOf(20.0, 7.160277784358221E73);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex3.subtract(1.2027015686035156);
      complex5.abs();
      complex3.isNaN();
      Complex complex8 = complex7.asin();
      complex6.asin();
      complex5.acos();
      complex8.multiply(2138.358);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(2.0, 1129.428646876228);
      Complex complex3 = complex1.sqrt1z();
      complex1.getArgument();
      Complex complex4 = complex2.createComplex(1338.47923, (-2513.663));
      Complex complex5 = complex3.subtract(Double.POSITIVE_INFINITY);
      complex3.hashCode();
      complex5.add(3.141592653589793);
      complex3.tan();
      Complex complex6 = new Complex(1338.47923, 1886.300527211213);
      Complex complex7 = complex6.negate();
      complex7.nthRoot(1);
      complex4.cosh();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.5707963267948966);
      complex1.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex1.atan();
      complex1.readResolve();
      complex1.getArgument();
      Complex complex3 = Complex.valueOf(1.5707963267948966);
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1987.598), (-1987.598));
      complex1.getArgument();
      Complex complex2 = complex0.divide(1.3242245776666673E-186);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.ONE.multiply(complex3);
      complex4.INF.log();
      complex0.nthRoot(1104);
      complex0.multiply(2745);
      complex3.negate();
      complex3.acos();
      Complex complex5 = Complex.NaN;
      complex5.sin();
      Complex complex6 = Complex.valueOf(184.8268, (-2.356194490192345));
      Complex complex7 = complex2.multiply(complex6);
      complex6.divide(1.3242245776666673E-186);
      Complex complex8 = complex7.sqrt();
      Complex.valueOf(184.8268);
      complex6.getField();
      complex8.getReal();
      Complex complex9 = Complex.valueOf(2.9823766750869696E-50, 1482.2596733244632);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(1.4313985480348215, (-3928.1873916072));
      complex2.tan();
      Complex complex3 = Complex.INF;
      complex3.sin();
      complex1.subtract((-3950544.809604));
      complex3.getField();
      complex0.log();
      complex1.add((-1104.2853931));
      complex1.createComplex(7.552139802281006E-8, 5578.988647643957);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1987.598));
      complex1.getArgument();
      Complex.valueOf((-1987.598), 172.658143644605);
      complex1.asin();
      complex1.exp();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1987.598));
      complex1.getArgument();
      Complex complex2 = complex0.divide(1.3242245776666673E-186);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.ONE.multiply(complex3);
      complex0.nthRoot(1104);
      Complex complex5 = complex1.subtract((-20.0));
      complex0.hashCode();
      Complex complex6 = complex5.divide(3.141592653589793);
      complex0.add((-20.0));
      Complex complex7 = complex5.tan();
      complex4.negate();
      complex7.nthRoot(1);
      complex2.cosh();
      Complex.valueOf(1102.85487667, 2.1863350868225098);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex0.multiply(0.0);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.pow(851.694261280133);
      complex2.ONE.toString();
      Complex complex4 = Complex.valueOf(5.597398155472547E-178, (-753.4131));
      Complex complex5 = complex4.sqrt1z();
      complex5.ZERO.getArgument();
      Complex complex6 = complex0.createComplex(1338.47923, 1338.47923);
      complex6.INF.subtract(1338.47923);
      complex6.hashCode();
      Complex complex7 = complex0.divide((-753.4131));
      Complex complex8 = complex7.INF.add(0.0);
      complex8.INF.tan();
      Complex complex9 = complex1.negate();
      complex7.nthRoot(1);
      complex6.cosh();
      Complex.valueOf(851.694261280133, 1461.8872845934247);
      complex3.sqrt();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(4644.09);
      Complex complex1 = new Complex(4644.09);
      complex0.readResolve();
      Complex complex2 = complex0.subtract(1.0);
      complex1.reciprocal();
      Complex complex3 = Complex.valueOf(1119.2264210425, 4644.09);
      complex3.tan();
      complex2.pow((-1862.99207793195));
      complex0.getReal();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = complex0.sin();
      complex1.ZERO.atan();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex1.log();
      Complex complex5 = complex2.divide(complex1);
      complex3.ZERO.log();
      Complex complex6 = complex2.acos();
      complex0.sin();
      Complex complex7 = Complex.INF;
      complex4.multiply(complex7);
      complex6.divide(3.667348665023154E221);
      complex5.sqrt();
      Complex.valueOf(Double.NaN);
      Complex complex8 = new Complex(422.0);
      complex8.getField();
      complex5.getReal();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = Complex.valueOf(2.5660886764526367, 2.5660886764526367);
      Complex complex3 = Complex.I;
      complex1.isNaN();
      complex0.isNaN();
      complex0.createComplex(-0.0, 0.0);
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.valueOf((-20.0));
      complex3.abs();
      complex5.getArgument();
      Complex complex6 = complex1.pow(complex5);
      complex2.multiply(complex1);
      complex4.conjugate();
      complex6.pow(complex4);
      Complex complex7 = Complex.ONE;
      complex4.equals(complex7);
      Complex complex8 = complex4.pow((-2.3602423155368473E-50));
      complex8.ONE.subtract(-0.0);
      Complex complex9 = Complex.valueOf((-1.0012266624315223));
      complex1.nthRoot(1098);
      Complex complex10 = Complex.valueOf(3021.649053, 3.141592653589793);
      complex10.sqrt1z();
      Complex.valueOf(3021.649053, -0.0);
      complex4.sqrt1z();
      complex10.exp();
      complex9.multiply((-20.0));
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.cos();
      complex2.subtract((-561.0));
      Complex complex3 = complex1.atan();
      complex0.INF.nthRoot(384);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex3.cos();
      complex5.NaN.cos();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(1.0);
      Complex complex2 = complex1.I.multiply(157);
      complex2.I.cosh();
      complex1.ONE.getArgument();
      Complex complex3 = complex0.conjugate();
      complex3.I.negate();
      complex0.cos();
      complex0.pow(complex1);
      Complex complex4 = complex0.multiply((-18));
      complex4.tanh();
      Complex complex5 = complex1.tanh();
      complex0.reciprocal();
      Complex complex6 = complex5.reciprocal();
      Complex.valueOf(0.0, 0.0);
      complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.subtract(0.0);
      Complex complex1 = complex0.divide(0.0);
      complex1.NaN.getArgument();
      Complex complex2 = complex1.add(0.0);
      complex2.NaN.exp();
      complex2.nthRoot(1);
      Complex complex3 = complex0.asin();
      complex3.sqrt1z();
      complex1.reciprocal();
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      complex2.ZERO.exp();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex.valueOf((-692.16669508416));
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex0.divide(complex1);
      complex2.NaN.cos();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex6.sinh();
      Complex complex7 = complex5.ZERO.subtract(Double.POSITIVE_INFINITY);
      complex7.NaN.abs();
      complex5.isNaN();
      complex2.asin();
      complex7.asin();
      complex7.acos();
      complex4.multiply((-1719.857651667596));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.ONE.log();
      complex0.isNaN();
      complex0.abs();
      Complex complex2 = complex0.add(0.0);
      complex2.readResolve();
      Complex complex3 = complex0.ONE.multiply(complex2);
      complex1.getImaginary();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex1.tan();
      complex5.pow(0.0);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex5.divide(complex7);
      Complex complex9 = complex8.ZERO.negate();
      complex9.NaN.sin();
      complex0.multiply(complex6);
      complex5.pow(0.0);
      complex4.nthRoot(2283);
      complex6.ONE.toString();
      Complex complex10 = complex1.sin();
      complex10.readResolve();
      complex6.ONE.acos();
      complex0.sin();
      complex6.multiply(complex10);
      complex1.divide((double) 2283);
      complex4.sqrt();
      Complex.valueOf(0.0);
      complex3.getField();
      complex3.getReal();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1493.72094);
      complex0.ONE.asin();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.sin();
      complex2.I.subtract(1493.72094);
      complex0.I.getField();
      complex0.log();
      complex2.NaN.add(0.0);
      complex0.createComplex(1493.72094, 1493.72094);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-447.0), 1497.9642811355216);
      complex0.ONE.asin();
      complex0.exp();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex1.ZERO.acos();
      complex2.ONE.createComplex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex3.NaN.conjugate();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.getField();
      complex0.I.toString();
      Complex complex7 = complex3.I.reciprocal();
      complex4.NaN.getField();
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
      complex7.getArgument();
      complex0.log();
      complex3.ZERO.subtract(complex6);
      Complex complex8 = complex6.cos();
      complex4.divide(complex8);
      complex7.add(Double.POSITIVE_INFINITY);
      Complex.valueOf((-1.0), 0.0);
      Complex.valueOf(2003.1955);
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 2.5660886764526367);
      Complex complex1 = complex0.I.multiply(1);
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.ZERO.createComplex(1, (-1838.98817156));
      complex2.ZERO.atan();
      complex1.hashCode();
      complex1.NaN.abs();
      Complex complex3 = complex0.negate();
      complex3.abs();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex4.I.cosh();
      Complex complex7 = complex4.NaN.add((-20.0));
      Complex.valueOf((-5.759582672039005E-10));
      complex6.INF.pow(0.0);
      complex4.getArgument();
      complex6.INF.log();
      complex4.sqrt();
      complex1.atan();
      complex5.isInfinite();
      complex7.createComplex(1.0, 114.6);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3442378838418366E212, 3323.4850183551657);
      complex0.readResolve();
      complex0.NaN.abs();
      complex0.hashCode();
      complex0.isNaN();
      Complex complex1 = complex0.createComplex(Double.NaN, (-1.0));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.tan();
      complex0.ONE.asin();
      complex1.I.getArgument();
      complex2.abs();
      Complex complex4 = complex1.acos();
      complex2.INF.add(complex4);
      complex4.INF.nthRoot(1);
      complex4.abs();
      complex1.INF.negate();
      complex0.sin();
      complex0.NaN.multiply(1);
      complex0.hashCode();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex5.negate();
      complex7.divide(1.5707963267948966);
      complex7.divide((double) 1);
      complex6.getField();
      complex1.sqrt1z();
      complex0.acos();
      Complex complex8 = Complex.ONE;
      complex4.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(2110.964422865);
      Complex complex1 = new Complex(2110.964422865, 2110.964422865);
      Complex complex2 = Complex.valueOf(Double.NaN, 1.0);
      Complex complex3 = complex0.divide(complex1);
      double double0 = 2701.698314797;
      complex2.toString();
      int int0 = (-2816);
      try { 
        complex3.ONE.nthRoot((-2816));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,816
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-3780.0), 3244.05);
      Complex complex1 = complex0.multiply((-1647.525517));
      Complex complex2 = complex1.pow(3244.05);
      complex0.INF.atan();
      Complex complex3 = Complex.valueOf((-4509.1481108), (-1607.89793618286));
      complex3.tanh();
      complex0.negate();
      complex2.add((-9.036933434595339E-8));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.I.multiply(6.283185307179586);
      Complex complex3 = complex1.INF.divide(6.283185307179586);
      Complex complex4 = Complex.valueOf(0.14433705806732178);
      Complex complex5 = complex3.ZERO.multiply(975);
      Complex complex6 = complex3.NaN.acos();
      Complex complex7 = complex3.sin();
      complex3.ONE.getField();
      Complex complex8 = complex0.log();
      complex0.sin();
      complex8.INF.abs();
      Complex complex9 = Complex.valueOf(0.0, (-978.541686));
      Complex complex10 = complex9.INF.multiply(complex5);
      complex10.INF.readResolve();
      complex8.pow(complex9);
      complex8.readResolve();
      complex1.pow(complex2);
      complex4.getField();
      Complex complex11 = complex8.ZERO.exp();
      Complex complex12 = complex4.subtract(6.283185307179586);
      Complex complex13 = complex4.divide((-843.967397867));
      Complex complex14 = complex8.reciprocal();
      Complex complex15 = Complex.valueOf(0.0, (-843.967397867));
      complex15.divide((-1569.289716517553));
      complex14.divide(complex15);
      complex14.hashCode();
      complex10.getField();
      complex13.tan();
      complex6.reciprocal();
      complex7.add(complex2);
      complex11.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-3123));
      Complex complex2 = complex1.subtract(complex0);
      complex0.I.add(complex1);
      complex0.sin();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.sinh();
      complex1.ZERO.toString();
      complex1.readResolve();
      complex1.getField();
      Complex complex2 = complex0.NaN.sinh();
      complex1.hashCode();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.INF;
      complex4.I.toString();
      Complex complex5 = complex3.I.pow(complex4);
      complex0.abs();
      Complex complex6 = complex4.add(1.0);
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = complex6.INF.tanh();
      Complex complex9 = complex8.I.tan();
      Complex complex10 = complex9.divide(complex5);
      complex10.ONE.tanh();
      complex2.subtract(complex4);
      complex6.divide(1250.30286101832);
      complex3.log();
      complex2.hashCode();
      complex4.multiply(complex1);
      Complex complex11 = Complex.valueOf(1250.30286101832, 0.0);
      complex11.I.toString();
      complex11.pow(complex5);
      complex4.ZERO.readResolve();
      complex2.conjugate();
      complex4.nthRoot(1677);
      complex3.getReal();
      complex11.acos();
      complex11.log();
      complex7.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.pow((-1288.587));
      Complex complex3 = new Complex((-1288.587), (-1288.587));
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.divide(complex3);
      complex1.NaN.sqrt();
      complex5.INF.multiply((-207.73));
      complex2.equals(complex3);
      complex3.INF.divide(248.635);
      complex3.ZERO.asin();
      Complex complex6 = complex4.NaN.log();
      complex4.pow(0.0);
      Complex complex7 = Complex.valueOf(1281.6296580635353);
      complex7.ONE.nthRoot(292);
      complex2.subtract(complex3);
      complex1.isInfinite();
      Complex complex8 = complex6.divide(0.0);
      Complex complex9 = complex8.multiply(0);
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.asin();
      complex1.ZERO.readResolve();
      Complex complex5 = complex4.NaN.add(173.869);
      Complex complex6 = complex5.multiply(110);
      complex6.ONE.add(complex5);
      Complex complex7 = complex3.I.cosh();
      complex7.ZERO.nthRoot(1);
      Complex complex8 = complex2.ZERO.reciprocal();
      Complex complex9 = complex4.ZERO.divide(1.5085256099700928);
      Complex complex10 = complex2.pow(1.2433054447174072);
      complex1.nthRoot(37);
      complex2.multiply(complex9);
      complex3.subtract(complex0);
      complex7.divide(1.8861808782043154E64);
      complex8.sinh();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(208.179, 1.0);
      complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.I.subtract(complex0);
      complex2.getArgument();
      complex2.ZERO.multiply(complex3);
      complex2.ONE.multiply(1);
      Complex complex4 = complex0.pow((-0.7805888182389634));
      complex1.readResolve();
      complex2.multiply(complex4);
      complex1.negate();
      complex0.isInfinite();
      complex3.getArgument();
      complex0.tanh();
      complex3.equals("EXP_INT_TABLE_A");
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-3000.6062115));
      Complex complex1 = Complex.I;
      complex1.I.log();
      complex0.equals(complex1);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex0.getImaginary();
      Complex complex2 = complex1.createComplex(0.0, (-1862.245));
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex3.I.subtract(complex1);
      complex3.ONE.subtract(complex2);
      complex4.ONE.sinh();
      complex4.ONE.subtract(1103.7);
      complex3.add(0.0);
      complex1.hashCode();
      Complex complex5 = complex1.conjugate();
      complex1.hashCode();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex6.add(0.0);
      complex7.ONE.getField();
      complex7.NaN.acos();
      complex5.subtract(complex7);
      Complex complex8 = Complex.valueOf((-4070.902289102));
      complex1.add(complex8);
      Complex.valueOf(198.429);
      complex5.exp();
      complex5.createComplex(1103.7, 0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(405.4504825289);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex2.ONE.readResolve();
      Complex complex3 = complex0.divide(complex2);
      complex3.ONE.subtract(complex0);
      complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      complex0.ONE.getField();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1198.7760281418446));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.sqrt1z();
      complex1.log();
      Complex complex3 = complex1.ZERO.sinh();
      complex1.ONE.getArgument();
      Complex complex4 = complex2.I.sinh();
      Complex complex5 = complex4.INF.pow((-1035.003));
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.ONE.tan();
      complex4.tan();
      Complex complex8 = complex4.multiply(complex5);
      Complex complex9 = complex8.sinh();
      complex9.log();
      complex9.cos();
      Complex complex10 = Complex.valueOf((-1198.7760281418446));
      complex2.divide(complex10);
      complex9.hashCode();
      complex4.add(complex2);
      complex7.tan();
      complex3.createComplex((-1198.7760281418446), 2.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double double0 = 0.6369074583053589;
      Complex complex0 = new Complex(0.6369074583053589);
      complex0.NaN.readResolve();
      Complex complex1 = null;
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(557.9686681011368, 2.0);
      complex0.ONE.toString();
      complex0.isInfinite();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.asin();
      complex1.I.tanh();
      complex2.ONE.multiply(5490);
      Complex complex3 = complex0.sqrt1z();
      complex3.ONE.conjugate();
      complex2.atan();
      Complex.valueOf(557.9686681011368);
      Complex complex4 = complex1.ONE.log();
      complex4.ONE.conjugate();
      Complex complex5 = complex0.createComplex((-1532.1917), (-2106.52027591));
      // Undeclared exception!
      complex5.ZERO.nthRoot(5490);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.31148624420166);
      complex0.INF.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.atan();
      complex2.INF.abs();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex3.INF.subtract(50744.04207438878);
      Complex complex4 = complex1.multiply(complex0);
      complex0.NaN.getArgument();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.ONE.subtract(complex2);
      complex5.ONE.sinh();
      complex7.cos();
      Complex complex8 = complex6.add(0.0);
      complex8.ZERO.sqrt();
      complex3.getReal();
      complex0.readResolve();
      complex3.subtract(50744.04207438878);
      complex8.reciprocal();
      complex0.tan();
      complex7.pow((-2.812076759125914E-8));
      complex1.getReal();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1987.598));
      complex1.getArgument();
      Complex complex2 = complex0.divide(1.3242245776666673E-186);
      Complex complex3 = complex2.NaN.tanh();
      complex2.ONE.multiply(complex3);
      complex0.nthRoot(1104);
      complex0.multiply(2745);
      Complex complex4 = complex3.negate();
      complex4.ZERO.pow((-1776.15536841));
      complex4.NaN.acos();
      complex2.sin();
      complex1.readResolve();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      complex0.I.toString();
      complex0.sqrt();
      complex0.isNaN();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6441128253936768, 0.6441128253936768);
      Complex complex1 = Complex.valueOf((-4049.672), (-4049.672));
      Complex complex2 = complex0.multiply(4596.095601356144);
      Complex complex3 = complex2.add(complex1);
      complex3.INF.multiply(complex2);
      Complex complex4 = complex1.subtract((-4049.672));
      complex3.NaN.reciprocal();
      complex4.INF.getField();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex1.add(complex0);
      complex0.subtract(complex4);
      Complex complex7 = complex5.INF.conjugate();
      complex3.nthRoot(774);
      complex0.getField();
      Complex complex8 = complex5.add((-4049.672));
      complex8.cosh();
      complex6.multiply(4596.095601356144);
      complex7.pow((-1033.906804));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex0.INF.sinh();
      Complex complex3 = complex2.ZERO.cosh();
      complex3.I.negate();
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.NaN.tan();
      complex3.ZERO.multiply(complex6);
      complex5.INF.tan();
      Complex complex7 = complex6.I.cosh();
      double double0 = (-963.929092164);
      complex7.divide((-963.929092164));
      int int0 = (-287);
      try { 
        complex4.nthRoot((-287));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -287
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.abs();
      Complex complex1 = complex0.sin();
      complex1.ZERO.atan();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex1.log();
      Complex complex5 = complex2.divide(complex1);
      complex3.ZERO.log();
      complex3.ZERO.add(complex5);
      complex4.getArgument();
      complex3.acos();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      complex1.INF.conjugate();
      try { 
        complex0.nthRoot((-1247));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,247
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.ZERO.atan();
      Complex complex2 = complex0.tanh();
      double double0 = 2298.300672;
      Complex complex3 = new Complex(2298.300672);
      Complex complex4 = complex1.ONE.multiply(complex3);
      complex2.ZERO.subtract(complex4);
      complex0.pow(complex1);
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(327.53281);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.cos();
      complex0.abs();
      complex1.INF.getField();
      complex2.I.nthRoot(1);
      Complex complex3 = complex1.multiply(1031);
      Complex complex4 = Complex.ZERO;
      Complex.valueOf(0.0);
      complex3.NaN.pow(complex4);
      complex3.toString();
      complex2.INF.sqrt1z();
      Complex complex5 = complex2.pow(complex0);
      complex3.negate();
      complex1.pow(327.53281);
      complex5.atan();
      Complex complex6 = Complex.valueOf(1.408559707497606E293);
      complex6.asin();
      Complex complex7 = complex1.reciprocal();
      complex7.I.cos();
      complex2.readResolve();
      complex5.acos();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex0.tanh();
      complex2.I.cos();
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = complex4.I.atan();
      complex0.getField();
      complex2.add(0.0);
      complex5.tan();
      Complex complex6 = complex3.add(complex2);
      Complex.valueOf(256.0993815083517);
      complex6.sqrt();
      complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(602.53225297, 0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.atan();
      complex1.ZERO.readResolve();
      complex1.ONE.getArgument();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.exp();
      complex2.ONE.getField();
      Complex complex3 = complex1.I.add(1.5627006743114285E-7);
      Complex complex4 = complex1.ONE.createComplex(1.5627006743114285E-7, (-928.0));
      complex0.readResolve();
      Complex complex5 = complex0.divide(complex2);
      complex2.multiply(complex1);
      Complex complex6 = Complex.valueOf((-1977.15), 0.0);
      Complex complex7 = complex6.ZERO.subtract((-928.0));
      complex5.isNaN();
      complex5.isNaN();
      Complex complex8 = complex1.createComplex(0.0, 0.0);
      Complex complex9 = complex2.tanh();
      Complex complex10 = Complex.valueOf(0.0);
      complex0.abs();
      complex10.getArgument();
      complex8.NaN.pow(complex3);
      Complex complex11 = complex5.multiply(complex9);
      Complex complex12 = complex11.conjugate();
      complex3.pow(complex11);
      complex8.equals(complex7);
      complex12.ONE.pow(0.0);
      Complex.valueOf(9.854154449263851E-34);
      complex12.nthRoot(545);
      complex9.sqrt1z();
      complex10.sqrt1z();
      complex4.exp();
      complex9.multiply((double) 545);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.multiply((-1745));
      complex2.toString();
      complex0.nthRoot(2446);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.I.pow(complex0);
      complex4.NaN.atan();
      complex3.ONE.hashCode();
      complex3.ZERO.divide((double) (-1745));
      Complex complex5 = complex3.sqrt();
      complex5.pow((-300.980138616763));
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(1328);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = Complex.valueOf(3625.752284, 1359.4043133255407);
      complex3.NaN.abs();
      Complex complex4 = complex0.ONE.log();
      complex1.NaN.toString();
      Complex complex5 = complex4.I.exp();
      complex5.ZERO.sin();
      complex1.INF.getArgument();
      complex4.I.sqrt1z();
      complex0.atan();
      Complex complex6 = complex4.cos();
      complex6.NaN.multiply(complex2);
      Complex.valueOf(1359.4043133255407);
      Complex complex7 = complex0.cos();
      complex2.readResolve();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3041.734502184854));
      Complex complex1 = complex0.ZERO.pow((-3041.734502184854));
      complex1.ZERO.sinh();
      Complex complex2 = new Complex((-1453.44433));
      Complex complex3 = complex0.NaN.divide(complex2);
      complex0.ZERO.getField();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.ONE.multiply(1);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      complex0.readResolve();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex7.NaN.subtract(complex3);
      complex6.ONE.getField();
      Complex complex10 = complex6.I.sqrt1z();
      complex10.NaN.hashCode();
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex4.pow(complex6);
      complex11.INF.multiply(complex6);
      complex0.I.sin();
      Complex complex12 = complex7.ZERO.sinh();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.equals((Object)complex5));
      
      complex2.isInfinite();
      complex1.getField();
      complex4.hashCode();
      Complex complex13 = complex11.asin();
      complex9.I.getField();
      Complex complex14 = complex6.add(complex13);
      complex14.INF.tan();
      assertSame(complex14, complex13);
      
      complex4.subtract(complex9);
      complex7.getField();
      Complex complex15 = complex0.createComplex(Double.NaN, (-1453.44433));
      Complex complex16 = complex15.negate();
      assertTrue(complex16.equals((Object)complex1));
      assertNotSame(complex16, complex1);
      
      double double0 = complex8.abs();
      assertEquals(0.9999999999999997, double0, 0.01);
      assertEquals(0.9999999999999997, complex8.getImaginary(), 0.01);
      assertTrue(complex6.equals((Object)complex9));
      assertNotSame(complex6, complex16);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.log();
      assertFalse(complex2.isNaN());
      
      complex1.hashCode();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = Complex.valueOf(2671.1, (-2667.40321));
      Complex complex7 = complex3.pow(0.0);
      Complex complex8 = complex7.acos();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      complex1.multiply(complex0);
      Complex complex9 = complex7.tan();
      Complex complex10 = complex9.INF.add(complex6);
      Complex complex11 = complex10.conjugate();
      assertEquals(1.557407724654902, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      
      Complex complex12 = complex5.conjugate();
      assertEquals(0.7615941559557649, complex12.getReal(), 0.01);
      
      complex4.getImaginary();
      complex1.sin();
      Complex complex13 = complex4.sqrt();
      Complex complex14 = complex1.subtract(complex13);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      assertEquals((-0.6487212707001282), complex14.getReal(), 0.01);
  }
}
