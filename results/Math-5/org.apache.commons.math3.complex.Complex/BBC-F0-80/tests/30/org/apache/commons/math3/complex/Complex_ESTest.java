/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:13:06 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-1.0), 4.392983574030969E-147);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ONE.reciprocal();
      complex3.INF.abs();
      complex0.NaN.subtract(4.392983574030969E-147);
      Complex complex4 = new Complex((-840.0), (-840.0));
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = complex6.cos();
      complex2.nthRoot(1099);
      complex5.tan();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex((-392.84649871340133), 3111.99395);
      Complex complex1 = new Complex(3730.25, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3.0769773182721087E-113, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-5116.144417974646), Double.POSITIVE_INFINITY);
      complex1.tan();
      complex1.multiply((-5116.144417974646));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.pow(5905.374649367);
      complex3.cosh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-5168.237), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex((-7.836327226971707E174), (-1147.291301));
      complex0.tan();
      complex1.sqrt1z();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.negate();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(2865.1029336578754, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(1.552583321178453E-10, 1.552583321178453E-10);
      Complex complex2 = complex1.acos();
      Complex complex3 = new Complex(7.89187408872514E284);
      Complex complex4 = Complex.ONE;
      Complex.valueOf(1063.122507209);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.createComplex(3739.35902875, 3739.35902875);
      Complex complex1 = new Complex(3739.35902875, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(3739.35902875, 3739.35902875);
      complex4.ZERO.sqrt();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.NaN;
      Complex.valueOf(3739.35902875);
      complex2.pow((-1254.286));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-996375.48841956), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.7544995191195304E182));
      complex0.subtract(complex1);
      Complex complex2 = Complex.NaN;
      complex2.reciprocal();
      Complex complex3 = new Complex(0.5893045663833618, (-1.7544995191195304E182));
      complex3.tan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1.4142135623730951, (-3446.3553460586));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex4.INF.pow(complex1);
      complex2.getField();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.I.atan();
      complex7.I.add(complex3);
      complex1.add(complex2);
      complex6.tan();
      Complex complex8 = complex0.multiply(1064);
      Complex complex9 = new Complex(348.79029636483);
      complex8.multiply(complex9);
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.INF.createComplex(996375.4884195606, 3176.930923);
      complex0.readResolve();
      complex5.cosh();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
      complex2.abs();
      Complex complex3 = complex1.multiply(0);
      complex3.ZERO.conjugate();
      Complex complex4 = Complex.valueOf((-1.0), (double) 0);
      complex4.equals(complex3);
      complex1.tan();
      Complex complex5 = complex0.divide(2476.9425027558104);
      complex5.pow((-981.427063));
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5544.1645276, 5544.1645276);
      Complex complex1 = complex0.subtract(5544.1645276);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-3773.678126764389));
      complex0.I.cos();
      Complex complex1 = Complex.INF;
      complex1.subtract(Double.NaN);
      Complex.valueOf(4.995552216100365E-193, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1978.07694847, 1978.07694847);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex3.sqrt1z();
      complex1.add(complex4);
      Object object0 = new Object();
      Complex complex6 = complex5.divide(1978.07694847);
      complex3.log();
      complex4.getField();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-236.145864745), (-236.145864745));
      complex0.I.multiply((-236.145864745));
      Complex complex1 = complex0.ONE.multiply((-236.145864745));
      complex0.getField();
      Complex complex2 = complex0.ZERO.add((-236.145864745));
      Complex complex3 = complex0.add((-236.145864745));
      complex3.add(complex1);
      Complex complex4 = complex0.pow(complex2);
      complex4.createComplex(737.058, 8.629601183418734);
      complex2.NaN.hashCode();
      complex2.readResolve();
      complex2.nthRoot(1193);
      Complex complex5 = Complex.valueOf(50.1801248455);
      complex5.ONE.multiply(0);
      Complex complex6 = complex5.divide(complex2);
      complex6.I.conjugate();
      complex6.ONE.toString();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(998.1866);
      Complex complex1 = complex0.createComplex((-996375.48841956), (-996375.48841956));
      Complex complex2 = new Complex((-20.0), 3185.2534);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.valueOf(703.741382559, 995566.5235972896);
      complex7.sin();
      Complex complex8 = Complex.ONE;
      complex8.subtract(complex5);
      complex1.add(complex8);
      complex4.createComplex(Double.NaN, (-3564.9100428));
      complex0.reciprocal();
      complex2.tan();
      complex6.multiply(4196.902);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2.0);
      complex1.acos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.sqrt1z();
      complex3.sin();
      Complex complex4 = complex0.subtract(complex1);
      complex0.add(complex4);
      complex2.I.pow(complex3);
      Complex complex5 = complex2.createComplex(2.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.reciprocal();
      complex6.INF.hashCode();
      complex4.tan();
      Complex complex7 = Complex.valueOf(1.0);
      complex7.multiply(2.0);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1315.983), (-1315.983));
      Complex complex1 = complex0.acos();
      complex1.abs();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = Complex.valueOf(1.619992971420288);
      Complex complex4 = complex0.cosh();
      Complex.valueOf((-1315.983), 1.619992971420288);
      Complex complex5 = complex0.NaN.add(220.12224603304);
      Complex complex6 = complex5.INF.multiply((-3137));
      Complex complex7 = complex6.ONE.pow((-1315.983));
      complex0.readResolve();
      complex4.atan();
      complex0.ONE.multiply(29);
      Complex complex8 = complex6.divide((double) (-3137));
      complex1.readResolve();
      Complex complex9 = complex8.multiply(complex7);
      Complex complex10 = complex0.cos();
      Complex.valueOf(450.582836764402);
      complex10.log();
      complex10.ZERO.toString();
      complex7.I.multiply(29);
      Complex complex11 = complex9.cosh();
      complex3.pow(1.619992971420288);
      complex6.getArgument();
      complex1.divide(complex2);
      complex5.NaN.subtract(complex7);
      Complex complex12 = complex7.multiply((-3137));
      complex11.equals("");
      Complex.valueOf(8.553006617874884);
      complex12.conjugate();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.sinh();
      Complex complex1 = complex0.INF.pow(3733.391906398608);
      complex0.readResolve();
      Complex complex2 = complex1.createComplex(4.0555335030170446E-8, 3733.391906398608);
      complex2.reciprocal();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-331.8021982685), 1978.07694847);
      Complex complex2 = complex1.conjugate();
      Object object0 = new Object();
      complex2.readResolve();
      complex2.equals(complex1);
      complex1.multiply(complex2);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-331.8021982685), 1978.07694847);
      Complex complex2 = Complex.valueOf(1978.07694847, (-331.8021982685));
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.valueOf((-331.8021982685));
      Complex complex5 = complex3.acos();
      complex2.conjugate();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.sin();
      complex7.ONE.createComplex(1978.07694847, 1978.07694847);
      complex0.subtract(complex0);
      Complex complex8 = complex1.add(complex4);
      complex0.toString();
      complex0.createComplex((-402.912342929), (-331.8021982685));
      Complex complex9 = complex8.reciprocal();
      complex9.hashCode();
      complex5.tanh();
      complex9.cosh();
      Complex.valueOf(362.517);
      Complex complex10 = Complex.valueOf(362.517, 362.517);
      complex2.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.createComplex((-331.8021982685), 1978.07694847);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.valueOf((-331.8021982685));
      Complex complex5 = complex3.acos();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex5.sin();
      complex5.subtract(complex7);
      Complex complex8 = complex6.add(complex4);
      complex3.toString();
      Complex complex9 = complex2.createComplex((-2090.26), (-331.8021982685));
      complex5.reciprocal();
      complex5.hashCode();
      complex8.tanh();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.createComplex((-359204.08110372745), (-359204.08110372745));
      Complex complex3 = Complex.valueOf(2.0653935146671156E-8, 2324366.2396514784);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf((-359204.08110372745));
      Complex complex6 = complex0.acos();
      Complex complex7 = complex4.conjugate();
      complex6.sqrt1z();
      complex5.sin();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex2.divide((-359204.08110372745));
      complex9.INF.asin();
      complex7.pow((-1374.4037403542502));
      complex9.sin();
      complex8.reciprocal();
      Complex.valueOf((-1046.389));
      complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.createComplex((-331.8021982685), 2.530870537724554E-8);
      Complex complex3 = Complex.valueOf(1978.07694847, 2.530870537724554E-8);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = Complex.valueOf((-331.8021982685));
      Complex complex6 = complex0.acos();
      complex4.conjugate();
      Complex complex7 = complex2.sqrt1z();
      complex7.sin();
      complex1.ONE.multiply((-4.588037824983901));
      Complex complex8 = complex5.subtract(complex6);
      complex8.sqrt();
      Complex complex9 = new Complex((-361.790598184));
      Complex complex10 = complex9.add(complex4);
      complex10.toString();
      complex6.createComplex(803.096, (-454.164548));
      complex5.reciprocal();
      complex3.hashCode();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      double double0 = (-1130.0);
      Complex complex2 = complex1.createComplex((-1130.0), (-331.8021982685));
      Complex.valueOf((-331.8021982685), (-1130.0));
      complex1.conjugate();
      Complex complex3 = Complex.valueOf((-331.8021982685));
      complex3.acos();
      complex3.conjugate();
      complex1.sqrt1z();
      complex3.sin();
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1.349595069885254, 1.349595069885254);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.NaN.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.multiply(4624);
      complex0.NaN.getArgument();
      Complex complex4 = complex2.add(0.41421356237309515);
      complex4.subtract(1603.0);
      Complex complex5 = complex4.log();
      complex5.tan();
      complex5.getReal();
      complex1.cos();
      Complex complex6 = Complex.ONE;
      complex4.NaN.subtract(complex3);
      Complex complex7 = complex6.add((-621.066474));
      complex3.readResolve();
      Complex.valueOf((-0.04655101129110239), 1603.0);
      complex7.multiply(325);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4.8182788286170926E89, (-3446.3553460586));
      Complex complex2 = Complex.valueOf((-3446.3553460586), 4.8182788286170926E89);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex2.multiply(complex2);
      complex5.getField();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.negate();
      Complex complex8 = complex2.atan();
      complex3.add(complex7);
      complex3.tan();
      Complex complex9 = complex8.multiply(317);
      Complex complex10 = new Complex(1026.243);
      Complex complex11 = complex4.multiply(complex0);
      complex11.ONE.sinh();
      complex8.sinh();
      Complex complex12 = complex10.createComplex(317, (-3446.3553460586));
      complex9.readResolve();
      complex6.cosh();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1.4142135623730951, (-3446.3553460586));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.NaN.multiply(complex0);
      complex4.INF.pow(complex1);
      complex2.getField();
      Complex complex5 = complex0.negate();
      complex5.I.atan();
      complex1.add(complex2);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex0.multiply(1064);
      Complex complex8 = new Complex(348.79029636483);
      complex7.multiply(complex8);
      Complex complex9 = complex0.sinh();
      complex9.INF.createComplex(996375.4884195606, 3176.930923);
      complex0.readResolve();
      complex0.cosh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex1.divide(complex3);
      Complex complex6 = complex5.asin();
      complex5.tanh();
      Complex complex7 = Complex.valueOf(8.069984512111955E198);
      complex6.readResolve();
      Object object0 = new Object();
      complex5.equals(object0);
      complex2.createComplex(8.069984512111955E198, 611.472201);
      Complex complex8 = Complex.I;
      Complex complex9 = complex4.divide(complex6);
      complex0.abs();
      complex9.acos();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1.4142135623730951, (-3446.3553460586));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex4.INF.pow(complex1);
      complex2.getField();
      Complex complex6 = complex0.negate();
      complex6.I.atan();
      complex1.add(complex2);
      complex6.tan();
      Complex complex7 = complex0.multiply(1064);
      Complex complex8 = new Complex(348.79029636483);
      complex7.multiply(complex8);
      Complex complex9 = complex0.sinh();
      complex9.INF.createComplex(996375.4884195606, 3176.930923);
      complex0.readResolve();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex2 = complex0.ONE.cos();
      complex2.nthRoot(349);
      complex0.conjugate();
      complex2.sqrt1z();
      Complex complex3 = Complex.valueOf(3074.2147718437104, Double.NaN);
      Complex complex4 = new Complex(1978.07694847, 349);
      complex3.add(complex4);
      complex0.getReal();
      complex1.reciprocal();
      Complex complex5 = Complex.valueOf(2446.9141731930868);
      complex5.multiply((-1264.966177));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(998.1866);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = Complex.valueOf(998.1866, 998.1866);
      complex1.abs();
      Complex complex4 = complex0.multiply(0);
      complex4.NaN.cosh();
      complex3.equals(complex4);
      complex3.tan();
      complex0.divide((double) 0);
      complex3.divide(complex2);
      complex1.abs();
      Complex complex5 = complex0.acos();
      complex2.nthRoot(1368);
      complex5.divide(998.1866);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(998.1866);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.asin();
      complex0.abs();
      Complex complex3 = complex0.multiply(0);
      complex2.equals(complex3);
      complex0.divide((double) 0);
      complex0.pow(4882.816900000001);
      complex2.cosh();
      complex1.pow(complex0);
      Complex.valueOf(104.48);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.NaN;
      complex3.INF.sqrt1z();
      complex0.getReal();
      complex3.reciprocal();
      Complex complex4 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.reciprocal();
      Complex complex1 = complex0.createComplex((-331.8021982685), 1978.07694847);
      Complex complex2 = Complex.valueOf(1978.07694847, (-331.8021982685));
      Complex complex3 = complex1.conjugate();
      Complex.valueOf((-331.8021982685));
      Complex complex4 = complex3.acos();
      complex2.conjugate();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex3.subtract(complex3);
      complex4.add(complex6);
      complex5.toString();
      Complex complex9 = complex7.createComplex(1714.451, (-508.7));
      complex8.reciprocal();
      complex8.hashCode();
      complex9.divide(complex3);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = new Complex((-2688.8863848279857));
      complex4.exp();
      Complex complex5 = complex0.multiply(295.0498);
      complex3.asin();
      Complex complex6 = new Complex((-1739.3412), 6.318213336);
      Complex.valueOf((-2688.8863848279857));
      complex0.log();
      complex5.pow(complex2);
      Complex complex7 = complex5.add((-1739.3412));
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2688.8863848279857));
      complex8.isInfinite();
      complex1.multiply(complex8);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, (-1739.3412));
      Complex complex10 = complex9.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.ONE;
      complex4.acos();
      complex8.divide(complex7);
      Complex complex12 = complex3.multiply(20.0);
      Complex complex13 = complex7.pow((-1223.4572909355452));
      complex12.pow(complex13);
      complex0.reciprocal();
      complex10.pow(0.8414709848078965);
      complex5.subtract(0.8414709848078965);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(998.1866);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.asin();
      complex1.abs();
      Complex complex4 = complex2.multiply((-893));
      complex2.equals((Object) null);
      Complex complex5 = complex3.tan();
      complex5.divide(1312660.5596931847);
      complex4.pow((-753.04818));
      complex1.sin();
      Complex complex6 = new Complex(998.1866);
      complex6.toString();
      complex2.reciprocal();
      Complex complex7 = complex4.add(complex3);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.reciprocal();
      complex0.INF.abs();
      complex0.sqrt();
      Complex complex2 = Complex.valueOf(1286.9479, 6.283185307179586);
      Complex complex3 = complex2.multiply(1396);
      complex3.hashCode();
      complex3.sinh();
      Complex.valueOf(6.283185307179586);
      Complex complex4 = complex3.divide(complex1);
      complex2.asin();
      Complex complex5 = complex2.tanh();
      Complex.valueOf(4880.816900000001);
      complex0.equals(complex1);
      complex1.createComplex(1396, Double.NaN);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.divide(complex4);
      complex7.abs();
      complex4.acos();
      complex5.nthRoot(1396);
      complex2.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.pow((-5453.1119));
      complex0.NaN.sinh();
      complex0.NaN.add(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = Complex.INF;
      complex2.hashCode();
      complex1.divide(complex2);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(998.1866);
      complex0.divide(0.20739519596099854);
      Complex complex1 = Complex.valueOf(998.1866);
      Complex complex2 = complex0.sinh();
      complex1.abs();
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.valueOf((-3.480032127343472E-8), (-1523.996511));
      Complex complex5 = complex4.divide(4499.37);
      complex5.tanh();
      complex3.multiply((-1011.810345));
      Complex complex6 = Complex.valueOf(6.663175904917432E40, 0.0);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.multiply((-1556));
      complex2.hashCode();
      Complex complex3 = complex1.sinh();
      Complex.valueOf((double) (-1556));
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex0.asin();
      complex4.tanh();
      Complex complex6 = Complex.valueOf(6.283185307179586);
      Object object0 = complex6.readResolve();
      complex6.equals(object0);
      Complex complex7 = complex6.createComplex(6.283185307179586, 1917.9);
      complex7.divide(complex5);
      complex4.abs();
      Complex complex8 = Complex.valueOf(7.307059786371152E43, (-2376.999208342668));
      complex8.acos();
      try { 
        complex3.nthRoot((-842));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -842
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.multiply((-1556));
      complex1.hashCode();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.valueOf((-1011.810345), (double) (-1556));
      Complex complex5 = complex2.divide(complex0);
      complex4.asin();
      Complex complex6 = complex5.tanh();
      Complex.valueOf((-1011.810345));
      complex6.equals(complex4);
      complex3.createComplex(1996.372699091527, 1996.372699091527);
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.valueOf((-1.0), (-20.0));
      complex8.abs();
      complex6.acos();
      try { 
        complex0.nthRoot((-1556));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,556
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      complex1.NaN.multiply((-1556));
      complex0.ONE.hashCode();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.ONE;
      complex4.add(1159.5);
      Complex complex5 = new Complex((-346.04708697052723), (-346.04708697052723));
      Complex complex6 = complex5.divide(complex3);
      complex4.atan();
      complex6.sqrt1z();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      int int0 = (-1556);
      complex1.NaN.multiply((-1556));
      complex0.ONE.hashCode();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = Complex.valueOf((-1011.810345));
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex0.asin();
      complex0.tanh();
      Complex complex6 = Complex.valueOf((-1.0));
      complex5.equals(complex6);
      complex6.divide((-1.0));
      Complex complex7 = complex4.createComplex((-1556), (-1011.810345));
      complex7.ONE.getField();
      complex7.ONE.sqrt1z();
      Complex complex8 = complex6.multiply(0);
      complex8.add(complex1);
      complex4.getReal();
      Complex complex9 = complex1.divide((double) 0);
      complex6.toString();
      try { 
        complex9.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(998.1866);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.asin();
      complex1.abs();
      Complex complex4 = complex0.multiply(0);
      Complex complex5 = complex4.ONE.cos();
      complex3.equals(complex4);
      Complex complex6 = complex1.tan();
      complex6.NaN.divide(Double.POSITIVE_INFINITY);
      complex2.pow(998.1866);
      complex5.abs();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, 998.1866);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.reciprocal();
      Complex complex1 = complex0.createComplex((-331.8021982685), 1978.07694847);
      Complex complex2 = Complex.valueOf(1978.07694847, 1978.07694847);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.valueOf((-331.8021982685));
      complex2.acos();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex3.sqrt1z();
      complex3.NaN.atan();
      complex2.sin();
      Complex complex7 = Complex.ZERO;
      complex7.acos();
      complex0.subtract(complex3);
      Complex complex8 = complex5.add(complex0);
      complex8.toString();
      complex8.createComplex((-331.8021982685), 2.0);
      complex7.reciprocal();
      complex4.hashCode();
      complex7.divide(complex6);
      Complex complex9 = Complex.NaN;
      complex9.tanh();
      complex4.multiply(7);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.createComplex((-331.8021982685), 1978.07694847);
      Complex complex3 = Complex.valueOf(1978.07694847, (-331.8021982685));
      Complex complex4 = complex2.conjugate();
      Complex complex5 = Complex.valueOf((-331.8021982685));
      complex4.acos();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex4.sqrt1z();
      complex7.sin();
      complex1.subtract(complex0);
      complex2.add(complex5);
      complex0.toString();
      complex6.createComplex(1805.10394448, (-402.912342929));
      Complex complex8 = complex5.reciprocal();
      complex8.hashCode();
      complex7.divide(complex4);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.pow((-5453.1119));
      Complex complex2 = complex0.NaN.sinh();
      complex0.add(2171.4051471222647);
      Complex complex3 = new Complex((-3517.053616733969), (-5453.1119));
      complex0.divide(complex1);
      complex2.atan();
      Complex complex4 = Complex.INF;
      complex0.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(998.1866);
      Complex complex1 = complex0.conjugate();
      complex1.I.tanh();
      Complex complex2 = complex0.asin();
      complex1.abs();
      Complex complex3 = complex0.multiply(0);
      complex2.equals(complex3);
      Complex complex4 = complex2.tan();
      complex0.divide((double) 0);
      Complex complex5 = complex4.pow(4882.816900000001);
      Complex complex6 = complex0.sin();
      complex6.toString();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      complex0.getImaginary();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(0.0);
      complex3.sinh();
      complex0.abs();
      complex3.cos();
      Complex complex5 = Complex.valueOf((-972.2464464556144), (-1011.810345));
      complex5.divide(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex1.multiply(Double.NaN);
      Complex.valueOf((-1011.810345), 0.0);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(69.87);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.I.conjugate();
      complex4.ONE.multiply(1);
      complex2.INF.divide(complex5);
      Complex complex6 = complex5.ZERO.multiply(69.87);
      complex6.ONE.sin();
      complex5.I.createComplex(69.87, 0.0);
      Complex complex7 = complex0.divide(complex4);
      complex7.abs();
      complex3.acos();
      complex3.nthRoot(3149);
      complex2.divide(1146.2503686506172);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.pow((-5453.1119));
      Complex complex1 = complex0.NaN.sinh();
      complex0.getReal();
      Complex complex2 = complex0.negate();
      complex2.tan();
      complex2.hashCode();
      Complex complex3 = Complex.valueOf((-5453.1119));
      complex3.sinh();
      Complex complex4 = Complex.ONE;
      complex4.readResolve();
      complex0.multiply(complex1);
      complex2.createComplex(91.869515469391, (-1034.0184443207));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ONE.cos();
      complex0.nthRoot(349);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.INF.sqrt1z();
      complex3.ZERO.add(complex2);
      complex0.getReal();
      complex1.isNaN();
      complex2.readResolve();
      int int0 = 2146710838;
      // Undeclared exception!
      complex1.nthRoot(2146710838);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double double0 = 1136.08947238;
      Complex complex0 = Complex.valueOf(1136.08947238, 1136.08947238);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.ONE.asin();
      complex2.ONE.reciprocal();
      Complex complex3 = complex0.reciprocal();
      complex1.add(complex3);
      int int0 = (-1875);
      complex1.atan();
      complex2.ONE.reciprocal();
      try { 
        complex0.ONE.nthRoot((-1875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,875
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.sinh();
      complex1.getField();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.I.multiply(1203);
      complex4.INF.add(1.5787194498912167E-8);
      complex4.ONE.asin();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.ZERO.tan();
      complex1.getArgument();
      complex5.I.cosh();
      Complex complex7 = complex6.subtract(2778.8);
      complex0.negate();
      complex7.atan();
      complex1.pow(66.8582355);
      Complex complex8 = complex6.cosh();
      complex8.ONE.pow(complex2);
      Complex.valueOf(2778.8);
      complex4.abs();
      complex6.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      complex1.createComplex((-1593.4873191), (-1593.4873191));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex0.pow(1193.0243);
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex2.I.subtract(299.0);
      Complex complex9 = Complex.valueOf(1193.0243);
      Complex complex10 = complex5.I.acos();
      complex8.I.negate();
      complex7.I.sinh();
      complex4.I.createComplex(1193.0243, 3263.491863432349);
      Complex complex11 = complex9.add(complex2);
      complex11.readResolve();
      complex9.I.reciprocal();
      complex6.toString();
      Complex complex12 = complex0.add(complex7);
      Complex complex13 = complex6.pow(complex11);
      complex7.ZERO.multiply(complex4);
      complex13.ONE.multiply(1);
      Complex complex14 = complex2.exp();
      complex14.INF.atan();
      Complex complex15 = complex7.subtract(complex8);
      complex15.ZERO.reciprocal();
      complex12.isInfinite();
      complex7.getField();
      complex6.abs();
      complex2.pow(complex0);
      complex12.multiply(complex1);
      complex0.getReal();
      complex10.multiply(1.7778112039716255E-8);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.ONE.asin();
      complex2.ONE.negate();
      complex2.ONE.reciprocal();
      complex2.INF.readResolve();
      complex1.isInfinite();
      Complex complex3 = complex1.reciprocal();
      complex3.nthRoot(40);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.ZERO.conjugate();
      complex4.ONE.nthRoot(40);
      complex4.NaN.sqrt1z();
      Complex complex6 = Complex.valueOf(1.4754809136835937E-8, (-834.7519338676572));
      Complex complex7 = complex6.I.multiply(complex1);
      complex0.toString();
      Complex complex8 = complex0.atan();
      complex6.ZERO.pow(complex5);
      complex8.I.createComplex(1671.98, 1.4754809136835937E-8);
      complex6.createComplex((-1.6072409939877762E-146), (-4807.0));
      Complex complex9 = complex7.conjugate();
      complex9.I.subtract(complex7);
      complex2.acos();
      Complex complex10 = complex9.multiply(complex2);
      complex8.asin();
      complex10.subtract((-1.6072409939877762E-146));
      complex6.multiply(0.0);
      complex0.subtract((-625.0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.sinh();
      complex3.ZERO.hashCode();
      Complex complex4 = complex3.pow(1.0);
      complex4.I.add(0.0);
      Complex complex5 = complex3.NaN.add(4991.13);
      complex5.NaN.sqrt1z();
      complex3.hashCode();
      Complex complex6 = complex3.multiply((-7.050361059209181E-9));
      Complex complex7 = complex6.asin();
      Complex complex8 = complex7.NaN.atan();
      complex0.nthRoot(1);
      Complex complex9 = complex6.createComplex((-7.050361059209181E-9), (-7.050361059209181E-9));
      Complex complex10 = complex0.ONE.reciprocal();
      complex10.ONE.getArgument();
      Complex complex11 = complex8.add(complex7);
      complex8.getReal();
      Complex complex12 = complex5.atan();
      complex9.equals(complex5);
      complex11.add(complex12);
      Complex complex13 = complex9.add(1.0);
      complex13.ZERO.divide(1.5781599575584034E286);
      complex11.asin();
      complex2.isNaN();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ONE.cos();
      complex0.nthRoot(349);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.INF.sqrt1z();
      complex3.ZERO.add(complex2);
      complex0.getReal();
      complex1.isNaN();
      complex2.readResolve();
      complex2.tan();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.createComplex((-331.8021982685), 1978.07694847);
      Complex complex3 = Complex.valueOf((-331.8021982685), 1978.07694847);
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = Complex.valueOf(1978.07694847);
      complex5.ZERO.acos();
      complex0.conjugate();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex0.sin();
      complex1.ONE.acos();
      Complex complex8 = complex4.subtract(complex0);
      Complex complex9 = complex6.add(complex8);
      complex8.toString();
      complex3.createComplex(5.073114566291778E-164, (-331.8021982685));
      complex0.reciprocal();
      complex8.hashCode();
      complex5.divide(complex9);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.reciprocal();
      complex0.INF.abs();
      Complex complex2 = complex0.sqrt();
      complex2.INF.nthRoot(1111);
      complex2.ZERO.log();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.I.subtract(0.0);
      complex1.divide(285.81465136);
      complex3.reciprocal();
      complex0.getImaginary();
      Complex complex7 = complex5.ONE.add(347.543713);
      complex7.ZERO.sin();
      complex4.log();
      complex6.tan();
      complex3.toString();
      complex5.negate();
      complex0.multiply(0.0);
      Complex.valueOf(0.0, 3318.6);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(complex0);
      complex1.ONE.sqrt1z();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.multiply(295.0498);
      complex3.I.asin();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex1.log();
      Complex complex7 = complex0.NaN.pow(complex2);
      Complex complex8 = complex1.add((-1223.4572909355452));
      complex5.isInfinite();
      complex2.multiply(complex7);
      Complex complex9 = complex6.pow(295.0498);
      Complex complex10 = Complex.valueOf((-1223.4572909355452));
      Complex complex11 = complex8.acos();
      Complex complex12 = complex7.divide(complex2);
      complex12.INF.hashCode();
      complex3.multiply(295.0498);
      complex11.pow(295.0498);
      complex10.pow(complex0);
      complex6.reciprocal();
      complex9.pow((-1223.4572909355452));
      complex3.subtract(295.0498);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      complex1.INF.nthRoot(1);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex4.ONE.multiply(complex2);
      complex5.ZERO.multiply((-1267.7946402331452));
      complex5.ZERO.divide((double) 1);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex6.INF.cosh();
      Complex complex7 = complex2.NaN.pow(0.0);
      Complex complex8 = complex7.NaN.reciprocal();
      complex2.INF.hashCode();
      complex8.INF.readResolve();
      Complex complex9 = complex2.INF.sin();
      complex0.nthRoot(1);
      complex0.hashCode();
      Complex complex10 = complex8.multiply(2.436652183532715);
      complex10.NaN.negate();
      complex6.ONE.hashCode();
      Complex complex11 = complex8.negate();
      complex11.sinh();
      Complex complex12 = complex9.negate();
      complex12.isNaN();
      Object object0 = complex5.readResolve();
      complex6.equals(object0);
      complex8.getReal();
      Complex complex13 = new Complex(0.0);
      complex12.pow(complex13);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.createComplex(0.0, (-1.0));
      complex1.INF.nthRoot(585);
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.log();
      complex4.I.readResolve();
      complex0.NaN.atan();
      Complex complex5 = complex3.reciprocal();
      complex5.NaN.exp();
      complex3.ONE.hashCode();
      Complex complex6 = complex4.pow(complex0);
      complex3.NaN.nthRoot(747);
      complex6.I.sqrt();
      Complex complex7 = complex3.multiply(211);
      Complex complex8 = complex7.NaN.subtract(complex4);
      Complex complex9 = complex8.INF.atan();
      Complex complex10 = complex2.add((double) 211);
      complex10.ONE.getField();
      Complex.valueOf((double) 747, 6.283185307179586);
      Complex.valueOf((-1679.159169646933), 0.0);
      complex9.conjugate();
      Complex.valueOf(0.1477125883102417, (-1860.9428475615202));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      complex0.getField();
      complex0.I.reciprocal();
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.INF.sin();
      complex1.INF.cos();
      Complex complex2 = complex0.sin();
      complex0.abs();
      Complex complex3 = complex1.ONE.log();
      complex2.NaN.nthRoot(760);
      complex1.getField();
      Complex complex4 = complex2.add(complex1);
      complex2.abs();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.pow(complex2);
      complex5.cos();
      complex6.tan();
      complex3.abs();
      Complex complex7 = complex4.sin();
      complex7.ONE.divide(2.5450911557068313E-284);
      complex0.sinh();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2716.2928156602197));
      complex0.I.getField();
      Complex complex1 = complex0.I.sqrt();
      complex0.getArgument();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.tan();
      complex4.getField();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex1.pow(complex0);
      Complex.valueOf((-5514.0));
      Complex complex8 = complex7.negate();
      complex7.INF.nthRoot(2328);
      Complex complex9 = complex0.subtract(1.0);
      Complex complex10 = complex9.ZERO.multiply(complex6);
      complex10.I.abs();
      complex4.INF.toString();
      complex8.isInfinite();
      complex1.getArgument();
      Complex complex11 = complex2.exp();
      complex8.reciprocal();
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0, 6.283185307179586);
      complex11.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0, (-1369.356377013));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.pow(0.0);
      complex5.toString();
      complex5.getArgument();
      Complex complex6 = complex0.cos();
      complex6.ONE.add(406.93205577);
      complex6.I.hashCode();
      complex5.I.readResolve();
      complex1.nthRoot(594);
      Complex complex7 = Complex.valueOf((-1369.356377013));
      Complex complex8 = complex4.divide(complex1);
      complex8.getArgument();
      Complex complex9 = complex8.createComplex((-1369.356377013), (-2132.6939172725206));
      complex5.subtract(1.4385227981629147E-8);
      complex2.hashCode();
      Complex complex10 = complex2.pow((-1369.356377013));
      Complex complex11 = Complex.valueOf(1158.564280293);
      Complex complex12 = complex11.NaN.atan();
      complex11.abs();
      complex7.atan();
      complex10.isNaN();
      complex4.getArgument();
      complex12.negate();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.pow((-2.0549866377878678E294));
      complex0.subtract(6.602496401651853E-9);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-1502.7350074989206));
      complex0.ONE.acos();
      complex0.ONE.toString();
      complex0.INF.abs();
      Complex complex1 = complex0.INF.cos();
      complex1.INF.add(complex0);
      complex0.nthRoot(1);
      complex0.tanh();
      Complex complex2 = Complex.valueOf((-1502.7350074989206));
      Complex complex3 = complex2.cos();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt();
      complex0.negate();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.divide((-433.979658379955));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(452.0078, 452.0078);
      complex0.NaN.getField();
      complex0.ONE.divide(complex1);
      complex0.getReal();
      complex0.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex1.getField();
      complex2.multiply(452.0078);
      complex3.divide(complex2);
      complex0.pow((-0.16624879837036133));
      Complex.valueOf(2124.4529);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.NaN.conjugate();
      complex0.ZERO.divide(1776.5);
      Complex.valueOf((-20.0), (-1378.0256814));
      Complex complex1 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex0.I.hashCode();
      Complex complex2 = Complex.ZERO;
      complex0.pow(complex2);
      Complex complex3 = complex2.log();
      complex1.tanh();
      Complex complex4 = complex1.multiply(26);
      complex4.ONE.pow(complex2);
      complex1.acos();
      complex3.pow(2.0483260435783403E-214);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-313.28459394523));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2538.97980036486);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex2.tanh();
      complex3.ZERO.createComplex(0.0, 1.0);
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = Complex.valueOf(2538.97980036486);
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex0.I.divide(complex5);
      complex7.acos();
      Complex complex8 = complex5.asin();
      Complex complex9 = Complex.valueOf(2331.7736398);
      Complex complex10 = complex8.pow(complex1);
      complex6.getImaginary();
      complex8.I.getArgument();
      complex10.abs();
      complex7.equals(complex10);
      Complex complex11 = complex4.add(complex5);
      complex11.acos();
      Complex complex12 = complex11.NaN.cosh();
      complex11.NaN.tanh();
      complex10.add(2331.7736398);
      Complex complex13 = Complex.ZERO;
      complex9.equals(complex13);
      complex7.tan();
      Complex complex14 = Complex.valueOf(-0.0, (-3201.171));
      complex12.divide(complex14);
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2173.3143133);
      Complex complex1 = Complex.I;
      complex0.divide(complex1);
      complex1.INF.abs();
      complex0.equals(complex1);
      Complex complex2 = complex1.pow(Double.NaN);
      complex2.INF.cosh();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.isInfinite();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.acos();
      complex2.ONE.reciprocal();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.NaN.conjugate();
      complex4.ZERO.createComplex(0.0, 130.94133);
      Complex complex5 = complex2.conjugate();
      complex0.NaN.hashCode();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex1.ONE.getField();
      complex6.NaN.createComplex((-915.1), (-20.0));
      complex6.isInfinite();
      Complex complex7 = complex1.cos();
      complex7.INF.divide(0.0);
      complex5.log();
      Complex complex8 = complex2.sqrt();
      complex8.abs();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.7660598745907915E115, 6.283185307179586);
      complex0.abs();
      Complex complex1 = complex0.I.acos();
      Complex complex2 = new Complex(6.283185307179586);
      complex1.I.divide(complex2);
      Complex complex3 = complex0.ZERO.acos();
      complex3.NaN.sqrt();
      complex2.ZERO.exp();
      Complex complex4 = Complex.valueOf(3.7660598745907915E115, 6.283185307179586);
      complex2.sqrt();
      complex4.INF.divide((double) (-1));
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.valueOf((-1304.9338089));
      complex2.ONE.add(complex1);
      complex0.getImaginary();
      Complex complex3 = complex1.I.sqrt();
      complex3.I.add((-1304.9338089));
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.INF.tanh();
      complex0.getReal();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.tan();
      complex6.ZERO.hashCode();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.sinh();
      complex6.readResolve();
      complex4.multiply(complex3);
      complex6.createComplex(1.0, 3288.2862);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      complex0.hashCode();
      double double0 = (-6.824454861992054E-31);
      complex1.I.divide(complex0);
      Complex complex2 = complex0.multiply((-6.824454861992054E-31));
      Complex complex3 = complex2.add((-6.824454861992054E-31));
      try { 
        complex3.INF.nthRoot((-366));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -366
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.pow((-5453.1119));
      complex0.NaN.sinh();
      complex0.NaN.add(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      complex0.divide(complex1);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      int int0 = (-1556);
      complex1.NaN.multiply((-1556));
      complex0.ONE.hashCode();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = Complex.valueOf((-1011.810345));
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex0.asin();
      complex0.tanh();
      Complex complex6 = Complex.valueOf((-1.0));
      complex5.equals(complex6);
      complex6.divide((-1.0));
      complex4.createComplex((-1556), (-1011.810345));
      complex6.multiply(0);
      complex4.getReal();
      Complex complex7 = complex1.divide((double) 0);
      try { 
        complex7.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(451.52, 451.52);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(0.0);
      complex0.ONE.abs();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.I.multiply(complex2);
      complex3.I.add(complex0);
      complex0.equals("Discrete cumulative probability function returned NaN for argument {0}");
      complex2.isNaN();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(1441.2529711933);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.ONE.cosh();
      complex3.ONE.sqrt();
      complex3.ONE.createComplex(1441.2529711933, 1441.2529711933);
      Complex complex4 = complex0.createComplex(1441.2529711933, (-686.0140553));
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.divide(complex4);
      Complex complex7 = complex6.NaN.tanh();
      complex7.INF.getField();
      Complex complex8 = complex6.cos();
      complex8.NaN.pow(complex1);
      Complex.valueOf(1441.2529711933);
      complex8.getReal();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex9.asin();
      complex8.abs();
      complex9.isNaN();
      complex8.getImaginary();
      complex6.getArgument();
      Complex complex11 = complex0.cosh();
      complex11.divide(complex6);
      Complex complex12 = complex6.log();
      complex12.NaN.negate();
      complex2.createComplex((-686.0140553), 2.0);
      Complex complex13 = complex10.pow(1441.2529711933);
      complex13.multiply(37);
      complex7.abs();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1233.2058228825), 120.76925912);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ZERO.asin();
      complex2.NaN.negate();
      complex0.readResolve();
      complex1.NaN.readResolve();
      Complex complex3 = complex0.reciprocal();
      complex3.I.divide(complex0);
      Complex complex4 = complex1.subtract((-1233.2058228825));
      Complex complex5 = complex4.add((-1233.2058228825));
      complex0.negate();
      complex4.INF.tan();
      Complex complex6 = complex3.createComplex(1076.39243, 0.0);
      complex6.ZERO.getArgument();
      complex6.ZERO.cos();
      Complex complex7 = complex5.add(0.0);
      complex7.NaN.hashCode();
      complex4.conjugate();
      complex6.sin();
      complex2.getImaginary();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex8.negate();
      complex3.add(799.338);
      complex1.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.ONE.multiply(1);
      Complex complex3 = complex1.ZERO.add(Double.NaN);
      complex3.INF.negate();
      complex0.readResolve();
      Complex complex4 = complex3.cosh();
      complex4.ZERO.multiply(Double.NaN);
      Complex complex5 = complex1.pow(20.0);
      complex5.I.abs();
      complex2.getReal();
      complex1.multiply(complex3);
      complex2.atan();
      complex2.divide(Double.NaN);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex(998.1866);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.asin();
      complex1.abs();
      Complex complex4 = complex0.multiply(0);
      complex4.ONE.cos();
      complex3.equals(complex4);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.NaN.divide(Double.POSITIVE_INFINITY);
      complex2.pow(998.1866);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.exp();
      complex0.ONE.tanh();
      complex1.exp();
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0, (-2762.222386359327));
      Complex complex4 = complex3.INF.subtract(0.0);
      assertTrue(complex4.isInfinite());
      
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex3.ONE.divide(0.0);
      Complex complex8 = complex7.ONE.acos();
      complex8.NaN.conjugate();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex5.ZERO.cos();
      Complex.valueOf(0.0);
      String string0 = complex6.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      Complex complex10 = complex3.sinh();
      double double0 = complex10.I.abs();
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      Complex complex11 = complex5.conjugate();
      Complex complex12 = complex11.I.cos();
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex3.divide((-2762.222386359327));
      complex13.INF.multiply(complex11);
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      double double1 = complex5.getArgument();
      assertEquals(1.5707963267948966, double1, 0.01);
      assertEquals(3.6202733166536353E-4, complex5.getImaginary(), 0.01);
      
      Complex complex14 = complex2.tanh();
      assertTrue(complex2.equals((Object)complex9));
      assertEquals(0.7615941559557649, complex14.getReal(), 0.01);
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex1.multiply(0.0);
      Complex complex16 = complex7.sqrt1z();
      Complex complex17 = Complex.ZERO;
      Complex complex18 = complex6.add(complex17);
      Complex.valueOf(1.5707963267948966, 0.0);
      complex18.toString();
      assertTrue(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex13));
      assertSame(complex6, complex16);
      assertFalse(complex0.equals((Object)complex13));
  }
}
