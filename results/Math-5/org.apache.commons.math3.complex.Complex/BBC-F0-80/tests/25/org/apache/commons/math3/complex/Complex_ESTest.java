/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:04:51 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-4869.29236977692), Double.POSITIVE_INFINITY);
      complex0.ONE.tanh();
      complex0.I.hashCode();
      Complex complex1 = complex0.INF.createComplex(1924.48898826, 3764.0961757644254);
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex0.NaN.pow(2578.353653922224);
      complex4.INF.add((-417.56409689499));
      Complex complex5 = complex0.sin();
      complex5.toString();
      Complex.valueOf((-202.454516605514), (-6210302.24861442));
      complex3.pow((-963.01));
      complex0.multiply((-6210302.24861442));
      Complex complex6 = complex2.asin();
      complex6.NaN.getField();
      complex6.exp();
      complex1.acos();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4915085918594875, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex1.INF.add(complex3);
      Complex complex5 = Complex.valueOf(0.4915085918594875, Double.POSITIVE_INFINITY);
      complex5.ZERO.abs();
      complex1.negate();
      complex5.getField();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.divide(2768.374882612079);
      Complex complex8 = complex7.ZERO.multiply(complex5);
      complex7.multiply(complex0);
      complex8.tanh();
      complex4.readResolve();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex1.INF.add(complex3);
      Complex complex5 = complex0.tanh();
      complex5.ZERO.abs();
      Complex complex6 = complex1.negate();
      complex5.getField();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex0.divide(2740.79182314915);
      Complex complex9 = complex8.ZERO.multiply(complex5);
      complex8.multiply(complex0);
      complex9.tanh();
      complex4.readResolve();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.7976931348623157E308);
      complex1.ONE.subtract(complex0);
      complex1.nthRoot(1988);
      complex1.asin();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 2.718281828459045);
      complex1.getArgument();
      complex0.getImaginary();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(0.0, (-1285.37));
      Complex complex4 = new Complex((-1150.52297919), (-1.0));
      Complex complex5 = complex0.pow((-2274.1557632823265));
      Complex complex6 = Complex.valueOf((-402.0121605));
      complex6.sqrt1z();
      Complex complex7 = Complex.NaN;
      complex1.divide(complex4);
      Complex complex8 = complex5.pow(complex6);
      complex2.hashCode();
      complex8.multiply((-1.0));
      complex8.multiply(complex1);
      complex4.nthRoot(586);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex((-2079.31), 1.2736636153072213E-90);
      complex2.sqrt1z();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.I;
      complex4.sqrt();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ZERO;
      complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-6814.51503944), (-6814.51503944));
      Complex complex1 = Complex.valueOf((-6814.51503944), (-6814.51503944));
      complex1.INF.log();
      Complex complex2 = new Complex((-6814.51503944), (-6814.51503944));
      Complex complex3 = complex0.exp();
      complex2.INF.conjugate();
      Complex complex4 = complex0.subtract(complex2);
      complex4.ZERO.readResolve();
      complex0.acos();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1150.52297919), (-402.0121605));
      complex1.getArgument();
      complex0.getImaginary();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex((-402.0121605), (-1350.36395711959));
      Complex complex4 = new Complex(1.0, 1.2736636153072213E-90);
      complex4.pow(1.0);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = Complex.NaN;
      complex6.divide(complex3);
      Complex complex7 = complex5.pow(complex3);
      complex3.multiply(complex2);
      complex7.nthRoot(119);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.valueOf((-20.0), 20.0);
      Complex complex4 = complex2.tan();
      complex4.getField();
      Complex complex5 = Complex.I;
      complex3.tan();
      Complex complex6 = complex3.negate();
      complex6.tanh();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-1.3282890219894906E230));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-387.033983617216), (-387.033983617216));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.negate();
      Complex complex4 = new Complex(2462.8290117352);
      Complex complex5 = complex4.createComplex((-387.033983617216), (-387.033983617216));
      complex3.acos();
      complex1.readResolve();
      Complex.valueOf(989.39649099421, 5.72924572981599E-95);
      Complex complex6 = complex2.negate();
      complex5.NaN.negate();
      Complex complex7 = Complex.valueOf((-20.0), (-20.0));
      complex7.tan();
      complex5.cos();
      complex5.pow((-826.0));
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1289.17673), (-1289.17673));
      complex1.ONE.getArgument();
      complex0.getImaginary();
      complex0.sqrt();
      Complex complex2 = new Complex(0.0, 1.2736636153072213E-90);
      Complex complex3 = complex2.ZERO.pow(0.41421356237309515);
      Complex complex4 = Complex.valueOf(0.41421356237309515, (-2421.0));
      Complex complex5 = complex1.tan();
      complex4.cos();
      complex1.sin();
      complex5.atan();
      Complex complex6 = Complex.valueOf(758.0367838462);
      Complex complex7 = complex3.asin();
      complex7.sinh();
      complex6.subtract((-2352.0));
      Complex complex8 = Complex.NaN;
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract(Double.NaN);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.I.cos();
      complex1.ONE.atan();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = Complex.valueOf(1536.0, 3150.206032123427);
      complex0.tan();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex4.ONE.conjugate();
      Complex complex8 = complex6.exp();
      complex6.ZERO.pow(complex5);
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex4.asin();
      complex1.ONE.createComplex(1536.0, 1536.0);
      Complex complex11 = complex7.ZERO.divide(complex4);
      Complex complex12 = complex0.sin();
      complex12.multiply(complex7);
      Complex complex13 = complex8.NaN.divide(3150.206032123427);
      complex5.NaN.abs();
      Complex complex14 = complex10.conjugate();
      complex14.NaN.subtract(complex13);
      complex8.cos();
      complex13.tan();
      complex12.sqrt();
      complex3.getField();
      Complex complex15 = complex4.divide(1536.0);
      complex11.sinh();
      Object object0 = complex15.readResolve();
      complex8.equals(object0);
      complex15.add(complex9);
      complex0.add((-5466.0));
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.NaN);
      Complex complex1 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.tanh();
      complex1.INF.sqrt();
      Complex complex2 = complex1.pow((-9.879317845E-315));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-1896.299867298));
      complex0.atan();
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = new Complex((-1.0));
      Complex.valueOf((-1.0), Double.NaN);
      Complex complex3 = Complex.NaN;
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(1.2736636153072213E-90, Double.POSITIVE_INFINITY);
      complex2.pow(2969.101468065);
      Complex complex3 = complex1.sqrt1z();
      complex1.divide(complex0);
      complex0.pow(complex1);
      Complex complex4 = Complex.NaN;
      complex4.multiply(complex0);
      complex3.nthRoot(784);
      complex3.createComplex((-650.1640293457339), 1.2736636153072213E-90);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-160.69835034538), (-160.69835034538));
      Complex complex1 = complex0.createComplex((-160.69835034538), (-160.69835034538));
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-2.356194490192345));
      complex2.getImaginary();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = new Complex(2029.3056142512116, (-3099.8019986));
      complex1.pow(1819.80653820965);
      Complex complex5 = complex4.sqrt1z();
      complex0.divide(complex4);
      complex3.pow(complex5);
      Complex complex6 = Complex.valueOf(0.41421356237309515, (-160.69835034538));
      complex2.multiply(complex6);
      // Undeclared exception!
      complex0.nthRoot(753287431);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3446.749062, Double.POSITIVE_INFINITY);
      complex0.multiply(385);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(Double.POSITIVE_INFINITY, (-1669.0));
      complex2.sin();
      complex0.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex((-1717.202798939607), (-1717.202798939607));
      complex4.tan();
      Complex complex5 = new Complex(1529.0);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex(4.439791652732591E81, 439.5657363948);
      Complex complex2 = complex0.NaN.add(4.439791652732591E81);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = Complex.valueOf(2342.352561884017);
      Complex complex5 = complex0.subtract(4.566672575206695E-8);
      Complex complex6 = complex5.ONE.multiply(complex2);
      Complex complex7 = complex0.asin();
      complex6.ZERO.add(complex4);
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex8.negate();
      complex9.I.cosh();
      Complex complex10 = complex6.sinh();
      complex10.tan();
      complex6.acos();
      complex10.ONE.sqrt();
      complex0.I.reciprocal();
      complex1.subtract(0.0015557022790346764);
      Complex complex11 = complex5.add(complex6);
      complex3.toString();
      Complex complex12 = complex3.sqrt1z();
      Complex complex13 = complex10.reciprocal();
      complex13.equals(complex11);
      complex3.multiply(4.439791652732591E81);
      complex3.multiply(0.0015557022790346764);
      complex12.negate();
      complex1.createComplex(439.5657363948, (-1926.0));
      complex7.negate();
      complex9.readResolve();
      complex8.divide(1.1501053030837989E178);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.valueOf(2055.693985, (-20.0));
      Complex.valueOf((-20.0));
      Complex complex2 = complex1.I.multiply((-20.0));
      complex2.log();
      Complex complex3 = complex1.pow((-1.0));
      complex3.sqrt();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex1.cosh();
      complex5.ZERO.pow(0.0);
      Complex complex6 = complex4.divide(2.0);
      Complex complex7 = complex0.exp();
      complex5.getField();
      complex7.acos();
      complex6.pow((-1.0));
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.createComplex(12.824293801085647, 12.824293801085647);
      complex3.sin();
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.I;
      complex5.I.tan();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.createComplex(12.824293801085647, 12.824293801085647);
      Complex complex4 = Complex.valueOf(1.1984128162292276E269);
      complex3.equals(complex4);
      complex4.acos();
      complex4.getReal();
      complex1.conjugate();
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.tan();
      complex3.atan();
      complex1.abs();
      Complex complex4 = Complex.NaN;
      complex2.divide(Double.NaN);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(3375.5785895, 3375.5785895);
      complex0.getArgument();
      complex1.getImaginary();
      complex1.sqrt();
      Complex complex2 = new Complex(1.5707963267948966);
      Complex complex3 = complex2.pow(Double.NaN);
      complex0.sqrt1z();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.multiply(complex1);
      complex0.nthRoot(1116);
      complex5.toString();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-513.52281725), (-0.9999996447696303));
      complex0.getArgument();
      complex1.getImaginary();
      complex1.sqrt();
      Complex complex2 = new Complex((-20.0), (-3194.914038696734));
      Complex complex3 = complex2.pow((-2.5732807096249375));
      complex3.sqrt1z();
      complex1.divide(complex3);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      complex0.NaN.sinh();
      complex0.divide((-2265.407409347944));
      Complex complex2 = complex1.asin();
      complex0.INF.cosh();
      complex2.ZERO.toString();
      Complex complex3 = complex2.ZERO.divide((-2265.407409347944));
      try { 
        complex3.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(7.750873784451575E-4);
      Complex complex2 = Complex.ZERO;
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-736.706), 7.750873784451575E-4);
      Complex complex1 = complex0.pow(237.4545724441007);
      complex0.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = Complex.valueOf((-2.5732807096249375), 0.481292188167572);
      complex5.multiply(complex4);
      complex1.log();
      complex5.hashCode();
      complex5.sinh();
      Complex complex6 = complex3.tanh();
      complex6.sqrt();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1.7316830893872364E-7));
      Complex complex1 = complex0.atan();
      complex0.NaN.atan();
      Complex complex2 = complex0.createComplex((-3.0635272288480756E25), 20.0);
      Complex complex3 = complex2.acos();
      complex3.ONE.pow(complex1);
      complex2.ONE.atan();
      Complex complex4 = complex1.multiply(240);
      Complex complex5 = complex2.multiply((-3.0635272288480756E25));
      complex5.NaN.pow(425.32169);
      Complex complex6 = Complex.I;
      complex4.acos();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex7.ZERO.reciprocal();
      complex8.ONE.sqrt1z();
      complex8.ZERO.multiply(complex4);
      Complex complex9 = complex2.pow(complex6);
      complex3.multiply(20.0);
      Complex complex10 = Complex.valueOf(6.283185307179586);
      complex10.ONE.sinh();
      Complex complex11 = complex4.pow(complex5);
      Complex complex12 = complex11.INF.pow(complex9);
      complex6.abs();
      Complex complex13 = complex3.subtract(complex9);
      complex12.tan();
      Complex complex14 = complex13.add(complex0);
      complex14.INF.abs();
      complex0.readResolve();
      complex9.add((-3.0635272288480756E25));
      complex7.readResolve();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(976.4193375850414, 976.4193375850414);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.createComplex(12.824293801085647, 12.824293801085647);
      complex3.sin();
      complex1.tan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.I.tan();
      complex5.I.atan();
      complex5.NaN.abs();
      Complex complex6 = complex1.INF.add(0.0);
      complex1.hashCode();
      complex6.NaN.conjugate();
      complex1.isInfinite();
      Complex complex7 = new Complex(0.0, Double.NaN);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-1.0));
      Complex complex1 = Complex.valueOf(5552.358317177);
      Complex complex2 = complex1.cos();
      Complex complex3 = new Complex((-697.4226886508), 5552.358317177);
      Complex complex4 = complex3.createComplex(0.0, (-1.0));
      complex4.sin();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.tan();
      complex6.ZERO.multiply(0.41421356237309515);
      Complex complex7 = Complex.NaN;
      complex7.sqrt();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.tan();
      complex7.atan();
      Complex complex10 = Complex.valueOf((-697.4226886508), (-697.4226886508));
      complex10.abs();
      complex5.add(13.38055365691411);
      complex10.hashCode();
      complex10.conjugate();
      complex9.isInfinite();
      Complex.valueOf((-1.0));
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.createComplex((-1.0), 0.0);
      Complex complex4 = complex3.sin();
      complex4.tan();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex3.atan();
      complex1.abs();
      complex0.add(Double.POSITIVE_INFINITY);
      complex7.hashCode();
      complex6.conjugate();
      complex3.isInfinite();
      complex2.acos();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 2901113.9178047413);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.pow(0.0);
      complex0.getImaginary();
      complex4.atan();
      complex3.sqrt();
      complex0.getField();
      complex4.I.conjugate();
      complex4.ZERO.tan();
      complex1.exp();
      complex4.hashCode();
      Complex complex5 = complex1.tanh();
      complex5.NaN.pow(0.0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.I.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      complex3.getImaginary();
      complex0.atan();
      complex3.sqrt();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex4.getField();
      Complex complex5 = Complex.ZERO;
      complex5.exp();
      complex2.hashCode();
      complex1.tanh();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1289.17673), (-1289.17673));
      complex1.ONE.getArgument();
      complex0.getImaginary();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex(0.0, 1.2736636153072213E-90);
      Complex complex4 = Complex.valueOf(0.0);
      complex2.readResolve();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.negate();
      Complex complex7 = Complex.valueOf(1.2736636153072213E-90);
      complex7.hashCode();
      complex0.abs();
      Complex complex8 = complex6.cos();
      complex5.sqrt1z();
      complex4.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf((-1.0));
      Complex complex5 = complex4.divide(complex3);
      complex3.multiply(complex0);
      complex4.log();
      complex1.hashCode();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.sinh();
      complex1.tanh();
      Complex complex8 = new Complex((-1.0));
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex9.pow(complex8);
      Complex complex11 = complex7.createComplex((-1.0), (-980.6347));
      complex5.isInfinite();
      complex10.multiply(complex2);
      Complex complex12 = complex7.tanh();
      complex1.divide(complex12);
      Complex complex13 = Complex.INF;
      complex13.getImaginary();
      complex11.subtract(1.3703391844683932E-8);
      complex12.sqrt1z();
      complex0.sqrt1z();
      complex5.hashCode();
      complex9.add(1595.3405246375);
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex0.sqrt();
      complex1.getField();
      complex2.exp();
      Complex complex3 = Complex.I;
      complex3.divide(complex1);
      Complex complex4 = Complex.valueOf((-1.0), 2.414213562373095);
      complex4.acos();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.NaN.nthRoot(37);
      complex0.I.pow(0.0);
      Complex complex1 = complex0.sqrt();
      complex1.getField();
      Complex complex2 = complex0.exp();
      complex0.divide(complex0);
      complex2.I.asin();
      Complex.valueOf((-3374.1949773816));
      complex2.acos();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5938024520874023, 1.9392219496694452E-4);
      complex0.pow((-3487.4924367957587));
      Complex complex1 = complex0.sqrt();
      complex1.getField();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.divide(complex2);
      complex0.acos();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.divide(complex1);
      complex2.multiply(complex0);
      Complex complex3 = complex2.log();
      complex2.hashCode();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.sqrt();
      complex4.pow(complex6);
      Complex complex7 = Complex.ZERO;
      complex7.createComplex(0.0, (-4223.948142));
      complex4.isInfinite();
      Complex complex8 = complex1.multiply(complex7);
      complex8.tanh();
      Complex complex9 = complex3.divide(complex7);
      Complex complex10 = Complex.INF;
      complex10.getImaginary();
      complex1.subtract(1689.9646958235);
      Complex complex11 = Complex.I;
      complex11.sqrt1z();
      complex9.sqrt1z();
      Complex complex12 = new Complex((-4223.948142));
      complex12.hashCode();
      Complex complex13 = Complex.ONE;
      complex13.add(1689.9646958235);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      complex3.ZERO.conjugate();
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = complex3.ONE.add(complex2);
      complex5.I.subtract((-1.5343120819745468E95));
      complex5.NaN.asin();
      Complex complex6 = complex1.divide((-1.5343120819745468E95));
      complex6.INF.toString();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex7.pow(complex6);
      Complex complex9 = complex0.acos();
      Complex complex10 = complex9.tan();
      complex10.NaN.cosh();
      complex8.readResolve();
      complex9.INF.conjugate();
      complex1.add(complex0);
      complex5.divide((-1.5343120819745468E95));
      complex10.acos();
      complex4.createComplex((-1.5343120819745468E95), 1.9992243113949266);
      complex0.NaN.abs();
      complex10.tanh();
      complex3.add(1.9992243113949266);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = Double.POSITIVE_INFINITY;
      complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-3227.0));
      Complex complex1 = complex0.ZERO.sinh();
      int int0 = 1;
      complex0.nthRoot(1);
      complex1.multiply(complex0);
      complex0.ONE.cosh();
      Complex complex2 = complex0.asin();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.asin();
      complex1.readResolve();
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      complex3.ONE.multiply((-1646));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-1.4255188208147591));
      complex0.getImaginary();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.sqrt();
      complex1.getField();
      Complex complex4 = complex2.exp();
      Complex complex5 = new Complex((-2130.1), 0.4938860535621643);
      complex5.hashCode();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex1.divide(complex4);
      Complex complex8 = complex2.createComplex(1289.17673, Double.POSITIVE_INFINITY);
      complex8.INF.sqrt1z();
      Complex complex9 = Complex.I;
      complex1.divide(complex6);
      complex6.sqrt1z();
      Complex complex10 = Complex.valueOf((-2130.1));
      complex10.I.acos();
      complex7.subtract(1289.17673);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0, 0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.add(complex0);
      complex2.I.sqrt();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.subtract(complex3);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1289.17673), (-1289.17673));
      complex1.ONE.getArgument();
      complex0.getImaginary();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.ZERO.pow(0.0);
      Complex complex4 = complex3.I.sqrt1z();
      complex2.divide(complex2);
      complex2.multiply(complex1);
      Complex complex5 = complex2.log();
      complex5.ONE.hashCode();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex6.ONE.sqrt();
      complex8.NaN.pow(complex5);
      Complex complex9 = complex7.INF.createComplex((-1289.17673), (-1703.275));
      complex3.isInfinite();
      Complex complex10 = complex1.multiply(complex3);
      complex1.tanh();
      complex2.hashCode();
      complex4.conjugate();
      complex10.isInfinite();
      complex1.atan();
      Complex complex11 = Complex.INF;
      complex11.add(complex9);
      complex4.negate();
      Complex complex12 = new Complex(0.0, 0.0);
      complex11.divide((-2468.74093593));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1291.7788581155294), (-1291.7788581155294));
      complex1.ONE.getArgument();
      complex0.getImaginary();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex(0.0, 0.0);
      complex0.INF.tan();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.I.sqrt1z();
      Complex complex5 = complex3.divide(complex2);
      complex2.multiply(complex3);
      Complex complex6 = complex3.log();
      complex6.ONE.hashCode();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex7.ONE.sqrt();
      complex9.NaN.pow(complex6);
      complex8.INF.createComplex((-1291.7788581155294), (-1703.275));
      complex4.isInfinite();
      complex1.multiply(complex4);
      Complex complex10 = complex3.tanh();
      complex10.I.divide(complex8);
      Complex complex11 = Complex.INF;
      complex5.getImaginary();
      Complex complex12 = complex10.subtract(1969.72028047375);
      Complex complex13 = complex12.INF.sqrt1z();
      Complex complex14 = complex10.sqrt1z();
      Complex complex15 = complex14.INF.sqrt();
      complex10.hashCode();
      complex15.add(2187.592);
      complex4.sin();
      complex1.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.createComplex(Double.POSITIVE_INFINITY, 929.352);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.createComplex(0.0, 0.0);
      complex3.sin();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex1.ZERO.sqrt();
      Complex complex6 = complex5.I.tan();
      complex6.I.atan();
      complex6.NaN.abs();
      Complex complex7 = complex1.INF.add(0.0);
      complex1.hashCode();
      complex7.NaN.conjugate();
      complex1.isInfinite();
      Complex complex8 = complex2.atan();
      complex8.INF.add(complex4);
      complex2.negate();
      Complex complex9 = Complex.valueOf(0.0, (-8.5));
      complex0.getField();
      Complex complex10 = complex0.log();
      complex5.add(complex7);
      complex10.nthRoot(3168);
      complex6.log();
      complex5.cosh();
      complex9.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.atan();
      complex2.ONE.pow(2794.6728016352);
      Complex complex3 = complex0.exp();
      complex3.ONE.cosh();
      complex3.ZERO.tan();
      complex3.getReal();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = Complex.ZERO;
      complex5.readResolve();
      complex1.acos();
      complex0.getReal();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1795.1888), (-1795.1888));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.pow(0.0);
      complex3.getImaginary();
      Complex complex5 = complex1.atan();
      complex5.sqrt();
      complex2.getField();
      Complex complex6 = complex2.exp();
      complex2.hashCode();
      Complex complex7 = complex0.tanh();
      complex4.divide(complex5);
      complex4.createComplex(5.8107841809216616E209, 273.4704032);
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.INF;
      complex7.divide(complex9);
      complex2.sqrt1z();
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex6.subtract(Double.NaN);
      complex10.conjugate();
      complex9.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.log();
      complex2.multiply((-1.0));
      Complex complex3 = complex2.conjugate();
      complex3.add((-1.0));
      complex3.asin();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1.0));
      complex0.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.createComplex(1.4674003805513545, 1.4674003805513545);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.sqrt();
      complex1.tan();
      Complex complex7 = complex4.atan();
      complex6.abs();
      Complex complex8 = complex6.add((-1.0));
      Complex complex9 = Complex.ONE;
      complex9.hashCode();
      Complex complex10 = complex7.conjugate();
      complex2.isInfinite();
      complex5.atan();
      Complex complex11 = complex3.add(complex10);
      Complex complex12 = complex2.negate();
      Complex.valueOf(1.440561529268072, 1.7211089134216309);
      complex11.getField();
      complex2.log();
      complex7.add(complex12);
      complex9.nthRoot(1489);
      complex1.log();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf((-2521.6), 2.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = (Complex)complex2.INF.readResolve();
      complex2.acos();
      complex3.I.pow((-7.767915492597301E-9));
      complex2.getReal();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.multiply(0.09863831504256444);
      complex3.multiply(536);
      complex1.reciprocal();
      Complex complex5 = complex1.pow(complex0);
      complex4.equals(complex0);
      complex1.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.multiply((-2145819160));
      Complex complex3 = Complex.valueOf(Double.NaN, 525.6289);
      complex3.sqrt1z();
      complex3.asin();
      Complex complex4 = complex2.multiply(700.24);
      Complex complex5 = new Complex(696.7018515, (-1.0));
      complex5.multiply((-2145819160));
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex0.pow(complex4);
      complex7.createComplex(Double.NaN, Double.NaN);
      Object object0 = new Object();
      Object object1 = new Object();
      complex1.equals(object1);
      complex2.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.log();
      complex2.hashCode();
      complex3.readResolve();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex6.pow(complex3);
      Complex complex8 = complex7.createComplex((-1703.275), Double.NaN);
      complex0.isInfinite();
      Complex complex9 = complex3.multiply(complex8);
      Complex complex10 = complex0.tanh();
      complex10.ZERO.add(1266.72102);
      Complex complex11 = complex8.divide(complex5);
      complex9.divide(Double.POSITIVE_INFINITY);
      complex1.getImaginary();
      complex2.subtract(0.0);
      complex2.sqrt1z();
      complex9.sqrt1z();
      complex11.sqrt();
      complex8.hashCode();
      complex8.add(Double.NaN);
      Complex complex12 = new Complex(0.0);
      complex12.sin();
      complex0.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-377.2), 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      complex1.getImaginary();
      complex1.ONE.acos();
      complex0.I.getField();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.pow(complex4);
      Object object0 = new Object();
      Complex complex6 = Complex.ZERO;
      complex5.equals(complex6);
      Complex complex7 = Complex.ONE;
      complex7.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3063.18011, (-3359.2012833879016));
      complex1.getField();
      Complex complex2 = complex0.log();
      complex2.INF.subtract(complex0);
      complex2.I.sqrt1z();
      Complex complex3 = complex0.add(complex1);
      complex3.nthRoot(3168);
      complex1.log();
      complex1.cosh();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      complex0.ZERO.sin();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex3.ZERO.multiply(3716.5918754716);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = Complex.valueOf(943.4933923);
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex1.sin();
      complex8.getImaginary();
      Complex complex9 = Complex.valueOf(2.5938024520874023, 0.0);
      complex9.tanh();
      Complex complex10 = complex0.sqrt();
      complex1.ZERO.getArgument();
      complex10.readResolve();
      Complex complex11 = complex7.divide(2.5938024520874023);
      complex11.INF.createComplex(0.0, 2.5938024520874023);
      complex1.readResolve();
      Object object0 = complex5.readResolve();
      complex2.equals(object0);
      complex2.pow(complex4);
      complex10.add(complex1);
      complex2.nthRoot(22);
      try { 
        complex3.nthRoot((-2262));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,262
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.pow((-20.0));
      complex1.NaN.getField();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex1.NaN.cos();
      complex6.ONE.log();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex0.NaN.conjugate();
      complex3.hashCode();
      complex0.toString();
      Complex complex9 = complex2.cos();
      Complex.valueOf((-20.0), (-118.1511114381258));
      Complex complex10 = complex1.atan();
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex10.INF.subtract(0.0);
      complex12.ZERO.toString();
      complex3.NaN.pow((-118.1511114381258));
      Complex complex13 = complex9.sin();
      complex8.hashCode();
      complex4.NaN.add((-118.1511114381258));
      complex13.ZERO.multiply(2287);
      Complex complex14 = complex5.asin();
      complex1.log();
      complex13.log();
      complex11.cos();
      complex5.sqrt();
      complex14.equals("(0.0, 1.0)");
      complex14.getReal();
      complex14.add(0.0);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.sinh();
      complex0.ONE.getField();
      Complex complex2 = complex1.INF.log();
      complex2.I.reciprocal();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.NaN.sinh();
      complex4.ZERO.acos();
      Complex complex5 = complex4.ONE.createComplex((-2674.0), 615.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex6 = Complex.valueOf(1.352233648300171, 1.352233648300171);
      Complex complex7 = complex1.add(1168.223692995394);
      complex1.tan();
      Object object0 = complex0.readResolve();
      complex6.equals(object0);
      complex7.negate();
      complex5.divide(1.352233648300171);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.I.divide((-3652.865));
      complex2.INF.multiply(complex1);
      complex0.equals(complex2);
      Complex complex4 = complex3.INF.sin();
      complex4.INF.acos();
      Complex complex5 = complex0.acos();
      Complex complex6 = Complex.valueOf(0.0);
      complex5.tan();
      complex5.NaN.sqrt();
      Complex complex7 = complex6.multiply(complex3);
      complex5.multiply((-3652.865));
      complex3.getReal();
      complex6.pow((-2001.88342));
      complex6.getArgument();
      complex7.createComplex(-0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf((-447.2544304983632), (-447.2544304983632));
      Complex complex3 = complex2.createComplex((-447.2544304983632), 5.8376834484391746E-8);
      Complex complex4 = complex0.INF.multiply(complex2);
      complex0.ONE.getField();
      Complex complex5 = complex4.ZERO.multiply(complex3);
      Complex complex6 = complex5.I.exp();
      complex0.NaN.abs();
      Complex complex7 = complex0.sqrt();
      Complex.valueOf(0.0);
      complex6.hashCode();
      Complex complex8 = complex5.divide(complex1);
      complex8.NaN.getField();
      Complex complex9 = complex0.tanh();
      Complex.valueOf((-447.2544304983632));
      complex9.INF.multiply((-1250));
      complex6.cosh();
      complex7.readResolve();
      complex5.exp();
      complex6.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.divide(1026.834283);
      Complex complex1 = complex0.NaN.add(5290.585312963155);
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.NaN.add(complex0);
      complex1.ZERO.cos();
      Complex complex3 = complex0.INF.exp();
      complex3.INF.sqrt1z();
      complex3.I.reciprocal();
      complex0.ONE.exp();
      complex0.toString();
      Complex complex4 = Complex.NaN;
      Complex.valueOf(0.0, 847.68);
      complex0.multiply(complex4);
      try { 
        complex0.nthRoot((-124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -124
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf((-2521.6), 2.0);
      Complex complex2 = complex0.add(complex1);
      complex2.INF.readResolve();
      complex2.acos();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex1.equals(complex2);
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.ZERO;
      complex3.ZERO.add(complex4);
      Complex complex5 = complex0.sqrt();
      complex5.I.conjugate();
      Complex.valueOf((-5262.2733245381205));
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt1z();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-396.3270005), 0.0);
      Complex complex1 = complex0.atan();
      complex0.hashCode();
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.asin();
      complex3.INF.toString();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.tanh();
      Complex.valueOf(0.0, (-396.3270005));
      complex5.INF.negate();
      Complex complex6 = complex1.sqrt();
      complex2.getReal();
      complex1.nthRoot(1795);
      Complex complex7 = complex5.pow((-3257.655447100454));
      Complex complex8 = complex7.divide((double) 1795);
      complex3.pow(complex4);
      complex7.NaN.negate();
      complex8.multiply((-2918));
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-3315.44323857), (-3315.44323857));
      Complex complex1 = complex0.INF.add((-3315.44323857));
      complex0.getArgument();
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex(773.406);
      Complex complex4 = complex3.NaN.acos();
      complex2.ZERO.acos();
      complex4.INF.add(complex1);
      Complex complex5 = complex2.multiply(complex3);
      Complex complex6 = complex5.ZERO.multiply((-2.356194490192345));
      Complex complex7 = complex6.NaN.sinh();
      complex4.sqrt1z();
      Complex complex8 = Complex.valueOf(2642.0, (-3315.44323857));
      complex8.ONE.tan();
      Complex complex9 = complex8.I.sqrt1z();
      complex5.ZERO.subtract(complex3);
      complex5.exp();
      complex0.toString();
      complex5.isInfinite();
      complex4.getArgument();
      complex0.reciprocal();
      complex4.readResolve();
      complex7.tanh();
      complex2.pow(complex3);
      complex9.reciprocal();
      complex1.multiply(1833);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.multiply(2794.6728016352);
      Complex complex3 = complex2.atan();
      complex3.ONE.pow(2794.6728016352);
      Complex complex4 = complex2.exp();
      complex4.ZERO.tan();
      complex4.getReal();
      Complex complex5 = complex4.asin();
      complex2.NaN.readResolve();
      Complex complex6 = complex5.tanh();
      complex0.negate();
      complex5.hashCode();
      complex5.abs();
      complex6.cos();
      complex0.sqrt1z();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-377.2), 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      complex1.getImaginary();
      Complex complex3 = complex1.ONE.acos();
      complex0.I.getField();
      Complex complex4 = complex2.log();
      complex4.ONE.multiply((-377.2));
      complex4.conjugate();
      complex0.getField();
      complex1.add(0.0);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.atan();
      complex0.tan();
      complex2.NaN.getArgument();
      complex1.INF.subtract(complex0);
      Complex complex3 = complex0.divide(0.0);
      complex3.ONE.toString();
      complex1.getField();
      Complex complex4 = complex0.multiply(17);
      complex4.sinh();
      complex4.subtract((double) 17);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(677.049243);
      complex0.hashCode();
      complex1.equals(complex0);
      Complex complex2 = complex0.exp();
      complex2.ONE.acos();
      complex1.getArgument();
      Complex complex3 = Complex.valueOf(0.001476996367939425);
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex4.INF.log();
      complex5.I.tanh();
      complex5.ONE.tan();
      Complex complex6 = Complex.valueOf(677.049243, 677.049243);
      Complex complex7 = complex6.INF.tanh();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex3.I.sqrt();
      complex2.I.pow(0.0);
      complex0.getImaginary();
      complex4.atan();
      Complex complex5 = complex1.sqrt();
      complex1.getField();
      complex1.exp();
      complex4.hashCode();
      complex0.tanh();
      Complex complex6 = complex2.divide(complex1);
      Complex complex7 = complex1.createComplex((-4793.86271243179), 273.4704032);
      Complex complex8 = Complex.I;
      complex6.divide(complex8);
      complex7.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.subtract(273.4704032);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.cosh();
      complex2.ZERO.multiply(1971.39328);
      complex2.ONE.nthRoot(1);
      complex0.getArgument();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = Complex.valueOf((-329.72473829623), 1971.39328);
      complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-2445.561007), (-2445.561007));
      Complex complex1 = complex0.subtract(3156.702746);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.acos();
      complex3.negate();
      Complex complex4 = complex1.multiply((-2445.561007));
      complex3.getReal();
      complex1.cosh();
      Complex complex5 = complex4.multiply(37);
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex5.add(complex4);
      complex8.INF.readResolve();
      Complex complex9 = complex5.tanh();
      complex2.atan();
      complex2.multiply((-1668));
      complex9.isInfinite();
      complex7.add(3156.702746);
      complex4.sqrt1z();
      complex2.cos();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1289.17673), (-1289.17673));
      complex1.ONE.getArgument();
      complex0.getImaginary();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex(0.0, 1.2736636153072213E-90);
      Complex complex4 = complex3.ZERO.pow(0.0);
      complex4.I.sqrt1z();
      Complex complex5 = complex3.divide(complex2);
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = complex3.log();
      complex7.ONE.hashCode();
      complex6.ONE.readResolve();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex8.ONE.sqrt();
      complex10.NaN.pow(complex7);
      complex9.INF.createComplex((-1289.17673), (-1703.275));
      complex4.isInfinite();
      complex1.multiply(complex4);
      Complex complex11 = complex3.tanh();
      complex11.I.divide(complex9);
      complex0.INF.divide(0.0);
      complex5.getImaginary();
      Complex complex12 = complex11.subtract(1969.72028047375);
      Complex complex13 = complex12.INF.sqrt1z();
      Complex complex14 = complex11.sqrt1z();
      Complex complex15 = complex14.INF.sqrt();
      complex11.hashCode();
      complex15.add(2805.81);
      complex4.sin();
      complex1.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3340.0));
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.getImaginary();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex.valueOf(0.0);
      complex2.NaN.reciprocal();
      complex1.conjugate();
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = Complex.valueOf(0.0, (-3340.0));
      Complex complex6 = complex4.reciprocal();
      complex3.NaN.multiply(complex4);
      Complex complex7 = complex0.atan();
      complex7.ONE.getArgument();
      complex6.multiply(complex7);
      complex6.toString();
      complex1.NaN.divide(0.0);
      complex3.equals(object0);
      complex2.getReal();
      complex4.multiply((-3143));
      complex5.getField();
      Complex.valueOf((-1151.668346416958), (-982.118413863062));
      complex6.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.NaN.pow(complex1);
      complex3.ZERO.readResolve();
      complex1.readResolve();
      complex1.toString();
      Complex complex4 = complex1.acos();
      complex1.ZERO.hashCode();
      Complex complex5 = complex4.pow((-1744.82192716));
      complex4.NaN.subtract((-1744.82192716));
      complex4.sqrt1z();
      complex4.I.sin();
      complex5.NaN.reciprocal();
      Complex complex6 = Complex.valueOf((-1744.82192716), (-1744.82192716));
      complex5.getReal();
      Complex complex7 = complex6.ZERO.multiply(6.283185307179586);
      try { 
        complex7.INF.nthRoot((-1124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,124
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double double0 = 145.96754993;
      Complex complex0 = Complex.valueOf(145.96754993);
      double double1 = 2304.39879;
      Complex complex1 = complex0.divide(2304.39879);
      Complex complex2 = complex1.acos();
      complex2.hashCode();
      int int0 = 70;
      complex2.INF.multiply(70);
      try { 
        complex1.nthRoot((-4456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,456
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1143.345), (-1143.345));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.NaN.multiply(complex2);
      complex3.INF.subtract(4.920784622407246E-8);
      complex3.INF.abs();
      Complex complex4 = complex1.ZERO.cosh();
      Complex complex5 = complex1.ZERO.acos();
      Complex complex6 = complex5.I.atan();
      complex6.NaN.negate();
      Complex complex7 = complex2.I.reciprocal();
      complex7.divide(complex1);
      complex0.sinh();
      complex1.getImaginary();
      Complex complex8 = complex7.asin();
      complex8.conjugate();
      Complex complex9 = complex8.INF.sqrt1z();
      Complex complex10 = complex9.ONE.tan();
      complex10.ZERO.log();
      complex2.sin();
      complex4.tan();
      complex9.isInfinite();
      complex1.multiply(0);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, 267.7557905592);
      Complex complex2 = new Complex(0.0, 0.0);
      complex2.INF.subtract(complex0);
      complex2.ONE.sqrt();
      Complex complex3 = complex2.sinh();
      complex3.ZERO.tanh();
      complex0.equals(complex2);
      complex1.isInfinite();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.add(complex1);
      complex2.ZERO.getField();
      Complex complex3 = complex0.tanh();
      complex3.divide((-1105.9159042));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex0.ZERO.divide(complex1);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      complex1.ZERO.pow(338.094);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.ONE.add(complex2);
      Complex complex4 = complex3.ZERO.conjugate();
      complex4.sin();
      Complex complex5 = complex3.INF.divide(1287.05320746541);
      Complex complex6 = complex5.ZERO.conjugate();
      complex6.hashCode();
      complex0.INF.hashCode();
      complex0.toString();
      complex2.sqrt();
      complex3.readResolve();
      complex2.getField();
      Complex complex7 = null;
      try { 
        complex4.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-693.400162));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.ONE.atan();
      Complex complex3 = complex1.log();
      complex0.I.sinh();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.I.exp();
      complex6.NaN.sinh();
      Complex complex7 = complex6.ZERO.cosh();
      complex5.INF.readResolve();
      complex4.NaN.getArgument();
      Complex complex8 = complex0.atan();
      Complex complex9 = Complex.valueOf(0.0, 2368.1754);
      complex9.getArgument();
      Complex complex10 = complex3.add((-868.50476817079));
      Complex complex11 = complex10.ZERO.atan();
      complex11.I.sin();
      Complex complex12 = complex9.NaN.sqrt1z();
      complex8.sqrt();
      complex9.equals(complex4);
      Complex complex13 = complex3.reciprocal();
      Complex.valueOf((-693.400162));
      complex13.equals((Object) null);
      Complex.valueOf(0.0);
      complex0.add(complex12);
      complex3.hashCode();
      complex9.isInfinite();
      complex7.createComplex(6.283185307179586, (-540.7546599));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.isNaN();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.subtract(1658.863424033095);
      complex3.NaN.sqrt();
      Complex complex4 = complex0.pow(complex2);
      complex4.I.sqrt1z();
      complex0.toString();
      complex4.getField();
      Complex complex5 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex6 = complex0.INF.conjugate();
      complex0.isInfinite();
      Complex complex7 = Complex.I;
      complex1.INF.add(complex6);
      complex7.I.getField();
      complex5.divide(complex7);
      complex5.getArgument();
      complex1.sqrt();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3.861525553653117E-227);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.ONE.reciprocal();
      complex0.ONE.nthRoot(2904);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.tan();
      complex0.log();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex4.ONE.sinh();
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex7.I.tan();
      complex9.ONE.hashCode();
      complex4.I.divide(2.579867270991543E291);
      complex4.toString();
      complex4.ONE.readResolve();
      complex7.I.subtract(2.579867270991543E291);
      Complex complex10 = complex0.acos();
      complex8.multiply(complex7);
      complex4.getImaginary();
      complex9.pow(0.0);
      complex4.add(complex6);
      Complex complex11 = complex1.exp();
      complex11.acos();
      complex10.log();
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      double double0 = 1.8392815589904785;
      double double1 = 0.0;
      Complex complex0 = Complex.valueOf(1.8392815589904785, 0.0);
      Complex complex1 = complex0.I.sqrt1z();
      complex1.I.cosh();
      int int0 = (-814);
      try { 
        complex0.I.nthRoot((-814));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -814
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.multiply(1);
      Complex.valueOf((-488.21018086759));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.getReal();
      complex1.getReal();
      complex1.getReal();
      Complex complex3 = complex1.acos();
      complex3.log();
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = Complex.valueOf(1.0);
      Complex.valueOf(1.0);
      complex2.getReal();
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex6.I.divide(complex2);
      complex5.cos();
      complex3.asin();
      Complex complex8 = Complex.valueOf(1.0, 0.0);
      complex4.ZERO.negate();
      complex2.subtract(complex0);
      Complex complex9 = complex5.tanh();
      complex9.sqrt();
      complex8.getReal();
      complex5.log();
      Complex complex10 = complex4.exp();
      complex0.sinh();
      Complex complex11 = complex10.negate();
      complex6.isInfinite();
      complex11.ONE.tanh();
      complex10.tan();
      complex7.sin();
      complex11.readResolve();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-20.0), (-809.03858));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex2.I.multiply((-809.03858));
      Complex.valueOf(2630.2);
      Complex complex5 = complex0.pow(complex1);
      complex3.pow((-809.03858));
      complex1.ONE.getField();
      complex5.hashCode();
      complex0.I.subtract((-2879.91949382));
      complex1.INF.sqrt();
      Complex complex6 = complex5.subtract((-1147.229));
      Complex complex7 = complex6.sinh();
      complex7.ONE.pow(1.0921536132159379E198);
      complex3.toString();
      complex2.tanh();
      complex6.cosh();
      Complex complex8 = complex7.sinh();
      complex8.I.acos();
      complex4.pow((-2879.91949382));
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = Complex.valueOf(0.0, (-1.0));
      Complex complex6 = complex2.ZERO.divide((-3.3835280846270374E-8));
      assertTrue(complex6.equals((Object)complex3));
      
      Complex complex7 = complex0.ZERO.divide(complex1);
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex8.I.cosh();
      Complex complex10 = complex9.divide(complex5);
      assertEquals(0.5403023058681398, complex10.getImaginary(), 0.01);
      assertEquals(-0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex9.tan();
      assertEquals(0.5998406268185329, complex11.getReal(), 0.01);
      
      Complex complex12 = complex7.NaN.tanh();
      Complex complex13 = complex0.log();
      Complex complex14 = complex13.NaN.sqrt1z();
      Complex complex15 = complex13.NaN.tan();
      Complex complex16 = complex15.ZERO.subtract((-3.3835280846270374E-8));
      complex0.ONE.getArgument();
      Complex complex17 = complex13.cosh();
      Complex complex18 = complex17.ZERO.cosh();
      complex4.getField();
      complex17.getArgument();
      Complex complex19 = complex2.sqrt1z();
      String string0 = complex13.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      complex7.hashCode();
      complex4.negate();
      Complex complex20 = complex14.sinh();
      Complex complex21 = complex16.cos();
      assertSame(complex15, complex20);
      assertSame(complex15, complex12);
      assertEquals(-0.0, complex21.getImaginary(), 0.01);
      
      Complex complex22 = complex19.multiply(complex18);
      Complex complex23 = complex22.cosh();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex23.getImaginary(), 0.01);
      assertEquals(1.2113633229846195, complex22.getImaginary(), 0.01);
  }
}
