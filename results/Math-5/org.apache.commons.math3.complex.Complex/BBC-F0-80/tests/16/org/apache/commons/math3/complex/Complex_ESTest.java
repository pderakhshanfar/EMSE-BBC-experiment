/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:51:25 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.501877574291119E-26, (-540.837670375557));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex1.ZERO.sinh();
      Complex complex5 = complex4.INF.divide(complex3);
      Complex complex6 = complex4.ZERO.atan();
      complex4.add(complex0);
      complex6.I.divide(complex4);
      Complex complex7 = complex0.pow(5.501877574291119E-26);
      Complex complex8 = complex7.ONE.tan();
      complex8.ZERO.cosh();
      complex3.getArgument();
      Complex complex9 = complex7.negate();
      Complex complex10 = complex5.atan();
      Complex complex11 = complex10.multiply(729);
      complex0.sinh();
      Complex complex12 = Complex.valueOf((-4.0151502150238136E-8), 0.6088593650139138);
      Complex complex13 = complex2.multiply((-4.0151502150238136E-8));
      complex12.pow((-540.837670375557));
      Complex.valueOf(0.0);
      Complex complex14 = complex3.divide(complex9);
      complex14.ZERO.getArgument();
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex15.NaN.subtract(complex2);
      complex10.multiply(1.5707963267948966);
      complex16.subtract(complex6);
      complex15.sqrt();
      complex11.sqrt();
      Complex.valueOf((double) 729, (double) 729);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-4.932459221574639E217));
      complex0.tanh();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ZERO.cos();
      complex3.NaN.sinh();
      Complex complex4 = complex1.I.cosh();
      Complex complex5 = complex0.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.ONE.multiply(Double.POSITIVE_INFINITY);
      complex6.INF.createComplex(Double.POSITIVE_INFINITY, (-1376.3353059));
      complex0.readResolve();
      complex3.INF.multiply(complex6);
      Complex complex7 = complex1.I.negate();
      Complex complex8 = complex3.INF.multiply(1208);
      complex8.ONE.multiply(complex7);
      Complex complex9 = Complex.valueOf(198.666779);
      complex9.NaN.tanh();
      complex2.tanh();
      complex3.exp();
      complex4.sin();
      Complex.valueOf((-1376.3353059), 1492.583);
      complex5.asin();
      complex0.add(Double.POSITIVE_INFINITY);
      Complex.valueOf((-3141.0371218));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-96.5));
      Complex complex1 = Complex.valueOf(2.1076716069929933E-95, (-20.0));
      Complex complex2 = complex0.asin();
      complex1.tan();
      complex0.I.pow((-1005.0));
      complex2.nthRoot(1917);
      Complex complex3 = complex0.multiply((-1112.0522465));
      Complex complex4 = Complex.ZERO;
      complex4.exp();
      Complex complex5 = Complex.valueOf(Double.NaN, (double) 1926);
      complex5.I.reciprocal();
      complex4.createComplex((-96.5), 0.09584270417690277);
      complex3.atan();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 3.4082234423358275;
      Complex complex0 = Complex.valueOf(3.4082234423358275, 3.4082234423358275);
      Complex complex1 = complex0.NaN.multiply((-796));
      complex1.ZERO.getField();
      complex1.I.getField();
      Complex complex2 = Complex.valueOf(3.4082234423358275, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex3 = complex2.ZERO.tanh();
      complex3.NaN.multiply((-2162));
      Complex complex4 = complex0.multiply((-796));
      Complex complex5 = complex2.multiply((-796));
      Complex complex6 = complex2.divide(6.283185307179586);
      Complex complex7 = complex3.pow(complex4);
      complex7.I.acos();
      complex6.asin();
      complex1.atan();
      complex6.multiply(complex5);
      complex5.I.multiply(660);
      try { 
        complex5.nthRoot((-796));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -796
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) (-284), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.cos();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(1045.96338, 20.0);
      complex0.toString();
      Complex.valueOf(20.0, 1.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.tan();
      complex2.subtract(complex1);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      complex2.multiply(complex0);
      complex2.equals(complex0);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.multiply(complex2);
      complex2.ZERO.toString();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = Complex.ONE;
      complex7.multiply((-192.99481851374196));
      Complex complex8 = Complex.valueOf((-192.99481851374196));
      Complex complex9 = complex8.sinh();
      complex4.readResolve();
      Complex complex10 = complex2.divide(Double.POSITIVE_INFINITY);
      complex9.cos();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.sinh();
      Complex.valueOf((-3018.226));
      Complex.valueOf(Double.POSITIVE_INFINITY, (-3018.226));
      Complex complex13 = complex6.conjugate();
      Complex complex14 = complex10.subtract(3.0256181593647402E13);
      complex14.multiply(complex2);
      complex11.divide(3185.273658238);
      complex0.divide((-363.0799944));
      complex11.getField();
      Complex complex15 = Complex.valueOf(3185.273658238);
      complex15.add(complex3);
      complex13.atan();
      complex6.reciprocal();
      Complex.valueOf((-108.752581144));
      complex12.multiply((-2.260047972865202E-8));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.abs();
      complex0.ONE.abs();
      complex0.I.hashCode();
      Complex complex1 = complex0.I.reciprocal();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = Complex.valueOf((-96.5));
      complex0.toString();
      complex0.toString();
      Complex complex4 = complex0.negate();
      Complex complex5 = new Complex((-96.5), 1.0);
      complex3.pow(8.756510122348782E-27);
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5500561.981200474), (-717.899494832695));
      Complex complex1 = complex0.asin();
      complex1.I.pow(complex0);
      Complex.valueOf((-5500561.981200474), (-5500561.981200474));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(-0.0);
      complex0.NaN.toString();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.ONE.negate();
      complex2.ONE.multiply(complex0);
      Complex complex3 = complex0.ONE.sqrt1z();
      complex2.ZERO.exp();
      complex1.I.sqrt();
      complex3.ZERO.multiply((-192.99481851374196));
      complex0.I.sinh();
      complex0.readResolve();
      complex2.divide((-108.752581144));
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = complex5.I.sinh();
      complex4.NaN.negate();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex4.subtract((-192.99481851374196));
      complex8.NaN.multiply(complex4);
      Complex complex9 = complex8.ONE.divide((-108.752581144));
      complex9.I.divide((-108.752581144));
      complex1.getField();
      Complex.valueOf((-108.752581144));
      Complex complex10 = complex7.add(complex0);
      complex10.NaN.atan();
      Complex complex11 = complex2.reciprocal();
      complex11.INF.divide(-0.0);
      complex11.ZERO.atan();
      complex6.asin();
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3078.1838, 3078.1838);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.cosh();
      Complex complex4 = new Complex(3078.1838, 1.5707963267948966);
      complex0.pow(1685.70345872);
      complex3.conjugate();
      complex4.equals(complex0);
      complex4.acos();
      complex2.reciprocal();
      complex2.sinh();
      Complex.valueOf(3078.1838);
      complex4.log();
      Complex.valueOf(1837.1460894783, 3258.69706737);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = Complex.I;
      complex0.ONE.toString();
      Complex complex4 = complex0.subtract(complex3);
      complex4.INF.cosh();
      Complex complex5 = complex0.subtract(complex4);
      complex4.tanh();
      complex0.sqrt1z();
      complex1.toString();
      complex3.ONE.cosh();
      Complex complex6 = complex5.atan();
      complex4.tanh();
      complex4.INF.multiply(complex0);
      complex6.nthRoot(1276329195);
      Complex complex7 = complex2.atan();
      complex4.sqrt();
      complex2.I.sqrt1z();
      complex3.createComplex((-487.779), (-3167.389147145943));
      complex7.conjugate();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.sqrt();
      complex1.tanh();
      complex1.getField();
      Complex complex3 = complex2.sin();
      complex0.hashCode();
      double double0 = Double.NaN;
      complex3.INF.subtract(Double.NaN);
      complex1.ONE.acos();
      int int0 = (-2249);
      try { 
        complex3.nthRoot((-2249));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,249
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = new Complex(Double.NaN);
      complex3.isInfinite();
      Complex.valueOf(Double.NaN, 3107.0);
      complex1.getArgument();
      complex2.multiply(complex0);
      complex0.sqrt1z();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.add(3731.9);
      complex2.getArgument();
      complex5.negate();
      complex4.asin();
      Complex complex6 = Complex.valueOf(0.42319912171599805);
      complex6.getReal();
      Complex complex7 = complex6.tan();
      complex7.acos();
      complex4.atan();
      Complex complex8 = new Complex(5.435956447156651E-7, Double.NaN);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(3.113687387212849E-4);
      Complex complex2 = new Complex(0.0, 8.098545495417704E274);
      complex2.getArgument();
      complex2.asin();
      Complex complex3 = Complex.I;
      complex3.getReal();
      complex1.reciprocal();
      complex3.tan();
      Complex complex4 = Complex.valueOf(8.098545495417704E274, 3.113687387212849E-4);
      complex4.acos();
      complex0.atan();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.acos();
      Complex complex1 = complex0.multiply((-305));
      complex1.NaN.negate();
      complex1.ZERO.divide(complex0);
      complex0.ONE.sqrt1z();
      Complex complex2 = complex1.atan();
      complex2.ZERO.createComplex((-305), Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.log();
      try { 
        complex3.INF.nthRoot((-305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -305
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-705.7101), (-705.7101));
      complex0.NaN.abs();
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex((-2.356194490192345));
      Complex complex3 = complex1.add(complex2);
      complex1.pow((-2.356194490192345));
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.tan();
      complex5.atan();
      Complex complex6 = Complex.ZERO;
      complex3.pow(complex6);
      Complex complex7 = Complex.ZERO;
      complex1.getImaginary();
      complex5.multiply(Double.NaN);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 4.995334552140326E-8;
      Complex complex0 = new Complex(4.995334552140326E-8);
      Complex complex1 = Complex.ZERO;
      complex1.tanh();
      double double1 = 20.0;
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(4.995334552140326E-8);
      complex0.readResolve();
      Complex complex1 = new Complex(4.995334552140326E-8, (-2001.1061615311));
      Complex complex2 = complex1.log();
      complex1.pow(4.995334552140326E-8);
      Complex complex3 = Complex.ZERO;
      complex3.multiply(2725);
      complex1.subtract((-2001.1061615311));
      complex2.tanh();
      complex3.hashCode();
      complex0.add(complex3);
      Complex complex4 = Complex.valueOf(0.0, (double) 2725);
      Complex complex5 = complex4.pow(198.272);
      complex4.tan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.tanh();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-2249.97), 670.9035072425377);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ONE.pow(2692.7169399922);
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.ONE.negate();
      Complex complex6 = complex4.createComplex((-2249.97), 1.9276698418065647E249);
      Complex complex7 = complex4.asin();
      complex7.ZERO.toString();
      complex6.cosh();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex4.divide(complex8);
      Complex complex10 = complex9.pow(4158.691337322);
      Complex complex11 = complex10.negate();
      complex11.I.getArgument();
      complex9.add(complex2);
      complex8.cos();
      complex6.asin();
      Complex complex12 = complex3.add(Double.POSITIVE_INFINITY);
      Complex complex13 = complex10.sqrt1z();
      complex8.abs();
      complex9.divide(0.0);
      complex11.sqrt();
      complex13.multiply(complex12);
      complex11.divide(complex7);
      complex3.add(526.43518);
      complex5.reciprocal();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(4.995334552140326E-8);
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.tan();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.multiply(0);
      Complex complex4 = complex1.subtract(4.995334552140326E-8);
      complex3.hashCode();
      complex0.add(complex3);
      complex4.pow((-1464.966082));
      Complex complex5 = new Complex(20.0);
      complex5.tan();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4684.5884));
      Complex complex1 = complex0.I.divide(893.7);
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.ZERO.multiply((-4684.5884));
      Complex complex4 = complex2.subtract((-4684.5884));
      complex0.tanh();
      complex4.hashCode();
      Complex complex5 = new Complex(2709);
      complex5.add(complex0);
      complex3.pow(893.7);
      complex4.tan();
      Complex complex6 = Complex.INF;
      complex6.atan();
      Complex.valueOf((-4684.5884), (double) 2709);
      Complex complex7 = Complex.ZERO;
      complex3.getImaginary();
      complex5.divide(complex0);
      Complex.valueOf(893.7, (-4684.5884));
      complex7.exp();
      complex3.add(1754.73070827514);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      complex1.isNaN();
      Complex complex2 = complex1.multiply(4985);
      complex1.subtract((-1470.3));
      Complex complex3 = Complex.valueOf((-257.3630550098914), (-2710.99172672));
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(2628.4108311256, (-1470.3));
      complex5.hashCode();
      complex4.add(complex3);
      Complex complex6 = complex2.pow(0.0);
      complex6.tan();
      complex1.atan();
      complex5.nthRoot(4985);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.exp();
      complex6.sin();
      complex2.multiply(complex1);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(4.995334552140326E-8);
      complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.divide(4.995334552140326E-8);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1764.633656148599), (-1764.633656148599));
      Complex complex1 = complex0.reciprocal();
      complex1.isNaN();
      complex0.sin();
      // Undeclared exception!
      complex0.nthRoot(2045222522);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(4.995334552140326E-8);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.pow(1.0);
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex2.subtract(1.0);
      Complex complex5 = complex0.tanh();
      complex3.hashCode();
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex4.pow(Double.POSITIVE_INFINITY);
      complex2.tan();
      complex4.atan();
      Complex complex8 = Complex.INF;
      complex8.pow(complex0);
      complex7.divide(complex0);
      complex6.nthRoot(2691);
      Complex complex9 = new Complex(884.55745, (-1763.633656148599));
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, 3817.41601013979);
      Complex complex11 = complex6.tanh();
      complex5.exp();
      complex6.subtract(complex7);
      complex10.add(complex11);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-4879.04));
      complex0.abs();
      Complex complex1 = complex0.subtract(0.0);
      complex0.tanh();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.09584270417690277, 0.09584270417690277);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex1.multiply(complex0);
      complex0.I.readResolve();
      complex0.isInfinite();
      Complex complex4 = complex0.conjugate();
      complex2.getArgument();
      complex1.isInfinite();
      complex3.sqrt1z();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex4.add((-1138.0));
      complex4.getArgument();
      complex1.asin();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, (-0.7853981633974483));
      complex7.getReal();
      Complex complex8 = complex3.reciprocal();
      complex2.tan();
      Complex complex9 = complex6.acos();
      Complex.valueOf((-0.7853981633974483), 0.09584270417690277);
      Complex complex10 = complex9.cosh();
      complex10.I.acos();
      complex2.sinh();
      complex5.multiply(378.821);
      Complex complex11 = Complex.ZERO;
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.09584270417690277, 0.09584270417690277);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex1.multiply(complex0);
      complex1.isInfinite();
      Complex complex4 = (Complex)complex0.I.readResolve();
      complex0.isInfinite();
      Complex.valueOf(0.09584270417690277, 0.09584270417690277);
      complex1.getArgument();
      complex4.isInfinite();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex1.negate();
      complex5.add((-0.009185686154036409));
      complex1.getArgument();
      Complex complex8 = complex3.asin();
      complex7.getReal();
      complex5.reciprocal();
      complex8.tan();
      complex7.acos();
      Complex complex9 = complex5.cosh();
      complex6.sinh();
      complex9.multiply((-3037.3994754));
      Complex complex10 = Complex.ZERO;
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.09584270417690277, 0.09584270417690277);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.reciprocal();
      complex1.multiply(complex0);
      complex0.readResolve();
      Complex complex3 = complex1.add(0.09584270417690277);
      complex0.equals(complex2);
      complex1.log();
      complex3.pow(complex2);
      complex2.getArgument();
      Complex complex4 = complex3.cosh();
      complex4.reciprocal();
      Complex complex5 = new Complex(0.7983405703200145, 0.09584270417690277);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(4.995334552140326E-8);
      complex0.equals(complex0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.INF.pow(complex1);
      complex0.getArgument();
      complex2.cosh();
      complex1.reciprocal();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.ZERO.subtract(complex3);
      Complex complex5 = new Complex(0.7983405703200145, 0.0);
      complex0.exp();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.pow(complex0);
      complex2.exp();
      complex2.getArgument();
      complex2.cosh();
      Complex.valueOf(Double.NaN, (-3401.06040246014));
      complex1.reciprocal();
      Complex complex3 = new Complex(1732.339641124, (-198));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1365.4870498828745));
      Complex complex1 = complex0.atan();
      complex1.readResolve();
      complex1.exp();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf((-1265.2490397), 20.0);
      complex3.divide(1286.0);
      complex0.hashCode();
      complex1.atan();
      complex2.sinh();
      Complex complex4 = Complex.valueOf(0.0, 8.694853785564504E-179);
      Complex complex5 = new Complex((-1265.2490397), 2.7553817452272217E-6);
      complex5.getArgument();
      Complex complex6 = complex5.cosh();
      complex4.reciprocal();
      complex6.sqrt();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1.626333475112915);
      Complex complex1 = Complex.valueOf(1.626333475112915);
      Complex.valueOf(1.2015275955200195, 1.2015275955200195);
      complex1.abs();
      complex1.subtract(1.626333475112915);
      complex1.tanh();
      Complex complex2 = new Complex((-2030.579065512), 1763.633656148599);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1764.633656148599), (-1764.633656148599));
      complex0.ONE.atan();
      Complex complex1 = complex0.INF.add(0.0);
      complex1.ZERO.tanh();
      Complex complex2 = Complex.valueOf(0.0, (-1764.633656148599));
      complex2.ONE.divide(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex0.NaN.multiply(1);
      Complex complex6 = complex4.ZERO.subtract((-1764.633656148599));
      Complex complex7 = complex6.NaN.tanh();
      complex7.INF.hashCode();
      Complex complex8 = complex4.add(complex0);
      Complex complex9 = complex3.tan();
      Complex complex10 = complex9.I.atan();
      complex10.ZERO.pow(complex3);
      complex6.getImaginary();
      complex8.divide(complex8);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-550.0), Double.POSITIVE_INFINITY);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      complex0.cosh();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex(Double.NaN, Double.NaN);
      Complex complex3 = complex0.exp();
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.09584270417690277, 0.09584270417690277);
      Complex complex1 = complex0.cos();
      complex0.I.reciprocal();
      complex1.multiply(complex0);
      complex1.isInfinite();
      complex0.I.readResolve();
      complex0.isInfinite();
      Complex complex2 = complex0.conjugate();
      complex1.getArgument();
      complex0.isInfinite();
      Complex complex3 = complex1.multiply(complex2);
      complex1.sqrt1z();
      complex2.negate();
      complex0.nthRoot(1438);
      Complex complex4 = complex3.cosh();
      complex4.multiply((double) 1438);
      Complex complex5 = new Complex(4158.734, 0.09584270417690277);
      complex5.exp();
      Complex.valueOf(6.283185307179586, (-897.641826));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(4.995334552140326E-8);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex1.log();
      complex1.pow((-0.9715162566482856));
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.multiply(479);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.subtract(2796.3179718);
      Complex complex11 = complex7.tanh();
      complex4.hashCode();
      Complex complex12 = complex4.add(complex5);
      Complex complex13 = complex11.pow((-811.644));
      complex2.tan();
      Complex complex14 = complex11.atan();
      complex8.pow(complex14);
      complex7.getImaginary();
      complex12.divide(complex13);
      complex2.add(0.0);
      complex10.abs();
      complex14.toString();
      complex3.abs();
      complex6.hashCode();
      complex10.cosh();
      complex11.getReal();
      complex14.isInfinite();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1764.633656148599), (-1764.633656148599));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex2.ZERO.tanh();
      complex3.ZERO.tanh();
      Complex complex4 = complex3.divide(1457.919442957);
      complex1.hashCode();
      Complex complex5 = complex1.atan();
      Complex complex6 = Complex.I;
      complex6.sinh();
      Complex complex7 = Complex.valueOf(0.0, (-1764.633656148599));
      Complex complex8 = complex5.exp();
      complex4.pow((-1179.312201192));
      Complex complex9 = complex1.add((-1179.312201192));
      complex9.toString();
      complex2.multiply(0.0);
      complex1.getField();
      complex1.negate();
      complex6.toString();
      complex4.pow((-20.0));
      complex7.conjugate();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = Complex.I;
      complex11.createComplex((-2749.1225569446), 0.0);
      Complex complex12 = Complex.INF;
      complex1.sqrt();
      complex10.cosh();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.log();
      Complex complex5 = complex1.I.createComplex(0.0, 0.0);
      complex4.nthRoot(1);
      Complex complex6 = complex2.cosh();
      complex0.pow(392.91);
      complex3.conjugate();
      complex3.reciprocal();
      complex6.createComplex(0.0, 0.0);
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.sqrt();
      complex5.cosh();
      Complex complex10 = new Complex(0.9255376551842821, 0.0);
      complex10.negate();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.I.multiply((-198));
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = Complex.INF;
      complex4.exp();
      complex4.pow((double) (-198));
      Complex complex5 = complex2.add((double) (-198));
      complex3.toString();
      Complex complex6 = complex0.multiply(2233.735597011286);
      complex6.getField();
      complex1.negate();
      complex5.toString();
      Complex complex7 = new Complex(3107.525999491785);
      complex7.pow(3107.525999491785);
      complex3.conjugate();
      complex1.reciprocal();
      complex7.createComplex((-198), 827.5205962);
      Complex complex8 = Complex.INF;
      complex2.sqrt();
      complex5.cosh();
      Complex complex9 = Complex.ONE;
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-780.6982929447), (-780.6982929447));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.reciprocal();
      complex2.multiply(complex1);
      complex2.isInfinite();
      complex0.readResolve();
      complex2.isInfinite();
      Complex complex3 = complex2.conjugate();
      complex1.getArgument();
      complex3.isInfinite();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex1.add((-20.0));
      complex3.getArgument();
      complex4.asin();
      complex4.getReal();
      Complex complex7 = new Complex(-0.0);
      Complex complex8 = complex6.tan();
      complex8.INF.hashCode();
      complex6.acos();
      complex5.cosh();
      complex6.sinh();
      Complex complex9 = Complex.INF;
      Complex complex10 = Complex.ZERO;
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.09584270417690277, 0.09584270417690277);
      Complex complex1 = Complex.valueOf(0.09584270417690277, 1083.6775);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.cosh();
      complex0.abs();
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex1.add(1083.6775);
      complex4.atan();
      complex3.cos();
      complex0.hashCode();
      complex1.hashCode();
      complex3.asin();
      Complex complex6 = complex3.createComplex(5.570746890271039E-4, 1083.6775);
      complex1.add(complex2);
      complex5.add(538.5579438512297);
      Complex complex7 = complex5.multiply(3321);
      Complex complex8 = complex7.sqrt();
      complex4.acos();
      complex7.sinh();
      complex6.sqrt();
      complex8.createComplex(0.3346569538116455, 1.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-780.6982929447), (-780.6982929447));
      Complex complex1 = Complex.valueOf(1083.6775, (-780.6982929447));
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.cosh();
      complex3.I.abs();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex0.add(1083.6775);
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex6.cos();
      complex7.NaN.hashCode();
      complex7.hashCode();
      Complex complex8 = complex6.ONE.asin();
      complex4.createComplex(1083.6775, 1083.6775);
      complex7.add(complex4);
      complex8.ONE.add(1083.6775);
      complex1.sqrt();
      complex8.cosh();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1764.633656148599), (-1764.633656148599));
      complex0.ONE.atan();
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.ZERO.tanh();
      complex3.ONE.divide(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.pow((-3549.56899058503));
      complex0.NaN.multiply(1);
      Complex complex6 = complex5.ZERO.subtract((-1764.633656148599));
      Complex complex7 = complex6.NaN.tanh();
      complex7.INF.hashCode();
      Complex complex8 = complex5.add(complex0);
      Complex complex9 = complex6.ZERO.pow(0.0);
      Complex complex10 = complex4.tan();
      Complex complex11 = complex10.I.atan();
      complex11.ZERO.pow(complex9);
      complex6.getImaginary();
      Complex complex12 = complex8.divide(complex9);
      complex6.nthRoot(1);
      Complex complex13 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex14 = Complex.valueOf((-1764.633656148599), Double.POSITIVE_INFINITY);
      complex14.tanh();
      complex4.exp();
      complex8.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-780.6982929447), (-780.6982929447));
      Complex complex1 = Complex.valueOf(1083.6775, (-780.6982929447));
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.cosh();
      complex3.I.abs();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex0.add(1083.6775);
      Complex complex6 = complex4.subtract(1083.6775);
      Complex complex7 = complex5.tanh();
      complex3.hashCode();
      complex7.add(complex2);
      complex5.pow(1083.6775);
      complex0.tan();
      complex7.atan();
      Complex complex8 = complex2.pow(complex6);
      complex4.getImaginary();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.divide(complex8);
      complex10.add(1.5716634677516025E-165);
      complex3.abs();
      complex3.toString();
      complex4.abs();
      complex9.hashCode();
      complex4.cosh();
      complex1.getReal();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-2536.9371));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.I.add((-20.0));
      complex0.INF.readResolve();
      Complex complex3 = complex0.divide((-2536.9371));
      Complex complex4 = complex3.tan();
      complex4.reciprocal();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex4.INF.exp();
      Complex complex8 = complex6.ONE.sinh();
      complex3.equals(complex5);
      Complex.valueOf((-20.0));
      Complex complex9 = complex7.NaN.asin();
      complex9.I.multiply(complex2);
      complex4.log();
      complex7.multiply(267);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.I.multiply((-198));
      complex1.INF.tanh();
      complex0.NaN.getArgument();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf((-826.923994));
      Complex complex5 = complex3.subtract(complex2);
      Complex complex6 = complex1.cosh();
      complex5.multiply((-0.8923736994492639));
      complex6.cosh();
      complex4.sin();
      complex5.pow(2.0);
      Complex complex7 = Complex.ONE;
      complex2.readResolve();
      complex6.abs();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.09584270417690277, 0.09584270417690277);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.reciprocal();
      complex1.multiply(complex0);
      complex1.isInfinite();
      complex0.I.readResolve();
      complex0.isInfinite();
      Complex complex3 = complex0.conjugate();
      complex1.getArgument();
      complex0.isInfinite();
      complex1.multiply(complex3);
      complex1.sqrt1z();
      complex3.negate();
      Complex complex4 = complex0.add((-897.641826));
      complex3.getArgument();
      complex4.asin();
      complex0.getReal();
      Complex complex5 = complex2.reciprocal();
      complex5.tan();
      Complex complex6 = complex5.acos();
      complex1.cosh();
      complex6.sinh();
      complex3.multiply(378.821);
      Complex complex7 = Complex.ZERO;
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(4.995334552140326E-8);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ONE.add(4.995334552140326E-8);
      complex0.equals(object0);
      Complex complex2 = complex0.INF.pow(complex0);
      Complex complex3 = ((Complex) object0).I.divide(4.995334552140326E-8);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.negate();
      complex5.toString();
      complex6.sqrt();
      complex3.hashCode();
      complex1.add(4.995334552140326E-8);
      complex4.sin();
      int int0 = 0;
      Complex complex7 = Complex.INF;
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(4.995334552140326E-8);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.ONE.add(4.995334552140326E-8);
      complex1.isNaN();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.INF.pow(complex2);
      Complex complex4 = complex2.I.divide(4.995334552140326E-8);
      complex0.I.sqrt1z();
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = new Complex(4.995334552140326E-8, 4.995334552140326E-8);
      complex0.getArgument();
      complex0.multiply(4.995334552140326E-8);
      complex5.getField();
      complex4.negate();
      Complex complex7 = new Complex(0.1868542712327284);
      complex7.toString();
      Complex complex8 = complex5.pow(6.221431049198145E-4);
      Complex complex9 = complex1.conjugate();
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex10.subtract(complex7);
      Complex complex11 = complex8.cosh();
      Complex complex12 = complex9.multiply(0.1868542712327284);
      Complex complex13 = Complex.valueOf(0.1868542712327284);
      complex13.cosh();
      complex11.sin();
      complex12.pow(4424.4767);
      complex13.multiply((-1351));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.abs();
      Complex complex1 = complex0.multiply(0.0);
      complex0.sqrt1z();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.NaN;
      complex3.NaN.exp();
      complex2.equals(complex3);
      complex0.getField();
      complex1.NaN.getArgument();
      complex1.nthRoot(929);
      complex0.INF.tan();
      Complex complex4 = complex0.pow((-683.89252137));
      complex4.multiply(318.861);
      Complex complex5 = Complex.NaN;
      complex5.exp();
      Complex.valueOf((-683.89252137), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(1.626333475112915);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.atan();
      complex1.NaN.readResolve();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.ONE.divide(1.626333475112915);
      complex5.NaN.hashCode();
      complex5.ZERO.atan();
      complex4.ONE.sinh();
      Complex.valueOf(1.626333475112915, 0.0);
      Complex complex6 = complex0.ZERO.exp();
      complex1.pow(2.061153470123145E-9);
      complex3.add(2233.735597011286);
      complex4.toString();
      Complex complex7 = complex2.NaN.multiply(2.061153470123145E-9);
      complex6.getField();
      complex6.INF.negate();
      complex2.toString();
      Complex complex8 = complex3.pow(0.0);
      Complex complex9 = complex6.conjugate();
      Complex complex10 = Complex.valueOf(2233.735597011286);
      complex8.subtract(complex10);
      Complex complex11 = complex2.cosh();
      complex11.I.multiply(2233.735597011286);
      complex7.cosh();
      complex9.sin();
      complex6.pow(2.061153470123145E-9);
      complex4.multiply((-1351));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1102.95, 0.0);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.pow(complex1);
      complex4.ONE.tanh();
      complex0.NaN.hashCode();
      Complex complex5 = complex3.createComplex((-1.0), 1102.95);
      complex0.getArgument();
      Complex.valueOf(1.5707963267948966, 1102.95);
      complex5.nthRoot(2726);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1);
      Complex complex1 = complex0.atan();
      complex0.abs();
      complex0.getReal();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-921.9774417021));
      complex2.ZERO.pow((-2317.75220717995));
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.NaN.reciprocal();
      complex6.I.getField();
      Complex complex7 = complex5.add(0.0);
      complex5.INF.toString();
      Complex complex8 = complex5.INF.add(complex4);
      complex5.I.readResolve();
      Complex complex9 = complex3.I.exp();
      complex9.toString();
      complex9.abs();
      Complex complex10 = complex1.sqrt();
      complex10.I.pow(complex8);
      complex10.ZERO.toString();
      complex10.NaN.multiply(1);
      Complex complex11 = complex10.exp();
      complex11.INF.add(complex8);
      complex11.add((double) 1);
      Complex.valueOf(0.0);
      complex3.NaN.readResolve();
      complex1.getArgument();
      complex3.getImaginary();
      complex7.sqrt1z();
      complex4.subtract(complex10);
      complex8.exp();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.09584270417690277, 0.09584270417690277);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.reciprocal();
      complex1.multiply(complex0);
      complex1.isInfinite();
      complex0.I.readResolve();
      complex0.isInfinite();
      Complex complex3 = complex0.conjugate();
      complex1.getArgument();
      complex0.isInfinite();
      Complex complex4 = complex1.multiply(complex3);
      complex4.ZERO.exp();
      complex2.tanh();
      complex4.NaN.negate();
      complex0.toString();
      complex4.ZERO.sqrt();
      complex0.hashCode();
      Complex complex5 = complex4.add((-0.009185686154036409));
      complex5.ONE.sin();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-780.6982929447), (-780.6982929447));
      Complex complex1 = Complex.valueOf(1083.6775, (-780.6982929447));
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.cosh();
      complex3.I.abs();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex0.add(1083.6775);
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex6.cos();
      complex7.NaN.hashCode();
      complex7.hashCode();
      Complex complex8 = complex6.ONE.asin();
      complex4.createComplex(1083.6775, 1083.6775);
      complex7.add(complex4);
      complex8.ONE.add(1083.6775);
      complex4.multiply(3321);
      complex8.sqrt();
      complex7.acos();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex2.I.divide((-2452.05867566));
      Complex complex6 = complex5.INF.pow(0.0);
      Complex complex7 = complex6.ZERO.tan();
      complex7.ZERO.toString();
      complex5.ZERO.acos();
      Complex complex8 = complex3.ZERO.add(0.0);
      Complex complex9 = complex2.INF.multiply(complex0);
      Complex.valueOf((-103.3));
      complex9.ZERO.abs();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex0.log();
      complex11.NaN.subtract((-2452.05867566));
      complex0.add(complex10);
      complex2.getField();
      Complex complex12 = complex2.subtract(complex10);
      complex0.I.hashCode();
      Complex complex13 = complex12.divide(complex11);
      complex4.subtract(complex3);
      complex4.add(0.0);
      complex1.sin();
      complex8.sinh();
      Complex complex14 = complex13.cos();
      complex14.sqrt();
      try { 
        complex9.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3246.4209), 2.0);
      Complex complex1 = Complex.valueOf(1547.754536869);
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.ONE.add(2.0);
      complex0.INF.asin();
      complex2.add(complex0);
      complex0.getImaginary();
      complex0.isInfinite();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.ONE.sinh();
      complex3.NaN.toString();
      complex3.INF.subtract(complex0);
      Complex.valueOf(0.0);
      complex3.I.log();
      complex0.isInfinite();
      complex3.toString();
      complex1.isNaN();
      Complex complex4 = complex3.multiply(0.0);
      complex4.INF.sinh();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.hashCode();
      Complex complex4 = complex1.I.multiply(complex2);
      complex2.INF.atan();
      complex0.getReal();
      Complex complex5 = complex2.atan();
      complex5.INF.log();
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex6.ONE.sinh();
      complex7.I.abs();
      complex1.subtract(0.0);
      Complex complex8 = complex4.I.reciprocal();
      complex8.ZERO.pow(1.0);
      Complex complex9 = complex1.subtract(complex0);
      complex9.ZERO.conjugate();
      Complex complex10 = complex4.acos();
      complex9.abs();
      Complex complex11 = complex6.subtract(complex3);
      complex11.INF.reciprocal();
      Complex complex12 = complex10.ZERO.sqrt1z();
      complex3.subtract(complex9);
      complex10.tanh();
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex13.INF.tanh();
      complex3.reciprocal();
      complex12.exp();
      complex10.log();
      Complex.valueOf((-942.0909028993));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.abs();
      Complex complex1 = complex0.multiply(0.0);
      complex0.sqrt1z();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.NaN;
      complex3.NaN.exp();
      complex2.equals(complex3);
      complex0.getField();
      complex1.NaN.getArgument();
      complex1.nthRoot(929);
      complex0.INF.tan();
      Complex complex4 = complex0.pow((-683.89252137));
      complex1.multiply((-200));
      Complex.valueOf(2808.238632501588, 2808.238632501588);
      complex3.getArgument();
      Complex complex5 = complex4.acos();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(788.793293329457, (-1424.79157));
      complex0.ZERO.nthRoot(779);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.I.sqrt1z();
      complex2.I.conjugate();
      complex1.ONE.subtract((double) 779);
      Complex complex3 = complex0.INF.conjugate();
      complex0.equals("L");
      complex0.negate();
      complex3.add(0.0);
      complex1.hashCode();
      complex2.getImaginary();
      Complex.valueOf(0.0, 0.0);
      complex0.getImaginary();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.4013456880651706E-8), (-2927.0));
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.ONE.pow(complex0);
      complex0.ZERO.add((-1.4013456880651706E-8));
      Complex complex3 = complex0.exp();
      complex3.I.sin();
      Complex.valueOf(1011.6);
      Complex complex4 = complex3.pow(2.1301292155181736E133);
      Complex complex5 = Complex.ZERO;
      complex4.equals(complex5);
      Complex complex6 = complex4.tan();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(0.0, (-3141.183696578));
      Complex complex2 = complex1.I.conjugate();
      complex2.INF.tanh();
      complex0.isInfinite();
      Complex complex3 = complex0.INF.asin();
      complex3.ONE.cos();
      complex0.getReal();
      Complex complex4 = complex0.createComplex(55.49755748833, 0.008750664070248604);
      Complex complex5 = complex4.cos();
      complex5.readResolve();
      complex1.sin();
      Complex complex6 = complex2.sinh();
      complex5.getField();
      complex1.tan();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.abs();
      Complex complex2 = complex1.subtract(complex0);
      complex1.createComplex(1.4300386517357162E-11, 1223.962007);
      complex2.divide(complex0);
      Complex complex3 = complex0.multiply(1223.962007);
      complex1.getReal();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.subtract(complex1);
      Complex complex7 = complex6.multiply((-192.8389071583));
      Complex complex8 = Complex.NaN;
      complex8.I.negate();
      complex5.pow(complex8);
      complex6.NaN.reciprocal();
      complex5.I.add(3096.82868);
      Complex complex9 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ZERO.subtract(complex7);
      complex10.NaN.multiply((-701));
      Complex complex11 = complex6.I.multiply((-1174.825496673));
      complex11.NaN.atan();
      Complex complex12 = complex4.multiply(complex2);
      complex12.negate();
      complex3.abs();
      complex6.divide(complex4);
      complex5.tanh();
      Complex.valueOf((-890.1257549311207));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.sin();
      complex2.I.tan();
      Complex complex3 = complex2.log();
      complex1.I.createComplex(803.673929, 0.0);
      complex3.nthRoot(1);
      complex1.ONE.subtract((double) 1);
      Complex complex4 = complex2.cosh();
      complex4.multiply((-2670.0));
      complex1.exp();
      Complex.valueOf((double) 1, 803.673929);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex0.ONE.log();
      complex0.nthRoot(1397);
      Complex complex5 = complex4.I.add((double) 1397);
      complex0.getReal();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex6.subtract(0.0);
      complex1.getImaginary();
      Complex complex8 = complex1.exp();
      complex8.NaN.conjugate();
      Complex complex9 = complex7.multiply(0.0);
      Complex complex10 = complex9.I.divide(complex1);
      complex10.I.divide(0.0);
      Complex complex11 = complex9.add(complex3);
      complex11.I.pow(307.344);
      complex2.ZERO.nthRoot(444);
      complex9.NaN.subtract(0.0);
      complex0.abs();
      complex5.cosh();
      complex5.add(complex9);
      complex6.sqrt();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.ONE.asin();
      Complex complex4 = Complex.valueOf(797.14432);
      Complex complex5 = complex4.ZERO.subtract(797.14432);
      Complex complex6 = complex4.I.add(complex1);
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = Complex.ZERO;
      Complex.valueOf(0.0, 797.14432);
      complex8.I.sin();
      Complex complex9 = complex7.I.add(complex8);
      Complex complex10 = complex9.ONE.conjugate();
      complex5.INF.add(complex10);
      Complex complex11 = complex0.sqrt1z();
      complex11.I.sqrt();
      Complex complex12 = complex11.ONE.multiply(1);
      Complex complex13 = complex12.cos();
      complex13.NaN.nthRoot(1);
      complex2.isInfinite();
      complex1.isInfinite();
      complex2.readResolve();
      Complex complex14 = complex1.cos();
      complex14.ZERO.add(87.4066);
      complex1.getField();
      complex5.getReal();
      complex4.exp();
      Complex complex15 = complex6.atan();
      complex15.I.getField();
      complex6.abs();
      complex0.cos();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      complex1.I.multiply((-198));
      Complex complex2 = complex1.INF.tanh();
      complex0.NaN.getArgument();
      Complex complex3 = complex0.cosh();
      complex3.reciprocal();
      complex3.sqrt();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3100480183046895E179, 2.3100480183046895E179);
      complex0.I.abs();
      Complex complex1 = new Complex(1.0, 20.0);
      complex0.ZERO.add(complex1);
      Complex complex2 = complex0.ZERO.createComplex(2.3100480183046895E179, 0.0);
      complex0.abs();
      complex0.isNaN();
      Complex.valueOf(3.266901237219584E179);
      complex0.reciprocal();
      Complex.valueOf((-1519.570438), 2.3100480183046895E179);
      complex2.I.tanh();
      complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-1140.504115095), (-1140.504115095));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = Complex.ONE;
      complex0.ONE.subtract(complex3);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex5.NaN.tan();
      complex0.tanh();
      complex6.ONE.multiply((-1140.504115095));
      complex3.readResolve();
      Complex complex7 = complex4.pow((-1140.504115095));
      complex7.add(complex2);
      complex6.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(843.6, 0.0);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.INF.add(0.0);
      complex2.multiply(0);
      complex0.equals("4IyqS@b");
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.I.sinh();
      Complex complex6 = complex1.ZERO.tanh();
      complex6.I.multiply(240);
      Complex complex7 = complex0.createComplex((-562.999594008), 843.6);
      complex7.NaN.getField();
      complex4.ONE.exp();
      complex7.INF.multiply((-1387.489));
      complex4.subtract(complex1);
      Complex complex8 = complex4.sin();
      Complex complex9 = complex8.ZERO.subtract((double) 240);
      complex3.divide(complex5);
      complex9.sinh();
      complex0.conjugate();
      complex5.getField();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-765.96));
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.multiply(complex1);
      complex2.ZERO.divide(0.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.I.add(complex3);
      Complex complex5 = complex0.ONE.sin();
      complex5.INF.multiply(1);
      Complex complex6 = Complex.ONE;
      complex0.pow(complex6);
      Complex complex7 = Complex.I;
      complex7.NaN.abs();
      complex1.divide(complex7);
      Complex complex8 = Complex.valueOf(2215.82395534);
      complex7.I.subtract((-1129.0));
      complex4.getField();
      complex6.sin();
      Complex complex9 = new Complex(1434.1890468333283);
      complex0.multiply(complex9);
      complex7.multiply(765.96);
      complex1.hashCode();
      Complex.valueOf(1434.1890468333283, (-1.0));
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex1.ZERO.cosh();
      complex0.tanh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = complex3.reciprocal();
      complex3.getArgument();
      complex5.ZERO.createComplex(0.0, (-841.619437712192));
      complex2.readResolve();
      complex1.getArgument();
      complex0.abs();
      complex1.getField();
      complex3.isInfinite();
      Complex complex6 = complex2.reciprocal();
      complex3.sinh();
      complex0.isInfinite();
      Complex complex7 = complex6.subtract(complex3);
      complex7.ONE.add((-1.9821451970481713E-7));
      complex4.getImaginary();
      Complex complex8 = complex5.acos();
      complex8.pow(complex4);
      complex0.readResolve();
      complex4.subtract(298.962);
      complex1.toString();
      complex0.isInfinite();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex2.ZERO.cosh();
      complex1.NaN.getArgument();
      Complex complex5 = complex1.ZERO.createComplex(Double.NaN, 0.0);
      complex5.INF.add(Double.NaN);
      complex0.divide(complex1);
      complex1.subtract(complex2);
      complex4.conjugate();
      complex3.divide(complex0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.INF.add((-1981.0));
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex4.I.multiply(complex3);
      complex5.I.sqrt();
      Complex complex6 = complex5.ONE.multiply(1);
      complex1.negate();
      complex0.INF.multiply(1);
      Complex complex7 = complex1.I.subtract(1.0142320772726397E304);
      complex7.ONE.nthRoot(1);
      complex0.negate();
      Complex complex8 = complex4.INF.tan();
      complex8.ONE.toString();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex4.tan();
      complex9.createComplex(1, (-2534.44845));
      complex2.add(complex7);
      complex7.isInfinite();
      complex0.multiply((-2757.8680287));
      complex9.acos();
      Complex.valueOf((-20.0));
      complex7.conjugate();
      complex10.cos();
      complex3.subtract(complex8);
      Complex complex11 = Complex.INF;
      complex6.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5202.623698616521);
      Complex complex1 = complex0.createComplex((-2272.0), 5202.623698616521);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = Complex.valueOf((-2272.0));
      complex3.NaN.hashCode();
      complex1.INF.getField();
      Complex complex4 = complex0.pow((-1762.5415));
      Complex complex5 = complex4.asin();
      complex5.subtract(5202.623698616521);
      complex1.log();
      complex5.getReal();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.acos();
      complex7.I.cos();
      complex2.multiply(complex6);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.divide(985.8);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex1.ONE.asin();
      Complex complex5 = complex0.conjugate();
      complex5.readResolve();
      Complex complex6 = complex5.ONE.asin();
      complex5.I.subtract(complex2);
      Complex complex7 = complex3.negate();
      complex7.subtract(0.0);
      Complex.valueOf((-820.9973154), 0.0);
      Complex complex8 = complex6.INF.pow(complex5);
      complex1.INF.hashCode();
      complex8.ONE.toString();
      complex2.I.getArgument();
      complex0.readResolve();
      complex3.cos();
      complex2.I.add((-626.900073599352));
      complex5.add(1270.914);
      complex3.multiply(complex5);
      complex4.getImaginary();
      Complex complex9 = complex6.pow(1.5707963267948966);
      complex6.exp();
      complex9.getArgument();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(4.995334552140326E-8);
      Object object0 = complex0.readResolve();
      complex0.ONE.add(4.995334552140326E-8);
      complex0.equals(object0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.INF.pow(complex1);
      complex1.I.divide(4.995334552140326E-8);
      complex0.I.sqrt1z();
      Complex complex3 = complex2.NaN.negate();
      complex3.ZERO.add(4.995334552140326E-8);
      complex0.getArgument();
      Complex complex4 = complex0.asin();
      complex4.getReal();
      Complex complex5 = complex2.reciprocal();
      complex1.ONE.tan();
      Complex complex6 = complex5.acos();
      complex1.cosh();
      complex6.ZERO.sinh();
      complex6.multiply(4.995334552140328E-8);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      double double0 = (-1176.0169);
      Complex complex0 = new Complex((-1176.0169));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.multiply((-1785));
      complex0.isInfinite();
      Complex complex3 = complex1.I.divide(complex2);
      complex1.getReal();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.I.acos();
      Complex complex7 = complex5.subtract((-2658.1352691067036));
      Complex complex8 = complex7.sqrt();
      complex1.sqrt1z();
      complex3.isInfinite();
      complex8.createComplex((-2658.1352691067036), (-1785));
      complex1.hashCode();
      complex4.cos();
      try { 
        complex6.nthRoot((-1785));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,785
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(50.31097, 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.NaN.tan();
      complex2.INF.getField();
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex0.ONE.multiply((-623.3770180133));
      complex0.abs();
      complex3.ONE.hashCode();
      Complex complex5 = complex0.divide(671.0);
      Complex complex6 = complex5.atan();
      complex6.I.sin();
      complex6.ZERO.atan();
      complex6.ZERO.abs();
      complex4.reciprocal();
      complex0.add(2.0);
      Complex complex7 = complex3.subtract(0.0);
      complex7.negate();
      complex1.add(complex4);
      complex7.sqrt();
      complex1.multiply(complex5);
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      complex0.hashCode();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.subtract(complex1);
      complex0.ONE.pow(complex3);
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ONE.sin();
      complex6.NaN.subtract(1319.0007483811048);
      Complex complex7 = complex2.I.exp();
      complex3.log();
      Complex complex8 = complex3.add(complex1);
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex9.I.subtract(complex2);
      Complex complex11 = complex10.ONE.add(2.0);
      complex2.tan();
      complex1.divide(complex8);
      complex0.sin();
      Complex complex12 = complex4.tan();
      Complex complex13 = complex0.tan();
      complex12.abs();
      complex13.ONE.multiply(0);
      complex12.ZERO.tan();
      complex13.getReal();
      complex9.tanh();
      complex7.atan();
      complex12.hashCode();
      Complex complex14 = complex11.tan();
      complex7.exp();
      complex14.asin();
      complex8.getReal();
      complex14.readResolve();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4606.251893703454);
      Complex complex1 = complex0.multiply(2752.5973079);
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.createComplex(1642.6, 2752.5973079);
      Complex complex5 = complex4.subtract(0.0);
      complex3.getArgument();
      complex2.multiply(complex3);
      Complex complex6 = complex2.exp();
      complex6.INF.pow(complex5);
      complex6.createComplex(1.361509084701538, 0.0);
      complex2.hashCode();
      complex2.divide((-280.311));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(428.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex2.multiply(428.0);
      complex4.INF.conjugate();
      complex3.NaN.cos();
      complex1.NaN.add(complex2);
      complex1.NaN.reciprocal();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.pow(0.0);
      complex7.ZERO.cos();
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex5.divide(213.798629963215);
      complex9.INF.divide(complex3);
      complex0.isInfinite();
      Complex.valueOf(0.0, (-1.1701113164306871E-7));
      complex0.subtract(complex8);
      complex8.getReal();
      complex5.cos();
      complex4.cosh();
      Complex.valueOf(456.023, 0.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-116.164451886196));
      complex0.I.abs();
      Complex complex1 = complex0.INF.negate();
      complex1.ONE.abs();
      Complex complex2 = complex0.negate();
      complex0.NaN.add(0.1710275411605835);
      complex2.ONE.getArgument();
      complex0.getReal();
      Complex complex3 = complex2.acos();
      complex0.I.log();
      Complex complex4 = complex0.ONE.sqrt1z();
      complex0.exp();
      complex0.isInfinite();
      Complex complex5 = complex1.tanh();
      complex4.multiply(complex3);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-705.7101), (-705.7101));
      complex0.NaN.abs();
      complex0.ONE.subtract((-705.7101));
      complex0.I.tanh();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      double double0 = (-330.981112);
      Complex complex0 = Complex.valueOf((-330.981112), (-330.981112));
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.exp();
      complex1.ONE.sqrt1z();
      complex2.ZERO.abs();
      complex1.getImaginary();
      Complex complex3 = complex2.sinh();
      int int0 = (-2729);
      try { 
        complex3.NaN.nthRoot((-2729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,729
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1764.633656148599), (-1764.633656148599));
      Complex complex1 = complex0.ONE.atan();
      assertEquals(0.7853981633974483, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.ZERO.tanh();
      complex4.ONE.divide(complex2);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.pow((-3549.56899058503));
      Complex complex7 = complex0.NaN.multiply(1);
      Complex complex8 = complex6.ZERO.subtract((-1764.633656148599));
      Complex complex9 = complex8.NaN.tanh();
      complex9.INF.hashCode();
      Complex complex10 = complex6.add(complex0);
      Complex complex11 = complex8.ZERO.pow(0.0);
      Complex complex12 = complex5.tan();
      Complex complex13 = complex12.I.atan();
      Complex complex14 = complex13.ZERO.pow(complex11);
      assertSame(complex14, complex9);
      
      complex8.getImaginary();
      Complex complex15 = complex10.divide(complex11);
      complex15.INF.add(0.0);
      complex15.ONE.abs();
      complex7.toString();
      complex0.abs();
      complex5.hashCode();
      Complex complex16 = complex11.cosh();
      assertEquals(1764.633656148599, complex8.getReal(), 0.01);
      
      double double0 = complex6.getReal();
      assertEquals(-0.0, double0, 0.01);
      assertTrue(complex6.equals((Object)complex4));
      
      boolean boolean0 = complex13.isInfinite();
      assertEquals(0.0011593589144758543, complex12.getReal(), 0.01);
      assertEquals((-1.0180920022016944), complex12.getImaginary(), 0.01);
      assertSame(complex13, complex16);
      assertNotSame(complex13, complex2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex1.ZERO.tanh();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.I.add(complex0);
      assertFalse(complex3.isInfinite());
      
      complex0.ONE.hashCode();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.valueOf((-2892.94));
      Complex complex6 = complex0.INF.add(complex4);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = (Complex)complex4.readResolve();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex6.acos();
      assertTrue(complex6.isInfinite());
      
      complex5.getField();
      Complex complex11 = complex7.add(1929.55613175365);
      assertEquals(1930.9703453160232, complex11.getReal(), 0.01);
      
      Complex complex12 = complex1.log();
      Complex complex13 = complex12.divide(1781.9198074652245);
      complex8.ZERO.abs();
      Complex complex14 = complex5.multiply(0);
      assertTrue(complex14.equals((Object)complex2));
      
      Complex complex15 = Complex.ONE;
      Complex complex16 = complex7.multiply(complex15);
      complex16.NaN.add(752.0);
      complex8.multiply(complex13);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertSame(complex12, complex10);
      assertSame(complex13, complex8);
      assertTrue(complex7.equals((Object)complex16));
      
      Complex complex17 = complex15.tan();
      assertEquals(1.557407724654902, complex17.getReal(), 0.01);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
  }
}
