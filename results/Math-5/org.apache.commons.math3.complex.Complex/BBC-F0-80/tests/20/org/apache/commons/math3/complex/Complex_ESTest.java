/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:58:20 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(3.2542391242036633E233);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.divide((-2282396.7293290175));
      Complex complex4 = Complex.valueOf(3.2542391242036633E233);
      Complex complex5 = new Complex(3765.171892668456, 3.2542391242036633E233);
      complex5.tanh();
      Complex complex6 = Complex.NaN;
      complex6.acos();
      complex0.log();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.I;
      complex8.cosh();
      Complex complex9 = Complex.NaN;
      complex4.sqrt1z();
      complex3.pow(3765.171892668456);
      Complex complex10 = Complex.ZERO;
      complex10.nthRoot(902);
      Complex complex11 = Complex.INF;
      complex9.subtract(complex11);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(20.0);
      Complex complex2 = Complex.ZERO;
      complex1.divide(1.4605950309628873E-8);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(20.0);
      Complex complex5 = complex4.tanh();
      complex0.acos();
      complex4.log();
      Complex complex6 = Complex.ONE;
      complex6.cosh();
      Complex complex7 = Complex.NaN;
      complex5.pow(1.3325698375701904);
      complex3.nthRoot(2145916384);
      Complex complex8 = new Complex(109.34816001, 2.1906796201332047E-7);
      complex8.subtract(complex7);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(3.2542391242036633E233);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.divide(3.2542391242036633E233);
      Complex complex4 = Complex.INF;
      Complex.valueOf(259.7488128747);
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf(3.2542391242036633E233);
      complex6.acos();
      complex3.log();
      Complex complex7 = Complex.ONE;
      complex3.cosh();
      Complex complex8 = Complex.NaN;
      complex2.pow((-4218.662170859));
      complex5.nthRoot(37);
      Complex complex9 = new Complex(259.7488128747, 1509.530337145);
      complex8.subtract(complex9);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.multiply((-1156.106858758));
      Complex complex1 = new Complex(746.47, 20.0);
      Complex complex2 = complex1.tan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1081.233404777);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.INF.createComplex(6.283185307179586, 1.1852121353149414);
      complex2.INF.add(complex0);
      Complex complex3 = complex1.NaN.divide(1081.233404777);
      complex3.ONE.atan();
      Complex complex4 = complex0.negate();
      Complex.valueOf((-1047.217), (-1047.217));
      Complex complex5 = complex4.pow(complex0);
      complex5.toString();
      complex3.createComplex(1081.233404777, 6.283185307179586);
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-20.0));
      complex1.subtract(2.0);
      Complex complex2 = new Complex(3613.69032, Double.POSITIVE_INFINITY);
      complex2.isNaN();
      Complex complex3 = Complex.NaN;
      complex3.abs();
      complex1.add(Double.NaN);
      complex2.sqrt1z();
      Complex complex4 = new Complex((-2168.2516785), Double.NaN);
      Complex complex5 = Complex.ONE;
      complex5.add((-2168.2516785));
      Complex complex6 = Complex.I;
      complex3.nthRoot(37);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-20.0));
      complex1.subtract(2.0);
      Complex complex2 = new Complex(3613.69032, (-20.0));
      Complex complex3 = Complex.NaN;
      complex2.tan();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = complex1.subtract(2.0);
      Complex complex3 = new Complex(3613.69032, Double.POSITIVE_INFINITY);
      complex3.isNaN();
      Complex complex4 = Complex.NaN;
      complex4.abs();
      Complex complex5 = complex1.add(Double.NaN);
      complex3.sqrt1z();
      complex5.sqrt1z();
      Complex complex6 = complex0.conjugate();
      complex2.readResolve();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = (Complex)complex3.readResolve();
      complex2.add(2.0);
      complex6.nthRoot(2145);
      complex9.multiply(6.513425781583774E233);
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sinh();
      complex0.ONE.add(181.0596948268);
      complex2.abs();
      double double0 = 1405.603;
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.ZERO.divide(1243.0);
      Complex complex5 = complex3.tanh();
      complex5.ZERO.pow(complex1);
      complex4.INF.abs();
      try { 
        complex3.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2294.6040094326054, 2252.633745205274);
      Complex complex1 = complex0.exp();
      complex1.createComplex(2294.6040094326054, 1.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-1313.44436855852));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.valueOf((-1313.44436855852), Double.POSITIVE_INFINITY);
      complex4.negate();
      complex3.atan();
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.tanh();
      complex8.multiply((-4394));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(259.7488128747, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = complex0.multiply((-2642));
      Complex complex2 = new Complex(2.190319710898382E-7);
      complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = complex1.subtract(2.0);
      complex1.sqrt1z();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.I;
      Complex complex6 = complex2.tanh();
      complex6.sinh();
      complex3.hashCode();
      Complex complex7 = Complex.valueOf((-20.0), (-20.0));
      complex7.tanh();
      complex5.multiply(4145);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-2186.0), (-259.7488128747));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.tanh();
      complex0.hashCode();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.sin();
      complex5.add(Double.NaN);
      Complex complex6 = complex0.subtract(Double.NaN);
      complex1.subtract((-762.2516226022));
      complex0.isInfinite();
      complex3.abs();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.add(259.7488128747);
      complex8.subtract(2.680137967689915E-304);
      Complex.valueOf((-1028.35), 1022.4016696190937);
      complex6.pow(1.0);
      complex3.abs();
      Complex complex9 = Complex.ONE;
      complex7.divide((-161.44151388822132));
      Complex complex10 = Complex.I;
      complex10.pow((-762.2516226022));
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-20.0));
      complex1.subtract(2.0);
      Complex complex2 = new Complex(3613.69032, Double.POSITIVE_INFINITY);
      complex2.isNaN();
      Complex complex3 = Complex.NaN;
      complex3.abs();
      complex1.add(Double.NaN);
      complex0.multiply(complex2);
      complex0.tan();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-20.0));
      complex1.subtract(2.0);
      Complex complex2 = new Complex(3613.69032, Double.POSITIVE_INFINITY);
      complex2.isNaN();
      Complex complex3 = Complex.NaN;
      complex3.abs();
      Complex complex4 = complex0.subtract(3613.69032);
      Complex.valueOf(Double.NaN, 3613.69032);
      complex1.pow(1328.7232584472);
      complex1.abs();
      Complex complex5 = Complex.ONE;
      complex2.divide(2.0);
      Complex complex6 = Complex.NaN;
      complex6.pow(2.0);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1705.6557));
      Complex complex2 = Complex.ZERO;
      complex1.divide((-2108.473205));
      complex2.multiply((-2108.473205));
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = Complex.INF;
      complex3.readResolve();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply((-2642));
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1084.9, 2.0);
      // Undeclared exception!
      complex0.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-1705.6557));
      Complex complex2 = Complex.ZERO;
      complex0.I.pow(1.0);
      Complex complex3 = complex0.divide(0.999526850926082);
      Complex complex4 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(0.999526850926082);
      Complex complex6 = Complex.INF;
      complex6.sqrt1z();
      Complex complex7 = complex0.negate();
      complex2.atan();
      Complex complex8 = Complex.I;
      Complex complex9 = complex0.sinh();
      complex7.hashCode();
      complex5.getReal();
      complex3.createComplex((-2108.473205), 0.999526850926082);
      Complex complex10 = Complex.NaN;
      complex7.multiply(complex9);
      complex3.conjugate();
      Complex complex11 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex11.readResolve();
      Object object0 = new Object();
      Object object1 = complex10.readResolve();
      complex1.equals(object1);
      Complex complex12 = Complex.INF;
      complex3.abs();
      Complex.valueOf(0.999526850926082);
      complex4.asin();
      Complex complex13 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1705.6557));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.divide((-2108.473205));
      complex2.multiply((-2108.473205));
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.sqrt1z();
      complex3.negate();
      complex1.atan();
      Complex complex7 = Complex.I;
      complex6.sinh();
      complex5.hashCode();
      Complex complex8 = complex0.multiply(complex2);
      Complex complex9 = Complex.ONE;
      complex8.getField();
      complex5.tanh();
      complex1.pow((-923.195));
      complex4.abs();
      Complex complex10 = Complex.ONE;
      complex7.divide(5189.126);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide((-1705.6557));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tan();
      complex1.sqrt1z();
      Complex complex3 = Complex.ZERO;
      complex3.toString();
      complex3.hashCode();
      complex2.sin();
      Complex complex4 = new Complex(Double.NaN, (-2108.473205));
      Complex complex5 = complex1.add(2.0);
      complex0.subtract(4.4228706309734985E-8);
      Complex complex6 = Complex.ONE;
      complex6.isNaN();
      Complex complex7 = Complex.I;
      complex7.abs();
      complex5.add(Double.NaN);
      complex2.conjugate();
      complex7.tan();
      complex6.getImaginary();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.ZERO;
      complex4.toString();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex1.add(complex3);
      Complex complex7 = complex4.multiply(complex0);
      Complex complex8 = Complex.ONE;
      complex1.getField();
      Complex complex9 = complex2.tanh();
      Complex complex10 = new Complex((-2534.987));
      complex7.getImaginary();
      complex6.sqrt();
      complex3.isInfinite();
      Complex complex11 = complex9.subtract(2297.44807);
      complex11.pow(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.NaN;
      complex6.divide(complex12);
      complex5.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 259.7488128747);
      Complex complex4 = complex3.tanh();
      complex2.hashCode();
      Complex complex5 = complex1.sin();
      Complex complex6 = new Complex((-2168.2516785), 2.680137967689915E-304);
      complex2.add(2.680137967689915E-304);
      Complex complex7 = complex1.subtract(1.0);
      complex4.isNaN();
      complex4.abs();
      Complex complex8 = complex5.add((-541.3134564563484));
      complex8.ZERO.subtract((-2168.2516785));
      complex4.conjugate();
      complex0.tan();
      Complex complex9 = Complex.NaN;
      complex3.pow(Double.POSITIVE_INFINITY);
      complex7.abs();
      Complex complex10 = Complex.ONE;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex7.pow((-541.3134564563484));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1705.6557));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.divide((-2108.473205));
      complex2.multiply((-2108.473205));
      Complex.valueOf(0.0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.sqrt1z();
      complex3.negate();
      complex1.atan();
      Complex complex6 = Complex.I;
      complex5.sinh();
      complex4.hashCode();
      complex5.getReal();
      Complex complex7 = complex2.createComplex(942.606215478, 1508.8);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.multiply(complex1);
      Complex complex10 = complex5.conjugate();
      complex10.NaN.acos();
      Complex complex11 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex12 = (Complex)complex9.readResolve();
      Object object0 = new Object();
      complex8.equals(object0);
      complex7.isInfinite();
      complex11.subtract(849.8634225866422);
      complex0.pow((-1082.8682637));
      complex12.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.NaN;
      complex1.ONE.tanh();
      complex3.NaN.subtract((-4998.562003031958));
      Complex complex4 = complex0.I.multiply(0);
      complex3.ONE.hashCode();
      complex2.ONE.conjugate();
      complex3.ZERO.add(complex0);
      complex2.acos();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex0.ZERO.cos();
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex7.multiply(1128.30355762099);
      complex8.ONE.reciprocal();
      complex2.multiply((-1450.44157));
      complex1.cosh();
      complex6.atan();
      complex5.sqrt();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex0.multiply(3404.0);
      Complex complex3 = Complex.valueOf(3404.0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex1.atan();
      Complex complex8 = Complex.I;
      complex6.sinh();
      complex0.hashCode();
      complex2.getReal();
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.NaN;
      complex7.multiply(complex3);
      complex9.subtract(3404.0);
      complex10.readResolve();
      Object object0 = new Object();
      complex4.equals("oU9y%dmnHxRU}B%PFM");
      Complex complex11 = Complex.INF;
      complex1.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex12 = new Complex(1541);
      complex12.asin();
      Complex complex13 = new Complex(0.0);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1705.6557));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.divide((-2108.473205));
      complex2.multiply((-2108.473205));
      Complex.valueOf(0.0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.sqrt1z();
      complex3.negate();
      complex1.atan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.sinh();
      complex4.hashCode();
      Complex complex8 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex8.add(3020.3);
      complex0.subtract(0.0);
      complex7.cos();
      complex8.isNaN();
      complex6.abs();
      complex8.add((-2108.473205));
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex0.tan();
      complex2.getImaginary();
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.sqrt();
      complex12.I.tan();
      complex7.isInfinite();
      complex8.subtract((-0.9999992726044105));
      complex9.pow((-0.9999992726044105));
      complex10.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      complex0.ZERO.add(0.0);
      complex0.readResolve();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex1.subtract(complex0);
      complex1.isNaN();
      Complex complex2 = complex1.multiply((-845));
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      complex1.ONE.pow(complex0);
      Complex complex2 = complex0.divide((-1705.6557));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.divide(0.0);
      complex0.multiply(1658.1720374353);
      Complex.valueOf((-5022.0));
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.add(complex2);
      complex5.ONE.pow(4.57490653163866E-8);
      Complex complex7 = Complex.valueOf((-5022.0), 1.0);
      complex5.multiply(complex7);
      Complex complex8 = Complex.ONE;
      complex6.getField();
      complex1.tanh();
      Complex complex9 = Complex.NaN;
      complex8.abs();
      Complex complex10 = Complex.ONE;
      Complex complex11 = new Complex(1705.6557, 1.4417925431707959);
      complex6.subtract(complex0);
      Complex complex12 = complex7.exp();
      complex12.ZERO.divide((-294.33914136));
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.pow(complex0);
      complex0.divide((-1705.6557));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = complex0.multiply(1658.1720374353);
      Complex.valueOf((-5022.0));
      Complex complex6 = Complex.INF;
      complex6.sqrt1z();
      complex4.negate();
      Complex complex7 = complex5.atan();
      Complex complex8 = Complex.I;
      complex8.sinh();
      complex0.hashCode();
      complex7.getReal();
      Complex complex9 = complex2.createComplex(1508.8, (-1705.6557));
      Complex complex10 = complex9.ZERO.log();
      complex5.multiply(complex0);
      Complex.valueOf(3.0);
      complex1.isNaN();
      complex10.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1343.8774613646422), 2697.57848);
      Complex complex1 = complex0.INF.multiply((-824.4317454377127));
      complex1.ONE.atan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.conjugate();
      complex3.ZERO.tanh();
      complex2.INF.add((-1343.8774613646422));
      Complex complex4 = Complex.valueOf((-4.6120107269641394E-4), 2697.57848);
      Complex complex5 = complex0.subtract((-583.0));
      Complex complex6 = complex5.I.divide(complex0);
      Complex complex7 = complex6.pow(complex1);
      complex6.INF.pow(6.283185307179586);
      complex5.add(complex2);
      complex0.subtract((-1343.8774613646422));
      Complex complex8 = complex6.multiply(683);
      Complex complex9 = complex7.pow(complex5);
      complex9.INF.createComplex((-824.4317454377127), (-1.0));
      complex4.conjugate();
      complex5.multiply(683);
      Complex complex10 = complex8.sinh();
      complex10.conjugate();
      complex8.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1568);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.divide(complex0);
      complex1.INF.subtract(complex2);
      complex0.isNaN();
      Complex complex3 = complex0.multiply(1568);
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex1.tanh();
      complex2.getArgument();
      complex3.isNaN();
      complex0.multiply(17);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.NaN;
      complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = Complex.ZERO;
      complex0.toString();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1343.8774613646422, (-494.014038778));
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex(1343.8774613646422, 259.7488128747);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.NaN;
      complex5.toString();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.add(complex2);
      complex7.multiply(complex2);
      Complex complex8 = Complex.ONE;
      complex4.getField();
      Complex complex9 = new Complex(1.57014079493721);
      Complex.valueOf(3750.71);
      complex9.tanh();
      Complex complex10 = Complex.NaN;
      complex5.abs();
      Complex complex11 = Complex.ONE;
      Complex complex12 = new Complex(1343.8774613646422, (-494.014038778));
      Complex complex13 = complex3.subtract(complex11);
      complex13.ZERO.negate();
      complex12.exp();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1370.6883661), 259.7488128747);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.tanh();
      complex3.hashCode();
      complex2.sin();
      Complex complex4 = new Complex((-1.0), 259.7488128747);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.add(929.5654221167283);
      complex5.subtract(2.185039863261519);
      Complex complex7 = Complex.valueOf(2517.85);
      complex7.isNaN();
      complex6.abs();
      complex3.add(259.7488128747);
      complex4.conjugate();
      complex2.tan();
      complex0.getImaginary();
      Complex complex8 = complex6.sqrt();
      complex8.NaN.exp();
      Complex complex9 = Complex.NaN;
      complex9.isInfinite();
      Complex complex10 = complex1.subtract(1.1123170852661133);
      complex3.pow(2.676101005363307E-4);
      complex10.createComplex(2.185039863261519, (-1370.6883661));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.atan();
      Complex complex1 = complex0.divide((-2570.4));
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.I.negate();
      complex4.NaN.acos();
      Complex complex5 = complex1.divide(complex0);
      complex1.ZERO.exp();
      complex1.I.cosh();
      Complex complex6 = complex1.asin();
      complex6.ZERO.sinh();
      complex6.INF.reciprocal();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex0.getField();
      Complex complex3 = complex0.tanh();
      complex3.abs();
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.ZERO.divide(1829.8);
      Complex complex2 = complex0.acos();
      complex1.toString();
      Complex complex3 = complex1.asin();
      complex3.INF.pow(1829.8);
      Complex complex4 = complex2.multiply(2803.796);
      complex4.nthRoot(268);
      Complex complex5 = complex1.add(complex4);
      complex5.cos();
      complex5.multiply(268);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex3.tanh();
      complex6.log();
      complex0.multiply(complex6);
      complex4.add(complex7);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 1343.8774613646422);
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 259.7488128747);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex0.tanh();
      complex2.hashCode();
      Complex complex5 = complex0.sin();
      Complex complex6 = new Complex(2.63809219778715E205, 2.4963286658278886E149);
      Complex complex7 = complex5.add((-0.9995173056554838));
      Complex complex8 = complex4.subtract(4.6120107269641394E-4);
      complex1.abs();
      complex8.add(0.9999992726044105);
      complex2.tan();
      complex1.toString();
      Complex.valueOf(4.6120107269641394E-4, 2.63809219778715E205);
      Complex complex9 = complex0.multiply(2.4963286658278886E149);
      complex9.reciprocal();
      complex3.asin();
      complex7.getField();
      complex7.tanh();
      Complex.valueOf(2.4963286658278886E149);
      complex2.add((-3806.43));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex1.tanh();
      complex2.getArgument();
      complex1.hashCode();
      complex0.isInfinite();
      Complex complex4 = Complex.I;
      complex2.abs();
      Complex complex5 = complex4.add(781.95496134316);
      Complex complex6 = Complex.ZERO;
      complex6.toString();
      Complex.valueOf(781.95496134316, (-1074.400572463));
      Complex complex7 = complex3.multiply(2.7513586536359718);
      Complex complex8 = Complex.valueOf((-38.989), 5065.466999);
      complex8.reciprocal();
      complex7.asin();
      complex5.getField();
      complex6.tanh();
      Complex.valueOf(0.301261305809021);
      complex0.add(2.7513586536359718);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.getReal();
      Complex complex1 = Complex.I;
      complex1.ONE.abs();
      Complex complex2 = complex0.subtract(complex1);
      complex1.getReal();
      Complex complex3 = complex1.divide(complex0);
      complex2.ZERO.sin();
      Complex complex4 = complex3.ZERO.divide((-1.0));
      complex0.ZERO.pow(1.0);
      complex1.ZERO.multiply(37);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex2.cosh();
      complex7.toString();
      Complex.valueOf((-1.0));
      complex1.readResolve();
      complex4.tan();
      try { 
        complex6.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.abs();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.tan();
      complex2.sqrt1z();
      complex0.toString();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = Complex.ONE;
      complex3.getField();
      Complex complex8 = Complex.ZERO;
      complex8.tanh();
      complex4.abs();
      Object object0 = new Object();
      complex5.equals(object0);
      complex2.subtract(complex7);
      complex6.add(20.0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1343.8774613646422, (-494.014038778));
      complex0.atan();
      Complex complex1 = new Complex(1343.8774613646422, 259.7488128747);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.tanh();
      complex1.hashCode();
      Complex complex4 = complex3.sin();
      Complex complex5 = new Complex(259.7488128747, (-2168.2516785));
      complex0.add((-494.014038778));
      Complex complex6 = complex3.subtract(4.6120107269641394E-4);
      complex5.isNaN();
      complex6.abs();
      Complex complex7 = complex3.add((-2168.2516785));
      Complex complex8 = complex3.tan();
      complex4.toString();
      Complex complex9 = Complex.valueOf((-494.014038778), (-588.0));
      complex9.multiply(5065.466999);
      complex8.reciprocal();
      complex2.asin();
      complex8.getField();
      complex8.tanh();
      Complex.valueOf(733.2552017);
      complex7.add(1343.8774613646422);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.INF.divide((-1.0));
      Complex complex1 = Complex.valueOf((-813.6804319806806));
      complex1.hashCode();
      complex0.getReal();
      Complex complex2 = complex0.createComplex(1508.8, (-813.6804319806806));
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex1.subtract((-3757.0));
      complex5.readResolve();
      complex4.equals(complex5);
      complex3.conjugate();
      Complex complex6 = Complex.INF;
      complex3.abs();
      Complex complex7 = Complex.NaN;
      complex7.ZERO.cosh();
      Complex complex8 = Complex.valueOf(1.0238355945704727, 1.4212865829467773);
      complex8.asin();
      Complex complex9 = new Complex(2.0);
      Complex.valueOf(3599.6280907, 441.00603205);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      complex1.ZERO.add(complex0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.NaN.getField();
      Complex complex3 = complex1.tanh();
      complex3.abs();
      Complex complex4 = complex1.cosh();
      complex4.NaN.createComplex(1.0242292148157321, 889.57);
      complex3.subtract(1.0242292148157321);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.I.reciprocal();
      complex3.I.subtract(complex0);
      Complex complex4 = complex3.NaN.multiply(complex2);
      Complex complex5 = complex4.I.add(complex1);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex7.ONE.exp();
      complex7.hashCode();
      Complex complex9 = complex0.multiply(0.0);
      Complex complex10 = complex8.multiply(2057);
      Complex complex11 = Complex.valueOf(733.2552017);
      complex4.negate();
      complex4.reciprocal();
      Complex complex12 = complex5.asin();
      complex0.getField();
      complex2.tanh();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex12.subtract(complex11);
      complex14.getField();
      Complex.valueOf(Double.NaN);
      Complex complex15 = complex10.tan();
      complex9.tan();
      Complex complex16 = new Complex(0.618990892446662, 0.001422474387114365);
      complex15.equals(complex16);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2407.78814248517), (-2407.78814248517));
      Complex complex2 = Complex.valueOf((-2407.78814248517), (-103.2412627978463));
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex2.multiply(complex3);
      complex0.hashCode();
      complex2.getField();
      Complex complex5 = complex2.tanh();
      complex1.abs();
      complex5.equals("");
      complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      complex0.abs();
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.sqrt1z();
      complex3.INF.toString();
      Complex complex4 = complex2.ONE.multiply(1);
      complex1.tan();
      Complex complex5 = complex2.ZERO.createComplex((-677.01949620272), 1);
      Complex complex6 = Complex.valueOf((-1.0));
      Complex complex7 = complex1.multiply(complex2);
      Complex complex8 = complex7.exp();
      complex3.createComplex(1.0, 1);
      complex8.getReal();
      Complex complex9 = complex6.divide(complex4);
      Complex complex10 = new Complex(2641.43400157, (-1.0));
      Complex complex11 = complex10.divide((-677.01949620272));
      Complex complex12 = complex10.tanh();
      complex3.getField();
      complex9.multiply(1);
      complex4.add(2641.43400157);
      complex12.getArgument();
      complex5.add(221.5643);
      complex11.toString();
      complex11.sin();
      Complex complex13 = Complex.ONE;
      complex13.cos();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      complex1.ONE.pow(complex0);
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex((-3630.374433427607), 703.61382147768);
      complex1.sin();
      complex0.getField();
      complex2.readResolve();
      complex2.toString();
      complex0.createComplex((-584.6287358100179), 2143.686209045);
      complex3.nthRoot(1290);
      Complex complex4 = complex1.sin();
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(41.94906584513);
      complex2.multiply(complex6);
      complex4.readResolve();
      Complex complex7 = new Complex(0.0, 2143.686209045);
      complex7.equals(complex6);
      Complex complex8 = Complex.NaN;
      complex8.readResolve();
      Complex complex9 = Complex.valueOf((-1.0), (-3630.374433427607));
      Complex complex10 = complex9.sin();
      complex10.cosh();
      Complex.valueOf(263768.7260323617, (-1.0));
      Complex complex11 = Complex.NaN;
      complex11.sinh();
      complex7.multiply(2143.686209045);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-221.5643), 78.152542709);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.multiply((-1016));
      complex3.I.hashCode();
      Complex complex4 = complex0.multiply(3375.0498306178106);
      complex0.getArgument();
      complex1.multiply((-3410));
      Complex complex5 = complex1.divide((double) (-1016));
      complex1.asin();
      complex5.getArgument();
      Complex complex6 = complex2.reciprocal();
      complex2.abs();
      complex4.pow(complex1);
      complex2.log();
      complex4.isInfinite();
      complex6.sqrt1z();
      Complex complex7 = Complex.valueOf(557.7138948);
      Complex complex8 = new Complex(2.0, 557.7138948);
      complex8.add(234.94373574618257);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex3.sinh();
      complex2.hashCode();
      complex0.getReal();
      Complex complex6 = complex4.createComplex((-1.557407724654902), (-2049.3));
      complex2.multiply(complex5);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = new Complex((-1.557407724654902));
      complex8.subtract((-1455.78692497368));
      Complex complex9 = Complex.I;
      complex6.equals(complex9);
      complex1.conjugate();
      Complex complex10 = Complex.INF;
      Complex complex11 = new Complex(Double.NaN);
      complex11.abs();
      complex7.asin();
      Complex complex12 = new Complex(685.17968685624);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.6448316331572387E-297), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-2.6448316331572387E-297));
      Complex complex2 = complex0.add(complex1);
      complex2.multiply(complex1);
      complex2.getField();
      Complex complex3 = complex0.tanh();
      complex2.abs();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Object object0 = complex1.readResolve();
      complex4.equals(object0);
      complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.conjugate();
      complex0.ZERO.multiply((-1016));
      complex3.INF.multiply((double) (-1016));
      complex0.INF.getArgument();
      complex2.ONE.multiply(0);
      Complex complex4 = complex0.NaN.divide(0.7853981633974483);
      Complex complex5 = complex4.asin();
      complex2.getArgument();
      Complex complex6 = complex1.ZERO.reciprocal();
      complex6.INF.abs();
      complex6.ZERO.pow(complex3);
      complex0.log();
      complex1.isInfinite();
      complex5.sqrt1z();
      complex3.pow((-1322.0));
      complex5.reciprocal();
      Complex complex7 = new Complex((-1322.0));
      complex7.cos();
      Complex complex8 = new Complex(0.7853981633974483, 26.63832756993306);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = 2.0;
      Complex.valueOf(2.0, 2.0);
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.multiply(627);
      double double1 = 1007.197454971625;
      Complex complex1 = new Complex(1.9932945470297703E120, 1007.197454971625);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.createComplex(Double.NaN, 627);
      Complex complex4 = Complex.valueOf(2.0);
      complex1.multiply(complex4);
      complex2.exp();
      try { 
        complex3.nthRoot((-1073741824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,073,741,824
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.multiply(complex1);
      complex3.NaN.getField();
      complex0.tanh();
      complex1.abs();
      complex1.equals(complex2);
      Complex complex4 = Complex.valueOf(3564.7451458964, 4174424.022216327);
      complex4.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      complex1.INF.conjugate();
      Complex complex3 = Complex.valueOf(2165.694986178378);
      complex2.negate();
      Complex complex4 = complex0.ZERO.add(complex3);
      complex4.nthRoot(2092);
      complex2.ONE.hashCode();
      complex2.INF.acos();
      Complex complex5 = Complex.valueOf(0.7621955064891529);
      Complex complex6 = Complex.ZERO;
      complex6.ONE.subtract(complex3);
      complex5.divide(complex6);
      Complex.valueOf(0.7621955064891529);
      complex5.toString();
      complex2.getReal();
      Object object0 = new Object();
      complex2.equals(object0);
      complex5.log();
      complex3.multiply((-1211.383615513));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ZERO.divide(0.0);
      Complex complex4 = complex3.I.divide(0.0);
      complex4.NaN.multiply(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.sqrt1z();
      complex2.isNaN();
      complex0.abs();
      complex1.isNaN();
      Complex complex7 = complex1.pow(complex0);
      Complex complex8 = new Complex(0.0, (-839.5));
      complex1.multiply(complex8);
      Complex complex9 = complex8.sin();
      complex6.readResolve();
      complex9.isInfinite();
      Complex complex10 = complex7.pow(complex0);
      complex10.readResolve();
      Complex complex11 = Complex.ZERO;
      complex5.equals(complex11);
      complex11.readResolve();
      Complex complex12 = complex0.sin();
      complex12.cosh();
      Complex.valueOf(1403.43911303496, 1403.43911303496);
      Complex complex13 = Complex.valueOf((-1592.3387), 0.0);
      complex13.sinh();
      complex10.multiply(1130.701178948);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.tan();
      complex2.NaN.nthRoot(1);
      Complex complex3 = complex1.NaN.tan();
      complex0.subtract(complex0);
      complex1.getField();
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex0.pow(2317.34840437);
      Complex complex6 = Complex.NaN;
      complex0.ONE.atan();
      Complex complex7 = complex3.add(complex6);
      Complex complex8 = complex7.I.multiply((-2202.46719062606));
      Complex complex9 = complex0.add(0.0);
      complex9.I.nthRoot(1);
      complex4.getField();
      Complex complex10 = complex3.divide(complex0);
      complex3.abs();
      Complex complex11 = complex7.add(6.283185307179586);
      complex11.asin();
      Complex.valueOf((-20.0));
      Complex complex12 = complex5.multiply(complex8);
      complex12.I.cosh();
      complex8.isNaN();
      complex10.subtract(2317.34840437);
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.subtract((-1.0));
      Complex complex6 = complex4.ZERO.subtract((-1.0));
      complex6.ZERO.toString();
      complex0.tanh();
      complex5.add(871.584024552);
      complex2.hashCode();
      complex2.multiply(944679875);
      Complex complex7 = complex0.pow((-1.0));
      complex0.isNaN();
      Complex complex8 = new Complex((-1308.8367809347346));
      complex5.equals(complex8);
      complex7.abs();
      Complex complex9 = Complex.NaN;
      complex9.pow(complex2);
      complex4.add(complex9);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.sinh();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tan();
      complex2.NaN.nthRoot(1);
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex0.subtract(complex1);
      complex1.getField();
      complex3.multiply(0.0);
      Complex complex5 = complex0.pow(2317.34840437);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.ONE.atan();
      Complex complex8 = complex3.add(complex6);
      complex8.I.multiply((-2202.46719062606));
      complex7.acos();
      complex2.isInfinite();
      Complex complex9 = complex5.negate();
      complex7.reciprocal();
      complex8.acos();
      complex9.pow(0.09317722916603088);
      complex2.reciprocal();
      complex2.cos();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1308.836780934734, 1308.836780934734);
      Complex complex1 = complex0.NaN.multiply(1326);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.tanh();
      complex3.I.subtract((double) 1326);
      complex2.getImaginary();
      Complex complex4 = complex2.INF.asin();
      Complex complex5 = complex0.acos();
      complex2.getImaginary();
      Complex complex6 = complex5.log();
      Complex complex7 = complex5.add(1497.54411085369);
      complex5.nthRoot(1326);
      complex4.getField();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.divide(complex1);
      complex7.getField();
      Complex complex10 = Complex.ZERO;
      complex10.abs();
      Complex complex11 = complex8.add(6.283185307179586);
      complex6.asin();
      Complex complex12 = Complex.valueOf(0.7853981633974483);
      complex3.multiply(complex10);
      complex8.cosh();
      complex9.isNaN();
      complex12.subtract((-575.9));
      try { 
        complex11.nthRoot((-84));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -84
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1308.836780934734, 1308.836780934734);
      complex0.NaN.multiply(1326);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.I.subtract((double) 1326);
      complex1.getImaginary();
      Complex complex4 = complex1.INF.asin();
      Complex complex5 = complex0.acos();
      complex1.getImaginary();
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.acos();
      complex5.isInfinite();
      complex7.multiply(complex4);
      complex1.conjugate();
      complex3.subtract(20.0);
      complex1.equals((Object) null);
      complex7.conjugate();
      complex0.sinh();
      Complex complex8 = Complex.ONE;
      complex8.abs();
      Complex complex9 = new Complex(1889.4522531);
      complex9.asin();
      complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-575.9), 1308.836780934734);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex2.sinh();
      complex3.asin();
      Complex complex5 = complex0.subtract((-575.9));
      complex5.tanh();
      complex4.sqrt1z();
      Complex.valueOf((-575.9));
      complex3.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1889.4522531), (-1889.4522531));
      Complex complex2 = Complex.valueOf((-1889.4522531));
      complex2.multiply(799);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.subtract((double) 1326);
      complex1.getImaginary();
      complex2.acos();
      complex4.log();
      complex3.isInfinite();
      Complex complex5 = complex4.negate();
      complex5.reciprocal();
      Complex complex6 = complex4.acos();
      complex2.pow((-1889.4522531));
      complex1.reciprocal();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.cos();
      complex8.ONE.acos();
      complex1.sinh();
      complex6.getField();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = new Complex((-3630.374433427607), 703.61382147768);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex1.sin();
      complex0.getField();
      complex3.readResolve();
      complex3.toString();
      Complex complex7 = complex0.createComplex((-584.6287358100179), 2143.686209045);
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex6.createComplex(2143.686209045, 955.1314169562761);
      complex0.getReal();
      Complex complex10 = complex4.divide(complex9);
      complex5.divide(955.1314169562761);
      Complex complex11 = complex7.tanh();
      complex1.getField();
      Complex complex12 = complex8.multiply((-378));
      complex4.add(1.0);
      complex12.getArgument();
      Complex complex13 = complex11.add((-1.0));
      complex1.toString();
      complex13.sin();
      complex10.cos();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.conjugate();
      complex0.ZERO.multiply((-1016));
      complex3.INF.multiply((double) (-1016));
      complex0.INF.getArgument();
      complex2.ONE.multiply(0);
      Complex complex4 = complex0.NaN.divide(0.7853981633974483);
      complex4.asin();
      complex2.getArgument();
      Complex complex5 = complex1.ZERO.reciprocal();
      complex5.ZERO.pow(complex3);
      complex0.log();
      complex1.isInfinite();
      Complex complex6 = complex1.add(4150.06449);
      complex6.hashCode();
      Complex complex7 = complex0.multiply((-1016));
      complex7.NaN.pow(4150.06449);
      complex7.isNaN();
      complex2.equals("");
      complex3.subtract(736.6036584166842);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      complex0.I.subtract(complex1);
      Complex complex2 = complex1.tanh();
      complex2.hashCode();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.ZERO.divide((-2168.2516785));
      Complex complex5 = complex3.ONE.add((-579.9457585463));
      Complex complex6 = complex3.subtract((-579.9457585463));
      complex3.isNaN();
      complex3.abs();
      complex0.add((-588.0));
      Complex complex7 = complex5.tan();
      complex6.toString();
      Complex.valueOf((-2168.2516785), Double.NaN);
      Complex complex8 = complex2.multiply(733.2552017);
      complex2.multiply(1406);
      Complex complex9 = Complex.valueOf((double) 1406);
      Complex complex10 = complex9.negate();
      Complex complex11 = complex4.reciprocal();
      complex10.atan();
      complex5.asin();
      complex7.getField();
      Complex complex12 = complex8.tanh();
      Complex complex13 = Complex.NaN;
      complex13.subtract(complex11);
      complex9.getField();
      Complex.valueOf((-8.84908716783327E-42));
      complex12.tan();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ZERO.divide(0.0);
      Complex complex4 = complex3.I.divide(0.0);
      complex4.NaN.multiply(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.ONE.negate();
      complex7.ONE.atan();
      complex7.NaN.sinh();
      complex2.hashCode();
      complex2.getReal();
      complex2.NaN.createComplex(0.0, 0.0);
      Complex complex8 = complex5.multiply(complex2);
      complex8.NaN.conjugate();
      complex8.I.subtract(2779.36048638);
      complex8.equals(complex5);
      complex1.conjugate();
      Complex complex9 = complex3.sinh();
      complex9.abs();
      complex4.asin();
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.asin();
      complex0.toString();
      complex0.toString();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.NaN.subtract(0.0);
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex3.ZERO.cosh();
      complex4.INF.getField();
      complex3.readResolve();
      Complex complex6 = complex0.ZERO.tanh();
      Complex complex7 = complex1.ZERO.pow(0.0);
      complex7.getField();
      complex1.ONE.getArgument();
      complex6.subtract(0.0);
      complex1.ZERO.getField();
      Complex complex8 = complex0.tanh();
      complex8.I.negate();
      complex8.hashCode();
      Complex complex9 = complex6.sinh();
      complex9.INF.getField();
      complex0.isInfinite();
      complex5.reciprocal();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.NaN.getField();
      Complex complex1 = complex0.add(1036.163995);
      complex1.I.abs();
      Complex complex2 = complex1.NaN.multiply((-1.0));
      complex0.readResolve();
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex3.ONE.atan();
      Complex complex6 = complex5.ZERO.sin();
      complex6.ZERO.divide(complex0);
      Complex complex7 = complex0.divide(complex1);
      complex7.ONE.abs();
      complex7.I.multiply(0.0);
      Complex complex8 = Complex.valueOf((-408.83509), (-408.83509));
      complex3.I.hashCode();
      complex8.cosh();
      complex8.ONE.getArgument();
      Complex complex9 = complex8.INF.divide(0.0);
      complex9.ZERO.pow(1036.163995);
      Complex complex10 = complex2.tan();
      Complex complex11 = complex10.acos();
      complex11.reciprocal();
      complex4.add(complex3);
      Complex complex12 = complex10.ONE.log();
      complex12.NaN.tan();
      complex12.I.log();
      complex3.getField();
      complex3.getReal();
      complex10.sinh();
      complex2.atan();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.I.subtract(3431.1581072018);
      complex3.ZERO.pow(complex2);
      int int0 = (-122);
      try { 
        complex1.ZERO.nthRoot((-122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -122
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      complex0.getImaginary();
      complex1.ONE.multiply(complex0);
      Complex complex2 = complex0.multiply(1.0);
      complex2.INF.divide(complex0);
      complex1.ONE.abs();
      complex2.INF.add(1.0);
      Complex complex3 = complex0.INF.divide(1.0);
      complex1.readResolve();
      Complex complex4 = complex0.ZERO.pow(1.0);
      complex4.I.add(complex3);
      Complex complex5 = complex1.reciprocal();
      complex3.INF.cos();
      complex5.INF.pow(complex2);
      Complex complex6 = Complex.valueOf(1.0);
      Complex complex7 = complex6.NaN.cosh();
      complex7.NaN.abs();
      complex5.NaN.asin();
      try { 
        complex1.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.conjugate();
      complex0.ZERO.multiply((-1016));
      Complex complex4 = complex3.INF.multiply((double) (-1016));
      complex0.INF.getArgument();
      Complex complex5 = complex2.ONE.multiply(0);
      Complex complex6 = complex0.NaN.divide(0.7853981633974483);
      complex6.asin();
      complex2.getArgument();
      Complex complex7 = complex1.ZERO.reciprocal();
      complex7.ZERO.pow(complex3);
      complex0.log();
      complex1.isInfinite();
      Complex complex8 = complex1.add(4150.06449);
      complex8.hashCode();
      Complex complex9 = complex0.multiply((-1016));
      complex9.NaN.pow(4150.06449);
      complex9.isNaN();
      complex2.equals("");
      complex5.abs();
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex0.NaN.toString();
      Complex complex2 = complex0.INF.divide((-5229.167));
      complex0.equals("qwI\\");
      Complex complex3 = complex2.INF.negate();
      complex3.createComplex((-5229.167), (-5229.167));
      complex2.abs();
      complex2.exp();
      Complex.valueOf((-5229.167));
      complex2.add(Double.POSITIVE_INFINITY);
      complex1.createComplex((-4098.7758), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.I.divide((-3247.431164174));
      Complex complex5 = complex4.NaN.asin();
      complex5.conjugate();
      Complex.valueOf(0.0);
      Complex complex6 = complex1.NaN.divide(1263.522974900673);
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex7.ONE.sin();
      complex0.I.toString();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.negate();
      complex11.I.toString();
      complex11.hashCode();
      complex9.sqrt1z();
      Complex complex12 = complex9.cosh();
      complex11.getField();
      complex10.acos();
      complex12.multiply(1263.522974900673);
      Complex complex13 = complex6.pow((-9.51761338269325E-9));
      complex8.ONE.exp();
      complex13.INF.cosh();
      complex7.asin();
      complex8.divide(0.0);
      Complex.valueOf((-3247.431164174), 0.0);
      complex2.getImaginary();
      complex4.multiply(complex13);
      Complex.valueOf((-2497.3326));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.INF.log();
      complex0.I.nthRoot(1);
      complex1.I.divide(0.0);
      complex1.abs();
      complex3.ZERO.subtract(1.1752011936438014);
      complex3.NaN.toString();
      complex0.toString();
      Complex complex4 = complex3.ZERO.atan();
      complex4.I.sinh();
      complex0.ZERO.atan();
      complex3.isNaN();
      complex1.isInfinite();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = Complex.valueOf(0.0);
      complex5.ONE.add(complex7);
      Complex complex8 = complex3.divide(0.0);
      Complex.valueOf(145.81841289817467, 5.022108460298934E-9);
      complex8.subtract((-1220.3));
      complex6.sqrt();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(0.0, Double.NaN);
      Complex complex1 = complex0.NaN.sinh();
      complex1.ZERO.abs();
      Complex complex2 = complex1.I.divide(0.0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex4.tanh();
      complex5.NaN.add(complex2);
      complex4.INF.readResolve();
      Complex complex6 = complex1.add(complex3);
      Complex complex7 = complex6.atan();
      complex4.ONE.sqrt1z();
      complex1.subtract(3925.837824115256);
      Complex complex8 = complex3.ZERO.sinh();
      complex8.INF.createComplex(0.36494147777557373, 0.36494147777557373);
      int int0 = 0;
      complex6.ONE.sqrt();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-6170.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.add(complex1);
      complex1.I.multiply((-1676));
      complex1.INF.tanh();
      Complex.valueOf(0.0);
      Complex complex3 = complex1.conjugate();
      complex3.ONE.subtract((double) (-1676));
      complex3.ZERO.subtract((double) (-1676));
      complex3.INF.getArgument();
      complex2.readResolve();
      Complex complex4 = new Complex((-1676), 1.956199868121249E282);
      Complex complex5 = complex4.NaN.sinh();
      complex5.NaN.createComplex((-1582.60925), (-2802.025));
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = Complex.valueOf(1.956199868121249E282, 993.4);
      complex7.reciprocal();
      complex2.getArgument();
      complex6.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      complex0.abs();
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.sqrt1z();
      complex3.INF.toString();
      Complex complex4 = complex2.ONE.multiply(1);
      complex1.tan();
      complex2.ZERO.createComplex((-677.01949620272), 1);
      Complex complex5 = Complex.valueOf((-1.0));
      Complex complex6 = complex1.multiply(complex2);
      complex6.exp();
      complex2.ONE.nthRoot(1);
      Complex complex7 = complex2.sin();
      Complex complex8 = Complex.ONE;
      complex7.ONE.multiply(complex8);
      complex7.I.reciprocal();
      complex7.isNaN();
      complex3.sqrt1z();
      Complex complex9 = complex4.acos();
      complex5.isNaN();
      complex9.atan();
      complex1.abs();
      complex3.negate();
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3581.525));
      Complex complex1 = complex0.I.sqrt();
      complex1.ONE.abs();
      complex0.I.toString();
      complex0.readResolve();
      Complex complex2 = complex0.NaN.cos();
      Complex.valueOf(0.0);
      complex1.ONE.hashCode();
      complex0.reciprocal();
      complex1.add(1092.7036898001);
      Complex complex3 = complex0.ONE.conjugate();
      complex3.ZERO.negate();
      try { 
        complex2.nthRoot((-627));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -627
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.sinh();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tan();
      complex2.NaN.nthRoot(1);
      Complex complex3 = complex1.NaN.tan();
      complex0.subtract(complex1);
      complex1.getField();
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex0.pow(2317.34840437);
      Complex complex6 = Complex.NaN;
      complex0.ONE.atan();
      Complex complex7 = complex3.add(complex6);
      Complex complex8 = complex7.I.multiply((-2202.46719062606));
      Complex complex9 = complex0.add(0.0);
      complex9.I.nthRoot(1);
      complex4.getField();
      Complex complex10 = complex3.divide(complex0);
      complex10.INF.getField();
      complex3.abs();
      Complex complex11 = complex7.add(6.283185307179586);
      complex11.asin();
      Complex.valueOf((-20.0));
      Complex complex12 = complex5.multiply(complex8);
      complex12.I.cosh();
      complex8.isNaN();
      complex10.subtract(2317.34840437);
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1159.292, 2305.865);
      Complex complex1 = complex0.negate();
      complex1.toString();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.divide(2305.865);
      complex3.abs();
      Complex complex4 = complex3.INF.acos();
      complex4.add(complex2);
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex1.I.multiply(complex6);
      complex6.INF.acos();
      complex6.NaN.createComplex(20.0, 1.1192701075105453);
      Complex complex8 = complex3.subtract(complex6);
      complex8.I.asin();
      Complex complex9 = Complex.valueOf(1.1192701075105453);
      complex0.INF.exp();
      complex9.ZERO.negate();
      complex6.sin();
      Complex complex10 = complex3.log();
      Complex complex11 = complex10.ZERO.add(1.1192701075105453);
      complex10.isInfinite();
      complex0.toString();
      Complex complex12 = Complex.valueOf(2305.865, (-1.0));
      complex5.conjugate();
      complex7.multiply(complex11);
      complex0.atan();
      complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.INF.nthRoot(1541);
      complex0.isInfinite();
      complex0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(70.76);
      Complex complex1 = complex0.NaN.divide(70.76);
      Complex complex2 = complex1.INF.subtract(70.76);
      Complex complex3 = complex1.ONE.conjugate();
      complex0.NaN.readResolve();
      Complex complex4 = complex0.createComplex(70.76, 70.76);
      complex2.INF.hashCode();
      Complex complex5 = complex4.NaN.sqrt();
      complex4.I.abs();
      complex5.NaN.log();
      Complex complex6 = complex1.divide(703.61382147768);
      complex2.asin();
      Complex complex7 = complex6.sin();
      complex7.ZERO.getField();
      complex0.INF.readResolve();
      complex5.toString();
      Complex complex8 = complex4.createComplex(1.0, 1.0);
      Complex complex9 = complex4.sqrt();
      complex9.ONE.createComplex(3758.195, 703.61382147768);
      complex2.getReal();
      Complex complex10 = complex8.ZERO.divide(complex0);
      Complex complex11 = complex10.ONE.divide(703.61382147768);
      complex11.INF.tanh();
      complex4.getField();
      complex8.multiply((-378));
      complex5.add((double) (-378));
      complex1.getArgument();
      complex5.add(0.0);
      complex8.toString();
      Complex complex12 = complex3.sin();
      complex12.ZERO.cos();
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex0.sinh();
      complex0.ONE.cos();
      complex5.INF.tan();
      Complex complex6 = complex5.conjugate();
      complex6.ONE.abs();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex5.multiply(0.0);
      complex8.I.log();
      Complex complex9 = complex8.INF.add(complex4);
      complex7.negate();
      complex7.getArgument();
      complex8.getField();
      complex1.pow(complex9);
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1308.836780934734, 1308.836780934734);
      Complex complex1 = complex0.NaN.multiply(1326);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.tanh();
      complex3.I.subtract((double) 1326);
      complex2.getImaginary();
      complex2.INF.asin();
      Complex complex4 = complex0.acos();
      complex2.getImaginary();
      Complex complex5 = complex4.log();
      complex5.acos();
      complex4.isInfinite();
      complex4.NaN.negate();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex1.NaN.acos();
      complex7.ONE.pow(0.0);
      complex5.reciprocal();
      complex6.cos();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.I.reciprocal();
      complex3.I.subtract(complex0);
      Complex complex4 = complex3.NaN.multiply(complex2);
      complex4.I.add(complex1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.subtract(complex5);
      complex6.ONE.exp();
      complex6.hashCode();
      Complex.valueOf(0.0);
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.divide((-2004.1259653394));
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.I.atan();
      complex8.equals(complex9);
      complex0.multiply(complex9);
      Complex.valueOf(0.0, 0.0);
      complex2.reciprocal();
      complex10.atan();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.41909071122557E-8), (-3.0307641004671077E-233));
      complex0.ONE.pow((-3.0307641004671077E-233));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.nthRoot((-2199));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,199
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(2004.0, 2004.0);
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.multiply(complex1);
      complex3.INF.tanh();
      complex1.getImaginary();
      complex2.NaN.atan();
      Complex complex4 = complex1.atan();
      complex1.getArgument();
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.multiply(0.0);
      complex3.ZERO.readResolve();
      complex3.ZERO.pow(complex0);
      Complex complex4 = complex3.ZERO.asin();
      complex4.ONE.pow((-1.0));
      complex0.abs();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.sqrt1z();
      complex6.NaN.sinh();
      complex0.log();
      complex2.divide(complex0);
      complex4.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.sin();
      complex1.isInfinite();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.INF.readResolve();
      complex0.sqrt();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(Double.NaN);
      Complex complex2 = complex1.I.negate();
      complex2.ONE.createComplex(Double.NaN, (-1732.3046569));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.NaN.add(complex4);
      Complex complex6 = complex4.ZERO.exp();
      Complex complex7 = complex4.ONE.multiply(complex1);
      Complex complex8 = complex7.ZERO.negate();
      complex4.I.exp();
      complex8.ONE.cosh();
      Complex.valueOf((-1732.3046569), 0.0);
      Complex complex9 = complex3.multiply(0);
      Complex complex10 = complex6.multiply(Double.NaN);
      Complex complex11 = complex0.multiply(complex6);
      complex11.INF.sqrt();
      complex9.NaN.divide(Double.NaN);
      complex6.getReal();
      complex10.sinh();
      complex5.multiply(962);
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.multiply(1223);
      complex0.NaN.conjugate();
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.INF.sqrt();
      complex2.ZERO.sqrt();
      Complex.valueOf((-2031.3421982224845), (double) 1223);
      Complex complex4 = complex2.INF.multiply(1223);
      Complex complex5 = complex1.atan();
      complex5.ZERO.log();
      Complex complex6 = complex4.INF.multiply(0.0);
      complex6.I.pow(complex0);
      Complex complex7 = complex0.conjugate();
      complex4.sqrt1z();
      complex3.toString();
      Complex complex8 = complex7.pow((-3153.8845842));
      complex2.subtract(complex3);
      complex4.getReal();
      complex2.tan();
      complex8.divide(complex2);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1076716069929933E-95, 2.487138271331787);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.atan();
      complex0.I.subtract(complex1);
      Complex complex2 = complex1.tanh();
      complex2.hashCode();
      Complex complex3 = complex0.sin();
      complex0.ZERO.divide((-2168.2516785));
      Complex complex4 = complex3.ONE.add((-579.9457585463));
      Complex complex5 = complex3.subtract((-579.9457585463));
      complex3.isNaN();
      complex3.abs();
      complex0.isNaN();
      complex2.NaN.pow(complex4);
      complex0.I.multiply(complex1);
      Complex complex6 = complex3.sin();
      complex1.readResolve();
      complex3.isInfinite();
      Complex complex7 = complex6.pow(complex5);
      Object object0 = complex6.readResolve();
      complex3.equals(object0);
      complex6.readResolve();
      Complex complex8 = complex7.sin();
      complex2.cosh();
      Complex.valueOf(1806.04, 1806.04);
      complex8.sinh();
      complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getField();
      double double0 = 0.0;
      Complex.valueOf(0.0, 0.0);
      complex0.INF.sqrt1z();
      Complex complex1 = Complex.valueOf(0.0);
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(486.2682);
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(486.2682);
      Complex complex2 = complex0.multiply(2717);
      Complex complex3 = complex2.ONE.add(486.2682);
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex4.atan();
      complex5.INF.abs();
      Complex complex6 = complex5.NaN.multiply(0.0);
      complex6.INF.multiply(486.2682);
      complex6.multiply(2126);
      complex2.ONE.nthRoot(2717);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.INF.subtract(486.2682);
      Complex complex9 = complex8.ONE.reciprocal();
      complex9.I.getArgument();
      Complex complex10 = complex0.add(complex2);
      complex10.getField();
      Complex complex11 = complex0.acos();
      complex2.sqrt();
      Complex.valueOf((double) 2717, (double) 2717);
      complex2.ZERO.atan();
      complex7.tan();
      complex3.pow(complex9);
      complex9.I.abs();
      complex9.isNaN();
      complex11.sqrt1z();
      complex9.multiply(1);
      complex10.isInfinite();
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-362.13756), (-362.13756));
      Complex complex1 = Complex.valueOf((-362.13756));
      complex1.NaN.getArgument();
      Complex complex2 = complex0.I.pow(complex1);
      complex2.INF.toString();
      Complex.valueOf((-362.13756), (-399.772));
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.NaN.pow((-399.772));
      complex4.I.toString();
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex5.ONE.multiply((-119));
      Complex complex7 = complex6.INF.asin();
      complex7.ONE.subtract(0.0);
      complex0.isNaN();
      Complex complex8 = complex3.sqrt();
      complex3.add((-362.13756));
      complex4.equals(complex3);
      Complex complex9 = complex3.log();
      Complex complex10 = complex9.ZERO.pow((-3374.74667568));
      Complex complex11 = complex10.ZERO.sqrt();
      complex11.ZERO.exp();
      complex2.getImaginary();
      complex4.getImaginary();
      Complex complex12 = complex4.pow(Double.NaN);
      complex1.readResolve();
      complex4.sin();
      complex8.pow(complex12);
      Complex complex13 = complex1.tanh();
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 1.4352343082427979;
      Complex complex0 = new Complex(1.4352343082427979);
      Complex.valueOf(1.4352343082427979);
      Complex complex1 = null;
      complex0.ONE.tan();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.multiply((-2655.04));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.I.pow(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.INF.tanh();
      complex4.getArgument();
      complex2.toString();
      Complex complex5 = Complex.valueOf((-692.41028), 1.126326877851684E-7);
      Complex complex6 = complex5.pow(complex3);
      complex6.sin();
      complex1.sqrt1z();
      complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      complex1.INF.pow(complex0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ONE.subtract(0.0);
      complex3.atan();
      Complex complex4 = complex0.conjugate();
      complex4.nthRoot(1442);
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex4.I.exp();
      Complex complex7 = complex4.log();
      Complex complex8 = complex4.asin();
      complex8.NaN.cos();
      Complex complex9 = complex7.pow(0.0);
      Complex complex10 = complex9.add((-1.3620325027706252E-7));
      Complex complex11 = complex10.ONE.tan();
      complex11.NaN.toString();
      Complex complex12 = Complex.valueOf(0.0, (-2566.59688764264));
      Complex complex13 = complex7.multiply((double) 1442);
      Complex complex14 = complex13.multiply(1406);
      Complex.valueOf((-8.84908716783327E-42));
      complex12.ONE.negate();
      Complex complex15 = complex4.reciprocal();
      complex12.atan();
      complex14.asin();
      complex6.getField();
      complex5.tanh();
      Complex complex16 = complex13.subtract(complex4);
      complex16.I.getField();
      Complex.valueOf((double) 1406);
      complex1.tan();
      complex15.tan();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.ONE.multiply((-301));
      Complex complex3 = complex1.NaN.multiply((-2308.7006098));
      complex3.ONE.getField();
      complex0.I.add(4172.205);
      complex2.INF.multiply(0.0);
      Complex complex4 = complex0.add(9.61114685278);
      Complex complex5 = complex4.tanh();
      complex4.getImaginary();
      Complex complex6 = complex4.acos();
      complex4.isNaN();
      complex6.pow(complex5);
      complex3.createComplex(0.0, (-301));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex2.ONE.atan();
      assertEquals(0.7853981633974483, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      complex2.I.multiply(1);
      Complex complex5 = complex3.divide(complex2);
      complex3.isInfinite();
      complex3.isNaN();
      Complex complex6 = complex1.subtract(complex2);
      Complex.valueOf((double) 1);
      double double0 = complex0.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      List<Complex> list0 = complex0.nthRoot(17);
      assertEquals(17, list0.size());
      assertTrue(list0.contains(complex0));
      
      Complex complex7 = complex6.multiply((-2602));
      complex7.INF.getArgument();
      Complex complex8 = complex3.ONE.reciprocal();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      complex6.getField();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = complex6.ONE.sin();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex9.reciprocal();
      complex9.readResolve();
      Complex complex13 = complex3.cosh();
      complex12.reciprocal();
      assertSame(complex12, complex13);
      
      complex10.getReal();
      Complex complex14 = Complex.valueOf((-50.49931725372583), (-50.49931725372583));
      Complex complex15 = complex14.sqrt();
      assertEquals(3.2339992344676642, complex15.getReal(), 0.01);
      assertEquals((-7.807564812556042), complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex7.asin();
      assertSame(complex16, complex5);
      
      complex9.getField();
      Complex complex17 = complex10.subtract(1236.74783);
      assertSame(complex6, complex3);
      assertEquals((-1235.74783), complex17.getReal(), 0.01);
      assertTrue(complex10.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex((-1220.36202492), (-1220.36202492));
      Complex complex1 = complex0.INF.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = complex0.log();
      complex2.hashCode();
      assertEquals((-1220.36202492), complex0.getImaginary(), 0.01);
      assertEquals(7.453476425725858, complex2.getReal(), 0.01);
      assertEquals((-2.356194490192345), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(2108.7175036793, 0.0);
      Complex complex1 = complex0.acos();
      assertEquals(8.346982348768533, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.log();
      complex2.INF.createComplex(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.INF.sqrt1z();
      assertFalse(complex4.isInfinite());
      
      Complex.valueOf(0.0, 2108.7175036793);
      Complex complex5 = complex2.cos();
      assertFalse(complex5.isNaN());
  }
}
