/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:29:12 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(3099.2521, Double.POSITIVE_INFINITY);
      complex1.multiply(443);
      complex0.conjugate();
      Complex complex2 = Complex.valueOf((double) 457, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf((double) 457);
      complex3.isNaN();
      complex2.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY, (double) 457);
      complex3.nthRoot(457);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.asin();
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex1.INF.exp();
      complex1.tan();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(34.0, 34.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.tan();
      complex1.I.subtract(34.0);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.INF.subtract(34.0);
      complex5.ONE.subtract(complex3);
      complex1.pow(34.0);
      complex0.asin();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-767.9352), Double.POSITIVE_INFINITY);
      complex1.tan();
      complex1.multiply((-767.9352));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2812053.5552, Double.POSITIVE_INFINITY);
      complex1.tan();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply((-192));
      complex0.ZERO.hashCode();
      complex0.nthRoot(2717);
      Complex complex2 = complex0.subtract(complex1);
      complex2.ONE.log();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2812053.5552, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-523.1774522198178));
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex2.asin();
      complex3.subtract(complex4);
      complex0.sqrt1z();
      complex1.equals(complex0);
      complex3.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(8.321226457219046E276);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.multiply(1413);
      complex4.ZERO.pow(complex3);
      Complex complex5 = complex1.reciprocal();
      complex5.add((-194.0));
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex0.pow(8.321226457219046E276);
      Complex complex8 = complex0.sinh();
      complex7.I.sqrt();
      Complex.valueOf((-8485654.302969713));
      complex6.divide(complex5);
      complex8.divide(complex7);
      Complex complex9 = complex4.multiply(1544);
      complex9.reciprocal();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.I.sin();
      complex2.ONE.asin();
      Complex complex3 = complex0.NaN.multiply(1.722188030477476E-4);
      Complex complex4 = complex3.I.multiply(Double.POSITIVE_INFINITY);
      complex4.ZERO.sin();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex0.ZERO.add(complex5);
      complex6.ONE.toString();
      complex6.NaN.atan();
      complex0.subtract(complex1);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.log();
      complex8.INF.cosh();
      complex0.toString();
      Complex complex9 = complex7.ONE.sin();
      complex9.I.subtract(complex2);
      complex0.readResolve();
      complex5.ZERO.tanh();
      complex8.add((-178.7802992));
      Complex complex10 = complex1.asin();
      complex10.NaN.add(complex5);
      complex3.sqrt();
      complex0.exp();
      Complex complex11 = complex4.sqrt1z();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.add(complex1);
      complex1.acos();
      Complex complex4 = Complex.valueOf((-3.0));
      complex0.asin();
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex4.sqrt1z();
      Object object0 = complex3.readResolve();
      complex6.equals(object0);
      Complex complex7 = new Complex((-3.0), 1.0);
      Complex complex8 = complex5.divide(complex1);
      Complex complex9 = Complex.valueOf(278.824);
      complex9.multiply((-3457));
      complex8.cos();
      Complex complex10 = complex8.reciprocal();
      complex9.asin();
      complex10.divide(complex8);
      complex1.createComplex(278.824, (-3.0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-5425.65);
      Complex complex0 = Complex.valueOf((-5425.65));
      complex0.createComplex((-5425.65), (-5425.65));
      complex0.I.hashCode();
      complex0.I.abs();
      Complex complex1 = complex0.acos();
      complex1.ZERO.sin();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-9.45487863616303E-8), (-2902.783359986));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.subtract((-9.45487863616303E-8));
      complex3.readResolve();
      Object object0 = complex0.readResolve();
      complex4.equals(object0);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(0.38308101892471313, 0.38308101892471313);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.2810251664891242E-7, 2.2810251664891242E-7);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex2.acos();
      Complex complex6 = Complex.valueOf((-3.0));
      Complex complex7 = complex4.asin();
      complex7.INF.sqrt();
      complex7.INF.subtract(complex5);
      Complex complex8 = complex4.sqrt1z();
      complex3.equals(complex4);
      Complex complex9 = complex8.sqrt();
      complex0.I.divide(complex8);
      complex6.multiply((-3457));
      Complex complex10 = complex9.cos();
      complex10.INF.subtract(complex7);
      complex3.reciprocal();
      complex8.asin();
      complex5.reciprocal();
      Complex.valueOf((-267.779719943237), Double.NaN);
      complex7.multiply((-3457));
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      complex1.NaN.tanh();
      complex1.INF.divide((-508.220700728));
      Complex complex2 = Complex.valueOf((-2078.9562314), (-2078.9562314));
      Complex complex3 = complex0.ONE.divide(1838.76996583437);
      complex0.ZERO.getArgument();
      Complex complex4 = complex0.pow((-682.9));
      Complex complex5 = complex4.ONE.log();
      complex5.I.subtract(complex0);
      Complex complex6 = complex0.I.atan();
      complex6.I.divide((-682.9));
      Complex complex7 = complex0.tan();
      complex7.I.nthRoot(17);
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = complex8.ZERO.subtract((-1229.5131455));
      complex9.I.tanh();
      complex3.readResolve();
      Complex complex10 = complex0.reciprocal();
      complex10.reciprocal();
      complex5.I.subtract((-508.220700728));
      Complex.valueOf((-1229.5131455));
      complex2.exp();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      Complex.valueOf((-508.03203701), (-508.03203701));
      complex1.tanh();
      Complex complex3 = complex1.sqrt();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      // Undeclared exception!
      complex0.nthRoot(2137903415);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      complex1.abs();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      complex3.asin();
      complex2.tan();
      complex3.asin();
      complex3.multiply(1305);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.reciprocal();
      complex0.reciprocal();
      complex2.toString();
      Complex complex3 = Complex.ZERO;
      complex3.toString();
      Complex complex4 = Complex.valueOf(2.0);
      complex4.toString();
      Complex complex5 = complex0.cosh();
      complex4.isNaN();
      Complex complex6 = complex2.log();
      Complex complex7 = Complex.NaN;
      complex6.abs();
      Complex complex8 = complex5.divide(2.0);
      Complex complex9 = Complex.NaN;
      complex7.asin();
      complex8.tan();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(535.8659511182257);
      complex0.nthRoot(2398);
      Complex complex1 = complex0.multiply((-3940));
      Complex complex2 = Complex.valueOf((double) 2398, (double) (-3940));
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8810608386993408);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.ONE.add((-2375.18303404334));
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      complex3.I.divide(complex2);
      complex3.NaN.nthRoot(1171);
      complex2.getField();
      Complex.valueOf(1.8810608386993408);
      Complex complex4 = Complex.valueOf(0.09495499730110168, 1.8810608386993408);
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(7.952287052787358E165);
      Complex complex1 = Complex.ZERO;
      complex1.ONE.getField();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = Complex.ONE;
      complex6.readResolve();
      complex4.pow((-1729.993));
      complex0.multiply((-1130));
      complex0.sqrt1z();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.divide((-3663.10087));
      complex5.toString();
      complex4.tanh();
      complex8.cosh();
      Complex complex9 = Complex.I;
      complex9.isNaN();
      Complex complex10 = complex8.add(complex8);
      complex10.I.conjugate();
      Complex complex11 = Complex.valueOf((-1729.993), (-3663.10087));
      complex11.abs();
      Complex complex12 = Complex.ONE;
      complex12.divide((double) (-1130));
      complex11.add(6.283185307179586);
      complex11.asin();
      complex8.reciprocal();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.7012104536759924, 4826.9961928318235);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.952287052787358E165, 7.952287052787358E165);
      Complex complex1 = complex0.I.sin();
      complex0.tanh();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(6.23595661775056E-8);
      Complex complex1 = complex0.tan();
      complex1.getArgument();
      complex0.ZERO.toString();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.INF.asin();
      complex4.NaN.add(0.0);
      Complex complex6 = complex4.ZERO.tan();
      complex6.ZERO.toString();
      complex6.ONE.sqrt1z();
      Complex complex7 = complex2.NaN.sqrt();
      Complex complex8 = complex6.I.sin();
      complex0.INF.createComplex(6.23595661775056E-8, 6.23595661775056E-8);
      complex3.getField();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex3.multiply((-4437));
      complex5.sqrt1z();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex11.I.reciprocal();
      complex12.ZERO.toString();
      complex9.INF.multiply(0.7117003134648161);
      Complex complex13 = complex9.sqrt1z();
      complex9.NaN.pow(complex11);
      Complex complex14 = complex5.sin();
      Complex complex15 = complex14.ZERO.sqrt();
      complex9.divide(complex13);
      complex7.abs();
      complex15.ONE.readResolve();
      complex8.getReal();
      complex15.toString();
      Complex complex16 = complex8.acos();
      complex15.pow(complex12);
      complex3.abs();
      complex16.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-5997218.720670792));
      Complex complex2 = complex1.I.subtract((-5997218.720670792));
      complex1.INF.readResolve();
      complex2.readResolve();
      Complex complex3 = complex1.INF.pow(complex0);
      Complex.valueOf((-5997218.720670792));
      complex3.ONE.abs();
      Complex complex4 = Complex.valueOf((-20.0), (-20.0));
      Complex complex5 = complex4.INF.divide(complex0);
      Complex complex6 = complex4.INF.atan();
      Complex complex7 = complex6.I.multiply((-2.290530257391564E-7));
      complex7.NaN.multiply((-4119.76185));
      Complex complex8 = complex4.subtract(complex6);
      complex8.INF.toString();
      complex4.INF.sin();
      Complex complex9 = complex0.subtract((-2.290530257391564E-7));
      Complex complex10 = complex1.INF.pow(complex9);
      complex4.getReal();
      complex2.pow(1.627922534942627);
      Complex complex11 = new Complex((-5997218.720670792), (-20.0));
      Complex complex12 = complex0.pow(complex11);
      complex12.ONE.add(complex4);
      Complex complex13 = complex6.pow(complex1);
      Complex complex14 = complex6.multiply(complex4);
      complex13.abs();
      complex5.ONE.asin();
      Complex complex15 = complex9.log();
      complex15.I.multiply(1);
      complex15.ZERO.exp();
      complex14.toString();
      complex5.asin();
      complex4.tanh();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.readResolve();
      complex0.equals(complex1);
      complex1.nthRoot(2812);
      complex1.pow(0.9998057129371425);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.add(Double.NaN);
      Complex complex4 = Complex.valueOf((-20.0));
      complex2.add(complex4);
      complex3.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.divide(complex0);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.add(complex1);
      complex3.abs();
      Complex complex4 = complex2.divide((-1.0));
      Complex complex5 = complex3.add((-1.0));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.asin();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.subtract(complex4);
      Complex complex10 = complex9.pow((-2.047124671392676E-8));
      Complex complex11 = complex5.negate();
      complex3.divide((-1.0));
      Complex complex12 = Complex.INF;
      complex2.divide(complex11);
      complex10.createComplex((-0.9998057129371425), (-8.638415150333099E-8));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.952287052787358E165);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(3.669404761339415E-165);
      Complex complex3 = complex2.multiply((-1.0305018010328949E-8));
      complex0.nthRoot(683);
      complex1.getField();
      Complex complex4 = complex0.asin();
      complex4.tan();
      complex4.getArgument();
      complex3.getField();
      complex2.reciprocal();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(6.23165710486722E298, 6.23165710486722E298);
      Complex complex1 = complex0.multiply(1658.0);
      complex1.INF.pow(1658.0);
      complex1.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5410289764404297);
      Complex complex1 = new Complex(34.0, 34.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.reciprocal();
      complex3.toString();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.divide(34.0);
      complex5.toString();
      Complex complex6 = Complex.valueOf((-129.956829411365));
      complex6.toString();
      complex0.tanh();
      Object object0 = new Object();
      complex5.equals(object0);
      complex4.pow(0.9999999136158485);
      complex6.tan();
      complex2.add(2583.6842487019);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-8.638415150333099E-8), (-8.638415150333099E-8));
      complex1.divide(complex0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.I;
      complex3.divide(102.58958212152);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 944.3);
      complex3.tanh();
      complex4.cosh();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1291.0));
      complex1.nthRoot(683);
      Complex complex2 = complex0.tanh();
      complex1.getField();
      Complex complex3 = complex1.asin();
      complex0.tan();
      complex3.getArgument();
      complex0.getField();
      complex2.reciprocal();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4027418.266915776, (-292.62));
      complex0.acos();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.23165710486722E298, 6.23165710486722E298);
      Complex complex1 = complex0.multiply(1658.0);
      Complex complex2 = complex0.asin();
      complex2.tan();
      complex0.getArgument();
      complex1.getField();
      complex0.reciprocal();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3259.3618, 3259.3618);
      Complex complex2 = complex0.tan();
      complex2.getReal();
      complex1.cosh();
      Complex complex3 = new Complex((-1));
      complex3.multiply((-1));
      Complex complex4 = complex1.negate();
      complex4.createComplex(1.1180800322548217, Double.NaN);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.tanh();
      complex5.sqrt1z();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.asin();
      complex2.acos();
      Complex complex3 = complex0.multiply(611.143397764);
      complex3.sqrt();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.NaN;
      complex5.readResolve();
      Complex complex6 = complex4.log();
      complex6.I.sqrt();
      complex3.pow(611.143397764);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.ZERO.nthRoot(108);
      Complex complex2 = complex1.add(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.ZERO.asin();
      complex0.I.cos();
      complex3.getArgument();
      complex4.getField();
      complex2.reciprocal();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex(108, 108);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(34.0, 34.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.asin();
      complex1.INF.multiply(69.81);
      complex0.cos();
      complex0.multiply(complex1);
      complex2.I.subtract((-5147.023));
      Complex complex3 = complex2.cosh();
      complex0.multiply(2084);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex3.createComplex(3.5660813129951965, 3479.0);
      complex4.tan();
      complex2.tanh();
      complex5.sin();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex0.ZERO.nthRoot(108);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.I.cos();
      complex0.getReal();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex2.subtract(846.9821773572982);
      complex4.subtract(complex6);
      complex0.pow(846.9821773572982);
      complex3.atan();
      complex2.isNaN();
      complex7.tanh();
      complex4.multiply((-2212));
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(34.0, 34.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.cos();
      complex3.tan();
      Complex complex4 = complex0.multiply(complex1);
      complex2.I.subtract((-5147.023));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.INF.subtract(34.0);
      complex6.ONE.subtract(complex4);
      complex2.pow(34.0);
      complex2.atan();
      complex3.isNaN();
      Complex complex7 = new Complex((-1.0));
      complex7.tanh();
      complex3.multiply((-2212));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.23165710486722E298, 6.23165710486722E298);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(1.0839714455426386E-8);
      complex2.getArgument();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = new Complex(6.23165710486722E298, Double.NaN);
      Complex complex5 = complex4.reciprocal();
      complex3.subtract(6.23165710486722E298);
      complex5.sqrt();
      Complex complex6 = new Complex((-430.227433), (-430.227433));
      try { 
        complex5.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(34.0, 34.0);
      Complex complex1 = Complex.valueOf(0.3571540325038, (-9.185071463667081E-9));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.add(complex4);
      complex5.divide((-9.185071463667081E-9));
      Complex complex6 = complex4.pow((-9.185071463667081E-9));
      Complex complex7 = complex6.sin();
      Complex complex8 = Complex.valueOf(34.0, 34.0);
      Complex complex9 = complex6.subtract(complex7);
      complex8.subtract(complex2);
      complex2.log();
      complex4.toString();
      complex3.getField();
      complex7.sqrt();
      complex2.reciprocal();
      complex1.subtract(complex5);
      complex4.negate();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.subtract((-8.638415150333099E-8));
      Complex complex12 = Complex.ZERO;
      complex12.conjugate();
      complex11.NaN.tan();
      complex6.asin();
      complex6.getImaginary();
      Complex complex13 = complex9.tanh();
      complex11.divide(0.9999999245050744);
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-9.185071463667081E-9), 5.321990399912051E-172);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(1.0);
      complex2.asin();
      Complex complex3 = complex2.cos();
      complex3.multiply(complex0);
      Complex complex4 = complex1.subtract(5.321990399912051E-172);
      complex0.atan();
      complex3.subtract((-2544.33));
      Complex complex5 = Complex.valueOf((-2544.33), (-2544.33));
      complex5.subtract(complex2);
      complex5.pow(1.0);
      complex5.atan();
      Complex complex6 = Complex.valueOf(5.321990399912051E-172, (-162.38250242016093));
      complex6.isNaN();
      complex4.tanh();
      complex5.multiply(735);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ZERO.multiply((-20.0));
      Complex complex5 = complex1.I.asin();
      complex1.cosh();
      complex5.isNaN();
      Complex complex6 = complex2.log();
      Complex complex7 = new Complex(0.0, 1364.9996336995846);
      Complex complex8 = complex7.add(complex6);
      complex7.abs();
      Complex complex9 = complex4.divide((-20.0));
      Complex complex10 = new Complex(2434.024);
      complex10.add(892.6422974935296);
      complex8.asin();
      complex7.tan();
      complex4.subtract(complex10);
      complex9.pow(892.6422974935296);
      complex8.negate();
      complex5.divide(0.0);
      complex7.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(0.0);
      Complex complex1 = complex0.multiply((-1365));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.divide((-325.4143));
      complex0.toString();
      Complex complex4 = new Complex(2928.6481283057683);
      complex4.toString();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex3.cosh();
      complex1.isNaN();
      complex3.log();
      complex3.add(complex2);
      complex2.abs();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex1.add(6.283185307179586);
      complex5.asin();
      Complex complex10 = complex0.tan();
      complex4.subtract(complex5);
      complex1.pow((-988.54156114225));
      complex9.negate();
      complex5.divide(1.304245948791504);
      complex10.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
      Complex complex2 = complex1.multiply(complex0);
      complex0.readResolve();
      Complex complex3 = complex2.pow(0.0);
      complex1.multiply((-1365));
      Complex complex4 = Complex.INF;
      complex4.sqrt1z();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.divide(0.0);
      complex5.toString();
      complex1.toString();
      complex3.tanh();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.cosh();
      complex6.isNaN();
      Complex complex9 = complex2.log();
      Complex complex10 = complex5.add(complex0);
      complex10.abs();
      complex5.divide(2594.214);
      Complex complex11 = complex6.add(Double.POSITIVE_INFINITY);
      Complex complex12 = complex1.asin();
      complex6.tan();
      Complex complex13 = complex8.subtract(complex9);
      complex12.pow((double) (-1365));
      Complex complex14 = new Complex((-1365), Double.POSITIVE_INFINITY);
      complex7.divide(0.0);
      complex13.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(535.8659511182257);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(535.8659511182257, 535.8659511182257);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.reciprocal();
      complex3.reciprocal();
      complex4.toString();
      complex2.tanh();
      complex1.atan();
      complex2.subtract(complex4);
      complex1.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
      complex2.pow(535.8659511182257);
      Complex complex5 = Complex.NaN;
      complex5.tan();
      complex5.add(1.3831214731781958E184);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.185071463667081E-9));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.pow((-9.185071463667081E-9));
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.ZERO;
      complex4.divide((-1.5349008424038433));
      complex2.toString();
      complex3.toString();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex2.cosh();
      complex2.isNaN();
      Complex complex7 = new Complex(1158.99668);
      Complex complex8 = complex7.log();
      complex6.add(complex1);
      complex0.abs();
      Complex complex9 = Complex.NaN;
      complex9.divide((-1.5349008424038433));
      complex4.add(1158.99668);
      complex1.asin();
      Complex complex10 = complex7.tan();
      complex7.subtract(complex5);
      complex9.pow(1158.99668);
      complex10.negate();
      complex8.divide((-1.5349008424038433));
      complex1.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(34.0, 34.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.multiply(complex1);
      complex1.I.subtract((-5147.023));
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.INF.subtract(34.0);
      complex5.ONE.subtract(complex3);
      complex1.pow(34.0);
      Complex complex6 = complex1.atan();
      complex2.isNaN();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.185071463667081E-9));
      Complex complex1 = complex0.I.cosh();
      complex0.pow((-9.185071463667081E-9));
      complex1.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.reciprocal();
      complex0.reciprocal();
      complex2.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      complex3.log();
      Complex complex4 = new Complex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.INF.negate();
      Complex complex2 = complex0.add(complex1);
      complex2.sqrt1z();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.acos();
      Complex.valueOf(0.0, 0.0);
      complex0.NaN.divide(0.0);
      complex2.NaN.sqrt1z();
      complex2.getField();
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex5.reciprocal();
      Complex.valueOf((-427.748167), 0.0);
      complex4.exp();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = 1278.498846778;
      Complex complex0 = Complex.valueOf(1278.498846778);
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(34.0, 34.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.multiply(complex1);
      complex2.I.subtract((-5147.023));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.INF.subtract(34.0);
      Complex complex7 = complex6.ONE.subtract(complex4);
      complex2.pow(34.0);
      Complex complex8 = complex2.atan();
      complex3.isNaN();
      complex8.tanh();
      complex7.multiply((-2212));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.divide(complex0);
      complex1.ZERO.log();
      complex3.exp();
      Complex complex4 = complex0.tanh();
      complex0.toString();
      Complex.valueOf(2.0);
      complex0.abs();
      complex1.add(0.0);
      try { 
        complex4.nthRoot((-1009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,009
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5475.37);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.divide(0.0);
      Complex complex3 = complex2.ONE.multiply(1);
      Complex complex4 = complex3.ZERO.exp();
      complex4.subtract(1491.98);
      complex3.NaN.nthRoot(1);
      complex3.INF.nthRoot(601);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.ZERO.createComplex(5475.37, Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.createComplex(3581.9078, (-695.78));
      Complex.valueOf(0.0);
      Complex complex8 = complex1.pow((double) 601);
      complex0.acos();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex9.divide(complex4);
      Complex complex11 = complex7.cosh();
      complex11.I.createComplex((-558.5291), 0.0);
      complex8.sqrt1z();
      complex11.sinh();
      complex9.subtract(complex10);
      complex6.add(3581.9078);
      complex4.add((-1180.5155));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-2587));
      complex0.isNaN();
      complex0.createComplex((-2587), 0.0);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.ONE.pow(complex1);
      complex4.abs();
      complex1.I.multiply((double) (-2587));
      complex0.hashCode();
      Complex complex5 = complex0.exp();
      complex5.ONE.negate();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.INF.hashCode();
      try { 
        complex6.ZERO.nthRoot((-2587));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,587
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.negate();
      complex0.reciprocal();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex0.toString();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.subtract(complex1);
      Object object0 = complex4.readResolve();
      complex5.equals(object0);
      complex1.pow((-1781.55));
      complex2.tan();
      complex0.add((-346.4076963293));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-5197.421891434807);
      Complex complex1 = complex0.NaN.add((-5197.421891434807));
      complex1.getArgument();
      int int0 = 0;
      Complex complex2 = complex1.I.sqrt1z();
      complex2.INF.getArgument();
      try { 
        complex0.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.NaN.pow(0.0);
      complex3.INF.createComplex(5079.945076861262, 5079.945076861262);
      Complex complex4 = complex0.ONE.multiply((-1018.533));
      Complex complex5 = complex4.INF.multiply(932);
      Complex complex6 = complex5.ZERO.add(complex4);
      complex0.NaN.asin();
      complex0.hashCode();
      complex0.nthRoot(1);
      complex6.INF.multiply(932);
      complex6.createComplex((-909.69574), 648.82355);
      complex5.pow(complex4);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex0.ZERO.nthRoot(108);
      Complex complex2 = complex1.add(complex0);
      complex2.tanh();
      Complex complex3 = complex0.I.cos();
      complex0.getReal();
      Complex complex4 = complex0.cosh();
      complex4.NaN.multiply(108);
      Complex complex5 = complex3.negate();
      complex3.ZERO.createComplex(0.0, 1.918355503889933E-7);
      Complex complex6 = complex5.I.tan();
      complex4.tanh();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.630546413718035E-10);
      Complex.valueOf(7.630546413718035E-10);
      complex0.NaN.asin();
      Complex complex1 = complex0.createComplex(7.630546413718035E-10, 7.630546413718035E-10);
      Complex complex2 = complex1.ZERO.sin();
      Complex.valueOf((-200.6984308), 7.630546413718035E-10);
      Complex.valueOf(0.0, (-200.6984308));
      complex1.sinh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.pow(complex4);
      complex5.ZERO.tanh();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.sqrt1z();
      Complex.valueOf(7.630546413718035E-10);
      complex7.NaN.conjugate();
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex2.sqrt();
      complex9.asin();
      complex9.sqrt1z();
      Complex complex10 = complex4.reciprocal();
      complex7.multiply(1);
      complex9.abs();
      Object object0 = new Object();
      complex2.equals(object0);
      complex10.nthRoot(1);
      complex0.sin();
      complex1.getImaginary();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3218.29583322);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.multiply(complex3);
      complex4.getField();
      complex2.isNaN();
      Complex complex5 = complex0.ZERO.conjugate();
      complex5.abs();
      Complex complex6 = complex2.multiply((-398));
      Complex complex7 = complex6.I.acos();
      Complex complex8 = complex3.multiply(2337);
      Complex complex9 = complex8.ONE.negate();
      complex1.NaN.sqrt();
      Complex complex10 = complex8.ZERO.tanh();
      Complex complex11 = complex8.ONE.subtract(complex5);
      complex11.NaN.sqrt1z();
      complex11.NaN.toString();
      Complex complex12 = complex9.I.log();
      Complex complex13 = complex0.multiply(9.819402293160495E-110);
      complex13.ONE.asin();
      complex13.add(complex4);
      Complex complex14 = complex12.asin();
      complex14.I.acos();
      complex14.abs();
      complex8.pow(complex9);
      complex9.subtract(0.0);
      complex10.readResolve();
      Complex.valueOf((-4.402550702194912E-8), (double) 2337);
      complex3.hashCode();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.NaN.exp();
      complex2.add(1610.097558852);
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex3.NaN.sqrt();
      complex0.getArgument();
      Complex complex5 = complex0.log();
      complex3.NaN.getField();
      complex0.ONE.reciprocal();
      Complex complex6 = complex0.ZERO.divide(complex4);
      Complex complex7 = complex0.pow(1.5707963267948966);
      Complex complex8 = complex7.sqrt();
      complex7.equals("/rX#=W)");
      complex5.negate();
      Complex complex9 = Complex.valueOf(1.5707963267948966);
      complex0.asin();
      Complex complex10 = complex9.log();
      complex10.equals(complex8);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = new Complex(0.0);
      complex1.ZERO.toString();
      Complex complex3 = complex2.ONE.createComplex(0.0, 0.0);
      Complex complex4 = complex1.add(complex2);
      complex4.INF.getField();
      complex0.negate();
      Complex.valueOf((-1496.0030370112959), (-20.0));
      Complex complex5 = complex0.exp();
      Complex complex6 = complex2.INF.subtract(complex0);
      Complex complex7 = complex5.sin();
      Complex complex8 = complex7.I.subtract(complex0);
      complex7.I.cos();
      complex3.exp();
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex9.I.subtract(complex8);
      Complex complex11 = complex5.pow((-8.291832428736212E-8));
      complex11.multiply(1);
      complex6.abs();
      complex5.exp();
      complex5.getImaginary();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(649.9176854);
      complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.subtract(1799.7);
      complex2.ZERO.acos();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = Complex.valueOf((-413.807), 0.0);
      complex1.toString();
      complex5.NaN.multiply(1);
      Complex complex6 = complex1.multiply(0.0);
      complex0.abs();
      Complex complex7 = complex6.ZERO.subtract(1799.7);
      Complex complex8 = complex0.tan();
      complex8.asin();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex2.add((-810.02027930077));
      complex10.I.atan();
      complex5.atan();
      Complex complex11 = complex9.tan();
      Complex complex12 = complex5.sinh();
      complex7.abs();
      Complex complex13 = complex11.sqrt();
      complex13.multiply(complex4);
      complex12.multiply(complex10);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.isNaN();
      Complex complex1 = complex0.tanh();
      complex0.ZERO.sinh();
      Complex complex2 = complex1.cosh();
      complex1.I.hashCode();
      complex2.ZERO.divide(complex0);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ONE.add(0.0);
      complex2.I.divide(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.ZERO.conjugate();
      complex0.ZERO.toString();
      Complex complex5 = complex0.ONE.cos();
      Complex complex6 = Complex.valueOf(682.4151, 1.0);
      Complex complex7 = complex5.ZERO.sqrt1z();
      complex0.getImaginary();
      Complex complex8 = complex0.add(Double.NaN);
      Complex complex9 = complex8.ONE.sin();
      complex9.ZERO.abs();
      Complex complex10 = complex7.NaN.createComplex(0.0, 1.0);
      complex10.ZERO.conjugate();
      complex8.getField();
      complex7.abs();
      Complex complex11 = complex4.pow(1895.564681);
      Complex complex12 = complex4.divide(complex11);
      Complex complex13 = complex6.sqrt1z();
      complex12.multiply(2553);
      complex13.sqrt1z();
      complex9.reciprocal();
      complex3.getField();
      complex1.nthRoot(2553);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex1.NaN.createComplex(0.0, 4.961148056969105E-78);
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex3.ONE.negate();
      complex5.NaN.multiply((-385));
      Complex complex6 = complex0.I.conjugate();
      Complex complex7 = complex6.ZERO.sinh();
      complex7.ONE.exp();
      Complex complex8 = complex0.pow(653.7644);
      complex8.I.getArgument();
      complex0.tanh();
      Complex.valueOf(1.7482123374938965, (-744.47115147204));
      complex0.getArgument();
      complex7.toString();
      complex2.isInfinite();
      complex4.acos();
      complex6.subtract(complex2);
      complex7.hashCode();
      Complex complex9 = Complex.ZERO;
      complex0.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.0), (-8.638415150333099E-8));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.ZERO.add(complex1);
      Complex complex5 = complex4.divide((-8.638415150333099E-8));
      complex4.INF.pow((-1.0));
      Complex complex6 = complex4.INF.sin();
      Complex.valueOf(0.0, (-1985.2537));
      Complex complex7 = complex3.subtract(complex1);
      Complex complex8 = complex7.I.subtract(complex2);
      Complex complex9 = complex8.ZERO.log();
      complex3.NaN.toString();
      complex2.getField();
      complex0.sqrt();
      Complex complex10 = complex4.reciprocal();
      complex10.NaN.subtract(complex6);
      complex0.subtract((-3981.111309977975));
      Complex complex11 = complex5.conjugate();
      complex9.asin();
      complex11.getImaginary();
      complex4.tanh();
      complex11.divide(1.0839714455426386E-8);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.tanh();
      complex2.ONE.readResolve();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.I.sin();
      complex5.hashCode();
      complex4.ZERO.asin();
      complex0.sqrt();
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex2.subtract((-1757.0822339515));
      Complex complex8 = complex7.ZERO.reciprocal();
      complex3.INF.sinh();
      Complex complex9 = complex7.NaN.subtract(complex0);
      complex7.getField();
      complex7.ONE.cos();
      complex3.ZERO.abs();
      Complex complex10 = complex6.pow(complex3);
      complex10.isInfinite();
      complex3.getArgument();
      complex0.NaN.sinh();
      Complex complex11 = complex1.conjugate();
      complex11.NaN.getField();
      Complex complex12 = Complex.valueOf(6.283185307179586);
      complex2.add(721.41459);
      Complex complex13 = complex12.negate();
      complex0.getArgument();
      complex9.subtract(complex13);
      complex0.createComplex(0.0, 0.0);
      complex1.add(0.0);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.multiply((-4013));
      complex0.INF.cos();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.pow((-2099.178514148));
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.valueOf(0.0, 896.757);
      Complex complex7 = Complex.valueOf((double) (-4013));
      complex1.ZERO.subtract(complex7);
      Complex complex8 = complex1.tanh();
      complex4.I.subtract((-2099.178514148));
      Complex complex9 = complex8.add(complex5);
      complex9.sqrt1z();
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex4.sin();
      complex11.I.pow(complex9);
      complex9.getField();
      complex10.divide(complex1);
      Complex.valueOf(896.757);
      complex4.hashCode();
      complex11.multiply(0.0);
      complex6.add(896.757);
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
      complex0.I.sqrt1z();
      complex0.nthRoot(1);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.INF.exp();
      complex3.INF.cos();
      complex3.INF.sin();
      Complex complex4 = complex1.reciprocal();
      complex4.INF.getField();
      complex0.sqrt();
      Complex complex5 = complex0.sinh();
      complex5.INF.multiply(562.7280350082244);
      Complex.valueOf((double) 1);
      complex0.subtract((double) 1);
      complex2.sin();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = (-461.2197702);
      Complex complex0 = Complex.valueOf(1.2506117820739746, (-461.2197702));
      int int0 = (-1097);
      complex0.sinh();
      Complex complex1 = Complex.valueOf(2225.1555);
      complex1.NaN.exp();
      complex0.I.multiply(complex1);
      try { 
        complex0.nthRoot((-1097));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,097
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2129.15873), 0.0);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(535.8659511182257);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.I.divide(complex3);
      Complex complex5 = complex4.INF.multiply(complex0);
      complex2.ONE.readResolve();
      Complex complex6 = complex5.I.pow(535.8659511182257);
      complex6.NaN.multiply((-1365));
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex7.divide((-2984.788106));
      complex8.INF.toString();
      complex7.ZERO.toString();
      Complex complex9 = complex7.NaN.tanh();
      complex9.I.cosh();
      complex0.isNaN();
      Complex complex10 = complex0.log();
      Complex complex11 = complex1.add(complex10);
      complex4.abs();
      complex1.INF.divide((-988.54156114225));
      Complex complex12 = complex0.add((-2984.788106));
      complex12.asin();
      Complex complex13 = complex7.tan();
      complex13.NaN.subtract(complex8);
      complex7.pow(Double.NaN);
      Complex complex14 = complex11.negate();
      complex14.divide((-6.038239639506472E-32));
      complex11.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.getField();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.multiply((-2212.563334191793));
      complex3.I.sqrt();
      complex2.INF.subtract(complex0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.reciprocal();
      Object object0 = complex5.readResolve();
      complex4.equals(object0);
      complex1.log();
      complex5.createComplex((-1859.989223), (-4547.99));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4220.91380053239));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.NaN.subtract(complex1);
      Complex complex4 = complex0.ZERO.add((-2443.06361));
      complex2.ONE.atan();
      Complex complex5 = complex0.NaN.subtract(0.0);
      complex4.INF.sin();
      Complex complex6 = complex1.I.sqrt1z();
      complex6.INF.abs();
      Complex complex7 = complex0.INF.sqrt();
      complex7.NaN.cos();
      Complex complex8 = complex0.I.multiply(0);
      complex0.getReal();
      complex0.conjugate();
      complex0.getArgument();
      complex0.nthRoot(1);
      Complex complex9 = complex8.pow(complex3);
      complex1.atan();
      Complex complex10 = complex1.conjugate();
      complex1.isNaN();
      complex5.readResolve();
      complex9.INF.nthRoot(1);
      Complex complex11 = complex6.acos();
      complex9.exp();
      Complex.valueOf((-4220.91380053239), 2.0);
      complex10.equals(complex8);
      complex4.getArgument();
      complex6.reciprocal();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.atan();
      complex0.isInfinite();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(892.6422974935296);
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.I.subtract(892.6422974935296);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex0.asin();
      complex4.ZERO.log();
      Complex complex5 = Complex.valueOf(892.6422974935296, 892.6422974935296);
      Complex complex6 = complex5.ZERO.pow(complex1);
      Complex complex7 = complex0.multiply((-763));
      complex7.ZERO.toString();
      complex3.ONE.add(complex6);
      complex7.INF.atan();
      complex3.subtract(71.643309541435);
      Complex complex8 = complex0.tan();
      complex5.tanh();
      complex4.multiply((-941.48334));
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.952287052787358E165, 7.952287052787358E165);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.185071463667081E-9));
      Complex complex1 = complex0.I.cosh();
      complex0.pow((-9.185071463667081E-9));
      complex1.getArgument();
      Complex complex2 = complex0.conjugate();
      complex2.ZERO.reciprocal();
      complex0.subtract((-9.185071463667081E-9));
      Complex complex3 = complex0.sqrt();
      Complex complex4 = new Complex(0.0, 208.74221039468);
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.INF.readResolve();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex2.INF.atan();
      complex0.INF.hashCode();
      Complex complex5 = complex3.ZERO.multiply(508);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex3.INF.hashCode();
      Complex complex6 = complex0.divide((-584.1));
      Complex complex7 = complex6.sqrt1z();
      complex3.hashCode();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex5.acos();
      Complex complex10 = complex7.atan();
      complex4.readResolve();
      complex10.NaN.add(complex2);
      complex0.abs();
      complex10.hashCode();
      complex4.sqrt1z();
      complex9.hashCode();
      complex8.nthRoot(508);
      Complex complex11 = Complex.valueOf((-584.1));
      complex11.ONE.multiply(1324.5);
      complex6.tanh();
      complex9.multiply(1351.7055798128572);
      complex7.acos();
      complex1.cosh();
      complex1.divide(complex5);
      complex1.divide((-601.1381630654));
      complex6.pow((-584.1));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.cosh();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(1594.3, 1594.3);
      Complex complex2 = complex1.negate();
      complex2.I.sqrt1z();
      complex0.isInfinite();
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex0.cos();
      complex5.I.cosh();
      complex3.NaN.tanh();
      complex5.getReal();
      complex1.getImaginary();
      complex3.NaN.divide(Double.NaN);
      complex5.toString();
      complex2.ZERO.getField();
      complex5.ONE.add(complex2);
      Complex complex6 = complex0.ZERO.asin();
      complex6.INF.asin();
      Complex.valueOf(Double.NaN);
      complex0.INF.tanh();
      complex3.getArgument();
      complex2.abs();
      Complex complex7 = complex2.subtract((-627.6));
      complex4.multiply(0);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.ZERO.toString();
      complex0.getField();
      complex0.getImaginary();
      complex0.ONE.multiply(Double.NaN);
      Complex complex1 = complex0.add(2425.892);
      Complex complex2 = complex1.exp();
      complex0.getImaginary();
      complex1.sqrt();
      complex0.readResolve();
      Complex.valueOf(0.0);
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex4 = Complex.valueOf(1.619992971420288);
      Complex complex5 = complex2.add(Double.NaN);
      Complex complex6 = complex1.ONE.asin();
      complex6.ZERO.multiply(0.0);
      complex1.INF.multiply(1360.41512969);
      complex4.abs();
      complex4.add(2425.892);
      Complex.valueOf(2062.74928, (-935.7));
      Complex complex7 = complex0.reciprocal();
      complex2.toString();
      complex3.negate();
      complex5.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(481.561);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.INF.acos();
      complex1.abs();
      Complex complex4 = complex0.multiply(7.047464847244783);
      complex4.pow(7.047464847244783);
      Complex complex5 = complex0.subtract((-1.0));
      Complex complex6 = complex2.createComplex((-1.0), (-1.0));
      complex0.ONE.multiply((-1.0));
      complex3.multiply(1);
      complex1.readResolve();
      complex1.isInfinite();
      complex5.readResolve();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(1134);
      complex0.I.readResolve();
      List<Complex> list0 = complex1.ZERO.nthRoot(1134);
      assertTrue(list0.contains(complex0));
      
      List<Complex> list1 = complex0.nthRoot(1134);
      assertEquals(1134, list1.size());
      
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = Complex.valueOf((double) 1134);
      complex5.ZERO.sin();
      complex5.ZERO.hashCode();
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex6.cos();
      complex2.ONE.abs();
      Complex complex8 = complex0.tan();
      Complex complex9 = Complex.valueOf((double) 1134);
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex10.I.acos();
      assertTrue(complex10.equals((Object)complex8));
      assertEquals((-0.8813735870195429), complex11.getImaginary(), 0.01);
      
      complex9.NaN.getField();
      Complex complex12 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex13 = complex12.asin();
      Complex complex14 = complex4.divide(Double.NaN);
      Complex complex15 = complex13.ONE.tan();
      assertEquals(1.557407724654902, complex15.getReal(), 0.01);
      
      Complex complex16 = complex13.INF.add(complex5);
      assertTrue(complex16.isInfinite());
      
      Complex complex17 = complex12.divide(complex9);
      Complex complex18 = complex14.ONE.multiply(complex12);
      assertSame(complex18, complex7);
      
      complex13.add(0.0);
      Complex complex19 = complex13.cosh();
      assertSame(complex19, complex17);
      
      Complex complex20 = complex2.multiply(1134);
      complex20.readResolve();
      complex4.getField();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      
      Complex complex21 = (Complex)complex20.readResolve();
      assertEquals(1134.0, complex21.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      double double0 = 115.1940357;
      Complex complex0 = new Complex(115.1940357, 115.1940357);
      Complex complex1 = complex0.sin();
      double double1 = (-1706.207573843);
      Complex.valueOf((-1706.207573843));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.I.sqrt1z();
      complex3.ZERO.exp();
      Complex complex4 = complex2.ONE.atan();
      complex4.I.multiply(complex3);
      complex4.ONE.createComplex((-1706.207573843), (-1706.207573843));
      complex0.ZERO.multiply(0.0);
      complex2.INF.getField();
      Complex complex5 = complex1.pow(complex0);
      int int0 = (-208);
      try { 
        complex5.INF.nthRoot((-208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -208
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.exp();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sqrt1z();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex1.ONE.tan();
      Complex complex5 = complex4.ZERO.multiply((-20.0));
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex4.getReal(), 0.01);
      
      Complex complex6 = complex1.I.asin();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex2.subtract(complex7);
      complex8.I.tanh();
      complex7.ONE.sin();
      Object object0 = complex1.readResolve();
      complex8.hashCode();
      assertTrue(complex2.equals((Object)complex5));
      
      Complex complex9 = complex6.tanh();
      assertEquals(1.213053294120664, complex9.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)object0));
      assertEquals(0.0, complex9.getReal(), 0.01);
  }
}
