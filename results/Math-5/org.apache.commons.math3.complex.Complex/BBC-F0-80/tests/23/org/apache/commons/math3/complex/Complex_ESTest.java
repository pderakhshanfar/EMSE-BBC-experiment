/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:04:46 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-2536.3));
      Complex complex2 = complex0.add(complex1);
      complex0.sqrt1z();
      complex0.sqrt();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.I;
      complex3.log();
      complex3.abs();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
      complex1.tan();
      Complex complex2 = Complex.valueOf(1.8264968E7, Double.POSITIVE_INFINITY);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
      complex1.tan();
      complex0.pow(complex1);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      complex0.multiply((-273));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.multiply(complex2);
      complex3.multiply(complex1);
      complex2.acos();
      Complex complex4 = Complex.valueOf(1.4489476826980974E12, (-6.406189112730307E-11));
      complex4.acos();
      try { 
        complex3.nthRoot((-273));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -273
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-898.5358), (-898.5358));
      Complex complex2 = complex1.sinh();
      complex2.toString();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.valueOf(3.7920054509691455E-261);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex2.log();
      complex1.sqrt1z();
      complex6.subtract(3.7920054509691455E-261);
      Complex complex8 = Complex.INF;
      complex8.readResolve();
      Complex complex9 = complex4.exp();
      complex2.sqrt1z();
      complex9.hashCode();
      complex3.isNaN();
      Complex complex10 = complex5.asin();
      complex1.subtract(complex4);
      complex3.tan();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.log();
      Complex complex13 = complex7.sqrt();
      complex12.pow(3.7920054509691455E-261);
      Complex complex14 = complex9.add(complex10);
      complex3.sqrt1z();
      Complex complex15 = complex14.sqrt();
      complex12.multiply(complex15);
      complex13.sqrt();
      complex9.log();
      Complex complex16 = Complex.valueOf(1.4736818914204564E-150, 1.4736818914204564E-150);
      complex16.abs();
      complex5.tan();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.conjugate();
      complex1.sqrt1z();
      Complex complex3 = complex1.multiply((-771));
      Complex complex4 = Complex.INF;
      complex4.acos();
      Complex complex5 = complex2.multiply((-2607));
      complex5.toString();
      Complex complex6 = new Complex(1621, Double.POSITIVE_INFINITY);
      complex6.multiply((-20.0));
      complex4.asin();
      try { 
        complex3.nthRoot((-1292));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,292
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(3368.69368);
      Complex complex1 = complex0.exp();
      complex1.sinh();
      Complex complex2 = new Complex(3368.69368, 3368.69368);
      Complex complex3 = Complex.valueOf(2668.53098, 1.0);
      Complex complex4 = Complex.valueOf(3368.69368, 1.0);
      complex2.equals(complex4);
      complex3.NaN.cosh();
      complex0.conjugate();
      Complex complex5 = new Complex(20.0, 20.0);
      complex5.tanh();
      complex5.add((-2341.60076655688));
      complex3.nthRoot(3773);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.tan();
      complex1.ZERO.nthRoot(1);
      complex1.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(666.424, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      complex0.sqrt1z();
      Complex complex3 = new Complex((-1127.16843));
      complex2.tan();
      complex1.multiply(1857);
      complex3.createComplex((-1127.16843), 0.0);
      Complex complex4 = new Complex(634);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.sqrt1z();
      complex0.toString();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.multiply((-20.0));
      complex5.negate();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.INF.tanh();
      Complex complex7 = complex0.atan();
      Complex complex8 = Complex.valueOf((-20.0), 1816.28524);
      complex8.equals("(1.0, 0.0)");
      complex2.conjugate();
      Complex complex9 = new Complex(1816.28524, 1857.705944608002);
      Complex complex10 = new Complex(1857.705944608002);
      Complex complex11 = complex4.multiply(2.0);
      complex11.ZERO.getField();
      complex5.tanh();
      Complex complex12 = Complex.I;
      complex12.add(1816.28524);
      complex7.reciprocal();
      Complex.valueOf((-535.0136789257921), 7.091500562953208E248);
      complex5.pow(1857.705944608002);
      complex5.atan();
      complex8.subtract(1816.28524);
      complex2.exp();
      complex1.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(1.0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.sqrt1z();
      complex3.toString();
      Complex complex5 = Complex.ONE;
      complex5.pow(complex2);
      Complex complex6 = complex4.multiply((-20.0));
      complex6.negate();
      Complex complex7 = Complex.valueOf((-3.5433576977711314));
      complex2.atan();
      Complex complex8 = Complex.valueOf(1.0, 45.24709701538086);
      complex5.equals("(1.0, -0.0)");
      complex7.conjugate();
      Complex complex9 = new Complex(1.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex8.multiply((-2452.601));
      complex10.tanh();
      Complex complex11 = complex0.add((-569.977603059934));
      complex5.reciprocal();
      Complex complex12 = Complex.INF;
      complex12.cosh();
      complex11.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf((-33.564850214), (-33.564850214));
      complex3.tan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.createComplex(2737.520771029776, 6360483.0);
      Complex complex6 = complex5.exp();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(3368.69368);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(3368.69368, 3368.69368);
      Complex complex3 = complex2.pow(complex1);
      Complex.valueOf((-20.0), (-20.0));
      complex2.INF.pow(complex3);
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.valueOf((double) 634);
      complex5.multiply((-19));
      complex1.createComplex(1316.4533305124955, (-198.77544294));
      complex0.exp();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.toString();
      Complex complex4 = complex0.pow(complex1);
      complex4.multiply((-33.564850214));
      complex4.negate();
      Complex complex5 = Complex.valueOf(2.0);
      complex4.atan();
      Complex complex6 = Complex.valueOf((-33.564850214), 1.0);
      complex6.equals((Object) null);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = new Complex(1.0, 1.0);
      Complex complex9 = complex8.multiply((-33.564850214));
      complex7.tanh();
      complex5.add((-33.564850214));
      complex1.reciprocal();
      Complex complex10 = complex9.cosh();
      Complex.valueOf((-33.564850214), 1.0);
      complex7.pow(2.0);
      complex2.atan();
      complex3.subtract(1857.705944608002);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.conjugate();
      Complex complex2 = complex0.subtract((-2121.429424559648));
      Complex complex3 = Complex.valueOf((-1194.22838), (-2121.429424559648));
      Complex complex4 = complex0.pow((-1194.22838));
      Complex complex5 = complex4.sqrt();
      Complex complex6 = new Complex(0.0, 0.0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex7.subtract(complex1);
      Complex complex10 = new Complex(1309.3);
      complex3.cos();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY, (-457.617578));
      Complex complex12 = complex11.atan();
      Complex complex13 = complex7.atan();
      Complex complex14 = new Complex(2.414213562373095, 1.0);
      complex14.getField();
      complex10.tan();
      complex0.hashCode();
      Complex complex15 = Complex.ONE;
      Complex complex16 = Complex.I;
      complex12.equals(complex13);
      complex9.reciprocal();
      complex5.atan();
      complex8.isNaN();
      complex8.acos();
      complex2.hashCode();
      complex4.acos();
      complex4.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract(343.077615652);
      Complex complex2 = Complex.valueOf(0.0, (-1194.22838));
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = new Complex(0.0, 0.0);
      Complex complex6 = Complex.ONE;
      complex2.ZERO.sqrt();
      Complex complex7 = complex0.NaN.subtract(complex5);
      Complex complex8 = new Complex(0.0);
      complex3.cos();
      Complex complex9 = complex5.atan();
      complex7.atan();
      complex4.ONE.getField();
      Complex complex10 = complex1.tan();
      complex7.hashCode();
      Complex complex11 = Complex.ONE;
      Complex complex12 = Complex.I;
      complex1.equals(complex12);
      Complex complex13 = complex10.reciprocal();
      complex3.atan();
      complex13.isNaN();
      Complex complex14 = complex10.reciprocal();
      complex14.createComplex((-2440.7), 0.0);
      complex5.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex(2682.876429364, (-1859.705944608002));
      Complex complex2 = complex0.ZERO.subtract((-1235.568911652851));
      complex0.isInfinite();
      Complex complex3 = complex1.tanh();
      complex3.ONE.pow(complex0);
      complex3.INF.conjugate();
      Complex complex4 = Complex.I;
      complex2.add(complex4);
      complex0.toString();
      Complex complex5 = complex4.createComplex(220.16703683814, 22.578311773594542);
      complex5.acos();
      complex1.divide(complex5);
      complex1.equals("(Infinity, Infinity)");
      try { 
        complex4.nthRoot((-178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -178
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex3.multiply(1.389719009399414);
      Complex complex6 = complex5.I.negate();
      Complex.valueOf(1.389719009399414);
      Complex complex7 = Complex.I;
      complex3.equals(complex7);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex1.multiply(5.639804305487608E-4);
      Complex complex10 = complex2.tanh();
      complex4.add(1.389719009399414);
      complex0.reciprocal();
      complex9.reciprocal();
      complex10.atan();
      complex7.isNaN();
      complex6.hashCode();
      Complex complex11 = Complex.INF;
      Complex complex12 = Complex.I;
      complex3.multiply(complex12);
      Complex complex13 = Complex.ONE;
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.toString();
      Complex complex4 = complex0.pow(complex1);
      complex2.ZERO.add(complex0);
      Complex complex5 = complex4.multiply((-33.564850214));
      Complex complex6 = complex0.exp();
      Complex complex7 = complex0.ONE.multiply(complex4);
      Complex complex8 = complex6.tan();
      complex1.I.divide(complex2);
      complex2.divide(complex1);
      complex0.sqrt();
      complex4.cos();
      Complex complex9 = Complex.valueOf((-33.564850214), (-33.564850214));
      Complex complex10 = complex9.atan();
      complex8.atan();
      complex9.getField();
      Complex complex11 = complex3.tan();
      complex10.hashCode();
      complex2.multiply((-781.6));
      Complex complex12 = Complex.I;
      complex8.equals(complex2);
      complex7.reciprocal();
      Complex complex13 = complex12.atan();
      complex13.isNaN();
      complex7.acos();
      complex0.hashCode();
      Complex complex14 = Complex.INF;
      Complex complex15 = Complex.valueOf(6.283185307179586, (-33.564850214));
      Complex complex16 = Complex.NaN;
      complex15.divide(complex16);
      complex5.multiply(complex15);
      Complex complex17 = new Complex(2434.0);
      complex11.add(complex17);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.toString();
      complex0.pow(complex1);
      Complex complex4 = Complex.valueOf((-33.564850214), (-33.564850214));
      Complex complex5 = complex4.tan();
      complex3.getReal();
      complex0.acos();
      Complex complex6 = Complex.valueOf(1.0, Double.NaN);
      Complex complex7 = complex5.subtract(complex6);
      complex7.createComplex(2.9731739067444943E32, (-1791.4306306098906));
      Complex complex8 = complex6.log();
      Complex.valueOf((-1132.5963426));
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = Complex.I;
      Complex complex12 = complex8.add(complex5);
      complex10.conjugate();
      Object object0 = complex4.readResolve();
      complex12.equals(object0);
      complex12.acos();
      complex3.add(complex7);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.ONE.add(0.0);
      complex1.ZERO.readResolve();
      Complex complex3 = complex1.ZERO.sinh();
      complex0.abs();
      Complex complex4 = complex0.NaN.pow(complex3);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.exp();
      complex6.ONE.sqrt();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.ZERO.pow((-220.16703683814));
      Complex complex10 = complex7.I.createComplex(0.0, (-2416.53));
      complex10.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex2.acos();
      complex7.subtract(complex4);
      Complex complex12 = complex11.multiply((-220.16703683814));
      Complex complex13 = complex10.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex14 = Complex.valueOf((-1.638756156057952E79), Double.POSITIVE_INFINITY);
      complex14.sqrt1z();
      Complex complex15 = Complex.I;
      complex10.add(complex1);
      complex0.conjugate();
      complex15.readResolve();
      complex11.equals(complex9);
      complex12.acos();
      complex11.add(complex13);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.toString();
      Complex complex4 = complex0.pow(complex1);
      complex2.ZERO.add(complex0);
      complex4.multiply((-33.564850214));
      complex4.negate();
      Complex complex5 = Complex.valueOf(2.0);
      complex4.atan();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.valueOf(Double.NaN, 1.0);
      complex7.equals((Object) null);
      Complex complex8 = complex5.conjugate();
      Complex complex9 = new Complex(1.0, 1.0);
      Complex complex10 = complex9.multiply((-33.564850214));
      complex8.tanh();
      complex5.add(Double.NaN);
      complex1.reciprocal();
      complex10.cosh();
      complex8.sqrt();
      complex8.pow(2.0);
      complex2.cos();
      complex6.atan();
      Complex.valueOf(Double.NaN, 1857.705944608002);
      complex6.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.INF.divide(0.0);
      Complex complex3 = Complex.ONE;
      complex2.ZERO.readResolve();
      Complex complex4 = complex2.ZERO.sinh();
      complex0.abs();
      Complex complex5 = complex0.NaN.pow(complex4);
      Complex complex6 = complex2.asin();
      complex6.exp();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex2.sinh();
      complex8.ZERO.pow((-220.16703683814));
      Complex complex9 = complex7.I.createComplex(0.0, (-2416.53));
      complex9.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex3.acos();
      Complex complex11 = complex7.subtract(complex5);
      complex11.ONE.createComplex(2.0, 0.0);
      complex8.log();
      Complex.valueOf(1.0);
      complex6.sqrt1z();
      Complex complex12 = Complex.I;
      complex10.add(complex12);
      complex11.conjugate();
      complex2.equals(complex6);
      complex1.acos();
      // Undeclared exception!
      complex10.nthRoot(2145281291);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.toString();
      complex2.multiply(2930);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.subtract(complex2);
      complex3.atan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.conjugate();
      complex2.exp();
      complex1.nthRoot(2930);
      complex7.isNaN();
      complex2.isNaN();
      complex5.tan();
      complex5.sinh();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      complex0.toString();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf((-33.564850214), 2764.4255087894);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex3.multiply(346.1671419737);
      Complex complex6 = complex3.exp();
      Complex complex7 = complex5.multiply(complex6);
      Complex complex8 = complex1.tan();
      complex4.divide(complex3);
      Complex complex9 = complex7.subtract(complex8);
      complex8.getReal();
      complex5.negate();
      complex9.multiply(135);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.multiply(1);
      Complex complex1 = new Complex(1);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.asin();
      complex1.exp();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex4.pow(3271.21239825);
      complex0.createComplex((-2416.53), (-220.16703683814));
      complex4.divide(3271.21239825);
      Complex complex7 = complex1.acos();
      Complex complex8 = Complex.valueOf(20.0);
      complex5.subtract(complex8);
      complex1.createComplex((-2.995732273553991), 324.08);
      Complex complex9 = complex0.log();
      Complex complex10 = Complex.valueOf(2.0);
      complex6.sqrt1z();
      Complex complex11 = Complex.I;
      complex10.add(complex3);
      Complex complex12 = Complex.valueOf(20.0);
      complex12.conjugate();
      complex7.equals(complex6);
      complex9.acos();
      Complex complex13 = Complex.valueOf((-0.15811388300841897), 20.0);
      Complex complex14 = Complex.NaN;
      complex13.add(complex14);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1750.54662670557);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.exp();
      complex3.toString();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = new Complex(637.893656);
      Complex complex6 = complex1.multiply(complex5);
      complex6.add(2.6869297963554945E-8);
      complex1.divide(complex2);
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex7.nthRoot(2259);
      Complex complex8 = complex4.pow(1.5948774814605713);
      Complex complex9 = Complex.valueOf((-1968.2));
      Complex complex10 = Complex.I;
      complex9.multiply(complex10);
      complex0.sinh();
      complex2.sqrt();
      complex0.add(33.779555);
      Complex complex11 = complex5.sin();
      complex6.subtract(complex8);
      complex10.log();
      complex4.multiply(complex11);
      complex3.subtract((-1968.2));
      complex10.pow(2.9240221157844312E-8);
      complex7.abs();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.divide(complex1);
      complex0.exp();
      complex2.toString();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = new Complex(0.3897167444229126);
      Complex complex6 = complex3.multiply(complex1);
      Complex complex7 = complex3.add((-20.0));
      Complex complex8 = complex7.divide(complex0);
      complex6.nthRoot(2259);
      Complex complex9 = complex6.pow((double) 2259);
      complex8.multiply(complex2);
      Complex complex10 = Complex.NaN;
      complex10.sinh();
      Complex complex11 = complex4.sqrt();
      complex0.add((-552.1767738374));
      complex4.sin();
      complex0.subtract(complex9);
      Complex complex12 = complex2.log();
      Complex complex13 = Complex.I;
      complex13.multiply(complex11);
      complex7.subtract((-20.0));
      Complex complex14 = new Complex((-27.6083494));
      complex14.pow((-3711.91916));
      complex12.abs();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1773.1111681073512));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.exp();
      complex2.toString();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = new Complex((-1773.1111681073512));
      complex4.INF.multiply(complex5);
      Complex complex6 = complex3.divide(complex0);
      complex0.nthRoot(2259);
      complex0.pow(715.36);
      Complex complex7 = complex1.multiply(complex0);
      complex5.sinh();
      complex4.sqrt();
      Complex complex8 = complex3.add(-0.0);
      complex2.sin();
      Complex complex9 = new Complex(193.42500570995884, Double.NaN);
      Complex complex10 = complex6.subtract(complex9);
      complex3.log();
      complex8.multiply(complex6);
      complex5.subtract(3024.8600958143);
      complex3.pow(2194.825137711105);
      complex7.abs();
      complex4.tan();
      complex10.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1773.1111681073512));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.exp();
      complex2.toString();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex2.asin();
      complex2.exp();
      Complex complex7 = complex0.sinh();
      complex2.sinh();
      Complex complex8 = complex1.pow((-1773.1111681073512));
      complex5.createComplex(0.13670018315315247, (-1773.1111681073512));
      Complex complex9 = complex6.divide(0.7853981633974483);
      Complex complex10 = complex6.acos();
      Complex complex11 = complex10.subtract(complex1);
      complex7.createComplex((-1773.1111681073512), (-2416.53));
      complex8.log();
      Complex complex12 = Complex.valueOf((-2416.53));
      Complex complex13 = complex0.sqrt1z();
      Complex complex14 = Complex.I;
      Complex complex15 = new Complex(2.0);
      complex15.add(complex12);
      complex9.conjugate();
      Complex complex16 = Complex.I;
      complex3.equals(complex16);
      complex11.acos();
      complex16.add(complex13);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract(343.077615652);
      Complex complex2 = Complex.valueOf(0.0, (-1194.22838));
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = new Complex(0.0, 0.0);
      Complex complex6 = complex0.ONE.subtract(0.0);
      complex2.ZERO.sqrt();
      Complex complex7 = complex0.NaN.subtract(complex5);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex3.cos();
      complex5.atan();
      complex7.atan();
      complex4.ONE.getField();
      complex1.tan();
      complex7.hashCode();
      complex1.ZERO.multiply((-7.043545052852817E-9));
      Complex complex10 = Complex.I;
      complex9.equals(complex1);
      complex8.reciprocal();
      complex8.atan();
      complex6.isNaN();
      complex1.acos();
      complex2.reciprocal();
      complex8.hashCode();
      Complex complex11 = Complex.INF;
      Complex complex12 = new Complex(Double.NaN, 343.077615652);
      complex4.multiply(complex12);
      complex2.multiply(3766.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = new Complex(3368.69368, 3368.69368);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = new Complex(2.9279594746502846E161);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.add(2.9279594746502846E161);
      Complex complex6 = complex5.divide(complex4);
      complex5.nthRoot(2259);
      Complex complex7 = Complex.ZERO;
      complex3.NaN.divide(complex7);
      complex3.multiply(complex0);
      complex0.sqrt();
      Complex complex8 = complex4.add(1773.1111681073512);
      complex4.sin();
      Complex complex9 = complex8.subtract(complex6);
      complex1.log();
      complex3.multiply(complex0);
      Complex complex10 = complex1.subtract(-0.0);
      complex0.pow(-0.0);
      complex10.ONE.subtract(complex2);
      complex9.abs();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1194.22838));
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = complex0.ONE.subtract(0.0);
      Complex complex6 = complex1.ZERO.sqrt();
      Complex complex7 = complex0.NaN.subtract(complex4);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex2.cos();
      complex7.atan();
      complex3.ONE.getField();
      complex0.tan();
      complex7.hashCode();
      complex0.ZERO.multiply((-7.043545052852817E-9));
      Complex complex10 = Complex.I;
      complex0.asin();
      complex9.pow((-8.10254145615142E-8));
      complex6.conjugate();
      complex5.sin();
      Complex complex11 = new Complex(9352.80821515653, (-1194.22838));
      complex11.pow(343.077615652);
      complex5.abs();
      complex0.getReal();
      complex8.tan();
      complex10.sin();
      Complex complex12 = Complex.ZERO;
      complex12.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex2.sqrt1z();
      complex0.toString();
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = complex4.multiply(1599.3218594939);
      complex7.exp();
      Complex complex8 = complex3.multiply(complex4);
      complex5.tan();
      Complex complex9 = complex4.divide(complex3);
      complex9.subtract(complex3);
      Complex complex10 = Complex.valueOf((-855.65904083));
      complex3.hashCode();
      Complex complex11 = complex6.pow(1599.3218594939);
      Complex complex12 = complex1.log();
      complex3.multiply((-0.961965088827113));
      complex7.log();
      Complex.valueOf(1.0);
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = Complex.I;
      complex0.add(complex13);
      complex11.conjugate();
      Object object0 = new Object();
      complex8.equals(complex6);
      complex12.acos();
      complex14.add(complex10);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1773.1111681073512));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.exp();
      complex2.toString();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = new Complex((-1773.1111681073512));
      Complex complex6 = complex4.INF.multiply(complex5);
      Complex complex7 = complex1.ONE.add(Double.NaN);
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex2.nthRoot(2259);
      complex6.I.pow(-0.0);
      Complex complex9 = complex3.multiply(complex8);
      complex2.sinh();
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex10.I.add((double) 2259);
      Complex complex12 = complex11.pow(Double.NaN);
      complex4.subtract(complex11);
      complex7.subtract(complex3);
      complex2.tanh();
      complex12.abs();
      complex5.cosh();
      complex8.readResolve();
      complex1.readResolve();
      complex8.pow((-193.42500570995884));
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1773.1111681073512));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.exp();
      complex2.toString();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = new Complex((-1773.1111681073512));
      Complex complex6 = complex4.INF.multiply(complex5);
      Complex complex7 = complex1.ONE.add(Double.NaN);
      Complex complex8 = complex4.NaN.divide(complex0);
      complex2.nthRoot(2259);
      complex6.I.pow(-0.0);
      complex3.multiply(complex8);
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex10.I.add((double) 2259);
      complex9.INF.sin();
      Complex complex12 = complex9.subtract(complex7);
      complex1.log();
      complex6.multiply(complex4);
      complex11.NaN.subtract(6.809907028683196E-5);
      complex12.pow(0.3594330038102771);
      complex9.abs();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.add((-797.30943));
      complex2.ZERO.abs();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.NaN.createComplex((-1760.0822581554), (-1760.0822581554));
      Complex complex5 = complex0.createComplex(2.0, 2.0);
      Complex complex6 = complex5.I.sqrt();
      complex5.NaN.hashCode();
      complex0.isInfinite();
      Complex complex7 = complex3.tanh();
      complex1.subtract(1477.24977);
      Complex complex8 = complex7.tan();
      complex3.conjugate();
      complex8.ONE.cos();
      Complex complex9 = complex4.I.subtract(complex0);
      complex9.I.negate();
      Complex complex10 = complex7.tanh();
      complex10.NaN.readResolve();
      complex4.asin();
      complex3.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.valueOf((-5.139745677199588E-10), (-1760.0822581554));
      complex11.NaN.divide(complex1);
      Complex complex12 = complex6.sin();
      complex12.multiply((-998.5298331054));
      complex6.add(687.23);
      Complex.valueOf(2.0, 687.23);
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-199.6296), (-199.6296));
      complex0.I.hashCode();
      complex1.ONE.abs();
      complex0.readResolve();
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex3.divide(complex6);
      complex7.reciprocal();
      complex5.sinh();
      complex2.sin();
      complex7.readResolve();
      complex1.equals(complex3);
      Complex complex9 = Complex.ZERO;
      complex8.pow(1956.0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3485.5839, 879.564814704093);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex0.nthRoot(2182);
      complex0.getField();
      complex1.divide(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.valueOf((double) 2182);
      complex5.hashCode();
      Complex complex6 = Complex.valueOf(4599.6715);
      Complex complex7 = complex5.pow((-1003.38));
      Complex complex8 = complex6.sin();
      complex5.log();
      Complex complex9 = complex4.negate();
      complex8.negate();
      complex2.cos();
      complex0.sqrt1z();
      complex6.abs();
      Complex complex10 = complex1.sqrt();
      complex10.asin();
      complex1.pow(1316.0);
      complex7.conjugate();
      Complex complex11 = complex9.sin();
      Complex complex12 = new Complex(2182, 879.564814704093);
      complex10.getReal();
      complex10.tan();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-199.6296));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.divide(complex1);
      complex0.subtract(complex5);
      Complex.valueOf(5.0773288639375494E20);
      complex5.hashCode();
      Complex.valueOf((-1.0));
      Complex complex6 = complex0.pow((-199.6296));
      complex3.sin();
      complex6.log();
      Complex complex7 = Complex.valueOf(1.0);
      complex7.negate();
      Complex complex8 = complex2.negate();
      complex0.cos();
      Complex complex9 = new Complex(1.0);
      complex9.sqrt1z();
      complex2.abs();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex4.asin();
      Complex complex12 = Complex.INF;
      complex12.pow(1.0);
      complex11.conjugate();
      complex10.sin();
      complex9.pow((-1183.81));
      Complex complex13 = Complex.ZERO;
      complex13.getReal();
      Complex complex14 = complex11.tan();
      complex14.sin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3485.5839, 879.564814704093);
      Complex complex1 = Complex.valueOf(3485.5839);
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex0.nthRoot(2182);
      complex0.getField();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex3.NaN.createComplex((-500.7), (-2998.065399567944));
      complex0.getImaginary();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex7.pow(complex2);
      Complex complex9 = complex8.ONE.exp();
      complex9.ZERO.readResolve();
      complex8.tan();
      complex5.INF.sqrt();
      Complex complex10 = new Complex((-2998.065399567944), 2182);
      Complex complex11 = complex5.tan();
      complex11.ZERO.cosh();
      Complex complex12 = complex4.divide(complex3);
      complex12.reciprocal();
      complex10.sinh();
      complex6.sin();
      Object object0 = complex6.readResolve();
      complex3.equals(object0);
      complex10.divide(879.564814704093);
      complex0.nthRoot(577);
      Complex.valueOf(3485.5839, 1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex3.ZERO.tan();
      complex0.isNaN();
      complex0.atan();
      Complex complex5 = complex0.INF.exp();
      Complex complex6 = Complex.valueOf(2.414213562373095);
      Complex complex7 = new Complex(0.0, 20.0);
      complex7.pow(0.0);
      complex3.sin();
      complex7.log();
      complex6.negate();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex5.cos();
      complex9.sqrt1z();
      complex2.abs();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = Complex.INF;
      complex11.asin();
      complex4.pow(20.0);
      complex10.conjugate();
      Complex complex12 = complex1.sin();
      Complex complex13 = Complex.ZERO;
      complex13.pow(20.0);
      complex7.getReal();
      complex12.tan();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.toString();
      Complex complex4 = complex0.pow(complex1);
      complex2.ZERO.add(complex0);
      Complex complex5 = complex4.multiply((-33.564850214));
      Complex complex6 = complex0.exp();
      Complex complex7 = complex0.ONE.multiply(complex4);
      complex6.tan();
      complex2.divide(complex1);
      Complex complex8 = complex0.subtract(complex1);
      Complex complex9 = Complex.valueOf(1316.0);
      complex9.ONE.hashCode();
      complex7.pow(1316.0);
      Complex complex10 = complex8.log();
      complex4.multiply((-2133.97479412));
      complex2.log();
      Complex.valueOf((-33.564850214));
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = Complex.I;
      Complex complex13 = complex12.add(complex1);
      complex5.conjugate();
      Object object0 = new Object();
      complex13.equals(object0);
      complex11.acos();
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.negate();
      Complex complex1 = new Complex(817.2221926896);
      Complex complex2 = complex1.multiply((-2468));
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.valueOf((-3127.29));
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex5.subtract((-1082.0104110067));
      Complex complex8 = complex3.sin();
      complex0.sqrt1z();
      complex2.cosh();
      complex6.abs();
      complex6.readResolve();
      Complex complex9 = complex8.pow((-282.4453941));
      Complex complex10 = complex7.reciprocal();
      complex9.asin();
      complex0.asin();
      complex3.log();
      complex6.tan();
      complex4.tanh();
      complex4.negate();
      Complex.valueOf((-1036.0));
      complex10.negate();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract(343.077615652);
      Complex complex2 = Complex.valueOf(0.0, (-1194.22838));
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = new Complex(0.0, 0.0);
      complex5.ONE.subtract(0.0);
      complex2.ZERO.sqrt();
      Complex complex7 = complex5.NaN.subtract(complex6);
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex5.cos();
      complex6.atan();
      complex4.acos();
      Complex complex10 = complex6.multiply(2956);
      complex8.acos();
      complex9.sqrt();
      complex4.multiply(1347);
      complex4.sinh();
      Complex complex11 = complex4.sqrt();
      complex11.acos();
      complex0.sin();
      complex11.exp();
      Complex complex12 = complex1.add(complex7);
      complex12.getArgument();
      complex2.atan();
      Complex.valueOf((-1411.357));
      complex10.reciprocal();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.INF.divide(0.0);
      Complex complex3 = complex0.ONE.add(0.0);
      complex2.ZERO.readResolve();
      Complex complex4 = complex2.ZERO.sinh();
      complex0.abs();
      Complex complex5 = complex0.NaN.pow(complex4);
      Complex complex6 = complex2.asin();
      complex6.exp();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex2.sinh();
      complex8.ZERO.pow((-220.16703683814));
      Complex complex9 = complex7.I.createComplex(0.0, (-2416.53));
      complex9.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex3.acos();
      Complex complex11 = complex7.subtract(complex5);
      complex11.ONE.createComplex(2.0, 0.0);
      Complex complex12 = complex8.log();
      Complex.valueOf(1.0);
      complex6.sqrt1z();
      Complex complex13 = Complex.I;
      complex10.add(complex13);
      complex11.conjugate();
      complex2.equals(complex6);
      complex1.acos();
      complex12.add(complex6);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex.valueOf((-25.71444814449023), (-25.71444814449023));
      Complex complex0 = new Complex((-25.71444814449023), (-25.71444814449023));
      Complex complex1 = complex0.sinh();
      complex1.getField();
      Complex complex2 = complex1.tanh();
      complex2.isInfinite();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.I.sinh();
      complex3.sqrt1z();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.tanh();
      complex1.INF.asin();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex5.ZERO.acos();
      complex2.hashCode();
      complex1.NaN.sqrt();
      Complex complex8 = complex5.exp();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex9.ZERO.acos();
      complex7.INF.acos();
      Complex complex11 = complex10.multiply(908);
      Complex complex12 = complex6.add(complex5);
      Object object0 = complex1.readResolve();
      complex5.equals(object0);
      Complex complex13 = complex10.negate();
      Complex complex14 = complex2.exp();
      Complex complex15 = complex14.divide(complex1);
      complex2.log();
      complex13.subtract(complex11);
      complex7.pow(complex8);
      complex12.getImaginary();
      complex1.multiply(complex2);
      complex0.reciprocal();
      complex11.createComplex(1.557407724654902, (-3071.357387189909));
      try { 
        complex15.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.I.subtract(3030.59828);
      complex1.subtract(complex0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.INF.atan();
      complex6.I.pow(3170.1779689);
      complex5.atan();
      complex0.getField();
      Complex complex8 = complex4.log();
      Complex complex9 = complex0.conjugate();
      complex7.acos();
      complex2.multiply((-3072));
      complex3.acos();
      Complex complex10 = complex8.sqrt();
      complex6.multiply((-3072));
      complex8.sinh();
      Complex complex11 = Complex.NaN;
      complex11.sqrt();
      Complex complex12 = complex9.acos();
      Complex complex13 = complex10.sin();
      Complex complex14 = complex4.exp();
      Complex complex15 = complex14.add(complex12);
      complex15.getArgument();
      Complex complex16 = complex13.atan();
      Complex complex17 = Complex.valueOf((double) (-3072));
      complex15.reciprocal();
      complex5.readResolve();
      complex4.divide(complex16);
      complex11.pow(8.408597060399334E-50);
      complex17.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.acos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2579.77182874318));
      Complex complex1 = complex0.acos();
      complex1.getImaginary();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex1.sinh();
      complex4.ONE.hashCode();
      Complex complex5 = Complex.valueOf((-8.548603378528576));
      Complex complex6 = complex5.ZERO.asin();
      complex6.ONE.divide(complex2);
      complex4.sinh();
      Complex complex7 = complex1.asin();
      complex1.NaN.getField();
      Complex complex8 = complex1.divide(complex0);
      Complex complex9 = complex4.pow(complex3);
      complex9.I.conjugate();
      complex0.cos();
      complex9.tan();
      complex7.abs();
      complex2.cosh();
      complex8.divide(2.9255901407257694);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex0.ZERO.divide(complex4);
      Complex complex7 = complex1.sinh();
      complex2.I.getField();
      Complex complex8 = complex0.ONE.reciprocal();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex9.ZERO.divide(20.0);
      Complex complex11 = complex2.multiply((-1380.6089542246));
      complex11.I.log();
      Complex complex12 = complex1.cosh();
      Complex complex13 = complex2.multiply(1);
      complex5.abs();
      complex0.getImaginary();
      Complex complex14 = complex2.divide(complex4);
      Complex complex15 = complex14.ONE.sqrt();
      complex14.ONE.subtract(0.0);
      complex14.NaN.tanh();
      Complex complex16 = Complex.ZERO;
      complex16.I.subtract((-5.672261759108003E-257));
      Complex complex17 = complex10.NaN.multiply(complex16);
      complex17.ONE.multiply(complex14);
      Complex complex18 = complex7.atan();
      complex10.subtract((-1380.6089542246));
      complex14.toString();
      complex4.divide(complex6);
      complex18.multiply(0.0);
      complex12.log();
      complex7.subtract(complex13);
      complex15.tan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-199.6296), (-199.6296));
      complex0.I.hashCode();
      complex1.ONE.abs();
      Complex complex2 = complex0.divide(complex1);
      complex1.sinh();
      complex2.getField();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.I.add(complex1);
      complex3.ZERO.tan();
      complex0.isNaN();
      Complex complex4 = complex0.atan();
      complex0.INF.exp();
      Complex complex5 = complex4.NaN.add(Double.NaN);
      Complex complex6 = complex0.ONE.pow(Double.NaN);
      Complex complex7 = complex4.log();
      complex0.multiply(Double.NaN);
      complex7.INF.log();
      Complex.valueOf(Double.NaN);
      complex7.sqrt1z();
      Complex complex8 = complex7.add(complex5);
      complex2.conjugate();
      complex1.equals(complex4);
      complex1.acos();
      complex8.add(complex6);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.1111111111111111, 0.1111111111111111);
      complex0.INF.multiply((-2049.51270426747));
      Complex complex1 = new Complex(2.6295084953308105, 0.0);
      Complex complex2 = complex1.ZERO.subtract((-3551.8694840021462));
      complex2.sqrt();
      Complex complex3 = complex1.NaN.multiply(complex2);
      Complex.valueOf(0.0);
      complex3.INF.tan();
      Complex complex4 = complex1.divide(complex0);
      complex4.getField();
      complex0.subtract(complex1);
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.ONE.cos();
      complex2.ZERO.getField();
      complex1.ONE.getField();
      Complex complex3 = complex1.INF.cos();
      complex1.ONE.sinh();
      Complex.valueOf((-550.6670477271765), (-550.6670477271765));
      complex1.ZERO.tan();
      complex2.ONE.subtract(complex3);
      complex0.getImaginary();
      complex1.log();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = complex2.NaN.multiply((-2468));
      Complex complex4 = complex2.tanh();
      complex4.I.tan();
      Complex.valueOf((-282.4453941));
      complex4.NaN.divide(complex1);
      Complex complex5 = complex0.subtract((-1997.616));
      complex0.getReal();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.sqrt1z();
      complex7.cosh();
      complex0.abs();
      complex1.readResolve();
      Complex complex8 = complex0.pow(Double.NaN);
      Complex complex9 = complex8.INF.reciprocal();
      Complex complex10 = complex6.asin();
      complex10.ONE.asin();
      complex7.tan();
      Complex complex11 = complex3.log();
      complex11.NaN.tan();
      complex2.tanh();
      complex6.negate();
      complex2.equals(complex5);
      complex9.exp();
      Complex.valueOf(3.023383151402969E307);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.I.sinh();
      complex3.sqrt1z();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.tanh();
      complex1.INF.asin();
      complex0.tanh();
      Complex complex6 = complex5.ZERO.acos();
      complex2.hashCode();
      complex1.NaN.sqrt();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex6.asin();
      complex8.ZERO.acos();
      complex6.INF.acos();
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = complex4.conjugate();
      complex2.I.acos();
      complex10.multiply((-3072));
      Complex complex11 = complex6.acos();
      Complex complex12 = complex11.ZERO.sqrt();
      complex12.ONE.multiply(1347);
      Complex complex13 = complex2.sinh();
      complex10.sqrt();
      Complex complex14 = complex7.ONE.acos();
      complex14.ONE.sin();
      Complex complex15 = complex13.exp();
      Complex complex16 = complex13.ZERO.add(complex9);
      complex7.getArgument();
      complex0.atan();
      Complex.valueOf((-1411.357));
      complex15.reciprocal();
      complex16.readResolve();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.multiply(complex0);
      double double0 = (-651.6601241);
      complex4.INF.tan();
      Complex complex5 = complex0.add((-651.6601241));
      complex5.ZERO.sinh();
      Complex complex6 = complex5.ZERO.tan();
      complex6.I.log();
      Complex complex7 = complex6.INF.multiply(1210);
      complex7.ZERO.log();
      complex5.ZERO.abs();
      complex4.I.pow(complex2);
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex1.createComplex(4.985137671479376E-20, 126.276347);
      Complex complex2 = complex1.reciprocal();
      complex2.NaN.toString();
      Complex complex3 = complex0.sinh();
      complex3.exp();
      complex1.atan();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf((-1031.8268429077787));
      complex0.divide(complex1);
      complex1.NaN.sqrt1z();
      Complex complex2 = null;
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1402.666835);
      Complex complex1 = complex0.add((-1459.9386794477934));
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(501.9651);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.INF.createComplex(501.9651, 0.0);
      Complex complex3 = complex2.NaN.sinh();
      complex3.NaN.toString();
      Complex complex4 = complex0.tan();
      Complex.valueOf(0.0);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex2.log();
      complex5.ZERO.sqrt1z();
      complex3.readResolve();
      Complex complex8 = complex5.exp();
      complex8.ZERO.sqrt1z();
      complex6.hashCode();
      complex7.isNaN();
      complex3.asin();
      Complex complex9 = complex6.subtract(complex1);
      complex9.INF.tan();
      complex2.log();
      Complex complex10 = complex6.sqrt();
      Complex complex11 = complex6.pow(501.9651);
      complex11.ONE.add(complex3);
      complex10.sqrt1z();
      complex2.sqrt();
      complex8.multiply(complex1);
      complex5.sqrt();
      complex1.log();
      complex7.abs();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(551.7853);
      try { 
        complex0.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sqrt1z();
      complex3.ZERO.toString();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex4.multiply((-33.564850214));
      Complex complex7 = complex0.exp();
      Complex complex8 = complex0.ONE.multiply(complex4);
      complex7.tan();
      complex2.divide(complex1);
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = Complex.valueOf(1316.0);
      complex10.ONE.hashCode();
      Complex.valueOf(0.0);
      Complex complex11 = complex9.pow(0.0);
      complex11.ONE.sin();
      complex6.log();
      complex5.NaN.negate();
      Complex complex12 = complex8.negate();
      complex5.cos();
      Complex complex13 = complex12.sqrt1z();
      complex13.INF.abs();
      complex13.sqrt();
      Complex complex14 = complex7.asin();
      complex3.pow((-1183.81));
      complex12.conjugate();
      Complex complex15 = complex14.sin();
      Complex complex16 = complex0.pow((-4901.591928517391));
      complex16.getReal();
      complex15.tan();
      complex15.sin();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.I.log();
      complex1.I.subtract(3030.59828);
      complex1.subtract(complex0);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.INF.atan();
      Complex complex6 = complex4.I.pow(3170.1779689);
      complex3.atan();
      complex0.getField();
      Complex complex7 = complex0.NaN.multiply(908);
      complex4.add(complex0);
      complex0.equals(complex6);
      complex4.ONE.negate();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex4.divide(complex8);
      complex9.INF.log();
      complex3.subtract(complex7);
      complex9.pow(complex8);
      complex0.getImaginary();
      complex7.multiply(complex3);
      complex7.ONE.reciprocal();
      complex5.createComplex(3030.59828, (-3071.357387189909));
      complex7.nthRoot(908);
      Complex.valueOf(1.0, 3170.1779689);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sqrt();
      complex0.INF.hashCode();
      complex0.getField();
      complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add((-3702.8328));
      complex0.pow((-1178.280476));
      Complex complex1 = new Complex((-1178.280476), (-1178.280476));
      Complex complex2 = complex0.pow(complex1);
      complex1.divide(complex2);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0943803787231445);
      Complex complex1 = complex0.ZERO.subtract(1166.80451807788);
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.INF.sqrt();
      complex0.ONE.pow(2.0943803787231445);
      Complex complex4 = Complex.valueOf(2.0943803787231445, 2.0943803787231445);
      Complex complex5 = complex0.add(complex4);
      complex4.ZERO.nthRoot(2719);
      complex5.nthRoot(1072);
      Complex complex6 = complex2.subtract((double) 1072);
      Complex complex7 = complex6.ZERO.add((double) 1072);
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = complex0.divide(6.283185307179586);
      Complex complex10 = complex6.negate();
      Complex complex11 = complex10.I.conjugate();
      complex9.readResolve();
      complex2.readResolve();
      complex6.cos();
      complex11.toString();
      complex1.subtract(complex8);
      complex3.sqrt();
      complex11.equals(complex9);
      complex1.pow(20.0);
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2274.54), (-2274.54));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.INF.getField();
      complex0.isNaN();
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex0.multiply((-532));
      complex1.multiply(complex3);
      complex4.I.subtract((-2716.108484448185));
      Complex complex5 = complex0.multiply(1959.65471801799);
      Complex complex6 = Complex.valueOf(1959.65471801799, (-2274.54));
      complex3.getArgument();
      Complex complex7 = complex0.add(0.0);
      complex3.ONE.tanh();
      complex7.getField();
      complex1.ZERO.toString();
      Complex complex8 = complex7.divide((-848.0525));
      complex8.NaN.reciprocal();
      Complex.valueOf(Double.NaN);
      complex0.reciprocal();
      complex1.readResolve();
      complex6.getReal();
      complex1.negate();
      complex5.createComplex(0.0, 1959.65471801799);
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3183.116, 3183.116);
      Complex complex1 = complex0.NaN.asin();
      complex0.ZERO.getField();
      complex0.isNaN();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.conjugate();
      complex2.NaN.multiply(0.0);
      Complex complex4 = complex2.ONE.sinh();
      complex2.INF.sin();
      Complex complex5 = complex3.tanh();
      complex5.ZERO.asin();
      Complex complex6 = complex5.add(complex2);
      Complex complex7 = complex3.sin();
      complex1.isInfinite();
      Complex complex8 = complex3.sqrt1z();
      complex8.ONE.sqrt();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex3.multiply(0.0);
      complex10.ZERO.hashCode();
      complex6.getArgument();
      complex6.abs();
      complex5.log();
      complex9.equals("");
      Complex complex11 = complex2.subtract(complex7);
      complex11.toString();
      Complex complex12 = complex7.NaN.negate();
      complex12.ONE.divide(complex4);
      complex10.subtract((-2638.029051251966));
      Complex.valueOf(3.204135737993823E-8);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      complex0.atan();
      Complex complex4 = complex3.conjugate();
      complex4.exp();
      complex2.nthRoot(1);
      complex2.isNaN();
      complex4.isNaN();
      complex1.tan();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.ONE.add(0.0);
      complex1.ZERO.readResolve();
      Complex complex3 = complex1.ZERO.sinh();
      complex0.abs();
      Complex complex4 = complex0.NaN.pow(complex3);
      Complex complex5 = complex1.asin();
      complex5.exp();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex1.sinh();
      complex7.ZERO.pow((-220.16703683814));
      Complex complex8 = complex6.I.createComplex(0.0, (-2416.53));
      complex8.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex2.acos();
      Complex complex10 = complex6.subtract(complex4);
      complex10.ONE.createComplex(2.0, 0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1256.3));
      Complex complex11 = complex10.acos();
      complex5.divide(complex6);
      complex4.acos();
      Complex complex12 = complex9.multiply((-7.1844969234484515E-96));
      complex1.reciprocal();
      complex0.readResolve();
      complex11.multiply((-1039));
      complex5.reciprocal();
      complex5.createComplex(Double.POSITIVE_INFINITY, (-1.7884997059081524E-7));
      complex12.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract(343.077615652);
      Complex complex2 = Complex.valueOf(0.0, (-1194.22838));
      Complex complex3 = complex0.pow(0.0);
      complex3.ZERO.sqrt();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = new Complex(0.0, 0.0);
      complex4.ONE.subtract(0.0);
      complex2.ZERO.sqrt();
      Complex complex6 = complex4.NaN.subtract(complex5);
      complex4.sqrt();
      complex4.cos();
      complex5.atan();
      complex6.atan();
      complex4.ONE.getField();
      Complex complex7 = complex1.tan();
      complex6.hashCode();
      complex1.ZERO.multiply((-7.043545052852817E-9));
      Complex complex8 = Complex.I;
      complex1.equals(complex8);
      Complex complex9 = complex7.reciprocal();
      complex4.atan();
      complex9.isNaN();
      complex2.acos();
      Complex complex10 = complex2.reciprocal();
      complex5.hashCode();
      Complex complex11 = Complex.INF;
      complex4.multiply(complex11);
      complex10.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 238.519051868);
      complex0.getField();
      complex0.isInfinite();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.subtract(complex1);
      complex1.isNaN();
      complex1.isNaN();
      complex0.isNaN();
      complex1.getArgument();
      complex2.getField();
      Complex complex3 = complex2.multiply(complex1);
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract(20.0);
      Complex.valueOf(2109.3488292678);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2231.111), 891.1922041431745);
      Complex complex1 = complex0.ONE.tan();
      complex0.getReal();
      complex0.negate();
      complex1.multiply(1);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow((-20.0));
      Complex complex2 = complex1.ZERO.log();
      complex1.INF.conjugate();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.INF.reciprocal();
      complex4.INF.multiply(62);
      Complex complex5 = complex1.I.pow(complex0);
      Complex complex6 = complex0.INF.tanh();
      Complex complex7 = complex0.conjugate();
      complex1.ONE.getField();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.ONE.conjugate();
      Complex complex10 = complex9.ZERO.cosh();
      complex10.I.toString();
      Complex complex11 = complex5.sqrt();
      complex9.I.exp();
      complex11.I.hashCode();
      complex9.multiply((-20.0));
      Complex complex12 = complex5.cosh();
      complex12.ONE.divide(complex9);
      complex6.exp();
      Complex complex13 = complex2.createComplex((-1436.0), (-1436.0));
      complex13.NaN.abs();
      complex11.multiply(complex7);
      complex3.multiply((-2990.588818791214));
      complex9.reciprocal();
      Object object0 = new Object();
      complex12.equals(object0);
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(6.283185307179586);
      complex1.INF.add((-140.1695034568));
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.I.divide(0.0);
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex4.I.log();
      complex4.sqrt1z();
      complex0.readResolve();
      complex1.isNaN();
      complex4.exp();
      complex2.abs();
      complex3.cos();
      complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 3408.1;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 6.48979555673987E-8;
      Complex complex1 = complex0.INF.divide(6.48979555673987E-8);
      complex1.NaN.atan();
      complex1.I.exp();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.INF.pow(0.0);
      Complex complex2 = complex0.ZERO.multiply(3104.826071);
      complex0.exp();
      complex2.INF.acos();
      complex2.ZERO.cos();
      complex2.subtract(3104.826071);
      Complex.valueOf(3104.826071, 746.13118);
      complex2.log();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1758.4);
      complex1.ZERO.abs();
      Complex complex2 = complex1.INF.add(2607.0379);
      complex2.I.sin();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4073.069352251964, (-4697.0494912829));
      complex1.divide((-3623.0));
      complex0.INF.acos();
      complex0.ONE.sinh();
      Complex complex2 = complex0.subtract(complex1);
      complex2.tanh();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2498.0));
      Complex complex1 = Complex.NaN;
      complex1.I.hashCode();
      Complex complex2 = complex1.INF.multiply(complex0);
      String string0 = complex2.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = complex3.ZERO.acos();
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex1.NaN.divide(complex0);
      Complex complex6 = complex5.ONE.multiply((-2498.0));
      complex1.readResolve();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex0.ONE.pow(complex2);
      double double0 = complex7.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex7.NaN.sqrt1z();
      Complex complex9 = complex7.NaN.add((-2498.0));
      Complex complex10 = complex0.sinh();
      Complex complex11 = complex10.createComplex((-2498.0), (-2498.0));
      complex11.NaN.sin();
      complex10.add(0.0);
      Complex complex12 = Complex.valueOf((-2498.0));
      Complex complex13 = complex12.pow(complex10);
      Complex complex14 = complex2.reciprocal();
      complex6.createComplex(0.0, (-700.905859783929));
      complex9.isNaN();
      Complex complex15 = complex2.acos();
      Complex complex16 = complex0.tan();
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals((-0.4632774066859617), complex16.getReal(), 0.01);
      
      Complex complex17 = complex9.asin();
      Complex complex18 = complex9.pow(complex12);
      complex8.sin();
      complex15.cos();
      complex9.negate();
      Complex complex19 = complex6.sin();
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      
      complex15.negate();
      assertSame(complex15, complex13);
      
      complex6.getArgument();
      Complex complex20 = complex14.divide(Double.NaN);
      assertSame(complex20, complex17);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertSame(complex20, complex18);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.I.sinh();
      complex3.INF.hashCode();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex1.INF.divide(784.7678314372);
      String string0 = complex0.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      double double0 = complex2.getArgument();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex0.equals((Object)complex4));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      List<Complex> list0 = complex0.nthRoot(1190);
      assertEquals(1190, list0.size());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(list0.contains(complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.pow(0.36222589015960693);
      Complex complex3 = complex1.ONE.cos();
      complex0.negate();
      Complex complex4 = complex3.add(complex1);
      complex4.ONE.reciprocal();
      complex2.NaN.cosh();
      complex1.divide(complex4);
      complex2.log();
      complex2.divide(0.36222589015960693);
      try { 
        complex2.NaN.nthRoot((-3630));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,630
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
