/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:30:23 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(200.40130055039444, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-451.8881743235599), (-451.8881743235599));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.sqrt1z();
      complex0.cosh();
      Complex complex5 = Complex.valueOf(20.0);
      complex4.toString();
      complex2.add((-451.8881743235599));
      complex3.getField();
      complex0.nthRoot(1186);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(176.0, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(176.0, 176.0);
      complex0.divide(complex1);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.002262440543753527, (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.NaN.acos();
      complex0.multiply((-1845));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 507.9980165263295);
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
      complex0.toString();
      Complex complex2 = new Complex(507.9980165263295, 413.0552169);
      complex0.getArgument();
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.I;
      complex5.subtract(complex3);
      Complex complex6 = Complex.INF;
      complex0.equals(complex6);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1.0);
      complex1.I.add(complex0);
      complex1.nthRoot(2073224257);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(684.4508294654289, 1.7173159016511951E-217);
      Complex complex1 = new Complex((-1.0), 20.0);
      complex0.pow(complex1);
      Complex complex2 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7173159016511951E-217, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.subtract(168.5558);
      complex1.add(complex0);
      Complex complex2 = complex0.multiply(801.3);
      complex2.ONE.getField();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7173159016511951E-217, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf(1.7173159016511951E-217);
      complex2.ZERO.acos();
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow((-2005.671532));
      complex1.multiply(1234.21550255546);
      complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.ZERO.divide((-319.2595834987));
      Complex complex4 = Complex.valueOf((-2005.671532));
      Complex complex5 = complex4.divide((-319.2595834987));
      complex0.pow(complex4);
      Complex.valueOf(2092.2847);
      complex4.I.log();
      complex3.multiply(1234.21550255546);
      complex2.atan();
      Complex.valueOf((-319.2595834987), (-319.2595834987));
      complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-726.0743609192084));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sqrt();
      complex1.pow(complex2);
      Complex complex3 = new Complex(2.115062964308555E-197, 2.115062964308555E-197);
      complex3.add((-6793298.0));
      complex2.asin();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.1719443712336026E278);
      Complex complex1 = new Complex(121.686365, 121.686365);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.NaN.reciprocal();
      complex0.pow(complex1);
      complex2.conjugate();
      Complex complex4 = complex0.sqrt1z();
      complex4.sinh();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.7173159016511951E-217, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.sqrt();
      complex1.getArgument();
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.subtract(complex3);
      complex6.equals((Object) null);
      complex4.tanh();
      complex1.add((-3193.91164824));
      complex1.multiply(1095);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.7173159016511951E-217, Double.POSITIVE_INFINITY);
      Object object0 = complex1.readResolve();
      complex0.multiply(complex1);
      complex1.toString();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 1622.0);
      complex0.getArgument();
      complex0.log();
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(0.0, 2872.75919852889);
      complex2.subtract(complex4);
      complex4.equals(object0);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 10.612114600460776);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.pow(2421.8);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.add(3744.72101984645);
      complex3.readResolve();
      complex2.multiply(complex0);
      complex4.toString();
      Complex complex5 = new Complex(3744.72101984645, (-523.7));
      complex1.getArgument();
      complex2.log();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex2.subtract(complex3);
      complex6.equals(complex7);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.sin();
      complex3.INF.multiply((-2671.272016891));
      Complex complex5 = Complex.valueOf(1536.35819478, (-1728.995));
      complex5.ONE.divide(complex3);
      Complex complex6 = complex0.cosh();
      complex0.ONE.cosh();
      complex2.getArgument();
      Complex complex7 = complex0.multiply((-6.619064395428225E206));
      complex6.toString();
      complex5.ZERO.getField();
      complex6.NaN.subtract(complex5);
      complex6.multiply(2.0);
      complex5.getField();
      complex2.getField();
      complex4.ZERO.exp();
      Complex complex8 = complex4.tan();
      complex8.pow(complex1);
      Complex complex9 = Complex.valueOf(2242.228309176025, (-3404.465));
      complex9.sinh();
      complex9.ONE.multiply(complex3);
      complex7.acos();
      complex6.multiply(962);
      complex7.nthRoot(2023);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt();
      Complex complex1 = complex0.pow(complex0);
      complex0.pow(0.6568518877029419);
      complex0.asin();
      Complex complex2 = complex0.add(complex1);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(1.7934537145592996E-17, 456.019);
      Complex complex1 = complex0.multiply((-1581));
      Complex complex2 = complex1.ONE.atan();
      complex1.ONE.cosh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ONE.add(456.019);
      complex3.pow((-1396.0061358468));
      Complex complex5 = complex4.ZERO.conjugate();
      complex5.I.sinh();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.negate();
      complex6.I.acos();
      Complex complex8 = complex0.asin();
      complex8.sin();
      complex1.atan();
      complex2.toString();
      complex2.subtract(341.4799320044545);
      complex2.sqrt1z();
      complex7.subtract((-1038.815047));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      complex2.I.subtract(Double.POSITIVE_INFINITY);
      complex0.I.divide((-607.631845594));
      Complex complex3 = Complex.valueOf((-607.631845594));
      complex0.ZERO.nthRoot(995);
      complex3.sqrt1z();
      Complex complex4 = complex1.divide(Double.POSITIVE_INFINITY);
      complex4.acos();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(541.6542859955159, 541.6542859955159);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.valueOf(541.6542859955159);
      complex1.getArgument();
      complex2.readResolve();
      complex0.equals(complex4);
      Complex complex5 = complex1.cosh();
      complex3.sqrt();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1970.6234918050545, (-3314.1210045));
      Complex complex1 = complex0.pow(1970.6234918050545);
      complex1.subtract(1296.314118754187);
      Complex complex2 = complex1.divide(1970.6234918050545);
      Complex.valueOf(6.987774277636692);
      Complex complex3 = new Complex(1.92909364037955E-9, (-3314.1210045));
      complex3.nthRoot(995);
      complex2.sqrt1z();
      complex2.divide(6.987774277636692);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = new Complex(Double.NaN, 1719.0);
      complex3.INF.createComplex((-2111.697), (-2111.697));
      Complex complex4 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex5 = complex4.cosh();
      complex5.I.tanh();
      complex0.equals(complex3);
      complex0.pow(Double.NaN);
      Complex.valueOf(6.283185307179586, Double.NaN);
      Complex complex6 = complex0.negate();
      complex6.pow(complex2);
      Complex complex7 = complex4.asin();
      complex0.nthRoot(959);
      complex6.nthRoot(982);
      Complex complex8 = complex7.sin();
      complex8.createComplex(1586.763, 778.81995);
      complex8.ZERO.divide((double) 959);
      complex8.ONE.getField();
      complex1.add(Double.NaN);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.negate();
      Complex complex1 = Complex.valueOf((-1904.5), (-1904.5));
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.reciprocal();
      complex1.tan();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.reciprocal();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      try { 
        complex2.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(1062.5, (-2400.6595099));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.INF.add(1062.5);
      complex0.getField();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex0.divide((-2356.0));
      complex5.NaN.sinh();
      complex5.add(complex4);
      Complex complex6 = complex3.I.sqrt1z();
      complex6.INF.divide(complex3);
      complex3.equals((Object) null);
      complex0.I.negate();
      Complex.valueOf(2126.56628);
      complex3.createComplex(2126.56628, 2126.56628);
      complex1.INF.sqrt();
      Complex complex7 = complex4.divide((-5.450354376430758E-9));
      complex7.I.reciprocal();
      Complex complex8 = complex7.I.asin();
      complex8.ZERO.reciprocal();
      Complex complex9 = Complex.valueOf((-20.0), (-9.809953482725758E-8));
      Complex complex10 = complex3.cos();
      complex10.ONE.toString();
      complex9.getField();
      complex0.divide(complex2);
      complex7.asin();
      complex6.sqrt();
      complex1.createComplex(2126.56628, (-20.0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2690.5504635796, 2690.5504635796);
      complex0.INF.getArgument();
      complex0.NaN.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.ZERO.add(complex0);
      Complex complex5 = complex3.divide(complex1);
      complex5.ZERO.hashCode();
      Complex complex6 = complex0.conjugate();
      complex6.ZERO.negate();
      complex3.readResolve();
      complex4.exp();
      Object object0 = complex0.readResolve();
      ((Complex) object0).NaN.getField();
      complex3.equals(object0);
      complex5.cosh();
      complex4.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.I.toString();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.NaN.hashCode();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.ONE;
      complex0.acos();
      complex2.getArgument();
      complex2.divide(complex1);
      Complex complex4 = complex1.multiply((-540.4517735283957));
      complex1.isNaN();
      complex2.subtract(-0.0);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2690.5504635796, 2690.5504635796);
      complex0.INF.getArgument();
      Complex complex1 = complex0.ZERO.asin();
      complex1.NaN.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.ZERO.add(complex1);
      Complex complex7 = complex4.divide(complex2);
      complex7.ZERO.hashCode();
      Complex complex8 = complex0.conjugate();
      complex8.ZERO.negate();
      complex4.readResolve();
      complex6.exp();
      Object object0 = complex0.readResolve();
      complex4.equals(object0);
      complex7.cosh();
      complex8.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.negate();
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.I.subtract(Double.POSITIVE_INFINITY);
      complex0.I.divide((-607.631845594));
      Complex.valueOf((-607.631845594));
      complex0.ZERO.nthRoot(995);
      complex0.sqrt1z();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.5836293809324178);
      Complex complex2 = Complex.I;
      complex2.getArgument();
      Complex complex3 = complex0.sqrt();
      complex1.getArgument();
      Complex complex4 = Complex.valueOf(1.986264756071962E44, 82.36262678496);
      complex3.cos();
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = complex4.asin();
      complex3.add(complex6);
      Complex complex7 = Complex.INF;
      complex4.reciprocal();
      complex7.multiply(complex6);
      complex6.log();
      complex1.getField();
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.add(1557.6392580028269);
      complex3.readResolve();
      Complex complex4 = complex3.multiply(complex2);
      complex0.toString();
      Complex complex5 = complex4.acos();
      complex4.getArgument();
      Complex complex6 = complex1.log();
      Complex complex7 = Complex.NaN;
      complex6.subtract(complex7);
      complex6.equals("(0.0, 0.0)");
      complex5.tanh();
      complex6.isInfinite();
      complex2.nthRoot(559);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-412.220923498), (-412.220923498));
      Complex complex1 = new Complex((-412.220923498), (-412.220923498));
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.isInfinite();
      Complex complex3 = complex1.sinh();
      complex3.NaN.abs();
      Complex complex4 = complex0.I.negate();
      complex4.NaN.multiply(977);
      complex0.toString();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.cos();
      complex6.readResolve();
      complex1.abs();
      complex5.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      complex1.negate();
      complex1.createComplex(Double.POSITIVE_INFINITY, (-20.0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.sqrt();
      Complex complex1 = complex0.ONE.add((-3505.5663463889));
      complex1.ZERO.subtract((-3505.5663463889));
      complex1.NaN.multiply(3601);
      Complex complex2 = complex1.I.multiply((-254.0));
      complex2.divide(complex0);
      complex0.multiply((-254.0));
      complex0.isNaN();
      complex0.pow((-254.0));
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(541.6542859955159, 541.6542859955159);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.ZERO;
      complex4.getArgument();
      complex0.readResolve();
      Complex complex5 = Complex.ZERO;
      complex5.equals(complex2);
      complex4.cosh();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = Complex.ZERO;
      complex0.nthRoot(155);
      complex0.getField();
      Complex complex2 = complex0.tanh();
      complex2.multiply(complex1);
      Complex complex3 = new Complex(Double.NaN, 2.3489472779602617E-8);
      complex3.hashCode();
      complex2.isNaN();
      Complex complex4 = Complex.valueOf(1.0656897647351535, 2690.5504635796);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2690.5504635796, 2690.5504635796);
      complex0.INF.getArgument();
      Complex complex1 = complex0.ZERO.asin();
      complex1.NaN.abs();
      Complex complex2 = complex0.pow(Double.NaN);
      Complex complex3 = Complex.INF;
      complex2.readResolve();
      Complex complex4 = complex2.multiply(complex0);
      complex3.toString();
      Complex complex5 = complex3.acos();
      complex5.getArgument();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.NaN;
      complex4.subtract(complex0);
      Object object0 = complex0.readResolve();
      complex4.equals(object0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2690.5504635796, 2690.5504635796);
      complex0.INF.getArgument();
      Complex complex1 = complex0.ZERO.asin();
      complex1.NaN.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.ZERO.add(complex1);
      Complex complex7 = complex4.divide(complex2);
      complex7.ZERO.hashCode();
      Complex complex8 = complex0.conjugate();
      complex8.ZERO.negate();
      complex5.ONE.cosh();
      complex1.multiply(complex0);
      Complex.valueOf(Double.NaN, 0.7853981633974483);
      complex0.divide(2690.5504635796);
      complex2.asin();
      complex2.toString();
      complex6.readResolve();
      Object object0 = new Object();
      complex5.equals(object0);
      complex5.cosh();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2690.5504635796, 2690.5504635796);
      complex0.INF.getArgument();
      Complex complex1 = complex0.ZERO.asin();
      complex1.NaN.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.ZERO.add(complex1);
      Complex complex7 = complex4.divide(complex2);
      complex7.ZERO.hashCode();
      complex3.ONE.acos();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.ZERO.negate();
      complex5.ONE.cosh();
      Complex complex10 = complex1.multiply(complex0);
      complex10.ZERO.sinh();
      Complex complex11 = complex0.divide(2690.5504635796);
      complex2.asin();
      complex2.toString();
      Complex complex12 = new Complex(2690.5504635796, Double.NaN);
      Object object0 = new Object();
      complex5.equals(object0);
      complex5.cosh();
      complex6.sqrt();
      complex11.subtract(complex9);
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      complex0.pow(complex1);
      Complex complex2 = Complex.I;
      complex2.asin();
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex(1.281519889831543, 1.5707963267948966);
      complex4.getField();
      try { 
        complex4.nthRoot((-798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -798
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7173159016511951E-217);
      Complex complex1 = Complex.I;
      complex0.getArgument();
      Complex complex2 = complex0.sqrt();
      complex2.getArgument();
      Complex complex3 = Complex.valueOf(0.0, 0.6568518877029419);
      complex3.cos();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.asin();
      complex5.I.add(complex1);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.reciprocal();
      complex7.ONE.multiply(complex4);
      complex7.I.log();
      complex1.getField();
      try { 
        complex6.nthRoot((-798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -798
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(1118.02);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex0.divide(complex4);
      complex3.hashCode();
      complex5.conjugate();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.multiply(complex2);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex8.divide(1573.4689281661567);
      Complex complex12 = Complex.I;
      Complex complex13 = complex12.asin();
      Complex complex14 = Complex.I;
      complex14.toString();
      complex3.sinh();
      complex2.sqrt();
      Complex complex15 = complex9.createComplex(6.283185307179586, 1573.4689281661567);
      Complex complex16 = Complex.I;
      complex16.atan();
      Complex complex17 = complex12.add(1573.4689281661567);
      complex5.isInfinite();
      complex13.sinh();
      complex2.createComplex(7162.0, 3.141592653589793);
      complex0.getArgument();
      Complex complex18 = Complex.I;
      complex18.equals(complex15);
      complex6.isInfinite();
      complex17.sin();
      complex18.abs();
      complex10.sin();
      Complex complex19 = Complex.INF;
      complex11.multiply(complex19);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex.valueOf(1.7173159016511951E-217);
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply(17);
      Complex complex3 = complex2.multiply((-486));
      Complex complex4 = complex3.multiply((-3623.346));
      complex2.divide(complex3);
      complex4.multiply((-3623.346));
      complex0.hashCode();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1430.241));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = new Complex((-1430.241));
      complex6.hashCode();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex1.cosh();
      complex0.multiply(complex8);
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex4.divide((-1430.241));
      complex4.asin();
      complex7.toString();
      complex6.sinh();
      complex0.sqrt();
      complex2.createComplex(2.0, (-1430.241));
      complex3.atan();
      complex7.add((-524.286352));
      complex9.isInfinite();
      Complex complex12 = Complex.valueOf((-325.3652), (-1430.241));
      Complex complex13 = complex12.sinh();
      complex13.createComplex(1267.0846, 6.283185307179586);
      Complex complex14 = new Complex((-1430.241));
      complex14.getArgument();
      Object object0 = complex5.readResolve();
      complex10.equals(object0);
      complex11.isInfinite();
      complex6.sin();
      complex8.abs();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2690.5504635796, 2690.5504635796);
      complex0.INF.getArgument();
      Complex complex1 = complex0.ZERO.asin();
      complex1.NaN.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.ZERO.add(complex1);
      Complex complex7 = complex4.divide(complex2);
      complex7.ZERO.hashCode();
      Complex complex8 = complex0.conjugate();
      complex8.ZERO.negate();
      complex5.ONE.cosh();
      Complex complex9 = complex1.multiply(complex0);
      complex9.ZERO.sinh();
      complex0.divide(2690.5504635796);
      Complex complex10 = complex2.asin();
      complex2.toString();
      Complex complex11 = complex3.sinh();
      complex11.INF.sqrt();
      Complex complex12 = complex7.ZERO.createComplex(2690.5504635796, 6.283185307179586);
      complex12.INF.atan();
      Complex complex13 = complex8.add(2690.5504635796);
      complex7.isInfinite();
      complex2.sinh();
      Complex complex14 = complex6.createComplex(6.283185307179586, 6.283185307179586);
      complex14.INF.subtract(Double.NaN);
      complex14.NaN.getArgument();
      complex13.equals(complex2);
      complex0.isInfinite();
      complex10.sin();
      complex11.abs();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      complex0.ZERO.nthRoot(995);
      complex0.getField();
      Complex complex3 = new Complex(995, 995);
      Complex complex4 = Complex.ONE;
      complex2.hashCode();
      complex1.isNaN();
      Complex complex5 = complex3.sin();
      complex5.subtract((double) 995);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 541.6542859955159;
      Complex complex0 = Complex.valueOf(541.6542859955159, 541.6542859955159);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.multiply(complex0);
      complex1.tan();
      Complex complex3 = complex2.I.pow(541.6542859955159);
      Complex complex4 = complex0.reciprocal();
      complex4.ONE.pow(complex1);
      Complex.valueOf(541.6542859955159);
      Complex complex5 = complex3.sin();
      complex5.NaN.sqrt();
      try { 
        complex5.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2690.5504635796, 2690.5504635796);
      complex0.INF.getArgument();
      Complex complex1 = complex0.ZERO.asin();
      complex1.NaN.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.ZERO.add(complex1);
      Complex complex7 = complex4.divide(complex2);
      complex7.ZERO.hashCode();
      Complex complex8 = complex0.conjugate();
      complex8.ZERO.negate();
      complex5.ONE.cosh();
      Complex complex9 = complex1.multiply(complex0);
      complex9.ZERO.sinh();
      complex0.divide(2690.5504635796);
      Complex complex10 = complex2.asin();
      complex2.toString();
      Complex complex11 = complex3.sinh();
      complex11.INF.sqrt();
      Complex complex12 = complex7.ZERO.createComplex(2690.5504635796, 6.283185307179586);
      complex12.INF.atan();
      Complex complex13 = complex8.add(2690.5504635796);
      complex7.isInfinite();
      complex2.sinh();
      Complex complex14 = complex6.createComplex(6.283185307179586, 6.283185307179586);
      complex14.NaN.getArgument();
      complex13.equals(complex2);
      complex0.isInfinite();
      complex10.sin();
      complex11.abs();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.log();
      complex0.sinh();
      complex3.hashCode();
      complex2.getArgument();
      complex2.sqrt();
      complex0.getArgument();
      complex2.cos();
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex(0.0, (-467.38));
      Complex complex6 = complex4.pow(complex5);
      complex6.getField();
      complex0.asin();
      complex5.reciprocal();
      complex5.getField();
      complex4.nthRoot(2750);
      Complex complex7 = new Complex(0.0);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-2342.1333571), (-2342.1333571));
      Complex complex1 = complex0.INF.divide((-2342.1333571));
      Complex complex2 = complex1.sqrt();
      complex2.reciprocal();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.subtract(complex0);
      complex4.INF.tanh();
      complex1.equals(complex2);
      Complex.valueOf((-1.0), 2069.0);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex1.ZERO.asin();
      complex3.ZERO.getArgument();
      complex3.abs();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.multiply(0);
      Complex complex6 = Complex.NaN;
      complex5.subtract(complex4);
      complex2.equals((Object) null);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex7.tanh();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.I.toString();
      complex0.NaN.sin();
      Complex complex1 = complex0.conjugate();
      complex1.atan();
      complex0.acos();
      complex1.getArgument();
      Complex complex2 = complex0.negate();
      complex2.ONE.divide(-0.0);
      Complex complex3 = Complex.valueOf(-0.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.tan();
      complex4.NaN.toString();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ZERO.log();
      complex0.reciprocal();
      complex1.pow(complex1);
      double double0 = 0.632247805595398;
      Complex complex2 = Complex.valueOf(0.632247805595398);
      complex1.sin();
      Complex.valueOf((-20.0));
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = 541.6542859955159;
      Complex complex0 = Complex.valueOf(541.6542859955159, 541.6542859955159);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.multiply(complex0);
      complex1.tan();
      Complex complex3 = complex2.I.pow(541.6542859955159);
      complex3.I.log();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex0.reciprocal();
      complex5.ONE.pow(complex1);
      Complex.valueOf(541.6542859955159);
      Complex complex6 = complex4.sin();
      complex6.NaN.sqrt();
      try { 
        complex6.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.toString();
      Complex complex1 = complex0.I.cosh();
      complex1.I.acos();
      Complex complex2 = new Complex(2906.0, 2906.0);
      Complex complex3 = complex1.INF.multiply(complex2);
      complex0.getReal();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.6892), (-158.6892));
      Complex complex1 = complex0.I.pow(0.0);
      complex1.ZERO.conjugate();
      complex0.getArgument();
      complex1.multiply(complex0);
      complex0.getImaginary();
      complex1.getReal();
      Complex complex2 = complex0.exp();
      complex2.ONE.divide(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.sqrt();
      complex4.getImaginary();
      Complex complex5 = complex3.sinh();
      complex4.negate();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.6892), (-158.6892));
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex1.ZERO.conjugate();
      complex0.getArgument();
      complex0.getImaginary();
      complex1.multiply(2655);
      Complex complex3 = complex0.multiply(0.0);
      complex3.divide(complex0);
      complex3.multiply((-2524.19373617353));
      Complex complex4 = complex1.multiply(1);
      complex0.reciprocal();
      complex4.log();
      complex2.getImaginary();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sqrt();
      complex0.getImaginary();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex2.log();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex(1.0, 1.0);
      Complex complex6 = complex4.add(complex5);
      complex0.tan();
      Complex complex7 = Complex.ONE;
      complex7.hashCode();
      complex3.hashCode();
      Complex complex8 = Complex.ONE;
      complex6.equals(complex0);
      complex5.multiply((-2923));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7173159016511951E-217);
      Complex complex1 = Complex.I;
      Complex.valueOf(541.6542859955159);
      complex0.getArgument();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex.valueOf((-1.0), (-298.8995857949716));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.toString();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.conjugate();
      complex0.atan();
      Complex complex4 = complex3.acos();
      complex4.getArgument();
      Complex complex5 = complex3.negate();
      Complex complex6 = new Complex(1133.7, (-1.2373127835022595E15));
      complex6.divide(6.63595840453991E235);
      Complex complex7 = Complex.ZERO;
      complex7.subtract(1430.241);
      Complex.valueOf(1133.7, Double.NaN);
      complex5.toString();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.I.sqrt();
      Complex complex2 = complex0.ONE.add((-3505.5663463889));
      Complex complex3 = complex2.ZERO.subtract((-3505.5663463889));
      Complex complex4 = complex0.pow((-3505.5663463889));
      complex3.tanh();
      complex1.nthRoot(995);
      complex4.getField();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.tanh();
      complex6.multiply(995);
      complex6.add((-1477.359773306));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = complex0.multiply((-3362));
      Complex complex5 = complex3.multiply((double) 1);
      complex2.divide(complex0);
      Complex complex6 = Complex.I;
      complex6.multiply(6.349826172787151E136);
      complex4.multiply((-2867));
      complex2.reciprocal();
      complex5.log();
      complex5.getImaginary();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.INF.negate();
      Complex complex2 = complex1.pow(Double.POSITIVE_INFINITY);
      complex2.tanh();
      complex0.ZERO.nthRoot(995);
      complex1.getField();
      complex2.tanh();
      Complex complex3 = complex2.multiply(995);
      complex3.I.multiply(Double.POSITIVE_INFINITY);
      complex3.add((-1477.359773306));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1430.241));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.valueOf(Double.NaN);
      complex0.getArgument();
      complex2.cos();
      complex0.hashCode();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.ONE.add((-3505.5663463889));
      complex3.ZERO.subtract((-3505.5663463889));
      Complex complex4 = complex3.NaN.multiply(3569);
      Complex complex5 = complex3.I.multiply(1);
      Complex complex6 = complex5.I.multiply((-254.0));
      complex6.divide(complex0);
      Complex complex7 = complex0.multiply((-254.0));
      complex3.multiply(1259);
      complex4.reciprocal();
      complex7.log();
      complex2.getImaginary();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      complex0.ZERO.sin();
      Complex complex2 = complex1.ZERO.asin();
      complex2.abs();
      Complex complex3 = complex0.tan();
      complex3.I.multiply(0);
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      complex0.getField();
      complex0.INF.readResolve();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.NaN.createComplex(0.0, (-1957.77871788));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.ZERO.add((-1957.77871788));
      Complex.valueOf(0.0);
      Complex.valueOf(0.0);
      complex1.I.getField();
      complex0.NaN.sin();
      complex1.nthRoot(1);
      complex0.hashCode();
      complex1.createComplex(1, 0.0);
      complex4.getImaginary();
      complex2.multiply(1);
      complex0.add(complex3);
      Complex complex5 = new Complex((-1957.77871788), (-3459.7377));
      complex3.pow(complex5);
      complex3.sin();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-3.517545711859706E7));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.add(complex1);
      complex3.isNaN();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.multiply(complex4);
      complex5.ZERO.add(1.5564115047454834);
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex6.add(1.5564115047454834);
      complex0.reciprocal();
      complex2.isInfinite();
      Complex complex8 = complex1.log();
      complex1.INF.nthRoot(575);
      complex0.negate();
      complex2.getArgument();
      complex1.negate();
      complex3.conjugate();
      Complex complex9 = complex2.add((-3.517545711859706E7));
      complex3.getImaginary();
      complex5.nthRoot(2078);
      complex0.isInfinite();
      complex6.acos();
      Complex complex10 = complex8.exp();
      complex10.ZERO.sinh();
      complex6.isInfinite();
      complex8.isInfinite();
      complex9.createComplex(0.0, (-1925.931292611933));
      complex2.isNaN();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 0.0;
      complex0.pow(0.0);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.I.toString();
      complex0.NaN.sin();
      Complex complex1 = complex0.conjugate();
      complex1.atan();
      complex0.acos();
      complex1.getArgument();
      Complex complex2 = complex0.negate();
      complex2.ONE.divide(-0.0);
      Complex complex3 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.tan();
      complex4.NaN.toString();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-2342.1333571), (-2342.1333571));
      Complex complex1 = complex0.INF.divide((-2342.1333571));
      Complex complex2 = complex1.sqrt();
      complex2.reciprocal();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.subtract(complex0);
      complex0.tanh();
      Complex.valueOf(755.72);
      complex4.sqrt();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(35.82329);
      complex0.subtract(35.82329);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6363908052444458);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.createComplex(0.6363908052444458, 0.6363908052444458);
      complex2.ONE.toString();
      Complex complex3 = complex1.cos();
      complex3.divide(0.6363908052444458);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.I.cos();
      complex5.NaN.sqrt();
      complex0.abs();
      complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1430.241));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex.valueOf(541.6542859955159);
      complex0.getArgument();
      Complex complex2 = complex0.cos();
      complex1.hashCode();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.INF.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.ZERO.conjugate();
      complex4.NaN.atan();
      Complex complex5 = complex1.multiply(1956.708565339);
      Complex complex6 = complex5.pow((-1562.298507295767));
      Complex complex7 = complex0.add(complex6);
      complex7.ONE.log();
      Complex complex8 = complex1.cosh();
      complex8.INF.reciprocal();
      Complex complex9 = complex6.conjugate();
      Complex complex10 = complex6.I.subtract(99.3228);
      Complex complex11 = complex9.INF.sqrt();
      Complex complex12 = complex9.multiply(646);
      Complex complex13 = complex9.divide(complex6);
      Complex complex14 = complex13.ZERO.subtract((-1562.298507295767));
      complex11.multiply((double) 646);
      Complex complex15 = complex14.multiply(1459);
      complex15.I.toString();
      complex13.nthRoot(1);
      complex12.getImaginary();
      complex8.toString();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ZERO.log();
      complex0.pow(0.0);
      Complex complex2 = complex0.add(0.0);
      complex2.INF.readResolve();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex3.I.toString();
      Complex complex4 = complex0.acos();
      complex4.ONE.getArgument();
      complex4.NaN.log();
      Complex complex5 = Complex.NaN;
      complex5.I.subtract(complex4);
      complex3.equals(complex5);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(0.0);
      complex1.ZERO.sin();
      complex1.NaN.getField();
      complex0.createComplex(0.0, 0.0);
      complex0.hashCode();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1885.114991198805), (-1885.114991198805));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt();
      complex2.exp();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex3.INF.atan();
      Complex complex6 = complex5.NaN.createComplex((-1885.114991198805), (-1885.114991198805));
      Complex complex7 = complex6.ZERO.acos();
      complex7.NaN.multiply(complex4);
      complex5.I.add(complex3);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex0.INF.subtract((-1885.114991198805));
      complex9.toString();
      Complex complex10 = complex8.ZERO.add((-1885.114991198805));
      Complex complex11 = complex8.createComplex(Double.NaN, 0.0);
      Complex complex12 = complex11.ONE.subtract(complex3);
      complex12.NaN.toString();
      Complex complex13 = complex11.multiply(1891);
      Complex complex14 = complex13.INF.conjugate();
      complex14.I.negate();
      complex1.reciprocal();
      Complex complex15 = complex13.asin();
      complex3.sinh();
      complex12.atan();
      complex8.multiply(518.485665);
      complex10.hashCode();
      complex15.hashCode();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getField();
      complex0.getArgument();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.acos();
      complex4.ZERO.nthRoot(2324);
      complex0.isInfinite();
      Complex complex5 = complex1.add(complex0);
      complex5.ONE.getArgument();
      complex5.ONE.multiply(complex2);
      complex0.NaN.multiply(0.0);
      Complex complex6 = complex5.ONE.createComplex(0.0, 0.0);
      Complex complex7 = Complex.valueOf(0.0, 6.349826172787151E136);
      Complex complex8 = complex3.sinh();
      complex1.ZERO.multiply(complex6);
      complex8.NaN.getField();
      complex2.log();
      complex5.hashCode();
      complex4.pow(complex0);
      complex7.sqrt();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.ZERO.add(1752.6328033136617);
      Complex.valueOf((-20.0), 0.0);
      complex2.ZERO.asin();
      complex1.NaN.add(207.6900013833012);
      Complex.valueOf(207.6900013833012);
      complex1.getReal();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.negate();
      complex0.ZERO.conjugate();
      complex1.toString();
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = Complex.valueOf(20.0);
      Complex complex8 = Complex.valueOf(3.257488853378793E-70, 0.0);
      complex8.ZERO.sqrt();
      complex5.sqrt();
      Complex complex9 = complex7.atan();
      complex9.NaN.sinh();
      Complex complex10 = complex9.ZERO.divide(Double.NaN);
      complex10.NaN.negate();
      complex6.createComplex(2518.29337841, 0.0);
      complex3.add((-703.0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-1436.9), (-1436.9));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(6.101012058093429E-8);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.INF.divide(complex2);
      complex0.hashCode();
      complex2.readResolve();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2918.9672290674275);
      complex0.I.multiply(0.0);
      complex0.multiply((-49.891602680804));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.createComplex((-3664.6), (-49.891602680804));
      complex2.isNaN();
      complex0.sqrt();
      Complex.valueOf(2918.9672290674275);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = new Complex((-863.28776375));
      Complex complex3 = complex0.divide(complex2);
      complex3.ZERO.add(complex2);
      Complex complex4 = complex2.ZERO.tan();
      complex4.ZERO.hashCode();
      complex3.ONE.hashCode();
      Complex complex5 = Complex.ONE;
      complex0.equals(complex5);
      Complex complex6 = complex2.multiply((-1260));
      complex1.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex0.negate();
      complex3.hashCode();
      complex1.hashCode();
      complex1.acos();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex4.subtract(complex2);
      complex5.conjugate();
      Complex.valueOf((-8.281845251820919E-8));
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-633.5423));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.multiply(17);
      Complex complex3 = complex1.INF.createComplex((-633.5423), (-633.5423));
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.add((-633.5423));
      complex4.negate();
      complex1.getArgument();
      complex4.ZERO.abs();
      complex4.getArgument();
      complex5.INF.multiply(17);
      complex4.divide(0.0);
      Complex complex6 = complex3.add(0.0);
      complex5.pow(complex6);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1293.419469));
      complex0.I.negate();
      Complex complex1 = complex0.INF.divide(2.623848491704216E-9);
      complex0.ONE.getArgument();
      Complex complex2 = complex1.ONE.subtract(0.0);
      complex2.ONE.createComplex((-745.9312598276452), (-919.8171192584255));
      complex2.NaN.getArgument();
      complex0.getReal();
      complex1.ONE.nthRoot(37);
      complex1.asin();
      complex0.hashCode();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getField();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.NaN.pow(complex0);
      complex0.isInfinite();
      complex0.abs();
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex0.divide(complex3);
      complex1.ZERO.add(0.0);
      Complex complex5 = complex4.INF.add(complex2);
      complex4.ZERO.createComplex(2201.6011361, 2201.6011361);
      complex4.INF.multiply(complex2);
      Complex.valueOf((-732.0), 2201.6011361);
      complex3.hashCode();
      complex4.NaN.sinh();
      Complex complex6 = complex3.sqrt();
      complex6.ZERO.getField();
      complex0.tanh();
      complex4.multiply(complex5);
      complex6.sqrt();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(2239.544531418587);
      Complex complex1 = complex0.I.pow(0.0);
      complex1.ONE.exp();
      complex0.getArgument();
      complex0.abs();
      Complex complex2 = complex0.sinh();
      complex2.getField();
      Complex complex3 = complex0.add(complex1);
      Complex.valueOf(0.0);
      complex1.getArgument();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4102.1937407354));
      complex0.I.readResolve();
      Complex complex1 = Complex.valueOf(0.0);
      complex0.NaN.add(complex1);
      complex0.hashCode();
      complex0.sqrt();
      Complex complex2 = Complex.valueOf((-3312.8990544));
      Complex complex3 = complex0.sin();
      complex3.sqrt();
      Complex complex4 = complex2.tan();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-603.3563253171), (-603.3563253171));
      Complex complex1 = complex0.NaN.acos();
      complex1.sqrt();
      Complex.valueOf((-603.3563253171));
      complex1.multiply(779);
      complex0.ONE.acos();
      complex0.equals("CONVERGENCE_FAILED");
      Complex complex2 = complex0.cos();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      Complex complex1 = new Complex(0.0, 1609.249552738);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(0.0);
      complex2.ZERO.subtract(complex1);
      Complex complex3 = complex0.INF.subtract(complex1);
      complex3.NaN.cos();
      complex2.NaN.toString();
      complex2.ONE.toString();
      complex2.ZERO.divide((double) 1);
      Complex complex4 = complex0.cos();
      complex0.ONE.nthRoot(1);
      Complex complex5 = complex2.ZERO.pow(0.0);
      complex5.NaN.pow(complex2);
      Complex complex6 = complex0.NaN.subtract((double) 1);
      complex6.INF.readResolve();
      complex0.NaN.acos();
      Complex complex7 = complex1.ZERO.cosh();
      Complex complex8 = complex1.INF.acos();
      Complex complex9 = complex7.NaN.add((-1222.59882975508));
      complex9.NaN.createComplex((-621.4056024774634), 0.0);
      complex0.readResolve();
      Complex complex10 = complex4.acos();
      complex10.I.exp();
      complex9.getReal();
      complex9.isInfinite();
      Complex complex11 = complex8.createComplex(Double.NaN, 0.0);
      complex11.subtract(0.0);
      complex3.multiply((-621.4056024774634));
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 5.2614409704305464E54;
      Complex complex1 = complex0.I.createComplex(5.2614409704305464E54, 592.68034693696);
      complex1.INF.subtract(5.2614409704305464E54);
      Complex complex2 = Complex.valueOf((-20.0), 0.0);
      complex2.subtract(0.0);
      complex0.ONE.sinh();
      complex1.I.conjugate();
      Complex complex3 = complex0.sinh();
      try { 
        complex3.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.6892), (-158.6892));
      Complex complex1 = complex0.I.pow(0.0);
      complex1.ZERO.conjugate();
      complex0.getArgument();
      complex0.getImaginary();
      complex1.getReal();
      Complex complex2 = complex0.exp();
      complex2.ONE.divide(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.sqrt();
      complex4.getImaginary();
      Complex complex5 = complex3.sinh();
      complex4.negate();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.negate();
      complex0.getField();
      complex0.I.getArgument();
      Complex.valueOf(1.5707963267948966);
      Complex complex4 = complex3.pow((-1203.29149748571));
      complex4.NaN.hashCode();
      Complex complex5 = complex0.subtract(complex3);
      Complex.valueOf(0.0, (-1.0));
      complex5.INF.pow(0.0);
      Complex complex6 = complex3.negate();
      complex6.ZERO.add((-1203.29149748571));
      complex4.nthRoot(462);
      complex3.nthRoot(3631);
      Complex complex7 = complex4.tanh();
      complex7.exp();
      Complex complex8 = complex7.divide(complex3);
      complex8.getReal();
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.sqrt();
      complex0.getImaginary();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex2.log();
      Complex complex3 = complex0.sinh();
      complex1.hashCode();
      complex0.multiply(1.0);
      complex0.getArgument();
      Complex complex4 = complex3.sqrt();
      complex4.getArgument();
      Complex complex5 = complex0.cos();
      complex5.getField();
      complex0.pow(complex4);
      Complex complex6 = complex1.reciprocal();
      complex6.getField();
      try { 
        complex3.nthRoot((-798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -798
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(1.3482778072357178, 0.0);
      complex0.NaN.tan();
      Complex.valueOf(1.3482778072357178, 0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.ONE.add((-3234.31716062));
      Complex complex4 = complex2.INF.cos();
      complex4.ZERO.divide(584.3376);
      complex0.readResolve();
      complex3.getReal();
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = complex5.tanh();
      complex0.readResolve();
      complex2.negate();
      complex5.subtract(complex2);
      complex2.add(complex6);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(0);
      complex1.INF.acos();
      Complex complex2 = complex0.atan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3209.076481452622));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex3.INF.multiply(0);
      complex2.getImaginary();
      Complex.valueOf(0.0);
      complex2.multiply(complex1);
      Complex complex5 = complex0.log();
      complex3.toString();
      complex1.readResolve();
      Complex complex6 = complex5.tanh();
      complex4.sqrt1z();
      complex3.divide(complex0);
      complex6.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      complex1.hashCode();
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.hashCode();
      complex2.exp();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.INF.negate();
      Complex complex2 = complex1.pow(Double.POSITIVE_INFINITY);
      complex2.tanh();
      complex0.ZERO.nthRoot(995);
      complex1.getField();
      complex2.tanh();
      Complex complex3 = complex2.multiply(995);
      complex3.add((-1477.359773306));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex1.I.getArgument();
      Complex complex3 = Complex.valueOf(32.687968);
      Complex complex4 = complex2.INF.acos();
      Complex complex5 = complex1.ZERO.cos();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex6.pow(0.5500838756561279);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.I.divide(32.687968);
      Complex complex11 = complex0.acos();
      assertEquals((-0.8813735870195429), complex11.getImaginary(), 0.01);
      
      complex8.ZERO.add(143.09641244437685);
      Complex complex12 = complex1.I.conjugate();
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      Complex complex13 = complex8.reciprocal();
      Complex complex14 = complex13.ONE.cos();
      Complex complex15 = complex14.INF.createComplex(0.5500838756561279, 1.0);
      Complex complex16 = complex15.I.tan();
      assertEquals(0.7615941559557649, complex16.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      
      Complex complex17 = complex15.NaN.asin();
      Complex complex18 = complex15.ZERO.cosh();
      assertEquals((-0.7071067811865475), complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      
      Complex complex19 = Complex.INF;
      Complex complex20 = complex4.subtract(complex19);
      complex20.ONE.abs();
      assertNotSame(complex20, complex6);
      assertSame(complex20, complex17);
      assertNotSame(complex20, complex2);
      
      Complex complex21 = complex0.subtract(1960.8400011992);
      assertFalse(complex21.isNaN());
      
      complex10.divide(32.687968);
      Complex complex22 = complex0.asin();
      assertEquals(0.8813735870195428, complex22.getImaginary(), 0.01);
      
      Complex complex23 = complex1.multiply(32.687968);
      Complex complex24 = complex10.cos();
      complex24.ONE.createComplex(6.283185307179586, (-581.618266162833));
      assertEquals(-0.0, complex24.getImaginary(), 0.01);
      assertFalse(complex9.equals((Object)complex7));
      
      complex3.negate();
      assertTrue(complex3.equals((Object)complex23));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf(537.59);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply(complex1);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.multiply(545.94);
      complex3.isInfinite();
      double double0 = complex3.abs();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(293491.88460000005, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(293491.88460000005, complex3.getReal(), 0.01);
      
      complex1.isInfinite();
      assertTrue(complex1.equals((Object)complex2));
  }
}
