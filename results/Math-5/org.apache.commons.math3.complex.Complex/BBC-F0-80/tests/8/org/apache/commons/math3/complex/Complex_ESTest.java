/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:37:59 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-849.84064093409));
      Complex complex1 = complex0.cos();
      complex0.acos();
      Complex complex2 = complex1.ZERO.add((-3.7257346819782323E242));
      complex2.INF.acos();
      Complex complex3 = complex0.NaN.multiply(complex2);
      complex2.INF.asin();
      complex3.NaN.log();
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex1.multiply(250);
      Complex complex6 = Complex.valueOf((-849.84064093409));
      complex6.nthRoot(250);
      Complex complex7 = complex1.conjugate();
      complex5.tan();
      complex4.multiply(250);
      complex2.sqrt1z();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = Complex.valueOf((-1725.4697313625));
      Complex complex3 = new Complex(20.0, Double.POSITIVE_INFINITY);
      complex3.add((-1725.4697313625));
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.divide((-1021.0012188601556));
      Complex complex6 = complex5.subtract(complex1);
      complex4.tan();
      Complex complex7 = Complex.valueOf((-1.3577357192972777E258), (-1.3577357192972777E258));
      complex7.atan();
      complex2.cosh();
      int int0 = (-2975);
      try { 
        complex6.nthRoot((-2975));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,975
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.sin();
      complex2.add(complex1);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = Complex.valueOf(2243.73322432);
      Complex complex5 = complex0.ZERO.acos();
      complex5.I.getField();
      Complex complex6 = complex5.ONE.divide(complex3);
      complex6.I.toString();
      Complex complex7 = complex4.I.add(2243.73322432);
      complex0.getField();
      complex7.ONE.sin();
      Complex complex8 = complex4.multiply(965);
      Complex complex9 = complex7.subtract(complex0);
      complex4.abs();
      complex8.sqrt1z();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex7.sqrt1z();
      Complex complex12 = complex11.NaN.sinh();
      Complex complex13 = complex10.createComplex(2243.73322432, 2243.73322432);
      Complex complex14 = Complex.NaN;
      complex4.add(complex14);
      complex1.tanh();
      Complex complex15 = complex0.NaN.createComplex(2.335970335559215E136, 965);
      Complex complex16 = complex13.subtract(2.335970335559215E136);
      complex16.NaN.nthRoot(965);
      complex12.asin();
      complex1.nthRoot(1060);
      complex0.divide(complex9);
      complex5.divide(0.19999954104423523);
      complex15.asin();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1667.0, 1667.0);
      complex0.INF.conjugate();
      complex0.exp();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
      complex0.I.reciprocal();
      complex0.sin();
      complex0.createComplex(1.5060972626944096E35, 0.567397952079773);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(2.9410015940087773E-8, 2.9410015940087773E-8);
      Complex complex2 = complex1.cosh();
      Complex.valueOf(20.0, 1.0008628213726034);
      Complex complex3 = Complex.valueOf(20.0);
      complex3.tanh();
      Complex complex4 = Complex.ONE;
      // Undeclared exception!
      complex2.nthRoot(2146448064);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.630012190450397), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-1.630012190450397));
      complex0.NaN.toString();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.divide((-1.630012190450397));
      complex3.tan();
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-20.0), 69.80711922916);
      Complex complex2 = complex0.sinh();
      complex2.log();
      Complex complex3 = Complex.ONE;
      complex1.tanh();
      Complex complex4 = Complex.ONE;
      complex0.nthRoot(436);
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(275.1191183055087, 2.161656025361765E166);
      Complex complex1 = Complex.valueOf(2.161656025361765E166, 2.161656025361765E166);
      Complex complex2 = complex0.sin();
      complex0.tanh();
      Complex complex3 = complex0.acos();
      complex3.subtract(complex2);
      Complex complex4 = Complex.valueOf(2.161656025361765E166, 2.161656025361765E166);
      complex4.ZERO.asin();
      Complex complex5 = complex3.ONE.conjugate();
      complex5.ZERO.divide(275.1191183055087);
      Complex complex6 = complex1.multiply(complex3);
      complex6.INF.subtract(complex5);
      Complex complex7 = complex3.ZERO.log();
      complex7.INF.cosh();
      try { 
        complex7.ZERO.nthRoot((-1966));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,966
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.tan();
      Complex complex1 = new Complex(3133.07246, 626.293);
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      complex0.pow(complex1);
      complex1.cos();
      complex0.reciprocal();
      Complex complex2 = new Complex(Double.NaN);
      complex1.multiply((-77338.61000000002));
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex.valueOf((-0.0015411436573167959), Double.POSITIVE_INFINITY);
      Complex complex0 = Complex.I;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.multiply(435);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex0.tanh();
      complex4.hashCode();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.NaN.divide((-6.889997193778161E-8));
      Complex complex7 = complex6.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.INF.divide((double) 435);
      Complex complex9 = complex8.INF.createComplex((-2421.7306), (-2421.7306));
      Complex complex10 = complex9.NaN.subtract(complex5);
      Complex complex11 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex12 = complex5.negate();
      complex4.tan();
      Complex complex13 = complex12.tan();
      Complex complex14 = Complex.valueOf((-6.889997193778161E-8));
      Complex complex15 = complex14.asin();
      Complex complex16 = complex4.exp();
      complex16.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex17 = complex11.cos();
      Complex complex18 = complex17.ZERO.add(complex5);
      complex18.NaN.sqrt1z();
      complex7.add(complex13);
      complex15.acos();
      complex12.toString();
      Complex complex19 = complex12.pow((double) 435);
      Complex complex20 = complex19.ZERO.subtract(complex3);
      complex13.acos();
      complex0.createComplex((-6.889997193778161E-8), 557.7848052020646);
      complex10.createComplex(557.7848052020646, 3658.417920108561);
      complex20.readResolve();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = null;
      complex0.ONE.tanh();
      try { 
        complex1.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.NaN.asin();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
      complex0.nthRoot(1171);
      complex0.multiply(1171);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      complex1.NaN.readResolve();
      Complex complex2 = complex1.INF.multiply(4355);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.cos();
      complex4.I.conjugate();
      Complex complex5 = complex1.NaN.cosh();
      Complex complex6 = complex0.I.sqrt1z();
      complex2.ONE.subtract(355.345525);
      Complex complex7 = Complex.valueOf(0.058823529411764705, 364.89059632);
      complex7.INF.createComplex(834.975207073135, 1623.2);
      Complex complex8 = complex7.ZERO.multiply(0.058823529411764705);
      complex8.INF.getField();
      complex1.multiply(2174.835640132695);
      complex6.INF.conjugate();
      complex6.NaN.divide(complex5);
      complex6.nthRoot(5);
      complex1.cos();
      complex0.sin();
      complex3.atan();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.subtract((-244.97649147873278));
      Complex complex5 = complex4.add((-4828.27));
      Complex complex6 = complex1.conjugate();
      complex1.divide(Double.NaN);
      Complex complex7 = complex6.cos();
      Complex complex8 = Complex.NaN;
      complex5.tan();
      Complex complex9 = Complex.INF;
      complex9.add((-2002.6));
      complex7.conjugate();
      Object object0 = new Object();
      Object object1 = new Object();
      Complex complex10 = Complex.valueOf(519.2154);
      complex10.equals(complex9);
      Complex complex11 = Complex.INF;
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3428.3307612037);
      Complex complex1 = Complex.valueOf(3428.3307612037);
      complex1.hashCode();
      Complex complex2 = complex0.reciprocal();
      complex1.divide(complex2);
      complex0.multiply(1);
      Complex complex3 = Complex.I;
      complex2.toString();
      Complex complex4 = Complex.INF;
      complex4.conjugate();
      Object object0 = new Object();
      Object object1 = complex3.readResolve();
      complex2.equals(object1);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.subtract((-244.30882896603867));
      Complex complex5 = new Complex(1433.9542965240512);
      Complex complex6 = new Complex(4.363385670892333E-4);
      Complex complex7 = complex6.acos();
      Complex complex8 = Complex.I;
      complex8.toString();
      Complex complex9 = complex4.divide((-8.614279278908715));
      Complex complex10 = complex5.cos();
      complex6.tan();
      complex1.createComplex((-3.284204788892967E204), Double.NaN);
      complex7.atan();
      complex10.getField();
      complex9.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.NaN, (-1457.431));
      complex0.pow(complex1);
      Complex complex2 = complex0.tanh();
      complex2.multiply(Double.NaN);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3428.3307612037);
      complex0.INF.multiply(complex0);
      complex0.INF.tan();
      Complex complex1 = complex0.INF.subtract((-1066.741242));
      Complex complex2 = new Complex((-278.1));
      Complex complex3 = complex2.acos();
      complex1.toString();
      Complex complex4 = complex3.divide(0.0);
      complex2.cos();
      Complex complex5 = complex3.tan();
      complex4.add((-278.1));
      Complex complex6 = complex5.conjugate();
      Object object0 = new Object();
      complex6.equals(complex5);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2363.722403, (-1415.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide(2363.722403);
      Complex complex3 = new Complex((-1415.0), 2363.722403);
      complex3.cosh();
      Complex complex4 = complex1.sqrt();
      complex1.divide(complex4);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex5.divide(complex1);
      complex7.log();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.reciprocal();
      complex0.conjugate();
      complex9.asin();
      complex3.cos();
      complex1.reciprocal();
      complex4.I.exp();
      complex0.sqrt();
      complex2.log();
      Complex complex10 = Complex.INF;
      complex6.tanh();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2762.1, 2762.1);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.I;
      complex2.divide((-1415.0));
      Complex complex3 = complex2.cosh();
      complex0.sqrt();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex1.conjugate();
      complex1.reciprocal();
      Complex complex7 = complex3.divide(complex2);
      Complex complex8 = Complex.ONE;
      complex5.reciprocal();
      complex4.conjugate();
      Complex complex9 = complex1.asin();
      complex6.cos();
      complex2.reciprocal();
      complex7.sqrt();
      complex9.log();
      Complex complex10 = Complex.INF;
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(388131.0218782916, (-275.03605544689));
      Complex complex2 = complex1.ONE.acos();
      complex1.ONE.tan();
      Complex complex3 = complex2.INF.pow(complex0);
      complex3.ONE.getArgument();
      complex1.INF.add((-1631.086));
      Complex complex4 = complex0.subtract(complex1);
      complex4.ZERO.asin();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.exp();
      complex5.equals("");
      Complex complex7 = complex5.INF.atan();
      complex5.ONE.subtract(0.0);
      complex1.getField();
      complex6.sin();
      complex2.acos();
      complex7.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2056.7109695));
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex1.cos();
      Complex complex3 = complex2.subtract(complex0);
      complex3.multiply(1.2574668958946027E-256);
      Complex complex4 = complex1.INF.negate();
      complex0.getField();
      Complex complex5 = complex2.log();
      complex0.pow((-1.0));
      complex5.NaN.multiply(7);
      Complex complex6 = complex1.divide((-2056.7109695));
      complex2.cos();
      Complex.valueOf((-2056.7109695), (-2056.7109695));
      complex5.pow((-2056.7109695));
      complex4.subtract((-2056.7109695));
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.NaN.asin();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.I.cosh();
      Complex complex2 = complex0.sqrt();
      complex0.divide(complex2);
      Complex complex3 = Complex.valueOf(0.0, (-2056.7109695));
      Complex complex4 = complex3.reciprocal();
      complex4.divide(complex3);
      Complex.valueOf((-2056.7109695), 0.0);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, (-2056.7109695));
      complex6.asin();
      Complex complex7 = Complex.valueOf(4.25381215703092E7);
      Complex complex8 = complex7.reciprocal();
      complex8.ONE.add(complex2);
      complex3.log();
      complex5.createComplex(1183.0099721, (-2056.7109695));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1066.741242));
      Complex complex1 = complex0.createComplex(3187.562186655268, 0.053244516253471375);
      complex1.conjugate();
      complex0.pow(complex1);
      Complex complex2 = complex0.atan();
      complex2.asin();
      Complex complex3 = Complex.I;
      complex3.sin();
      complex2.nthRoot(17);
      complex2.createComplex(0.0, (-1315.0764169));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.INF;
      double double0 = 1.5707963267948966;
      Complex complex3 = new Complex(1.5707963267948966, 6.716441526213986E-8);
      complex2.divide(complex3);
      Complex.valueOf(1.5707963267948966, (-1.4300075619643524E-298));
      complex1.reciprocal();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex3.divide(complex0);
      complex1.reciprocal();
      complex0.divide(complex5);
      complex3.log();
      Complex.valueOf(0.0, (-1976.3884197543816));
      complex4.reciprocal();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex4.reciprocal();
      complex7.sqrt();
      complex4.log();
      Complex complex8 = Complex.valueOf((-3.128894928199484E-290));
      Complex complex9 = complex8.createComplex((-1445.1515197935607), Double.POSITIVE_INFINITY);
      complex9.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.46117573976516724);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.subtract(1809.93108457881);
      Complex complex3 = Complex.I;
      complex3.asin();
      complex3.negate();
      complex0.cos();
      complex1.getArgument();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex0.toString();
      complex1.tan();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.multiply(complex0);
      complex0.tan();
      Complex complex4 = complex3.subtract(836.8341);
      Complex complex5 = new Complex((-278.1));
      Complex complex6 = complex1.acos();
      Complex complex7 = complex2.add(836.8341);
      Complex complex8 = complex7.subtract(complex1);
      complex8.getArgument();
      complex7.abs();
      complex4.createComplex(1.0, 6.10626893063691E-8);
      complex6.isNaN();
      Complex complex9 = Complex.valueOf(Double.NaN);
      Complex complex10 = complex6.multiply(1829.9);
      complex2.tanh();
      Complex complex11 = complex4.divide(complex9);
      complex10.getArgument();
      complex10.divide(complex7);
      complex6.multiply(complex11);
      complex8.reciprocal();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1415.0), (-1415.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide((-2346.974472));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.divide(complex2);
      complex1.INF.conjugate();
      Complex complex6 = complex5.reciprocal();
      complex4.divide(complex6);
      Complex complex7 = complex2.log();
      complex2.reciprocal();
      complex0.conjugate();
      Complex complex8 = complex4.asin();
      complex8.INF.cos();
      Complex complex9 = complex7.reciprocal();
      complex2.sqrt();
      complex9.log();
      Complex complex10 = Complex.INF;
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      complex0.abs();
      complex1.multiply(416);
      Complex complex2 = Complex.NaN;
      complex2.readResolve();
      Complex complex3 = complex1.pow(Double.NaN);
      complex3.divide(Double.NaN);
      Complex complex4 = complex0.multiply(1723);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.multiply(195);
      Complex complex3 = complex0.ZERO.multiply(995);
      Complex complex4 = complex1.INF.add((-1141.83));
      Complex complex5 = complex1.log();
      Complex complex6 = complex1.INF.createComplex(195, 195);
      complex6.I.tanh();
      Complex complex7 = complex3.subtract(complex0);
      complex7.INF.cos();
      complex5.sinh();
      Complex complex8 = complex5.divide(complex4);
      complex2.toString();
      Complex complex9 = complex8.reciprocal();
      complex5.asin();
      Complex.valueOf((-1141.83));
      complex9.getField();
      complex0.add((-1141.83));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1415.0));
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.pow((-1415.0));
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex0.multiply(1030);
      Complex complex6 = complex3.tanh();
      Complex complex7 = Complex.I;
      complex4.toString();
      Complex complex8 = Complex.INF;
      complex6.add(0.6921701431274414);
      complex5.conjugate();
      Object object0 = new Object();
      Complex complex9 = new Complex(0.0, 1);
      complex6.equals(complex9);
      Complex complex10 = new Complex(6.283185307179586, 0.6921701431274414);
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(105.81939, 105.81939);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.divide(0.002362489607961038);
      complex2.cosh();
      Complex complex4 = complex3.sqrt();
      complex4.divide(complex0);
      Complex complex5 = Complex.valueOf(0.002362489607961038, 2.364032654734428E-7);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = new Complex(1.7650169203544438E51, 105.81939);
      complex6.divide(complex7);
      complex1.log();
      Complex complex8 = complex5.reciprocal();
      complex1.conjugate();
      Complex complex9 = Complex.NaN;
      complex9.asin();
      complex8.reciprocal();
      complex2.sqrt();
      Complex complex10 = Complex.ONE;
      complex10.log();
      complex7.createComplex(0.002362489607961038, 2.364032654734428E-7);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.NaN.asin();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.sqrt();
      complex0.divide(complex3);
      Complex complex4 = Complex.valueOf(0.0, (-2056.7109695));
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.divide(complex4);
      Complex complex7 = Complex.valueOf((-2056.7109695), 0.0);
      Complex complex8 = complex5.reciprocal();
      complex1.conjugate();
      complex7.asin();
      complex8.reciprocal();
      complex2.sqrt();
      complex6.log();
      complex1.createComplex((-2056.7109695), 2588.3235053);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(105.81939, 105.81939);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.add(105.81939);
      Complex complex3 = (Complex)complex2.ONE.readResolve();
      Complex complex4 = Complex.valueOf((-1.1564717694090882E-280), (-1.0));
      complex4.acos();
      Complex.valueOf((double) 1, (-1502.8149506585955));
      Complex complex5 = Complex.ZERO;
      complex5.hashCode();
      complex5.log();
      complex3.sin();
      complex2.nthRoot(1);
      // Undeclared exception!
      complex3.nthRoot(981305269);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.NaN, (-1457.431));
      complex0.pow(complex1);
      Complex complex2 = complex0.tanh();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-855.306744351), Double.NaN);
      Complex complex1 = complex0.I.log();
      complex1.INF.conjugate();
      Complex complex2 = complex0.INF.cos();
      complex2.I.toString();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex.valueOf(1.3574569976673652E-8);
      complex0.tan();
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex2.add((-278.1));
      Complex complex7 = complex1.subtract(complex0);
      complex6.getArgument();
      complex1.abs();
      Complex complex8 = complex1.createComplex(0.0, (-23.8138879427258));
      complex1.isNaN();
      Complex complex9 = Complex.valueOf(3.141592653589793);
      complex5.multiply(2667.394593);
      complex2.tanh();
      complex1.divide(complex8);
      complex9.getArgument();
      complex2.divide(complex5);
      Complex complex10 = complex3.multiply(complex8);
      complex7.reciprocal();
      complex4.abs();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex3.ONE.reciprocal();
      complex1.I.hashCode();
      complex2.INF.reciprocal();
      complex0.I.pow(0.0);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.INF.multiply(1);
      complex6.ONE.tanh();
      Complex complex7 = Complex.I;
      complex0.toString();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.add(0.0);
      complex9.conjugate();
      Object object0 = new Object();
      complex2.equals(complex3);
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3428.3307612037);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.reciprocal();
      complex0.hashCode();
      complex0.reciprocal();
      Complex complex4 = complex0.pow(3635.9994);
      complex2.divide(complex1);
      complex4.multiply(729);
      complex1.tanh();
      Complex complex5 = Complex.INF;
      complex5.tanh();
      complex0.toString();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.add((double) 1);
      complex1.conjugate();
      complex3.equals(complex6);
      Complex complex8 = Complex.NaN;
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      complex0.cos();
      Complex complex2 = complex0.reciprocal();
      complex0.hashCode();
      complex2.asin();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.sinh();
      complex3.cos();
      complex4.getArgument();
      Complex complex5 = complex3.divide((-1906.046315038));
      Complex complex6 = new Complex((-1906.046315038), (-1906.046315038));
      complex6.toString();
      complex6.tan();
      complex2.abs();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.acos();
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.subtract(complex1);
      complex4.getArgument();
      complex4.abs();
      Complex complex7 = complex5.createComplex(0.7350525871447157, 2.3129435388181763E-280);
      complex1.isNaN();
      Complex complex8 = Complex.valueOf(0.0);
      complex7.NaN.acos();
      complex0.multiply(2.3129435388181763E-280);
      Complex complex9 = complex2.tanh();
      complex7.divide(complex2);
      complex2.getArgument();
      complex6.divide(complex9);
      complex4.multiply(complex2);
      complex8.reciprocal();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.ZERO.multiply(1592.9623513169195);
      complex1.I.getField();
      complex2.ZERO.exp();
      complex0.isInfinite();
      Complex complex3 = new Complex(5.786924728012465, 859.659610758632);
      complex3.nthRoot(1204);
      complex1.createComplex(859.659610758632, 1592.9623513169195);
      complex2.getReal();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.atan();
      complex2.getField();
      Complex complex6 = Complex.NaN;
      complex6.subtract(594.8913);
      complex5.multiply(4357);
      Complex complex7 = Complex.I;
      complex7.reciprocal();
      Complex complex8 = Complex.ZERO;
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(105.81939, 105.81939);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.add(105.81939);
      Complex complex3 = (Complex)complex2.ONE.readResolve();
      Complex complex4 = Complex.valueOf((-1.1564717694090882E-280), (-1.0));
      complex4.acos();
      complex4.multiply(416);
      complex0.readResolve();
      Complex complex5 = new Complex(416, 269.645103922);
      complex5.pow((double) 416);
      complex3.add(complex2);
      complex3.multiply(1167);
      complex2.sqrt1z();
      complex1.toString();
      Complex complex6 = (Complex)complex3.readResolve();
      complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1982.8619266952055));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ZERO.sin();
      complex1.ONE.exp();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.NaN.subtract(complex0);
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex5.NaN.divide(complex3);
      Complex complex8 = Complex.valueOf((-1099.361), (-0.9999989438751922));
      complex8.ONE.acos();
      complex7.readResolve();
      complex2.conjugate();
      Complex complex9 = complex2.subtract(583.166);
      complex9.INF.divide(3053.345);
      Complex.valueOf(2547.678);
      complex0.getArgument();
      Complex complex10 = Complex.I;
      Complex complex11 = complex4.divide(complex10);
      complex3.add(complex10);
      Complex complex12 = Complex.NaN;
      complex10.ZERO.divide(complex12);
      complex0.exp();
      complex5.add(complex11);
      complex0.tan();
      Complex complex13 = complex6.sqrt();
      complex13.ZERO.toString();
      try { 
        complex4.nthRoot((-2317));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,317
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1129.6), (-1129.6));
      complex0.NaN.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.pow(Double.NaN);
      complex2.I.toString();
      complex0.INF.divide((-1129.6));
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex1.createComplex((-1129.6), (-1129.6));
      complex1.ONE.atan();
      complex5.getField();
      complex2.add(complex4);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.ZERO.cos();
      complex3.ONE.reciprocal();
      complex1.I.hashCode();
      Complex complex4 = complex2.INF.reciprocal();
      complex0.I.pow(0.0);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.INF.multiply(1);
      complex6.ONE.tanh();
      Complex complex7 = complex1.cos();
      complex1.subtract(4520.43268);
      complex1.readResolve();
      complex2.getImaginary();
      Complex complex8 = complex2.log();
      complex8.equals(complex7);
      complex8.divide(complex3);
      complex4.hashCode();
      complex3.isInfinite();
      Complex complex9 = new Complex(1);
      complex9.getImaginary();
      Complex complex10 = Complex.I;
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3428.3307612037);
      Complex complex1 = complex0.INF.multiply(complex0);
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.INF.subtract((-1066.741242));
      Complex complex4 = new Complex((-278.1));
      Complex complex5 = complex4.acos();
      Complex complex6 = complex2.add(307.0);
      Complex complex7 = complex0.subtract(complex1);
      complex7.getArgument();
      complex3.abs();
      Complex complex8 = complex2.createComplex(0.0, (-632.208079022));
      complex4.isNaN();
      Complex complex9 = Complex.valueOf(1.5704530030491106);
      complex0.multiply(5.786924728012465);
      Complex complex10 = complex5.tanh();
      complex8.divide(complex0);
      complex9.getArgument();
      complex6.divide(complex7);
      complex6.multiply(complex10);
      complex0.reciprocal();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(105.81939, 105.81939);
      complex0.ONE.exp();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf(2171.0939081778592);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex2.sin();
      complex2.getArgument();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.sin();
      complex9.pow(complex6);
      complex7.pow((-0.1329245713979144));
      Object object0 = new Object();
      complex4.equals((Object) null);
      complex5.multiply(2171.0939081778592);
      complex2.nthRoot(1741);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(105.81939, 105.81939);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.add(105.81939);
      Complex complex3 = (Complex)complex2.ONE.readResolve();
      Complex complex4 = Complex.valueOf((-1.1564717694090882E-280), (-1.0));
      Complex complex5 = complex4.acos();
      complex0.nthRoot(1203);
      Complex complex6 = complex3.createComplex(1592.9623513169195, (-1.1564717694090882E-280));
      complex6.getReal();
      Complex complex7 = Complex.I;
      complex7.atan();
      complex5.getField();
      Complex complex8 = Complex.NaN;
      complex8.subtract((double) 1);
      Complex complex9 = complex3.multiply((-2448));
      complex7.reciprocal();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.ZERO.cos();
      complex3.ONE.reciprocal();
      complex1.I.hashCode();
      complex2.INF.reciprocal();
      complex0.I.pow(0.0);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.INF.multiply(1);
      complex5.ONE.tanh();
      Complex complex6 = complex3.tanh();
      complex0.toString();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.add(0.0);
      complex8.conjugate();
      complex3.equals(complex0);
      Complex complex9 = Complex.NaN;
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1376.123024);
      complex0.toString();
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.sqrt();
      complex1.divide(complex0);
      complex0.ONE.pow(2037.3081749209614);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex1.pow(complex0);
      complex0.isNaN();
      complex0.atan();
      complex5.add((-1487.87597));
      Complex complex6 = Complex.valueOf(1376.123024, 2912.7025817);
      Complex complex7 = complex6.reciprocal();
      complex7.NaN.nthRoot(501);
      complex1.hashCode();
      complex4.multiply(0.0);
      complex2.readResolve();
      Complex complex8 = Complex.NaN;
      complex7.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.cosh();
      complex3.sqrt();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex4.log();
      Complex complex8 = complex6.pow(complex4);
      complex7.isNaN();
      complex8.tanh();
      complex4.toString();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex7.add((-1603.368));
      complex10.conjugate();
      Object object0 = new Object();
      complex8.equals(object0);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.multiply(1807.0215);
      Complex complex3 = complex0.ZERO.divide(complex2);
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex0.conjugate();
      complex6.ONE.cosh();
      Complex complex7 = new Complex(0.0, 0.0);
      complex2.INF.multiply(complex0);
      Complex complex8 = Complex.valueOf(937.9185299309);
      complex8.NaN.reciprocal();
      complex0.toString();
      complex0.cos();
      complex7.subtract(2.0);
      complex7.add(2768.0);
      complex1.reciprocal();
      complex4.hashCode();
      complex1.multiply(0.0);
      Complex complex9 = Complex.ONE;
      complex9.readResolve();
      complex5.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ZERO.add(2912.7025817);
      complex2.acos();
      Complex complex3 = complex2.I.multiply(complex0);
      complex3.tan();
      Complex complex4 = complex0.ZERO.multiply(1592.9623513169195);
      complex1.I.getField();
      complex0.isInfinite();
      Complex complex5 = Complex.valueOf(1520.0322946489366, 1592.9623513169195);
      complex1.hashCode();
      Complex complex6 = complex5.log();
      complex5.INF.sin();
      complex4.nthRoot(7);
      complex6.hashCode();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1210.94906));
      Complex.valueOf((-1210.94906));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.subtract((-1012.9340462697519));
      Complex complex3 = complex2.NaN.createComplex(0.0, 2965.898752121);
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex4.ONE.acos();
      complex2.createComplex(2.3019011105282883E103, (-1210.94906));
      complex5.isNaN();
      Complex complex6 = Complex.valueOf(2.3019011105282883E103);
      Complex complex7 = complex3.multiply(6.283185307179586);
      complex1.tanh();
      Complex complex8 = complex3.divide(complex6);
      complex8.getArgument();
      Complex complex9 = complex2.divide(complex0);
      Complex complex10 = complex7.multiply(complex9);
      complex0.reciprocal();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(5035.0, 5035.0);
      Complex complex3 = complex2.I.multiply(5035.0);
      complex0.ONE.toString();
      complex0.getField();
      Complex complex4 = complex1.log();
      complex4.equals(complex1);
      Complex complex5 = complex4.subtract(5035.0);
      complex1.getImaginary();
      complex2.INF.acos();
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex2.sqrt1z();
      complex7.ONE.nthRoot(1351);
      Complex complex8 = complex4.reciprocal();
      complex8.getField();
      complex5.getImaginary();
      Complex complex9 = complex5.atan();
      complex9.ONE.negate();
      Complex complex10 = complex3.multiply((-1980));
      Complex complex11 = complex3.add(complex10);
      Complex complex12 = complex11.ONE.add(complex10);
      Complex complex13 = complex0.tanh();
      complex13.I.conjugate();
      complex12.subtract(complex13);
      Complex complex14 = complex11.exp();
      Complex complex15 = complex0.acos();
      complex10.multiply(0.14179790019989014);
      complex12.negate();
      complex7.getReal();
      Complex complex16 = complex14.multiply(complex15);
      complex16.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1210.94906));
      Complex.valueOf((-1210.94906));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.subtract((-1012.9340462697519));
      complex2.NaN.createComplex(0.0, 2965.898752121);
      Complex complex3 = complex2.I.sin();
      complex3.ONE.acos();
      complex3.sin();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.sinh();
      complex5.ZERO.tanh();
      complex5.INF.divide(complex0);
      complex1.atan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex1.I.subtract((-265.479701));
      complex1.NaN.abs();
      Complex complex4 = complex0.INF.createComplex(Double.NaN, Double.NaN);
      complex4.ZERO.acos();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ZERO.tanh();
      complex6.NaN.toString();
      complex5.ZERO.getArgument();
      complex0.sqrt();
      complex5.NaN.toString();
      Complex complex7 = complex0.NaN.tanh();
      Complex complex8 = complex7.divide(complex2);
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex0.asin();
      complex10.ZERO.tanh();
      complex0.readResolve();
      complex5.equals(complex0);
      Complex complex11 = complex6.add((-265.479701));
      complex11.I.cos();
      complex3.createComplex((-265.479701), 4610.24805767547);
      Complex complex12 = complex3.cosh();
      Complex complex13 = complex12.multiply(0.0);
      complex9.isInfinite();
      complex8.add(complex13);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(2403.0);
      Complex complex2 = complex0.INF.sqrt1z();
      complex2.INF.atan();
      complex1.multiply(2403.0);
      complex0.toString();
      Complex.valueOf(2403.0, 118.3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-3192.0), (-350.957595));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.valueOf(6.007922084557054E-9, 1181.06808425268);
      Complex complex3 = complex2.reciprocal();
      complex3.ONE.sinh();
      Complex.valueOf((-350.957595), 0.0);
      complex3.ZERO.sqrt();
      complex0.I.createComplex(0.0, (-39.586));
      Complex complex4 = complex0.ONE.pow(complex2);
      complex4.ZERO.divide(complex0);
      Complex complex5 = complex0.acos();
      Complex.valueOf(2663.75558, 4314.07);
      complex0.INF.toString();
      complex5.hashCode();
      Complex complex6 = complex5.subtract((-1.915204563140137E-9));
      complex6.NaN.toString();
      complex6.INF.createComplex(0.0, 1181.06808425268);
      complex2.pow(complex0);
      complex4.sqrt1z();
      complex6.getReal();
      complex4.negate();
      complex0.add(complex1);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1376.123024);
      complex0.toString();
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.sqrt();
      complex1.divide(complex0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.subtract(complex2);
      complex3.ONE.log();
      Complex complex4 = complex1.pow(complex0);
      complex0.isNaN();
      Complex complex5 = complex4.tanh();
      complex5.NaN.toString();
      Complex complex6 = Complex.INF;
      complex6.add(1376.123024);
      complex6.ZERO.conjugate();
      complex1.equals(complex6);
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.sqrt();
      complex0.INF.readResolve();
      Complex complex2 = complex0.multiply(360);
      Complex complex3 = complex0.ZERO.createComplex(Double.NaN, Double.NaN);
      complex3.NaN.cos();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex2.INF.divide((double) 360);
      Complex.valueOf(1878.0);
      complex0.ZERO.readResolve();
      complex0.ZERO.hashCode();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = new Complex((-1908.42), 2.4129724502563477);
      Complex complex8 = complex6.ZERO.multiply(complex7);
      complex8.INF.atan();
      complex6.NaN.getField();
      complex6.getImaginary();
      complex0.isNaN();
      Complex.valueOf(Double.NaN);
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex9.divide((-2659.589369010539));
      Complex complex11 = complex4.tanh();
      complex9.sqrt();
      complex11.INF.getField();
      Complex complex12 = complex11.add((-1908.42));
      complex12.INF.subtract(0.0);
      complex10.isNaN();
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply((-1));
      complex1.NaN.cosh();
      complex1.INF.getArgument();
      Complex complex2 = complex1.ONE.createComplex((-2166.484078149), (-1));
      Complex complex3 = complex1.I.multiply((-1));
      complex0.subtract(0.0);
      Complex complex4 = complex1.multiply(complex0);
      complex4.I.subtract((-991.8934892));
      Complex complex5 = complex2.add(163.4);
      complex5.ONE.pow(complex0);
      Complex complex6 = complex0.cosh();
      complex5.readResolve();
      complex1.I.abs();
      complex6.NaN.negate();
      Complex complex7 = complex6.multiply(3013.84355489453);
      complex7.NaN.log();
      complex2.cos();
      complex0.ONE.conjugate();
      Complex.valueOf(0.0);
      Complex.valueOf(2444.15075722829);
      complex1.isInfinite();
      complex0.sin();
      Complex complex8 = complex6.conjugate();
      complex8.I.conjugate();
      complex3.getImaginary();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 4.430214458933614E-9;
      Complex.valueOf(4.430214458933614E-9, 4.430214458933614E-9);
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.I.cos();
      complex4.INF.asin();
      double double1 = 2103.94145394;
      Complex complex5 = Complex.valueOf(2103.94145394);
      complex5.add(complex4);
      Complex complex6 = complex3.I.createComplex(2103.94145394, 2.0);
      complex6.pow(complex4);
      double double2 = (-2888.88622616);
      Complex complex7 = complex0.add((-2888.88622616));
      complex0.abs();
      complex7.multiply(complex1);
      try { 
        complex7.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.cosh();
      Complex.valueOf((-2805.3901), 4256.969226523);
      complex0.INF.cosh();
      Complex.valueOf((-3218.3711367), (-3218.3711367));
      Complex complex2 = complex0.cosh();
      complex2.isInfinite();
      Complex complex3 = complex1.sinh();
      complex3.abs();
      complex3.ZERO.abs();
      complex2.exp();
      Complex complex4 = complex1.add((-590.0));
      complex2.exp();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3428.3307612037);
      Complex complex1 = Complex.valueOf((-1480.5697798), 0.0);
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex1.INF.subtract((-1066.741242));
      complex1.ONE.getField();
      Complex complex5 = complex3.multiply(939);
      Complex complex6 = complex0.tanh();
      complex6.ZERO.atan();
      Complex complex7 = complex2.log();
      complex5.nthRoot(939);
      complex5.isNaN();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.tan();
      complex5.pow(complex2);
      complex4.getArgument();
      complex8.acos();
      Complex complex10 = complex7.sqrt1z();
      complex9.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(831.401170023, 262.3802411);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex3.ONE.sqrt1z();
      complex5.NaN.createComplex(262.3802411, 0.0);
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.NaN.subtract(831.401170023);
      complex7.ZERO.sqrt1z();
      complex3.NaN.negate();
      Complex complex8 = complex3.NaN.cosh();
      complex3.getReal();
      Complex complex9 = complex3.sin();
      complex4.INF.multiply(1190);
      complex4.toString();
      complex2.getArgument();
      complex6.atan();
      Complex complex10 = Complex.valueOf(2956.2467292178812);
      Complex complex11 = complex10.tan();
      Complex complex12 = complex8.multiply((-4009));
      complex12.I.cos();
      complex4.readResolve();
      complex3.sinh();
      Complex complex13 = complex3.atan();
      complex13.isNaN();
      complex8.subtract(2956.2467292178812);
      Complex complex14 = complex11.pow(complex9);
      Complex.valueOf(20.0);
      complex14.getField();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-3054.0346));
      complex0.getReal();
      complex0.NaN.tan();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.NaN.log();
      complex3.ONE.log();
      Complex complex4 = complex0.subtract(693.3226099631078);
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex3.ONE.cos();
      Complex complex7 = complex5.NaN.sqrt1z();
      complex4.I.conjugate();
      complex5.NaN.cos();
      complex5.I.readResolve();
      complex7.ONE.add(640.28);
      Complex complex8 = complex4.add(complex2);
      complex4.getArgument();
      Complex.valueOf(640.28, (-3054.0346));
      Complex complex9 = complex3.add(2.2423840341717488E-9);
      complex8.abs();
      Complex complex10 = complex5.sin();
      complex10.ONE.multiply(0);
      complex6.sinh();
      complex9.negate();
      complex5.log();
      complex7.tanh();
      complex4.pow((-1972.88));
      complex7.pow(complex1);
      Complex.valueOf(3747.075744385791, 1.0333241479437797E-8);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.sqrt();
      complex0.abs();
      complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.log();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.acos();
      complex0.conjugate();
      complex3.isInfinite();
      Complex.valueOf((-3.5727227900139915E148), (-3.5727227900139915E148));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.ZERO.cos();
      complex3.ONE.reciprocal();
      complex1.I.hashCode();
      complex2.INF.reciprocal();
      complex0.I.pow(0.0);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.INF.multiply(1);
      complex5.ONE.tanh();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.add(0.0);
      Complex complex8 = complex1.reciprocal();
      complex8.hashCode();
      complex1.multiply(4101.858776124216);
      Object object0 = complex7.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4493.37719));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.I.subtract((-4493.37719));
      Complex complex3 = complex2.ZERO.asin();
      complex3.INF.negate();
      Complex complex4 = complex2.I.sinh();
      complex4.cos();
      complex0.I.getArgument();
      Complex complex5 = complex0.divide((-751.0));
      complex1.toString();
      Complex complex6 = complex5.tan();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(105.81939, 105.81939);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.I.add(105.81939);
      complex2.ONE.readResolve();
      complex0.INF.asin();
      complex0.reciprocal();
      complex0.sqrt();
      complex0.log();
      complex0.createComplex((-94.0), (-94.0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1415.0));
      Complex complex1 = complex0.log();
      complex0.abs();
      complex0.NaN.multiply(416);
      complex0.ZERO.readResolve();
      complex1.ONE.pow((-1415.0));
      Complex complex2 = complex1.multiply(1);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-1269.58811), (-1463.915984377591));
      complex0.INF.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex0.sinh();
      complex4.INF.cosh();
      Complex complex5 = complex1.NaN.createComplex(6.283185307179586, (-1.0));
      Complex complex6 = Complex.valueOf((-2479.83));
      complex3.divide(complex6);
      Complex complex7 = complex4.INF.pow((-1463.915984377591));
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.pow(complex1);
      complex9.I.multiply(0);
      complex7.sqrt();
      complex9.divide(complex5);
      Complex complex10 = complex2.subtract(complex3);
      complex10.INF.pow((-1463.915984377591));
      complex4.multiply(0.22001364827156067);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-281.8));
      Complex complex1 = complex0.ONE.subtract((-281.8));
      Complex complex2 = complex0.I.divide(0.129004567861557);
      Complex complex3 = complex2.ONE.log();
      complex2.INF.getArgument();
      complex1.INF.getArgument();
      Complex complex4 = complex1.I.atan();
      complex0.getArgument();
      complex0.atan();
      complex0.nthRoot(644);
      Complex complex5 = complex0.divide(0.0);
      complex4.NaN.getArgument();
      Complex complex6 = complex5.exp();
      complex6.NaN.cos();
      complex5.I.pow(complex1);
      complex3.NaN.toString();
      Complex complex7 = complex1.atan();
      complex5.ZERO.nthRoot(1);
      Complex complex8 = complex5.exp();
      complex1.getArgument();
      complex8.INF.getField();
      complex7.divide(complex4);
      Complex complex9 = complex3.asin();
      Complex complex10 = complex9.ONE.createComplex(Double.NaN, 1460.0);
      complex3.subtract(Double.NaN);
      complex7.atan();
      complex10.pow(1460.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1991.742));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex2.ONE.add(complex1);
      complex0.getReal();
      Complex complex4 = complex1.I.exp();
      complex1.getReal();
      complex3.multiply(0.0);
      complex4.multiply(2994);
      complex0.add(complex2);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.INF.createComplex((-260.32), 1.5070531368255615);
      complex2.I.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ZERO.hashCode();
      complex0.isNaN();
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.valueOf((-260.32));
      Complex complex6 = complex5.ONE.add((-1.5449538712332313E-8));
      complex5.NaN.subtract(complex0);
      complex5.divide(complex1);
      Complex complex7 = complex4.createComplex(0.0, 2084.2);
      complex7.getReal();
      complex6.createComplex(0.0, 2084.2);
      complex2.acos();
      complex2.multiply(complex7);
      Complex complex8 = complex5.add(complex7);
      complex8.exp();
      Complex complex9 = complex2.add(complex4);
      complex9.ZERO.atan();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.sqrt();
      complex0.getImaginary();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ONE.createComplex(0.5618454217910767, 0.0);
      complex3.NaN.atan();
      complex3.ONE.add((-20.0));
      complex1.ZERO.add((-20.0));
      complex0.nthRoot(4361);
      Complex complex4 = complex1.exp();
      Complex complex5 = Complex.NaN;
      complex4.I.add(complex5);
      Complex complex6 = complex1.acos();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.asin();
      complex8.NaN.toString();
      Complex complex9 = complex6.subtract(0.0);
      Complex complex10 = complex9.I.add(complex1);
      Complex complex11 = complex6.add(1221.877562);
      complex4.equals(complex1);
      complex7.conjugate();
      complex4.conjugate();
      Complex complex12 = complex9.conjugate();
      complex12.I.divide(complex10);
      complex11.sqrt1z();
      Complex.valueOf((-81.54242));
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      complex0.NaN.hashCode();
      Complex complex1 = complex0.reciprocal();
      complex0.readResolve();
      complex1.cos();
      Complex complex2 = complex1.sinh();
      complex2.createComplex(7.160277784358221E73, 7.160277784358221E73);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.ONE.divide(complex3);
      complex0.sinh();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex5.tanh();
      try { 
        complex6.NaN.nthRoot((-1775));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,775
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      complex1.NaN.tan();
      complex0.I.conjugate();
      complex0.asin();
      complex0.ZERO.getField();
      Complex complex2 = complex0.NaN.reciprocal();
      complex2.NaN.readResolve();
      Complex complex3 = complex2.I.exp();
      complex3.I.acos();
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex1.ONE.divide(complex4);
      complex5.INF.asin();
      complex3.ONE.hashCode();
      complex2.I.readResolve();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-894.0), 1409.2449628653733);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.log();
      complex2.ZERO.subtract((-894.0));
      complex0.ONE.add((-894.0));
      complex0.INF.abs();
      Complex.valueOf(1458.868517941661);
      complex0.getReal();
      complex0.negate();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.add(0.0);
      complex1.ONE.divide(0.0);
      complex0.isNaN();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.asin();
      complex0.INF.sqrt1z();
      complex3.ONE.cosh();
      Complex complex4 = complex1.I.sqrt1z();
      complex0.sin();
      complex1.getArgument();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.ZERO.tanh();
      complex6.NaN.sin();
      complex0.pow(complex1);
      Complex complex7 = complex6.pow(0.0);
      Object object0 = new Object();
      complex7.equals(object0);
      complex4.multiply(0.0);
      complex7.nthRoot(1741);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(2597.54, 2597.54);
      Complex complex1 = complex0.multiply((-577));
      Complex complex2 = complex1.ONE.exp();
      complex2.INF.add((-2.5857668567479893E-8));
      Complex complex3 = complex1.INF.add((-26.76802696095));
      complex3.getField();
      complex0.multiply(2597.54);
      Complex complex4 = complex3.tanh();
      complex4.divide(complex3);
      Complex complex5 = Complex.NaN;
      complex4.divide(complex5);
      Complex complex6 = complex4.reciprocal();
      complex6.I.log();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(51.996, 0.0);
      complex0.NaN.sqrt1z();
      complex0.ONE.abs();
      complex0.NaN.toString();
      Complex complex1 = complex0.sqrt();
      complex0.INF.abs();
      complex1.negate();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      complex2.getReal();
      complex1.toString();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.ONE.sinh();
      complex0.I.exp();
      Complex complex5 = complex3.sinh();
      Complex complex6 = Complex.valueOf(4703.0, Double.NaN);
      Complex complex7 = complex1.multiply((-1514));
      complex7.INF.negate();
      complex1.toString();
      Complex complex8 = complex0.ONE.atan();
      Complex complex9 = complex3.INF.tanh();
      complex0.divide(1024.020522730101);
      Complex complex10 = complex3.sqrt1z();
      complex5.getArgument();
      Complex complex11 = new Complex(4703.0);
      complex10.add(complex11);
      Complex complex12 = complex8.ZERO.pow(4703.0);
      Complex complex13 = complex8.multiply((-599));
      complex13.sqrt();
      complex3.divide(complex11);
      Complex complex14 = complex6.exp();
      complex14.add(complex6);
      complex9.multiply(complex3);
      complex9.isNaN();
      complex14.getReal();
      complex12.hashCode();
      complex14.readResolve();
      complex6.add(complex4);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ZERO.add(2912.7025817);
      complex2.I.multiply(complex0);
      Complex complex3 = complex0.ZERO.multiply(1592.9623513169195);
      complex1.I.getField();
      complex0.isInfinite();
      Complex complex4 = Complex.valueOf(1520.0322946489366, 1592.9623513169195);
      complex1.hashCode();
      Complex complex5 = complex4.log();
      complex4.INF.sin();
      complex3.nthRoot(7);
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(853.121929839);
      complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.INF.divide(complex0);
      complex0.getField();
      Complex complex4 = complex0.multiply((-1383));
      Complex complex5 = complex4.ZERO.divide(complex3);
      complex4.I.log();
      Complex complex6 = complex2.add(complex4);
      Complex complex7 = complex6.INF.tanh();
      complex7.INF.cos();
      complex4.toString();
      complex4.sqrt1z();
      complex4.exp();
      complex6.createComplex(853.121929839, 130.82059537592596);
      complex5.isNaN();
      complex3.subtract(0.0);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.691921416188566E137);
      double double0 = 2454.70531345;
      Complex complex1 = complex0.NaN.add(2454.70531345);
      Complex complex2 = Complex.valueOf(103.8858211, 2454.70531345);
      complex1.INF.pow(complex2);
      int int0 = 357;
      Complex complex3 = complex0.multiply(357);
      int int1 = (-572);
      try { 
        complex3.NaN.nthRoot((-572));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -572
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.NaN.asin();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.I.cosh();
      double double1 = (-1603.368);
      Complex complex2 = complex1.divide((-1603.368));
      complex1.INF.getField();
      complex2.getArgument();
      try { 
        complex0.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.multiply(1807.0215);
      Complex complex3 = complex0.ZERO.divide(complex2);
      Complex complex4 = complex0.ZERO.atan();
      complex4.NaN.log();
      Complex complex5 = complex0.conjugate();
      complex5.ONE.cosh();
      Complex complex6 = complex5.log();
      complex2.INF.multiply(complex0);
      Complex complex7 = Complex.valueOf(937.9185299309);
      complex7.NaN.reciprocal();
      complex0.toString();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex6.subtract(2.0);
      complex3.readResolve();
      complex3.getImaginary();
      Complex complex10 = complex9.log();
      complex10.isNaN();
      Complex complex11 = complex10.divide(complex4);
      complex9.INF.hashCode();
      complex11.isInfinite();
      complex11.getImaginary();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 3.3192593301633E-232;
      double double1 = 0.0;
      Complex complex0 = new Complex(3.3192593301633E-232, 0.0);
      complex0.ZERO.readResolve();
      complex0.ONE.hashCode();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(1.1174279267498045E-159);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.multiply(0);
      Complex complex3 = complex2.I.divide(complex0);
      complex3.I.sin();
      Complex complex4 = complex0.exp();
      complex4.isNaN();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.NaN.atan();
      complex6.INF.atan();
      Complex complex7 = complex6.ZERO.add(1239.93039);
      complex7.NaN.multiply((-1317.65534122436));
      complex7.NaN.add(complex6);
      Complex complex8 = complex4.multiply(2955.94176);
      complex8.ONE.pow(complex5);
      Complex complex9 = complex8.pow(2955.94176);
      complex4.add(2955.94176);
      Complex complex10 = complex9.multiply(complex5);
      complex1.sqrt1z();
      complex2.equals("<r=DFU9qUJ=xHI,7");
      complex1.reciprocal();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.multiply((-1526));
      Complex complex3 = complex2.I.multiply(1205);
      assertEquals(1205.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.ZERO.add(complex0);
      complex4.NaN.readResolve();
      Complex complex5 = complex0.NaN.add(0.0);
      complex0.getImaginary();
      Complex.valueOf(1.256828068633383E-7);
      complex0.readResolve();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex5.NaN.add(complex2);
      Complex complex8 = complex7.multiply(1205);
      complex1.ONE.log();
      complex6.toString();
      Complex complex9 = complex6.INF.multiply(complex5);
      Complex complex10 = complex6.reciprocal();
      Complex complex11 = complex10.INF.cos();
      Complex complex12 = complex11.INF.pow(20.0);
      List<Complex> list0 = complex1.ONE.nthRoot(326);
      assertEquals(326, list0.size());
      
      Complex complex13 = complex10.createComplex(0.0, Double.NaN);
      complex13.INF.getArgument();
      Complex complex14 = complex1.asin();
      Complex complex15 = complex14.I.cos();
      assertEquals(1.5707963267948966, complex14.getReal(), 0.01);
      assertEquals((-1.0), complex14.getImaginary(), 0.01);
      
      Complex complex16 = complex13.cosh();
      complex8.subtract((-1.0));
      assertSame(complex8, complex9);
      
      Complex complex17 = complex4.divide(complex10);
      assertSame(complex17, complex16);
      assertTrue(complex6.equals((Object)complex12));
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex15));
      assertNotSame(complex6, complex16);
      assertTrue(complex4.isInfinite());
      
      Complex complex18 = Complex.valueOf((-3480.4581205913));
      assertEquals((-3480.4581205913), complex18.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = complex3.INF.negate();
      Complex complex7 = complex4.atan();
      assertSame(complex7, complex5);
      
      Complex complex8 = complex0.divide(complex4);
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = complex0.reciprocal();
      complex3.conjugate();
      Complex complex11 = complex10.acos();
      complex6.nthRoot(1);
      complex0.createComplex(0.0, 1);
      complex9.getReal();
      Complex complex12 = complex0.atan();
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      complex0.getField();
      Complex complex13 = complex1.subtract((-319.4));
      assertTrue(complex1.equals((Object)complex12));
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex2.multiply((-15));
      Complex complex15 = complex0.reciprocal();
      assertSame(complex15, complex11);
      
      double double0 = complex4.getArgument();
      assertTrue(complex0.equals((Object)complex14));
      assertEquals(3.141592653589793, double0, 0.01);
  }
}
