/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:36:45 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1351320.9655713856, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.NaN.sinh();
      complex0.INF.getArgument();
      complex0.toString();
      complex0.nthRoot(19);
      complex0.isInfinite();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex2.asin();
      complex2.pow(0.7853981633974483);
      Complex complex6 = complex2.ONE.atan();
      complex6.INF.hashCode();
      complex4.multiply(19);
      Complex.valueOf((double) 19, 1140.225043188205);
      complex5.atan();
      Complex complex7 = complex5.tan();
      complex1.asin();
      complex7.nthRoot(19);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.log();
      complex2.sin();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.atan();
      complex2.ZERO.add((-763.29226694904));
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3.408223442335828, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(475);
      Complex complex2 = complex1.sinh();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3.685169705587367E268);
      complex0.divide(complex1);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(1181.1854, (-3780.174804844));
      Complex complex1 = complex0.ZERO.cosh();
      complex0.ZERO.getField();
      complex1.ONE.hashCode();
      Complex complex2 = complex1.INF.subtract(6.283185307179586);
      Complex complex3 = complex0.divide((-1847.687));
      Complex complex4 = complex0.sinh();
      complex1.ZERO.multiply((-4162));
      complex4.ZERO.abs();
      Complex complex5 = Complex.valueOf(6.283185307179586, 1181.1854);
      complex5.ONE.tanh();
      complex2.conjugate();
      complex0.getField();
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2447.4059, 1.5701510906219482);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.divide(2296.83486113);
      Complex complex4 = Complex.valueOf(122.7219, 2296.83486113);
      Complex complex5 = complex4.NaN.multiply((-383));
      complex0.pow(complex4);
      complex2.ZERO.add(2296.83486113);
      Complex.valueOf((double) (-383), 122.7219);
      complex5.ZERO.abs();
      complex3.add((double) (-383));
      Complex complex6 = Complex.valueOf(2447.4059);
      complex6.NaN.getField();
      complex0.acos();
      Complex complex7 = complex5.divide((double) (-383));
      complex2.I.getArgument();
      complex7.NaN.reciprocal();
      complex2.pow(complex4);
      Complex complex8 = complex1.atan();
      complex3.subtract(complex2);
      Complex.valueOf(0.0752234160900116);
      complex4.ONE.multiply((-2003.0280622896057));
      try { 
        complex8.nthRoot((-2037223039));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,037,223,039
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.I.nthRoot(743);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.I.cosh();
      complex3.INF.exp();
      complex2.log();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1648.3220671786314, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(702);
      Complex complex1 = new Complex(702, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(1672.7030158532043);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1648.3220671786314, 1648.3220671786314);
      complex0.getArgument();
      complex0.toString();
      complex0.isInfinite();
      complex0.isInfinite();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-20.0), (-59.53755343186));
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.ONE;
      complex3.asin();
      Complex complex5 = new Complex((-2218.68877529));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-20.0));
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-4066.607172999094), (-20.0));
      Complex complex3 = Complex.NaN;
      complex2.abs();
      complex1.exp();
      complex2.tan();
      complex3.add(1768.832546169787);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.14885171240776618, 0.14885171240776618);
      Complex complex1 = complex0.asin();
      complex0.add(complex1);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      complex3.INF.reciprocal();
      complex2.getArgument();
      complex0.divide(complex3);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.sin();
      Complex complex6 = new Complex(7.091500562953208E248, 1.1768108384670781E-7);
      complex6.asin();
      Complex.valueOf((-2300.682901922718));
      Complex complex7 = complex4.sin();
      complex7.INF.log();
      Complex complex8 = new Complex(20.0);
      complex8.divide(1672.7030158532043);
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex0.asin();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1648.3220671786314, (-1440.743079064));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.asin();
      complex0.INF.add(complex2);
      Complex complex3 = complex1.I.divide(complex2);
      complex3.ZERO.divide(complex2);
      complex2.INF.getArgument();
      Complex complex4 = complex2.I.divide(complex0);
      complex1.ONE.asin();
      Complex complex5 = complex1.sin();
      complex5.ONE.readResolve();
      Complex complex6 = complex2.add((-1440.743079064));
      complex6.ONE.getArgument();
      Complex.valueOf((-1440.743079064), (-4066.607172999094));
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(3065.680906573);
      Complex complex3 = complex1.ZERO.atan();
      complex3.ONE.divide(complex2);
      Complex complex4 = complex3.ZERO.multiply(0);
      Complex complex5 = complex4.ONE.pow(complex3);
      complex5.I.getField();
      complex2.I.getField();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      complex0.getArgument();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.sin();
      complex3.asin();
      Complex complex4 = complex1.sin();
      complex1.readResolve();
      Complex complex5 = Complex.I;
      complex0.getArgument();
      Complex complex6 = Complex.valueOf((-4066.607172999094), (-7.050361059209181E-9));
      complex5.cos();
      complex6.abs();
      Complex complex7 = complex0.sinh();
      Complex.valueOf(0.0, (-757.6701863484));
      complex6.exp();
      complex7.tan();
      Complex complex8 = Complex.I;
      complex2.cosh();
      complex4.reciprocal();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.NaN.sinh();
      Complex complex1 = complex0.sinh();
      complex0.getArgument();
      complex1.toString();
      complex0.nthRoot(709);
      complex0.reciprocal();
      complex1.cosh();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-2938.7313054370625));
      complex0.NaN.abs();
      complex0.ONE.createComplex(0.07731176538644191, 0.5255602598190308);
      Complex complex1 = Complex.INF;
      complex1.I.atan();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1648.3220671786314, (-1440.743079064));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex2.INF.subtract(complex1);
      complex2.sin();
      complex4.readResolve();
      complex3.add(1648.3220671786314);
      Complex complex5 = Complex.valueOf(2.6474285478041252E281);
      complex5.getArgument();
      Complex complex6 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.cos();
      complex4.abs();
      Complex.valueOf((-525.0), 142.53550453717284);
      complex6.exp();
      complex1.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.ZERO;
      complex8.multiply(Double.NaN);
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.divide(complex0);
      complex3.getArgument();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex3.sin();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.valueOf(Double.NaN, 1611.65832577961);
      complex8.sin();
      complex7.readResolve();
      complex6.add(Double.NaN);
      complex3.getArgument();
      Complex.valueOf((-4066.607172999094), (-4066.607172999094));
      complex4.cos();
      Complex complex9 = new Complex((-2881.48581108482));
      complex9.abs();
      complex5.sin();
      Complex complex10 = Complex.valueOf(2.0598974227905273, (-6.655106680680314E-8));
      complex5.exp();
      complex7.tan();
      Complex complex11 = Complex.I;
      complex5.createComplex((-4066.607172999094), 1611.65832577961);
      Complex.valueOf((-2786.015565073153));
      Complex complex12 = Complex.INF;
      complex10.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      complex0.asin();
      complex0.asin();
      complex1.add((-1189.200894525573));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-4160.8280855));
      Complex complex1 = Complex.valueOf((-4160.8280855), 3003.37);
      complex1.ONE.getArgument();
      Complex complex2 = complex1.NaN.atan();
      complex1.I.nthRoot(327);
      Complex complex3 = complex0.ONE.tan();
      complex3.getArgument();
      Complex complex4 = Complex.valueOf((-4160.8280855), (-4160.8280855));
      complex1.sqrt();
      Complex complex5 = complex0.pow(complex4);
      complex1.toString();
      Complex complex6 = complex4.acos();
      complex6.ZERO.sin();
      complex6.I.getField();
      complex6.I.getField();
      complex6.ZERO.hashCode();
      complex2.isInfinite();
      Complex complex7 = complex5.log();
      complex7.I.abs();
      Complex complex8 = complex7.NaN.sqrt();
      Object object0 = new Object();
      complex0.nthRoot(1219);
      complex0.equals(object0);
      Complex complex9 = complex4.negate();
      complex9.exp();
      complex8.abs();
      complex3.getField();
      Complex complex10 = new Complex(1937.6104502189828, 1937.6104502189828);
      complex10.getReal();
      complex8.acos();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1648.3220671786314, (-1440.743079064));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.INF.add(complex2);
      complex1.nthRoot(19);
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
      complex3.isInfinite();
      complex2.tanh();
      Complex complex4 = complex1.sin();
      complex4.asin();
      Complex complex5 = Complex.valueOf(4262.341877973192);
      Complex complex6 = complex5.sqrt1z();
      complex2.divide(complex1);
      complex0.isNaN();
      Complex.valueOf(0.48008447885513306, 1648.3220671786314);
      Complex complex7 = new Complex(1648.3220671786314);
      complex6.divide(complex7);
      complex1.hashCode();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf((-773.0));
      Complex complex2 = complex1.pow(0.0);
      complex1.exp();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.sinh();
      complex2.getArgument();
      complex2.multiply(39.9875039086895);
      complex3.hashCode();
      complex3.subtract(39.9875039086895);
      complex1.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      complex1.getReal();
      complex0.hashCode();
      complex1.getArgument();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.cosh();
      complex3.acos();
      Complex complex4 = complex2.acos();
      complex4.conjugate();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.multiply(1156.6);
      Complex complex8 = Complex.I;
      Complex complex9 = complex0.add(1242.0097346);
      Object object0 = complex9.readResolve();
      complex3.equals(object0);
      complex7.INF.atan();
      complex5.sinh();
      complex7.abs();
      Complex complex10 = Complex.I;
      complex10.exp();
      Complex complex11 = Complex.ZERO;
      complex11.tan();
      complex6.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex12 = Complex.INF;
      complex11.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1305);
      Complex complex2 = complex1.ONE.exp();
      complex2.ZERO.pow((double) 1305);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.I.multiply(1305);
      complex0.isNaN();
      complex0.abs();
      Complex complex5 = complex1.cosh();
      complex3.multiply(complex0);
      complex5.abs();
      complex4.isInfinite();
      complex5.readResolve();
      Complex complex6 = new Complex(527.276286807);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.NaN.sinh();
      complex0.INF.getArgument();
      complex0.toString();
      complex0.nthRoot(19);
      complex0.equals((Object) null);
      complex0.isInfinite();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sin();
      complex2.asin();
      Complex.valueOf(0.48008447885513306);
      complex1.sqrt1z();
      Complex complex4 = complex3.divide(complex1);
      complex4.isNaN();
      Complex complex5 = Complex.valueOf(0.48008447885513306, (-2152.361795));
      Complex complex6 = complex0.divide(complex5);
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-4160.8280855));
      Complex complex1 = Complex.valueOf((-4160.8280855), 3003.37);
      complex1.ONE.getArgument();
      Complex complex2 = complex1.NaN.atan();
      complex1.I.nthRoot(327);
      Complex complex3 = complex0.ONE.tan();
      complex3.getArgument();
      Complex complex4 = Complex.valueOf((-4160.8280855), 447.2652018);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex0.pow(complex4);
      complex1.toString();
      Complex complex7 = complex4.acos();
      complex7.ZERO.sin();
      complex7.I.getField();
      complex7.I.getField();
      complex7.ZERO.hashCode();
      complex2.isInfinite();
      Complex complex8 = complex6.log();
      complex8.I.abs();
      Complex complex9 = complex8.NaN.sqrt();
      complex5.cosh();
      complex5.multiply((-2535));
      Complex complex10 = new Complex(0.0);
      complex10.isNaN();
      complex4.asin();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(4.7782149589194885E246, 4.7782149589194885E246);
      Complex complex1 = complex0.sinh();
      complex1.getArgument();
      complex0.toString();
      Complex complex2 = complex1.pow(0.7853981633974483);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.tan();
      complex4.readResolve();
      Complex complex6 = Complex.NaN;
      complex6.sinh();
      complex2.conjugate();
      complex5.conjugate();
      complex0.getField();
      complex0.getReal();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.acos();
      complex2.multiply(0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.asin();
      complex0.toString();
      complex0.isInfinite();
      try { 
        complex0.nthRoot((-1518500250));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,518,500,250
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1648.3220671786314, (-1440.743079064));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex2.INF.subtract(complex1);
      Complex complex5 = complex1.I.divide(complex2);
      complex5.INF.conjugate();
      complex2.INF.getArgument();
      Complex complex6 = complex2.I.divide(complex4);
      complex5.ZERO.sin();
      Complex complex7 = complex1.ONE.asin();
      complex2.I.readResolve();
      Complex complex8 = complex1.sin();
      complex8.ONE.readResolve();
      Complex complex9 = complex2.add((-1440.743079064));
      complex9.ONE.getArgument();
      Complex.valueOf((-35.38), (-4066.607172999094));
      complex8.ZERO.cosh();
      complex9.INF.multiply(complex7);
      complex5.abs();
      complex3.sqrt();
      complex8.sinh();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex6.divide(complex10);
      complex8.negate();
      complex11.ZERO.getField();
      complex11.pow(3818.5788);
      Complex complex12 = complex4.multiply(0.0);
      complex12.toString();
      complex9.tan();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.subtract(5138.439949619585);
      complex2.ZERO.sin();
      Complex complex3 = complex1.ONE.cosh();
      complex0.INF.getField();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex0.tan();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.pow(complex3);
      complex1.createComplex(2.414213562373095, 5138.439949619585);
      complex2.nthRoot(17);
      complex5.sqrt1z();
      complex3.subtract(Double.NaN);
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.subtract(3.3212950284273017E149);
      complex2.INF.readResolve();
      complex0.I.hashCode();
      Complex complex3 = complex0.subtract(complex1);
      Complex.valueOf((-4364.28641), (-4364.28641));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.multiply((-1151));
      complex5.ONE.multiply((-4364.28641));
      Complex complex6 = complex4.conjugate();
      complex4.add((-4364.28641));
      complex6.I.tanh();
      Complex complex7 = complex4.divide(complex0);
      complex7.exp();
      complex3.hashCode();
      complex4.conjugate();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(1517.961520731916, 1517.961520731916);
      Complex complex2 = Complex.I;
      complex2.sqrt();
      Complex complex3 = Complex.valueOf(1517.961520731916);
      complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.add(complex0);
      complex2.add(complex4);
      complex3.cosh();
      Complex complex5 = complex0.log();
      complex0.getReal();
      complex4.hashCode();
      complex3.getArgument();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex1.conjugate();
      complex7.tanh();
      complex8.multiply(1.5707963267948966);
      Complex complex10 = new Complex(0.0);
      complex10.multiply(1.5707963267948966);
      Complex complex11 = Complex.I;
      Complex complex12 = complex7.add(1.5707963267948966);
      Complex complex13 = Complex.valueOf(1.646945656830212E-4, 0.0);
      complex8.equals(complex13);
      Complex complex14 = complex11.sinh();
      Complex complex15 = complex9.cos();
      complex6.abs();
      Complex complex16 = complex5.exp();
      complex14.tan();
      complex3.sin();
      complex16.asin();
      Complex complex17 = Complex.valueOf(0.0);
      complex15.sqrt1z();
      complex1.divide(complex6);
      complex12.isNaN();
      complex17.divide(complex11);
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex(1517.961520731916, 1517.961520731916);
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex3.divide(complex5);
      complex3.getField();
      complex3.getField();
      Complex complex7 = complex6.subtract(complex5);
      complex6.multiply(complex7);
      Complex complex8 = Complex.valueOf(1517.961520731916, 6.837671137556327E30);
      Complex complex9 = complex8.acos();
      Complex complex10 = complex1.cos();
      complex10.sqrt1z();
      complex8.pow(complex9);
      complex5.sin();
      Complex complex11 = Complex.valueOf(6.837671137556327E30, 1644.3577336727);
      complex10.cos();
      Complex complex12 = new Complex((-1440.743079064));
      complex12.reciprocal();
      complex10.multiply(1333.36);
      Complex complex13 = complex9.asin();
      complex6.abs();
      complex12.cosh();
      complex2.exp();
      complex11.toString();
      Complex complex14 = Complex.ONE;
      complex14.hashCode();
      complex13.log();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2.881416869529271E-112);
      Complex complex1 = new Complex(2.881416869529271E-112);
      complex0.INF.subtract(Double.NaN);
      Complex complex2 = complex0.I.sqrt();
      complex2.ZERO.log();
      Complex complex3 = complex2.subtract((-20.0));
      Complex complex4 = complex1.ZERO.add(complex1);
      Complex complex5 = complex4.divide(complex1);
      complex1.NaN.getField();
      complex0.NaN.subtract(Double.NaN);
      Complex complex6 = complex5.I.subtract(complex1);
      Complex complex7 = complex6.NaN.multiply(complex5);
      Complex complex8 = complex0.acos();
      complex8.ZERO.cos();
      complex4.ONE.sqrt1z();
      Complex complex9 = complex5.pow(complex7);
      complex6.sin();
      Complex.valueOf(2.881416869529271E-112, (-20.0));
      Complex complex10 = complex8.cos();
      Complex complex11 = complex3.reciprocal();
      complex7.multiply(Double.NaN);
      Complex complex12 = complex11.asin();
      Complex complex13 = Complex.INF;
      complex13.abs();
      complex9.cosh();
      complex7.exp();
      Complex complex14 = new Complex(3.79440972484841E-8);
      complex14.toString();
      complex0.hashCode();
      complex9.log();
      complex12.asin();
      Complex complex15 = new Complex(Double.NaN, 1834.484);
      complex10.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.add(3003.37);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.conjugate();
      complex1.isNaN();
      Complex complex4 = complex1.createComplex(5.82825404854514E-8, 0.3723714351654053);
      complex2.conjugate();
      complex4.isInfinite();
      complex4.multiply(complex2);
      complex0.pow(3003.37);
      Complex complex5 = complex3.tan();
      complex4.asin();
      complex0.tan();
      complex4.readResolve();
      Complex complex6 = new Complex((-1841.0));
      complex6.sinh();
      Complex complex7 = complex5.conjugate();
      complex1.conjugate();
      complex7.getField();
      complex0.getReal();
      complex1.acos();
      complex5.multiply(18);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(1517.961520731916);
      complex1.ZERO.createComplex(1517.961520731916, 1517.961520731916);
      complex1.NaN.sqrt1z();
      Complex complex2 = Complex.valueOf((-343.386401898237));
      complex2.tanh();
      complex0.pow(1517.961520731916);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1305);
      Complex complex2 = complex1.ONE.exp();
      complex2.ZERO.pow((double) 1305);
      Complex complex3 = complex2.reciprocal();
      complex3.I.multiply(1305);
      complex0.isNaN();
      complex0.abs();
      Complex complex4 = complex1.ONE.negate();
      complex1.getReal();
      complex0.divide((double) 1305);
      complex1.getField();
      complex0.isNaN();
      complex1.pow(0.0);
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(4.7782149589194885E246, 4.7782149589194885E246);
      Complex complex1 = new Complex((-141.61112131));
      complex1.I.getField();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ONE.subtract(complex1);
      Complex complex6 = complex4.I.divide((-141.61112131));
      Complex complex7 = complex1.asin();
      complex4.INF.getArgument();
      complex1.NaN.getArgument();
      complex4.getField();
      Complex complex8 = complex6.subtract(complex3);
      Complex complex9 = complex2.multiply(complex1);
      complex6.acos();
      Complex complex10 = complex8.cos();
      Complex complex11 = complex2.sqrt1z();
      complex5.pow(complex7);
      complex9.sin();
      Complex complex12 = Complex.valueOf(2.0, Double.NaN);
      complex8.cos();
      complex4.reciprocal();
      Complex complex13 = complex12.multiply((-2007.9973));
      complex3.asin();
      complex6.abs();
      Complex complex14 = complex13.cosh();
      Complex complex15 = complex11.exp();
      complex14.toString();
      complex15.hashCode();
      complex2.log();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.NaN.sinh();
      complex0.INF.getArgument();
      complex1.ONE.toString();
      Complex complex2 = complex1.pow(20.0);
      complex0.tan();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.tan();
      complex4.readResolve();
      complex2.sinh();
      complex2.conjugate();
      Complex complex5 = complex2.conjugate();
      complex3.getField();
      complex2.getReal();
      complex0.acos();
      complex5.multiply((-948));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.add(0.3723714351654053);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex2.conjugate();
      complex4.isNaN();
      complex1.ONE.createComplex(0.3723714351654053, 0.3723714351654053);
      Complex complex6 = complex1.conjugate();
      complex2.isInfinite();
      complex4.multiply(complex3);
      complex2.equals(complex5);
      complex0.isInfinite();
      complex6.tanh();
      complex5.createComplex(0.0, 0.0);
      Complex.valueOf(0.3723714351654053);
      Complex complex7 = new Complex(3.848544860465368E-8);
      complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.NaN.sinh();
      complex0.INF.getArgument();
      complex1.ONE.toString();
      complex0.nthRoot(19);
      complex0.equals((Object) null);
      complex0.isInfinite();
      complex0.tanh();
      Complex complex2 = complex0.createComplex(0.0, 19);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.exp();
      complex2.abs();
      complex4.conjugate();
      complex1.acos();
      complex3.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.pow(complex0);
      complex1.toString();
      Complex complex5 = complex1.acos();
      complex1.sin();
      complex0.getField();
      Complex complex6 = Complex.INF;
      complex6.getField();
      complex5.hashCode();
      complex1.isInfinite();
      complex4.log();
      complex3.abs();
      Complex complex7 = complex2.sqrt();
      Object object0 = new Object();
      Complex complex8 = Complex.ONE;
      Object object1 = new Object();
      complex8.equals(object1);
      complex7.negate();
      complex2.exp();
      Complex complex9 = Complex.ZERO;
      complex9.abs();
      complex6.conjugate();
      complex6.acos();
      Complex complex10 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex11 = Complex.ZERO;
      complex10.divide(complex11);
      complex1.pow(94.0406);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1162.4654685500923), 2.0);
      complex0.hashCode();
      Complex complex1 = complex0.negate();
      complex1.NaN.subtract(0.0);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = Complex.valueOf((-1997.833));
      Complex complex4 = complex2.ONE.cosh();
      complex1.nthRoot(393);
      Complex complex5 = complex1.acos();
      complex5.ONE.pow(282.0);
      Complex complex6 = complex0.pow((-1162.4654685500923));
      complex6.ONE.hashCode();
      Complex complex7 = complex3.ONE.conjugate();
      complex3.NaN.multiply((-20.0));
      Complex complex8 = complex6.I.negate();
      Complex complex9 = complex3.divide(0.0);
      complex0.I.readResolve();
      complex9.NaN.getField();
      complex3.multiply(complex1);
      complex6.sinh();
      complex2.nthRoot(393);
      complex3.readResolve();
      complex4.cos();
      Complex.valueOf((-1847.29627342245));
      complex3.hashCode();
      complex7.exp();
      complex8.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex0.NaN.nthRoot(1598);
      Complex complex3 = complex0.divide(2031.8396);
      complex1.nthRoot(894);
      complex1.readResolve();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.I.pow(complex4);
      complex3.negate();
      Complex complex6 = complex1.negate();
      complex3.divide((double) 894);
      complex5.readResolve();
      Complex complex7 = complex3.add(complex6);
      Complex complex8 = new Complex(894, 5123.920084533933);
      complex8.I.asin();
      complex2.equals(complex8);
      complex7.divide((-1.1895963756343625E-7));
      Complex complex9 = Complex.I;
      complex6.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.add((-3561.448439521003));
      complex1.ZERO.getField();
      Complex complex2 = complex0.ZERO.createComplex((-3561.448439521003), (-3561.448439521003));
      complex0.I.hashCode();
      complex1.INF.readResolve();
      Complex complex3 = Complex.valueOf((-3561.448439521003));
      complex3.tan();
      complex0.equals(complex3);
      Complex complex4 = complex1.ONE.reciprocal();
      complex4.ONE.toString();
      complex3.getImaginary();
      Complex complex5 = complex0.pow((-3561.448439521003));
      complex5.INF.abs();
      Complex complex6 = complex5.NaN.cos();
      complex6.ZERO.sqrt1z();
      complex1.isNaN();
      complex5.readResolve();
      complex5.getArgument();
      complex1.getArgument();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.INF.divide((-3736.68064612053));
      complex3.NaN.getArgument();
      Complex complex4 = complex2.ONE.divide(Double.NaN);
      complex4.INF.getArgument();
      complex4.ONE.log();
      Complex complex5 = complex1.INF.createComplex(Double.NaN, 633.67);
      Complex complex6 = complex0.conjugate();
      complex6.NaN.sqrt1z();
      complex6.I.toString();
      Complex complex7 = complex0.cos();
      complex7.getArgument();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex0.pow(complex7);
      complex9.I.sqrt1z();
      complex9.INF.add(0.0);
      complex9.INF.cos();
      Complex complex10 = complex8.sin();
      Complex complex11 = complex10.INF.conjugate();
      complex11.ZERO.tan();
      Complex complex12 = complex10.sinh();
      complex10.I.pow(0.0);
      complex10.INF.tan();
      Complex complex13 = complex1.sinh();
      complex12.createComplex(Double.NaN, Double.NaN);
      complex5.createComplex(633.67, (-3276.866455523948));
      Complex complex14 = complex3.pow(407.215807196661);
      complex14.subtract(3460.6);
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(4.7782149589194885E246, 4.7782149589194885E246);
      Complex complex1 = new Complex((-141.61112131));
      complex1.I.getField();
      complex0.ONE.tan();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt();
      complex3.ONE.subtract(complex1);
      complex3.I.divide((-141.61112131));
      complex1.asin();
      complex3.INF.getArgument();
      complex1.NaN.getArgument();
      int int0 = (-3311);
      try { 
        complex2.nthRoot((-3311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,311
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-563.0), (-563.0));
      Complex complex1 = complex0.sqrt1z();
      complex1.NaN.conjugate();
      Complex complex2 = complex1.ONE.multiply(1);
      complex2.I.sqrt1z();
      complex1.INF.exp();
      complex2.ONE.tanh();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex1.abs();
      complex2.getArgument();
      complex0.getImaginary();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sin();
      complex1.ONE.getArgument();
      complex0.multiply((-1067));
      complex1.atan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.asin();
      complex0.ZERO.sin();
      complex1.exp();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.sqrt1z();
      complex5.getField();
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2010.06652796019), (-2010.06652796019));
      complex0.getReal();
      Complex.valueOf(20.0, 0.0);
      complex0.reciprocal();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1047391891479492, 1.1047391891479492);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.INF.pow(complex2);
      complex5.NaN.exp();
      complex5.ZERO.divide(complex2);
      complex0.ZERO.sqrt();
      Complex complex6 = complex0.add(complex3);
      complex4.abs();
      complex4.equals(complex6);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.ONE.log();
      complex8.INF.toString();
      complex1.log();
      try { 
        complex6.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(0.0);
      complex1.add(0.0);
      complex0.getArgument();
      Complex complex2 = Complex.valueOf(0.0);
      complex0.NaN.pow(Double.NaN);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.NaN.multiply(1);
      complex4.I.log();
      complex0.getReal();
      Complex complex5 = complex0.sin();
      Complex.valueOf(Double.NaN);
      complex1.add(Double.NaN);
      complex5.isInfinite();
      complex1.getField();
      complex3.getImaginary();
      Complex.valueOf((double) 1);
      Complex.valueOf((-575.85), 0.0);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.subtract(0.0);
      complex3.INF.abs();
      Complex complex4 = complex3.exp();
      complex4.I.log();
      complex1.sqrt1z();
      complex4.log();
      Complex complex5 = Complex.valueOf((-943.1250631186853), 0.0);
      complex5.I.getArgument();
      complex3.getReal();
      complex2.pow(0.0);
      complex4.isNaN();
      complex3.isInfinite();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex2.log();
      complex0.pow(0.0);
      complex4.multiply(0.0);
      Complex complex8 = complex7.exp();
      complex8.abs();
      complex8.add(complex1);
      complex3.tanh();
      complex6.add(0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.log();
      complex3.ONE.abs();
      complex3.add(complex0);
      complex0.getField();
      complex0.createComplex(1.0, 0.0);
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.subtract(3.3212950284273017E149);
      complex2.INF.readResolve();
      complex0.I.hashCode();
      Complex complex3 = complex0.subtract(complex1);
      Complex.valueOf((-4364.28641), (-4364.28641));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.multiply((-1151));
      complex5.ONE.multiply((-4364.28641));
      Complex complex6 = complex4.conjugate();
      complex4.add((-4364.28641));
      complex6.I.tanh();
      Complex complex7 = complex4.divide(complex0);
      complex7.exp();
      complex3.hashCode();
      complex4.conjugate();
      complex7.subtract(0.0);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(2113.1, (-177.705634534894));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.NaN.add((-177.705634534894));
      complex0.exp();
      Complex complex3 = complex1.subtract((-177.705634534894));
      Complex complex4 = complex0.createComplex(2113.1, 2113.1);
      Complex complex5 = complex4.I.multiply(2113.1);
      complex3.ONE.subtract(2113.1);
      Complex complex6 = complex1.acos();
      Complex.valueOf((-177.705634534894));
      complex2.INF.asin();
      Complex complex7 = complex6.divide(2113.1);
      complex2.isInfinite();
      complex4.asin();
      Complex complex8 = complex7.sqrt1z();
      complex8.ONE.sinh();
      Complex complex9 = complex8.ONE.pow(complex3);
      complex5.asin();
      complex4.getImaginary();
      Complex complex10 = complex9.multiply(complex0);
      Complex.valueOf(2113.1, 2.0);
      complex5.negate();
      complex10.multiply(1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.negate();
      complex1.ZERO.toString();
      complex0.getImaginary();
      complex0.ONE.divide(0.0);
      complex0.createComplex(1588.904, 0.09228715300559998);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(3609.22459406605, 259.749926);
      complex2.ZERO.readResolve();
      complex1.ZERO.subtract(complex0);
      complex0.sqrt1z();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.sqrt1z();
      complex5.multiply(complex2);
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(3065.680906573);
      Complex complex3 = complex1.ZERO.atan();
      complex3.ONE.divide(complex2);
      Complex complex4 = complex3.ZERO.multiply(0);
      Complex complex5 = complex4.ONE.pow(complex3);
      complex5.I.getField();
      complex2.I.getField();
      Complex complex6 = complex0.add(complex1);
      complex2.getImaginary();
      complex6.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1213.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.subtract(1213.0);
      Complex complex3 = complex1.asin();
      complex3.NaN.abs();
      Complex complex4 = complex0.INF.add(complex1);
      complex0.atan();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      Complex complex6 = complex0.I.asin();
      Complex complex7 = complex5.subtract((-2593.41));
      complex6.NaN.createComplex(1213.0, 1213.0);
      Complex complex8 = complex5.ONE.divide((-2593.41));
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = complex4.multiply(1213.0);
      complex10.I.readResolve();
      complex10.NaN.conjugate();
      complex10.getField();
      Complex complex11 = complex4.acos();
      complex4.getField();
      Complex.valueOf((-3991.370456794708), 0.0);
      complex4.createComplex(0.0, (-671.0));
      complex9.subtract((-585.557125691));
      Complex complex12 = complex11.subtract((-2111.261592291));
      complex12.NaN.add(1213.0);
      complex5.sqrt();
      complex1.toString();
      complex7.add(complex1);
      complex11.sin();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      complex1.I.subtract(complex0);
      try { 
        complex0.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.createComplex(1517.961520731916, 1303.182547);
      Complex complex1 = complex0.sqrt();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2.881416869529271E-112);
      Complex complex1 = new Complex(2.881416869529271E-112);
      Complex complex2 = complex0.add(complex1);
      complex0.INF.subtract(Double.NaN);
      Complex complex3 = complex0.I.sqrt();
      complex3.ZERO.log();
      Complex complex4 = complex3.subtract((-20.0));
      Complex complex5 = complex2.ZERO.add(complex1);
      Complex complex6 = complex5.divide(complex1);
      complex6.I.getField();
      complex2.NaN.getField();
      Complex complex7 = complex6.I.subtract(complex1);
      Complex complex8 = complex7.NaN.multiply(complex6);
      Complex complex9 = complex2.acos();
      complex9.ZERO.cos();
      complex5.ONE.sqrt1z();
      Complex complex10 = complex6.pow(complex8);
      complex8.NaN.sin();
      Complex.valueOf(2.881416869529271E-112, 2.881416869529271E-112);
      Complex complex11 = complex0.cos();
      complex2.reciprocal();
      complex11.ZERO.multiply(2.881416869529271E-112);
      complex8.asin();
      complex4.abs();
      Complex complex12 = complex11.cosh();
      complex12.I.exp();
      complex10.toString();
      complex8.hashCode();
      complex10.log();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = Complex.NaN;
      complex1.NaN.cos();
      complex0.add(complex2);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.NaN.divide(complex1);
      complex3.multiply((-2195.546190767344));
      Complex complex5 = complex3.negate();
      complex5.I.sqrt();
      complex0.isNaN();
      complex2.readResolve();
      complex3.readResolve();
      Complex complex6 = complex2.atan();
      complex6.ONE.tan();
      Complex complex7 = complex2.asin();
      complex3.getArgument();
      complex5.readResolve();
      complex1.add(complex7);
      complex7.getImaginary();
      complex4.getReal();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-2135.496), (-2135.496));
      complex0.hashCode();
      Complex complex1 = complex0.I.reciprocal();
      complex0.getArgument();
      complex0.isNaN();
      complex1.NaN.subtract((-2135.496));
      Complex complex2 = complex0.createComplex((-2.356194490192345), (-2.356194490192345));
      complex2.ONE.sin();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.reciprocal();
      complex1.hashCode();
      complex3.exp();
      complex4.tan();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-4160.8280855));
      Complex complex1 = Complex.valueOf((-4160.8280855), 3003.37);
      complex1.ONE.getArgument();
      Complex complex2 = complex1.NaN.atan();
      complex1.I.nthRoot(327);
      Complex complex3 = complex0.ONE.tan();
      complex3.getArgument();
      Complex complex4 = Complex.valueOf((-4160.8280855), 447.2652018);
      complex1.sqrt();
      Complex complex5 = complex0.pow(complex4);
      complex1.toString();
      Complex complex6 = complex4.acos();
      complex6.ZERO.sin();
      complex6.I.getField();
      complex6.I.getField();
      complex6.ZERO.hashCode();
      complex2.isInfinite();
      Complex complex7 = complex5.log();
      complex7.I.abs();
      Complex complex8 = complex7.NaN.sqrt();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex9 = complex4.negate();
      Complex complex10 = complex9.exp();
      complex8.abs();
      complex10.conjugate();
      complex10.acos();
      complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      complex0.sin();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.I.add((-1.036103313062145E-7));
      Complex complex3 = complex2.ZERO.tanh();
      complex3.NaN.pow(0.0);
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex1.cos();
      complex5.add(complex1);
      complex5.atan();
      Complex complex6 = complex4.ZERO.sqrt();
      complex4.getField();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex8.ZERO.createComplex(77.2618, (-1.036103313062145E-7));
      Complex complex10 = complex9.NaN.multiply(complex5);
      complex10.INF.sin();
      complex4.hashCode();
      complex0.reciprocal();
      complex4.toString();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.287792682647705);
      Complex complex1 = complex0.multiply(3007);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex1.acos();
      complex3.tanh();
      complex2.toString();
      complex1.multiply(3007);
      complex2.multiply(2731);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.15860503911972046, 0.15860503911972046);
      Complex complex1 = complex0.I.multiply((-573.13275));
      complex0.readResolve();
      complex1.ONE.abs();
      Complex complex2 = complex0.reciprocal();
      complex1.getReal();
      complex1.nthRoot(2429);
      Complex complex3 = complex2.add(complex1);
      complex1.exp();
      complex0.I.abs();
      complex3.multiply((-514));
      complex3.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.add(0.3723714351654053);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex2.conjugate();
      complex4.isNaN();
      Complex complex6 = complex1.ONE.createComplex(0.3723714351654053, 0.3723714351654053);
      Complex complex7 = complex1.conjugate();
      complex2.isInfinite();
      Complex complex8 = complex4.multiply(complex3);
      Complex complex9 = complex5.pow(0.3723714351654053);
      Complex complex10 = complex8.tan();
      complex8.ZERO.asin();
      complex10.NaN.tan();
      complex10.NaN.readResolve();
      complex7.sinh();
      complex0.conjugate();
      complex6.I.conjugate();
      complex7.getField();
      complex9.getReal();
      complex6.acos();
      complex6.multiply(950);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(743.39074);
      Complex complex1 = Complex.valueOf(743.39074);
      complex1.ZERO.multiply(1191);
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.ONE.add(complex1);
      complex4.ONE.createComplex(3815.5042983713397, 543.72049);
      complex2.ONE.getField();
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex5.INF.cos();
      complex0.ONE.getField();
      Complex complex7 = complex0.negate();
      Complex complex8 = Complex.I;
      complex7.pow(complex8);
      Complex complex9 = complex2.reciprocal();
      complex9.I.getField();
      complex6.toString();
      complex3.pow(0.0);
      complex5.exp();
      Complex complex10 = new Complex((-859.235272517), 0.0);
      complex0.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.add((-1350.8211636));
      complex0.isNaN();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.subtract(complex2);
      complex2.hashCode();
      Complex complex5 = complex4.log();
      complex4.multiply(complex5);
      complex5.INF.divide((-1425.2));
      Complex complex6 = Complex.valueOf((-1425.2));
      Complex complex7 = complex1.multiply(complex3);
      complex7.INF.atan();
      complex7.hashCode();
      // Undeclared exception!
      complex6.nthRoot(6470);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex0.ONE.add(complex1);
      complex1.ZERO.add(complex2);
      Complex complex4 = complex0.ONE.cosh();
      complex4.NaN.log();
      complex0.getReal();
      complex0.hashCode();
      complex3.getArgument();
      Complex complex5 = complex0.INF.cosh();
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex6.I.acos();
      Complex complex8 = complex1.conjugate();
      complex8.NaN.tanh();
      Complex complex9 = complex3.multiply(Double.NaN);
      Complex complex10 = complex1.INF.multiply((-1721.89));
      Complex complex11 = Complex.I;
      complex11.ZERO.add(0.0);
      complex1.equals(complex11);
      Complex complex12 = complex9.sinh();
      complex12.cos();
      complex4.abs();
      complex4.exp();
      complex7.tan();
      Complex complex13 = complex7.sin();
      complex13.ONE.asin();
      Complex complex14 = Complex.valueOf(0.0);
      complex14.ONE.sqrt1z();
      complex1.divide(complex10);
      complex2.isNaN();
      complex13.divide(complex3);
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.negate();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.INF.pow(0.0);
      Complex complex4 = complex3.I.subtract(complex0);
      Complex complex5 = complex2.NaN.add((-125.3445));
      complex5.INF.toString();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex2.multiply(907);
      Complex complex10 = complex6.sqrt();
      complex0.atan();
      Complex complex11 = complex9.conjugate();
      complex11.tanh();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex9.cos();
      complex11.NaN.add(complex12);
      complex11.toString();
      complex1.divide((-1536.3403172330898));
      complex8.tan();
      complex6.divide((-1536.3403172330898));
      complex3.conjugate();
      Complex.valueOf((-125.3445));
      complex0.conjugate();
      Complex complex14 = complex10.reciprocal();
      complex7.exp();
      complex11.sin();
      complex12.log();
      complex13.cos();
      complex4.conjugate();
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex1.INF.abs();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2253.8));
      Complex complex4 = complex3.I.multiply(739);
      complex3.ONE.cosh();
      Complex complex5 = complex0.add(2114.15329544);
      complex3.NaN.abs();
      Complex complex6 = complex5.multiply(1027);
      complex5.INF.reciprocal();
      complex6.ZERO.sqrt1z();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex0.reciprocal();
      complex0.createComplex(4.232889602759328E-304, 4.232889602759328E-304);
      complex4.NaN.hashCode();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex5.multiply(complex9);
      complex8.toString();
      complex9.hashCode();
      complex7.readResolve();
      Complex complex11 = complex5.reciprocal();
      complex11.I.reciprocal();
      complex10.isInfinite();
      complex7.sqrt1z();
      Complex complex12 = complex2.sqrt1z();
      complex10.acos();
      complex1.hashCode();
      complex4.multiply((-2596));
      complex7.abs();
      complex1.divide((-2253.8));
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1707.498772784354));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex3.ZERO.sin();
      complex3.I.abs();
      Complex complex5 = complex3.INF.reciprocal();
      assertTrue(complex5.equals((Object)complex4));
      
      complex3.NaN.acos();
      complex3.NaN.subtract(complex0);
      complex1.I.divide(complex0);
      Complex complex6 = complex0.NaN.tanh();
      complex6.getArgument();
      complex0.ZERO.hashCode();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex7.cos();
      complex8.NaN.cosh();
      Complex complex10 = complex8.add(complex7);
      Complex complex11 = complex8.ZERO.reciprocal();
      complex8.getImaginary();
      complex7.getReal();
      complex8.INF.add(complex9);
      Complex complex12 = complex7.negate();
      complex6.getImaginary();
      Complex complex13 = complex8.exp();
      Complex complex14 = complex13.ONE.subtract((-1707.498772784354));
      assertEquals(1708.498772784354, complex14.getReal(), 0.01);
      
      complex6.nthRoot(994);
      Complex complex15 = complex2.NaN.sin();
      assertSame(complex15, complex6);
      assertSame(complex15, complex11);
      assertFalse(complex15.equals((Object)complex3));
      
      Complex complex16 = complex9.pow(0.0);
      complex16.ONE.conjugate();
      complex12.getField();
      Complex complex17 = complex16.atan();
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex17.getReal(), 0.01);
      
      Object object0 = complex16.readResolve();
      complex2.equals(object0);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      
      Complex complex18 = complex13.tan();
      assertEquals(0.716068632739189, complex18.getReal(), 0.01);
      assertEquals(0.84992740797457, complex18.getImaginary(), 0.01);
      
      double double0 = complex10.getReal();
      assertFalse(complex7.equals((Object)complex12));
      assertEquals(41.844013531589965, complex10.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2902.0));
      Complex complex1 = Complex.valueOf(0.0, (-879.4444263082));
      Complex complex2 = complex1.ZERO.sqrt1z();
      List<Complex> list0 = complex2.ZERO.nthRoot(7);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(list0.contains(complex2));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(7, list0.size());
      
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.divide((-49.0));
      complex1.isNaN();
      complex4.getImaginary();
      Complex.valueOf(54.47169085598759, (-1337.49892721839));
      complex1.readResolve();
      Complex complex6 = complex5.cos();
      assertEquals(1.661411833808516, complex6.getReal(), 0.01);
      
      double double0 = complex5.getArgument();
      assertEquals((-1.717921576360301), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.NaN.sinh();
      complex0.INF.getArgument();
      String string0 = complex1.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(19);
      assertEquals(19, list0.size());
      
      complex0.equals((Object) null);
      complex0.isInfinite();
      Complex complex2 = complex0.tanh();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(6.331009331992412E-18, complex2.getImaginary(), 0.01);
      
      complex0.createComplex(0.0, 19);
      Complex complex3 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.equals(complex3);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      assertFalse(complex2.isNaN());
      
      Complex complex3 = complex0.ZERO.tanh();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.equals((Object)complex1));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex0.acos();
      assertSame(complex5, complex4);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(4469.825710368783, 2274.75);
      Complex complex1 = Complex.valueOf(1245.7508049);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertFalse(complex1.isInfinite());
      assertEquals(1245.7508049, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }
}
