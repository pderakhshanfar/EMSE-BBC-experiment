/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:36:36 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(977.5, (-2.7760330633220195E260));
      complex0.ONE.toString();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(complex0);
      complex0.createComplex(7.204525142098426E-261, 7.204525142098426E-261);
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      complex2.tan();
      complex1.log();
      complex0.abs();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2310.1879486), (-2310.1879486));
      Complex complex1 = new Complex((-2310.1879486), (-1800105.6521308273));
      complex1.reciprocal();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.createComplex((-1800105.6521308273), Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf((-2310.1879486), (-2310.1879486));
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-2310.1879486), (-2310.1879486));
      Complex complex1 = new Complex((-2310.1879486), 250.2256219642534);
      complex0.reciprocal();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.createComplex(1168.62235239043, (-20.0));
      Complex.valueOf((-1800105.6521308273), 1938.5);
      complex3.tan();
      Complex complex4 = Complex.valueOf(1117.8, (-20.0));
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex.valueOf((-2699.41), Double.NaN);
      Complex complex0 = Complex.ZERO;
      complex0.tan();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1090.76025223), (-1090.76025223));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.atan();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), 6.283185307179586);
      Complex complex2 = Complex.I;
      complex2.conjugate();
      Complex.valueOf((-1.0));
      complex1.tanh();
      Complex complex3 = Complex.ONE;
      complex2.sqrt1z();
      Complex complex4 = new Complex((-2636.0));
      complex0.sin();
      complex3.reciprocal();
      Complex complex5 = Complex.INF;
      complex1.createComplex(6.283185307179586, 6.283185307179586);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-290.0));
      complex5.subtract((-375.6833198922));
      Complex complex6 = complex3.tan();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 2.0);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf((-643.8260719422));
      complex2.nthRoot(474);
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.ONE;
      complex5.sqrt1z();
      Complex complex6 = new Complex(0.013388602139990807);
      Complex complex7 = complex3.sin();
      complex7.reciprocal();
      Complex complex8 = complex6.subtract((-2200.39717426053));
      complex3.createComplex((-2636.0), (-2636.0));
      Complex complex9 = complex1.acos();
      Complex complex10 = complex8.subtract(72.42271434);
      complex9.tan();
      complex4.sqrt();
      complex5.acos();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = Complex.valueOf((-1.0), (-1.0));
      complex1.sqrt1z();
      Complex complex3 = new Complex((-1.0));
      complex2.sin();
      Complex complex4 = complex0.reciprocal();
      complex4.subtract((-681.6881905196519));
      complex0.createComplex(Double.POSITIVE_INFINITY, (-1.0));
      Complex complex5 = complex1.acos();
      Complex complex6 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      complex6.subtract(1.01);
      complex5.tan();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
      Complex complex1 = new Complex((-1314.486034507));
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1861.036), Double.NaN);
      Complex complex2 = complex1.conjugate();
      Complex.valueOf((-85.3428041));
      complex0.nthRoot(512);
      complex2.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = new Complex((-2310.1879486));
      complex5.sin();
      complex0.reciprocal();
      complex3.subtract((double) 512);
      Complex complex6 = complex0.createComplex((-677.97), Double.POSITIVE_INFINITY);
      complex2.acos();
      complex5.subtract((-55.997391048));
      complex6.tan();
      complex2.acos();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1352.7812517709096);
      Complex complex1 = new Complex(1352.7812517709096);
      Complex complex2 = complex1.tan();
      complex2.pow(complex0);
      Complex complex3 = new Complex(1352.7812517709096, 3588.998997223);
      Complex.valueOf(27.938);
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(27.938, 27.938);
      complex5.negate();
      complex4.readResolve();
      complex5.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1531.46, 1531.46);
      complex0.ZERO.acos();
      Complex complex1 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      complex1.ONE.reciprocal();
      Complex complex2 = complex0.atan();
      complex2.ZERO.atan();
      complex0.readResolve();
      Complex complex3 = complex0.multiply((-1609.3712471));
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.acos();
      complex4.I.cosh();
      Complex complex5 = Complex.valueOf(1531.46, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.createComplex((-1609.3712471), (-1609.3712471));
      complex3.pow(Double.POSITIVE_INFINITY);
      complex5.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.getArgument();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-701.306933), (-2310.1879486));
      complex0.conjugate();
      Complex complex2 = Complex.valueOf((-1314.486034507));
      complex1.nthRoot(512);
      complex0.tanh();
      Complex complex3 = Complex.ONE;
      complex3.sqrt1z();
      Complex complex4 = new Complex((-2636.0));
      Complex complex5 = complex4.sin();
      complex3.reciprocal();
      Complex complex6 = complex2.createComplex((-1800105.6521308273), Double.POSITIVE_INFINITY);
      complex6.multiply(512);
      complex6.acos();
      complex5.subtract((-701.306933));
      complex6.tan();
      Complex.valueOf(5.914537964556077E-8);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.tan();
      Complex.valueOf((-4001.9402604569627), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(953.6614);
      Complex complex1 = new Complex(953.6614);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = Complex.valueOf(953.6614, 953.6614);
      Complex complex5 = complex4.subtract(953.6614);
      complex5.conjugate();
      Complex complex6 = Complex.valueOf((-823.0));
      Complex complex7 = complex5.INF.sqrt();
      complex6.NaN.getArgument();
      Complex complex8 = complex5.multiply(complex1);
      complex8.pow(953.6614);
      Complex complex9 = Complex.valueOf(953.6614);
      complex8.toString();
      complex6.getField();
      complex3.ZERO.sqrt();
      complex1.ONE.subtract(3.4082234423358275);
      complex3.nthRoot(837);
      complex9.log();
      complex1.atan();
      complex2.cosh();
      complex0.NaN.multiply(3.4082234423358275);
      Complex complex10 = complex5.add(Double.NaN);
      Complex complex11 = complex10.NaN.exp();
      complex10.I.cosh();
      complex1.asin();
      complex0.subtract(2249.39858865);
      Complex complex12 = complex7.sinh();
      Complex complex13 = complex12.conjugate();
      complex13.log();
      complex12.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-701.306933), (-2310.1879486));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf((-1314.486034507));
      complex1.nthRoot(512);
      complex0.tanh();
      Complex complex4 = Complex.ONE;
      complex4.sqrt1z();
      Complex complex5 = new Complex((-2636.0));
      Complex complex6 = complex5.sin();
      complex4.reciprocal();
      Complex complex7 = complex3.createComplex((-1800105.6521308273), Double.POSITIVE_INFINITY);
      complex7.acos();
      complex6.subtract((-701.306933));
      Complex complex8 = complex7.tan();
      Complex.valueOf(5.914537964556077E-8);
      complex8.subtract(complex2);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.subtract(-0.0);
      complex1.I.acos();
      complex1.nthRoot(520);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.275183961165903E212, (-1341.680532813541));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.sin();
      complex2.reciprocal();
      Complex complex4 = complex1.createComplex((-1341.680532813541), 491.2559451491);
      complex4.INF.createComplex(5.275183961165903E212, (-20.0));
      Complex complex5 = Complex.valueOf(491.2559451491, (-1341.680532813541));
      complex5.acos();
      complex0.subtract(5.275183961165903E212);
      Complex complex6 = complex1.tan();
      complex6.negate();
      complex3.nthRoot(3867);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1149.0743928293207, (-4024.2));
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.readResolve();
      complex0.abs();
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.NaN.divide(Double.NaN);
      Complex complex2 = complex0.reciprocal();
      complex2.exp();
      Complex complex3 = complex2.sqrt();
      complex3.toString();
      complex2.ONE.divide(0.8813735870195428);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.INF.add(Double.NaN);
      complex5.ONE.log();
      complex4.ZERO.sqrt1z();
      Complex.valueOf(577.3013749804707);
      complex5.INF.tanh();
      complex2.readResolve();
      complex0.INF.add((-447.3969793));
      complex2.multiply(37);
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.abs();
      complex0.tanh();
      Complex complex1 = Complex.valueOf(3617.356974775475, Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex((-238.780402313));
      Complex complex4 = complex3.sqrt();
      complex0.isNaN();
      complex4.log();
      Complex complex5 = Complex.valueOf((-1341.680532813541));
      Complex complex6 = complex5.pow((-2106.09621679));
      Complex complex7 = complex1.tan();
      complex6.subtract(complex2);
      complex5.INF.tanh();
      complex6.nthRoot(1);
      complex6.tanh();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex7.reciprocal();
      Complex complex12 = complex10.createComplex((-238.780402313), 2006.594686607);
      complex12.NaN.sqrt();
      complex11.acos();
      Complex complex13 = complex1.subtract(1.5800256583859738);
      complex2.tan();
      try { 
        complex13.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 2.356194490192345);
      Complex complex1 = new Complex(1.0, 1.0);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex0.tan();
      double double0 = (-238.780402313);
      Complex complex2 = new Complex((-238.780402313));
      Complex complex3 = complex2.sqrt();
      complex0.isNaN();
      complex3.log();
      complex1.pow((-1650.26219619167));
      complex1.tan();
      complex0.conjugate();
      int int0 = 558;
      Complex complex4 = Complex.ONE;
      int int1 = 1073741824;
      // Undeclared exception!
      complex4.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex0.sqrt();
      complex1.isNaN();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf((-1341.680532813541));
      Complex complex4 = complex1.pow((-1596.0));
      Complex complex5 = complex0.tan();
      Complex complex6 = new Complex((-1847.2618597202754), (-1341.680532813541));
      complex6.subtract(complex4);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = Complex.valueOf((-2106.09621679));
      complex8.nthRoot(558);
      complex4.tanh();
      Complex complex9 = Complex.ONE;
      complex2.sqrt1z();
      complex6.sin();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex7.createComplex(3326.142808560207, 256.7758559);
      complex1.acos();
      complex3.subtract((-1341.680532813541));
      Complex complex12 = Complex.ONE;
      complex12.tan();
      complex10.subtract(complex0);
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      complex1.NaN.subtract(6.283185307179586);
      Complex complex2 = complex0.atan();
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      complex1.sin();
      complex0.readResolve();
      Complex complex3 = complex0.divide(1887.270288);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex3.divide(complex0);
      complex0.getField();
      complex3.abs();
      complex6.cos();
      complex4.atan();
      complex1.equals(complex5);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.atan();
      complex1.ONE.toString();
      Complex complex2 = complex1.INF.atan();
      complex0.getField();
      Complex complex3 = complex0.sinh();
      complex3.readResolve();
      complex2.divide(complex0);
      complex1.ONE.acos();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.subtract((-1304.71733942565));
      complex4.ZERO.createComplex(Double.POSITIVE_INFINITY, (-452.73519));
      complex1.toString();
      complex4.sin();
      complex1.multiply(complex5);
      complex2.multiply(0.05401459854014599);
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.log();
      complex4.toString();
      complex4.getArgument();
      complex0.hashCode();
      complex2.isInfinite();
      complex2.isNaN();
      complex3.log();
      Complex complex5 = complex0.pow(Double.NaN);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex5.subtract(complex6);
      Complex complex8 = Complex.valueOf(934.0234795103721, 1385.300329342278);
      complex8.conjugate();
      complex6.nthRoot(558);
      complex8.tanh();
      complex2.sqrt1z();
      Complex complex9 = complex1.sin();
      complex3.reciprocal();
      complex3.createComplex(934.0234795103721, 1385.300329342278);
      complex3.acos();
      complex7.subtract(1385.300329342278);
      complex8.tan();
      Complex complex10 = new Complex(37.0, 0.0);
      complex10.subtract(complex4);
      complex9.readResolve();
      complex4.nthRoot(558);
      complex3.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.multiply(Double.NaN);
      complex0.I.readResolve();
      complex3.getField();
      try { 
        complex1.nthRoot((-1159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,159
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.log();
      complex1.toString();
      complex1.getArgument();
      complex3.hashCode();
      complex0.isInfinite();
      complex3.isNaN();
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.pow(3341.0);
      Complex complex6 = new Complex(0.41421356237309515);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex5.subtract(complex1);
      complex8.NaN.readResolve();
      complex3.conjugate();
      complex4.nthRoot(613);
      complex5.tanh();
      complex2.sqrt1z();
      complex3.sin();
      complex8.reciprocal();
      Complex complex9 = complex5.createComplex((-0.5403023058681398), 2.9507744508973654E-8);
      complex9.acos();
      Complex complex10 = complex9.subtract((-2.356194490192345));
      complex10.tan();
      complex7.subtract(complex6);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.ONE.multiply((-2497.29));
      Complex complex4 = complex1.ONE.multiply(37);
      Complex complex5 = (Complex)complex3.I.readResolve();
      Complex complex6 = complex4.cosh();
      complex5.multiply((-209));
      complex4.asin();
      Complex complex7 = complex2.add(complex1);
      Complex complex8 = complex7.cos();
      complex7.NaN.log();
      complex1.pow(complex0);
      Complex complex9 = complex6.acos();
      complex8.cosh();
      Complex complex10 = complex2.pow(complex9);
      complex4.sqrt();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-805.747067));
      Complex complex2 = complex0.multiply(complex1);
      complex2.hashCode();
      complex1.tanh();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(2630.586741);
      complex0.INF.conjugate();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.negate();
      complex1.createComplex(2630.586741, 2630.586741);
      Complex complex4 = complex2.I.sqrt();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex5.pow(complex3);
      complex1.equals("T");
      Complex complex7 = complex0.negate();
      complex7.I.add(complex4);
      complex7.sqrt1z();
      Complex complex8 = complex2.sqrt();
      complex8.readResolve();
      Complex complex9 = new Complex((-1011.648339665));
      complex4.equals(complex9);
      complex8.add(complex6);
      complex0.toString();
      try { 
        complex9.nthRoot((-1201));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,201
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.log();
      Complex complex1 = complex0.ZERO.tan();
      complex1.ZERO.tan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.INF;
      Complex.valueOf(3071.8);
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-388.9073719082681), (-1125.14187873572));
      Complex complex2 = complex1.multiply(complex0);
      complex2.exp();
      Complex.valueOf((-388.9073719082681), (-2119.2570833));
      complex1.multiply(2024);
      complex0.tanh();
      complex0.getImaginary();
      complex1.subtract((-444.9356746409798));
      complex2.cos();
      complex1.getArgument();
      Complex complex3 = complex1.divide((double) 2024);
      complex1.getReal();
      Complex complex4 = Complex.ONE;
      complex4.hashCode();
      Complex complex5 = complex0.divide(complex1);
      complex5.add(complex4);
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.I.divide(2696.43998);
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex1.ZERO.tan();
      complex0.ONE.abs();
      complex4.INF.pow(2696.43998);
      complex0.tanh();
      Complex complex5 = Complex.NaN;
      complex0.equals(complex5);
      complex3.reciprocal();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.I.divide(2696.43998);
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex1.ZERO.tan();
      complex0.ONE.abs();
      complex4.INF.pow(2696.43998);
      Complex complex5 = complex0.sqrt1z();
      complex5.toString();
      Complex complex6 = new Complex(20.0);
      complex6.reciprocal();
      complex4.acos();
      complex6.abs();
      Complex complex7 = new Complex(1.8609623908996582);
      complex7.createComplex(2696.43998, (-2912.9149));
      complex1.toString();
      complex3.asin();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.tan();
      complex2.ZERO.multiply(complex0);
      complex1.exp();
      Complex.valueOf((double) 104, (double) 104);
      Complex complex3 = Complex.INF;
      Object object0 = new Object();
      complex1.equals(object0);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex1.exp();
      Complex complex4 = Complex.valueOf((double) 104, (double) 104);
      Complex complex5 = complex1.I.multiply(104);
      complex5.I.tanh();
      complex0.getImaginary();
      Complex complex6 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.cos();
      complex5.getArgument();
      Complex complex8 = complex6.divide(1.5707963267948966);
      complex8.getReal();
      complex4.createComplex(104, Double.NEGATIVE_INFINITY);
      complex6.acos();
      complex5.subtract((double) 104);
      complex7.tan();
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.I.divide(2696.43998);
      Complex complex2 = complex0.multiply(0);
      complex2.NaN.subtract(complex0);
      Complex complex3 = complex1.ZERO.tan();
      complex0.abs();
      Complex complex4 = complex3.sqrt1z();
      complex0.toString();
      complex4.cos();
      complex1.atan();
      Complex.valueOf(1.6994526063192333E-8);
      complex0.add(0.0);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.tan();
      complex0.multiply(complex2);
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf((double) 104, (double) 104);
      Complex complex5 = complex2.multiply(104);
      Complex complex6 = complex4.tanh();
      complex1.getImaginary();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.subtract(6.283185307179586);
      complex7.cos();
      complex7.getArgument();
      complex3.divide(6.283185307179586);
      complex8.getReal();
      complex5.hashCode();
      complex2.divide(complex8);
      complex7.add(complex6);
      Complex complex9 = Complex.ZERO;
      complex3.add(complex9);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex1.exp();
      Complex.valueOf((double) 104, (double) 104);
      Complex complex5 = complex3.log();
      complex0.toString();
      complex3.getArgument();
      complex5.hashCode();
      complex3.isNaN();
      complex4.isNaN();
      Complex complex6 = complex5.log();
      Complex complex7 = complex2.pow(0.7853981633974483);
      Complex complex8 = complex3.tan();
      Complex complex9 = complex1.subtract(complex6);
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.conjugate();
      complex4.nthRoot(1397);
      complex2.tanh();
      complex8.nthRoot(252);
      Complex complex12 = complex10.atan();
      complex11.exp();
      complex12.divide(134.0);
      complex7.getField();
      complex9.sqrt1z();
      complex4.sin();
      complex8.sqrt();
      Complex complex13 = new Complex(104);
      complex1.getReal();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1919.2022), (-1919.2022));
      complex0.getField();
      Complex complex1 = complex0.ONE.multiply((-1919.2022));
      Complex complex2 = new Complex((-950.93195407));
      Complex complex3 = complex2.I.divide(0.0);
      complex3.ONE.negate();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex0.ZERO.sin();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex0.subtract(complex2);
      Complex complex8 = complex7.INF.sinh();
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex9.INF.subtract((-1919.2022));
      complex10.I.getField();
      complex1.I.divide(complex4);
      complex1.ZERO.toString();
      complex7.NaN.toString();
      complex7.I.subtract(complex6);
      Complex complex11 = complex0.ONE.tanh();
      complex2.INF.divide((-1919.2022));
      Complex.valueOf((-1919.2022));
      complex0.exp();
      Complex complex12 = Complex.NaN;
      complex12.divide((-1753.0204927816));
      Complex complex13 = new Complex((-1919.2022), (-950.93195407));
      complex13.getField();
      complex11.sqrt1z();
      complex10.sin();
      complex2.sqrt();
      complex13.sinh();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2705.65566567);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex0.nthRoot(2903);
      Complex complex3 = complex1.subtract((double) 2903);
      Complex complex4 = complex1.createComplex(2903, 0.0);
      complex3.createComplex((-6.0370682395944045E-9), Double.NaN);
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.pow(complex7);
      Complex complex9 = Complex.ZERO;
      complex3.multiply(complex9);
      complex2.hashCode();
      Complex complex10 = complex3.multiply(complex6);
      Complex complex11 = Complex.valueOf(157.2);
      complex2.sinh();
      complex5.multiply(157.2);
      complex10.createComplex((-852.6730950216748), (-6.0370682395944045E-9));
      complex6.hashCode();
      complex8.conjugate();
      complex8.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2484.68), (-2484.68));
      Complex complex2 = complex1.multiply(1544);
      complex0.tanh();
      complex2.getImaginary();
      Complex complex3 = complex2.subtract((-3836345.92));
      Complex complex4 = complex3.cos();
      complex0.getArgument();
      complex1.divide((double) 1544);
      complex1.getReal();
      complex1.hashCode();
      Complex complex5 = complex0.divide(complex3);
      complex1.add(complex5);
      Complex.valueOf((double) 1544);
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.ONE.multiply((-2497.29));
      Complex complex4 = complex1.ONE.multiply(37);
      Complex complex5 = complex1.I.pow(complex0);
      complex5.I.readResolve();
      complex5.cosh();
      Complex complex6 = complex0.divide(1887.270288);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex7.NaN.divide(complex0);
      complex6.getField();
      complex7.hashCode();
      complex6.abs();
      complex0.isNaN();
      Complex complex10 = complex8.subtract(1887.270288);
      Complex complex11 = complex9.ZERO.createComplex((-6.0370682395944045E-9), 37);
      complex11.NaN.createComplex(5.298658100847503E-4, (-6.0370682395944045E-9));
      Complex complex12 = Complex.valueOf((-6.0370682395944045E-9));
      complex12.sqrt1z();
      Complex complex13 = complex12.ONE.pow(complex3);
      complex13.multiply(complex7);
      complex9.hashCode();
      Complex complex14 = complex6.multiply(complex10);
      Complex complex15 = Complex.valueOf(0.0);
      complex14.sinh();
      complex15.multiply(1887.270288);
      Complex.valueOf((-2497.29));
      complex7.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex1.exp();
      Complex.valueOf((double) 104, (double) 104);
      Complex complex5 = complex1.I.multiply(104);
      Complex complex6 = complex5.I.tanh();
      complex0.getImaginary();
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex3.cos();
      complex5.getArgument();
      Complex complex7 = Complex.NaN;
      complex7.getReal();
      complex7.hashCode();
      Complex complex8 = complex0.divide(complex4);
      complex0.add(complex8);
      complex2.createComplex(Double.POSITIVE_INFINITY, 104);
      complex2.hashCode();
      Complex complex9 = Complex.INF;
      complex9.conjugate();
      complex6.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.sin();
      complex2.ONE.multiply((-2497.29));
      Complex complex3 = complex1.ONE.multiply(37);
      Complex complex4 = complex1.I.pow(complex0);
      complex4.I.readResolve();
      complex4.cosh();
      Complex complex5 = complex0.divide(1887.270288);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex6.NaN.divide(complex0);
      complex7.nthRoot(2009);
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = Complex.valueOf((-1877.43327));
      complex10.acos();
      complex3.abs();
      complex2.createComplex(1936.5403870889154, (-1521.2658646));
      complex9.hashCode();
      complex5.toString();
      Complex complex11 = Complex.I;
      complex11.asin();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1168.62235239043), 3034.853);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf((-1168.62235239043));
      Complex complex2 = new Complex((-1168.62235239043));
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = Complex.valueOf(0.0);
      complex0.cosh();
      Complex complex7 = complex5.sqrt();
      complex0.pow(complex7);
      Complex complex8 = complex6.log();
      complex4.sinh();
      complex8.divide((-1168.62235239043));
      Complex complex9 = complex3.sinh();
      complex1.multiply(2532.3723819);
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex10.reciprocal();
      complex9.createComplex((-600.5051322342001), 0.0);
      Complex complex12 = complex0.acos();
      complex12.subtract((-1168.62235239043));
      complex2.tan();
      Complex complex13 = Complex.ONE;
      complex13.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-1168.62235239043), 3034.853);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf((-805.74706699623));
      Complex complex2 = Complex.valueOf((-1168.62235239043), (-805.74706699623));
      Complex complex3 = complex2.sinh();
      complex0.divide(complex1);
      Complex complex4 = Complex.valueOf((-568.02130181346));
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.sqrt();
      complex6.pow(complex5);
      complex0.log();
      complex1.sinh();
      complex5.divide((-805.74706699623));
      Complex complex7 = complex6.sinh();
      complex5.multiply((-1336.0));
      complex0.sqrt1z();
      complex4.sin();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.reciprocal();
      complex3.createComplex((-35.8378736475863), (-600.5051322342001));
      complex4.acos();
      complex0.subtract(718.28);
      complex3.tan();
      complex7.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-2525.012096));
      complex0.getField();
      Complex complex2 = complex1.multiply(1.0112214979786464E-43);
      Complex complex3 = new Complex(1.0112214979786464E-43);
      Complex complex4 = complex2.divide(6413.756);
      Complex complex5 = complex3.negate();
      Complex complex6 = complex3.reciprocal();
      complex3.sin();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex4.subtract(complex0);
      Complex complex9 = complex5.asin();
      complex3.subtract(1.0112214979786464E-43);
      complex5.getField();
      Complex complex10 = complex8.divide(complex0);
      complex6.toString();
      complex2.toString();
      Complex complex11 = complex9.subtract(complex7);
      complex2.tanh();
      complex10.divide((-648.388975373118));
      Complex.valueOf(245.0);
      complex11.asin();
      complex8.multiply(1384);
      complex5.sin();
      complex4.cos();
      Complex.valueOf((-648.388975373118));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.I.divide(2696.43998);
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex1.ZERO.tan();
      complex0.ONE.abs();
      Complex complex5 = complex3.cos();
      complex5.getArgument();
      Complex complex6 = complex0.divide(1.9711751621240536E163);
      complex6.getReal();
      complex5.hashCode();
      complex0.divide(complex3);
      Complex complex7 = new Complex(Double.NaN);
      complex4.add(complex7);
      Complex.valueOf(2696.43998);
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf((double) 104, (double) 104);
      Complex complex5 = complex0.I.multiply(104);
      complex5.I.tanh();
      complex0.getImaginary();
      Complex complex6 = complex1.subtract(1.0);
      Complex complex7 = complex2.cos();
      Complex complex8 = new Complex(1.0);
      Complex complex9 = complex0.conjugate();
      complex8.tanh();
      complex7.nthRoot(104);
      Complex complex10 = complex8.atan();
      Complex complex11 = Complex.I;
      complex6.divide((-2886.06188745357));
      complex4.getField();
      complex8.sqrt1z();
      complex10.sin();
      complex8.sqrt();
      complex6.sinh();
      complex7.getReal();
      complex3.multiply((-2081.658041));
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-892.84348011), (-892.84348011));
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex3.ZERO.createComplex((-941.73703), 0.0);
      Complex complex5 = new Complex((-892.84348011));
      complex4.ONE.add(complex5);
      Complex complex6 = complex4.INF.tanh();
      Complex complex7 = complex2.I.pow((-94.7885));
      Complex complex8 = complex7.ZERO.log();
      complex8.NaN.toString();
      complex0.NaN.getArgument();
      complex0.NaN.hashCode();
      Complex complex9 = Complex.INF;
      complex9.reciprocal();
      complex5.readResolve();
      Complex complex10 = Complex.ONE;
      complex10.subtract(20.0);
      complex1.abs();
      Complex.valueOf((-892.84348011));
      Complex complex11 = Complex.NaN;
      complex11.divide(complex6);
      complex2.divide(complex8);
      complex7.sin();
      complex3.log();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-84.566559), 2532.3723819);
      Complex complex1 = new Complex(2532.3723819);
      complex1.multiply(1);
      complex0.ONE.exp();
      complex1.I.reciprocal();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.NaN.subtract((-1.0));
      complex2.INF.abs();
      Complex complex3 = Complex.valueOf((-1.0));
      Complex complex4 = complex0.divide(complex1);
      complex4.ZERO.divide(complex0);
      complex4.sin();
      complex4.log();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-892.84348011), (-892.84348011));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.createComplex((-941.73703), 0.0);
      Complex complex4 = new Complex((-892.84348011));
      complex3.ONE.add(complex4);
      complex3.INF.tanh();
      Complex complex5 = complex1.I.pow((-94.7885));
      Complex complex6 = complex5.ZERO.log();
      complex6.NaN.toString();
      complex0.NaN.getArgument();
      complex0.NaN.hashCode();
      complex0.isInfinite();
      complex0.isNaN();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.ONE.pow((-94.7885));
      complex5.I.tan();
      Complex complex9 = complex8.subtract(complex2);
      Complex complex10 = complex9.ONE.conjugate();
      complex10.INF.nthRoot(252);
      complex7.tanh();
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1814.873431, 0.0);
      Complex complex1 = complex0.ZERO.divide(0.0);
      complex0.ZERO.toString();
      Complex complex2 = complex0.divide(1814.873431);
      Complex complex3 = Complex.valueOf(0.0);
      complex2.sqrt();
      Complex complex4 = complex1.tanh();
      complex4.I.reciprocal();
      complex4.ONE.abs();
      Complex complex5 = complex0.sinh();
      complex4.isNaN();
      complex5.conjugate();
      Complex complex6 = Complex.valueOf(0.0);
      complex3.pow(complex6);
      try { 
        complex1.nthRoot((-219));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -219
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(7.221902646057552E211, 7.221902646057552E211);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.I.pow(complex0);
      complex2.I.conjugate();
      complex2.ZERO.add(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.ZERO.add(complex3);
      complex4.exp();
      complex4.ZERO.cosh();
      complex4.I.readResolve();
      Complex complex5 = complex0.pow(8.70017386744679E-9);
      Complex complex6 = complex0.asin();
      complex6.ONE.add(complex4);
      complex6.sqrt();
      Complex.valueOf(20.0);
      complex5.pow(complex6);
      Complex.valueOf((-1786.747934287625), (-1786.747934287625));
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.pow(0.0);
      complex0.I.sqrt();
      complex1.ONE.createComplex((-1504.531), 1.080835500478704E-8);
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3626.715136137905);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.multiply(2522.49993796373);
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex2.tanh();
      complex4.asin();
      complex0.toString();
      Complex complex5 = complex1.I.pow((-1412.018));
      Complex complex6 = Complex.valueOf(3626.715136137905);
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex6.add(complex2);
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex10.INF.asin();
      complex7.readResolve();
      complex8.NaN.hashCode();
      Complex complex12 = complex6.ONE.tan();
      Complex complex13 = complex8.cosh();
      Complex complex14 = complex5.multiply(complex2);
      complex9.INF.pow(complex7);
      Complex complex15 = complex8.log();
      complex15.ZERO.log();
      Complex complex16 = complex5.createComplex(3626.715136137905, (-1412.018));
      complex0.ZERO.divide(complex9);
      complex7.subtract(2522.49993796373);
      complex13.multiply(0);
      complex11.tanh();
      complex16.pow(complex11);
      complex13.readResolve();
      complex14.exp();
      complex8.getImaginary();
      complex5.isNaN();
      complex12.createComplex(2522.49993796373, 0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.253781621373885E29);
      Complex complex1 = complex0.NaN.subtract((-762.425764283));
      Complex complex2 = complex1.ONE.add((-6.2));
      Complex complex3 = complex0.tan();
      complex3.I.multiply((-6.2));
      complex0.abs();
      Complex complex4 = Complex.valueOf((-2.3951455355985637E-8));
      Complex complex5 = complex0.ZERO.reciprocal();
      complex5.atan();
      Complex complex6 = complex4.ZERO.multiply(0.0);
      complex6.conjugate();
      complex4.multiply(complex3);
      Complex complex7 = complex2.NaN.reciprocal();
      complex2.nthRoot(1);
      complex4.equals(complex2);
      Complex complex8 = complex7.ZERO.cos();
      Complex.valueOf(3.2441826014060764E125);
      complex0.isNaN();
      complex7.getImaginary();
      Complex complex9 = complex3.pow((-335.1518583508558));
      complex9.I.sqrt1z();
      complex0.getArgument();
      Complex complex10 = Complex.ONE;
      complex8.add(complex10);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-325.18866135309), (-325.18866135309));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.NaN.multiply(1);
      complex6.sinh();
      complex4.INF.subtract(complex5);
      Complex complex7 = complex1.add(complex0);
      Complex complex8 = complex7.I.createComplex(1054.716900047, (-325.18866135309));
      Complex complex9 = complex0.divide(complex1);
      complex0.INF.toString();
      Complex complex10 = complex9.log();
      Complex complex11 = complex10.INF.cos();
      Complex complex12 = complex11.ZERO.pow(0.0);
      complex12.INF.getField();
      complex12.ZERO.sqrt1z();
      Complex complex13 = complex9.sqrt();
      Complex complex14 = complex12.conjugate();
      Complex.valueOf(0.0, 0.0);
      Complex complex15 = complex14.pow(complex13);
      complex10.exp();
      complex8.add(complex15);
      complex8.toString();
      Complex complex16 = complex8.tan();
      complex5.divide(complex8);
      complex7.sin();
      complex16.abs();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1919.2022), (-1919.2022));
      complex0.getField();
      Complex complex1 = complex0.ONE.multiply((-1919.2022));
      Complex complex2 = new Complex((-950.93195407));
      Complex complex3 = complex2.I.divide(0.0);
      complex3.ONE.negate();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex0.ZERO.sin();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex0.subtract(complex2);
      Complex complex8 = complex7.INF.sinh();
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex9.INF.subtract((-1919.2022));
      complex10.I.getField();
      complex1.I.divide(complex4);
      complex1.ZERO.toString();
      complex7.NaN.toString();
      complex7.I.subtract(complex6);
      complex0.ONE.tanh();
      complex2.INF.divide((-1919.2022));
      Complex.valueOf((-1919.2022));
      complex7.asin();
      complex5.multiply((-1));
      complex1.sin();
      complex6.cos();
      Complex.valueOf(65.95318624843);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.2002340515));
      Complex complex1 = complex0.ZERO.cosh();
      complex0.I.hashCode();
      complex0.hashCode();
      complex1.sin();
      complex0.readResolve();
      Complex complex2 = complex1.tanh();
      complex2.ZERO.add(complex0);
      complex1.NaN.readResolve();
      complex0.I.divide(complex2);
      complex2.I.getField();
      complex0.isNaN();
      complex1.hashCode();
      Complex complex3 = complex1.log();
      complex3.toString();
      complex1.divide((-478.2002340515));
      complex2.pow(6029.4046471);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-1168.62235239043), 3034.853);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.NaN.cosh();
      complex0.sqrt();
      complex3.I.pow(complex1);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.I.divide((-346.61930031861));
      complex0.sinh();
      Complex complex8 = complex0.ZERO.multiply((-346.61930031861));
      complex8.sqrt1z();
      Complex complex9 = complex3.sin();
      complex9.reciprocal();
      complex7.I.createComplex((-600.5051322342001), (-1168.62235239043));
      complex9.acos();
      Complex complex10 = complex7.subtract(3034.853);
      complex10.tan();
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-169.7644), (-169.7644));
      Complex complex1 = complex0.divide((-169.7644));
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex1.multiply(1);
      complex3.abs();
      Complex complex4 = complex3.asin();
      complex4.I.log();
      Complex complex5 = complex1.negate();
      complex2.negate();
      complex3.getField();
      complex3.getField();
      complex3.createComplex(2940.32373, 0.0);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.conjugate();
      complex2.INF.pow(0.0);
      complex2.INF.add(complex0);
      Complex complex3 = complex0.multiply(complex1);
      complex0.negate();
      Complex complex4 = complex3.sqrt1z();
      complex4.ZERO.atan();
      complex4.add((-119.85546487263));
      complex0.sinh();
      complex2.toString();
      complex0.acos();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-3.141592653589793);
      complex0.NaN.multiply((-3.141592653589793));
      complex0.ZERO.atan();
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.conjugate();
      complex0.tan();
      Complex.valueOf(2238.765652846);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.subtract(2120.8253);
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.I.conjugate();
      complex0.readResolve();
      complex0.hashCode();
      Complex.valueOf(0.0);
      complex3.ONE.nthRoot(1485);
      complex3.add(complex2);
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.subtract(complex3);
      Complex complex6 = complex5.ONE.sinh();
      Complex complex7 = complex5.ONE.atan();
      complex3.readResolve();
      complex1.cos();
      complex2.nthRoot(1485);
      complex7.ONE.hashCode();
      complex6.negate();
      Complex complex8 = complex7.tan();
      Complex complex9 = Complex.valueOf(54.58738216680722, 0.0);
      complex7.add(complex4);
      complex9.exp();
      complex7.add(complex1);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.ONE.multiply((-2497.29));
      Complex complex4 = complex1.ONE.multiply(37);
      Complex complex5 = complex1.I.pow(complex0);
      complex5.I.readResolve();
      complex5.cosh();
      Complex complex6 = complex0.divide(1887.270288);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex7.NaN.divide(complex0);
      complex6.getField();
      complex7.hashCode();
      complex6.abs();
      complex0.isNaN();
      Complex complex10 = complex8.subtract(1887.270288);
      Complex complex11 = complex9.ZERO.createComplex((-6.0370682395944045E-9), 37);
      complex11.NaN.createComplex(5.298658100847503E-4, (-6.0370682395944045E-9));
      Complex complex12 = Complex.valueOf((-6.0370682395944045E-9));
      complex12.sqrt1z();
      Complex complex13 = complex12.ONE.pow(complex3);
      Complex complex14 = complex13.multiply(complex7);
      complex9.hashCode();
      Complex complex15 = complex6.multiply(complex10);
      Complex complex16 = Complex.valueOf(0.0);
      complex15.sinh();
      Complex complex17 = complex16.multiply(1887.270288);
      complex4.createComplex(37, 0.0);
      complex4.hashCode();
      complex14.conjugate();
      complex17.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.asin();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.219508285637377E-115);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      complex2.ZERO.sqrt1z();
      Complex complex3 = complex1.NaN.log();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.NaN.add(complex1);
      complex5.NaN.cos();
      Complex complex6 = complex4.tanh();
      complex4.NaN.getArgument();
      Complex complex7 = complex4.I.cos();
      complex7.NaN.subtract(complex6);
      Complex complex8 = complex1.INF.sin();
      complex8.NaN.tanh();
      double double0 = 0.0;
      complex8.NaN.add(0.0);
      complex6.INF.subtract(complex4);
      complex0.getImaginary();
      try { 
        complex3.nthRoot((-1353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,353
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt();
      Complex complex1 = Complex.NaN;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex1.exp();
      Complex.valueOf((double) 104, (double) 104);
      Complex complex5 = complex1.I.multiply(104);
      complex5.I.tanh();
      complex0.getImaginary();
      Complex complex6 = complex2.subtract(Double.POSITIVE_INFINITY);
      complex3.cos();
      complex5.getArgument();
      Complex complex7 = complex6.divide(1.5707963267948966);
      complex7.getReal();
      complex7.hashCode();
      Complex complex8 = complex0.divide(complex4);
      complex0.add(complex8);
      Complex complex9 = Complex.valueOf(1454.98077);
      complex3.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      complex0.sqrt1z();
      complex0.hashCode();
      Complex complex2 = complex1.INF.atan();
      complex2.abs();
      Complex complex3 = complex2.ONE.divide(complex0);
      complex0.NaN.acos();
      Complex complex4 = Complex.valueOf(1711.55281293593, 1711.55281293593);
      complex4.I.cosh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex3.ZERO.pow(complex5);
      complex5.I.multiply(complex3);
      complex0.hashCode();
      Complex complex6 = complex4.divide((-1564.93));
      complex6.getField();
      complex6.cosh();
      Complex complex7 = complex6.add(0.0);
      complex2.toString();
      Complex complex8 = complex5.add(0.0);
      complex8.I.sin();
      complex2.getReal();
      Complex complex9 = complex7.multiply(complex3);
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1332.611266172928);
      Complex complex1 = new Complex(1.4788974793889734E-74);
      complex1.I.hashCode();
      Complex complex2 = complex0.reciprocal();
      complex2.NaN.createComplex((-1829.525874665), 1.4788974793889734E-74);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.multiply(complex1);
      complex4.I.toString();
      Complex complex5 = complex4.acos();
      complex0.toString();
      Complex complex6 = complex5.multiply(1);
      complex6.toString();
      Complex complex7 = complex4.add(complex2);
      complex7.sqrt1z();
      Complex complex8 = complex1.log();
      complex3.toString();
      complex4.isNaN();
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex5.multiply(complex3);
      complex10.ZERO.pow((-1115.7515));
      Complex.valueOf((-6.113203624663034E-8));
      complex5.equals(complex1);
      complex1.getImaginary();
      complex8.multiply(complex6);
      complex0.exp();
      complex9.toString();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.abs();
      complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.I.cosh();
      complex1.ONE.atan();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.ONE.negate();
      Complex complex6 = complex4.ONE.multiply((-8.257112559083188E-8));
      complex0.multiply(1511);
      complex4.getField();
      Complex complex7 = complex4.tanh();
      complex4.ZERO.hashCode();
      complex6.NaN.add(complex3);
      complex7.NaN.nthRoot(803);
      Complex complex8 = complex4.divide((-1884.172385794));
      complex8.NaN.readResolve();
      complex3.getArgument();
      complex3.getReal();
      complex6.sqrt1z();
      Complex complex9 = complex5.sqrt();
      complex9.ZERO.divide(complex2);
      complex6.multiply((-1884.172385794));
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(1.9332058429718018);
      Complex complex1 = Complex.valueOf(1.9332058429718018);
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ZERO.acos();
      complex4.isNaN();
      Complex complex6 = complex5.atan();
      complex6.INF.getArgument();
      complex3.pow(complex5);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(1599.68, 1599.68);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.INF.divide(1599.68);
      complex3.hashCode();
      complex2.acos();
      complex3.I.subtract(0.0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.ONE.add(0.0);
      Complex complex6 = complex5.ZERO.log();
      complex0.hashCode();
      complex2.nthRoot(652);
      Complex complex7 = complex0.pow(complex3);
      complex7.INF.pow(complex1);
      complex4.divide(0.0);
      complex4.multiply(0.0);
      complex4.add((double) 652);
      complex6.negate();
      Complex.valueOf(1599.68);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-901.0857652389304));
      complex0.readResolve();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sqrt1z();
      complex2.I.tanh();
      complex0.acos();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.I.divide((-901.0857652389304));
      Complex complex5 = Complex.valueOf(1902.86200555109);
      Complex complex6 = Complex.valueOf((-901.0857652389304));
      Complex complex7 = complex6.ONE.pow((-901.0857652389304));
      Complex complex8 = complex0.tan();
      Complex complex9 = complex1.add(complex2);
      complex9.NaN.multiply(1902.86200555109);
      Complex complex10 = complex5.pow(2.0);
      Complex complex11 = complex0.sinh();
      complex8.readResolve();
      Complex complex12 = complex10.multiply(Double.POSITIVE_INFINITY);
      complex8.tanh();
      complex0.abs();
      Complex complex13 = Complex.valueOf(0.0);
      complex10.INF.acos();
      complex6.equals(complex7);
      complex11.atan();
      Complex complex14 = complex8.conjugate();
      complex12.getArgument();
      complex14.sqrt();
      Complex.valueOf((-1263.59941164292));
      complex4.hashCode();
      complex4.acos();
      complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.INF.sqrt1z();
      Complex complex2 = complex0.divide(2.0);
      complex2.I.subtract(2.0);
      complex0.abs();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(2.4700104681773258E-79, (-189.113));
      Complex complex1 = Complex.valueOf((-189.113));
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ZERO.multiply(2.4700104681773258E-79);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex0.I.cosh();
      complex5.INF.log();
      complex3.nthRoot(1);
      Complex complex7 = complex0.subtract(complex3);
      complex2.conjugate();
      complex0.ZERO.sin();
      Complex complex8 = complex7.ZERO.add(complex2);
      Complex complex9 = Complex.valueOf(0.0);
      complex0.ZERO.pow(0.0);
      Complex complex10 = complex0.sin();
      Complex complex11 = complex9.pow(complex4);
      Complex complex12 = complex9.tanh();
      complex11.ONE.acos();
      complex9.abs();
      complex5.tanh();
      complex9.readResolve();
      complex10.log();
      Complex complex13 = complex2.tan();
      complex13.NaN.getArgument();
      complex1.getField();
      complex12.getField();
      complex6.nthRoot(902);
      complex8.subtract(2.4700104681773258E-79);
      complex9.cosh();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.readResolve();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.sqrt();
      complex0.ZERO.divide(complex2);
      complex0.abs();
      Complex complex5 = complex0.I.divide(0.0);
      complex5.I.conjugate();
      complex1.nthRoot(442);
      complex4.createComplex(0.0, 442);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.subtract(complex6);
      complex0.getField();
      Complex.valueOf((double) 442);
      complex2.readResolve();
      complex3.isNaN();
      Complex complex8 = complex5.sqrt1z();
      complex3.createComplex(442, (-460.59195));
      complex4.multiply(0.0);
      Complex complex9 = complex7.multiply(0.0);
      complex8.reciprocal();
      complex5.divide(complex8);
      complex9.readResolve();
      Complex complex10 = complex2.exp();
      complex10.ONE.reciprocal();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = (-6434);
      Complex complex1 = complex0.multiply((-6434));
      complex1.I.asin();
      int int1 = (-1);
      try { 
        complex1.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1194.258344281934);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.INF.sqrt();
      complex4.ZERO.acos();
      complex0.getArgument();
      Complex complex5 = complex3.pow(0.0);
      complex5.I.sinh();
      complex3.divide(0.0);
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      complex1.getImaginary();
      Complex complex2 = Complex.ZERO;
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      complex0.nthRoot(4729);
      Complex complex3 = Complex.valueOf(Double.NaN, (double) 4729);
      Complex complex4 = complex3.I.sqrt1z();
      complex4.I.subtract(806.483281011987);
      complex3.ONE.sqrt();
      complex2.readResolve();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-505.15011127), 0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.cosh();
      complex3.ZERO.cosh();
      Complex complex4 = complex2.I.add(complex1);
      Complex complex5 = complex2.I.sqrt1z();
      Complex complex6 = complex5.NaN.log();
      complex6.I.getArgument();
      complex1.I.multiply(2305);
      complex5.NaN.getField();
      complex4.INF.sin();
      complex1.sqrt();
      Complex complex7 = complex2.exp();
      complex7.multiply(0.0);
      Complex complex8 = complex7.multiply(complex4);
      complex8.readResolve();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2649.0);
      Complex complex1 = complex0.ZERO.pow(2649.0);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.INF.multiply(2649.0);
      Complex complex4 = complex1.tanh();
      complex4.I.subtract(complex3);
      complex4.exp();
      complex2.ONE.nthRoot(1272);
      Complex complex5 = complex2.ZERO.sinh();
      Complex complex6 = complex5.I.cos();
      complex6.cosh();
      complex2.createComplex((-3207.1652553617), 6.283185307179586);
      complex1.getArgument();
      complex0.INF.add(complex2);
      complex1.toString();
      complex2.toString();
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2705.65566567);
      Complex complex1 = new Complex(0.0);
      complex0.ZERO.divide(complex1);
      List<Complex> list0 = complex0.nthRoot(2903);
      assertEquals(2903, list0.size());
      
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.acos();
      double double0 = complex3.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      
      complex0.NaN.createComplex(2705.65566567, 2903);
      complex3.hashCode();
      assertEquals((-8.596274086400632), complex3.getImaginary(), 0.01);
      
      String string0 = complex2.toString();
      assertEquals("(-2.7318774627616175E-6, -3.695759867518577E-4)", string0);
      
      complex1.asin();
      String string1 = complex1.toString();
      assertEquals("(0.0, 0.0)", string1);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      double double0 = 5032.02;
      Complex complex0 = Complex.valueOf(5032.02, 0.0);
      Complex complex1 = Complex.I;
      complex1.abs();
      complex0.ONE.multiply(690);
      complex0.NaN.cosh();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex.valueOf(0.0, 2.3364500999450684);
      complex2.I.negate();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex((-1492.978189));
      String string0 = complex0.toString();
      assertEquals("(-1492.978189, 0.0)", string0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.I.divide(2696.43998);
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex1.ZERO.tan();
      complex0.ONE.abs();
      Complex complex5 = complex4.INF.pow(2696.43998);
      assertEquals(3.7085935804882997E-4, complex1.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)complex3));
      
      Complex complex6 = complex0.sqrt1z();
      complex6.toString();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex6.atan();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex7.exp();
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = Complex.valueOf(0.0);
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex2.add(0.0);
      assertTrue(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex4));
  }
}
