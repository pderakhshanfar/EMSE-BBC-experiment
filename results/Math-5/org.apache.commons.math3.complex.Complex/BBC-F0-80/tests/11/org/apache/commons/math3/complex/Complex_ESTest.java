/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:44:02 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex.valueOf((-20.0));
      Complex complex1 = Complex.valueOf((-103.64133061));
      Complex complex2 = complex1.createComplex((-2551.095), (-20.0));
      complex1.negate();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.ZERO;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.6839630192334425, 20.0);
      complex0.ZERO.getArgument();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1462.5, (-1.3910598647592876E-8));
      Complex complex2 = complex0.add(1129.17816403974);
      complex2.isNaN();
      Complex complex3 = complex2.add((-3.52597540499141E189));
      Complex complex4 = complex2.cosh();
      Complex.valueOf(2.628788218289742E129);
      Complex complex5 = complex0.negate();
      Complex complex6 = Complex.INF;
      complex6.toString();
      complex4.atan();
      Complex complex7 = complex3.asin();
      complex2.negate();
      complex4.log();
      complex5.tanh();
      complex2.tan();
      Complex complex8 = Complex.NaN;
      complex8.atan();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex6.cos();
      complex10.I.negate();
      Complex complex11 = Complex.ZERO;
      complex4.multiply(complex7);
      complex9.nthRoot(2364);
      complex0.subtract(1462.5);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2.0, 528.900421176276);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.ONE;
      complex3.reciprocal();
      complex3.add(12.039848978145246);
      Complex complex6 = complex0.negate();
      complex4.tan();
      Complex complex7 = new Complex(12.039848978145246, 12.039848978145246);
      complex6.pow(complex3);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 9.490800658395667E290);
      Complex complex1 = complex0.acos();
      complex1.createComplex(9.490800658395667E290, 9.490800658395667E290);
      complex0.sqrt1z();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      complex0.isNaN();
      Complex complex1 = complex0.cosh();
      complex0.INF.subtract(complex0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.I;
      complex0.multiply(complex2);
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1368.687498936), (-1420145.0099280002));
      complex0.isInfinite();
      Complex.valueOf((-1368.687498936));
      Complex complex2 = complex0.log();
      complex2.ZERO.getArgument();
      Complex complex3 = Complex.I;
      complex3.isInfinite();
      Complex complex4 = Complex.NaN;
      complex4.log();
      complex4.getArgument();
      Complex complex5 = complex3.tanh();
      complex3.reciprocal();
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      complex2.multiply((-4.51305093266001E260));
      complex5.createComplex(3486.1114855724745, (-879.7328));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1368.687498936), (-1420145.0099280002));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.sin();
      complex0.asin();
      complex2.log();
      complex3.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ONE;
      complex5.add(509.81696);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.cos();
      complex2.INF.getArgument();
      complex2.I.createComplex(Double.NaN, Double.NaN);
      double double0 = 3263.219885815608;
      complex1.INF.exp();
      Complex.valueOf(3263.219885815608, (-2932.992424440537));
      complex1.ZERO.add(Double.NaN);
      complex2.ONE.sqrt1z();
      Complex complex3 = complex0.pow(complex1);
      complex0.INF.getField();
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex4.ONE.divide(4269.0);
      complex0.ZERO.subtract(2.0);
      complex0.multiply(1.7861513777574234);
      complex3.tan();
      complex2.sinh();
      try { 
        complex5.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.NaN, 1421.982);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.negate();
      complex2.isInfinite();
      Complex complex4 = complex1.negate();
      Complex.valueOf(Double.NaN);
      complex3.sqrt();
      complex2.reciprocal();
      Complex complex5 = complex4.acos();
      complex3.getArgument();
      Complex complex6 = complex5.log();
      complex0.tanh();
      complex2.log();
      complex2.tanh();
      Complex complex7 = new Complex((-75.3288219337), Double.NaN);
      Complex complex8 = complex7.tan();
      complex2.createComplex(0.0, 2468.2681455963652);
      complex6.subtract((-1087.0));
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.add((-1.0));
      complex0.isNaN();
      Complex complex2 = complex0.add((-1.0));
      Complex complex3 = complex2.cosh();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      complex3.negate();
      complex1.toString();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.negate();
      complex3.log();
      complex0.tanh();
      Complex complex6 = complex5.tan();
      complex4.multiply(1926.0815645180653);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      complex0.exp();
      Complex complex1 = new Complex(0.3578848055333035);
      complex1.sqrt();
      complex0.sin();
      Complex.valueOf((-1.0), (-1.0));
      complex0.asin();
      Complex complex2 = Complex.INF;
      complex2.multiply(complex1);
      Complex complex3 = new Complex(4.718139127350589, 0.3578848055333035);
      complex3.toString();
      Complex complex4 = new Complex((-1.0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.log();
      complex0.tanh();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf((-1368.687498936));
      Complex complex2 = Complex.valueOf((double) 3255, (double) 3255);
      Complex complex3 = complex2.multiply(3255);
      Complex complex4 = Complex.valueOf((-1368.687498936), (double) 3255);
      complex3.abs();
      Complex complex5 = complex0.log();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.divide(complex1);
      complex6.toString();
      Complex complex7 = complex3.negate();
      complex4.isInfinite();
      complex7.abs();
      complex7.getArgument();
      Complex complex8 = complex5.sqrt();
      complex8.I.log();
      Complex.valueOf((double) 3255, 1.4983628048682002E7);
      complex1.subtract(complex8);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(2048.5);
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(127.8);
      Complex complex2 = complex1.add(2048.5);
      Complex complex3 = complex1.createComplex(1.906278351789277E292, (-4.1291070428848755E-76));
      Complex complex4 = Complex.ONE;
      complex2.isInfinite();
      complex4.negate();
      Complex complex5 = Complex.valueOf((-3150.202936));
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex5.reciprocal();
      complex6.acos();
      complex5.getArgument();
      complex5.log();
      complex5.tanh();
      complex7.tanh();
      Complex complex8 = Complex.ONE;
      complex7.negate();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1079.7542592, (-1.0));
      int int0 = (-1369);
      Complex complex1 = complex0.I.multiply((-1369));
      complex1.I.divide(complex0);
      Complex.valueOf((-2571.92), 307.530346839);
      Complex complex2 = complex1.ONE.exp();
      complex2.ONE.abs();
      complex1.ONE.pow((-1.0));
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      complex1.isNaN();
      Complex complex2 = complex0.add((-1.0));
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.INF;
      complex0.readResolve();
      Object object0 = complex4.readResolve();
      complex5.equals(object0);
      complex5.subtract((-601.021312051686));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.subtract(complex1);
      complex1.reciprocal();
      Complex complex3 = complex0.multiply((-2828.75423466));
      Complex complex4 = complex3.add(2774.507780342122);
      complex2.log();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.tanh();
      complex6.ONE.divide(complex5);
      complex3.tan();
      complex5.createComplex(1.4142135623731, 3824.9651143);
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.multiply((-171));
      complex2.reciprocal();
      complex2.abs();
      Complex complex3 = complex0.log();
      complex3.toString();
      Complex complex4 = Complex.NaN;
      complex4.getArgument();
      Complex complex5 = Complex.ZERO;
      complex1.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1094.6917958871936);
      Complex complex1 = complex0.INF.cosh();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.sinh();
      complex1.ZERO.exp();
      Complex complex3 = complex0.asin();
      complex3.sqrt();
      complex1.getImaginary();
      Complex complex4 = Complex.valueOf(1094.6917958871936);
      Complex complex5 = complex4.ZERO.add(856.3218952);
      Complex complex6 = Complex.valueOf(6.283185307179586);
      complex1.isInfinite();
      complex6.NaN.negate();
      complex2.isNaN();
      complex3.add(1094.6917958871936);
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex7.subtract(complex4);
      complex8.ONE.abs();
      Complex complex9 = Complex.ZERO;
      complex9.createComplex(Double.NaN, 1094.6917958871936);
      complex2.multiply(0.15915);
      complex1.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      complex0.NaN.add((-1.0));
      complex1.isNaN();
      Complex complex2 = complex0.add((-1.0));
      complex2.cosh();
      Complex complex3 = complex1.INF.subtract(complex2);
      complex1.reciprocal();
      complex1.multiply(4910.3085076796);
      Complex complex4 = complex0.add(Double.POSITIVE_INFINITY);
      complex3.log();
      complex4.tanh();
      complex2.tan();
      complex3.createComplex(Double.POSITIVE_INFINITY, (-1.0));
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1.1406713393562271E-7);
      Complex complex1 = Complex.NaN;
      complex0.NaN.add((-1.0));
      complex1.isNaN();
      Complex complex2 = complex0.add((-1.0));
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.INF.subtract(complex2);
      Complex complex5 = complex3.NaN.createComplex((-1.0), 1.1406713393562271E-7);
      complex1.reciprocal();
      complex1.multiply(4910.3085076796);
      Complex complex6 = complex0.add(1.1406713393562271E-7);
      complex5.log();
      complex6.tanh();
      complex2.tan();
      Complex complex7 = complex4.createComplex(1.1406713393562271E-7, (-1.0));
      complex7.subtract(1.1406713393562271E-7);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.subtract(20.0);
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf((-4479.0));
      complex2.createComplex(2296.1512746973, (-4479.0));
      complex1.cos();
      Complex complex4 = Complex.ZERO;
      complex4.multiply(complex1);
      complex3.nthRoot(580);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1387.100418);
      Complex complex1 = Complex.ONE;
      complex0.INF.add(complex1);
      Complex complex2 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.add((-1.0));
      complex1.isNaN();
      Complex complex3 = complex0.add((-1.0));
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex1.INF.subtract(complex3);
      Complex complex6 = complex4.NaN.createComplex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.reciprocal();
      complex2.acos();
      complex7.getArgument();
      Complex complex8 = complex5.log();
      Complex complex9 = Complex.NaN;
      complex9.tanh();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex9.multiply(0);
      Complex complex12 = complex6.multiply(0);
      Complex complex13 = complex2.reciprocal();
      complex12.abs();
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex14.log();
      complex12.toString();
      complex13.negate();
      complex13.isInfinite();
      complex13.abs();
      complex8.getArgument();
      complex0.sqrt();
      complex11.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2902.001096));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.reciprocal();
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf((-1.0));
      Complex complex5 = new Complex(2.17036096156304);
      complex5.atan();
      Complex complex6 = Complex.I;
      complex6.reciprocal();
      complex0.acos();
      complex6.getArgument();
      complex3.log();
      Complex complex7 = complex6.log();
      Complex complex8 = complex2.tanh();
      complex1.readResolve();
      Complex complex9 = complex8.multiply(433);
      Complex complex10 = complex3.conjugate();
      complex8.multiply(2052339282);
      complex7.reciprocal();
      complex1.abs();
      Complex complex11 = Complex.ZERO;
      complex10.toString();
      complex5.negate();
      complex4.isInfinite();
      complex10.abs();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = Complex.valueOf((-3950.147302654303));
      complex13.getArgument();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-982.7543656487734), (-982.7543656487734));
      complex0.reciprocal();
      complex0.INF.readResolve();
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.I.acos();
      complex0.getField();
      complex1.conjugate();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1634.30168222831));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex2.negate();
      Complex complex3 = Complex.valueOf(1.0);
      Complex complex4 = complex2.tan();
      complex3.sqrt();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.tanh();
      complex8.multiply((-1800));
      Complex complex9 = complex4.reciprocal();
      complex0.abs();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.ONE;
      complex11.toString();
      complex9.negate();
      complex6.isInfinite();
      complex5.abs();
      complex10.getArgument();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1634.30168222831));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex2.acos();
      complex0.getArgument();
      complex4.INF.log();
      complex6.log();
      complex4.tanh();
      complex7.multiply(1357);
      complex3.multiply(343);
      complex7.reciprocal();
      complex9.abs();
      Complex complex10 = Complex.ZERO;
      complex2.toString();
      Complex.valueOf((-1634.30168222831), 20.0);
      Complex complex11 = Complex.NaN;
      complex4.tanh();
      complex8.hashCode();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      complex0.NaN.add((-1.0));
      complex1.isNaN();
      Complex complex2 = complex0.add((-1.0));
      Complex complex3 = complex2.cosh();
      complex1.INF.subtract(complex2);
      complex3.NaN.createComplex((-1.0), Double.POSITIVE_INFINITY);
      complex2.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(842.7362206753807);
      Complex complex1 = Complex.valueOf(842.7362206753807, 842.7362206753807);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.add(842.7362206753807);
      complex0.negate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf(0.0, 27.051112520236074);
      complex2.divide(complex6);
      complex4.pow(7.6913751096284235);
      complex1.negate();
      Complex complex7 = new Complex(1.1660367213160203E-8);
      complex7.cosh();
      complex5.conjugate();
      complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1094.6917958871936);
      Complex complex1 = complex0.INF.cosh();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.sinh();
      complex1.ZERO.exp();
      Complex complex3 = complex0.asin();
      complex3.sqrt();
      complex1.getImaginary();
      Complex complex4 = Complex.valueOf(1094.6917958871936);
      complex4.ZERO.add(856.3218952);
      Complex complex5 = Complex.valueOf(1094.6917958871936);
      complex5.I.tanh();
      complex0.hashCode();
      complex0.toString();
      complex2.add(2728.358);
      complex0.subtract(1094.6917958871936);
      complex2.conjugate();
      Complex complex6 = complex3.divide(2.0);
      Complex complex7 = complex3.sqrt();
      complex7.I.createComplex(3510.9123876603708, 2.0);
      complex6.getField();
      Complex complex8 = Complex.I;
      Complex.valueOf(2.0, 2.0);
      Complex complex9 = Complex.NaN;
      complex8.tanh();
      complex9.hashCode();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(0.03266380727291107, 0.03266380727291107);
      Complex complex2 = complex0.multiply((-1330.92));
      Complex complex3 = complex2.ONE.sqrt();
      complex1.INF.cosh();
      Complex complex4 = complex2.ONE.reciprocal();
      Complex complex5 = Complex.valueOf(2010.9528446661);
      complex2.reciprocal();
      complex1.NaN.nthRoot(37);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.ONE.divide(complex4);
      Complex complex8 = complex7.NaN.tanh();
      complex8.INF.log();
      complex1.asin();
      Complex complex9 = complex7.I.asin();
      complex7.INF.tanh();
      complex1.I.add(complex0);
      Complex complex10 = complex6.NaN.sqrt1z();
      Complex complex11 = complex6.sinh();
      complex11.ZERO.acos();
      Complex complex12 = complex3.subtract(complex4);
      complex3.NaN.toString();
      Complex complex13 = complex3.add((-1640.61663));
      complex13.NaN.cosh();
      complex0.reciprocal();
      complex2.atan();
      complex4.add(complex0);
      complex12.acos();
      complex5.atan();
      complex4.log();
      complex9.sin();
      complex10.pow(3202.44725);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-970.3746368132835), (-970.3746368132835));
      Complex complex2 = new Complex(2.0, (-970.3746368132835));
      Complex complex3 = complex2.multiply(1881);
      complex3.tanh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf((double) 1881);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex2.asin();
      complex3.divide(complex5);
      complex7.toString();
      complex6.nthRoot(1881);
      complex4.cos();
      complex5.atan();
      Complex.valueOf((-20.0), (-20.0));
      Complex complex8 = Complex.ZERO;
      complex8.getArgument();
      complex8.subtract(1147.79);
      complex3.getImaginary();
      Complex complex9 = Complex.NaN;
      complex9.pow((-1.5587043044056635E-7));
      try { 
        complex3.nthRoot((-3644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,644
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1634.30168222831));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex1.sqrt();
      complex5.reciprocal();
      Complex complex8 = complex2.acos();
      complex0.getArgument();
      complex4.INF.log();
      complex6.log();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex7.multiply(1357);
      Complex complex11 = complex3.multiply(343);
      complex7.reciprocal();
      complex8.abs();
      Complex complex12 = Complex.ZERO;
      complex2.toString();
      complex11.negate();
      complex9.isInfinite();
      complex3.abs();
      complex3.getArgument();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1634.30168222831));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex3.INF.pow(5489.08798);
      complex0.multiply(complex2);
      complex4.subtract(complex2);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(842.658);
      Complex complex1 = Complex.valueOf(842.658, 842.658);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = new Complex(1079.320359, 1008.5649012753498);
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex4.I.add(complex3);
      Complex complex6 = complex4.I.log();
      complex1.negate();
      Complex complex7 = complex5.tanh();
      Complex complex8 = Complex.valueOf((-1340.0443));
      complex8.divide(complex6);
      Complex complex9 = new Complex(842.658, 1008.5649012753498);
      complex9.pow(1639.9503340616118);
      Complex complex10 = Complex.NaN;
      complex10.negate();
      complex5.cosh();
      complex7.conjugate();
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add((-5102.15578528));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex1.exp();
      Complex complex5 = Complex.valueOf(3732.398502650957, 0.0);
      Complex complex6 = complex5.subtract(1.5411775738825048E25);
      complex5.subtract((-5102.15578528));
      Complex complex7 = complex1.subtract((-707.38416442598));
      complex4.negate();
      complex7.toString();
      Complex complex8 = complex2.atan();
      Complex.valueOf((-707.38416442598));
      Complex complex9 = complex1.negate();
      complex9.pow(0.0);
      Complex complex10 = complex1.sqrt();
      complex8.log();
      complex6.negate();
      complex1.sqrt();
      complex9.exp();
      complex4.equals("(-4394.77162085402, 1.0)");
      Complex complex11 = complex7.divide((-2460.754010793036));
      complex10.multiply(541.34788167);
      complex3.createComplex(0.0, (-861.886));
      complex6.cos();
      complex11.toString();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1094.6917958871936);
      Complex complex1 = complex0.INF.cosh();
      complex1.NaN.hashCode();
      complex0.sinh();
      complex1.ZERO.exp();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.sqrt();
      complex1.getImaginary();
      Complex complex4 = Complex.valueOf(1094.6917958871936);
      complex4.ZERO.add(856.3218952);
      Complex complex5 = Complex.valueOf(6.283185307179586);
      complex1.isInfinite();
      complex5.NaN.negate();
      Complex complex6 = Complex.valueOf(2468.2681455963652);
      Complex complex7 = complex6.ZERO.tan();
      Complex.valueOf(Double.NaN, 1094.6917958871936);
      complex3.INF.sqrt();
      Complex complex8 = complex5.reciprocal();
      complex5.acos();
      complex8.NaN.getArgument();
      Complex complex9 = complex8.log();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex9.multiply(0);
      complex11.ZERO.multiply(1152);
      Complex complex12 = complex10.reciprocal();
      complex5.abs();
      complex7.log();
      complex7.toString();
      Complex complex13 = complex4.negate();
      complex2.isInfinite();
      complex8.abs();
      complex13.getArgument();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(4.368312797746065E-126, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(309.5117483639877);
      Complex complex3 = complex2.add(309.5117483639877);
      complex3.isNaN();
      Complex complex4 = complex0.add(0.0023734387893904643);
      Complex complex5 = complex4.cosh();
      complex5.subtract(complex1);
      Complex complex6 = complex5.createComplex((-1.0), 6.283185307179586);
      Complex complex7 = complex6.reciprocal();
      complex5.multiply((-3737.796981));
      complex7.NaN.add(complex5);
      complex4.add((-267.458728488806));
      complex7.log();
      complex0.tanh();
      complex0.createComplex((-771.504), (-1.7846700158234043E30));
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.ZERO;
      complex7.multiply(complex2);
      complex0.createComplex((-1.7846700158234043E30), 1.5696096054502924);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1.4142135623730951);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.add(1.4142135623730951);
      complex0.isNaN();
      complex1.add(1378.55498);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex1.createComplex(1544.878, (-1.0));
      complex3.reciprocal();
      Complex complex6 = complex2.multiply((-1.0));
      Complex complex7 = complex4.add(5428.53635);
      complex3.log();
      complex1.tanh();
      complex3.tan();
      complex2.createComplex((-1.0), 1.4142135623730951);
      complex6.cos();
      Complex complex8 = Complex.ZERO;
      complex7.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add((-5102.15578528));
      Complex complex2 = complex0.negate();
      complex1.ZERO.subtract(complex0);
      complex2.I.tanh();
      Complex complex3 = complex1.pow(0.17595365643501282);
      Complex complex4 = complex3.ONE.negate();
      complex4.cosh();
      Complex complex5 = complex2.multiply(complex3);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add((-5102.15578528));
      Complex complex2 = complex0.negate();
      complex2.I.tanh();
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex0.pow((-5102.15578528));
      Complex complex5 = complex4.negate();
      complex1.cosh();
      Complex complex6 = complex3.conjugate();
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(842.658);
      Complex complex1 = Complex.valueOf(842.658, 842.658);
      complex0.pow(complex1);
      Complex complex2 = new Complex(1079.320359, 1008.5649012753498);
      Complex complex3 = complex2.I.add(complex0);
      complex3.I.add(complex2);
      complex3.I.log();
      Complex complex4 = complex2.I.sqrt1z();
      complex0.pow(complex2);
      complex3.exp();
      complex4.ZERO.subtract(0.0);
      Complex complex5 = complex2.subtract(0.0);
      Complex complex6 = complex5.NaN.subtract(1079.320359);
      complex6.INF.negate();
      complex3.toString();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex0.log();
      complex8.tanh();
      complex9.tan();
      Complex complex11 = complex7.createComplex(1987.49, 3486.7);
      complex11.cos();
      Complex complex12 = Complex.ZERO;
      complex11.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.multiply(896);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = Complex.valueOf((-1490.28459101449));
      Complex complex5 = complex4.negate();
      Complex complex6 = Complex.INF;
      complex6.asin();
      complex3.divide(complex1);
      complex0.toString();
      complex1.nthRoot(1);
      complex1.cos();
      complex2.atan();
      Complex.valueOf(2067.0, 568284.6546971466);
      complex5.getArgument();
      complex2.subtract(-0.0);
      complex3.getImaginary();
      Complex complex7 = new Complex((-2557.08599921), (-1378.55498));
      Complex complex8 = complex7.pow(568284.6546971466);
      complex8.nthRoot(806);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.multiply(896);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.sinh();
      Complex.valueOf(0.0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.negate();
      complex1.asin();
      Complex complex6 = complex2.divide(complex4);
      complex0.toString();
      complex0.nthRoot(1);
      complex3.cos();
      complex5.atan();
      Complex complex7 = Complex.valueOf((-1690.4192), 0.0);
      complex0.getArgument();
      complex0.subtract(1036.0836);
      complex6.getImaginary();
      Complex complex8 = Complex.NaN;
      complex8.pow((-1490.28459101449));
      // Undeclared exception!
      complex7.nthRoot(2145873478);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(4.0, 0.0);
      complex1.abs();
      complex1.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.negate();
      complex1.equals(complex3);
      Complex complex4 = Complex.valueOf(0.0800878869904249, (-2416.139));
      complex4.subtract(0.0800878869904249);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2048.91605);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.tanh();
      complex3.INF.abs();
      Complex complex5 = complex0.ZERO.multiply((-35));
      complex5.ONE.subtract(complex0);
      complex4.multiply((-35));
      complex3.cos();
      complex0.log();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.I.pow((-4085.69678935792));
      Complex complex3 = complex0.cosh();
      complex3.tanh();
      Complex.valueOf(331.2534);
      complex3.NaN.add(complex1);
      Complex complex4 = complex3.atan();
      complex4.ONE.createComplex(1.2591900825500488, 0.0);
      complex3.getImaginary();
      complex2.isNaN();
      complex0.pow(6160.215253379357);
      Complex.valueOf(1.0611230602364477E-139);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ZERO.multiply(37);
      complex2.I.pow(Double.NaN);
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex0.pow(complex1);
      complex1.isNaN();
      Complex complex5 = complex4.INF.divide(complex3);
      Complex.valueOf(Double.NaN);
      complex5.INF.divide(complex0);
      int int0 = (-488);
      try { 
        complex4.nthRoot((-488));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -488
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-606.2120600989198), (-606.2120600989198));
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.NaN.getField();
      complex0.getImaginary();
      Complex complex2 = complex1.I.acos();
      complex2.ZERO.reciprocal();
      Object object0 = complex0.readResolve();
      complex0.I.getArgument();
      complex0.equals(object0);
      Complex complex3 = complex2.ZERO.multiply((-606.2120600989198));
      Complex.valueOf(0.0);
      complex3.atan();
      Complex complex4 = Complex.valueOf((-606.2120600989198));
      complex0.isNaN();
      complex1.abs();
      complex4.ZERO.cosh();
      Complex complex5 = complex0.add(complex4);
      complex1.sqrt();
      Complex.valueOf(1.5707963267948966);
      complex0.hashCode();
      complex0.INF.toString();
      complex5.add(0.0);
      complex5.I.subtract(0.0);
      complex4.conjugate();
      Complex complex6 = complex5.divide((-606.2120600989198));
      complex6.INF.sqrt();
      complex1.getField();
      Complex complex7 = Complex.valueOf(0.0);
      Complex.valueOf(0.0, (-606.2120600989198));
      complex2.multiply(1.0);
      complex2.tanh();
      complex0.hashCode();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex1.multiply(complex2);
      complex5.I.getArgument();
      complex0.NaN.multiply(0.0);
      Complex complex6 = Complex.valueOf(1453.74119061925);
      complex2.readResolve();
      Complex complex7 = complex6.NaN.tan();
      complex0.isInfinite();
      complex4.multiply(2677);
      complex3.pow(complex6);
      Complex complex8 = complex0.multiply(1.5707963267948966);
      complex8.NaN.divide(complex5);
      complex4.exp();
      complex7.conjugate();
      complex8.subtract(2282.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.createComplex((-3486.7), (-2154.0));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.ONE.multiply(0);
      complex0.getArgument();
      complex0.isInfinite();
      Complex complex4 = complex3.multiply(complex0);
      complex0.ZERO.acos();
      Complex complex5 = complex1.pow((-3486.7));
      complex3.I.toString();
      Complex complex6 = complex4.pow((-2154.0));
      Complex complex7 = complex4.conjugate();
      complex7.createComplex((-3486.7), (-20.0));
      complex5.subtract((-3486.7));
      Complex complex8 = complex4.add((-2154.0));
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex2.add(complex0);
      complex10.multiply(complex8);
      complex10.ONE.hashCode();
      complex8.readResolve();
      complex1.ONE.cos();
      complex6.abs();
      complex9.conjugate();
      Complex complex11 = complex2.multiply(complex8);
      complex11.ZERO.toString();
      Complex complex12 = complex4.exp();
      complex12.INF.tanh();
      complex12.sinh();
      complex5.pow(complex2);
      complex4.pow(complex5);
      Complex complex13 = complex11.subtract(0.0);
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      complex0.NaN.getArgument();
      Complex complex2 = complex0.I.reciprocal();
      complex1.ZERO.subtract(Double.NaN);
      Complex complex3 = complex2.INF.multiply((-482));
      Complex complex4 = complex1.INF.asin();
      Complex complex5 = complex4.ZERO.add((double) (-482));
      complex5.INF.getArgument();
      complex0.getReal();
      complex0.ONE.toString();
      Complex complex6 = complex0.negate();
      complex1.getImaginary();
      complex2.abs();
      complex6.toString();
      Complex complex7 = complex3.acos();
      complex7.I.sinh();
      complex3.I.reciprocal();
      complex7.NaN.exp();
      Complex complex8 = complex6.INF.multiply(complex7);
      complex8.getField();
      complex2.abs();
      complex0.ONE.log();
      complex6.getReal();
      complex2.reciprocal();
      try { 
        complex4.nthRoot((-482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -482
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 171.20131584555);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.NaN.sqrt1z();
      complex2.NaN.multiply((-1));
      Complex complex3 = complex0.multiply(171.20131584555);
      complex0.getReal();
      complex0.subtract(171.20131584555);
      complex3.getImaginary();
      complex1.createComplex((-3.614672661225457E131), (-862.4675706));
      Complex.valueOf(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(984.54);
      complex0.divide(complex1);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-753.84723565), 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.subtract(0.0);
      complex3.divide(0.0);
      complex3.pow((-1156.748734834204));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex1.ONE.tan();
      complex6.ONE.multiply(0.0);
      Complex complex7 = complex0.NaN.divide(complex1);
      complex7.INF.cosh();
      complex1.nthRoot(588);
      Complex complex8 = complex1.NaN.divide(4560.06002869369);
      complex1.ZERO.pow(complex0);
      Complex complex9 = complex0.reciprocal();
      complex5.getArgument();
      complex0.getField();
      complex7.getReal();
      complex9.negate();
      complex5.getArgument();
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sinh();
      complex0.I.createComplex(3670.710625610047, 3670.710625610047);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sinh();
      complex2.sqrt();
      complex1.abs();
      Complex.valueOf(329.840181319);
      complex1.asin();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add((-5102.15578528));
      Complex complex2 = complex0.negate();
      complex2.I.tanh();
      complex2.INF.divide(complex0);
      Complex complex3 = complex1.pow(0.17595365643501282);
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex4.cosh();
      complex5.I.conjugate();
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(4613.8071);
      Complex complex1 = complex0.ONE.multiply(1086.7);
      Complex complex2 = complex0.createComplex((-1203.127280322499), 4613.8071);
      complex1.INF.negate();
      Complex complex3 = complex2.I.tanh();
      complex2.getArgument();
      complex0.ZERO.toString();
      complex2.I.getArgument();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex5.NaN.divide(1.5707963267948966);
      complex1.getReal();
      complex1.pow(complex2);
      Complex.valueOf((-3.2161237736296753E-265));
      Complex complex7 = complex1.asin();
      Complex complex8 = complex1.I.acos();
      complex7.getArgument();
      complex6.getArgument();
      Complex complex9 = complex0.divide(complex6);
      complex9.divide(complex1);
      complex7.readResolve();
      complex7.INF.multiply(1086.7);
      complex9.ZERO.multiply(268.3206544766064);
      complex6.multiply(complex5);
      complex7.NaN.tanh();
      complex6.pow(1086.7);
      Complex complex10 = complex7.cosh();
      complex9.negate();
      complex6.toString();
      complex8.sqrt();
      complex10.getImaginary();
      complex3.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1287.386176, 1287.386176);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.add(complex1);
      complex0.INF.hashCode();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex3.ZERO.tanh();
      complex5.I.getArgument();
      complex4.createComplex(2296.1417816, 2296.1417816);
      Complex complex6 = complex0.subtract(2296.1417816);
      complex6.NaN.negate();
      Complex complex7 = complex6.add(complex3);
      complex0.multiply(complex3);
      complex7.pow(2381.580636349839);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.pow((-1947.14034));
      complex2.I.cosh();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.multiply((-1053));
      complex3.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.ZERO.multiply(complex1);
      complex1.I.multiply(975);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = Complex.NaN;
      complex5.ONE.multiply((double) 975);
      Complex complex8 = complex1.divide(complex7);
      complex5.isInfinite();
      complex0.I.negate();
      complex1.NaN.multiply(1);
      Complex complex9 = complex6.createComplex(975, (-3.1139472791083883E-8));
      Complex complex10 = complex7.negate();
      complex8.conjugate();
      complex9.INF.tanh();
      Complex complex11 = complex10.pow(complex8);
      complex11.ONE.multiply(1);
      Complex complex12 = complex8.sinh();
      complex9.atan();
      complex12.INF.tanh();
      complex4.getImaginary();
      complex6.pow(complex4);
      complex1.multiply((-3.1139472791083883E-8));
      complex12.getImaginary();
      complex3.atan();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.tanh();
      complex3.ZERO.multiply(4649);
      complex0.cos();
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.NaN.multiply(complex4);
      complex1.getArgument();
      Complex complex6 = complex0.multiply((double) 4649);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex0.ZERO.acos();
      complex3.subtract(0.0);
      complex1.sqrt1z();
      complex1.toString();
      complex2.equals("(0.7853981633974483, 0.0)");
      complex3.cos();
      Complex.valueOf(1.1702606678009033, 3064.39740202872);
      Complex complex9 = Complex.valueOf(0.0, 1891.651);
      complex7.divide(complex9);
      complex7.subtract(complex4);
      complex8.multiply(37);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-1102.6292), 0.0);
      complex0.readResolve();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.conjugate();
      complex2.NaN.toString();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.multiply(1);
      Complex complex5 = Complex.valueOf((-1102.6292), 0.0);
      complex4.INF.sin();
      complex1.getImaginary();
      Complex complex6 = Complex.valueOf((-302.853839));
      complex2.NaN.negate();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex2.cosh();
      complex4.log();
      complex5.getImaginary();
      complex7.subtract(complex6);
      complex2.multiply(0.0);
      complex8.subtract((-5.551115123125783E-17));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(1541.144842236936, 1541.144842236936);
      complex0.ZERO.getArgument();
      complex0.hashCode();
      complex0.getImaginary();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex0.INF.tanh();
      complex5.I.getArgument();
      complex4.ONE.subtract(complex0);
      complex4.ONE.getField();
      Complex complex6 = complex1.ONE.cosh();
      Complex complex7 = Complex.ZERO;
      complex6.I.multiply(complex7);
      complex0.isNaN();
      Complex complex8 = complex3.multiply(1);
      complex4.multiply(complex2);
      Complex complex9 = Complex.valueOf(1541.144842236936);
      complex1.NaN.cosh();
      complex0.NaN.acos();
      complex3.createComplex(3325.485122392, 1);
      Complex complex10 = complex9.add(complex1);
      complex10.NaN.divide((-2262.6574564554));
      complex3.reciprocal();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex0.ZERO.exp();
      complex1.tanh();
      Complex complex2 = complex1.I.subtract((-1132.02));
      Complex complex3 = complex1.INF.pow(1062.747573763892);
      complex3.NaN.nthRoot(1);
      complex0.sqrt();
      complex2.NaN.subtract((-1132.02));
      complex1.getImaginary();
      complex2.tan();
      Complex.valueOf(0.0, (-1132.02));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(2057.16727, (-1.5443717968117592E-8));
      complex0.I.abs();
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.NaN.negate();
      complex0.equals("");
      complex1.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-13.22447922924007));
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(48.79390828446721);
      complex1.NaN.pow(48.79390828446721);
      Complex complex3 = complex2.NaN.multiply(279);
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex4.ONE.exp();
      Complex complex9 = Complex.valueOf((-5111.6192053935));
      complex6.sqrt1z();
      complex4.ONE.tanh();
      Complex complex10 = complex0.conjugate();
      complex9.getArgument();
      complex4.readResolve();
      Complex complex11 = complex6.add(complex9);
      Complex complex12 = complex11.NaN.sin();
      complex12.INF.conjugate();
      Complex complex13 = complex5.subtract(complex8);
      complex10.hashCode();
      complex13.divide((-5111.6192053935));
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.cos();
      complex1.log();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ZERO.pow(0.0);
      Complex complex5 = complex0.ZERO.multiply(0.0);
      Complex complex6 = complex4.I.atan();
      complex0.toString();
      Complex complex7 = complex4.INF.acos();
      Complex.valueOf(2384.0);
      complex7.ONE.sin();
      Complex complex8 = Complex.valueOf(0.0);
      complex3.I.reciprocal();
      complex8.ONE.negate();
      complex7.ONE.divide((-1130.09169573289));
      Complex.valueOf(0.0);
      complex8.NaN.getArgument();
      Complex complex9 = complex7.INF.conjugate();
      complex7.ZERO.multiply(complex3);
      Complex complex10 = complex9.I.createComplex(1963.7493136, 1963.7493136);
      complex10.pow(complex2);
      complex9.I.cosh();
      complex1.hashCode();
      complex10.multiply(0);
      Complex complex11 = complex6.reciprocal();
      complex5.reciprocal();
      complex11.multiply((double) 0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-1634.30168222831));
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
      Complex complex2 = complex0.ZERO.sqrt();
      complex2.I.reciprocal();
      complex2.INF.pow(5489.08798);
      Complex complex3 = complex0.acos();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.add((-1.0));
      complex1.isNaN();
      Complex complex3 = complex0.add((-1.0));
      Complex complex4 = complex3.cosh();
      complex1.INF.subtract(complex3);
      complex4.NaN.createComplex((-1.0), Double.POSITIVE_INFINITY);
      complex1.reciprocal();
      complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.ONE.add((-1.0));
      Complex complex6 = complex5.I.log();
      complex6.NaN.tanh();
      complex0.tan();
      complex3.createComplex(423.0, 423.0);
      Complex complex7 = complex2.cos();
      Complex complex8 = Complex.ZERO;
      complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.acos();
      complex2.INF.multiply(complex0);
      Complex complex3 = complex0.multiply((-918.79));
      complex3.NaN.getField();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf((-3186.28166691745));
      complex4.isNaN();
      Complex complex7 = complex4.log();
      Complex complex8 = complex4.tanh();
      complex6.divide(complex8);
      Complex complex9 = complex8.tan();
      complex5.readResolve();
      complex1.getField();
      Complex complex10 = complex9.acos();
      complex10.INF.multiply(complex5);
      Complex complex11 = complex10.INF.pow((-3186.28166691745));
      complex11.I.add(complex0);
      complex6.getField();
      Complex complex12 = complex7.exp();
      complex8.acos();
      try { 
        complex12.nthRoot((-186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -186
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 545.4748357838;
      complex0.sqrt1z();
      Complex complex1 = complex0.createComplex(545.4748357838, 545.4748357838);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.I.pow(545.4748357838);
      complex1.I.readResolve();
      complex3.I.pow(complex0);
      Complex complex4 = complex2.ZERO.acos();
      Complex complex5 = complex3.ONE.asin();
      double double1 = 4105.93519;
      complex5.ONE.createComplex(4105.93519, 4105.93519);
      Complex complex6 = complex0.reciprocal();
      complex6.I.subtract(complex3);
      complex2.getField();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.INF.tanh();
      complex2.NaN.toString();
      Complex complex9 = complex3.multiply(545.4748357838);
      Complex complex10 = complex9.ONE.add(complex8);
      complex10.I.divide(complex8);
      complex9.isInfinite();
      complex9.asin();
      try { 
        complex4.nthRoot((-3854));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,854
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = Complex.valueOf(6.283185307179586);
      Complex complex4 = complex0.divide(6.283185307179586);
      Complex complex5 = complex0.I.divide(complex4);
      complex4.I.readResolve();
      Complex complex6 = complex4.divide(complex1);
      Complex complex7 = complex2.sqrt1z();
      complex4.ZERO.multiply(6.283185307179586);
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.ONE.cosh();
      Complex complex10 = Complex.valueOf(6.283185307179586);
      Complex complex11 = complex10.divide(complex7);
      complex6.getImaginary();
      complex7.I.cos();
      complex8.ZERO.divide(6.283185307179586);
      Complex complex12 = complex10.subtract(0.0);
      complex1.sqrt();
      complex10.ZERO.pow(0.0);
      Complex complex13 = complex9.subtract(0.0);
      complex11.tan();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex11.negate();
      complex9.equals(complex0);
      complex14.I.tanh();
      Complex complex16 = complex13.ONE.exp();
      complex12.readResolve();
      complex5.ZERO.abs();
      complex13.INF.subtract(6.283185307179586);
      complex9.isInfinite();
      complex13.subtract(complex5);
      complex16.multiply(complex14);
      complex16.tan();
      complex15.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.atan();
      complex1.INF.toString();
      complex0.I.hashCode();
      complex0.isInfinite();
      Complex complex2 = complex0.asin();
      complex2.getField();
      complex2.createComplex(0.0, 1716.3);
      complex1.hashCode();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.NaN.multiply(complex1);
      complex2.subtract(complex1);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-1566.59));
      complex0.abs();
      complex0.INF.exp();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex1.asin();
      complex5.ZERO.log();
      Complex complex6 = complex5.ONE.asin();
      complex6.I.acos();
      complex6.getField();
      Complex complex7 = complex0.ZERO.createComplex((-1566.59), (-1.178234251477505E-7));
      complex5.readResolve();
      Complex complex8 = complex0.sinh();
      complex0.abs();
      complex7.sinh();
      Complex complex9 = Complex.valueOf((-1.0));
      Complex complex10 = complex5.divide(complex9);
      complex3.asin();
      complex0.INF.pow((-1054.11192791756));
      complex8.reciprocal();
      complex0.toString();
      complex2.getArgument();
      complex10.sqrt1z();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3398.006);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = Complex.valueOf(0.0);
      complex0.add(complex2);
      complex0.getField();
      complex0.equals(complex2);
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex3.ZERO.subtract(complex4);
      complex5.ZERO.sinh();
      complex3.readResolve();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-1672.047541957765));
      complex0.I.sqrt();
      Complex complex1 = complex0.sin();
      try { 
        complex1.INF.nthRoot((-52));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -52
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(842.658);
      Complex complex1 = Complex.valueOf(842.658, 842.658);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = new Complex(1079.320359, 1008.5649012753498);
      Complex complex4 = complex3.I.add(complex0);
      complex4.I.add(complex3);
      complex4.I.log();
      Complex complex5 = complex3.I.sqrt1z();
      complex0.pow(complex3);
      complex4.exp();
      complex5.ZERO.subtract(0.0);
      Complex complex6 = complex3.subtract(0.0);
      Complex complex7 = complex6.NaN.subtract(1079.320359);
      complex7.INF.negate();
      complex4.toString();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex4.asin();
      complex9.negate();
      complex8.pow(0.0);
      complex5.sqrt();
      complex2.log();
      Complex complex10 = complex2.negate();
      Complex complex11 = complex3.sqrt();
      complex10.exp();
      complex4.equals(complex6);
      Complex complex12 = complex11.divide(0.0);
      Complex complex13 = complex12.INF.multiply(0.0);
      complex13.NaN.createComplex(1182.0, 0.0);
      complex4.cos();
      complex1.toString();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(2482);
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = Complex.valueOf((double) 2482);
      complex0.getArgument();
      complex3.I.conjugate();
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      Complex complex5 = complex4.sqrt1z();
      complex1.NaN.pow(complex2);
      complex5.NaN.nthRoot(1);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex1.multiply(0.0);
      complex7.conjugate();
      complex2.sqrt1z();
      complex6.sin();
      complex2.multiply((double) 2482);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(463.613117449932);
      Complex complex1 = complex0.NaN.subtract((-1577.49043380513));
      Complex complex2 = complex1.NaN.reciprocal();
      complex0.NaN.toString();
      Complex complex3 = complex0.I.multiply(463.613117449932);
      complex2.INF.divide((-1577.49043380513));
      Complex complex4 = complex0.createComplex(463.613117449932, (-387.02));
      complex0.isNaN();
      Complex complex5 = complex0.sqrt1z();
      complex2.exp();
      complex3.ONE.pow(complex1);
      complex1.INF.getField();
      Complex complex6 = complex4.I.multiply(1);
      Complex complex7 = complex6.I.sqrt1z();
      complex4.subtract(complex3);
      complex3.divide(complex4);
      complex1.getArgument();
      complex2.negate();
      Complex complex8 = complex5.reciprocal();
      complex6.ZERO.sqrt1z();
      Complex.valueOf(0.0);
      complex7.cosh();
      complex1.divide((-387.02));
      complex0.divide(1341.953054475);
      complex8.createComplex(20.0, 3255.2344551623883);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(7.2831502374676964E-9, 463.43);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.NaN.sinh();
      complex2.ZERO.cosh();
      complex1.ONE.getField();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1165.60706, 1165.60706);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.add(complex1);
      complex2.ONE.sinh();
      Complex complex4 = complex0.log();
      complex4.getArgument();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.I.cos();
      complex0.NaN.createComplex(1165.60706, 663.8173268381013);
      complex0.NaN.subtract(0.0);
      complex0.equals(complex5);
      complex4.readResolve();
      Complex.valueOf(0.10563176815125859);
      Complex complex7 = complex6.tan();
      complex4.NaN.toString();
      Complex complex8 = complex6.ONE.negate();
      complex8.ONE.add(1165.60706);
      complex7.NaN.sqrt();
      complex8.NaN.cos();
      complex7.isNaN();
      complex2.conjugate();
      complex6.hashCode();
      Complex complex9 = complex1.cos();
      complex9.subtract(0.0);
      complex4.subtract(0.40871500968933105);
      complex7.getArgument();
      complex9.isNaN();
      complex8.getArgument();
      complex3.divide((-1740.77620740544));
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.reciprocal();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-3737.846013));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.I.conjugate();
      complex2.I.getArgument();
      Complex.valueOf(272.87012561, 272.87012561);
      Complex complex3 = complex0.NaN.negate();
      complex3.ZERO.pow(complex2);
      complex0.cos();
      complex0.getArgument();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      complex1.I.toString();
      Complex complex2 = complex1.subtract(2.0);
      Complex complex3 = complex0.add(complex2);
      complex3.I.sqrt1z();
      complex3.ONE.acos();
      complex1.ONE.getArgument();
      Complex complex4 = complex2.NaN.multiply((-770));
      complex4.I.acos();
      complex3.ZERO.hashCode();
      complex0.hashCode();
      complex0.NaN.abs();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.subtract(1088.0);
      complex6.ONE.add((-1185.0));
      Complex.valueOf((-2258.7254616932337));
      complex6.pow(complex5);
      complex3.equals(complex6);
      complex3.isNaN();
      Complex.valueOf(Double.NaN);
      complex4.getImaginary();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1094.6917958871936);
      Complex complex1 = complex0.INF.cosh();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.sinh();
      complex1.ZERO.exp();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.sqrt();
      complex1.getImaginary();
      Complex complex5 = Complex.valueOf(1094.6917958871936);
      complex5.ZERO.add(856.3218952);
      Complex complex6 = Complex.valueOf(6.283185307179586);
      complex1.isInfinite();
      Complex complex7 = complex6.NaN.negate();
      assertTrue(complex7.equals((Object)complex2));
      
      Complex complex8 = Complex.valueOf(2468.2681455963652);
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex9.sqrt();
      complex4.INF.sqrt();
      Complex complex11 = complex6.reciprocal();
      Complex complex12 = complex6.acos();
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      complex11.NaN.getArgument();
      Complex complex13 = complex11.log();
      Complex complex14 = complex4.tanh();
      Complex complex15 = complex13.multiply(0);
      Complex complex16 = complex15.ZERO.multiply(1152);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertTrue(complex16.equals((Object)complex10));
      
      Complex complex17 = complex14.reciprocal();
      complex6.abs();
      complex9.log();
      String string0 = complex9.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex18 = complex5.negate();
      complex3.isInfinite();
      double double0 = complex11.abs();
      assertEquals(0.15915494309189535, double0, 0.01);
      
      complex18.getArgument();
      Complex complex19 = complex17.sqrt();
      assertEquals((-0.00503963782085433), complex19.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.multiply(896);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.sinh();
      Complex.valueOf((-1490.28459101449));
      complex3.ONE.negate();
      Complex complex4 = complex2.asin();
      complex4.INF.divide(complex1);
      complex4.ONE.toString();
      complex0.nthRoot(1);
      complex1.cos();
      Complex complex5 = complex0.atan();
      Complex.valueOf((-1095.375255599), (double) 1);
      complex1.getArgument();
      Complex complex6 = complex5.subtract(0.0);
      complex0.getImaginary();
      complex1.pow(165.169778619751);
      try { 
        complex6.nthRoot((-410));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -410
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
