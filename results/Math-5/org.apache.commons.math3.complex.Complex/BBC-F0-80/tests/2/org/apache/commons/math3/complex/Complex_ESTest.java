/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:29:33 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(3.4042761729010895E29);
      Complex complex1 = Complex.valueOf(3.4042761729010895E29, 3.4284156709489884E181);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1931.141);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.multiply((-743.2798285752651));
      Complex complex3 = complex1.acos();
      complex3.INF.hashCode();
      complex0.ONE.pow(complex2);
      complex0.ZERO.negate();
      Complex complex4 = complex0.atan();
      complex1.abs();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.NaN.cos();
      complex6.INF.pow((-181.1));
      Complex complex7 = complex5.I.negate();
      complex4.log();
      Complex complex8 = complex7.ONE.multiply(1929.9);
      complex8.I.getArgument();
      Complex complex9 = complex7.pow(1931.141);
      complex9.NaN.log();
      complex7.atan();
      Complex complex10 = complex9.add(complex2);
      complex10.ONE.sqrt1z();
      Complex.valueOf(1854.541253644, 1.5707963267948966);
      complex0.createComplex(319.23049626030405, (-181.1));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1.7947993330331995, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.1509928703308105, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex0.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.1509928703308105);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.NaN.acos();
      Complex complex1 = new Complex(1.6803826080210262E-18);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.tanh();
      Complex complex1 = complex0.multiply(1455.7473462677);
      try { 
        complex1.nthRoot((-2518));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,518
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      complex0.toString();
      Complex complex1 = complex0.add((-1.2631909085915044E114));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex(4.203159541613745E-8, Double.NaN);
      complex2.createComplex((-1.2631909085915044E114), Double.NaN);
      complex1.multiply(complex2);
      complex3.pow(Double.NaN);
      Complex complex4 = new Complex(4.203159541613745E-8, (-1.2631909085915044E114));
      complex4.sin();
      complex0.cos();
      Complex complex5 = complex0.tan();
      complex4.atan();
      complex5.getField();
      complex0.hashCode();
      Complex.valueOf((-2940.5286715), Double.NaN);
      Complex complex6 = complex0.cos();
      Complex complex7 = Complex.NaN;
      complex7.tanh();
      complex6.cosh();
      complex3.pow(complex6);
      Complex complex8 = complex5.exp();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.multiply(394);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(3.456595573934475E-209, (-20.0));
      complex0.tan();
      complex0.ZERO.hashCode();
      complex0.abs();
      complex0.subtract(20.0);
      complex0.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      complex1.subtract(complex0);
      Complex complex3 = Complex.INF;
      complex3.tan();
      Complex complex4 = new Complex((-20.0));
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex2.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(3285.4);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.add(3285.4);
      Complex complex3 = complex0.subtract(complex1);
      complex0.ONE.log();
      complex3.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.sin();
      Complex.valueOf(322861.67705368286, (-3998.94341740388));
      complex4.ZERO.negate();
      Complex complex5 = Complex.valueOf(2.018584871269913, 2555.756138218008);
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex7.sqrt1z();
      Complex.valueOf(20.0);
      complex8.NaN.sin();
      complex8.ONE.add(2.018584871269913);
      complex1.nthRoot(37);
      complex6.nthRoot(5317);
      Complex complex9 = complex3.reciprocal();
      complex1.acos();
      complex9.add(452.343174212);
      complex6.reciprocal();
      Complex complex10 = complex6.multiply(452.343174212);
      complex10.add(complex8);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      complex1.atan();
      complex1.toString();
      complex1.sin();
      complex0.multiply(989);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.add(Double.NaN);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-3605.64918));
      complex1.I.toString();
      Complex complex3 = complex1.subtract(complex2);
      complex0.toString();
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(3.456595573934475E-209, 5477052.0646243105);
      complex4.pow(complex3);
      complex2.asin();
      Complex complex5 = complex3.acos();
      complex0.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2582.86184428, 2582.86184428);
      Complex complex1 = complex0.ZERO.multiply(2582.86184428);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex(2582.86184428);
      complex4.equals(complex5);
      Complex complex6 = complex2.atan();
      complex5.getField();
      complex6.hashCode();
      Complex complex7 = Complex.valueOf(2582.86184428, (double) 989);
      complex2.cos();
      complex7.tanh();
      complex2.pow(complex7);
      complex3.exp();
      complex7.isInfinite();
      complex6.subtract(0.6749155521392822);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.76159416);
      complex0.multiply(2291.9609188149);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.reciprocal();
      complex0.getField();
      complex0.NaN.getField();
      complex2.I.negate();
      Complex complex4 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.subtract(complex4);
      complex4.NaN.pow(0.0);
      complex5.INF.pow(complex1);
      complex5.I.nthRoot(1088);
      Complex complex6 = complex5.divide(complex4);
      complex6.ONE.conjugate();
      complex4.I.sinh();
      complex6.NaN.abs();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.ONE.asin();
      complex1.pow(complex0);
      Complex complex9 = complex2.multiply(complex0);
      complex3.abs();
      Complex complex10 = complex1.pow((double) 1088);
      complex10.ONE.subtract(complex7);
      complex8.negate();
      complex9.asin();
      complex0.createComplex(Double.NaN, (-587.74));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ZERO;
      complex1.divide((-4610.842));
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.INF;
      complex1.divide(complex0);
      Complex.valueOf(1.3004305362701416);
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(929.9418, (-9.482896784430338E-8));
      Complex complex1 = complex0.ZERO.createComplex((-9.482896784430338E-8), 929.9418);
      complex0.NaN.getField();
      Complex complex2 = complex0.cosh();
      complex1.I.tanh();
      Complex complex3 = Complex.valueOf(929.9418, 5.638724693948384E-8);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = Complex.ONE;
      complex0.isNaN();
      complex4.toString();
      Complex complex6 = complex1.add(4.203159541613745E-8);
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = new Complex(5.638724693948384E-8, 5.638724693948384E-8);
      complex8.ZERO.createComplex((-9.482896784430338E-8), Double.NaN);
      Complex complex9 = complex2.multiply(complex6);
      complex9.NaN.sin();
      complex7.cos();
      Complex complex10 = complex7.tan();
      complex4.equals(complex10);
      Complex complex11 = complex4.atan();
      complex1.getField();
      complex11.hashCode();
      Complex complex12 = Complex.valueOf((-9.482896784430338E-8), (double) 2146488854);
      Complex complex13 = complex12.cos();
      Complex complex14 = complex6.tanh();
      complex14.cosh();
      complex3.pow(complex3);
      complex7.exp();
      complex10.tan();
      complex13.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2187.36577, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.pow(complex1);
      complex0.asin();
      complex3.acos();
      Complex complex4 = Complex.ZERO;
      complex4.nthRoot(943);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-12.102729635091741));
      Complex complex1 = new Complex((-12.102729635091741), (-12.102729635091741));
      Complex complex2 = new Complex((-12.102729635091741));
      complex0.pow((-136.8408142));
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      complex0.toString();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(929.9418, (-9.482896784430338E-8));
      Complex complex1 = complex0.ZERO.createComplex((-9.482896784430338E-8), 929.9418);
      complex0.NaN.getField();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.log();
      complex1.I.tanh();
      Complex complex4 = Complex.valueOf(929.9418, 5.638724693948384E-8);
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = Complex.ONE;
      complex0.isNaN();
      complex5.toString();
      Complex complex7 = complex3.add(4.203159541613745E-8);
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = new Complex(5.638724693948384E-8, 5.638724693948384E-8);
      complex9.ZERO.createComplex((-9.482896784430338E-8), Double.NaN);
      Complex complex10 = complex2.multiply(complex7);
      complex10.NaN.sin();
      complex8.cos();
      Complex complex11 = complex8.tan();
      complex5.equals(complex11);
      Complex complex12 = complex5.atan();
      complex1.getField();
      complex12.hashCode();
      Complex complex13 = Complex.valueOf((-9.482896784430338E-8), (double) 2146488854);
      complex13.cos();
      Complex complex14 = complex7.tanh();
      complex14.cosh();
      complex4.pow(complex4);
      complex8.exp();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      complex0.toString();
      complex0.toString();
      complex2.add(4.203159541613745E-8);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = new Complex(4.203159541613745E-8, 4.203159541613745E-8);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.multiply(complex1);
      complex6.sin();
      complex3.cos();
      complex6.tan();
      Complex complex7 = new Complex(1236.87, (-1.7018362564786431));
      complex5.equals(complex7);
      complex3.atan();
      complex4.getField();
      complex0.hashCode();
      Complex complex8 = Complex.valueOf(4.203159541613745E-8, 292.609119);
      complex1.cos();
      complex8.tanh();
      complex3.pow(complex0);
      complex7.exp();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      complex1.pow(complex0);
      complex1.tan();
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.0));
      complex0.hashCode();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.NaN;
      complex3.toString();
      Complex complex4 = complex3.tan();
      complex4.readResolve();
      Complex complex5 = Complex.valueOf(1.8200728928376444, Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.pow(complex1);
      complex5.asin();
      complex6.acos();
      try { 
        complex2.nthRoot((-3156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,156
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      complex0.toString();
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.NaN;
      complex0.sinh();
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex1.pow(complex5);
      complex4.tan();
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-568.2705173), 2.1706266226554237E-7);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.pow(complex0);
      complex3.I.pow(complex0);
      Complex complex4 = new Complex(650.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2582.86184428, 2582.86184428);
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(3.456595573934475E-209, 929.941799905171);
      complex1.pow(complex0);
      Complex complex2 = Complex.I;
      complex2.asin();
      Complex complex3 = Complex.valueOf((-6.920301994628805E11), (-6.920301994628805E11));
      complex3.acos();
      complex2.isInfinite();
      complex2.multiply(1611);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = Complex.ZERO;
      complex1.getImaginary();
      complex1.equals(complex2);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex.valueOf((-0.006666666666666667), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.toString();
      complex0.I.hashCode();
      complex0.NaN.getField();
      complex0.abs();
      Complex complex1 = complex0.atan();
      complex1.I.negate();
      complex1.createComplex(1.0, 7.126414081261746E-168);
      Complex complex2 = complex1.createComplex(1480.9872251052, 1040.761020963098);
      complex2.getArgument();
      Complex.valueOf(1.0, 1480.9872251052);
      complex2.cosh();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-150.0), (-150.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = Complex.valueOf((-150.0));
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.valueOf((-150.0), Double.POSITIVE_INFINITY);
      complex7.negate();
      complex5.tanh();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1327.1, (-457.01240045634));
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.INF;
      complex1.divide(complex2);
      Complex complex3 = complex1.sqrt();
      complex3.negate();
      complex2.nthRoot(951);
      Complex.valueOf((double) 951);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-150.0), 1.3004305362701416);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex2.sqrt();
      complex1.negate();
      // Undeclared exception!
      complex0.nthRoot(2146817507);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2582.86184428, 2582.86184428);
      complex0.ZERO.multiply(2582.86184428);
      complex0.hashCode();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-150.0), (-150.0));
      Complex complex1 = Complex.valueOf((-1104.2873426835));
      complex1.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.ZERO;
      complex1.toString();
      Complex complex4 = complex2.tan();
      complex2.INF.getArgument();
      complex4.readResolve();
      Complex complex5 = new Complex(1177.0651468966842, (-150.0));
      complex5.hashCode();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex1.ZERO.pow(6.283185307179586);
      Complex complex2 = complex1.ZERO.createComplex(6.283185307179586, 6.283185307179586);
      complex0.NaN.getField();
      Complex complex3 = complex0.subtract(complex1);
      complex3.subtract((-210.84));
      complex1.INF.exp();
      Complex complex4 = complex0.cosh();
      complex4.I.pow(7.4364594917181125E270);
      complex4.INF.tanh();
      complex1.abs();
      complex3.getField();
      complex2.multiply(2797);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(2.6351020392212376E-4, (-2.7527887552743672E-8));
      Complex complex2 = complex1.atan();
      complex2.ONE.readResolve();
      complex1.negate();
      Complex complex3 = complex0.exp();
      complex0.divide(complex3);
      complex1.readResolve();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-150.0), 1.3004305362701416);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.NaN;
      complex2.sinh();
      complex0.I.pow(complex2);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.add(complex3);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(8.403887374207366E221);
      Complex complex1 = complex0.sin();
      Complex.valueOf(0.0);
      complex1.toString();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = new Complex(8.403887374207366E221);
      complex4.toString();
      complex3.tan();
      complex1.readResolve();
      Complex.valueOf(3.456595573934475E-209, (-3605.649));
      Complex complex5 = complex3.pow(complex1);
      complex0.asin();
      complex5.acos();
      complex5.isInfinite();
      complex0.multiply((-1083));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2582.86184428, 2582.86184428);
      Complex complex1 = complex0.ZERO.multiply(2582.86184428);
      Complex complex2 = complex0.sinh();
      complex0.pow(complex2);
      complex1.tan();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      complex0.isNaN();
      complex0.toString();
      Complex complex2 = complex0.add(1.8428773880004883);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex2.add(complex0);
      complex1.multiply(complex0);
      complex0.sin();
      Complex complex5 = complex0.cos();
      complex5.tan();
      Complex complex6 = Complex.I;
      complex4.equals(complex6);
      complex4.atan();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.multiply(989);
      complex4.getField();
      complex3.hashCode();
      Complex.valueOf((-1.0), (-20.0));
      complex8.cos();
      Complex complex9 = complex2.tanh();
      complex6.pow(complex2);
      complex7.exp();
      complex9.isInfinite();
      complex4.subtract(1.4282730618002001E-8);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.sqrt();
      complex1.add(complex3);
      Object object0 = new Object();
      Object object1 = complex2.readResolve();
      complex3.equals(object1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.negate();
      complex0.getImaginary();
      complex1.toString();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.INF;
      complex3.exp();
      complex0.readResolve();
      Complex complex4 = Complex.INF;
      complex4.conjugate();
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex2.asin();
      complex2.acos();
      Complex complex8 = complex4.divide((-467.15163165));
      complex7.acos();
      complex5.sqrt1z();
      Complex complex9 = complex2.subtract(complex6);
      complex9.add(complex8);
      Object object0 = new Object();
      Object object1 = complex1.readResolve();
      complex2.equals(object1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-1415.62967675038));
      complex0.I.negate();
      complex0.divide(2605.003585629);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-3605.64918));
      complex1.I.toString();
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = new Complex(0.0);
      complex1.readResolve();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex1.cos();
      complex1.tan();
      complex6.equals(complex2);
      complex2.atan();
      Complex complex7 = Complex.INF;
      complex7.multiply(5656);
      complex5.getField();
      complex7.hashCode();
      Complex.valueOf((-791.94241362878), Double.NaN);
      Complex complex8 = complex2.tanh();
      complex7.pow(complex0);
      complex8.exp();
      complex3.isInfinite();
      complex5.subtract(2739.55);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-150.0), 1.3004305362701416);
      complex0.INF.negate();
      Complex complex1 = Complex.valueOf((-1923.0));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex2);
      complex3.sqrt();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.pow(1814.124136218);
      complex4.I.exp();
      Complex complex5 = (Complex)complex4.readResolve();
      complex1.conjugate();
      Complex complex6 = complex1.divide(complex4);
      Complex complex7 = complex1.multiply(complex2);
      Complex complex8 = complex6.sin();
      complex1.cos();
      complex5.tan();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = (Complex)complex1.readResolve();
      complex9.equals(complex10);
      Complex complex11 = complex3.atan();
      Complex complex12 = complex8.multiply(989);
      complex11.getField();
      complex6.hashCode();
      Complex.valueOf((-2942.96029374209), 723.7921);
      complex7.cos();
      complex9.tanh();
      complex3.pow(complex7);
      complex12.exp();
      complex5.isInfinite();
      complex7.subtract((-893.7607218632));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(929.9418, (-9.482896784430338E-8));
      Complex complex1 = complex0.ZERO.createComplex((-9.482896784430338E-8), 929.9418);
      complex0.NaN.getField();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = Complex.valueOf(929.9418, 5.638724693948384E-8);
      Complex complex6 = complex5.ONE.tanh();
      complex5.ZERO.readResolve();
      complex1.ONE.sqrt();
      complex0.isNaN();
      complex6.toString();
      Complex complex7 = complex3.add(4.203159541613745E-8);
      Complex complex8 = complex0.add(complex1);
      complex8.add(complex2);
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex9.asin();
      complex9.acos();
      Complex complex11 = complex4.divide(5.638724693948384E-8);
      complex11.ONE.divide(complex9);
      complex6.acos();
      complex5.sqrt1z();
      complex1.subtract(complex8);
      complex7.add(complex10);
      Object object0 = new Object();
      Complex complex12 = Complex.ONE;
      complex12.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      complex0.abs();
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.reciprocal();
      complex0.asin();
      Complex complex4 = complex2.acos();
      complex3.divide(0.0);
      complex3.acos();
      complex2.sqrt1z();
      Complex complex5 = complex4.subtract(complex3);
      complex1.add(complex3);
      Object object0 = new Object();
      complex5.equals("|Iqn");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-3605.64918));
      complex1.I.toString();
      complex0.subtract((-783.26182));
      complex1.abs();
      Object object0 = new Object();
      Complex complex3 = complex2.pow(767.92088);
      complex3.ZERO.pow(complex2);
      complex2.nthRoot(3531);
      complex3.equals(complex0);
      complex2.getReal();
      Complex complex4 = complex0.reciprocal();
      complex3.hashCode();
      Complex complex5 = new Complex((-3605.64918), (-3605.64918));
      Complex complex6 = complex4.sin();
      Complex complex7 = Complex.ZERO;
      complex7.divide(complex1);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.valueOf(0.0, 767.92088);
      complex8.divide(complex9);
      Complex complex10 = Complex.valueOf(2179.0);
      complex10.divide(0.0);
      complex6.sqrt1z();
      complex10.divide((-1569.68397339));
      complex3.add((-3605.64918));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(670.202801, 1177.7653257872637);
      Complex complex1 = complex0.ZERO.multiply(735.6);
      complex1.I.readResolve();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex2.log();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex0.subtract(complex3);
      Complex complex8 = complex2.ZERO.add(complex7);
      complex7.getImaginary();
      complex7.isNaN();
      complex3.ONE.log();
      complex8.divide(complex1);
      complex4.I.createComplex(212.484458, 212.484458);
      complex3.getField();
      Complex complex9 = complex7.conjugate();
      complex7.equals(complex9);
      complex4.readResolve();
      Complex complex10 = complex6.asin();
      complex10.toString();
      Complex complex11 = complex3.negate();
      complex10.pow(complex11);
      complex2.isNaN();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-2287.1870615396));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.tanh();
      complex2.INF.sinh();
      Complex complex3 = complex1.INF.createComplex((-2287.1870615396), (-2287.1870615396));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.INF.add(complex4);
      complex1.abs();
      complex3.isNaN();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex3.ZERO.sqrt1z();
      complex7.cos();
      complex4.ZERO.asin();
      complex5.isInfinite();
      complex4.createComplex((-20.0), 0.9942156584624142);
      complex6.NaN.readResolve();
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(1787.6687951483, 1787.6687951483);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ONE.negate();
      complex0.abs();
      Complex complex3 = Complex.valueOf(1787.6687951483);
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex4.NaN.multiply(2528.145455129896);
      complex4.I.readResolve();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex1.pow(complex6);
      Complex complex8 = complex6.createComplex(686.8937116, 5228.349212);
      complex8.ONE.add(complex1);
      Complex complex9 = complex8.I.exp();
      complex8.subtract(complex0);
      Complex complex10 = complex3.tan();
      Complex complex11 = complex2.acos();
      complex11.I.atan();
      Complex complex12 = complex11.NaN.tanh();
      complex7.exp();
      complex11.I.multiply((-1664));
      Complex complex13 = complex8.multiply(complex7);
      complex9.abs();
      complex12.getReal();
      complex1.log();
      complex10.sinh();
      complex8.log();
      complex2.hashCode();
      complex5.add(2528.145455129896);
      complex13.log();
      complex0.toString();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ONE.tanh();
      complex2.INF.tan();
      complex0.asin();
      Complex complex3 = complex0.ZERO.tan();
      complex0.divide(complex1);
      complex0.getArgument();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex4.subtract((-151.187066106494));
      complex5.abs();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(1467.785537328);
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.pow(complex2);
      complex3.I.getArgument();
      complex3.hashCode();
      complex1.getReal();
      Complex complex4 = complex1.pow((-3913.1316598121725));
      Complex complex5 = complex2.NaN.asin();
      Complex complex6 = complex4.createComplex(4.4651109654500895E-8, (-20.0));
      complex4.NaN.reciprocal();
      complex6.ZERO.multiply(1);
      complex3.tan();
      complex5.isInfinite();
      complex3.isNaN();
      complex6.reciprocal();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double double0 = (-1778.2530998128823);
      Complex complex0 = Complex.valueOf((-1778.2530998128823), (-275.2916));
      Complex complex1 = complex0.ZERO.divide((-275.2916));
      Complex complex2 = Complex.valueOf(2457.68, 2457.68);
      Complex complex3 = complex0.ZERO.add(0.0);
      Complex complex4 = complex3.INF.atan();
      complex3.I.acos();
      Complex complex5 = complex1.multiply(complex4);
      complex5.nthRoot(771);
      complex3.ONE.sqrt();
      complex0.multiply(complex2);
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.negate();
      complex0.getImaginary();
      complex1.toString();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.ONE.pow((-2260.439120756944));
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.ONE.subtract(0.0);
      Complex complex6 = complex5.ONE.multiply(139);
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex1.negate();
      complex3.getField();
      complex4.getReal();
      complex2.getImaginary();
      complex2.equals(complex8);
      Complex complex9 = complex5.exp();
      complex0.sqrt();
      complex9.sqrt();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      complex0.abs();
      complex0.toString();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(1.0);
      complex2.tan();
      complex1.divide((-3826.4831));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double double0 = 20.0;
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      int int0 = 1;
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex3.getField();
      complex4.I.reciprocal();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex5.conjugate();
      complex6.I.getField();
      complex6.subtract(20.0);
      complex5.ONE.multiply(1);
      complex6.I.abs();
      try { 
        complex2.nthRoot((-2013));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,013
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.NaN.getField();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.ONE.add(0.0);
      Complex complex5 = complex4.ZERO.reciprocal();
      complex0.readResolve();
      complex4.isInfinite();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex5.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex0.equals(complex2);
      Complex complex8 = complex3.negate();
      complex8.getReal();
      complex6.ZERO.negate();
      complex8.getReal();
      Complex complex9 = complex3.divide(complex2);
      Complex complex10 = complex6.exp();
      complex8.I.pow(Double.POSITIVE_INFINITY);
      complex6.ONE.tanh();
      complex0.equals(complex7);
      complex10.cos();
      Complex complex11 = complex3.createComplex(0.0, -0.0);
      complex11.atan();
      complex11.ONE.getField();
      complex10.sinh();
      complex4.log();
      Complex complex12 = complex9.atan();
      complex12.ONE.add(-0.0);
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(2720.905744108);
      complex0.ONE.multiply(complex2);
      Complex complex3 = complex1.NaN.divide(0.0);
      Complex complex4 = complex0.multiply(complex1);
      complex4.NaN.conjugate();
      complex3.ZERO.getArgument();
      complex1.sinh();
      Complex complex5 = complex0.ZERO.negate();
      Complex complex6 = complex3.sinh();
      complex6.INF.multiply((-2025));
      complex5.ZERO.atan();
      Complex complex7 = complex3.multiply(complex0);
      complex7.NaN.subtract(0.0);
      complex6.abs();
      Complex complex8 = complex6.sqrt1z();
      complex8.NaN.abs();
      complex6.isNaN();
      try { 
        complex5.nthRoot((-2025));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,025
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(475.8698551205, 475.8698551205);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.exp();
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex2.tan();
      complex3.ZERO.multiply((-1150.68689));
      Complex.valueOf(0.0);
      complex4.pow(complex2);
      complex4.readResolve();
      complex4.ONE.hashCode();
      Complex complex5 = complex4.subtract(complex3);
      complex5.ZERO.abs();
      Complex complex6 = complex5.I.acos();
      complex6.ONE.tan();
      Complex complex7 = complex3.asin();
      try { 
        complex7.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(2643.42, 2643.42);
      complex0.I.multiply(2643.42);
      Complex complex1 = complex0.ZERO.acos();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.tan();
      complex2.pow(0.0);
      complex2.INF.cos();
      Complex complex3 = complex2.tan();
      complex0.ZERO.add(2643.42);
      complex3.subtract(complex1);
      Complex complex4 = complex3.sin();
      complex4.I.pow(complex2);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.INF.tan();
      complex6.createComplex(0.0, 0.0);
      complex5.log();
      complex7.ZERO.toString();
      Complex complex8 = complex3.atan();
      complex8.getArgument();
      complex7.hashCode();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.NaN.cos();
      Complex complex3 = complex0.pow(1814.124136218);
      complex3.I.exp();
      complex3.readResolve();
      complex1.conjugate();
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex4.reciprocal();
      complex4.asin();
      Complex complex6 = complex5.I.acos();
      complex6.divide(1814.124136218);
      Complex complex7 = complex3.acos();
      complex7.NaN.sqrt1z();
      complex6.subtract(complex3);
      complex0.ONE.add(complex6);
      Object object0 = new Object();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1415.62967675038), 1066.149307545325);
      complex0.INF.negate();
      complex0.I.getArgument();
      complex0.getImaginary();
      Complex complex1 = complex0.multiply(509);
      complex1.multiply(2605.003585629);
      Complex.valueOf(1066.149307545325);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.atan();
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(639.39950579559);
      Complex complex1 = complex0.multiply((-1824));
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.ONE.add(complex3);
      Complex complex5 = complex3.ZERO.pow(complex0);
      complex3.getField();
      complex3.INF.exp();
      complex2.ZERO.tan();
      Complex complex6 = complex2.asin();
      complex6.ZERO.nthRoot(1);
      Complex complex7 = complex1.pow(complex0);
      complex2.INF.subtract(complex6);
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.NaN.multiply(complex0);
      Complex complex11 = complex10.ONE.atan();
      complex11.ONE.acos();
      complex1.INF.tan();
      Complex complex12 = complex7.INF.pow(2.5436339378356934);
      complex12.I.getField();
      complex3.getImaginary();
      complex7.acos();
      Complex complex13 = complex5.sin();
      complex3.I.log();
      complex13.I.nthRoot(1);
      Complex complex14 = Complex.valueOf((double) (-1824));
      complex13.I.subtract((double) (-1824));
      Complex.valueOf((double) (-1824), (-2887.29844441125));
      complex4.nthRoot(1);
      complex7.subtract(complex3);
      complex14.exp();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.abs();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = Complex.valueOf((-354.59));
      complex1.I.subtract(complex3);
      complex0.getImaginary();
      complex0.ZERO.acos();
      complex1.isInfinite();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.add(complex2);
      complex4.ZERO.sqrt();
      complex1.INF.pow(0.0);
      complex4.I.subtract(0.0);
      Complex complex6 = complex1.reciprocal();
      complex5.getField();
      complex6.INF.sqrt();
      complex2.ONE.createComplex(6.283185307179586, 0.0);
      complex0.multiply(complex5);
      try { 
        complex2.nthRoot((-831));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -831
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex2.ZERO.reciprocal();
      complex0.cosh();
      Complex complex4 = complex1.divide(complex3);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(2018.315145);
      complex0.NaN.toString();
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex1.NaN.log();
      complex3.multiply((-719.405766));
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex5.divide(complex1);
      complex5.I.acos();
      complex2.getImaginary();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.createComplex((-20.0), 227.98108162709264);
      complex8.cos();
      Complex.valueOf(-0.0, -0.0);
      complex4.getField();
      complex7.getField();
      Complex.valueOf(2018.315145, 765.06899);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(929.9418, (-9.482896784430338E-8));
      Complex complex1 = complex0.ZERO.createComplex((-9.482896784430338E-8), 929.9418);
      complex0.NaN.getField();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.log();
      complex1.I.tanh();
      Complex complex4 = Complex.valueOf(929.9418, 5.638724693948384E-8);
      Complex complex5 = complex4.ONE.tanh();
      complex4.ZERO.readResolve();
      Complex complex6 = complex1.ONE.sqrt();
      complex0.isNaN();
      complex5.toString();
      Complex complex7 = complex3.add(4.203159541613745E-8);
      Complex complex8 = complex0.add(complex1);
      complex8.add(complex2);
      Complex complex9 = complex2.multiply(complex7);
      complex9.NaN.sin();
      complex8.cos();
      Complex complex10 = complex8.tan();
      complex5.equals(complex10);
      Complex complex11 = complex5.atan();
      complex7.multiply(989);
      complex1.getField();
      complex11.hashCode();
      Complex complex12 = Complex.valueOf((-9.482896784430338E-8), (double) 989);
      complex12.cos();
      complex7.tanh();
      Complex complex13 = complex6.pow(complex4);
      complex8.exp();
      complex8.isInfinite();
      complex13.subtract(5.638724693948384E-8);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.exp();
      complex0.toString();
      complex0.INF.acos();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex3.negate();
      complex1.createComplex((-601.2954651), 1.4672790944499144E-8);
      Complex.valueOf((-601.2954651), (-601.2954651));
      complex2.add(1.4672790944499144E-8);
      complex4.createComplex(2221.632047480804, (-1303.5));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex0.createComplex(5.011, 5.011);
      complex3.INF.abs();
      complex0.I.log();
      Complex complex4 = complex1.NaN.acos();
      Complex complex5 = complex4.I.sqrt1z();
      complex5.sqrt1z();
      Complex complex6 = complex3.cos();
      complex6.abs();
      complex0.isInfinite();
      complex3.toString();
      complex1.createComplex(5.011, 5.011);
      complex0.acos();
      complex2.subtract(5.011);
      complex0.divide(75.02460262313627);
      complex0.pow(complex1);
      int int0 = (-68);
      try { 
        complex2.nthRoot((-68));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -68
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1440.6314846313));
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.log();
      complex3.NaN.cos();
      complex2.INF.multiply(17);
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex1.tanh();
      complex1.isNaN();
      Complex complex6 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex0.INF.sinh();
      complex8.pow(complex6);
      Complex complex9 = complex7.ZERO.reciprocal();
      complex4.I.nthRoot(17);
      complex9.ONE.log();
      Complex complex10 = complex2.pow(complex7);
      complex10.ONE.negate();
      complex10.ZERO.readResolve();
      complex1.log();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex11.INF.cosh();
      complex3.toString();
      complex4.cosh();
      complex11.subtract(Double.NaN);
      Complex complex13 = complex7.tanh();
      complex3.createComplex(0.23941665887832642, (-1440.6314846313));
      complex6.add(complex13);
      complex0.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      Complex.valueOf((-3605.64918));
      complex1.I.toString();
      Complex complex2 = complex1.I.subtract(complex0);
      complex2.ZERO.toString();
      complex0.tan();
      complex1.readResolve();
      Complex complex3 = Complex.valueOf(3.456595573934475E-209, 0.0);
      Complex complex4 = complex2.pow(complex3);
      complex2.ONE.asin();
      Complex complex5 = complex4.acos();
      complex5.isInfinite();
      complex0.multiply((-1083));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(2.6338455225993276E-166, 2.6338455225993276E-166);
      Complex complex1 = complex0.multiply(0);
      complex1.sqrt1z();
      Complex complex2 = Complex.valueOf(6.000235114895513E123, (-9.524376551107945E-9));
      complex0.getArgument();
      complex2.INF.cosh();
      complex0.I.multiply(0);
      Complex complex3 = complex0.pow(286.4685680710325);
      complex3.INF.pow(complex0);
      complex3.I.tanh();
      complex2.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-183.1689881221172), 1121.6727731);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.INF.reciprocal();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.abs();
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.NaN.subtract(0.0);
      complex4.INF.abs();
      Object object0 = new Object();
      Complex complex5 = complex1.NaN.pow(1077.220617946);
      complex0.ZERO.nthRoot(3531);
      complex0.equals(object0);
      complex0.getReal();
      complex4.reciprocal();
      complex0.hashCode();
      Complex complex6 = complex3.negate();
      complex6.ONE.sin();
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = Complex.ZERO;
      complex7.divide(complex8);
      complex4.divide(0.0);
      complex1.sqrt1z();
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.asin();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      double double0 = 0.0;
      complex2.ZERO.pow(0.0);
      int int0 = (-3330);
      Complex complex3 = complex2.multiply((-3330));
      complex3.NaN.sinh();
      try { 
        complex3.INF.nthRoot((-3330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,330
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      complex2.I.abs();
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex0.ONE.negate();
      complex4.I.reciprocal();
      complex0.isInfinite();
      complex0.getImaginary();
      complex1.exp();
      complex2.isInfinite();
      Complex.valueOf(0.0, 0.0);
      complex3.equals(object0);
      Complex complex5 = complex0.pow(0.0);
      complex0.I.getField();
      complex5.asin();
      complex2.hashCode();
      complex5.subtract((-204.606));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.sinh();
      complex0.NaN.negate();
      complex2.INF.getArgument();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex4.INF.conjugate();
      complex5.sqrt1z();
      complex3.INF.cosh();
      Complex complex6 = Complex.valueOf((-20.0), 0.0);
      complex3.isInfinite();
      Complex complex7 = complex6.sqrt();
      complex7.asin();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex0.ZERO.pow(complex1);
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.I.divide(1.817649308779104E117);
      Complex complex4 = complex2.ZERO.subtract(complex0);
      complex2.I.sqrt1z();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.I.sqrt1z();
      complex6.atan();
      complex0.INF.toString();
      complex4.getArgument();
      Complex complex7 = complex0.multiply(1426.0);
      complex2.acos();
      complex5.abs();
      Complex complex8 = complex0.NaN.subtract(complex4);
      Complex complex9 = complex8.INF.sinh();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      complex8.INF.subtract(complex10);
      complex9.I.tan();
      complex9.NaN.divide(complex3);
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2094.498416579), (-2094.498416579));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.NaN.multiply(1.4672790944499144E-8);
      complex1.sqrt();
      complex0.I.getArgument();
      Complex complex3 = complex2.divide((-2094.498416579));
      complex2.INF.createComplex(632.7432319722774, 1.4672790944499144E-8);
      complex3.multiply((-1546));
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.add(complex2);
      complex5.getArgument();
      complex0.readResolve();
      complex2.add((-2094.498416579));
      complex1.readResolve();
      Complex complex6 = complex4.createComplex((-1282.63591), (-2094.498416579));
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.exp();
      complex0.toString();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.ONE.sinh();
      complex3.NaN.abs();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.NaN.sinh();
      complex5.ZERO.tan();
      complex4.INF.multiply(complex1);
      Complex complex6 = Complex.valueOf((-778.81924654));
      Complex complex7 = complex6.ONE.exp();
      complex7.INF.log();
      Complex complex8 = complex2.I.sqrt();
      complex6.ONE.getArgument();
      complex6.getField();
      Complex complex9 = complex2.sinh();
      complex9.acos();
      complex8.divide(0.0);
      Complex complex10 = complex8.sin();
      Complex complex11 = complex10.asin();
      complex11.getField();
      complex10.getField();
      int int0 = 0;
      complex11.NaN.subtract((-434.222977626));
      try { 
        complex11.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.getImaginary();
      complex0.getField();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      complex1.isInfinite();
      complex0.getReal();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.asin();
      complex0.abs();
      complex3.getField();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2582.86184428, 2582.86184428);
      Complex complex1 = complex0.ZERO.multiply(2582.86184428);
      complex0.hashCode();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.reciprocal();
      complex1.INF.getArgument();
      complex0.isInfinite();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.reciprocal();
      complex0.isInfinite();
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex1.INF.asin();
      Complex complex7 = complex6.I.reciprocal();
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.tan();
      Complex complex9 = complex3.ONE.sin();
      Complex complex10 = complex9.ONE.negate();
      Complex complex11 = Complex.valueOf(0.7853981633974483);
      Complex complex12 = complex11.INF.asin();
      complex2.INF.hashCode();
      complex12.ONE.getArgument();
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex10.INF.multiply(1435);
      Complex complex14 = complex9.I.subtract(complex3);
      Complex complex15 = complex9.add((-1125.714937));
      complex15.ZERO.log();
      complex15.I.subtract(complex13);
      assertEquals((-1124.873466015192), complex15.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      complex3.INF.add(complex5);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex16 = complex3.multiply(82.29);
      Complex complex17 = complex8.tanh();
      assertEquals(0.9534903170187385, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      
      complex9.isNaN();
      assertTrue(complex3.equals((Object)complex16));
      
      Complex complex18 = Complex.valueOf((-5.7694907599522404E-9));
      Complex complex19 = complex4.tan();
      assertEquals(1.557407724654902, complex19.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex14));
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      
      Complex complex20 = complex18.tan();
      assertFalse(complex20.isNaN());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      double double0 = 20.0;
      Complex complex0 = new Complex(20.0, 20.0);
      int int0 = (-727);
      try { 
        complex0.ZERO.nthRoot((-727));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -727
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(377.17, 377.17);
      complex0.INF.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.subtract(349.8124384);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.INF.add(complex0);
      Object object0 = complex3.ONE.readResolve();
      Complex complex5 = complex3.ZERO.exp();
      assertEquals((-349.8124384), complex2.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)object0));
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex0.INF.subtract(349.8124384);
      Complex complex8 = complex7.I.multiply(0.0);
      assertTrue(complex7.isInfinite());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = Complex.valueOf(793.715175937892, (-5.907349480138712E-8));
      assertEquals(793.715175937892, complex9.getReal(), 0.01);
      
      Complex complex10 = complex1.INF.sinh();
      Complex complex11 = complex6.INF.multiply((-1783.343554329));
      double double0 = complex11.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      complex0.isNaN();
      complex11.equals(complex1);
      assertTrue(complex11.equals((Object)complex4));
      
      Complex complex12 = complex1.sqrt();
      Complex complex13 = complex12.divide(complex10);
      Complex complex14 = complex13.atan();
      assertSame(complex13, complex6);
      assertTrue(complex12.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex14.isNaN());
      
      double double1 = complex0.getReal();
      assertEquals(377.17, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(377.17, double1, 0.01);
  }
}
