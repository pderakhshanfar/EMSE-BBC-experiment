/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:07:15 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.028654401260733E11, Double.POSITIVE_INFINITY);
      complex0.multiply(2.028654401260733E11);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1.3868234181799397), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.030901043871287, 2.030901043871287);
      Complex complex1 = complex0.sinh();
      Complex.valueOf(2.030901043871287);
      Complex complex2 = complex1.conjugate();
      complex2.acos();
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.ZERO;
      complex5.reciprocal();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.tan();
      complex6.readResolve();
      Complex complex8 = complex7.subtract(complex2);
      Complex complex9 = complex8.sin();
      complex2.cos();
      Complex complex10 = Complex.ZERO;
      complex6.log();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex9.negate();
      complex9.readResolve();
      Complex complex13 = complex11.asin();
      Complex complex14 = Complex.NaN;
      complex13.tan();
      Complex complex15 = Complex.ZERO;
      Complex complex16 = complex15.negate();
      complex6.nthRoot(17);
      Object object0 = complex10.readResolve();
      complex16.equals(object0);
      complex5.sqrt1z();
      complex12.acos();
      try { 
        complex9.nthRoot((-2148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,148
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = Complex.valueOf(262.7990525, 262.7990525);
      complex1.nthRoot(17);
      complex1.equals(complex0);
      Complex complex2 = complex1.sqrt1z();
      Complex.valueOf(31.73183623065399);
      complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0);
      complex0.tanh();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sinh();
      Complex complex1 = Complex.ZERO;
      complex1.readResolve();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex(2.139863967895508, Double.NaN);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex2.tan();
      complex7.acos();
      complex0.conjugate();
      complex3.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex((-1.0543075713098835E-10), (-1.0543075713098835E-10));
      complex0.acos();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.NaN;
      complex4.readResolve();
      Complex complex5 = Complex.I;
      complex0.subtract(complex5);
      complex1.sin();
      complex3.cos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ZERO;
      complex7.log();
      complex5.tan();
      Complex complex8 = complex3.negate();
      complex0.readResolve();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.valueOf(0.6369074583053589, Double.NaN);
      Complex complex11 = complex10.tan();
      complex6.negate();
      Object object0 = complex11.readResolve();
      complex0.equals(object0);
      complex8.nthRoot(478);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.94912101169977E158);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex.valueOf(2.030901043871287, 2.030901043871287);
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.8671100679057417E-4, 0.7665617234030716);
      complex1.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = complex0.multiply(2.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.cosh();
      complex0.getField();
      complex2.INF.readResolve();
      complex0.NaN.getArgument();
      Complex complex4 = complex0.sqrt1z();
      complex1.tan();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.I.multiply(2147483604);
      complex2.getField();
      complex3.sin();
      complex5.NaN.sqrt1z();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex2.pow(complex7);
      complex4.abs();
      complex4.I.log();
      Complex complex9 = complex5.subtract(complex8);
      Complex complex10 = complex7.INF.divide(complex6);
      complex7.INF.exp();
      complex10.NaN.tanh();
      Complex complex11 = complex7.I.subtract(Double.NaN);
      complex9.ZERO.sinh();
      try { 
        complex11.INF.nthRoot((-1647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,647
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(703.82066999);
      Complex complex1 = complex0.INF.sqrt();
      complex0.isInfinite();
      Complex complex2 = complex0.asin();
      complex2.exp();
      complex1.tanh();
      complex2.abs();
      complex2.getImaginary();
      complex1.exp();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(27);
      complex0.NaN.nthRoot(276);
      Complex complex2 = complex0.add((-3942.275565961923));
      Complex complex3 = complex1.ZERO.conjugate();
      complex0.abs();
      complex2.INF.abs();
      Complex complex4 = complex2.I.reciprocal();
      complex2.isInfinite();
      Complex complex5 = complex1.divide((-20.0));
      Complex complex6 = Complex.I;
      complex6.readResolve();
      complex5.subtract(complex1);
      complex3.ONE.pow(complex6);
      complex4.acos();
      Complex complex7 = complex2.add(complex0);
      complex1.divide(complex2);
      Complex complex8 = complex7.reciprocal();
      complex8.INF.abs();
      complex3.tanh();
      complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex2.add((double) 276);
      complex1.sin();
      complex4.reciprocal();
      complex4.toString();
      complex5.toString();
      complex9.sqrt1z();
      Complex.valueOf(0.0, 3330.72);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.INF.negate();
      complex2.NaN.multiply(1.8503980729643883E-4);
      complex3.subtract(1.8503980729643883E-4);
      Complex complex4 = Complex.I;
      complex2.toString();
      Complex complex5 = complex4.tan();
      complex5.INF.pow(1.0);
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex2.multiply(1160.0);
      Complex complex8 = Complex.valueOf(1160.0);
      complex8.ZERO.sinh();
      Complex complex9 = complex7.ONE.sin();
      complex4.conjugate();
      Complex.valueOf(1.0);
      Complex complex10 = complex0.asin();
      complex3.add(2651.7113243);
      complex5.tan();
      Complex complex11 = complex9.atan();
      complex11.I.toString();
      complex6.reciprocal();
      complex6.negate();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.add(Double.NaN);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.abs();
      Complex complex1 = complex0.acos();
      complex1.NaN.hashCode();
      Complex complex2 = complex1.I.multiply(0.0);
      complex2.INF.add((-1283.99697));
      complex2.ZERO.negate();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      complex4.tanh();
      complex4.acos();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.subtract(complex0);
      complex2.nthRoot(874);
      Complex complex3 = complex0.multiply((-3659.724171187762));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.sqrt();
      complex0.INF.subtract((double) 874);
      Complex complex6 = Complex.valueOf(1.0476612E7, 6.943684261645378E-10);
      Complex complex7 = complex0.tanh();
      complex7.INF.cos();
      complex0.getImaginary();
      Complex complex8 = complex2.pow(complex5);
      complex8.ONE.getField();
      Complex complex9 = complex8.NaN.sinh();
      complex8.NaN.sin();
      complex9.I.multiply(1562);
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex10.ZERO.subtract(complex6);
      complex3.nthRoot(874);
      complex1.subtract(complex7);
      Complex complex12 = complex7.multiply((-3659.724171187762));
      Complex complex13 = complex0.add(complex6);
      Complex.valueOf(1.0);
      complex3.multiply((-3659.724171187762));
      complex13.multiply(complex6);
      complex12.isInfinite();
      Complex complex14 = complex11.cosh();
      complex14.NaN.multiply((-50.32));
      Complex complex15 = complex4.createComplex((-1747.8306), 1295.6891385714923);
      complex15.log();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.030901043871287, 2.030901043871287);
      Complex complex1 = Complex.INF;
      complex0.ONE.multiply(complex1);
      Complex complex2 = complex0.sinh();
      complex0.conjugate();
      Complex.valueOf(2.030901043871287);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.pow(2.030901043871287);
      complex4.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = Complex.INF;
      complex0.subtract(Double.POSITIVE_INFINITY);
      complex0.atan();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 2.0);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(2145);
      Complex complex1 = Complex.valueOf((double) 2145, (-20.0));
      Complex complex2 = Complex.ONE;
      complex0.asin();
      Complex complex3 = Complex.ONE;
      complex0.conjugate();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = 16.03283162036044;
      double double1 = 1187.6;
      Complex complex0 = Complex.valueOf(16.03283162036044, 1187.6);
      double double2 = (-20.0);
      complex0.divide((-20.0));
      Complex complex1 = complex0.tanh();
      complex1.NaN.pow(16.03283162036044);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-1106.794), (-1106.794));
      Complex complex1 = complex0.subtract((-1106.794));
      Complex complex2 = complex0.pow(complex1);
      complex1.sqrt();
      Complex complex3 = Complex.ZERO;
      complex0.log();
      Complex complex4 = complex1.log();
      complex3.readResolve();
      complex4.multiply(2097);
      complex1.tanh();
      complex1.exp();
      Complex complex5 = complex3.acos();
      complex2.add((double) 2097);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(713.258384014);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.tanh();
      complex5.acos();
      complex5.I.divide(Double.NaN);
      complex3.acos();
      complex4.subtract(713.258384014);
      complex3.atan();
      complex0.pow(complex2);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.createComplex(2.02598237991333, 0.2160975775082404);
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex1.subtract(0.2160975775082404);
      complex2.acos();
      complex3.subtract((-20.0));
      Complex complex4 = new Complex(Double.NaN, 1327.16886);
      complex0.acos();
      complex0.subtract(582.096844338039);
      complex2.atan();
      Complex complex5 = new Complex(2.02598237991333);
      Complex complex6 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1985.9639256868854, 1985.9639256868854);
      complex0.acos();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.subtract(1985.9639256868854);
      complex1.atan();
      complex0.pow(complex2);
      Complex complex3 = new Complex(1985.9639256868854, 1985.9639256868854);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-2518.5316378940734));
      complex0.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.createComplex(0.0, 2810.4205622155755);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.subtract((-2518.5316378940734));
      complex2.ONE.atan();
      Complex complex5 = new Complex((-2518.5316378940734), (-1836.43944319304));
      complex5.acos();
      Complex complex6 = complex4.subtract(1.1857939200074815E-7);
      Complex complex7 = complex4.pow(complex6);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.I.readResolve();
      Complex complex2 = complex0.ZERO.subtract(20.0);
      complex2.I.pow(complex0);
      Complex complex3 = complex1.createComplex(0.0, 92.75133);
      Complex.valueOf(20.0);
      Complex complex4 = Complex.ONE;
      complex4.subtract(212.16361136356608);
      complex3.atan();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 92.75133);
      Complex complex6 = complex0.acos();
      complex6.subtract(Double.POSITIVE_INFINITY);
      complex0.atan();
      Complex complex7 = new Complex(0.0021574947924545866);
      complex7.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7898464.736524112, 7898464.736524112);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tanh();
      complex2.ONE.pow(707.6);
      complex0.NaN.cos();
      Complex complex3 = complex0.NaN.createComplex(707.6, (-2569.2831297651605));
      complex3.INF.exp();
      Complex complex4 = complex0.sin();
      complex0.getImaginary();
      Complex complex5 = complex4.INF.divide(complex0);
      complex4.conjugate();
      complex5.ONE.atan();
      complex4.log();
      Complex complex6 = Complex.valueOf(707.6, 0.41421356237309515);
      complex6.ZERO.getField();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex5.tanh();
      Complex.valueOf(7898464.736524112);
      complex8.I.add(complex0);
      complex8.abs();
      Complex.valueOf(2.0);
      Complex complex9 = complex2.sin();
      complex7.atan();
      complex9.divide(2.0);
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      complex0.createComplex(Double.POSITIVE_INFINITY, 2.0);
      Complex complex2 = Complex.valueOf(1471.0);
      complex2.acos();
      Complex complex3 = Complex.INF;
      complex3.pow(complex2);
      Complex.valueOf(1471.0, (-3.0));
      complex1.divide(2.0);
      complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1984.56, 1984.56);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.negate();
      complex2.readResolve();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.tan();
      complex4.negate();
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex((-4695.75739005366));
      complex5.equals(complex6);
      complex4.sqrt1z();
      complex5.acos();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-68.53289276));
      Complex complex1 = complex0.subtract((-68.53289276));
      Complex complex2 = complex0.acos();
      complex2.NaN.sin();
      complex1.subtract((-20.0));
      Complex complex3 = complex1.atan();
      complex3.pow(complex0);
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.log();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.sqrt();
      complex0.readResolve();
      Complex complex8 = complex7.multiply((-2846));
      Complex complex9 = complex8.tanh();
      complex9.exp();
      complex3.subtract(complex1);
      Complex complex10 = Complex.valueOf((double) (-2846));
      complex5.hashCode();
      complex10.exp();
      complex9.getField();
      complex9.log();
      complex8.sin();
      complex0.isNaN();
      Complex complex11 = Complex.valueOf((double) (-2846), (double) 2097);
      complex11.sqrt();
      complex6.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex0.I.readResolve();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ZERO.subtract(20.0);
      complex3.I.pow(complex2);
      complex3.ONE.sqrt();
      complex2.createComplex(0.0, 1.4672790944499144E-8);
      Complex.valueOf(0.0);
      Complex complex4 = complex3.subtract((-0.5707963267948966));
      Complex complex5 = Complex.INF;
      complex5.atan();
      Complex complex6 = new Complex((-323.844516739), Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.acos();
      complex4.subtract((-1.483283901239408E-9));
      complex7.atan();
      Complex complex8 = Complex.INF;
      complex8.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.030901043871287, 2.030901043871287);
      Complex complex1 = Complex.INF;
      complex0.ONE.multiply(complex1);
      Complex.valueOf(2.030901043871287, 2.030901043871287);
      Complex complex2 = complex0.ONE.pow(0.0);
      Complex complex3 = complex0.sinh();
      complex0.conjugate();
      complex2.acos();
      Complex.valueOf(0.0, 2.030901043871287);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.INF.reciprocal();
      complex3.tan();
      complex0.readResolve();
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = complex4.sin();
      Complex complex8 = complex3.cos();
      complex8.ONE.tan();
      complex6.negate();
      complex4.sinh();
      complex4.tan();
      Complex complex9 = complex7.negate();
      Complex complex10 = new Complex((-323.844516739), (-323.844516739));
      Object object0 = complex10.readResolve();
      complex10.equals(object0);
      Complex complex11 = new Complex((-1065.2884754943));
      complex11.sqrt1z();
      Complex complex12 = Complex.ONE;
      complex12.acos();
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.030901043871287, 2.030901043871287);
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = complex0.cosh();
      complex1.createComplex(2.030901043871287, 2810.4205622155755);
      Complex complex3 = Complex.valueOf(473.9218735);
      Complex complex4 = complex3.subtract(3603.41889);
      Complex complex5 = complex2.acos();
      complex5.subtract((-20.0));
      complex2.atan();
      complex4.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.030901043871287, 2.030901043871287);
      Complex complex1 = Complex.INF;
      complex0.ONE.multiply(complex1);
      Complex.valueOf(2.030901043871287, 2.030901043871287);
      Complex complex2 = complex0.ONE.pow(0.0);
      Complex complex3 = complex0.sinh();
      complex0.conjugate();
      complex2.acos();
      Complex complex4 = Complex.valueOf(0.0, 2.030901043871287);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.INF.reciprocal();
      complex3.tan();
      complex0.readResolve();
      Complex complex7 = complex6.subtract(complex3);
      complex7.readResolve();
      Complex complex8 = complex3.multiply(326830083);
      complex6.tanh();
      Complex complex9 = Complex.ZERO;
      complex9.exp();
      complex7.subtract(complex5);
      Complex complex10 = new Complex(326830083);
      complex4.hashCode();
      complex7.exp();
      complex8.getField();
      complex5.log();
      complex1.sin();
      complex7.isNaN();
      complex5.sqrt();
      complex2.equals(complex1);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-2.3450920230816267E-8));
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf(1836.43944319304);
      complex0.hashCode();
      Complex complex2 = complex0.multiply(337.00261593);
      complex1.toString();
      complex0.equals(complex2);
      Complex complex3 = complex0.reciprocal();
      complex3.I.conjugate();
      Complex complex4 = complex3.I.log();
      complex4.NaN.pow(2.0);
      complex3.ZERO.subtract((-2.3450920230816267E-8));
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex5.I.divide(complex0);
      complex6.abs();
      Complex complex7 = complex0.log();
      complex6.NaN.createComplex(3.7485528226129495E-163, (-1362.9876528380405));
      complex0.add(complex7);
      complex6.exp();
      Complex.valueOf(2.5338279333399964E-272, 3.1613917467297413E135);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.atan();
      complex2.NaN.exp();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.INF.subtract(0.3784096837043762);
      complex1.nthRoot(2547);
      Complex complex4 = complex0.acos();
      complex4.ZERO.sqrt();
      complex4.readResolve();
      Complex complex5 = complex4.ZERO.multiply(37);
      Complex complex6 = complex5.tanh();
      complex0.exp();
      Complex complex7 = complex6.I.subtract(complex1);
      complex7.ONE.hashCode();
      Complex complex8 = complex0.exp();
      complex3.getField();
      complex0.log();
      Complex complex9 = complex8.sin();
      complex4.isNaN();
      complex9.sqrt();
      complex5.isInfinite();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.subtract(5.583037134407759E-85);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex1.I.tanh();
      complex0.ONE.acos();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex5.ZERO.sinh();
      complex1.ONE.cosh();
      Complex complex7 = complex4.ZERO.add(20.0);
      complex7.negate();
      Complex complex8 = Complex.valueOf(20.0, 0.0997506234413965);
      Complex complex9 = Complex.valueOf((-434.14016));
      complex8.NaN.add(complex9);
      Complex complex10 = Complex.valueOf((-1196.52383));
      complex8.asin();
      Complex complex11 = complex3.reciprocal();
      complex4.multiply(complex2);
      complex10.sin();
      Complex complex12 = new Complex((-2088.6562043725), 0.0997506234413965);
      complex6.sqrt();
      complex11.multiply(complex10);
      Complex complex13 = Complex.ONE;
      complex13.pow(complex12);
      Complex.valueOf((-524.055241), 20.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = (Complex)complex0.I.readResolve();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ZERO.subtract(20.0);
      complex4.I.pow(complex3);
      complex4.ONE.sqrt();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.NaN.log();
      complex6.ZERO.log();
      Complex complex7 = Complex.valueOf((-79.6535));
      Complex complex8 = Complex.ZERO;
      complex8.subtract((-1836.43944319304));
      complex2.acos();
      Complex complex9 = complex7.subtract(135.72549474541864);
      Complex complex10 = complex3.atan();
      complex9.pow(complex10);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.createComplex((-20.0), 2810.4205622155755);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.cos();
      complex2.negate();
      complex5.readResolve();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex7.negate();
      complex8.equals(complex9);
      complex2.sqrt1z();
      Complex complex10 = complex1.acos();
      complex10.nthRoot(206);
      complex5.getField();
      Complex complex11 = Complex.I;
      complex8.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf(0.3784096837043762);
      complex0.hashCode();
      complex1.multiply(0.3784096837043762);
      Complex complex5 = complex2.add(0.7853982115792656);
      complex0.negate();
      Complex complex6 = complex4.tanh();
      complex5.multiply(complex0);
      complex6.nthRoot(37);
      Complex complex7 = Complex.I;
      complex7.getReal();
      Complex.valueOf(2.156647205352783);
      complex5.toString();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.valueOf((-1292.5489564820764));
      complex4.divide(complex9);
      complex8.nthRoot(1112);
      Complex complex10 = Complex.INF;
      complex3.cos();
      complex4.asin();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex0.I.readResolve();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ZERO.subtract(20.0);
      complex3.I.pow(complex2);
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex6.ZERO.log();
      complex0.sqrt();
      complex4.readResolve();
      Complex complex8 = complex5.multiply(2097);
      complex7.tanh();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex8.subtract(complex7);
      Complex complex11 = Complex.valueOf((double) 37);
      complex11.hashCode();
      complex10.exp();
      complex4.getField();
      complex6.log();
      complex4.sin();
      complex4.isNaN();
      complex9.sqrt();
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf(3380.5658310044287);
      Complex complex5 = complex1.subtract(6.539175932653188E202);
      complex5.nthRoot(2547);
      Complex complex6 = new Complex(6.539175932653188E202);
      Complex complex7 = complex6.acos();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex5.multiply((-753));
      complex4.tanh();
      Complex complex10 = complex0.exp();
      complex7.subtract(complex2);
      Complex complex11 = Complex.ZERO;
      complex5.hashCode();
      Complex complex12 = Complex.NaN;
      complex12.exp();
      complex1.toString();
      complex9.cos();
      Complex complex13 = complex6.atan();
      complex3.cosh();
      complex1.abs();
      complex13.sqrt1z();
      complex8.cos();
      complex8.sqrt();
      complex13.tanh();
      Complex complex14 = new Complex(832.62327702487);
      complex6.pow(6.283185307179586);
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.createComplex(0.0, 2810.4205622155755);
      Complex.valueOf(0.0);
      Complex complex3 = complex2.subtract(0.0);
      complex2.ONE.atan();
      Complex complex4 = new Complex(0.0, (-1836.43944319304));
      complex4.acos();
      Complex complex5 = complex3.subtract(1.1857939200074815E-7);
      complex1.atan();
      complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = (Complex)complex0.I.readResolve();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ZERO.subtract(20.0);
      Complex complex5 = complex2.createComplex(1265.11117, 0.3494609708210289);
      Complex.valueOf(1934.98545676);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.subtract(1934.98545676);
      Complex complex8 = complex7.acos();
      Complex complex9 = Complex.INF;
      complex8.subtract(1934.98545676);
      complex5.atan();
      complex8.pow(complex7);
      complex8.divide(150.0);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.030901043871287, 2.030901043871287);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.ONE.subtract(2.030901043871287);
      Complex complex4 = complex0.ONE.pow(0.0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex4.acos();
      Complex complex8 = Complex.valueOf(0.0, 2.030901043871287);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex0.INF.reciprocal();
      Complex complex11 = complex5.tan();
      Object object0 = complex0.readResolve();
      Complex complex12 = Complex.valueOf(2.030901043871287, 0.0);
      Complex complex13 = complex2.divide(complex12);
      complex1.toString();
      complex11.ONE.log();
      complex8.sinh();
      complex2.hashCode();
      complex13.subtract(complex11);
      complex7.INF.add(0.0);
      complex2.equals(object0);
      complex2.sinh();
      Complex complex14 = complex4.add(complex6);
      complex14.I.atan();
      Complex complex15 = complex7.negate();
      Complex complex16 = complex15.subtract(complex4);
      Complex complex17 = complex16.ZERO.multiply(complex3);
      complex17.getField();
      complex8.add(0.0);
      Complex complex18 = new Complex((-1853.180025));
      complex18.getArgument();
      complex4.cos();
      complex5.asin();
      complex5.sinh();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.subtract(5.583037134407759E-85);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex1.I.tanh();
      complex0.ONE.acos();
      Complex complex5 = complex4.ONE.negate();
      complex5.ZERO.sinh();
      complex1.ONE.cosh();
      Complex complex6 = complex4.ZERO.add(20.0);
      complex6.negate();
      Complex complex7 = Complex.valueOf(20.0, 0.0997506234413965);
      Complex complex8 = Complex.valueOf((-434.14016));
      complex7.NaN.add(complex8);
      Complex.valueOf((-1196.52383));
      complex7.asin();
      complex3.reciprocal();
      complex4.multiply(complex2);
      complex3.sin();
      Complex complex9 = new Complex((-1196.52383), 5.583037134407759E-85);
      Complex complex10 = complex9.ONE.sqrt();
      complex1.multiply(complex9);
      complex10.pow(complex8);
      Complex.valueOf((-434.14016), 5.583037134407759E-85);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1253517584464134E-7);
      Complex complex1 = complex0.createComplex(1.1253517584464134E-7, 1.1253517584464134E-7);
      complex0.I.subtract(complex1);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.NaN.divide(1.1253517584464134E-7);
      complex2.NaN.log();
      complex2.reciprocal();
      complex2.cos();
      Complex complex4 = complex1.atan();
      complex4.INF.readResolve();
      complex4.I.tan();
      complex4.asin();
      Complex.valueOf(1503.97454, 1976.827);
      Complex.valueOf(1503.97454);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-1265.11117), (-170.74855372386));
      Complex complex1 = complex0.ONE.acos();
      complex1.ONE.abs();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.ZERO.reciprocal();
      complex0.getArgument();
      Complex complex4 = complex0.log();
      complex1.ONE.getField();
      complex0.getReal();
      Complex complex5 = complex0.sqrt1z();
      complex1.INF.subtract(complex3);
      complex5.NaN.pow((-1265.11117));
      Complex complex6 = complex1.sinh();
      complex2.getField();
      complex6.nthRoot(1400);
      complex6.add((-1265.11117));
      complex0.getField();
      complex0.getReal();
      complex6.reciprocal();
      complex4.cosh();
      Complex complex7 = Complex.ONE;
      complex7.sinh();
      complex4.multiply((-1265.11117));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.subtract((-1.0));
      Complex complex6 = Complex.ONE;
      complex6.nthRoot(468);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex2.sqrt();
      complex5.readResolve();
      complex7.multiply((-646));
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex5.exp();
      complex8.subtract(complex10);
      complex1.hashCode();
      complex1.exp();
      Complex complex11 = complex2.cos();
      Complex complex12 = new Complex(0.0, 0.0);
      complex12.atan();
      Complex complex13 = complex12.cosh();
      complex8.abs();
      complex3.sqrt1z();
      complex11.cos();
      complex13.sqrt();
      complex4.tanh();
      complex11.subtract(complex9);
      complex1.isNaN();
      complex0.pow((double) 468);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.add(complex1);
      Complex complex4 = complex3.multiply((-1900));
      complex4.readResolve();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.divide(1.2630863538644654);
      complex4.getArgument();
      complex0.atan();
      complex2.tanh();
      complex0.readResolve();
      complex5.cos();
      Complex complex7 = Complex.valueOf((double) (-1900));
      complex2.readResolve();
      complex6.cos();
      complex5.asin();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex complex5 = complex4.INF.subtract(0.3784096837043762);
      complex1.nthRoot(2547);
      Complex complex6 = complex0.acos();
      complex6.ZERO.sqrt();
      complex6.readResolve();
      Complex complex7 = complex6.ZERO.multiply(37);
      Complex complex8 = complex7.tanh();
      complex0.exp();
      Complex complex9 = complex8.I.subtract(complex1);
      complex9.ONE.hashCode();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex11.atan();
      complex7.abs();
      complex10.sqrt1z();
      complex7.cos();
      Complex complex13 = complex8.sqrt();
      complex3.tanh();
      complex5.cos();
      complex12.subtract(1571350.2038599788);
      complex13.cos();
      // Undeclared exception!
      complex10.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex complex5 = complex4.INF.subtract(0.3784096837043762);
      complex1.nthRoot(2547);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = (Complex)complex6.readResolve();
      Complex complex9 = complex6.ZERO.multiply(37);
      complex9.tanh();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex3.sinh();
      complex10.hashCode();
      Complex complex12 = complex11.subtract(complex6);
      complex9.add((double) 2547);
      Complex complex13 = (Complex)complex2.readResolve();
      complex7.equals(complex13);
      Complex complex14 = complex5.sinh();
      Complex complex15 = new Complex(37, 0.3784096837043762);
      Complex complex16 = complex6.negate();
      Complex complex17 = complex9.subtract(complex8);
      complex16.multiply(complex12);
      complex17.add(957.84803362);
      complex14.reciprocal();
      Complex.valueOf((-1436.770600538619), (-2292.1841922));
      Complex complex18 = Complex.INF;
      complex18.abs();
      complex4.reciprocal();
      complex16.subtract(957.84803362);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.32905077934265137, 0.32905077934265137);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex0.ONE.subtract(0.32905077934265137);
      Complex complex3 = complex0.ONE.pow(0.0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex3.acos();
      complex6.add(0.32905077934265137);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex5.multiply(complex7);
      complex8.INF.reciprocal();
      Complex complex9 = complex4.tan();
      complex0.readResolve();
      Complex complex10 = Complex.valueOf(0.32905077934265137, 0.0);
      complex2.divide(complex10);
      complex1.toString();
      complex9.ONE.log();
      Complex complex11 = Complex.valueOf((-4037.16696975377));
      Complex complex12 = complex11.pow((-228.27537680045));
      Complex complex13 = Complex.ONE;
      complex4.getField();
      complex4.nthRoot(1400);
      complex6.add(1571350.2038599788);
      Complex complex14 = Complex.ONE;
      complex14.getField();
      Complex complex15 = Complex.ONE;
      complex15.getReal();
      complex12.reciprocal();
      complex1.cosh();
      complex12.subtract(2.337279322276433E-135);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-1265.11117), (-170.74855372386));
      Complex complex1 = complex0.ONE.acos();
      complex1.ONE.abs();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.ZERO.reciprocal();
      complex0.getArgument();
      Complex complex4 = complex0.log();
      complex1.ONE.getField();
      complex0.getReal();
      Complex complex5 = complex0.sqrt1z();
      complex1.INF.subtract(complex3);
      complex5.NaN.pow((-1265.11117));
      complex1.sinh();
      complex2.getField();
      complex3.sqrt1z();
      complex4.pow(1.0);
      complex1.hashCode();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.sinh();
      complex1.hashCode();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.add((-511.6121));
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      Complex complex5 = complex0.sinh();
      complex0.add(complex5);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex2.subtract(complex5);
      Complex complex8 = Complex.valueOf(1610.6954);
      complex0.multiply(complex8);
      complex3.getField();
      complex6.add(2.201412886580694E275);
      complex0.reciprocal();
      Complex.valueOf((-511.6121), 1610.6954);
      complex0.abs();
      Complex complex9 = complex7.reciprocal();
      complex9.subtract(2582.108589422757);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.32905077934265137, 0.32905077934265137);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.ONE.subtract(0.32905077934265137);
      Complex complex4 = complex0.ONE.pow(0.0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex7.add(0.32905077934265137);
      Complex complex9 = complex6.multiply(complex4);
      complex9.INF.reciprocal();
      Complex complex10 = complex5.tan();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex2.divide(complex9);
      complex1.toString();
      complex10.ONE.log();
      complex8.sinh();
      complex9.hashCode();
      complex11.subtract(complex10);
      complex7.INF.add(0.0);
      complex2.equals(object0);
      complex2.sinh();
      Complex complex12 = complex4.add(complex6);
      Complex complex13 = complex7.negate();
      Complex complex14 = complex13.subtract(complex4);
      complex14.ZERO.multiply(complex3);
      Complex.valueOf(0.0);
      complex2.readResolve();
      complex1.cos();
      complex2.asin();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.createComplex((-20.0), 2811.11338161972);
      Complex complex3 = Complex.valueOf((-1836.439443));
      Complex complex4 = complex3.subtract(0.0);
      complex4.cosh();
      complex3.abs();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex2.sqrt();
      complex2.tanh();
      complex7.subtract(complex6);
      complex5.isNaN();
      complex3.pow(535.92902104564);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1265.11117), (-170.74855372386));
      Complex complex1 = complex0.ONE.acos();
      complex1.ONE.abs();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.ZERO.reciprocal();
      complex0.getArgument();
      Complex complex4 = complex0.log();
      complex1.ONE.getField();
      complex0.getReal();
      Complex complex5 = complex0.sqrt1z();
      complex5.nthRoot(474);
      complex5.getReal();
      Complex complex6 = Complex.valueOf(1.0);
      complex5.pow(complex2);
      complex0.toString();
      Complex complex7 = Complex.INF;
      complex6.divide(complex5);
      complex1.nthRoot(17);
      complex7.getArgument();
      complex1.cos();
      complex3.subtract((-1265.11117));
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.createComplex((-20.0), 2811.11338161972);
      Complex complex3 = Complex.valueOf((-1836.43944319304));
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex1.cosh();
      complex5.abs();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex6.sqrt();
      complex0.tanh();
      complex8.subtract(complex4);
      complex3.isNaN();
      complex7.pow((-1836.43944319304));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.reciprocal();
      complex2.I.negate();
      complex0.ZERO.divide(complex2);
      Complex complex3 = complex1.reciprocal();
      complex3.getArgument();
      complex0.pow(complex1);
      complex2.divide(complex0);
      try { 
        complex1.nthRoot((-178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -178
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.add(complex1);
      complex0.ZERO.readResolve();
      complex0.hashCode();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.ONE.pow(complex4);
      complex5.exp();
      Complex complex6 = complex3.sinh();
      complex3.pow(complex1);
      complex4.sqrt1z();
      complex6.pow((-4842.810705684852));
      complex2.hashCode();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.conjugate();
      Complex.valueOf((-1043.778309));
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.ONE.divide(complex1);
      Complex complex6 = complex4.I.log();
      complex3.ZERO.divide(2378.0);
      complex6.INF.toString();
      complex3.multiply(836.3329678);
      complex1.abs();
      complex0.readResolve();
      complex3.getArgument();
      Complex complex7 = complex2.createComplex(1.5260756679495707E107, 836.3329678);
      Object object0 = new Object();
      complex6.equals(object0);
      complex2.reciprocal();
      complex1.getReal();
      complex7.atan();
      Complex.valueOf(2858.03704, 963.9397479997);
      complex7.sinh();
      complex7.abs();
      complex3.getReal();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.multiply(1);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = new Complex(0.0);
      Complex complex4 = new Complex(4332.00542329609);
      complex3.I.pow(complex4);
      complex0.INF.subtract(complex3);
      complex1.ZERO.abs();
      complex3.pow(7.3409917428393E138);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.NaN.pow(complex2);
      complex6.INF.divide(complex3);
      complex5.INF.abs();
      Complex complex7 = complex1.sinh();
      complex7.I.getField();
      complex5.ONE.acos();
      complex7.I.createComplex(0.0, (-2282.60730757167));
      complex1.getField();
      Complex complex8 = complex5.sqrt();
      complex8.NaN.tanh();
      complex0.getArgument();
      Complex complex9 = complex0.atan();
      complex9.NaN.readResolve();
      complex1.getImaginary();
      Complex complex10 = complex4.cos();
      complex10.getReal();
      Complex complex11 = complex1.exp();
      try { 
        complex11.INF.nthRoot((-1850));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,850
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add((-1894.6));
      Complex complex2 = Complex.valueOf(2133.016, (-1894.6));
      complex1.ONE.getField();
      Complex complex3 = new Complex(2.306975841522217, 20.0);
      Complex complex4 = complex2.multiply(complex3);
      complex4.I.multiply(complex2);
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.INF.divide((-9.622106063561645E277));
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex7.I.createComplex(2133.016, 0.0);
      complex5.add(complex6);
      complex3.getArgument();
      Complex complex9 = complex8.reciprocal();
      complex8.createComplex(2384.7499, (-1344.374964012));
      complex9.sin();
      complex9.createComplex(0.0, 2353.0008915);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1909.753762421666);
      complex1.INF.toString();
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.ZERO.tanh();
      complex1.NaN.tan();
      Complex complex3 = Complex.valueOf(1909.753762421666);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.NaN.add(1909.753762421666);
      Complex complex6 = Complex.valueOf(1909.753762421666);
      Complex complex7 = complex1.negate();
      complex6.ZERO.sqrt1z();
      complex3.nthRoot(3025);
      Complex complex8 = complex5.reciprocal();
      complex8.atan();
      complex6.readResolve();
      Complex complex9 = complex2.tanh();
      complex9.subtract(complex5);
      complex1.hashCode();
      complex7.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.divide(0.0);
      complex1.createComplex(0.0, 0.0);
      complex0.toString();
      complex1.getArgument();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.I.subtract(complex1);
      complex0.readResolve();
      complex4.getField();
      complex1.isNaN();
      Complex complex5 = complex2.cos();
      complex5.INF.pow(complex2);
      Complex complex6 = complex3.pow(976.8641579);
      Complex.valueOf((-1.0));
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-457.21522595573), (-457.21522595573));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.cosh();
      Complex complex5 = Complex.valueOf((-457.21522595573), (-457.21522595573));
      complex5.ONE.hashCode();
      complex4.multiply(1007);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex3.ZERO.tan();
      complex0.ZERO.reciprocal();
      Complex complex6 = complex0.subtract(0.0);
      complex0.NaN.hashCode();
      complex6.ONE.getField();
      Complex complex7 = complex0.sinh();
      complex7.I.conjugate();
      Complex complex8 = complex3.reciprocal();
      complex8.INF.subtract(complex5);
      complex3.isNaN();
      complex8.sqrt1z();
      complex8.ZERO.cosh();
      complex0.ONE.abs();
      complex8.equals("");
      complex6.pow((-3191.46105715));
      complex6.atan();
      complex4.atan();
      complex0.sin();
      complex4.divide(complex5);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-1265.11117), (-170.74855372386));
      Complex complex1 = complex0.ONE.acos();
      complex1.ONE.abs();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.ZERO.reciprocal();
      complex0.getArgument();
      Complex complex4 = complex0.log();
      complex1.ONE.getField();
      complex0.getReal();
      Complex complex5 = complex0.sqrt1z();
      complex1.INF.subtract(complex3);
      complex5.NaN.pow((-1265.11117));
      Complex complex6 = complex1.sinh();
      complex2.getField();
      complex6.nthRoot(1400);
      complex6.add((-1265.11117));
      complex0.getField();
      complex0.getReal();
      complex6.reciprocal();
      complex4.cosh();
      Complex complex7 = complex5.subtract(1.0);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = Complex.valueOf(2071.937168054258);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = Complex.valueOf(2071.937168054258, (-1733.31));
      complex0.ONE.pow(complex3);
      Complex complex4 = new Complex(0.0, 2.0);
      complex0.add(complex4);
      complex2.getReal();
      Complex complex5 = complex4.I.sqrt1z();
      Complex.valueOf(2182.383, 4855.1102);
      complex5.getField();
      Complex complex6 = Complex.valueOf((-4.949331199790077E-8), (-1733.31));
      try { 
        complex6.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.divide(0.0);
      Complex complex4 = complex3.ONE.atan();
      complex4.INF.negate();
      complex4.tanh();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.add(1.3287778803035383E-8);
      Complex complex7 = complex6.ZERO.pow(complex5);
      complex0.reciprocal();
      Complex complex8 = complex1.cos();
      complex8.I.add(1.0);
      complex8.pow(complex3);
      complex8.reciprocal();
      complex7.NaN.hashCode();
      complex5.sinh();
      Complex complex9 = complex2.sin();
      complex9.getArgument();
      complex7.getImaginary();
      complex0.cos();
      complex7.nthRoot(2992);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ZERO.subtract(20.0);
      Complex complex4 = complex3.I.pow(complex2);
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.NaN.log();
      complex7.ZERO.log();
      complex5.ONE.subtract(complex6);
      complex3.ONE.sin();
      Complex complex8 = complex2.cos();
      complex8.NaN.negate();
      complex2.readResolve();
      complex4.sinh();
      complex8.tan();
      complex6.I.negate();
      complex6.equals(object0);
      complex3.sqrt1z();
      Complex complex9 = complex7.acos();
      try { 
        complex9.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-1106.794), (-1106.794));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.conjugate();
      complex1.NaN.toString();
      complex0.nthRoot(1562);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(2170.9730318, 2170.9730318);
      complex0.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-1395.79029041));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.createComplex((-1395.79029041), 2176.0);
      complex3.ZERO.multiply(complex0);
      complex1.add(2176.0);
      complex2.INF.acos();
      try { 
        complex1.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-1044.9734791116));
      complex0.ZERO.subtract(4.985137671479376E-20);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.divide(complex0);
      complex1.getField();
      Complex complex3 = complex0.NaN.negate();
      complex2.add(complex1);
      Complex complex4 = complex0.ONE.divide(complex3);
      complex4.ZERO.acos();
      complex1.tan();
      complex2.conjugate();
      complex3.abs();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.ONE.sqrt1z();
      complex4.INF.subtract(0.3784096837043762);
      complex1.nthRoot(2547);
      Complex complex5 = complex0.acos();
      complex5.ZERO.sqrt();
      complex5.readResolve();
      Complex complex6 = complex5.ZERO.multiply(37);
      Complex complex7 = complex6.tanh();
      complex0.exp();
      Complex complex8 = complex7.I.subtract(complex1);
      complex8.ONE.hashCode();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.cos();
      complex10.atan();
      Complex complex11 = complex1.cosh();
      complex6.abs();
      complex9.sqrt1z();
      complex6.cos();
      complex7.sqrt();
      complex3.tanh();
      complex9.subtract(complex5);
      complex5.isNaN();
      complex11.pow(535.92902104564);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1541.8012578791);
      Complex complex1 = complex0.NaN.sqrt();
      complex1.INF.pow(complex0);
      complex0.NaN.readResolve();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex3.I.subtract(1066.9417176);
      complex4.ZERO.add(1541.8012578791);
      Complex complex5 = complex0.ONE.exp();
      complex5.INF.getArgument();
      Complex complex6 = complex2.NaN.sqrt1z();
      complex6.divide(0.0);
      complex6.I.abs();
      complex1.ONE.readResolve();
      complex5.I.pow(0.0);
      complex5.NaN.cosh();
      Complex complex7 = complex0.tan();
      double double0 = (-2076.86752);
      complex7.INF.multiply((-2076.86752));
      complex7.INF.tan();
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex2.INF.tanh();
      Complex complex5 = complex4.NaN.sin();
      complex5.NaN.getArgument();
      Complex complex6 = complex3.ONE.acos();
      complex6.I.multiply(0);
      complex6.ZERO.getField();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex2.tan();
      Complex complex10 = complex9.NaN.add(complex7);
      complex10.ONE.sqrt();
      Complex complex11 = complex3.sinh();
      complex0.ONE.getArgument();
      complex11.INF.atan();
      Complex complex12 = Complex.valueOf(86.89907753411556);
      complex11.getField();
      complex12.getField();
      complex1.subtract(0.0);
      Complex complex13 = complex3.add(complex8);
      complex13.getArgument();
      complex8.reciprocal();
      complex11.tanh();
      complex11.equals((Object) null);
      complex13.asin();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(1508.3470888978568, 563.2633);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(4.241536392174967E-9);
      complex1.I.sqrt1z();
      complex1.ONE.sqrt1z();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.add(4.241536392174967E-9);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.sqrt1z();
      complex5.ZERO.cos();
      Complex complex6 = complex5.divide(complex2);
      complex6.I.multiply(complex3);
      complex1.toString();
      complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.getField();
      Complex complex1 = complex0.cosh();
      complex1.ONE.createComplex((-20.0), 2811.11338161972);
      Complex complex2 = Complex.valueOf((-1836.43944319304));
      complex2.subtract(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.subtract(0.0);
      complex4.I.atan();
      complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(875.3, 875.3);
      complex0.I.pow(875.3);
      int int0 = (-1);
      complex0.ZERO.abs();
      complex0.ZERO.acos();
      try { 
        complex0.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.sqrt();
      Complex complex1 = complex0.multiply(1811);
      complex1.ONE.readResolve();
      complex1.ONE.sinh();
      Complex complex2 = complex0.divide((-2852.56547837));
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.tanh();
      complex4.I.readResolve();
      complex0.cos();
      Complex.valueOf(0.0);
      complex0.readResolve();
      complex2.cos();
      complex0.asin();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ONE.pow(0.0);
      complex1.NaN.cos();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.INF.pow(complex4);
      complex5.NaN.sqrt1z();
      complex1.toString();
      complex4.pow(0.0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.I.multiply(0.0);
      complex7.NaN.asin();
      complex6.I.divide(0.0);
      Complex complex8 = complex2.subtract(complex6);
      complex8.INF.multiply(complex3);
      complex2.I.getArgument();
      complex8.ONE.readResolve();
      Complex complex9 = complex0.asin();
      complex9.INF.sinh();
      try { 
        complex9.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-814.69657145));
      Complex complex1 = complex0.divide(0.0);
      complex1.I.sin();
      Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.atan();
      Complex complex3 = complex2.ZERO.cosh();
      complex3.ONE.cosh();
      complex3.INF.getArgument();
      complex3.I.sin();
      Complex complex4 = complex2.exp();
      complex4.I.hashCode();
      Complex.valueOf(503.458517468775);
      complex4.ONE.tanh();
      try { 
        complex0.nthRoot((-651));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -651
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      complex1.NaN.cosh();
      complex0.ONE.tan();
      complex1.INF.reciprocal();
      Complex complex2 = complex0.acos();
      int int0 = (-1415);
      try { 
        complex2.nthRoot((-1415));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,415
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.I.abs();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.reciprocal();
      complex2.I.negate();
      complex0.ZERO.divide(complex2);
      Complex complex3 = complex1.reciprocal();
      complex3.getArgument();
      complex0.pow(complex1);
      complex1.sqrt();
      try { 
        complex1.nthRoot((-702));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -702
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(4889.316785, 4889.316785);
      complex0.NaN.log();
      Complex complex1 = complex0.tan();
      complex1.INF.pow(complex0);
      int int0 = (-2225);
      try { 
        complex1.I.nthRoot((-2225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,225
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.log();
      complex1.I.asin();
      Complex complex2 = complex0.INF.pow(0.0);
      complex2.NaN.conjugate();
      Complex complex3 = complex2.ZERO.tan();
      complex0.nthRoot(809);
      complex0.getField();
      Complex complex4 = complex0.log();
      complex4.sin();
      complex0.isNaN();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.conjugate();
      complex2.NaN.abs();
      complex3.abs();
      Complex complex5 = complex0.tan();
      complex5.I.getArgument();
      complex3.getReal();
      complex5.I.multiply(655);
      complex4.divide(Double.NaN);
      complex4.hashCode();
      complex4.ZERO.hashCode();
      Complex complex6 = complex2.add(Double.NaN);
      complex6.NaN.cos();
      Complex.valueOf(Double.NaN);
      Complex complex7 = complex4.createComplex(Double.NaN, Double.NaN);
      complex7.I.cosh();
      complex2.acos();
      complex3.pow(2.0);
      Complex complex8 = Complex.ZERO;
      complex5.multiply(complex8);
      complex8.divide(1.5707963267948966);
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.32905077934265137, 0.32905077934265137);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.ONE.subtract(0.32905077934265137);
      Complex complex4 = complex0.ONE.pow(0.0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex7.add(0.32905077934265137);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex6.multiply(complex9);
      Complex complex11 = complex10.INF.reciprocal();
      Complex complex12 = complex5.tan();
      Object object0 = complex0.readResolve();
      Complex complex13 = Complex.valueOf(0.32905077934265137, 0.0);
      Complex complex14 = complex2.divide(complex13);
      String string0 = complex1.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      complex12.ONE.log();
      Complex complex15 = complex8.sinh();
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      
      complex10.hashCode();
      Complex complex16 = complex14.subtract(complex12);
      assertEquals(0.2894185122716583, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertEquals(0.3593548491886384, complex12.getImaginary(), 0.01);
      assertSame(complex16, complex10);
      
      complex7.INF.add(0.0);
      complex2.equals(object0);
      Complex complex17 = complex2.sinh();
      assertFalse(complex17.equals((Object)complex11));
      assertTrue(complex17.equals((Object)complex10));
      
      Complex complex18 = complex4.add(complex6);
      assertEquals(1.3290507793426514, complex18.getReal(), 0.01);
      
      Complex complex19 = complex7.negate();
      Complex complex20 = complex19.subtract(complex4);
      Complex complex21 = complex20.ZERO.multiply(complex3);
      complex21.getField();
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      
      complex8.add(0.0);
      assertFalse(complex7.equals((Object)complex20));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      complex3.reciprocal();
      Complex.valueOf(0.0, 0.32905077934265137);
      double double0 = complex0.abs();
      assertEquals(0.46534807485581425, double0, 0.01);
      
      Complex complex22 = complex13.reciprocal();
      assertEquals(-0.0, complex22.getImaginary(), 0.01);
      
      complex0.subtract((-1341.8477532));
      assertTrue(complex0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = Complex.valueOf(2665.07233, 2665.07233);
      assertEquals(2665.07233, complex2.getReal(), 0.01);
      assertEquals(2665.07233, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.add((double) 1);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex1.exp();
      assertFalse(complex5.isInfinite());
      assertEquals(0.5403023058681398, complex5.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex5.getImaginary(), 0.01);
      
      complex0.getField();
      double double0 = complex3.abs();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 352.938738466829;
      complex0.ONE.add(352.938738466829);
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex3.negate();
      complex1.getArgument();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex0.multiply(891);
      complex2.getField();
      Complex complex7 = complex1.NaN.asin();
      Complex complex8 = Complex.valueOf((double) 891, 0.0);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      complex5.getArgument();
      Complex complex9 = complex6.add(complex4);
      assertNotSame(complex9, complex2);
      assertSame(complex9, complex5);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertSame(complex3, complex7);
      assertFalse(complex6.isInfinite());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.log();
      complex0.ONE.abs();
      Complex complex1 = complex0.acos();
      complex1.NaN.hashCode();
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex2.INF.add((-1283.99697));
      complex2.ZERO.negate();
      Complex complex4 = complex0.tanh();
      complex4.ZERO.multiply(complex0);
      complex1.I.nthRoot(474);
      complex0.getReal();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.I.pow(complex0);
      complex3.toString();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.divide(complex7);
      try { 
        complex8.NaN.nthRoot((-178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -178
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
