/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:58:32 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) (-889), Double.POSITIVE_INFINITY);
      complex0.multiply((double) (-889));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1308.5243141897);
      Complex complex1 = complex0.add(199.7881);
      Complex.valueOf(1308.5243141897, 1308.5243141897);
      Complex complex2 = complex1.sin();
      complex2.getArgument();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.ZERO;
      complex5.isInfinite();
      Complex complex6 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex1.equals(complex2);
      Complex complex7 = Complex.ONE;
      complex7.pow(199.7881);
      Complex complex8 = complex0.log();
      complex0.add(0.004153127313110846);
      complex0.subtract(complex3);
      complex3.log();
      complex6.toString();
      Complex complex9 = complex0.cos();
      complex9.INF.toString();
      complex6.add(19.774348342);
      complex5.abs();
      complex8.abs();
      complex6.multiply((-160));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 9.350990339947455E-147);
      Complex complex1 = Complex.ZERO;
      complex0.add(complex1);
      Complex complex2 = complex1.multiply((-1933));
      complex1.nthRoot(2840);
      Complex complex3 = new Complex(1, (-3639.269906603));
      Complex complex4 = complex3.multiply((double) (-1933));
      Complex complex5 = new Complex(Double.NaN, (-1831.7));
      complex5.nthRoot(2840);
      complex0.multiply(Double.NaN);
      Complex.valueOf((-326.50563));
      Complex complex6 = complex2.reciprocal();
      complex6.NaN.hashCode();
      complex4.readResolve();
      Complex complex7 = Complex.NaN;
      complex4.readResolve();
      Complex complex8 = new Complex((-710.7713), 1.474522484905093E189);
      Complex complex9 = complex8.sqrt1z();
      complex9.createComplex(1.0, 4563.3958);
      Complex.valueOf(20.0, 0.9534903170187385);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      complex1.multiply(complex0);
      Complex complex2 = Complex.INF;
      complex2.abs();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.add(complex0);
      complex0.isInfinite();
      Complex complex5 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex5.toString();
      Complex complex6 = complex2.multiply(2840);
      complex6.toString();
      Complex complex7 = Complex.I;
      complex7.nthRoot(1);
      complex7.multiply((double) 2840);
      complex6.readResolve();
      complex4.sqrt();
      complex1.nthRoot(2840);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 9.350990339947455E-147);
      Complex complex1 = Complex.valueOf(9.350990339947455E-147, 9.350990339947455E-147);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.add(complex2);
      complex1.multiply((-1));
      complex3.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-2042.62069));
      Complex complex1 = Complex.I;
      complex0.I.abs();
      Complex.valueOf(20.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-1455.618), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.multiply((-402));
      complex0.ZERO.toString();
      Complex complex2 = new Complex((-2721.96243), Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      Complex.valueOf(0.9965655915735453);
      complex1.multiply(complex2);
      Complex complex4 = complex1.tan();
      complex4.tanh();
      complex4.nthRoot(1196);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      complex0.log();
      complex1.pow(311.22);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.350990339947455E-147);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.42319912171599805);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.log();
      complex3.INF.add(9.350990339947455E-147);
      Complex complex4 = Complex.valueOf((-1523.602138), 9.350990339947455E-147);
      complex4.add(complex2);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.valueOf(182.9292893607528);
      complex6.conjugate();
      Complex complex7 = complex5.createComplex((-20.0), 1682.164586677);
      Complex complex8 = Complex.valueOf(1682.164586677, 0.09672962129116058);
      complex8.INF.sqrt();
      complex8.exp();
      complex8.exp();
      complex5.toString();
      complex7.tanh();
      complex7.asin();
      Object object0 = new Object();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-2571.709598), (-20.0));
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.ONE;
      complex4.log();
      complex2.abs();
      complex3.abs();
      complex3.tanh();
      complex0.multiply(complex2);
      complex1.tan();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1748357.8615158945);
      Complex complex1 = Complex.valueOf(9.350990339947455E-147, Double.NaN);
      Complex complex2 = Complex.INF;
      complex2.log();
      complex2.multiply(complex0);
      complex0.add(complex1);
      Complex complex3 = Complex.INF;
      complex3.isInfinite();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 9.350990339947455E-147);
      Complex complex1 = Complex.valueOf(9.350990339947455E-147, 9.350990339947455E-147);
      Complex complex2 = complex0.INF.log();
      complex0.ZERO.add(complex1);
      complex1.isInfinite();
      complex2.nthRoot(1);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex(1314.1, Double.NaN);
      Complex complex3 = Complex.valueOf(1276.1071955926798, 9.350990339947455E-147);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.log();
      complex1.add(complex3);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex2.divide(Double.NaN);
      Complex complex5 = complex1.atan();
      Complex complex6 = Complex.valueOf(1480.98, Double.NaN);
      Complex complex7 = complex0.cosh();
      complex7.toString();
      complex4.atan();
      complex5.getArgument();
      Complex complex8 = Complex.NaN;
      complex3.hashCode();
      complex6.tan();
      complex7.exp();
      complex7.toString();
      complex7.tanh();
      complex0.subtract(1480.98);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply((-1518.4228900928679));
      Complex complex2 = Complex.I;
      complex1.multiply(1480.98);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.abs();
      Complex complex1 = complex0.sqrt1z();
      complex1.divide(20.0);
      Complex complex2 = complex1.ZERO.negate();
      complex2.ONE.createComplex((-537.2484024652484), 6.283185307179586);
      complex2.divide(complex0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.multiply(Double.NaN);
      Complex complex5 = complex4.ONE.multiply((-4881));
      complex5.NaN.cos();
      Complex complex6 = complex0.subtract(27.998142452881044);
      complex5.INF.subtract(complex3);
      Complex complex7 = complex0.multiply(complex5);
      complex7.ONE.pow(complex4);
      Complex complex8 = complex4.divide((-860.969));
      complex6.add(Double.NaN);
      complex6.add(complex8);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-89.2022481329), 0.9988995818413452);
      Complex complex1 = complex0.ZERO.add(0.9988995818413452);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.pow(0.9988995818413452);
      Complex complex4 = complex1.INF.sinh();
      Complex.valueOf((-20.0));
      complex1.getField();
      Complex complex5 = complex0.multiply((-2063.1023574503774));
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex6.ZERO.pow(complex5);
      Complex.valueOf(2041.62069, (-2063.1023574503774));
      complex5.INF.divide(complex7);
      complex7.ONE.hashCode();
      Complex complex8 = complex5.sinh();
      complex8.ZERO.cos();
      complex3.asin();
      complex4.divide(complex2);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1816.4909094965617));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.valueOf(0.0);
      complex1.divide(1480.98);
      complex1.atan();
      Complex.valueOf((-2.812076759125914E-8), (-2.812076759125914E-8));
      complex3.cosh();
      complex1.toString();
      Complex complex5 = complex3.atan();
      Complex complex6 = Complex.ONE;
      complex6.getArgument();
      Complex complex7 = Complex.NaN;
      complex5.hashCode();
      complex0.tan();
      complex1.getImaginary();
      complex4.toString();
      complex7.tanh();
      Complex complex8 = Complex.ZERO;
      complex2.nthRoot(311);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(0.0, (-1816.4909094965617));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.divide(1480.98);
      Complex complex5 = new Complex(171.5266251942, (-1.0));
      complex4.equals(complex0);
      Complex complex6 = Complex.I;
      complex1.pow((-3629.58937174122));
      Complex complex7 = complex2.log();
      complex6.add((-3629.58937174122));
      complex4.subtract(complex1);
      complex0.log();
      complex0.toString();
      Complex complex8 = complex6.cos();
      complex4.add((-1816.4909094965617));
      complex6.abs();
      complex4.abs();
      complex7.tanh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.ZERO;
      complex10.multiply(complex8);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-3544.024314926601), (-3544.024314926601));
      Complex complex1 = Complex.valueOf(1469.878098473696);
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.pow(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.multiply((-3544.024314926601));
      Complex complex5 = complex4.sin();
      complex5.ONE.log();
      complex4.ONE.hashCode();
      complex4.tanh();
      complex4.multiply(complex3);
      complex3.getReal();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1308.5243141897);
      Complex complex1 = complex0.add(199.7881);
      complex0.exp();
      Complex complex2 = complex1.sin();
      complex2.getArgument();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.ZERO;
      complex5.isInfinite();
      Complex complex6 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex1.equals(complex2);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.pow(199.7881);
      Complex complex9 = complex0.log();
      complex0.add(0.004153127313110846);
      complex0.subtract(complex3);
      complex3.log();
      complex6.toString();
      Complex complex10 = complex0.cos();
      complex10.INF.toString();
      complex6.add(19.774348342);
      complex5.abs();
      complex9.abs();
      Complex complex11 = Complex.ONE;
      complex8.multiply(complex5);
      Complex complex12 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-2148.157349373423), 9.350990339947455E-147);
      Complex.valueOf(9.350990339947455E-147, (-2148.157349373423));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.add(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.conjugate();
      complex2.createComplex((-1712234.8808256246), Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ZERO;
      complex6.exp();
      complex5.exp();
      complex3.toString();
      complex6.tanh();
      complex3.nthRoot(1222);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex0.INF.hashCode();
      complex0.isNaN();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex3.ZERO.divide(complex0);
      Complex complex6 = complex0.I.multiply(1);
      Complex complex7 = complex6.INF.divide(complex0);
      complex3.INF.readResolve();
      Complex complex8 = complex1.subtract(2187.7178);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex9.ZERO.add(2187.7178);
      Complex complex11 = complex10.ZERO.sin();
      complex8.I.getArgument();
      Complex complex12 = complex0.subtract((-492.2565));
      complex2.isInfinite();
      complex2.equals(complex8);
      Complex complex13 = complex1.pow(2187.7178);
      complex1.log();
      complex4.subtract(complex0);
      Complex complex14 = complex7.subtract(complex9);
      Complex complex15 = Complex.NaN;
      complex15.log();
      complex4.toString();
      complex11.cos();
      complex0.add((-492.2565));
      complex13.abs();
      complex12.abs();
      complex7.tanh();
      Complex complex16 = complex14.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.conjugate();
      complex13.getField();
      complex12.tanh();
      complex16.reciprocal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4049.151893373));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sqrt();
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1308.5243141897);
      Complex complex1 = complex0.divide(1308.5243141897);
      complex0.NaN.add(complex1);
      Complex complex2 = new Complex(1308.5243141897);
      complex1.conjugate();
      Complex complex3 = Complex.ZERO;
      Object object0 = new Object();
      complex2.equals(complex0);
      Complex complex4 = complex2.cos();
      complex0.toString();
      complex4.toString();
      complex4.pow(433.531083);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1597.692164298), 581.3244354);
      Complex complex1 = complex0.createComplex(3.190955524438203, 581.3244354);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.divide(581.3244354);
      complex2.atan();
      Complex complex5 = Complex.valueOf(Double.NaN, (-20.0));
      complex3.cosh();
      complex1.toString();
      Complex complex6 = complex2.cos();
      complex6.atan();
      complex3.getArgument();
      Complex complex7 = Complex.NaN;
      complex3.hashCode();
      complex2.tan();
      complex3.getImaginary();
      Complex complex8 = Complex.ZERO;
      complex8.reciprocal();
      complex4.sinh();
      complex6.reciprocal();
      Complex complex9 = Complex.NaN;
      complex9.nthRoot(518);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex1.INF.sqrt();
      complex1.equals(complex2);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex3.add((-2042.62069));
      Complex complex6 = complex0.sin();
      complex1.getArgument();
      Complex complex7 = complex2.subtract((-3.141592653589793));
      Complex complex8 = Complex.NaN;
      complex8.isInfinite();
      Complex complex9 = new Complex(19.774348342, (-2042.62069));
      complex9.equals("(");
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.pow((-1289.6586407745874));
      Complex complex12 = complex5.log();
      Complex complex13 = complex5.subtract(complex12);
      complex13.I.add(0.004153127313110846);
      complex4.subtract(complex12);
      complex4.log();
      complex6.toString();
      complex11.cos();
      complex7.add(1.0);
      complex2.abs();
      complex1.abs();
      Complex complex14 = complex11.tanh();
      Complex complex15 = Complex.ONE;
      complex14.INF.tanh();
      complex14.multiply((-988));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 9.350990339947455E-147);
      Complex complex1 = complex0.add(9.350990339947455E-147);
      Complex complex2 = complex0.sin();
      complex1.getArgument();
      Complex complex3 = complex2.subtract(9.350990339947455E-147);
      Complex complex4 = Complex.NaN;
      complex2.isInfinite();
      Complex complex5 = new Complex(0.0, 67.662357300229);
      complex0.equals(complex4);
      Complex complex6 = Complex.I;
      Complex complex7 = complex0.pow((-0.8596532288159997));
      Complex complex8 = complex6.log();
      Complex complex9 = complex7.subtract(complex5);
      complex9.add(0.7853981633974483);
      Complex complex10 = complex4.subtract(complex1);
      Complex complex11 = complex10.log();
      Complex complex12 = complex8.INF.acos();
      complex12.I.multiply(37);
      complex7.toString();
      complex5.cos();
      complex6.add(9.350990339947455E-147);
      complex11.abs();
      complex0.abs();
      complex8.tanh();
      Complex complex13 = Complex.ONE;
      complex5.multiply(1073741824);
      complex3.createComplex(Double.NaN, 1073741824);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.divide(5.924290380648597E-224);
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ZERO.cos();
      complex0.conjugate();
      complex1.NaN.asin();
      Complex complex4 = complex0.acos();
      complex0.acos();
      complex0.readResolve();
      Complex complex5 = complex4.subtract(5.924290380648597E-224);
      complex0.ONE.getArgument();
      Complex complex6 = complex0.log();
      Complex complex7 = complex5.atan();
      complex7.INF.getField();
      complex7.ZERO.tan();
      Complex.valueOf((-3230.377990668864), 1253.776417921);
      complex4.NaN.atan();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex3.tanh();
      complex5.createComplex(1253.776417921, 1480.98);
      complex1.add(1.3689034734361306E12);
      Complex complex10 = complex9.log();
      complex10.ZERO.divide(complex4);
      complex6.exp();
      complex5.multiply(492);
      complex8.NaN.sqrt();
      Complex complex11 = complex0.pow((double) 492);
      complex11.NaN.reciprocal();
      complex8.getField();
      complex3.nthRoot(1459);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.INF.sqrt();
      complex1.equals(object0);
      complex0.getReal();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.subtract(complex1);
      Complex complex7 = complex1.add(2894.575653);
      Complex complex8 = complex1.subtract(complex6);
      complex4.log();
      complex7.toString();
      Complex complex9 = complex2.cos();
      complex8.add(2894.575653);
      complex6.abs();
      complex7.abs();
      complex9.tanh();
      Complex complex10 = Complex.ONE;
      complex5.multiply(7);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex0.readResolve();
      Complex complex2 = complex0.sqrt();
      complex0.equals(complex2);
      complex2.getReal();
      Complex complex3 = complex0.multiply(0);
      complex1.abs();
      complex0.acos();
      complex0.add(0.0);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.ZERO;
      Object object0 = new Object();
      Complex complex6 = Complex.NaN;
      complex0.equals(complex5);
      complex6.add(complex4);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.190955524438203, 3.190955524438203);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.createComplex((-1063.5329), 6.283185307179586);
      complex0.exp();
      complex0.exp();
      complex0.toString();
      Complex complex4 = complex3.tanh();
      complex1.asin();
      complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(1726.6, 1970.0);
      Complex complex1 = Complex.valueOf(1970.0, 1139.4429);
      Complex complex2 = complex0.pow(complex1);
      complex1.multiply(complex0);
      Complex complex3 = complex2.I.add((double) (-187));
      complex3.INF.conjugate();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex1.multiply((-187));
      Complex complex6 = complex5.reciprocal();
      complex6.ZERO.divide(complex2);
      Complex complex7 = complex1.divide(1726.6);
      complex7.ZERO.hashCode();
      complex7.NaN.abs();
      Complex complex8 = complex2.multiply((-0.8596532288159997));
      complex8.INF.divide(409.2862297597002);
      complex8.pow(1.5707963267948966);
      complex7.add(1726.6);
      complex4.getField();
      complex2.log();
      Complex.valueOf((-3095.351296));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.atan();
      Complex complex1 = complex0.tan();
      complex1.INF.add(complex0);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex1.multiply((-6.752285648692082E-4));
      complex0.I.exp();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.createComplex((-6.752285648692082E-4), (-6.752285648692082E-4));
      complex2.NaN.atan();
      complex4.INF.tan();
      complex3.INF.getArgument();
      complex4.add((-6.752285648692082E-4));
      complex3.getField();
      Complex.valueOf((-6.752285648692082E-4));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.8401159516008676E283, 2.8401159516008676E283);
      Complex complex1 = complex0.exp();
      complex0.INF.divide(0.1930064558982849);
      Complex complex2 = complex0.subtract(2.8401159516008676E283);
      Complex complex3 = (Complex)complex1.NaN.readResolve();
      complex2.INF.hashCode();
      complex1.createComplex((-2564.988192045), 0.1930064558982849);
      Complex complex4 = complex2.conjugate();
      complex3.sin();
      Complex complex5 = complex4.divide(5063.17379);
      Complex complex6 = Complex.valueOf(3408.64262711, (-2564.988192045));
      Complex complex7 = complex6.atan();
      complex3.cosh();
      complex6.toString();
      complex1.cos();
      complex2.atan();
      Complex complex8 = Complex.NaN;
      complex6.I.createComplex(383.4007, 1537.886677344);
      Complex complex9 = new Complex(1781.38961831);
      complex9.tan();
      complex9.getImaginary();
      complex7.reciprocal();
      complex5.sinh();
      complex0.reciprocal();
      Complex complex10 = Complex.NaN;
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.8401159516008676E283, 2.8401159516008676E283);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.INF.divide(0.1930064558982849);
      Complex complex3 = complex0.subtract(2.8401159516008676E283);
      Complex complex4 = (Complex)complex1.NaN.readResolve();
      complex3.INF.hashCode();
      Complex complex5 = complex3.NaN.cosh();
      complex5.INF.cosh();
      complex3.ZERO.pow(complex2);
      complex3.readResolve();
      complex1.log();
      complex4.log();
      Complex complex6 = new Complex(0.1930064558982849);
      complex4.divide(complex6);
      Complex complex7 = Complex.valueOf(2.8401159516008676E283, 0.1930064558982849);
      complex7.acos();
      complex1.getArgument();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 9.350990339947455E-147);
      Complex complex1 = Complex.valueOf(9.350990339947455E-147, 9.350990339947455E-147);
      Complex complex2 = complex0.add(complex0);
      complex2.atan();
      Complex complex3 = complex1.createComplex(7.022024841212509E-7, (-2753.708530708694));
      Complex complex4 = Complex.ZERO;
      complex4.exp();
      complex3.exp();
      Complex complex5 = Complex.ZERO;
      complex5.toString();
      complex0.tanh();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 9.350990339947455E-147);
      Complex complex1 = Complex.valueOf(9.350990339947455E-147, 9.350990339947455E-147);
      complex1.hashCode();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.pow(complex1);
      complex3.readResolve();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.atan();
      complex6.INF.divide((-20.0));
      complex4.exp();
      complex0.exp();
      complex1.toString();
      complex2.tanh();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      complex2.ZERO.atan();
      complex1.ZERO.sinh();
      Complex complex3 = Complex.INF;
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.8401159516008676E283, 2.8401159516008676E283);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.INF.divide(0.1930064558982849);
      Complex complex3 = complex0.subtract(2.8401159516008676E283);
      complex1.NaN.readResolve();
      complex3.INF.hashCode();
      complex3.NaN.cosh();
      complex3.ZERO.pow(complex2);
      complex3.readResolve();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.NaN.atan();
      complex5.ZERO.createComplex((-20.0), (-2746.84087791));
      complex2.exp();
      complex0.exp();
      complex4.toString();
      complex4.tanh();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(194.993, 194.993);
      complex0.ZERO.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.subtract(complex2);
      complex2.subtract((-674.5298865795662));
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.createComplex((-674.5298865795662), 1805.75616662);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex1.sin();
      complex7.divide((-4.107226967119929E-15));
      complex0.atan();
      complex7.cosh();
      complex5.toString();
      Complex complex8 = Complex.I;
      complex8.cos();
      complex6.atan();
      complex4.hashCode();
      complex7.tan();
      complex3.getImaginary();
      Complex complex9 = new Complex(658.499831829096, 194.993);
      complex9.reciprocal();
      complex7.sinh();
      Complex complex10 = Complex.INF;
      complex10.reciprocal();
      // Undeclared exception!
      complex8.nthRoot(2136526707);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex0.INF.hashCode();
      complex0.isNaN();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex3.ZERO.divide(complex0);
      Complex complex6 = complex0.I.multiply(1);
      Complex complex7 = complex6.INF.divide(complex0);
      complex3.INF.readResolve();
      Complex complex8 = complex1.subtract(2187.7178);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex9.ZERO.add(2187.7178);
      Complex complex11 = complex10.ZERO.sin();
      complex8.I.getArgument();
      Complex complex12 = complex0.subtract((-492.2565));
      complex2.isInfinite();
      complex2.equals(complex8);
      Complex complex13 = complex1.pow(2187.7178);
      complex1.log();
      complex4.subtract(complex0);
      Complex complex14 = complex7.subtract(complex9);
      Complex complex15 = Complex.NaN;
      complex15.log();
      complex4.toString();
      complex11.cos();
      complex0.add((-492.2565));
      complex13.abs();
      complex12.abs();
      complex7.tanh();
      Complex complex16 = complex14.log();
      Complex.valueOf(493.2565);
      complex5.conjugate();
      complex13.getField();
      complex12.tanh();
      complex16.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(194.993, 194.993);
      complex0.ZERO.toString();
      Complex complex1 = complex0.sin();
      complex1.I.exp();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.ZERO.subtract(2963.7);
      complex2.I.acos();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.tan();
      Complex.valueOf(1.0);
      complex4.divide(2963.7);
      Complex complex6 = Complex.valueOf(3.601718675118614E-8);
      complex6.isInfinite();
      complex2.toString();
      complex5.multiply((-988));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      complex2.ZERO.atan();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(4.2990710043633113E-8, (-44.9066));
      Complex complex6 = complex5.createComplex((-44.9066), 4.2990710043633113E-8);
      complex6.conjugate();
      complex5.sin();
      Complex complex7 = complex1.divide((-44.9066));
      Complex complex8 = Complex.INF;
      complex8.atan();
      complex8.cosh();
      complex2.toString();
      Complex complex9 = complex0.cos();
      complex7.atan();
      complex1.hashCode();
      complex4.tan();
      complex8.getImaginary();
      complex9.reciprocal();
      complex1.sinh();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, (-790.676273679895));
      Complex complex11 = complex10.reciprocal();
      complex11.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex0.INF.hashCode();
      complex0.isNaN();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.I.log();
      complex2.I.cosh();
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex0.I.multiply(1);
      complex5.INF.divide(complex0);
      complex3.INF.readResolve();
      Complex complex6 = complex1.subtract(2187.7178);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.ZERO.add(2187.7178);
      complex8.ZERO.sin();
      complex6.I.getArgument();
      Complex complex9 = complex0.subtract((-492.2565));
      complex2.isInfinite();
      complex2.equals(complex6);
      Complex complex10 = complex1.pow(2187.7178);
      Complex complex11 = complex9.log();
      complex11.NaN.subtract(complex5);
      complex9.cos();
      complex8.atan();
      complex8.hashCode();
      complex4.tan();
      complex7.getImaginary();
      complex1.reciprocal();
      complex10.sinh();
      Complex complex12 = Complex.ZERO;
      complex12.reciprocal();
      // Undeclared exception!
      complex12.nthRoot(2044111758);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(194.993, 194.993);
      complex0.ZERO.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex0.ZERO.subtract(2963.7);
      Complex complex5 = complex3.I.acos();
      Complex complex6 = complex3.createComplex(3.601718675118614E-8, 658.499831829096);
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex8.divide(194.993);
      complex9.ZERO.atan();
      Complex complex10 = complex2.cosh();
      complex10.toString();
      Complex complex11 = complex9.subtract(complex6);
      complex9.log();
      complex4.toString();
      complex6.cos();
      complex10.add(2186.160392275345);
      complex4.abs();
      complex7.abs();
      complex6.tanh();
      complex5.log();
      Complex.valueOf(6.283185307179586);
      complex7.conjugate();
      complex9.getField();
      complex11.tanh();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(194.993, 194.993);
      complex0.ZERO.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex0.ZERO.subtract(2963.7);
      Complex complex5 = complex3.I.acos();
      Complex complex6 = complex3.createComplex(3.601718675118614E-8, 658.499831829096);
      complex6.I.conjugate();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.divide(194.993);
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = complex2.cosh();
      complex10.toString();
      complex10.cos();
      complex3.atan();
      complex8.hashCode();
      Complex complex11 = complex1.I.tan();
      complex2.getImaginary();
      Complex complex12 = Complex.ONE;
      complex1.toString();
      complex9.cos();
      complex5.add(440.45);
      complex3.abs();
      Complex complex13 = Complex.I;
      complex13.abs();
      complex6.tanh();
      complex13.log();
      Complex.valueOf(0.9999999999999998);
      complex10.conjugate();
      complex2.getField();
      complex11.tanh();
      complex9.reciprocal();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(194.993, 194.993);
      complex0.ZERO.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.subtract(complex0);
      complex0.ZERO.subtract(2963.7);
      complex3.I.acos();
      Complex complex4 = complex3.createComplex(3.601718675118614E-8, 658.499831829096);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.divide(194.993);
      complex7.ZERO.atan();
      Complex complex8 = complex2.cosh();
      complex0.toString();
      Complex complex9 = complex8.cos();
      complex3.atan();
      complex7.hashCode();
      complex1.I.tan();
      complex2.getImaginary();
      Complex complex10 = Complex.ONE;
      complex10.reciprocal();
      complex1.multiply(complex10);
      complex1.createComplex(658.499831829096, 2963.7);
      complex8.conjugate();
      complex9.subtract((-4.350745270980051E-10));
      complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      complex0.I.getField();
      Complex complex2 = complex0.log();
      complex1.subtract(complex0);
      Complex complex3 = complex0.cos();
      complex3.ONE.sqrt1z();
      Complex complex4 = complex2.multiply((-2511));
      complex4.NaN.getField();
      complex2.sin();
      complex4.reciprocal();
      Complex complex5 = Complex.NaN;
      complex5.multiply(0.0);
      Complex complex6 = new Complex((-20.0), (-4238.90847743754));
      complex2.subtract(complex6);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      complex0.hashCode();
      complex0.hashCode();
      complex0.abs();
      complex0.getReal();
      complex1.getArgument();
      complex0.ONE.log();
      Complex.valueOf((-501.14151133222515), (-501.14151133222515));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.cosh();
      complex3.isNaN();
      complex3.sin();
      complex1.nthRoot(2014);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(1828.79264566);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.createComplex(3105.577070805, 3105.577070805);
      Complex complex3 = complex2.tan();
      complex1.tan();
      Complex complex4 = complex3.add(3105.577070805);
      Complex complex5 = complex3.asin();
      complex2.negate();
      complex5.tan();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex1.subtract(complex6);
      complex3.acos();
      Complex complex8 = complex2.subtract(Double.NaN);
      Complex complex9 = complex5.multiply(37);
      complex7.getField();
      complex7.subtract(complex8);
      complex4.divide(complex9);
      complex4.getReal();
      complex7.multiply(1828.79264566);
      Complex complex10 = complex3.divide(complex8);
      complex10.tan();
      Complex complex11 = new Complex(3105.577070805);
      complex5.subtract(complex0);
      complex11.exp();
      Complex.valueOf(2052.019725);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.negate();
      complex0.getArgument();
      complex0.sinh();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.cos();
      Complex complex5 = Complex.valueOf(1.0876119136810303, (-5.139939462203646E83));
      complex5.multiply(279);
      complex0.subtract((-823.215));
      complex4.negate();
      complex2.subtract(complex4);
      complex1.pow(0.4216526063728182);
      complex3.divide((double) 279);
      complex2.subtract(2277.6991);
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-985.362));
      Complex complex1 = Complex.valueOf(0.0, 1.0);
      Complex complex2 = Complex.INF;
      complex1.add(complex0);
      Complex complex3 = complex1.log();
      complex0.add(complex3);
      complex2.isInfinite();
      complex1.nthRoot(2148);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = (Complex)complex0.readResolve();
      complex1.INF.sqrt();
      complex1.equals(complex2);
      complex0.getReal();
      Complex complex3 = complex0.INF.multiply(0);
      complex3.I.abs();
      complex1.acos();
      Complex complex4 = complex0.add(0.0);
      complex4.ONE.add(complex2);
      complex3.multiply(1.0);
      Complex complex5 = new Complex(1166.651451329579, 1.0);
      complex1.subtract(complex0);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(194.993, 194.993);
      complex0.ZERO.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.subtract(complex0);
      complex0.ZERO.subtract(2963.7);
      complex3.I.acos();
      Complex complex4 = complex3.createComplex(3.601718675118614E-8, 658.499831829096);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.divide(194.993);
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex2.cosh();
      complex9.toString();
      Complex complex10 = complex9.cos();
      complex3.atan();
      complex10.tanh();
      complex5.log();
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1816.4909094965617));
      complex1.hashCode();
      Complex complex2 = complex1.tan();
      complex2.getImaginary();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex3.createComplex(457.19461592063, 0.0);
      Complex complex7 = Complex.I;
      complex7.sinh();
      complex4.sin();
      complex3.reciprocal();
      complex6.multiply(3963522.5396);
      Complex complex8 = new Complex((-200.237438), 0.27342069149017334);
      Complex complex9 = Complex.valueOf((-1816.4909094965617));
      complex1.subtract(complex9);
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-1.0), 1081.6669685);
      complex2.ONE.multiply(complex1);
      Complex complex3 = new Complex((-300.938794));
      complex3.conjugate();
      Complex complex4 = Complex.ZERO;
      Object object0 = new Object();
      Complex complex5 = Complex.NaN;
      complex4.equals(complex5);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = complex0.sqrt();
      complex0.equals((Object) null);
      complex0.getReal();
      Complex complex2 = complex0.multiply((-4249));
      complex1.abs();
      complex0.acos();
      complex0.NaN.toString();
      complex2.add(1.0);
      try { 
        complex0.nthRoot((-4249));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,249
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      complex0.hashCode();
      complex0.hashCode();
      complex0.abs();
      complex0.getField();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.divide(complex0);
      complex2.acos();
      complex0.getArgument();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = Complex.I;
      complex2.getReal();
      complex0.getArgument();
      Complex complex3 = complex0.log();
      complex2.multiply(complex3);
      complex2.cosh();
      complex2.INF.getArgument();
      complex0.isNaN();
      Complex complex4 = Complex.valueOf(1872.02839);
      complex4.sin();
      complex0.multiply(1);
      complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1816.4909094965617));
      Complex complex2 = complex1.ONE.tanh();
      complex2.nthRoot(2151);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-1903.3405286), 2415.7);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.divide(complex3);
      complex0.cos();
      complex0.divide(1594.671104844828);
      complex4.multiply(complex0);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(338.509223);
      complex0.I.abs();
      Complex complex1 = complex0.atan();
      complex1.abs();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.sqrt();
      complex2.toString();
      complex2.toString();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex2.divide(complex4);
      complex0.reciprocal();
      complex5.divide((-1816.2));
      Complex complex6 = complex5.pow(1288.6363813076662);
      complex6.ZERO.exp();
      complex3.hashCode();
      complex1.multiply(complex5);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1134.76528339, 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.ONE.subtract(0.0);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex2.add(complex0);
      Complex.valueOf(0.0);
      complex4.multiply(0);
      complex4.ONE.multiply(complex5);
      complex6.I.pow(0.0);
      Complex complex7 = complex0.exp();
      Complex complex8 = Complex.valueOf((-3031.71));
      Complex complex9 = complex6.multiply((-3029));
      complex9.ZERO.exp();
      Complex complex10 = complex9.conjugate();
      complex10.add(complex8);
      Complex complex11 = complex4.exp();
      complex11.ZERO.divide((double) (-3029));
      Complex complex12 = complex3.sqrt1z();
      complex6.exp();
      Complex complex13 = complex1.createComplex((-34.44661959), (-3029));
      complex13.sqrt();
      complex13.INF.add(complex4);
      complex7.sin();
      complex2.equals(complex1);
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Object object0 = complex0.readResolve();
      complex1.INF.sqrt();
      complex1.equals(object0);
      complex0.getReal();
      Complex complex2 = complex0.INF.multiply(0);
      complex2.I.abs();
      complex1.acos();
      complex0.add(0.0);
      complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      complex0.I.getField();
      Complex complex2 = complex0.log();
      complex1.subtract(complex0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex2.multiply((-2511));
      complex5.NaN.getField();
      complex2.conjugate();
      complex4.subtract((-4.350745270980051E-10));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex0.INF.hashCode();
      complex0.isNaN();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.I.log();
      complex2.I.cosh();
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex0.I.multiply(1);
      complex5.INF.divide(complex0);
      complex3.INF.readResolve();
      Complex complex6 = complex1.subtract(2187.7178);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.ZERO.add(2187.7178);
      complex8.ZERO.sin();
      complex6.I.getArgument();
      Complex complex9 = complex0.subtract((-492.2565));
      complex2.isInfinite();
      complex2.equals(complex6);
      Complex complex10 = complex1.pow(2187.7178);
      Complex complex11 = complex9.log();
      Complex complex12 = complex11.NaN.subtract(complex5);
      Complex complex13 = complex2.subtract(complex0);
      complex6.ZERO.log();
      complex12.INF.toString();
      complex10.cos();
      complex7.add((-492.2565));
      complex13.abs();
      complex6.abs();
      complex7.tanh();
      complex10.log();
      Complex.valueOf(0.0);
      Complex complex14 = complex12.conjugate();
      complex14.INF.getField();
      complex5.tanh();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.getImaginary();
      complex0.abs();
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.I.pow(complex0);
      Complex complex2 = complex0.add(complex1);
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0274494061148778E-8);
      complex0.NaN.nthRoot(1);
      complex0.INF.hashCode();
      Complex complex1 = complex0.multiply(1263);
      Complex complex2 = complex1.INF.divide((-1166.0));
      try { 
        complex2.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.sqrt1z();
      Complex complex1 = Complex.valueOf(3066.03, 431.0);
      Complex complex2 = Complex.ONE;
      complex1.pow(complex2);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1816.4909094965617));
      Complex complex2 = complex1.ONE.tanh();
      complex0.log();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex3.ZERO.createComplex(5047.38166, 5047.38166);
      Complex complex5 = complex0.NaN.createComplex((-213.903711732), (-3473.10321107204));
      Complex complex6 = complex2.ONE.sqrt();
      complex5.subtract(2.71853394036182E-51);
      complex0.NaN.toString();
      complex0.isInfinite();
      complex3.NaN.conjugate();
      Complex complex7 = complex5.cosh();
      complex0.createComplex(1415.999, (-3473.10321107204));
      complex3.acos();
      complex3.abs();
      complex7.tan();
      complex4.isInfinite();
      complex6.tanh();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(0.0);
      complex0.nthRoot(2251);
      complex1.hashCode();
      Complex complex2 = complex1.pow(complex0);
      double double0 = 1659.1;
      Complex complex3 = complex0.createComplex(1659.1, 3113.744517);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex1.cos();
      complex3.I.getField();
      complex4.ZERO.getArgument();
      complex4.NaN.subtract(complex1);
      Complex complex6 = complex1.multiply((double) 2251);
      complex0.readResolve();
      complex2.cos();
      complex6.toString();
      complex5.isNaN();
      Complex complex7 = complex0.add(3113.744517);
      complex3.add(complex1);
      Complex complex8 = complex7.asin();
      complex4.multiply(complex8);
      try { 
        complex4.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      complex2.ZERO.atan();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.asin();
      complex5.I.tan();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.INF.divide(1495.474668);
      complex0.isInfinite();
      complex0.toString();
      complex0.multiply((-988));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(4684.777);
      complex0.subtract(4684.777);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 9.350990339947455E-147);
      Complex complex1 = Complex.valueOf(9.350990339947455E-147, 9.350990339947455E-147);
      Complex complex2 = Complex.INF;
      complex0.add(complex2);
      complex0.INF.log();
      complex0.ZERO.add(complex1);
      complex0.isInfinite();
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.I.multiply(complex1);
      complex0.getArgument();
      Complex complex2 = complex0.subtract(1.5707963267948966);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = Complex.valueOf(1.5707963267948966, 0.0);
      Complex complex7 = complex5.ONE.sinh();
      Complex complex8 = complex4.NaN.sinh();
      complex8.INF.atan();
      Complex complex9 = complex7.ZERO.tanh();
      Complex complex10 = complex0.reciprocal();
      complex10.getField();
      Complex complex11 = complex0.negate();
      complex11.ONE.conjugate();
      complex10.readResolve();
      Complex complex12 = complex9.multiply(0.0);
      complex2.divide(1.5707963267948966);
      double double0 = 1.0227150917053223;
      complex2.I.multiply(1.0227150917053223);
      complex9.isNaN();
      complex3.sinh();
      complex9.cosh();
      Complex complex13 = complex7.sqrt1z();
      Complex complex14 = complex5.tan();
      complex14.log();
      complex6.sqrt();
      complex13.asin();
      try { 
        complex12.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 915.700508367;
      Complex complex1 = complex0.divide(915.700508367);
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = Complex.valueOf(915.700508367);
      complex3.ONE.subtract(complex2);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex3.NaN.negate();
      int int0 = 2079;
      complex5.ONE.multiply(2079);
      Complex complex6 = complex4.NaN.atan();
      try { 
        complex6.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.divide(3003.04906);
      Complex complex2 = complex1.I.pow(complex0);
      complex2.divide(complex0);
      complex2.NaN.divide(complex1);
      complex2.INF.toString();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.ZERO.divide(complex0);
      complex1.getField();
      Complex complex5 = complex3.NaN.tanh();
      Complex complex6 = complex0.ONE.negate();
      complex6.I.cosh();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.sqrt1z();
      complex8.I.abs();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex9.INF.divide(449.8308267637216);
      Complex complex11 = complex7.conjugate();
      complex11.I.abs();
      Complex complex12 = Complex.valueOf(3003.04906);
      complex8.toString();
      complex0.getReal();
      complex4.add(Double.POSITIVE_INFINITY);
      complex1.atan();
      complex12.getArgument();
      complex4.readResolve();
      complex2.multiply(complex11);
      complex5.getImaginary();
      complex9.add(complex10);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(196.87756, 20.0);
      Complex complex2 = complex1.pow(196.87756);
      Complex complex3 = complex1.ONE.add(1039.7649216);
      Complex complex4 = complex1.ONE.pow(complex0);
      complex4.I.toString();
      complex4.INF.exp();
      complex1.I.readResolve();
      complex0.isNaN();
      Complex complex5 = complex0.asin();
      complex5.NaN.divide(complex0);
      complex0.abs();
      complex0.hashCode();
      complex2.negate();
      complex3.createComplex(196.87756, 20.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 5.5906456251308664E-8);
      complex0.readResolve();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex0.multiply(37);
      Complex complex5 = complex4.acos();
      complex5.ONE.abs();
      complex1.readResolve();
      Complex complex6 = complex1.INF.cos();
      Complex complex7 = complex1.createComplex(3146.28196, 1230.9);
      complex7.getField();
      complex0.isNaN();
      complex3.getField();
      Complex complex8 = complex3.pow(complex1);
      complex8.ZERO.hashCode();
      Complex complex9 = complex6.pow(complex7);
      Complex complex10 = complex9.pow(complex1);
      Complex complex11 = complex3.cosh();
      complex11.isNaN();
      complex10.multiply(37);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = 1.9050939083099365;
      Complex complex0 = new Complex(20.0, 1.9050939083099365);
      complex0.subtract(0.0);
      Complex complex1 = complex0.sinh();
      try { 
        complex1.NaN.nthRoot((-968));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -968
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.log();
      complex0.tanh();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.tan();
      complex0.NaN.add((-1065.3));
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.I.negate();
      Complex complex7 = complex5.I.tan();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex3.subtract(complex5);
      complex9.acos();
      Complex complex10 = complex4.ZERO.subtract((-1065.3));
      Complex complex11 = complex10.INF.multiply(37);
      complex0.getField();
      Complex complex12 = complex5.subtract(complex1);
      complex12.divide(complex11);
      complex7.getReal();
      complex6.multiply(0.0);
      complex8.divide(complex12);
      complex4.tan();
      Complex complex13 = new Complex((-705.1306));
      complex5.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), 2806.223350953575);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.INF.exp();
      complex3.ZERO.cosh();
      complex2.ONE.getArgument();
      Complex complex4 = complex0.NaN.tan();
      complex4.sinh();
      Complex complex5 = complex0.acos();
      complex0.NaN.log();
      complex5.ONE.getField();
      complex5.multiply(1);
      complex5.ZERO.sinh();
      Complex complex6 = complex4.pow(complex0);
      int int0 = 0;
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      complex1.ZERO.multiply((-1107.5379));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.divide((-43.0));
      complex0.abs();
      complex0.ONE.pow(complex3);
      Complex complex4 = complex3.divide(1.0);
      Complex complex5 = complex3.pow((-4055.29303377762));
      Complex complex6 = complex5.NaN.sqrt1z();
      Complex complex7 = complex5.add(1.0);
      complex7.ONE.createComplex(1128.06, (-2255.74111));
      complex1.getField();
      Complex complex8 = complex2.I.add((-1159.4897));
      complex8.ZERO.atan();
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = complex3.pow(complex6);
      complex1.acos();
      complex10.I.subtract((-1159.4897));
      complex10.add(complex4);
      complex10.negate();
      complex11.sqrt();
      complex6.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.reciprocal();
      complex0.hashCode();
      complex1.hashCode();
      complex1.abs();
      complex1.getReal();
      complex2.getArgument();
      complex1.ONE.log();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.cosh();
      complex4.isNaN();
      complex4.sin();
      Complex complex5 = complex4.multiply(1);
      complex5.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(1005.3397269419);
      complex0.I.readResolve();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.nthRoot((-3572));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,572
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.acos();
      complex0.NaN.toString();
      Complex complex2 = complex1.I.subtract(2.0);
      Complex complex3 = Complex.valueOf(2.0, 2.0);
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.NaN.subtract((-787.0));
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex2.pow(complex5);
      complex1.ONE.toString();
      Complex complex7 = complex6.pow(complex4);
      complex7.exp();
      complex1.ONE.multiply(complex0);
      complex7.I.tan();
      complex7.I.pow(complex3);
      Complex complex8 = complex1.sqrt();
      complex8.ZERO.readResolve();
      Complex complex9 = complex7.divide(2.0);
      complex7.reciprocal();
      complex2.negate();
      complex7.subtract(100.3);
      complex4.createComplex(100.3, 100.3);
      complex8.log();
      complex9.sqrt1z();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.add(1.0);
      complex0.I.negate();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex1.add(complex2);
      Complex.valueOf(0.0);
      complex1.ONE.pow(complex4);
      complex4.subtract((-20.0));
      Complex complex5 = complex3.add((-20.0));
      complex5.INF.getArgument();
      complex0.ZERO.log();
      complex4.createComplex(587.29564, (-2257.0729884));
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(1841.400836615753);
      Complex complex1 = new Complex(6.283185307179586);
      complex0.asin();
      Complex complex2 = complex1.I.pow(6.283185307179586);
      Complex complex3 = complex1.ZERO.add(6.283185307179586);
      Complex complex4 = complex0.add(complex1);
      complex4.I.subtract(complex1);
      Complex.valueOf(6.283185307179586);
      complex4.I.multiply(complex0);
      complex4.I.getArgument();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.tanh();
      complex1.I.conjugate();
      Complex complex7 = complex6.NaN.divide(0.0);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex6.ZERO.pow(complex8);
      complex9.INF.toString();
      complex5.getField();
      Complex complex10 = complex8.sin();
      complex10.ZERO.createComplex(6.283185307179586, 0.0);
      Complex complex11 = complex2.subtract(complex7);
      Complex complex12 = complex11.multiply(1841.400836615753);
      Complex complex13 = complex3.divide(complex0);
      complex13.divide(complex2);
      complex12.tan();
      complex9.add(0.0);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(194.993, 194.993);
      complex0.ZERO.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.subtract(complex0);
      complex0.ZERO.subtract(2963.7);
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex3.createComplex(3.601718675118614E-8, 658.499831829096);
      complex5.I.conjugate();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.divide(194.993);
      complex7.ZERO.atan();
      Complex complex8 = complex2.cosh();
      complex8.toString();
      complex8.cos();
      complex3.atan();
      complex7.hashCode();
      complex1.I.tan();
      complex2.getImaginary();
      Complex complex9 = Complex.ONE;
      complex9.reciprocal();
      complex1.multiply(complex9);
      complex1.createComplex(658.499831829096, 2963.7);
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex4.sin();
      complex8.reciprocal();
      complex11.multiply(0.0);
      Complex complex12 = new Complex(0.8414709848078965, (-233.6598142));
      complex10.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(1.0);
      Complex complex1 = Complex.I;
      complex1.ONE.getField();
      complex1.INF.sqrt();
      complex0.ONE.sinh();
      complex0.divide(complex1);
      Complex complex2 = complex0.acos();
      complex2.getArgument();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Complex.valueOf((-397.37886783));
      complex0.equals(object0);
      Complex complex1 = Complex.I;
      complex0.divide(complex1);
      Complex complex2 = complex1.add(2.6423792839050293);
      complex2.I.toString();
      complex2.getImaginary();
      complex2.abs();
      complex0.isInfinite();
      Complex complex3 = complex1.sinh();
      complex3.acos();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex0.ONE.sqrt();
      complex3.INF.createComplex((-20.0), (-419.3936071058));
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = Complex.ONE;
      complex0.INF.acos();
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex4.ONE.pow(complex5);
      Complex.valueOf((-1.0));
      complex0.abs();
      String string0 = complex1.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex8 = complex0.acos();
      Complex.valueOf((-4.191810118556531E-11));
      Complex complex9 = Complex.valueOf(1320.1558518);
      Complex complex10 = complex9.ZERO.atan();
      Complex complex11 = complex10.ZERO.reciprocal();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex3.pow(complex2);
      assertSame(complex13, complex12);
      
      Complex complex14 = complex8.multiply(0.0);
      Complex complex15 = complex14.I.subtract(603.48918216);
      assertEquals((-603.48918216), complex15.getReal(), 0.01);
      
      complex4.abs();
      assertTrue(complex4.equals((Object)complex10));
      assertTrue(complex3.equals((Object)complex7));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex16 = complex1.multiply((-20.0));
      Complex complex17 = complex2.conjugate();
      assertFalse(complex17.equals((Object)complex6));
      assertSame(complex17, complex16);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2407.950067, 2407.950067);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ZERO.exp();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals(2407.950067, complex0.getImaginary(), 0.01);
      assertEquals(2407.950067, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      double double0 = (-1112.0);
      complex0.ONE.asin();
      Complex complex2 = complex0.NaN.multiply(1558);
      complex2.I.sin();
      Complex complex3 = complex1.ZERO.divide((-1112.0));
      complex3.INF.sqrt1z();
      complex0.INF.log();
      complex0.readResolve();
      complex0.isNaN();
      complex0.getField();
      Complex.valueOf((double) 1558, (-1112.0));
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.I.sin();
      complex1.subtract(1224.0);
      Complex complex3 = complex2.NaN.cosh();
      complex3.INF.multiply((-2399));
      complex2.NaN.asin();
      complex1.NaN.toString();
      Complex complex4 = complex0.INF.subtract(2.9300903540317107E-8);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex4.ONE.multiply(complex2);
      complex5.hashCode();
      complex0.hashCode();
      complex6.ZERO.pow(complex5);
      Complex complex7 = complex4.cos();
      Complex complex8 = Complex.valueOf(2.9300903540317107E-8, 0.0);
      Complex complex9 = complex8.NaN.multiply((-2399));
      complex9.reciprocal();
      complex0.multiply(complex7);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1308.5243141897);
      Complex complex1 = complex0.divide(1308.5243141897);
      Complex complex2 = complex0.NaN.add(complex1);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ONE.subtract(1997.098);
      assertEquals((-1996.098), complex4.getReal(), 0.01);
      
      complex3.ZERO.getField();
      double double0 = complex3.abs();
      assertEquals(1308.5239320798166, double0, 0.01);
      assertEquals(1308.5239320798166, complex3.getImaginary(), 0.01);
  }
}
