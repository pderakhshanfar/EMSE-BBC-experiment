/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:30:21 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(3.003777734030334E-116, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.exp();
      int int0 = 1073741824;
      complex3.nthRoot(1073741824);
      complex0.pow(complex2);
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex4.ZERO.multiply(439.49924937033046);
      complex4.I.pow(complex5);
      complex0.NaN.toString();
      complex0.tanh();
      Complex complex6 = complex5.add(1847.5025858599);
      complex6.ONE.cosh();
      int int1 = (-1423);
      try { 
        complex0.nthRoot((-1423));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,423
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.tanh();
      Complex complex1 = Complex.NaN;
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(308.914162243, 20.0);
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(2485.1342101697);
      complex0.tanh();
      Complex complex3 = complex1.tan();
      complex3.sqrt1z();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.valueOf(1804.69817182784, 1804.69817182784);
      Complex complex3 = complex0.add(1804.69817182784);
      complex3.getArgument();
      complex0.INF.abs();
      complex3.pow(0.0);
      Complex complex4 = complex1.createComplex(1804.69817182784, 0.0);
      complex3.getImaginary();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.pow(1804.69817182784);
      Complex complex7 = complex2.add(complex4);
      Complex complex8 = complex6.tanh();
      complex2.pow(complex7);
      complex8.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex(8.761416875971053E-298);
      Complex complex3 = complex1.add(1804.69817182784);
      complex3.getArgument();
      complex1.abs();
      complex1.pow(1789.298);
      Complex complex4 = complex2.createComplex(223.348, Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex(1100.6465, 223.348);
      complex5.getImaginary();
      Complex complex6 = new Complex((-1532.82178867141));
      complex6.pow(2415.8);
      complex3.add(complex1);
      Complex complex7 = new Complex(8.761416875971053E-298, 1789.298);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.valueOf(2.813631004853486E73);
      complex9.subtract(complex4);
      Complex complex10 = Complex.INF;
      complex4.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex0.I.abs();
      complex1.ZERO.hashCode();
      complex1.I.tanh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(7.588848358885308E-20);
      complex3.exp();
      complex3.toString();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.add((-2.564688370677835E-8));
      complex5.getReal();
      complex0.NaN.acos();
      Complex complex6 = complex0.ONE.createComplex(2.557407724654902, 3029.361873107514);
      Complex complex7 = complex6.ONE.add((-2.564688370677835E-8));
      complex7.INF.multiply((-2.564688370677835E-8));
      Complex complex8 = complex4.INF.negate();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex0.cos();
      complex10.I.nthRoot(17);
      Complex complex11 = complex4.cosh();
      complex11.NaN.abs();
      complex5.divide((-2.564688370677835E-8));
      complex10.sqrt1z();
      complex8.multiply(203.486);
      Complex complex12 = complex11.acos();
      complex12.I.sqrt();
      complex0.nthRoot(17);
      complex9.divide((-2.564688370677835E-8));
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.multiply((-213.2));
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.ONE.subtract(complex2);
      Complex complex5 = complex1.ZERO.sinh();
      Complex complex6 = complex0.add(complex1);
      complex6.NaN.abs();
      complex0.subtract(1.0143022354947225E63);
      Complex complex7 = complex3.sqrt();
      complex0.atan();
      complex7.sqrt1z();
      complex5.nthRoot(2056);
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-1321.4197652276));
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex0.createComplex((-1321.4197652276), (-1321.4197652276));
      Complex complex4 = new Complex((-0.21795809846086198), (-0.21795809846086198));
      complex4.getImaginary();
      complex4.pow(712.0);
      Complex complex5 = Complex.INF;
      complex1.pow(complex3);
      Complex complex6 = complex4.divide((-0.21795809846086198));
      complex3.createComplex((-743.324276100527), 1127.149);
      Complex complex7 = complex4.tan();
      complex3.cosh();
      complex0.divide(1289.167726432844);
      Complex complex8 = complex2.subtract(complex6);
      complex8.acos();
      complex6.abs();
      Complex complex9 = complex7.multiply(complex3);
      // Undeclared exception!
      complex9.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.add(0.0);
      complex1.getArgument();
      complex5.abs();
      Complex complex6 = complex3.pow(4925.21106447725);
      Complex complex7 = Complex.I;
      complex2.add(complex6);
      Complex complex8 = new Complex(-0.0);
      complex8.pow(complex6);
      Complex complex9 = complex2.INF.sqrt1z();
      Complex complex10 = new Complex(1189.1, -0.0);
      complex3.add(complex9);
      Complex complex11 = complex7.pow(complex8);
      complex4.subtract(complex3);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = Complex.NaN;
      complex13.divide((-2485.1342101697));
      Complex complex14 = Complex.INF;
      complex14.add(complex7);
      Complex.valueOf(6.283185307179586);
      complex7.tanh();
      Object object0 = new Object();
      Complex complex15 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      complex11.equals(complex15);
      complex15.cos();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-1321.4197652276));
      Complex complex2 = complex1.createComplex((-866.8321), (-1321.4197652276));
      complex1.getImaginary();
      Complex complex3 = complex0.pow(-0.0);
      complex3.add(complex2);
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = Complex.ZERO;
      complex5.divide((-2056.9703129214));
      complex2.add(complex4);
      Complex complex6 = Complex.I;
      complex6.tanh();
      Object object0 = new Object();
      Complex complex7 = Complex.I;
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.createComplex((-20.0), 2742.12552);
      Complex complex2 = new Complex(9.485224371274032E26, 930.2315);
      complex2.cosh();
      Complex complex3 = Complex.valueOf(9.485224371274032E26);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      complex1.subtract((-1.0));
      complex1.I.multiply(complex0);
      Complex complex2 = complex0.ZERO.multiply((-1.0));
      complex0.NaN.divide(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.subtract(990.51377);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex4.multiply(complex2);
      complex1.divide(complex5);
      Complex complex7 = complex3.createComplex((-2902.23772938), (-2902.23772938));
      complex4.getImaginary();
      Complex complex8 = complex7.pow((-743.324276100527));
      Complex complex9 = Complex.INF;
      complex7.pow(complex5);
      complex8.divide(0.0);
      complex4.createComplex((-743.324276100527), (-2066.012517430385));
      complex7.tan();
      complex1.cosh();
      complex6.divide(990.51377);
      complex2.subtract(complex4);
      complex7.acos();
      complex1.abs();
      complex7.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.asin();
      complex1.nthRoot(7);
      complex2.exp();
      complex3.exp();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-1321.4197652276));
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = new Complex((-1106.7), 6.283185307179586);
      Complex complex4 = complex2.divide(2742.12552);
      Complex complex5 = complex1.createComplex(0.6366197723675814, (-2321.97382436255));
      complex1.tan();
      complex2.cosh();
      Complex complex6 = complex0.tanh();
      complex5.subtract(1.0);
      complex6.abs();
      complex5.cos();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.negate();
      complex1.conjugate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.reciprocal();
      complex2.equals(complex1);
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(947.858373462508);
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.I.pow((-4.952031310451961E63));
      complex3.I.conjugate();
      Complex complex4 = complex1.multiply(947.858373462508);
      complex0.ONE.hashCode();
      Complex complex5 = complex0.multiply((-1688));
      complex5.abs();
      complex5.ZERO.abs();
      Complex complex6 = complex0.NaN.acos();
      Complex complex7 = complex0.createComplex(1688.0, (-1097.6829700338567));
      Complex complex8 = Complex.valueOf((-1097.6829700338567), (double) (-1688));
      complex4.getField();
      complex8.abs();
      Complex complex9 = complex7.asin();
      complex9.NaN.sqrt1z();
      complex9.log();
      try { 
        complex6.nthRoot((-1497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,497
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2059301405584488E-12), (-1.2059301405584488E-12));
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-489.53405910268), (-489.53405910268));
      complex2.reciprocal();
      complex2.ONE.abs();
      Complex complex3 = complex0.add(Double.NaN);
      complex3.tan();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.divide((-3422.73233083258));
      Complex complex2 = new Complex(0.19622188806533813);
      Complex complex3 = complex2.createComplex((-3422.73233083258), 6.283185307179586);
      Complex complex4 = Complex.valueOf(0.19622188806533813);
      complex4.tan();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex2.divide((-650.34516));
      complex6.ONE.nthRoot(2951);
      Complex complex7 = Complex.valueOf((-2066.012517430385));
      Complex complex8 = complex4.subtract(complex2);
      complex3.acos();
      complex5.abs();
      complex8.createComplex((-650.34516), (-777.8963702152));
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.pow((-3422.73233083258));
      complex1.multiply(complex0);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.subtract(0.41421356237309515);
      complex3.tanh();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = new Complex(990.51377);
      Complex complex6 = complex2.divide(complex5);
      complex4.createComplex(990.51377, 0.41421356237309515);
      complex2.getImaginary();
      Complex complex7 = complex6.pow(Double.NaN);
      complex4.add(complex2);
      complex1.pow(complex3);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.divide((-2056.9703129214));
      Complex complex10 = complex9.ZERO.createComplex((-431.65), (-431.65));
      Complex complex11 = new Complex(Double.NaN);
      Complex complex12 = Complex.I;
      complex12.cosh();
      Complex complex13 = complex7.divide(2.0358991622924805);
      Complex.valueOf(0.0);
      Complex complex14 = Complex.INF;
      complex13.subtract(complex14);
      complex14.acos();
      complex10.abs();
      complex5.createComplex(2601.4, 0.0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(654.897547, 0.7615941559557649);
      complex0.ONE.abs();
      complex0.I.subtract(complex0);
      complex0.divide(complex0);
      complex0.add(complex1);
      complex0.tanh();
      complex1.asin();
      complex0.sqrt();
      Complex complex2 = Complex.ZERO;
      complex2.tan();
      Complex complex3 = new Complex(1768.5774);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.subtract((-1.0));
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex0.ZERO.multiply((-1.0));
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.exp();
      Complex complex7 = complex1.subtract(990.51377);
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex7.multiply(complex4);
      complex1.getArgument();
      complex8.abs();
      Complex complex10 = complex7.multiply((-1731));
      complex3.atan();
      complex2.exp();
      Complex complex11 = new Complex(0.7615941559557649, Double.NaN);
      complex11.tan();
      complex8.sqrt();
      complex9.tan();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.reciprocal();
      complex0.tanh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.add(0.0);
      complex1.getArgument();
      complex4.abs();
      complex2.pow(4925.21106447725);
      Complex complex5 = Complex.ZERO;
      complex5.conjugate();
      complex4.reciprocal();
      Complex complex6 = Complex.valueOf(6.283185307179586, Double.NaN);
      complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      complex0.I.reciprocal();
      Complex complex1 = complex0.tanh();
      complex0.I.cosh();
      Complex complex2 = complex0.add(1804.69817182784);
      complex2.getArgument();
      complex0.INF.abs();
      complex2.multiply(387);
      complex0.ZERO.atan();
      Complex complex3 = Complex.NaN;
      complex1.tanh();
      Complex complex4 = new Complex(387, (-20.0));
      complex4.abs();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.tanh();
      complex0.I.cosh();
      Complex complex3 = Complex.ONE;
      complex3.getArgument();
      complex0.INF.abs();
      complex3.pow(0.0);
      Complex complex4 = Complex.I;
      complex3.add(complex4);
      complex4.pow(complex2);
      Complex complex5 = new Complex((-3544.15), 0.6366197723675814);
      Complex complex6 = complex5.divide(0.0);
      Complex complex7 = complex0.subtract(981116.5285596129);
      complex1.subtract(complex6);
      complex7.sinh();
      Complex complex8 = Complex.valueOf(1804.69817182784, Double.POSITIVE_INFINITY);
      complex8.asin();
      Complex complex9 = new Complex(0.0, (-3544.15));
      complex0.add(complex6);
      complex5.pow(1874.677);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.subtract(1132.3);
      complex1.I.multiply(complex0);
      Complex complex3 = complex0.ZERO.multiply((-1.0));
      Complex complex4 = complex3.ZERO.sinh();
      complex0.NaN.divide(complex1);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex4.subtract(990.51377);
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex6.multiply(complex2);
      Complex complex9 = complex0.divide(complex3);
      Complex complex10 = complex4.createComplex(0.0, (-2902.23772938));
      complex1.getImaginary();
      complex5.pow(2.0);
      complex10.add(complex8);
      Complex complex11 = Complex.I;
      complex9.pow(complex11);
      Complex complex12 = complex10.divide((-2902.23772938));
      complex4.createComplex(0.0, (-2485.1342101697));
      complex7.tan();
      complex12.cosh();
      complex11.divide((-1.0));
      Complex.valueOf(0.5);
      try { 
        complex12.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex((-2485.1342101697), 3263.431015407691);
      Complex complex3 = complex1.divide(2.0);
      complex0.createComplex(6.180972117932364E-99, 3355.508899);
      complex1.tan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.divide(1386.34933);
      Complex complex6 = Complex.valueOf(0.9999999999999432);
      Complex.valueOf((-20.0), 0.0);
      complex3.subtract(complex6);
      complex5.acos();
      complex5.exp();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sinh();
      complex2.getField();
      complex3.readResolve();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 5.81922497991021);
      complex0.isInfinite();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.tanh();
      complex6.abs();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide((-6.19669511349359));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.pow(complex0);
      complex2.nthRoot(1);
      complex3.asin();
      Complex complex4 = Complex.valueOf(1.0, (-20.0));
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      complex1.subtract(1132.3);
      complex1.I.multiply(complex0);
      Complex complex2 = complex0.ZERO.multiply((-1.0));
      Complex complex3 = complex2.ZERO.sinh();
      complex0.NaN.divide(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.subtract(990.51377);
      Complex complex6 = complex4.tanh();
      complex5.multiply(complex2);
      complex1.divide(complex6);
      Complex complex7 = complex4.createComplex((-2902.23772938), (-2902.23772938));
      complex5.getImaginary();
      Complex complex8 = complex7.pow((-2056.9703129214));
      complex8.ONE.add(complex2);
      complex7.pow(complex6);
      complex8.divide((-2485.1342101697));
      Complex complex9 = complex8.createComplex((-2303.4304582657), 0.0);
      Complex complex10 = complex4.tan();
      complex9.cosh();
      complex10.readResolve();
      complex2.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      Complex complex1 = Complex.valueOf(1.956199868121249E282, 1804.69817182784);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex2.sinh();
      complex5.getField();
      complex4.readResolve();
      Complex complex6 = Complex.NaN;
      complex2.equals(complex6);
      Complex complex7 = Complex.NaN;
      complex2.tanh();
      Complex complex8 = new Complex((-1837.7707125561094), 1804.69817182784);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      complex1.NaN.cosh();
      Complex complex2 = complex0.divide(6.283185307179586);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Object object0 = complex4.readResolve();
      complex4.equals(object0);
      Complex.valueOf(Double.POSITIVE_INFINITY, 1189.1);
      complex4.getArgument();
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      complex1.ONE.conjugate();
      complex1.NaN.readResolve();
      complex1.nthRoot(4507);
      Complex complex2 = complex0.divide((-2066.012517430385));
      complex0.getArgument();
      Complex complex3 = Complex.valueOf((-2066.012517430385), 0.0);
      Complex complex4 = complex3.pow(complex0);
      complex2.nthRoot(1);
      complex0.asin();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.302803981406403E-8);
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = Complex.valueOf(5.302803981406403E-8, 5.302803981406403E-8);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.divide(complex3);
      complex1.ZERO.createComplex((-1.0), (-1.0));
      Complex complex5 = complex4.add(complex3);
      complex5.sinh();
      complex5.getField();
      complex0.readResolve();
      complex5.equals(complex4);
      complex1.tanh();
      complex1.abs();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(37.0);
      complex0.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.add(3321.0);
      complex2.getArgument();
      complex1.abs();
      Complex complex5 = Complex.valueOf(0.02702702702702703);
      Complex complex6 = complex5.multiply(0);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex0.exp();
      complex1.tan();
      complex4.sqrt();
      complex7.tan();
      complex8.readResolve();
      complex6.nthRoot(954);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(540.0059681991362, 1.956199868121249E282);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.divide(complex2);
      complex0.add(complex2);
      Complex complex4 = complex3.sinh();
      complex3.getField();
      complex2.readResolve();
      complex1.equals(complex4);
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex((-1837.7707125561094), (-1444.44658792));
      complex7.abs();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.exp();
      complex0.ONE.reciprocal();
      complex4.reciprocal();
      complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.ONE.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex0.tan();
      complex9.ONE.readResolve();
      Complex complex10 = complex3.sin();
      complex8.NaN.pow((-127.0));
      complex2.readResolve();
      complex8.add(complex10);
      complex4.add(complex8);
      try { 
        complex7.nthRoot((-1218));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,218
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-206.11554327271), (-206.11554327271));
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex(20.0);
      complex2.INF.acos();
      Complex.valueOf((-206.11554327271), 20.0);
      complex1.INF.divide(complex2);
      complex0.reciprocal();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.187871486648885E-8);
      Complex complex1 = complex0.reciprocal();
      complex1.I.divide(6.283185307179586);
      Complex complex2 = complex1.divide((-1639.45630933408));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(0.0);
      complex0.pow(complex1);
      complex4.tan();
      complex4.sqrt();
      complex2.tan();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      Complex complex1 = complex0.I.reciprocal();
      complex0.tanh();
      complex0.I.cosh();
      Complex complex2 = complex0.add(1804.69817182784);
      complex2.getArgument();
      complex0.INF.abs();
      Complex complex3 = complex2.multiply(387);
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex1.tan();
      complex6.sqrt();
      complex4.tan();
      complex5.readResolve();
      complex3.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      complex0.I.reciprocal();
      Complex complex1 = complex0.tanh();
      complex0.I.cosh();
      Complex complex2 = complex0.add(1804.69817182784);
      complex2.getArgument();
      complex0.INF.abs();
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = Complex.I;
      complex2.add(complex4);
      complex4.pow(complex1);
      Complex complex5 = new Complex((-3544.15), 0.6366197723675814);
      complex5.divide(0.0);
      Complex complex6 = complex3.createComplex((-2485.1342101697), Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.tan();
      complex3.cosh();
      complex7.divide((-2511.43));
      Complex.valueOf((-2485.1342101697));
      Complex complex8 = Complex.valueOf(1804.69817182784, (-2511.43));
      Complex complex9 = complex3.subtract(complex8);
      complex9.acos();
      complex2.exp();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex(0.0, 0.0);
      complex1.ZERO.add(complex0);
      complex2.getField();
      Complex complex3 = complex0.add(complex1);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex4 = complex1.INF.tan();
      complex2.nthRoot(3163);
      complex0.subtract(complex3);
      complex2.multiply(3163);
      Complex complex5 = complex2.sinh();
      complex5.NaN.log();
      complex0.cos();
      Complex complex6 = Complex.I;
      complex0.equals(complex6);
      complex5.divide(-0.0);
      complex4.getImaginary();
      Complex complex7 = Complex.ZERO;
      complex7.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.exp();
      complex0.ONE.reciprocal();
      Complex complex5 = complex2.multiply(complex0);
      complex1.abs();
      complex5.getImaginary();
      complex2.cosh();
      complex0.add(1.5430806348152437);
      complex4.tanh();
      Complex complex6 = complex1.sin();
      complex6.divide(complex0);
      Complex complex7 = Complex.valueOf(2120.5056554254234, (-2.2678858131411216E-256));
      complex7.getImaginary();
      Complex.valueOf(1.5430806348152437);
      complex3.getArgument();
      Complex complex8 = Complex.ZERO;
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.multiply((-1321.4197652276));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.pow((-1321.4197652276));
      complex1.multiply(complex2);
      complex2.tanh();
      complex2.getArgument();
      complex0.sin();
      complex2.multiply((-1321.4197652276));
      Complex complex3 = Complex.valueOf((-1.0));
      complex3.reciprocal();
      complex1.nthRoot(1155);
      complex0.tan();
      complex1.sqrt();
      Complex complex4 = new Complex(1.3055200576782227);
      complex4.tan();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = 5.302803981406403E-8;
      Complex complex0 = Complex.valueOf(5.302803981406403E-8);
      Complex complex1 = complex0.INF.add(5.302803981406403E-8);
      complex1.cosh();
      Complex complex2 = null;
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3326.2), (-3326.2));
      Complex complex1 = Complex.valueOf((-3326.2));
      complex1.ONE.multiply((-3326.2));
      Complex complex2 = Complex.valueOf(0.9985313415527344, (-3326.2));
      complex0.add(complex2);
      complex0.atan();
      complex0.getField();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.pow(6.011963400549547E-4);
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.valueOf(1.0934157897380361E-4);
      Complex complex5 = Complex.valueOf(6.011963400549547E-4);
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex6.subtract(complex0);
      complex2.getField();
      complex5.isInfinite();
      Complex complex8 = new Complex(6.011963400549547E-4, (-434.7));
      Complex complex9 = new Complex(1.0934157897380361E-4, (-434.7));
      complex8.I.pow(complex9);
      complex8.getArgument();
      Complex complex10 = complex3.pow(complex2);
      Complex complex11 = complex10.negate();
      Complex complex12 = complex8.sqrt1z();
      complex11.sqrt1z();
      complex7.pow((-2673.844));
      complex0.negate();
      Complex complex13 = complex12.divide((-1.3109780645163868E7));
      complex7.add(complex11);
      complex2.atan();
      complex7.getField();
      complex11.toString();
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.getField();
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.tanh();
      complex4.NaN.getArgument();
      Complex complex5 = complex2.ZERO.sin();
      complex4.divide(complex0);
      Complex complex6 = complex3.createComplex(0.0, Double.NaN);
      complex0.getImaginary();
      Complex complex7 = new Complex((-341.0), (-4304.158188380915));
      Complex complex8 = complex7.pow(2481.88392182);
      complex8.add(complex6);
      Complex complex9 = complex0.pow(complex6);
      complex7.divide(complex4);
      complex7.divide((-2902.23772938));
      complex3.createComplex((-506.2873545045934), (-2303.4304582657));
      Complex complex10 = complex5.tan();
      complex10.cosh();
      Complex complex11 = complex3.divide(Double.NaN);
      complex11.INF.hashCode();
      Complex.valueOf((-2485.1342101697));
      Complex complex12 = complex2.subtract(complex9);
      Complex complex13 = complex12.acos();
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.getField();
      complex0.isInfinite();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = complex1.negate();
      complex2.sqrt1z();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.ZERO;
      complex5.I.multiply((-672.8795097));
      complex3.negate();
      Complex complex6 = complex3.divide((-1838.328));
      Complex complex7 = complex6.add(complex3);
      complex1.atan();
      complex4.getField();
      complex7.toString();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(2384.2);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.sin();
      complex1.ZERO.tan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf(2384.2);
      Complex complex5 = complex3.ONE.tanh();
      Complex complex6 = complex5.INF.multiply(complex0);
      complex6.reciprocal();
      Complex complex7 = new Complex(1.0, 2384.2);
      Complex complex8 = complex7.add(complex2);
      Complex complex9 = Complex.INF;
      complex1.pow(complex9);
      complex7.divide((-1.3109780645163868E7));
      Complex complex10 = complex9.createComplex(4592.27965788, (-2485.1342101697));
      complex8.tan();
      complex5.cosh();
      Complex complex11 = complex4.divide((-2303.4304582657));
      Complex.valueOf((-2303.4304582657));
      Complex complex12 = Complex.valueOf((-0.9996993566367566));
      complex11.subtract(complex12);
      complex12.acos();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(16.7361);
      Complex complex1 = Complex.valueOf(16.7361);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.I.pow(complex0);
      complex3.NaN.getField();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.subtract(1672.10093);
      Complex complex6 = complex0.sinh();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex1.NaN.divide(complex7);
      complex8.NaN.atan();
      Complex complex9 = complex5.exp();
      complex9.I.abs();
      complex5.I.conjugate();
      complex9.toString();
      Complex complex10 = complex5.pow(complex4);
      Complex complex11 = complex10.ONE.multiply(complex5);
      complex11.NaN.conjugate();
      complex7.hashCode();
      complex1.getField();
      complex7.sqrt1z();
      complex11.sqrt1z();
      complex2.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.subtract(1132.3);
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex0.ZERO.multiply((-1.0));
      Complex complex5 = complex4.ZERO.sinh();
      complex0.NaN.divide(complex1);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex5.subtract(990.51377);
      Complex complex8 = complex6.tanh();
      complex7.multiply(complex4);
      Complex complex9 = complex1.divide(complex8);
      complex9.ONE.add((-1.0));
      Complex complex10 = complex6.createComplex((-2902.23772938), (-2902.23772938));
      complex8.reciprocal();
      complex5.multiply(37);
      complex1.isInfinite();
      Complex complex11 = complex3.add(1132.3);
      complex5.isNaN();
      complex10.cos();
      complex11.isInfinite();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-1321.4197652276));
      Complex complex2 = complex0.I.conjugate();
      complex0.toString();
      complex0.asin();
      complex2.negate();
      Complex complex3 = complex2.negate();
      complex3.abs();
      complex2.add(1.0);
      complex1.sin();
      Complex complex4 = new Complex((-1321.4197652276), 1.0);
      Object object0 = new Object();
      complex3.equals(object0);
      Complex.valueOf((-303.1523032504));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.302803981406403E-8);
      Complex complex1 = complex0.INF.add(5.302803981406403E-8);
      Complex complex2 = complex1.cosh();
      complex2.NaN.exp();
      complex2.NaN.multiply((-2647.75));
      complex0.NaN.getField();
      Complex complex3 = complex0.cos();
      complex0.getReal();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.add(complex2);
      complex3.ONE.negate();
      Complex complex6 = complex3.pow(complex4);
      complex1.readResolve();
      Complex complex7 = complex0.divide(5.302803981406403E-8);
      complex7.getImaginary();
      Complex complex8 = complex2.ONE.multiply(complex5);
      Complex complex9 = complex6.add(5.302803981406403E-8);
      complex9.INF.reciprocal();
      complex2.cosh();
      complex5.divide(757.71);
      Complex complex10 = complex4.pow(complex7);
      complex6.toString();
      complex10.ZERO.hashCode();
      complex8.reciprocal();
      complex6.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.pow((-5.5375198555230725E305));
      complex0.readResolve();
      complex2.readResolve();
      Complex complex3 = complex2.createComplex((-5.5375198555230725E305), 0.4537591338157654);
      complex1.getField();
      complex2.add(0.0);
      Complex complex4 = Complex.valueOf(3826.78897012716, 3826.78897012716);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.cosh();
      complex6.getReal();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.tan();
      Complex complex8 = complex1.tan();
      complex5.readResolve();
      Complex complex9 = Complex.NaN;
      Object object0 = complex4.readResolve();
      complex8.NaN.multiply(482);
      complex9.equals(object0);
      Complex complex10 = Complex.INF;
      complex8.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.187871486648885E-8);
      Complex complex1 = complex0.reciprocal();
      complex1.I.divide(6.283185307179586);
      complex1.divide((-1639.45630933408));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.divide(0.0);
      complex0.pow(complex1);
      complex0.pow(complex2);
      complex3.exp();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply(2.065941333770752);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.pow(Double.POSITIVE_INFINITY);
      complex4.readResolve();
      complex0.readResolve();
      complex1.createComplex((-678.4759151904534), (-676.6096991760808));
      complex4.getField();
      complex4.add(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(2.0, (-2.0599801342241997E-8));
      Complex complex6 = new Complex(2.065941333770752);
      Complex complex7 = Complex.I;
      Complex complex8 = new Complex(2.1388659707647114E-62, (-1121.232712463659));
      complex8.cosh();
      complex2.getReal();
      Complex complex9 = complex7.tan();
      complex8.tan();
      complex4.readResolve();
      complex0.equals(complex9);
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3326.2), (-3326.2));
      Complex complex1 = Complex.valueOf(0.9985313415527344, (-3326.2));
      complex0.add(complex1);
      complex0.atan();
      complex0.getField();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.302803981406403E-8);
      Complex complex1 = complex0.INF.add(5.302803981406403E-8);
      Complex complex2 = complex1.cosh();
      complex2.NaN.exp();
      complex2.NaN.multiply((-2647.75));
      complex0.NaN.getField();
      Complex complex3 = complex0.cos();
      complex0.getReal();
      Complex complex4 = Complex.valueOf((-2647.75), (-2647.75));
      Complex complex5 = complex0.add(complex2);
      complex3.ONE.negate();
      Complex complex6 = complex3.pow(complex4);
      complex1.readResolve();
      Complex complex7 = complex0.divide(5.302803981406403E-8);
      complex7.getImaginary();
      complex2.ONE.multiply(complex5);
      Complex complex8 = complex6.add(5.302803981406403E-8);
      complex8.INF.reciprocal();
      complex2.cosh();
      complex5.divide(757.71);
      Complex complex9 = complex4.pow(complex7);
      complex6.toString();
      complex9.ZERO.hashCode();
      complex9.I.toString();
      Complex complex10 = complex2.asin();
      Complex complex11 = Complex.valueOf(757.71, 0.0);
      Complex complex12 = complex11.negate();
      complex10.abs();
      complex7.add((-459.3857717575));
      complex4.sin();
      Complex.valueOf(1766.74480102);
      complex4.subtract(complex5);
      complex12.acos();
      Complex complex13 = Complex.valueOf((-459.3857717575));
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(1571.8209556859238);
      complex0.reciprocal();
      complex0.INF.tan();
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1167.0, (-1417.42476115352));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.NaN.pow(complex0);
      complex0.getReal();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.tan();
      complex4.negate();
      Complex complex5 = complex3.ZERO.add(0.0);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.ZERO.conjugate();
      complex3.log();
      Complex complex8 = complex1.acos();
      complex8.divide(complex7);
      complex6.reciprocal();
      complex5.INF.conjugate();
      complex5.createComplex(2.0, 0.0);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.cosh();
      complex2.add(complex0);
      complex0.subtract(complex1);
      double double0 = 0.0;
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex0.I.multiply(complex3);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex3.I.multiply(0.0);
      complex0.multiply(0.0);
      complex0.divide(complex4);
      Complex complex7 = complex0.negate();
      complex0.readResolve();
      Complex complex8 = complex0.log();
      complex8.NaN.getField();
      complex5.NaN.multiply(complex7);
      Complex complex9 = complex7.acos();
      complex9.acos();
      complex4.ZERO.add(complex7);
      complex7.ONE.subtract(Double.POSITIVE_INFINITY);
      int int0 = (-958);
      complex6.I.tan();
      try { 
        complex0.nthRoot((-958));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -958
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      complex0.I.reciprocal();
      complex0.tanh();
      complex0.I.cosh();
      Complex complex1 = complex0.add(1804.69817182784);
      complex1.getArgument();
      complex0.INF.abs();
      Complex complex2 = complex1.multiply(387);
      complex0.ZERO.atan();
      complex2.exp();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1299.47291147767);
      complex0.NaN.abs();
      complex0.toString();
      complex0.NaN.abs();
      complex0.getField();
      Complex complex1 = Complex.valueOf(7.441451374243517E152, 0.0);
      Complex complex2 = complex1.log();
      complex2.NaN.getField();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf(970.0692073908826, 0.2659635543823242);
      Complex complex5 = complex4.INF.sin();
      complex4.ZERO.getField();
      Complex complex6 = complex0.sin();
      complex6.I.getField();
      Complex complex7 = complex1.negate();
      complex7.ZERO.pow(970.0692073908826);
      complex7.acos();
      Complex complex8 = complex2.sqrt();
      complex8.INF.exp();
      complex6.ZERO.subtract(complex3);
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex9.negate();
      complex10.NaN.subtract(complex4);
      complex6.isNaN();
      complex6.INF.tan();
      Complex complex11 = complex6.multiply(1);
      complex11.cosh();
      complex11.cosh();
      complex6.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ONE.atan();
      complex2.NaN.negate();
      complex1.ONE.nthRoot(4124);
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.NaN.pow(complex4);
      Complex complex6 = complex0.conjugate();
      complex6.getArgument();
      complex0.divide((-916.42841879418));
      Complex complex7 = complex6.tan();
      Complex complex8 = Complex.NaN;
      complex5.hashCode();
      complex7.ZERO.multiply(complex8);
      complex6.abs();
      complex6.getImaginary();
      complex3.I.cosh();
      Complex complex9 = complex0.add(2120.5056554254234);
      Complex complex10 = complex9.NaN.tanh();
      complex5.sin();
      complex4.divide(complex1);
      complex5.getImaginary();
      Complex complex11 = Complex.valueOf(2120.5056554254234);
      complex11.NaN.getArgument();
      complex10.multiply(14.8811);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      complex1.NaN.readResolve();
      complex1.nthRoot(4507);
      Complex complex2 = complex0.divide((-2066.012517430385));
      complex1.NaN.reciprocal();
      complex0.getArgument();
      complex2.equals(complex0);
      Complex complex3 = Complex.valueOf(4742.0, 547.6);
      complex3.ONE.getArgument();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.exp();
      complex0.getReal();
      complex0.INF.divide(0.0);
      complex0.NaN.multiply(complex1);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.I.add(0.0);
      Complex complex4 = complex3.ZERO.add(0.0);
      complex3.ZERO.subtract((-243.36236));
      complex0.getField();
      complex0.sqrt();
      Complex.valueOf((-243.36236));
      complex1.cos();
      complex4.pow((-243.36236));
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex0.ZERO.pow(0.0);
      complex4.tanh();
      Complex complex5 = complex2.NaN.reciprocal();
      complex5.INF.getField();
      complex5.ONE.reciprocal();
      complex5.ONE.abs();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.ZERO.atan();
      complex2.ONE.toString();
      complex1.I.getArgument();
      complex0.equals((Object) null);
      complex0.nthRoot(1);
      Complex complex8 = complex1.negate();
      complex8.ZERO.add(complex3);
      complex6.INF.toString();
      Complex complex9 = complex3.negate();
      complex1.abs();
      Complex complex10 = complex9.add(complex3);
      complex10.equals((Object) null);
      complex8.hashCode();
      complex7.add(complex5);
      complex5.subtract(complex7);
      complex6.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.pow((-3426.092631429));
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = complex2.NaN.add(0.0);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.NaN.divide(complex1);
      complex5.readResolve();
      Complex complex6 = complex0.ZERO.multiply(complex1);
      complex6.INF.subtract(0.0);
      Complex complex7 = complex0.divide((-2779.847309));
      complex7.INF.cosh();
      complex3.INF.hashCode();
      Complex complex8 = complex1.divide(1766.74480102);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex2.ZERO.divide(0.0);
      complex10.ZERO.multiply(0.0);
      Complex complex11 = complex10.ONE.multiply((-1386));
      complex11.I.reciprocal();
      complex9.NaN.abs();
      complex0.sqrt1z();
      complex0.readResolve();
      complex0.getArgument();
      complex4.tan();
      complex7.toString();
      complex7.readResolve();
      complex1.asin();
      complex5.divide(Double.NaN);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3326.2), (-3326.2));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.NaN.add(0.0);
      complex1.getImaginary();
      Complex complex4 = complex1.atan();
      complex4.INF.sin();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex5.I.add(0.0);
      Complex complex7 = complex6.I.negate();
      complex5.ZERO.abs();
      Complex complex8 = complex0.subtract(0.0);
      Complex complex9 = complex8.conjugate();
      complex8.conjugate();
      complex9.NaN.negate();
      Complex complex10 = Complex.valueOf(0.39958852529525757, 1357.85124);
      complex10.NaN.subtract(complex4);
      Complex complex11 = complex5.INF.reciprocal();
      complex11.ZERO.subtract(complex7);
      try { 
        complex9.ONE.nthRoot((-95));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -95
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9985313415527344);
      complex0.ONE.cosh();
      Complex complex1 = complex0.atan();
      complex0.I.add(2588.599);
      complex0.NaN.add(0.9985313415527344);
      complex0.NaN.tan();
      complex0.hashCode();
      Complex complex2 = complex1.I.cos();
      complex2.ZERO.atan();
      Complex complex3 = complex0.sin();
      complex3.ZERO.sin();
      complex2.getReal();
      complex2.tan();
      complex2.subtract(0.9985313415527344);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      complex1.subtract(1132.3);
      complex1.I.multiply(complex0);
      Complex complex2 = complex0.ZERO.multiply((-1.0));
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.NaN.divide(complex1);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex3.subtract(990.51377);
      Complex complex7 = complex5.tanh();
      complex6.multiply(complex2);
      complex1.divide(complex7);
      Complex complex8 = complex5.createComplex((-2902.23772938), (-2902.23772938));
      complex6.getImaginary();
      Complex complex9 = complex8.pow((-2056.9703129214));
      complex9.ONE.add(complex2);
      complex8.pow(complex7);
      Complex complex10 = complex9.divide((-2485.1342101697));
      Complex complex11 = complex9.createComplex((-2303.4304582657), 0.0);
      complex5.tan();
      Complex complex12 = complex11.cosh();
      complex10.divide(Double.NaN);
      Complex.valueOf((-2707.52));
      complex7.subtract(complex4);
      complex8.acos();
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(16.7361);
      Complex complex1 = Complex.valueOf(16.7361);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.I.pow(complex0);
      complex3.NaN.getField();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.subtract(1672.10093);
      Complex complex6 = complex0.sinh();
      Complex complex7 = Complex.NaN;
      complex1.NaN.divide(complex7);
      Complex complex8 = complex5.exp();
      complex8.I.abs();
      complex5.I.conjugate();
      complex8.toString();
      Complex complex9 = complex5.pow(complex4);
      Complex complex10 = complex9.ONE.multiply(complex5);
      complex10.NaN.conjugate();
      complex7.hashCode();
      complex1.getField();
      complex7.sqrt1z();
      complex10.sqrt1z();
      complex2.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex0.I.sin();
      Complex complex2 = complex0.add(2721.51411301402);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex.valueOf((-1698.002), 2721.51411301402);
      Complex complex4 = complex3.NaN.subtract(4.135457669031131E282);
      complex3.NaN.tanh();
      complex1.getReal();
      Complex complex5 = complex1.sqrt1z();
      complex5.I.abs();
      Complex complex6 = complex1.conjugate();
      complex5.readResolve();
      complex6.INF.reciprocal();
      complex5.readResolve();
      Complex complex7 = complex1.pow(complex5);
      complex7.INF.multiply(350.675818);
      complex7.I.sin();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = Complex.valueOf(0.0, 2721.51411301402);
      Complex complex10 = Complex.valueOf(1.0, 2721.51411301402);
      complex10.ZERO.readResolve();
      complex2.ZERO.sin();
      Complex complex11 = complex4.asin();
      complex3.isNaN();
      complex11.pow(complex9);
      complex8.multiply((-1724));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.subtract((-427.3988019799303));
      complex1.INF.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex2.cosh();
      complex2.ZERO.sinh();
      complex1.getReal();
      Complex complex6 = complex0.ONE.conjugate();
      complex6.conjugate();
      complex4.readResolve();
      Complex complex7 = complex0.sqrt();
      complex7.pow(complex2);
      complex5.toString();
      complex3.cosh();
      Complex complex8 = Complex.valueOf(2264.2584507162, 1.0);
      complex8.ONE.subtract(complex3);
      Complex complex9 = new Complex(2.422974840736314E-181, (-3815.35));
      complex4.add(complex9);
      complex7.subtract((-1535.04));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.INF.subtract(243.410481);
      Complex complex4 = complex3.multiply(Double.NaN);
      Complex complex5 = complex4.NaN.pow(617.0900445716469);
      complex3.ONE.tan();
      Complex complex6 = complex2.I.pow(Double.NaN);
      Complex complex7 = complex0.ZERO.sqrt();
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex7.subtract(Double.NaN);
      complex9.ZERO.negate();
      complex0.nthRoot(3847);
      Complex complex10 = complex0.subtract(complex1);
      complex0.hashCode();
      Complex complex11 = complex10.multiply(3847);
      complex10.ZERO.negate();
      complex2.INF.subtract(0.0);
      complex11.isNaN();
      Complex complex12 = complex6.asin();
      complex4.nthRoot(3847);
      complex5.multiply(3847);
      Complex complex13 = complex0.acos();
      complex7.getArgument();
      complex8.hashCode();
      complex13.cosh();
      complex12.toString();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      complex0.ZERO.cosh();
      complex0.ONE.tan();
      complex0.INF.cos();
      int int0 = 0;
      Complex complex2 = complex0.ONE.sqrt();
      complex2.I.log();
      try { 
        complex1.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.cos();
      complex0.INF.divide((-514.547141316071));
      complex0.pow((-1199.0));
      Complex complex1 = complex0.negate();
      complex1.acos();
      complex1.ZERO.nthRoot(1);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf((-979.99));
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.add((-979.99));
      complex5.NaN.tan();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex4.log();
      Complex.valueOf((-979.99));
      complex7.isInfinite();
      complex6.negate();
      complex3.readResolve();
      complex5.add(Double.POSITIVE_INFINITY);
      complex2.conjugate();
      complex3.createComplex(2314.59293541999, 2886.2934270359);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(642);
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex2.ONE.add(530.533);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.I.atan();
      complex3.readResolve();
      Complex.valueOf(0.0, 275.055313714031);
      Complex.valueOf((-1524.815051));
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex1.createComplex(642, 530.533);
      Complex complex9 = complex2.atan();
      complex9.I.negate();
      complex9.nthRoot(642);
      complex4.cos();
      Complex.valueOf((double) 642, 1472.87);
      Complex complex10 = complex8.divide(complex3);
      complex10.I.toString();
      complex7.subtract((-4.191810118556531E-11));
      complex4.acos();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      complex0.I.subtract(complex1);
      Complex.valueOf(0.0);
      complex0.NaN.subtract((-6.972256643013266E-8));
      Complex complex2 = Complex.valueOf(0.0, 1296.46094682);
      complex0.NaN.abs();
      complex2.multiply(74);
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex3.NaN.multiply(0.0);
      complex4.NaN.getArgument();
      complex2.ZERO.tanh();
      complex0.reciprocal();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.sin();
      Complex complex7 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex7.I.getField();
      Complex complex8 = complex6.createComplex(1296.46094682, 0.0);
      complex8.ONE.tan();
      Complex complex9 = complex6.tan();
      complex0.add(complex2);
      complex1.ONE.readResolve();
      complex9.equals(complexField0);
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      complex7.isInfinite();
      Complex complex11 = complex10.divide(0.0);
      complex1.multiply(74);
      complex11.multiply((double) 74);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.multiply((-1321.4197652276));
      Complex complex1 = complex0.I.conjugate();
      complex0.reciprocal();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = complex0.tanh();
      complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(6.283185307179586);
      Complex complex3 = complex0.pow(complex2);
      complex0.pow(complex1);
      complex1.exp();
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.sqrt1z();
      complex2.INF.toString();
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex3.INF.divide(676.0);
      complex4.INF.getField();
      Complex complex5 = complex3.INF.createComplex(676.0, (-1829.45234325));
      Complex complex6 = complex5.sqrt();
      complex2.negate();
      Complex complex7 = complex1.subtract(2895.0);
      complex1.getImaginary();
      complex6.INF.add((-1829.45234325));
      Complex complex8 = complex7.sin();
      complex8.INF.hashCode();
      complex6.getImaginary();
      complex3.cos();
      complex5.divide((-737.159715759537));
      complex3.log();
      complex8.equals(complex5);
      complex1.sin();
      Complex complex9 = complex4.subtract((-25.242342714299415));
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      complex1.I.getField();
      int int0 = (-1895);
      try { 
        complex1.INF.nthRoot((-1895));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,895
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.exp();
      complex0.ONE.reciprocal();
      Complex complex5 = complex4.ZERO.multiply((-3385));
      Complex complex6 = Complex.valueOf(1093.8865230418);
      Complex complex7 = complex6.ONE.pow(complex0);
      complex0.getImaginary();
      complex7.abs();
      complex5.atan();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(694.1170885);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = Complex.valueOf(694.1170885);
      Complex complex4 = complex1.pow(complex0);
      complex0.subtract(complex1);
      complex2.NaN.getField();
      complex1.isInfinite();
      complex2.NaN.getArgument();
      complex3.pow(complex4);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex2.sqrt1z();
      complex7.pow((-1147.014));
      complex1.negate();
      complex1.I.divide(694.1170885);
      complex3.add(complex2);
      complex5.atan();
      complex6.getField();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt();
      complex1.NaN.divide(complex0);
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex3.NaN.subtract(complex0);
      complex4.NaN.cosh();
      complex4.ZERO.multiply((-68.56024914052));
      complex3.ZERO.hashCode();
      complex0.abs();
      Complex complex5 = complex2.pow(0.0);
      complex0.isInfinite();
      complex5.sqrt1z();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.asin();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex3.INF.add(0.0);
      Complex complex5 = complex3.NaN.subtract(complex0);
      Complex complex6 = complex5.conjugate();
      complex6.INF.nthRoot(1);
      complex0.I.sqrt();
      complex5.NaN.pow((-1669.794076973));
      Complex complex7 = complex1.multiply(1);
      complex7.I.add(complex0);
      complex7.ZERO.toString();
      complex4.tanh();
      complex4.add((-8.689474203552));
      complex5.getField();
      Complex complex8 = complex2.tan();
      complex1.getReal();
      complex0.multiply(complex8);
      complex2.sinh();
      complex1.createComplex((-8.689474203552), 213.18);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      complex1.NaN.abs();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.sin();
      complex3.log();
      complex2.ZERO.nthRoot(380);
      complex2.getField();
      complex0.I.cosh();
      Complex complex4 = complex0.reciprocal();
      complex2.NaN.subtract(0.0);
      complex4.ONE.toString();
      complex4.readResolve();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex5.multiply(380);
      complex6.ONE.asin();
      Complex complex7 = complex2.subtract(complex0);
      complex1.NaN.subtract(1058.37);
      Complex complex8 = complex7.ONE.multiply(complex1);
      Complex complex9 = complex8.ONE.negate();
      complex4.isInfinite();
      complex2.getReal();
      Complex complex10 = complex0.log();
      Complex complex11 = Complex.ONE;
      Object object0 = complex11.readResolve();
      complex9.equals(object0);
      complex4.tan();
      complex10.multiply(380);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      complex0.equals(object0);
      Complex.valueOf((-1156.2359365), (-1156.2359365));
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2430.101206894449));
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.I.getField();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.multiply(71.5593);
      complex0.abs();
      complex1.readResolve();
      Complex complex5 = Complex.valueOf(928.3674);
      Complex complex6 = complex5.cos();
      complex4.NaN.acos();
      complex4.INF.conjugate();
      complex5.getImaginary();
      complex5.nthRoot(597);
      Complex.valueOf(0.0);
      Complex complex7 = complex3.acos();
      complex7.I.divide(complex4);
      complex0.I.divide(1.0);
      Complex complex8 = complex6.multiply(complex5);
      complex8.abs();
      complex4.sqrt();
      Complex complex9 = complex1.exp();
      complex4.multiply(861);
      complex9.atan();
      Complex complex10 = complex2.acos();
      complex10.NaN.negate();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.8863249269709046E-8), (-1.8863249269709046E-8));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex0.acos();
      complex0.asin();
      complex2.pow((-1.8863249269709046E-8));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.302803981406403E-8);
      Complex complex1 = complex0.INF.add(5.302803981406403E-8);
      Complex complex2 = complex1.cosh();
      complex2.NaN.exp();
      complex2.NaN.multiply((-2647.75));
      complex0.NaN.getField();
      Complex complex3 = complex0.cos();
      complex0.getReal();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.add(complex2);
      complex3.ONE.negate();
      Complex complex6 = complex3.pow(complex4);
      complex1.readResolve();
      Complex complex7 = complex0.divide(5.302803981406403E-8);
      complex7.getImaginary();
      complex2.ONE.multiply(complex5);
      Complex complex8 = complex6.add(5.302803981406403E-8);
      complex8.INF.reciprocal();
      complex2.cosh();
      complex5.divide(757.71);
      Complex complex9 = complex4.pow(complex7);
      complex6.toString();
      complex9.ZERO.hashCode();
      complex9.I.toString();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex9.negate();
      complex11.negate();
      complex10.abs();
      complex7.add((-459.3857717575));
      complex4.sin();
      Complex complex12 = new Complex((-459.3857717575), 5.302803981406403E-8);
      complex7.equals(complex12);
      Complex.valueOf((-303.1523032504));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex1.ONE.cos();
      complex1.NaN.readResolve();
      Complex complex6 = complex3.cos();
      complex3.ZERO.getField();
      Complex complex7 = complex1.ONE.createComplex(20.0, (-3.6043491658026));
      complex4.sin();
      complex2.INF.cosh();
      Complex complex8 = complex2.add(20.0);
      Complex complex9 = complex0.divide(7.580392204597681E-144);
      complex0.atan();
      complex2.tan();
      complex9.reciprocal();
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex3.sin();
      Complex complex12 = complex0.multiply(complex8);
      complex12.add(4996.63992);
      complex11.getReal();
      complex7.abs();
      complex9.isInfinite();
      complex10.readResolve();
      complex6.hashCode();
      complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.pow((-2127.4967));
      complex0.getArgument();
      complex0.ZERO.negate();
      complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.187871486648885E-8);
      Complex complex1 = complex0.reciprocal();
      complex1.I.divide(6.283185307179586);
      Complex complex2 = complex0.multiply(2653.947413308);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.I.pow(8.187871486648885E-8);
      complex4.readResolve();
      complex4.readResolve();
      Complex complex5 = complex4.INF.createComplex(8.187871486648885E-8, 0.0);
      complex5.ZERO.getField();
      complex3.add(2.0);
      Complex complex6 = Complex.valueOf((-2.0599801342241997E-8), 2653.947413308);
      Complex complex7 = complex2.sinh();
      complex7.cosh();
      complex3.getReal();
      Complex complex8 = complex2.tan();
      complex8.tan();
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      complex6.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex1.asin();
      complex0.abs();
      complex1.hashCode();
      Complex complex5 = complex4.add(complex1);
      complex4.ZERO.hashCode();
      complex1.getArgument();
      Complex complex6 = complex3.I.exp();
      complex2.ONE.conjugate();
      Complex complex7 = complex4.pow(complex2);
      complex4.NaN.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0, (-1346.519168975797));
      complex7.NaN.tan();
      complex8.NaN.abs();
      complex3.isInfinite();
      complex5.getArgument();
      Complex complex9 = complex8.add(complex3);
      complex7.abs();
      Complex complex10 = complex6.divide(complex0);
      complex10.INF.add(complex1);
      Complex complex11 = complex9.multiply(complex2);
      Complex complex12 = complex11.INF.sin();
      complex12.I.tan();
      Complex complex13 = complex6.sqrt();
      complex13.getField();
      Complex complex14 = complex4.cosh();
      complex1.toString();
      complex14.pow((-1346.519168975797));
      try { 
        complex8.nthRoot((-4124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,124
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.INF.add(complex1);
      Complex complex4 = complex1.sin();
      complex0.getImaginary();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.ONE.sqrt();
      String string0 = complex5.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      complex4.equals(complex2);
      complex0.getImaginary();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex9.add(complex8);
      assertSame(complex10, complex8);
      
      complex4.isNaN();
      Complex complex11 = complex7.tan();
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      Complex complex12 = complex5.createComplex(0.0, 0.0);
      assertTrue(complex12.equals((Object)complex11));
      
      complex3.hashCode();
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex8));
      
      Complex complex13 = complex6.sin();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex5));
      assertEquals(0.8414709848078965, complex13.getReal(), 0.01);
  }
}
