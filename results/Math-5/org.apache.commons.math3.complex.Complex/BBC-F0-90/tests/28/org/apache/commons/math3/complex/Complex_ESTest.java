/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:10:27 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.asin();
      complex1.tan();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2656.559149654941, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      complex2.asin();
      Complex complex3 = complex2.tan();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.valueOf((-4.714949699905765E7));
      complex0.hashCode();
      complex0.tan();
      complex2.readResolve();
      Complex complex5 = complex4.acos();
      complex5.negate();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.sin();
      Complex complex9 = complex0.log();
      complex5.toString();
      complex9.divide(999.55);
      complex0.I.sin();
      Complex complex10 = Complex.valueOf((-223.62), 593.8);
      complex1.pow(complex10);
      complex7.abs();
      complex7.add(complex8);
      complex6.tanh();
      complex2.subtract(complex7);
      complex10.multiply(0);
      Complex.valueOf(999.55);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(2012.86, 647.37223);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.NaN.multiply(complex0);
      complex2.ZERO.toString();
      Complex complex5 = complex2.cosh();
      complex5.I.hashCode();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex0.tanh();
      Complex.valueOf((-1119.307627674), (-852.1384452397323));
      Complex complex9 = complex0.sqrt();
      complex9.I.getField();
      complex9.sqrt();
      complex7.conjugate();
      complex3.subtract(complex0);
      Complex complex10 = complex6.createComplex(0.999999999999999, (-1119.307627674));
      Complex complex11 = complex10.NaN.atan();
      complex3.subtract(complex4);
      complex8.subtract(complex6);
      complex4.multiply(complex11);
      complex9.pow(4510.7732052);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.asin();
      complex0.tan();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.714949799905765E7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.NaN.cosh();
      complex0.I.readResolve();
      Complex complex3 = Complex.valueOf((-20.0), 1606.4308216936845);
      Complex complex4 = complex0.subtract(complex3);
      complex4.readResolve();
      Complex complex5 = complex3.tan();
      complex2.ZERO.hashCode();
      complex5.INF.getArgument();
      Complex complex6 = complex5.I.sqrt();
      complex6.ONE.add(4.714949799905765E7);
      complex6.ZERO.getArgument();
      Complex complex7 = complex0.subtract(4.714949799905765E7);
      Complex complex8 = complex7.INF.multiply(complex2);
      complex8.ONE.atan();
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex4.acos();
      Complex complex11 = complex3.exp();
      complex4.ONE.toString();
      Complex complex12 = complex0.multiply(complex11);
      complex2.conjugate();
      Complex complex13 = complex4.multiply((-759));
      complex10.subtract(complex9);
      complex13.multiply(complex2);
      complex7.sqrt1z();
      Complex.valueOf(1606.4308216936845);
      complex12.exp();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex1.tan();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      
      complex0.NaN.divide((-9.374695893307895E158));
      Complex complex2 = complex0.add((-9.374695893307895E158));
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(1984.08161, (-1553.568));
      Complex complex1 = complex0.exp();
      complex1.toString();
      Complex complex2 = complex0.sqrt1z();
      complex0.sinh();
      complex2.NaN.sqrt1z();
      complex2.pow(complex0);
      complex0.add(1984.08161);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2886.0);
      Complex complex1 = Complex.valueOf(2886.0, 2.787906051540986E261);
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.INF.subtract(2.787906051540986E261);
      complex2.INF.negate();
      Complex complex3 = complex0.I.createComplex(2886.0, 20.0);
      complex0.I.readResolve();
      Complex complex4 = complex0.asin();
      complex4.sin();
      complex1.I.sinh();
      complex2.ONE.pow(complex0);
      complex3.cosh();
      Complex complex5 = complex0.multiply(2886.0);
      complex1.INF.hashCode();
      complex5.I.divide((-2.2230712282828652E15));
      Complex complex6 = complex0.sinh();
      complex3.log();
      complex1.sin();
      complex4.sqrt();
      Complex complex7 = complex3.multiply(complex6);
      complex2.acos();
      complex7.subtract(1889.34120995953);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1515;
      Complex complex0 = Complex.valueOf(5.82671618509778E-7);
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-4.7149456288306095E7), (-4.7149456288306095E7));
      Complex complex1 = Complex.valueOf((-12.00422185393251), (-12.00422185393251));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.multiply((-238));
      Complex complex4 = Complex.valueOf((-12.00422185393251));
      Complex complex5 = complex4.subtract(1.0);
      complex2.tan();
      complex3.equals(", ");
      try { 
        complex5.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add((-4.7149456288306095E7));
      Complex complex1 = new Complex(1675.914741413, (-4.7149456288306095E7));
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.tanh();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.7149456288306095E7), (-2.2230712282827422E15));
      Complex complex1 = Complex.valueOf(2.2230712282827422E15, (-4.7149456288306095E7));
      complex1.I.tanh();
      Complex complex2 = complex1.multiply((-4.7149456288306095E7));
      complex2.exp();
      complex1.add((-4.7149456288306095E7));
      complex0.readResolve();
      Complex complex3 = new Complex((-4.7149456288306095E7));
      complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.tanh();
      Complex complex1 = Complex.valueOf(0.0, 5897763.731723809);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.tanh();
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.ONE.subtract(Double.NaN);
      complex2.INF.getField();
      complex1.multiply(7);
      complex2.INF.multiply(5.731352393922862E-5);
      Complex complex3 = complex1.INF.exp();
      complex0.readResolve();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      complex4.INF.conjugate();
      complex0.I.subtract(Double.POSITIVE_INFINITY);
      complex4.NaN.getField();
      Complex complex5 = complex1.cos();
      complex1.I.abs();
      Complex complex6 = complex5.multiply(4197.0256546055);
      complex6.sqrt();
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex7.multiply(complex1);
      Complex complex9 = complex8.ONE.atan();
      complex9.NaN.add(Double.NaN);
      Complex complex10 = complex0.sqrt();
      complex10.ONE.cos();
      Complex complex11 = complex10.cosh();
      complex11.I.readResolve();
      complex3.conjugate();
      complex0.cosh();
      Complex.valueOf((-2219.5748), 5.731352393922862E-5);
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0013026430812009334, (-997.1565293921034));
      Complex complex1 = new Complex(2394.0722632, Double.NaN);
      complex1.add(1.708073418273571);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.conjugate();
      complex1.hashCode();
      Complex complex4 = complex2.asin();
      Complex complex5 = Complex.valueOf(32.847607, 1221.5859206);
      Complex complex6 = Complex.ONE;
      complex3.abs();
      Complex complex7 = Complex.NaN;
      complex4.reciprocal();
      Complex complex8 = new Complex(9.221072639606492E-10, 2394.0722632);
      Complex complex9 = complex5.multiply(1501);
      Complex complex10 = complex7.subtract(4329.0);
      complex9.tan();
      complex8.multiply(37);
      Complex complex11 = complex10.add((-2702.504));
      complex11.INF.log();
      complex9.getField();
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-659.198027217), (-1553.568));
      Complex complex1 = complex0.exp();
      complex1.toString();
      Complex complex2 = complex0.sqrt1z();
      complex2.INF.sinh();
      complex2.NaN.sqrt1z();
      complex2.pow(complex0);
      complex0.add((-659.198027217));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      Object object0 = new Object();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-931.0));
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = complex1.ONE.tan();
      complex2.I.negate();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = Complex.NaN;
      complex3.INF.divide(complex4);
      Complex complex5 = complex0.subtract(complex4);
      complex3.getImaginary();
      complex5.isNaN();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.NaN;
      complex6.divide(Double.POSITIVE_INFINITY);
      complex5.getField();
      complex3.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.negate();
      complex1.multiply(complex2);
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = Complex.INF;
      complex5.getImaginary();
      complex3.isNaN();
      Complex complex7 = Complex.INF;
      complex3.createComplex(2.0, (-2368.703));
      complex2.divide((-20.0));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(32.847607, 32.847607);
      Complex complex1 = new Complex(32.847607, 4329.0);
      Complex complex2 = complex1.add(4329.0);
      Complex complex3 = complex2.sqrt1z();
      complex0.conjugate();
      complex3.hashCode();
      Complex complex4 = complex3.asin();
      Complex.valueOf((-997.1565293921034), 4669.3997857938375);
      Complex complex5 = Complex.ONE;
      complex4.abs();
      Complex complex6 = new Complex((-973.5478666658));
      complex4.reciprocal();
      Complex complex7 = Complex.valueOf((-2702.504));
      Complex complex8 = complex7.multiply(1431655765);
      Complex complex9 = complex8.subtract((-2702.504));
      complex9.NaN.add((-997.1565293921034));
      Complex complex10 = Complex.ONE;
      complex9.asin();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex0.getField();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.NaN;
      complex1.multiply(complex3);
      Complex complex4 = Complex.NaN;
      complex4.subtract(complex3);
      complex2.getImaginary();
      complex4.isNaN();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.divide(complex0);
      complex2.atan();
      complex0.subtract((-20.0));
      complex4.divide((-20.0));
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-931.0));
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = complex1.ONE.tan();
      complex2.I.negate();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = Complex.NaN;
      complex3.INF.divide(complex4);
      complex3.getImaginary();
      complex2.isNaN();
      Complex complex5 = Complex.INF;
      complex3.readResolve();
      complex2.tan();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex6.multiply(0);
      Complex complex7 = complex4.add((double) 0);
      complex5.toString();
      complex7.sin();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-3105.156), (-3105.156));
      Complex complex2 = complex1.add((-3105.156));
      Complex complex3 = complex0.conjugate();
      complex2.hashCode();
      complex3.asin();
      Complex.valueOf(0.6027565002441406, (-973.5478666658));
      complex1.abs();
      Complex complex4 = complex3.reciprocal();
      complex4.subtract((-3105.156));
      complex2.readResolve();
      complex2.tan();
      Complex complex5 = Complex.I;
      complex5.pow((-3528.39173358));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(866760.0);
      Complex complex1 = new Complex(866760.0, 866760.0);
      Complex complex2 = complex1.ONE.add(2518.0);
      Complex complex3 = complex0.I.divide(complex1);
      complex3.getArgument();
      Complex complex4 = complex0.reciprocal();
      complex1.I.createComplex(18.714973875118517, Double.NaN);
      Complex complex5 = complex4.ZERO.createComplex(18.714973875118517, (-414.8296238663));
      complex1.divide(866760.0);
      Complex complex6 = complex4.sqrt();
      complex2.INF.sqrt();
      complex6.atan();
      complex6.INF.add(0.7853981633974483);
      Complex complex7 = complex6.ONE.subtract((-866760.0));
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex0.add(866760.0);
      complex9.INF.pow(73.5737901);
      complex5.abs();
      complex8.multiply(7.303420385174346E-8);
      complex2.subtract((-866760.0));
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.getReal();
      Complex complex2 = Complex.valueOf(2.0, Double.NaN);
      complex2.abs();
      Complex complex3 = complex1.reciprocal();
      complex3.multiply(1867);
      Complex complex4 = complex1.subtract(435.79408);
      complex3.readResolve();
      Complex complex5 = Complex.NaN;
      complex5.tan();
      Complex complex6 = new Complex(1991.99, 435.79408);
      complex6.add(199.2475899210633);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(32.847607, 32.847607);
      Complex complex1 = complex0.add((-973.5478666658));
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.ONE.conjugate();
      complex3.INF.hashCode();
      Complex complex4 = complex0.I.asin();
      Complex.valueOf((-2462.109), 0.0);
      complex4.nthRoot(4996);
      complex4.getField();
      complex3.acos();
      Complex complex5 = new Complex((-973.5478666658), 0.0);
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-931.0));
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = Complex.valueOf((-730.5867607), (-931.0));
      complex2.reciprocal();
      complex0.getReal();
      // Undeclared exception!
      complex2.nthRoot(2146173792);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.9887375831604004, 1.9887375831604004);
      complex0.getImaginary();
      complex0.isNaN();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(Double.NaN);
      complex4.reciprocal();
      complex1.multiply(1858);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.getReal();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      complex1.abs();
      Complex complex3 = complex2.reciprocal();
      complex0.multiply((-1632));
      complex3.subtract(Double.NaN);
      complex0.readResolve();
      complex1.tan();
      Complex complex4 = Complex.ZERO;
      complex4.add((-3361554.9536066223));
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf(1638.481, (-3992.51));
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = Complex.valueOf(20.0, (-2901.0));
      complex4.getField();
      complex2.sinh();
      complex5.tanh();
      complex1.hashCode();
      complex3.tanh();
      complex3.multiply(20.0);
      complex1.tan();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-931.0));
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = Complex.valueOf((-931.0));
      complex2.I.negate();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = Complex.NaN;
      complex3.INF.divide(complex4);
      Complex complex5 = complex0.subtract(complex4);
      complex5.INF.divide(1947.83237);
      complex3.getImaginary();
      complex3.NaN.asin();
      complex5.isNaN();
      Complex.valueOf((-1018.29239541), Double.POSITIVE_INFINITY);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(32.847607, 32.847607);
      Complex complex1 = complex0.add((-973.5478666658));
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.INF;
      complex1.multiply(complex5);
      Complex complex6 = Complex.INF;
      complex6.divide(complex3);
      Complex complex7 = complex1.subtract(complex4);
      complex5.getImaginary();
      complex0.isNaN();
      Complex complex8 = Complex.INF;
      complex7.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.INF;
      complex8.pow(complex9);
      complex9.divide((-515.705));
      complex1.reciprocal();
      Complex complex10 = new Complex((-1.9872713979884691E43), (-515.705));
      complex8.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(3190.897076459147);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.valueOf((-4.7149456288306095E7), (-940.7002596658));
      complex4.abs();
      Complex complex7 = complex6.reciprocal();
      complex3.multiply((-1));
      Complex complex8 = new Complex((-1));
      Complex complex9 = complex8.subtract(0.781618624905122);
      complex5.readResolve();
      complex7.tan();
      complex9.add(0.0);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-931.0));
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.subtract(complex4);
      complex3.getImaginary();
      complex5.isNaN();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.divide(complex3);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex8.ZERO.multiply(0.5540198087692261);
      Complex complex10 = complex7.subtract(1184.766043);
      complex10.divide((-414.8296238663));
      Complex complex11 = complex0.subtract(complex5);
      complex11.pow((-931.0));
      Complex complex12 = complex9.createComplex((-923.37623), 1184.766043);
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-2.2230712282828652E15));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.NaN.add((-1718.264));
      complex0.equals((Object) null);
      complex2.ZERO.getField();
      complex2.readResolve();
      Complex complex3 = complex1.NaN.pow(complex2);
      complex3.NaN.multiply(45.925039382853);
      Complex complex4 = complex0.atan();
      Complex.valueOf(1094.354822496014);
      Complex complex5 = complex0.I.divide((-1718.264));
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex1.NaN.multiply(complex0);
      Complex complex8 = new Complex((-1718.264));
      Complex complex9 = complex0.ONE.multiply(complex8);
      complex6.NaN.reciprocal();
      complex2.abs();
      complex4.INF.reciprocal();
      complex1.equals(complex2);
      complex2.equals(complex0);
      Complex complex10 = complex0.multiply(1451);
      complex4.subtract((-565.2690811));
      complex10.getField();
      complex5.multiply(complex9);
      complex7.divide(32.847607);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-931.0));
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = complex1.ONE.tan();
      complex2.I.negate();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = Complex.NaN;
      complex3.INF.divide(complex4);
      Complex complex5 = complex0.subtract(complex4);
      complex3.getImaginary();
      complex5.isNaN();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex0.createComplex(Double.NaN, (-997.1319166679));
      complex7.I.divide(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(32.847607, 32.847607);
      Complex complex1 = complex0.add((-973.5478666658));
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.ONE.conjugate();
      complex3.INF.hashCode();
      complex0.I.asin();
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex4.createComplex((-5868.99998), (-5868.99998));
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.negate();
      complex6.negate();
      Complex complex9 = Complex.ZERO;
      complex9.conjugate();
      complex5.divide(32.847607);
      complex2.negate();
      Complex complex10 = new Complex(3296.06);
      complex8.pow(0.8414709848078965);
      Complex.valueOf((-5868.99998));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-805.9092626027789), (-805.9092626027789));
      complex1.getField();
      complex1.sinh();
      Complex complex2 = complex1.tanh();
      complex2.hashCode();
      Complex complex3 = Complex.NaN;
      complex3.tanh();
      Complex complex4 = complex3.multiply((-621.1));
      Complex complex5 = complex1.tan();
      complex5.add((-639822.3184549784));
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.tanh();
      complex7.atan();
      complex4.multiply(1.9887375831604004);
      Complex complex8 = complex1.exp();
      Complex complex9 = complex7.log();
      complex7.add(complex8);
      Complex complex10 = complex2.exp();
      Complex complex11 = complex9.sin();
      complex1.readResolve();
      complex11.tan();
      Complex complex12 = Complex.NaN;
      complex9.cosh();
      complex3.acos();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.hashCode();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf(32.847607, (-4668.3997857938375));
      complex3.multiply((-478.386161923));
      Complex complex4 = complex1.tan();
      Complex complex5 = complex3.add((-1.0));
      complex2.tanh();
      Complex complex6 = complex5.atan();
      complex4.multiply(32.847607);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.exp();
      complex6.log();
      Complex complex9 = Complex.valueOf(4668.3997857938375);
      Complex complex10 = complex9.divide(0.6798759698867798);
      complex8.add(complex0);
      Complex complex11 = Complex.valueOf(940.7002596658, (-4668.3997857938375));
      complex11.exp();
      complex1.sin();
      Complex complex12 = new Complex(32.847607);
      complex12.readResolve();
      Complex complex13 = Complex.INF;
      complex13.tan();
      Complex complex14 = Complex.NaN;
      complex2.cosh();
      complex10.acos();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(32.847607, 32.847607);
      Complex complex1 = complex0.add((-973.5478666658));
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex3.exp();
      complex1.multiply(1.0);
      Complex complex7 = complex1.reciprocal();
      Complex.valueOf(3095.114080389518);
      complex6.abs();
      complex7.multiply(1448);
      Complex complex8 = complex5.subtract(2.718281828459045);
      complex7.subtract((-5448488.639999999));
      complex7.hashCode();
      Complex complex9 = complex7.divide(complex6);
      complex7.getField();
      Complex complex10 = Complex.valueOf((-2901.0));
      complex9.isNaN();
      Complex complex11 = Complex.ONE;
      complex11.equals("D+R3p");
      complex8.sin();
      complex10.subtract(complex4);
      complex1.toString();
      complex7.multiply(1472);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-1094.354822496014), (-1094.354822496014));
      Complex complex1 = complex0.negate();
      complex1.pow(250.8);
      Complex complex2 = Complex.valueOf(0.0);
      complex1.INF.add(complex2);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ONE.sinh();
      complex4.ONE.log();
      complex4.hashCode();
      Complex complex5 = Complex.ZERO;
      complex5.asin();
      Complex.valueOf(0.0, (-2668.3472));
      complex0.abs();
      Complex complex6 = Complex.valueOf(0.0, (-2065.288807811923));
      Complex complex7 = complex6.reciprocal();
      complex0.multiply(721);
      complex7.subtract(2.1735615730285645);
      complex1.readResolve();
      complex5.tan();
      Complex complex8 = new Complex((-2065.288807811923), Double.NaN);
      complex8.add((double) 721);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-2521.3741110425335));
      complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = new Complex((-2521.3741110425335), 3.141592653589793);
      Complex complex4 = complex2.NaN.divide(complex3);
      Complex complex5 = complex4.INF.sqrt1z();
      complex0.hashCode();
      complex0.toString();
      Complex complex6 = complex3.sqrt();
      complex6.createComplex((-2521.3741110425335), 3.141592653589793);
      Complex complex7 = complex5.pow(complex2);
      Complex complex8 = Complex.NaN;
      complex6.getField();
      Complex complex9 = Complex.NaN;
      complex0.equals(complex9);
      Complex.valueOf((-2521.3741110425335));
      complex1.add(complex7);
      Complex complex10 = new Complex(3.141592653589793, (-2521.3741110425335));
      Complex complex11 = complex10.atan();
      Complex complex12 = complex6.divide(complex10);
      complex0.multiply(complex3);
      Complex complex13 = new Complex(3.141592653589793);
      Complex complex14 = Complex.INF;
      complex12.hashCode();
      Complex complex15 = Complex.INF;
      Complex complex16 = complex15.sinh();
      Complex complex17 = Complex.I;
      complex17.tan();
      complex14.cos();
      complex10.toString();
      Complex.valueOf((-2521.3741110425335));
      complex2.subtract(complex11);
      complex16.conjugate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-1549.199963), (-2901.0));
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = Complex.valueOf(1.0, (-2901.0));
      complex1.getField();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.tanh();
      complex5.hashCode();
      Complex complex7 = complex4.tanh();
      complex6.multiply(1638.481);
      Complex complex8 = complex3.tan();
      Complex complex9 = complex4.add(1.9887375831604004);
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex11.multiply(1.0);
      complex3.atan();
      complex9.exp();
      Complex complex13 = complex8.log();
      complex10.divide((-0.8364288087425561));
      complex7.add(complex13);
      Complex complex14 = complex2.exp();
      complex0.sin();
      complex12.readResolve();
      complex0.tan();
      Complex complex15 = Complex.NaN;
      complex14.cosh();
      complex12.acos();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1094.354822496014), (-1094.354822496014));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.pow(250.8);
      Complex complex3 = Complex.valueOf(0.0);
      complex1.INF.add(complex3);
      Complex complex4 = complex0.ONE.sinh();
      complex4.ONE.log();
      Complex complex5 = complex1.INF.multiply(complex0);
      complex2.conjugate();
      Complex complex6 = complex0.ZERO.exp();
      complex6.INF.multiply(1.0);
      complex6.reciprocal();
      Complex.valueOf(3095.114080389518);
      complex1.abs();
      Complex complex7 = complex3.multiply(0);
      Complex complex8 = complex7.NaN.subtract(0.0);
      complex8.I.subtract((double) 0);
      complex3.hashCode();
      Complex complex9 = complex7.divide(complex0);
      complex1.getField();
      Complex complex10 = Complex.valueOf((-433.90937));
      complex0.isNaN();
      Complex complex11 = Complex.ONE;
      complex9.equals(complex11);
      complex2.sin();
      Complex complex12 = complex10.subtract(complex5);
      complex12.INF.toString();
      complex0.multiply(1459);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      complex0.INF.abs();
      Complex complex2 = complex1.NaN.multiply(1568.94169);
      complex2.cos();
      Complex complex3 = complex0.subtract(1568.94169);
      complex3.toString();
      Complex complex4 = complex3.multiply((-89));
      complex4.INF.createComplex(1.8544977697201776E-7, (-89));
      complex4.ONE.abs();
      complex4.NaN.conjugate();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.divide(complex2);
      complex7.toString();
      complex7.divide(complex8);
      Complex.valueOf(1568.94169);
      Complex complex9 = complex8.I.atan();
      Complex.valueOf(931.91, (-4299.97877386));
      Complex complex10 = complex7.add(complex2);
      complex10.asin();
      Complex complex11 = complex8.multiply((-89));
      complex5.asin();
      complex6.multiply((-89));
      complex8.pow(1568.94169);
      complex11.add(complex9);
      complex6.subtract(complex1);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.INF.multiply(0.0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.INF.exp();
      complex3.toString();
      Complex complex6 = complex4.add(complex3);
      complex6.NaN.getArgument();
      Complex complex7 = complex6.add(complex2);
      Complex complex8 = complex7.ONE.sin();
      complex8.I.conjugate();
      complex4.I.getField();
      complex4.equals((Object) null);
      complex7.INF.add(complex1);
      Complex complex9 = new Complex(Double.NaN);
      complex9.divide(complex6);
      Complex complex10 = complex3.atan();
      Complex complex11 = new Complex(1184.766043);
      complex11.subtract((-0.5403023058681398));
      complex1.divide(1184.766043);
      complex5.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.INF.multiply(0.0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.INF.exp();
      complex3.toString();
      Complex complex6 = complex4.add(complex3);
      complex6.NaN.getArgument();
      Complex complex7 = complex6.add(complex2);
      Complex complex8 = complex7.ONE.sin();
      complex8.I.conjugate();
      complex4.I.getField();
      complex4.equals((Object) null);
      Complex complex9 = complex7.INF.add(complex1);
      Complex complex10 = complex3.atan();
      complex10.ONE.divide(complex4);
      complex7.NaN.multiply(complex10);
      complex9.ONE.negate();
      complex4.hashCode();
      Complex complex11 = complex5.sinh();
      Complex complex12 = complex11.tan();
      complex12.cos();
      complex5.toString();
      Complex.valueOf(Double.NaN);
      complex4.subtract(complex9);
      Complex complex13 = new Complex(Double.NaN, Double.NaN);
      complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(32.847607, 32.847607);
      Complex complex1 = complex0.add((-973.5478666658));
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.I.asin();
      Complex.valueOf((-2462.109), 0.0);
      complex1.abs();
      Complex complex4 = complex0.reciprocal();
      complex2.getField();
      Complex.valueOf((double) 1867);
      complex2.isNaN();
      Complex complex5 = Complex.ONE;
      complex1.equals((Object) null);
      complex4.sin();
      complex5.subtract(complex1);
      complex2.toString();
      complex3.multiply((-1196));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(32.847607, 32.847607);
      Complex complex1 = complex0.add((-973.5478666658));
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.ONE.conjugate();
      complex3.INF.hashCode();
      complex0.I.asin();
      Complex.valueOf((-2462.109), 0.0);
      complex1.abs();
      Complex complex4 = complex0.reciprocal();
      complex4.NaN.multiply(1867);
      complex4.subtract((-973.5478666658));
      complex1.readResolve();
      complex1.tan();
      complex4.add(1094.354822496014);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.toString();
      complex0.getField();
      Complex complex1 = Complex.NaN;
      complex1.ONE.atan();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1549.199963), (-1549.199963));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.exp();
      complex2.toString();
      Complex complex6 = complex4.add(complex3);
      complex3.getArgument();
      Complex complex7 = new Complex(20.0, (-997.0046361));
      Complex complex8 = complex1.add(complex7);
      complex8.sin();
      Complex complex9 = complex0.conjugate();
      complex5.getField();
      complex8.equals((Object) null);
      Complex complex10 = Complex.valueOf(20.0);
      Complex complex11 = complex10.add(complex6);
      complex6.atan();
      Complex complex12 = complex4.divide(complex3);
      Complex complex13 = complex10.multiply(complex7);
      Complex complex14 = new Complex(1.5707963267948966);
      Complex complex15 = Complex.INF;
      complex11.hashCode();
      Complex complex16 = complex9.sinh();
      complex12.tan();
      complex0.cos();
      complex5.toString();
      Complex.valueOf((-997.0046361));
      complex16.subtract(complex12);
      complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-931.0));
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.sqrt1z();
      complex1.hashCode();
      complex2.toString();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.createComplex((-931.0), (-931.0));
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.pow(complex0);
      Complex complex8 = complex2.tan();
      complex7.abs();
      Complex complex9 = Complex.NaN;
      complex9.conjugate();
      Complex complex10 = Complex.INF;
      complex10.isInfinite();
      complex0.multiply(complex5);
      complex3.getArgument();
      Complex complex11 = Complex.I;
      complex11.subtract((-940.7002596658));
      complex11.sqrt();
      complex0.reciprocal();
      complex0.hashCode();
      Complex complex12 = Complex.I;
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = Complex.valueOf(2.0);
      complex14.add((-940.7002596658));
      complex6.hashCode();
      complex6.cosh();
      complex5.multiply((-3236.040459287));
      complex3.cos();
      complex7.add(complex8);
      complex13.atan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-2521.3741110425335));
      complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = new Complex((-2521.3741110425335), 3.141592653589793);
      Complex complex4 = complex2.NaN.divide(complex3);
      Complex complex5 = complex4.INF.sqrt1z();
      complex0.hashCode();
      complex0.toString();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.createComplex((-2521.3741110425335), 3.141592653589793);
      Complex complex8 = complex5.pow(complex2);
      Complex complex9 = Complex.NaN;
      complex7.createComplex(0.8414709848078965, (-5868.99998));
      complex6.add(complex5);
      Complex complex10 = Complex.valueOf((-2521.3741110425335));
      Complex complex11 = complex10.asin();
      complex11.negate();
      complex8.negate();
      Complex complex12 = complex2.conjugate();
      complex12.ONE.divide(2521.3741110425335);
      complex7.negate();
      complex6.divide(complex8);
      complex9.pow((-2521.3741110425335));
      Complex.valueOf((-2521.3741110425335));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ZERO.add(0.0);
      Complex complex4 = complex3.INF.divide(0.0);
      Complex complex5 = complex3.pow(complex2);
      Complex complex6 = complex1.tan();
      complex6.abs();
      Complex complex7 = Complex.ZERO;
      complex7.conjugate();
      Complex complex8 = Complex.ONE;
      complex8.isInfinite();
      Complex complex9 = complex6.multiply(complex2);
      complex5.getArgument();
      complex4.subtract((-2.394588390685223E199));
      Complex complex10 = complex7.sqrt();
      complex0.reciprocal();
      complex8.hashCode();
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.reciprocal();
      complex4.add(1026.7027976619056);
      complex4.hashCode();
      complex5.cosh();
      complex9.multiply(387.901);
      complex0.cos();
      complex7.add(complex10);
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-1094.354822496014), (-1094.354822496014));
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-20.0), (-1094.354822496014));
      complex0.getReal();
      complex2.ONE.hashCode();
      complex2.nthRoot(522);
      complex1.getField();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      complex0.NaN.divide(0.0);
      complex0.getReal();
      complex0.nthRoot(1515);
      complex0.getField();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf(0.0, (-2022.075854538));
      Complex complex4 = complex1.ONE.cos();
      complex3.abs();
      complex4.isInfinite();
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = Complex.NaN;
      complex6.getArgument();
      complex0.subtract((-414.8296238663));
      Complex complex7 = complex0.sqrt();
      complex7.reciprocal();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex1.add(0.5229914366077327);
      complex9.hashCode();
      complex10.cosh();
      complex10.multiply((-857.913));
      complex6.cos();
      complex5.add(complex0);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(32.847607, 32.847607);
      Complex complex1 = complex0.add((-973.5478666658));
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.ONE.conjugate();
      complex0.I.asin();
      Complex complex3 = Complex.valueOf((-2462.109), 0.0);
      complex1.abs();
      Complex complex4 = complex0.reciprocal();
      complex4.exp();
      complex4.NaN.multiply(1867);
      Complex complex5 = complex4.subtract((-973.5478666658));
      complex5.ONE.readResolve();
      complex4.tan();
      complex3.add(0.0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(32.847607, 32.847607);
      Complex complex1 = complex0.add((-973.5478666658));
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.ONE.conjugate();
      complex0.I.asin();
      Complex complex3 = Complex.valueOf((-2462.109), 0.0);
      complex1.abs();
      Complex complex4 = complex0.reciprocal();
      complex4.NaN.multiply(1867);
      Complex complex5 = complex4.subtract((-973.5478666658));
      complex5.ONE.readResolve();
      complex4.tan();
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.INF.multiply(0.0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.INF.exp();
      complex3.toString();
      Complex complex6 = complex4.add(complex3);
      complex6.NaN.getArgument();
      Complex complex7 = complex6.add(complex2);
      Complex complex8 = complex7.ONE.sin();
      complex8.I.conjugate();
      complex4.I.getField();
      complex4.equals((Object) null);
      Complex complex9 = complex7.INF.add(complex1);
      Complex complex10 = complex3.atan();
      complex10.ONE.divide(complex4);
      complex7.NaN.multiply(complex10);
      complex9.ONE.negate();
      complex4.hashCode();
      complex5.sinh();
      Complex complex11 = complex7.tan();
      Complex complex12 = complex11.cos();
      complex5.toString();
      Complex.valueOf(Double.NaN);
      complex4.subtract(complex9);
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.5));
      complex0.abs();
      Complex complex1 = Complex.valueOf((-0.5));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.I.pow(complex2);
      complex3.INF.readResolve();
      Complex complex4 = complex2.INF.tan();
      complex4.ONE.getArgument();
      Complex complex5 = complex0.subtract(1675.75007264393);
      Complex complex6 = complex5.INF.add(0.5);
      complex6.INF.getField();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex3.I.acos();
      Complex complex9 = complex7.I.tan();
      complex9.multiply(1320);
      complex2.isNaN();
      complex3.conjugate();
      complex1.sinh();
      complex7.multiply(2176.47);
      Complex complex10 = Complex.valueOf(2176.47);
      complex8.createComplex(0.0, 0.5);
      complex2.tanh();
      Complex complex11 = complex8.createComplex(0.0, 2176.47);
      complex10.getField();
      complex8.subtract(complex11);
      complex8.atan();
      complex10.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-931.0));
      Complex complex1 = Complex.INF;
      complex1.getField();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.subtract(complex4);
      complex3.getImaginary();
      complex5.isNaN();
      complex5.INF.subtract(0.0);
      Complex complex6 = complex2.divide(complex3);
      complex6.ONE.atan();
      Complex complex7 = complex6.subtract(1184.766043);
      complex7.divide((-414.8296238663));
      Complex complex8 = complex0.subtract(complex5);
      complex8.pow((-931.0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-678.2264355252), (-1749.9));
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.I.add((-1749.9));
      complex3.I.multiply(complex1);
      Complex complex4 = complex0.add(complex1);
      complex4.INF.tan();
      Complex complex5 = complex2.pow(complex4);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1643.0261804782963);
      complex0.INF.log();
      Complex complex1 = complex0.cosh();
      complex1.INF.conjugate();
      Complex.valueOf((-485.6634));
      complex0.ONE.abs();
      complex0.negate();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = Complex.valueOf(1.0);
      complex4.ONE.abs();
      Complex complex5 = complex3.ONE.acos();
      Complex complex6 = complex2.cosh();
      complex6.INF.conjugate();
      complex1.NaN.abs();
      complex1.I.nthRoot(1209);
      complex0.isInfinite();
      complex5.ZERO.add(0.0);
      complex1.isNaN();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.I;
      complex8.INF.add(complex9);
      Complex complex10 = complex8.NaN.subtract(0.0);
      complex7.subtract(complex8);
      complex6.sqrt1z();
      complex10.atan();
      Complex complex11 = complex1.pow(complex7);
      complex11.INF.sin();
      complex2.asin();
      complex6.getReal();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(2007.952, 2007.952);
      Complex complex1 = complex0.I.add((-1234.5057739004715));
      complex1.ONE.multiply(complex0);
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.ONE.add(110.03);
      complex4.ONE.pow(110.03);
      Complex complex5 = complex4.ZERO.atan();
      complex5.ZERO.tanh();
      complex0.createComplex((-2262.8), (-2262.8));
      complex3.cos();
      complex0.pow((-1234.5057739004715));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ZERO.add(0.0);
      complex3.INF.divide(0.0);
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.add(complex5);
      Complex complex7 = complex6.ONE.asin();
      complex7.ZERO.negate();
      complex7.INF.negate();
      Complex complex8 = complex4.ZERO.conjugate();
      Complex complex9 = complex8.NaN.negate();
      complex0.divide(complex1);
      complex9.pow(0.0);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.INF.subtract(376.0);
      complex0.ZERO.multiply(0);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(376.0, 376.0);
      complex3.I.multiply(376.0);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.log();
      complex4.sqrt1z();
      complex2.multiply(complex5);
      Complex.valueOf(4554.83548817756, 0.0);
      Complex complex6 = complex1.NaN.subtract(0.0);
      Complex complex7 = complex6.I.multiply(0.0);
      complex7.ZERO.sqrt1z();
      complex5.ONE.getField();
      complex5.cos();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-967.81676133));
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.NaN.subtract(Double.POSITIVE_INFINITY);
      complex1.ZERO.readResolve();
      complex1.INF.pow(complex0);
      complex0.NaN.toString();
      Complex complex2 = complex0.I.createComplex(2551.9178516397296, 2551.9178516397296);
      Complex complex3 = complex2.ZERO.atan();
      int int0 = 0;
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 0.0;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.tan();
      complex2.INF.conjugate();
      Complex complex4 = complex0.sin();
      complex4.ONE.multiply(complex3);
      complex0.abs();
      Complex.valueOf(0.0, 0.0);
      int int0 = 0;
      complex2.ONE.getField();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.add((-403.8775791));
      complex1.ZERO.multiply((-2474));
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex1.acos();
      Complex complex2 = Complex.valueOf(0.0, (-2022.075854538));
      Complex complex3 = complex1.ONE.cos();
      complex2.ONE.pow(complex1);
      complex0.I.conjugate();
      complex3.ONE.getArgument();
      complex0.toString();
      Complex complex4 = complex2.conjugate();
      complex4.cosh();
      complex2.acos();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-609.53636));
      complex0.NaN.abs();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf((-609.53636));
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex4.add(0.0);
      complex6.conjugate();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex8.tan();
      complex9.hashCode();
      complex7.negate();
      complex4.nthRoot(1336);
      Complex complex10 = complex2.atan();
      Complex complex11 = complex10.ZERO.multiply((-609.53636));
      complex11.add((-609.53636));
      complex11.getField();
      Complex complex12 = complex3.acos();
      complex12.NaN.tan();
      complex12.conjugate();
      complex4.nthRoot(1200);
      complex1.multiply(0.037378571927547455);
      complex5.sqrt();
      complex5.createComplex(3256.098, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
      Complex complex1 = complex0.add(3700.87183);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = Complex.I;
      complex3.sqrt();
      Complex complex4 = complex2.NaN.divide(complex3);
      complex4.INF.atan();
      int int0 = (-2509);
      try { 
        complex4.ZERO.nthRoot((-2509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,509
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-1094.354822496014), (-1094.354822496014));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.pow(250.8);
      Complex complex3 = Complex.valueOf(0.0);
      complex1.INF.add(complex3);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.ONE.sinh();
      complex5.ONE.log();
      Complex complex6 = complex4.INF.multiply(complex0);
      complex2.conjugate();
      Complex complex7 = complex0.ZERO.exp();
      complex7.INF.multiply(1.0);
      complex7.reciprocal();
      Complex.valueOf(3095.114080389518);
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.abs();
      Complex complex8 = complex3.multiply(0);
      Complex complex9 = complex8.NaN.subtract(0.0);
      complex9.I.subtract((double) 0);
      complex3.hashCode();
      Complex complex10 = complex8.divide(complex0);
      complex1.getField();
      Complex complex11 = Complex.valueOf((-433.90937));
      complex0.isNaN();
      Complex complex12 = Complex.ONE;
      complex10.equals(complex12);
      complex2.sin();
      Complex complex13 = complex11.subtract(complex6);
      complex13.INF.toString();
      complex4.multiply(1459);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-379.21966244));
      complex0.NaN.subtract((-379.21966244));
      try { 
        complex1.NaN.nthRoot((-5208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,208
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1549.199963), (-1549.199963));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex2.pow(0.0);
      Complex complex5 = complex1.ZERO.pow(0.0);
      Complex complex6 = complex5.I.negate();
      complex6.NaN.exp();
      complex5.nthRoot(1);
      Complex complex7 = complex4.INF.acos();
      complex7.ZERO.getArgument();
      Complex complex8 = complex3.I.subtract(0.0);
      complex8.ONE.cos();
      complex0.isInfinite();
      complex1.equals(complex0);
      Complex complex9 = complex1.cosh();
      complex0.ZERO.asin();
      Complex.valueOf((-7.34071933723896E-8), 6.283185307179586);
      Complex.valueOf(1781.0, (-7.839574072711142E-8));
      complex9.readResolve();
      complex2.sqrt();
      Complex complex10 = complex5.sin();
      complex10.atan();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      complex0.getReal();
      complex0.nthRoot(1515);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-2334.2));
      Complex complex1 = new Complex((-2334.2));
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex0.multiply(complex1);
      complex3.ONE.log();
      Complex complex4 = complex3.ONE.negate();
      complex4.createComplex(1013.0, 6.283185307179586);
      complex2.cosh();
      complex3.NaN.nthRoot(66);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.I.cos();
      complex5.NaN.pow(complex1);
      Complex complex7 = complex3.acos();
      complex5.getImaginary();
      complex5.multiply(complex2);
      Complex complex8 = Complex.valueOf(0.0);
      complex8.getImaginary();
      complex7.multiply(0.0);
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex9.ZERO.getField();
      complex1.sinh();
      Complex complex10 = complex5.divide(complex8);
      complex10.ONE.tanh();
      complex2.cosh();
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2195.33906944414));
      Complex complex1 = complex0.NaN.sqrt();
      complex0.ONE.multiply(7);
      Complex complex2 = complex1.ZERO.cos();
      complex2.INF.reciprocal();
      Complex complex3 = Complex.valueOf((-4060.1182));
      Complex complex4 = complex3.ZERO.tanh();
      complex0.abs();
      Complex complex5 = complex4.NaN.negate();
      complex3.INF.nthRoot(1291);
      complex1.INF.multiply(complex5);
      complex3.getArgument();
      complex1.readResolve();
      complex4.multiply((-2195.33906944414));
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(627.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.ONE.cos();
      complex4.ONE.add(complex2);
      complex3.asin();
      Complex complex5 = complex1.divide(complex3);
      Complex complex6 = complex1.negate();
      complex2.toString();
      Complex complex7 = complex0.INF.multiply(complex6);
      complex7.I.multiply(2230);
      Complex complex8 = complex5.createComplex(261.7714, 261.7714);
      complex8.INF.multiply(1);
      complex6.tan();
      Complex complex9 = complex3.add((-20.0));
      complex9.conjugate();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-2636.991926986), (-2636.991926986));
      Complex complex1 = new Complex(0.0, 0.48068851232528687);
      Complex complex2 = complex0.asin();
      complex2.NaN.sqrt1z();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = Complex.valueOf(2050.45, 2050.45);
      Complex complex5 = complex4.ONE.acos();
      complex5.ZERO.divide((-2636.991926986));
      Complex complex6 = complex5.pow(complex4);
      complex3.negate();
      complex2.ZERO.multiply((-2965));
      complex3.ZERO.multiply(1);
      Complex complex7 = complex1.createComplex(0.0, Double.NaN);
      complex7.ONE.negate();
      complex6.cos();
      complex2.createComplex(556.186990922, (-2636.991926986));
      complex4.isNaN();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tanh();
      complex1.I.atan();
      complex1.INF.getArgument();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.INF.divide(complex0);
      complex2.NaN.toString();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.INF.reciprocal();
      complex5.ONE.readResolve();
      Complex.valueOf(0.7853981633974483, 0.0);
      complex2.abs();
      complex4.NaN.hashCode();
      Complex complex6 = complex4.ZERO.add(complex1);
      complex6.NaN.cos();
      complex1.getField();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-710.0), 0.0);
      Complex complex1 = new Complex(544.6184144533216);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(3502.99057797, (-3629.358871996133));
      double double0 = 0.0;
      Complex complex1 = complex0.ONE.multiply(0.0);
      try { 
        complex1.NaN.nthRoot((-726));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -726
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-2521.3741110425335));
      complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = new Complex((-2521.3741110425335), 3.141592653589793);
      Complex complex4 = complex2.NaN.divide(complex3);
      Complex complex5 = complex4.INF.sqrt1z();
      complex0.hashCode();
      complex0.toString();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.createComplex((-2521.3741110425335), 3.141592653589793);
      complex7.ONE.pow(complex5);
      Complex complex8 = complex3.tan();
      complex8.NaN.abs();
      complex8.NaN.conjugate();
      complex3.isInfinite();
      Complex complex9 = complex8.multiply(complex2);
      complex4.getArgument();
      complex8.I.subtract(0.0);
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex9.reciprocal();
      complex0.I.hashCode();
      complex1.reciprocal();
      complex11.add((-2521.3741110425335));
      complex0.hashCode();
      Complex complex12 = complex2.cosh();
      complex12.multiply((-2521.3741110425335));
      complex6.cos();
      complex7.add(complex10);
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      Complex.valueOf(0.0, (-1636.5135560213));
      Complex complex4 = complex0.pow(2060.61199831337);
      complex4.asin();
      complex0.divide(0.0);
      Complex complex5 = complex4.add((-190.59506948));
      complex1.nthRoot(7);
      complex3.ZERO.readResolve();
      complex5.NaN.add(1.6567914485931396);
      Complex complex6 = complex2.NaN.add(1.6567914485931396);
      complex6.reciprocal();
      complex0.cosh();
      complex0.tanh();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.I.pow(complex3);
      complex3.log();
      complex0.sqrt1z();
      complex8.multiply(0);
      complex5.multiply(3533.9285834614298);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(0.0);
      complex0.abs();
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.subtract(742.760892);
      complex0.getImaginary();
      complex1.conjugate();
      Complex complex2 = Complex.valueOf((-2.260047972865202E-8));
      Complex complex3 = Complex.valueOf((-2.260047972865202E-8), (-2.260047972865202E-8));
      complex3.ONE.hashCode();
      Complex complex4 = complex3.cos();
      complex3.multiply(complex4);
      complex4.NaN.toString();
      complex3.INF.reciprocal();
      Complex complex5 = Complex.valueOf(2.0, (-877.1603667093));
      complex4.I.readResolve();
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.divide(complex0);
      complex7.ONE.getField();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.multiply(complex8);
      complex9.I.exp();
      complex2.ONE.getField();
      complex2.divide((-2.260047972865202E-8));
      Complex complex10 = complex9.cosh();
      Complex.valueOf((-1.4923330530645769E-9), 1.1178574689680927E-7);
      complex10.pow(complex5);
      Complex complex11 = complex7.sqrt();
      complex11.add(742.760892);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.reciprocal();
      complex0.I.multiply(0.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.reciprocal();
      complex3.sinh();
      Complex complex4 = complex2.ONE.createComplex(0.0, 0.0);
      complex4.I.getField();
      complex2.ZERO.readResolve();
      complex0.ZERO.hashCode();
      complex4.ONE.negate();
      complex0.ONE.reciprocal();
      Complex.valueOf(0.0);
      complex0.isNaN();
      Complex complex5 = complex0.multiply(0);
      complex4.tanh();
      complex5.acos();
      Complex.valueOf((double) 0, 0.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1754.681);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.ONE.add(0.0);
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex4.subtract(complex0);
      complex6.INF.subtract(complex1);
      complex2.I.add(complex5);
      Complex complex7 = complex0.NaN.tanh();
      complex7.NaN.cos();
      complex0.pow(1754.681);
      Complex complex8 = complex1.acos();
      Complex complex9 = complex8.ONE.multiply(98);
      Complex complex10 = complex9.I.atan();
      complex2.hashCode();
      complex0.toString();
      complex2.subtract(complex3);
      Complex complex11 = complex10.asin();
      Complex complex12 = complex11.multiply(1130);
      Complex.valueOf((double) 1130);
      complex0.getArgument();
      complex4.reciprocal();
      complex12.sqrt1z();
      Complex.valueOf(0.0, 1754.681);
      complex4.add(1754.681);
      complex5.nthRoot(1130);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      complex0.ONE.divide(complex1);
      Complex complex2 = complex1.ONE.createComplex(533.60010018, 533.60010018);
      complex2.ONE.tan();
      Complex complex3 = complex1.ONE.log();
      complex3.NaN.toString();
      Complex complex4 = complex0.multiply((-760.83045558));
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.multiply(4354);
      Complex complex7 = complex5.INF.cosh();
      complex0.exp();
      complex6.readResolve();
      complex4.INF.reciprocal();
      complex4.abs();
      complex4.nthRoot(1379);
      Complex complex8 = new Complex((-639.66));
      Complex.valueOf(2953.52369004749);
      complex8.ONE.subtract(complex6);
      complex2.add(complex8);
      complex6.add(complex1);
      complex0.multiply((double) 1379);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.NaN.reciprocal();
      Complex complex2 = Complex.valueOf((-2901.0), 1638.481);
      assertEquals(1638.481, complex2.getImaginary(), 0.01);
      assertEquals((-2901.0), complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = Complex.valueOf(1.9887375831604004, 1.9887375831604004);
      complex1.getField();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex4.I.tanh();
      assertEquals(1.557407724654902, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      complex5.hashCode();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.1752011936438014, complex5.getReal(), 0.01);
      
      Complex complex7 = complex4.tanh();
      assertEquals((-0.028501414932355473), complex7.getImaginary(), 0.01);
      
      complex4.NaN.multiply(0.6798759698867798);
      Complex complex8 = complex3.ZERO.tan();
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex3.add(1263.22125408904);
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex11.I.multiply(0.6798759698867798);
      Complex complex13 = complex10.atan();
      complex13.ONE.exp();
      complex13.log();
      Complex complex14 = complex10.ONE.divide(1.9887375831604004);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex13.add(complex10);
      Complex complex16 = complex15.exp();
      complex1.INF.sin();
      complex3.readResolve();
      Complex complex17 = complex16.tan();
      assertSame(complex17, complex9);
      
      double double0 = complex10.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex18 = complex13.pow(1263.22125408904);
      Complex complex19 = Complex.valueOf(0.0);
      Complex complex20 = complex12.exp();
      assertEquals(0.6286965767498631, complex20.getImaginary(), 0.01);
      assertEquals(0.7776507020398061, complex20.getReal(), 0.01);
      
      double double1 = complex19.abs();
      assertEquals(0.0, double1, 0.01);
      
      complex18.getArgument();
      assertFalse(complex10.equals((Object)complex8));
      assertSame(complex18, complex3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(6.283185307179586);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.NaN.negate();
      int int0 = 308;
      Complex complex4 = complex2.ONE.multiply(308);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.pow(2.0538716316223145);
      complex6.ZERO.reciprocal();
      Complex complex7 = Complex.ZERO;
      complex3.NaN.pow(complex7);
      complex0.getImaginary();
      complex1.getReal();
      complex0.abs();
      try { 
        complex7.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
