/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:01:15 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex0.I.getField();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(1.0, 2060.4142093022174);
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex3.atan();
      complex0.nthRoot(954);
      complex4.log();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.exp();
      Complex complex8 = Complex.NaN;
      complex1.tanh();
      complex7.pow((-1304.62));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1400.511954462816), 20.0);
      Complex complex2 = complex0.tanh();
      complex1.tan();
      complex2.multiply(1352);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex(0.28963327407836914, 0.28963327407836914);
      Complex complex3 = complex1.divide(complex2);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.620899738203635E200);
      Complex complex1 = complex0.INF.subtract((-1316.37346));
      Complex complex2 = complex0.divide(2063.95427);
      complex2.readResolve();
      Complex complex3 = complex2.sqrt1z();
      complex2.I.readResolve();
      complex3.ONE.abs();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex0.INF.conjugate();
      complex5.NaN.createComplex(1.2264415080735336E-11, 386.3);
      complex2.subtract(2875.0418);
      Complex complex6 = complex3.asin();
      Complex.valueOf((-680.874692381451), (-680.874692381451));
      Complex complex7 = complex3.ZERO.cos();
      complex7.ONE.cos();
      Complex complex8 = complex6.ZERO.subtract(complex1);
      Complex complex9 = complex6.pow(6.283185307179586);
      complex8.INF.subtract(complex4);
      complex9.INF.add(2875.0418);
      complex0.negate();
      Complex complex10 = complex4.cos();
      complex10.ZERO.add(complex7);
      Complex.valueOf(1.0);
      complex1.acos();
      complex8.negate();
      complex4.add(1009.27);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3563.4), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      complex1.tanh();
      complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.NaN);
      complex3.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex2.tanh();
      complex4.tanh();
      complex2.tan();
      complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-977.607970925597), (-977.607970925597));
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-977.607970925597));
      Complex complex3 = complex0.NaN.multiply(complex1);
      complex2.INF.createComplex((-977.607970925597), 2.591899541396432E-175);
      Complex complex4 = complex3.ONE.atan();
      complex4.INF.multiply(complex0);
      Complex.valueOf((-2995.229), (-977.607970925597));
      Complex complex5 = complex0.I.conjugate();
      Complex complex6 = complex0.negate();
      complex6.INF.abs();
      complex0.cosh();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex8.INF.negate();
      complex9.NaN.atan();
      complex3.cosh();
      Complex complex10 = complex5.atan();
      complex3.reciprocal();
      complex7.ONE.readResolve();
      complex7.abs();
      complex2.toString();
      Complex complex11 = Complex.valueOf((-4280.27796111), (-147.0));
      complex0.multiply(456646);
      complex8.multiply(complex11);
      complex7.ZERO.sqrt1z();
      complex7.toString();
      complex7.sinh();
      complex10.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3563.4), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      Complex complex2 = Complex.ZERO;
      Complex.valueOf((-3563.4));
      complex1.readResolve();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 2291.5464962721453);
      Complex complex4 = Complex.NaN;
      complex0.tanh();
      Complex complex5 = Complex.valueOf((-1159.89816358));
      complex5.tanh();
      Complex complex6 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3563.4), Double.POSITIVE_INFINITY);
      complex0.divide(complex1);
      Complex complex2 = Complex.ZERO;
      complex1.multiply(56.33163529503887);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3563.4), Double.POSITIVE_INFINITY);
      complex0.divide(complex1);
      Complex complex2 = Complex.ZERO;
      complex1.tanh();
      complex1.multiply((-1));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3563.4), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      complex1.tanh();
      Complex complex4 = new Complex((-3563.4), Double.POSITIVE_INFINITY);
      complex4.ZERO.createComplex(2.3472546699189522E-8, (-3563.4));
      complex0.divide(complex2);
      Complex complex5 = complex3.atan();
      complex2.log();
      complex5.asin();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.ONE.createComplex(4.620570188811826E-8, (-646.1456691306652));
      complex3.ONE.exp();
      complex1.ONE.getArgument();
      Complex complex4 = complex0.add(0.666865686962197);
      complex4.equals(complex0);
      complex0.subtract(complex1);
      complex2.divide(5.548951813863931E-8);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tan();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-116.366));
      Complex complex1 = Complex.ONE;
      complex1.NaN.negate();
      Complex complex2 = complex0.multiply(complex1);
      complex0.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.ZERO.tanh();
      complex5.NaN.conjugate();
      complex3.ZERO.reciprocal();
      Complex complex6 = complex3.NaN.cos();
      Complex complex7 = complex6.NaN.cos();
      complex0.sinh();
      complex4.toString();
      complex2.sqrt();
      complex6.cos();
      Complex complex8 = complex4.negate();
      complex0.acos();
      Complex complex9 = complex2.acos();
      complex9.NaN.getArgument();
      complex9.INF.conjugate();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex8.pow(complex1);
      Complex complex12 = complex7.multiply(complex10);
      complex11.sqrt();
      complex10.sqrt();
      try { 
        complex12.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
      complex1.equals("viSb_Z");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((double) 2047739684);
      complex0.asin();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3563.4), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.9888195459082551E-274);
      Complex complex5 = complex0.multiply(complex0);
      complex4.toString();
      complex1.asin();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.tan();
      Complex complex8 = Complex.ZERO;
      complex8.createComplex(587.7456362967, 587.7456362967);
      Complex complex9 = complex7.subtract((-3563.4));
      Complex complex10 = complex6.exp();
      complex5.tanh();
      complex10.acos();
      complex3.tanh();
      complex9.log();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.9991245709860955), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(730.3838632443656);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      complex0.tanh();
      Complex.valueOf(0.9991245709860955, 587.7456362967);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.multiply(complex4);
      complex4.toString();
      complex3.asin();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.tan();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.createComplex(2283.594146254317, (-2354.744563998));
      Complex complex10 = complex4.subtract(1.9888195459082551E-274);
      complex2.exp();
      complex10.tanh();
      complex9.acos();
      complex5.tanh();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6144464015960693, (-2350.866883095728));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1201.30231003357, 1201.30231003357);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.subtract(1201.30231003357);
      Complex complex4 = complex0.cosh();
      complex3.subtract(1201.30231003357);
      Complex complex5 = complex3.cosh();
      complex1.add(1201.30231003357);
      Complex complex6 = complex2.subtract(complex4);
      complex4.divide(complex5);
      complex4.divide(complex4);
      complex1.equals(complex6);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      complex1.INF.multiply(complex0);
      Object object0 = complex0.readResolve();
      ((Complex) object0).INF.negate();
      complex1.equals("significance level ({0})");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf((double) 2047739684, 1175.47389167);
      Complex complex3 = complex0.multiply(complex1);
      complex0.asin();
      Complex complex4 = complex0.subtract(2.0);
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.valueOf(1691.460284263653, (-1823.488));
      complex6.tanh();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex7.tanh();
      complex2.log();
      complex4.abs();
      complex7.add(complex8);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1245.8744065247465);
      Complex complex1 = Complex.valueOf(0.6144464015960693, (-2350.866883095728));
      complex0.divide(complex1);
      Complex complex2 = Complex.ZERO;
      complex1.tanh();
      Complex complex3 = Complex.valueOf(5834658.64537482, 587.7456362967);
      Complex complex4 = complex3.multiply(complex1);
      complex3.toString();
      Complex complex5 = complex3.asin();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex((-2350.866883095728), 3994.95967);
      complex7.tan();
      complex0.createComplex(Double.NaN, (-2918.28073995674));
      complex0.sqrt();
      Complex complex8 = Complex.I;
      Complex complex9 = complex4.divide(complex5);
      complex0.toString();
      complex7.reciprocal();
      complex2.subtract(complex9);
      complex7.conjugate();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1479.33457), (-228.796999894));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(20.0, (-20.0));
      Complex complex4 = complex3.multiply(complex0);
      complex4.asin();
      complex2.subtract(Double.NaN);
      complex3.exp();
      Complex complex5 = Complex.ONE;
      complex5.tanh();
      complex2.acos();
      complex3.tanh();
      Complex complex6 = Complex.valueOf((-1582.460683), 0.04183409675493129);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1201.30231003357, 1201.30231003357);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.pow(0.9999999999999943);
      complex2.exp();
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.valueOf(1.9369852542877197, (-2184.8));
      complex3.conjugate();
      complex0.conjugate();
      complex4.tan();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1245.8744065247465);
      Complex complex1 = Complex.valueOf(0.6144464015960693, (-2350.866883095728));
      complex0.divide(complex1);
      Complex complex2 = Complex.ZERO;
      complex1.tanh();
      Complex complex3 = Complex.valueOf(5834658.64537482, 587.7456362967);
      Complex complex4 = complex3.multiply(complex1);
      complex3.toString();
      Complex complex5 = complex3.asin();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.tan();
      Complex complex8 = complex0.createComplex(2259.1980297734603, 1245.8744065247465);
      complex8.ZERO.hashCode();
      complex7.sqrt();
      Complex complex9 = Complex.I;
      complex3.divide(complex9);
      complex4.toString();
      complex4.reciprocal();
      complex9.subtract(complex5);
      complex0.conjugate();
      complex5.tan();
      complex2.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2234.34667398297, (-20.0));
      Complex complex1 = Complex.valueOf(0.9744367588483439, 2859.1947);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.tanh();
      complex4.multiply(complex3);
      complex1.toString();
      Complex complex5 = complex4.asin();
      complex0.tan();
      complex1.createComplex((-3.825558165008403E-137), (-3.825558165008403E-137));
      complex4.multiply(1948);
      Complex complex6 = Complex.valueOf(742.1598, 1.0267179012298584);
      complex6.negate();
      Complex complex7 = new Complex(742.1598);
      Complex.valueOf(0.268675390361964, 1.0267179012298584);
      complex5.conjugate();
      complex2.conjugate();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(2283.594146254317);
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.pow(1607.626081644081);
      Complex complex2 = Complex.valueOf(2283.594146254317, (-2.774475773922311E-8));
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.tanh();
      complex0.acos();
      complex1.tanh();
      Complex complex5 = new Complex(1879.3840202, Double.NaN);
      Complex complex6 = Complex.I;
      complex4.isInfinite();
      complex6.cosh();
      complex4.multiply(2168);
      complex4.negate();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1201.30231003357, 1201.30231003357);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.subtract(1201.30231003357);
      Complex complex4 = complex0.cosh();
      complex1.add(1201.30231003357);
      Complex complex5 = complex2.subtract(complex4);
      complex4.readResolve();
      complex0.abs();
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex2.divide(complex4);
      complex7.I.pow(complex0);
      complex3.equals(complex1);
      complex1.subtract(1698.8980193596033);
      complex6.exp();
      Complex complex8 = complex5.tanh();
      complex8.acos();
      complex5.tanh();
      Complex complex9 = new Complex(4.359575267083187, 4.359575267083187);
      Complex complex10 = Complex.I;
      complex5.isInfinite();
      complex5.cosh();
      Complex complex11 = Complex.ONE;
      complex11.multiply(2048909197);
      complex3.negate();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(1245.8744065247465);
      Complex complex1 = Complex.valueOf(0.6144464015960693, (-2350.866883095728));
      complex0.multiply(1245.8744065247465);
      Complex complex2 = complex1.log();
      complex2.pow(complex0);
      Complex complex3 = complex2.cosh();
      complex0.createComplex(1245.8744065247465, 0.5220900774002075);
      complex3.toString();
      complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.179804227294805));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-1.179804227294805), (-1.179804227294805));
      complex0.ONE.divide(complex1);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.multiply(complex2);
      complex4.ONE.toString();
      Complex complex5 = complex4.asin();
      complex3.tan();
      complex5.ONE.createComplex((-1.179804227294805), 742.1598);
      complex5.multiply(3.141592653589793);
      complex3.sqrt();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1245.8744065247465);
      Complex complex1 = Complex.valueOf(0.6144464015960693, (-2350.866883095728));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      complex1.tanh();
      complex1.log();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.cosh();
      complex3.createComplex((-1304.1061999546), (-5.5957016861703E-8));
      Complex complex6 = Complex.valueOf(1.71390848833098E-15);
      complex0.ONE.add(0.6144464015960693);
      complex6.toString();
      try { 
        complex5.nthRoot((-1620902116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,620,902,116
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      complex0.hashCode();
      complex1.getArgument();
      Complex complex2 = new Complex(Double.NaN, 0.10467669367790222);
      Complex complex3 = Complex.I;
      complex2.isInfinite();
      Complex complex4 = Complex.valueOf(0.10467669367790222, 6.283185307179586);
      Complex complex5 = complex4.cosh();
      complex5.multiply((-2017));
      complex0.negate();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex1.NaN.toString();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.I.exp();
      complex0.INF.abs();
      Complex complex4 = complex3.I.divide(1023.75664107619);
      complex0.getArgument();
      complex3.I.negate();
      complex0.pow((-582.948435438308));
      Complex complex5 = complex4.exp();
      complex2.pow(1048.0);
      complex5.divide(complex2);
      Complex.valueOf(501.69418308756724, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.I.multiply(1.8755581378936768);
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex0.I.cosh();
      Complex complex6 = complex5.subtract(2090.0);
      complex3.exp();
      complex4.tanh();
      complex6.acos();
      complex1.log();
      complex6.isInfinite();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(1245.8744065247465);
      Complex complex1 = Complex.valueOf(0.6144464015960693, (-2350.866883095728));
      complex1.multiply((-2350.866883095728));
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.I;
      complex2.cosh();
      Complex complex4 = new Complex(0.6144464015960693);
      complex3.toString();
      complex1.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      complex0.abs();
      complex0.hashCode();
      complex1.getArgument();
      Complex.valueOf((-942.520144013329));
      Complex complex2 = complex0.log();
      complex2.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1201.30231003357, 1201.30231003357);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.subtract(1201.30231003357);
      Complex complex4 = complex0.cosh();
      complex1.add(1201.30231003357);
      Complex complex5 = new Complex(4.359575267083187);
      Complex complex6 = complex5.subtract(complex4);
      complex5.readResolve();
      complex0.abs();
      Complex complex7 = complex3.divide(complex2);
      complex2.divide(complex4);
      complex5.equals(complex1);
      Complex complex8 = complex1.subtract(1698.8980193596033);
      complex7.exp();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex9.acos();
      complex6.tanh();
      Complex complex11 = new Complex(4.359575267083187, 4.359575267083187);
      Complex complex12 = Complex.I;
      complex12.isInfinite();
      complex4.cosh();
      complex1.multiply((-2017));
      complex10.negate();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1245.8744065247465);
      Complex complex1 = Complex.valueOf(0.6144464015960693, (-2350.866883095728));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      complex3.tanh();
      Complex complex4 = Complex.valueOf(0.6144464015960693, 5834658.64537482);
      Complex complex5 = complex1.multiply(complex4);
      complex0.toString();
      complex5.asin();
      complex2.tan();
      Complex complex6 = new Complex(0.6144464015960693, 340.76191213264);
      complex2.equals(complex6);
      complex1.subtract((-694.5));
      Complex complex7 = complex4.exp();
      complex1.tanh();
      complex7.acos();
      Complex complex8 = complex2.tanh();
      complex8.log();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1201.30231003357, 1201.30231003357);
      Complex complex1 = complex0.log();
      complex1.pow(0.9999999999999943);
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf(1.9369852542877197, (-2184.8));
      complex2.conjugate();
      complex0.conjugate();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      complex0.hashCode();
      complex1.getArgument();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex1.tan();
      Complex.valueOf(Double.NaN, 935.9908083766346);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex0.hashCode();
      complex1.getArgument();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.nthRoot(228);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(1201.30231003357, 1201.30231003357);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(1.9073486328125E-6);
      complex3.abs();
      complex0.divide((-342.06));
      complex2.subtract((-1.5574076175689697));
      complex1.atan();
      Complex complex4 = Complex.ONE;
      complex4.log();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1245.8744065247465);
      Complex complex1 = Complex.valueOf(0.6144464015960693, (-2367.870457968944));
      complex0.divide(complex1);
      Complex complex2 = Complex.ZERO;
      complex2.tanh();
      Complex complex3 = Complex.valueOf(0.6144464015960693, 5834658.64537482);
      Complex complex4 = complex1.multiply(complex3);
      complex0.toString();
      complex4.asin();
      complex3.divide(complex2);
      complex4.toString();
      complex0.reciprocal();
      Complex complex5 = Complex.ZERO;
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.ONE.sinh();
      complex4.ONE.tan();
      complex2.ONE.pow(complex0);
      // Undeclared exception!
      complex0.nthRoot(6993);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex1.multiply(complex0);
      Complex complex2 = complex0.I.pow(complex1);
      complex0.I.reciprocal();
      Complex complex3 = complex2.ONE.cosh();
      complex0.NaN.getArgument();
      complex3.ZERO.multiply(Double.NaN);
      Complex complex4 = complex0.ONE.sqrt();
      Complex complex5 = complex4.I.sinh();
      complex5.ONE.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.getField();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex0.reciprocal();
      complex2.sinh();
      Complex complex8 = complex2.pow(complex6);
      Complex complex9 = complex6.subtract(Double.NaN);
      Complex complex10 = complex1.multiply(complex3);
      Complex complex11 = complex10.NaN.tanh();
      complex11.INF.subtract(Double.NaN);
      complex9.ZERO.asin();
      complex5.conjugate();
      Complex complex12 = complex6.tanh();
      complex12.ONE.tan();
      complex12.ZERO.sinh();
      complex8.reciprocal();
      complex9.subtract(Double.NaN);
      complex1.multiply(1352);
      complex1.cosh();
      complex2.atan();
      complex7.multiply(1348);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex1.toString();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.exp();
      complex2.abs();
      Complex complex4 = complex2.divide((-1.179804227294805));
      complex3.getArgument();
      complex4.negate();
      Complex complex5 = complex0.pow((-1.179804227294805));
      complex5.I.reciprocal();
      Complex complex6 = new Complex((-582.948435438308), -0.0);
      complex6.exp();
      Complex complex7 = complex4.pow(Double.POSITIVE_INFINITY);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.179804227294805));
      complex0.getArgument();
      complex0.toString();
      Complex complex1 = complex0.asin();
      complex0.abs();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.subtract(1.0);
      complex3.pow(complex5);
      complex4.cosh();
      complex0.add(1.0);
      Complex complex6 = complex5.subtract(complex2);
      complex0.readResolve();
      complex6.abs();
      Complex complex7 = complex0.divide(complex4);
      Complex complex8 = complex7.sinh();
      complex1.abs();
      complex1.isNaN();
      Complex complex9 = complex6.divide(complex0);
      Complex complex10 = Complex.ZERO;
      Object object0 = complex10.readResolve();
      complex3.equals(object0);
      complex3.subtract(2090.0);
      complex8.exp();
      complex2.tanh();
      complex8.acos();
      Complex complex11 = new Complex(612.74663, 0.9999999999999943);
      complex11.tanh();
      complex9.abs();
      Complex complex12 = new Complex(0.0);
      complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.subtract(637.16756900126);
      Complex complex3 = complex2.ONE.subtract(637.16756900126);
      Complex complex4 = complex2.NaN.atan();
      complex4.ZERO.log();
      complex3.isNaN();
      complex2.tanh();
      Complex complex5 = new Complex((-1694.47018), (-1694.47018));
      complex5.getField();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.multiply(0.0);
      Complex complex1 = complex0.subtract(637.16756900126);
      Complex complex2 = complex1.ONE.subtract(637.16756900126);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.ZERO.log();
      complex2.getField();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      complex1.I.getField();
      Complex complex2 = complex0.ZERO.multiply((-2077));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.add(1.8412576154421806E-7);
      complex1.multiply(complex4);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.negate();
      complex0.pow((-2941.506482803777));
      Complex complex7 = complex4.pow(1.8412576154421806E-7);
      complex4.NaN.add((-2941.506482803777));
      Complex complex8 = complex3.multiply(927);
      complex8.ONE.cosh();
      Complex complex9 = complex0.sinh();
      complex9.INF.atan();
      complex7.sinh();
      Complex complex10 = complex2.subtract(2.0810746491406462E-4);
      complex10.asin();
      complex2.sqrt();
      complex6.pow((-2941.506482803777));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2886254.4801839828, (-231.9389352721));
      complex0.abs();
      Complex complex1 = complex0.atan();
      complex1.ONE.asin();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.I.hashCode();
      complex3.NaN.asin();
      complex2.ONE.readResolve();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = Complex.valueOf(5.027339492125848, (-231.9389352721));
      complex6.I.abs();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex4.negate();
      complex8.I.add(1201.30231003357);
      Complex complex9 = complex4.subtract(complex5);
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex2.add(complex0);
      complex7.atan();
      Complex complex12 = complex2.multiply(5.027339492125848);
      complex7.nthRoot(7);
      complex10.sin();
      complex12.equals(complexField0);
      complex8.exp();
      complex11.createComplex(0.6144464015960693, (-2413.91854));
      Complex complex13 = complex1.divide(1248.47);
      complex13.subtract(complex7);
      complex0.abs();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.892713087722722E-8));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-6.892713087722722E-8), (-6.892713087722722E-8));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.multiply(complex4);
      complex6.ONE.toString();
      Complex complex7 = complex6.asin();
      complex5.tan();
      complex7.ONE.createComplex((-6.892713087722722E-8), 742.1598);
      Complex complex8 = complex5.divide(3.141592653589793);
      complex3.getArgument();
      complex3.negate();
      Complex complex9 = complex7.pow((-1.0));
      complex8.exp();
      complex9.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1245.882686694982);
      Complex complex1 = Complex.valueOf(1245.882686694982, 1245.882686694982);
      Complex complex2 = complex0.sqrt();
      complex1.hashCode();
      complex2.getArgument();
      complex1.readResolve();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(54.68308972245, 0.0);
      complex0.ZERO.log();
      Complex complex1 = complex0.pow(54.68308972245);
      complex1.hashCode();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.multiply((-2420));
      complex0.nthRoot(1);
      Complex complex7 = complex6.sinh();
      complex1.sinh();
      complex7.sinh();
      complex7.readResolve();
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.sin();
      complex0.subtract(complex7);
      complex5.hashCode();
      complex9.reciprocal();
      complex8.reciprocal();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.892713087722722E-8));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-6.892713087722722E-8), (-6.892713087722722E-8));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.multiply(complex4);
      complex6.ONE.toString();
      Complex complex7 = complex6.asin();
      complex5.tan();
      Complex complex8 = complex7.ONE.createComplex((-6.892713087722722E-8), 742.1598);
      complex8.getReal();
      complex0.cos();
      complex0.log();
      Complex complex9 = complex3.cos();
      complex9.tanh();
      complex2.log();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = Complex.valueOf(6.569676185250389E-264, 6.283185307179586);
      Complex complex3 = complex0.log();
      complex3.divide(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.multiply(complex1);
      complex6.toString();
      complex6.asin();
      Complex complex8 = complex4.tan();
      complex0.createComplex((-16.402292725167683), (-16.402292725167683));
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.multiply(2416);
      Complex complex11 = complex2.negate();
      Complex complex12 = complex10.pow(6.569676185250389E-264);
      Complex complex13 = complex12.acos();
      complex11.hashCode();
      Complex complex14 = complex5.multiply(2024081307);
      complex6.tan();
      complex14.getField();
      complex7.isNaN();
      complex13.tanh();
      Complex complex15 = new Complex((-1875.7102614854));
      complex15.getField();
      complex15.exp();
      complex8.sqrt();
      complex3.multiply(2416);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.atan();
      complex0.acos();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-2.774475773922311E-8), (-2.774475773922311E-8));
      Complex complex3 = complex0.sqrt();
      complex3.divide(complex1);
      Complex complex4 = Complex.I;
      complex4.toString();
      complex2.reciprocal();
      Complex complex5 = complex2.subtract(complex0);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      complex0.hashCode();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(Double.NaN);
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sin();
      complex0.hashCode();
      Complex complex2 = complex0.add(0.0);
      complex0.hashCode();
      Complex complex3 = complex1.add(complex0);
      complex0.multiply((-928426670));
      complex1.nthRoot(1);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex2.sinh();
      Complex complex6 = Complex.NaN;
      complex6.readResolve();
      complex2.equals(complex1);
      complex1.sin();
      complex4.subtract(complex5);
      complex1.hashCode();
      Complex complex7 = Complex.INF;
      complex7.reciprocal();
      complex2.reciprocal();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.INF.hashCode();
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.getArgument();
      complex0.I.hashCode();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.negate();
      complex1.tanh();
      Complex complex5 = complex3.pow(Double.NaN);
      Complex complex6 = complex5.acos();
      complex1.hashCode();
      Complex complex7 = Complex.NaN;
      complex7.multiply((-2457));
      complex4.tan();
      complex4.getField();
      complex7.isNaN();
      complex5.tanh();
      complex2.getField();
      complex6.exp();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.892713087722722E-8));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-6.892713087722722E-8), (-6.892713087722722E-8));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.multiply(complex4);
      complex5.ONE.toString();
      Complex complex6 = complex5.asin();
      complex3.tan();
      complex6.ONE.createComplex((-6.892713087722722E-8), 742.1598);
      Complex complex7 = complex5.multiply(1948);
      complex7.I.negate();
      complex2.INF.pow(0.0);
      Complex complex8 = complex5.acos();
      complex8.ZERO.hashCode();
      Complex complex9 = complex3.multiply((-2457));
      Complex complex10 = complex2.tan();
      complex3.getField();
      complex4.isNaN();
      complex0.tanh();
      complex10.getField();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.2058066427707672, (-1706.91988));
      complex0.NaN.abs();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.multiply((-1706.91988));
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex1.subtract(0.0);
      Complex complex6 = complex1.ZERO.reciprocal();
      Complex complex7 = complex5.pow(1893.62803408835);
      complex7.NaN.tan();
      complex1.sqrt();
      complex7.readResolve();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex4.asin();
      Complex complex10 = complex8.divide(complex5);
      complex10.divide(0.0);
      complex7.acos();
      complex4.isNaN();
      complex6.equals((Object) null);
      Complex.valueOf((-510.935495231033), (-1706.91988));
      Complex complex11 = complex10.pow(complex2);
      complex8.multiply(2485.9394185872657);
      Complex complex12 = complex11.divide((-945.61537626));
      complex4.cos();
      complex2.pow(2485.9394185872657);
      complex9.sqrt();
      complex12.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.I.add((-4392.7822));
      Complex complex2 = complex1.INF.sin();
      complex2.INF.add(complex0);
      complex0.ONE.toString();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.INF.sqrt1z();
      complex4.INF.multiply((-3182));
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = complex0.subtract(complex3);
      complex6.NaN.toString();
      complex0.reciprocal();
      complex6.isNaN();
      complex4.getImaginary();
      Complex complex7 = complex5.asin();
      complex7.exp();
      Complex complex8 = complex5.add(complex2);
      Complex complex9 = complex8.ONE.add(0.0);
      complex9.NaN.sqrt1z();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(637.16756900126);
      complex1.NaN.atan();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.ONE.divide(953.687661);
      Complex complex3 = complex2.INF.add(5062.900248458914);
      Complex.valueOf(953.687661, 229.0);
      complex3.getArgument();
      Complex complex4 = complex3.ZERO.negate();
      complex4.NaN.divide(complex0);
      Complex complex5 = complex2.NaN.sqrt1z();
      complex0.toString();
      Complex complex6 = complex0.tanh();
      complex2.ONE.abs();
      Complex complex7 = complex6.subtract(953.687661);
      complex7.asin();
      Complex complex8 = complex7.asin();
      complex8.ZERO.add(0.0);
      complex8.I.hashCode();
      complex6.ONE.add(complex8);
      complex7.INF.cosh();
      Complex complex9 = complex6.multiply((-2420));
      complex2.nthRoot(1);
      Complex complex10 = complex6.sinh();
      complex1.ONE.sinh();
      complex0.sinh();
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      complex1.sin();
      complex9.INF.subtract(complex10);
      complex9.NaN.hashCode();
      complex5.reciprocal();
      complex9.reciprocal();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = Complex.valueOf((-1124.430003210548), (-1124.430003210548));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      complex4.getArgument();
      complex4.I.getField();
      complex1.readResolve();
      complex0.add(0.0);
      Complex complex5 = complex2.pow((-1258.635839676381));
      Complex complex6 = complex5.subtract(0.06520968675613403);
      complex6.INF.log();
      complex3.createComplex((-1258.635839676381), 1.669785737991333);
      Complex complex7 = complex0.divide(complex4);
      complex2.toString();
      Object object0 = new Object();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.39433568716049194);
      complex0.NaN.cos();
      complex0.pow(2499.81);
      complex0.ONE.tanh();
      Complex complex1 = complex0.NaN.createComplex(3366.171353673768, (-3.7999795083850525E-8));
      complex1.INF.subtract(6.283185307179586);
      Complex complex2 = complex0.I.subtract(complex1);
      complex1.NaN.readResolve();
      complex2.ONE.multiply(398);
      complex0.ONE.createComplex((-1684.8), (-661.677184564));
      Complex complex3 = complex0.sqrt1z();
      complex3.INF.exp();
      complex3.ONE.abs();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex0.cosh();
      complex0.ONE.reciprocal();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex2.ZERO.log();
      complex1.ONE.divide(complex2);
      complex4.I.tan();
      Complex complex5 = complex3.add((double) 0);
      complex5.I.multiply(1);
      complex3.ONE.getArgument();
      Complex complex6 = complex2.subtract(complex1);
      complex6.I.exp();
      complex0.NaN.tan();
      Complex complex7 = complex3.sqrt();
      complex4.INF.divide(complex5);
      complex4.subtract(complex2);
      complex4.pow(complex2);
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.multiply(0);
      complex0.reciprocal();
      complex6.multiply(0.0);
      complex9.getReal();
      complex9.asin();
      complex7.isInfinite();
      complex4.getArgument();
      complex3.multiply(0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-2.0461505570781806E57), 3.454660807101683E62);
      complex0.ONE.pow(complex1);
      Complex complex2 = new Complex(1981.4269);
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex3.NaN.add(complex0);
      complex4.divide(complex0);
      complex4.ONE.getField();
      complex0.INF.abs();
      Complex complex5 = Complex.ZERO;
      complex5.ONE.abs();
      Complex complex6 = complex0.add(complex5);
      complex6.NaN.getField();
      Complex complex7 = complex6.pow(complex5);
      complex5.NaN.log();
      complex7.NaN.asin();
      complex7.ONE.subtract(complex6);
      complex0.hashCode();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.INF.sinh();
      Complex complex9 = complex0.multiply(complex8);
      Complex complex10 = complex5.acos();
      complex10.NaN.getField();
      complex9.toString();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.353142754175797E-8);
      Complex complex1 = complex0.INF.createComplex(6.353142754175797E-8, 1.121383042095528E-83);
      complex0.INF.cosh();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex2.ONE.getField();
      Complex complex3 = complex1.ONE.multiply(6.353142754175797E-8);
      complex3.ONE.cosh();
      complex3.ONE.subtract(complex0);
      Complex complex4 = complex0.multiply(6.353142754175797E-8);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.acos();
      complex2.I.sin();
      complex5.toString();
      Complex complex7 = complex6.I.divide(complex2);
      complex4.ZERO.multiply(6.353142754175797E-8);
      Complex complex8 = complex4.tan();
      complex1.NaN.pow(6.353142754175797E-8);
      complex5.INF.abs();
      Complex complex9 = new Complex(6.353142754175797E-8, 1.688911928929718E-48);
      complex5.INF.divide(complex9);
      Complex complex10 = complex8.asin();
      complex6.NaN.log();
      complex5.divide(complex8);
      Complex complex11 = complex1.sqrt();
      complex10.I.cos();
      Complex complex12 = complex10.sinh();
      complex12.readResolve();
      complex7.getImaginary();
      complex11.subtract(complex9);
      try { 
        complex6.nthRoot((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -14
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3047.1));
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.ONE.tanh();
      complex2.I.add(complex1);
      complex3.cosh();
      complex3.INF.asin();
      complex2.ONE.conjugate();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex1.I.sqrt();
      complex0.getArgument();
      Complex complex6 = complex0.pow(1.5707963267948966);
      complex6.ONE.divide((-2618.3949498326306));
      Complex complex7 = complex4.atan();
      complex7.I.nthRoot(124);
      complex4.multiply(complex7);
      complex4.isNaN();
      complex2.log();
      complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.892713087722722E-8));
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-6.892713087722722E-8), (-6.892713087722722E-8));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.multiply(complex4);
      complex6.ONE.toString();
      Complex complex7 = complex6.asin();
      complex5.tan();
      complex7.ONE.createComplex((-6.892713087722722E-8), 742.1598);
      Complex complex8 = complex6.multiply(1948);
      complex8.I.negate();
      complex5.INF.pow(0.0);
      Complex complex9 = complex6.acos();
      complex9.ZERO.hashCode();
      Complex complex10 = complex3.multiply((-2457));
      Complex complex11 = complex2.tan();
      complex5.getField();
      complex5.isNaN();
      complex0.tanh();
      complex11.getField();
      complex6.exp();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3385.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.getImaginary();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.I.multiply(0.0);
      Complex complex5 = Complex.valueOf(306.691);
      Complex complex6 = complex2.INF.asin();
      Complex complex7 = complex6.I.sqrt();
      complex6.I.getField();
      Complex complex8 = complex3.ONE.multiply(complex5);
      Complex complex9 = complex1.subtract(0.0);
      complex9.divide(306.691);
      complex9.abs();
      Complex complex10 = Complex.valueOf(1479.1204210443134);
      Complex complex11 = complex0.ONE.subtract(complex4);
      complex11.NaN.nthRoot(735);
      complex9.equals(complex8);
      complex5.multiply(complex2);
      complex5.NaN.subtract(306.691);
      complex2.pow(complex4);
      complex10.getArgument();
      complex5.getImaginary();
      complex8.toString();
      complex7.multiply(0.0);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2959.479308171);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex2.divide(complex1);
      complex4.conjugate();
      complex3.divide(complex4);
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex5.ZERO.tanh();
      complex6.INF.sinh();
      double double0 = 2.4889182184335247E-198;
      Complex complex7 = complex3.add(2.4889182184335247E-198);
      Complex complex8 = complex7.cosh();
      complex7.I.tan();
      Complex complex9 = complex0.asin();
      complex9.I.abs();
      complex4.isNaN();
      complex4.log();
      complex5.toString();
      Complex complex10 = complex8.pow(2008.41);
      int int0 = (-1681);
      try { 
        complex10.nthRoot((-1681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,681
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.I.tanh();
      complex1.ZERO.getField();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1245.882686694982);
      Complex complex1 = Complex.valueOf(1245.882686694982, 1245.882686694982);
      Complex complex2 = complex0.sqrt();
      complex1.ONE.nthRoot(1);
      complex2.getReal();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.NaN.log();
      complex4.ONE.cos();
      Complex complex5 = complex1.tanh();
      complex5.log();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      int int0 = 0;
      complex0.ONE.multiply(0);
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex3.ONE.multiply(complex1);
      Complex complex6 = complex4.INF.divide((-1643.367702955));
      Complex complex7 = complex6.ONE.log();
      complex7.ZERO.getArgument();
      complex0.toString();
      Complex complex8 = complex5.ONE.multiply(complex7);
      complex8.ONE.tanh();
      complex8.sqrt();
      Complex complex9 = complex4.I.atan();
      Complex complex10 = complex3.INF.pow((-1643.367702955));
      complex10.NaN.add(complex2);
      complex9.NaN.sqrt1z();
      complex3.getReal();
      complex0.readResolve();
      Complex complex11 = complex1.cos();
      complex11.I.log();
      complex5.cos();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.atan();
      complex0.acos();
      Complex complex2 = complex0.conjugate();
      Complex.valueOf((-2.774475773922311E-8), (-2.774475773922311E-8));
      Complex complex3 = complex0.sqrt();
      complex1.divide(complex3);
      complex2.toString();
      complex2.reciprocal();
      complex0.subtract(complex3);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.negate();
      complex2.I.pow(complex0);
      Complex complex3 = Complex.valueOf((-769.53886468));
      Complex complex4 = complex3.NaN.acos();
      complex0.toString();
      complex0.I.multiply(1);
      complex0.sinh();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex1.sin();
      complex6.ONE.cos();
      complex6.getImaginary();
      complex4.isInfinite();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex0.I.sin();
      complex0.I.abs();
      complex0.abs();
      Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.pow(complex5);
      complex6.I.subtract(complex1);
      Complex complex7 = complex2.ONE.pow((-1987.844990194));
      complex3.abs();
      complex3.I.exp();
      Complex complex8 = complex4.ONE.add(0.0);
      Complex complex9 = complex3.createComplex((-107.5275482), 1471.512271);
      complex4.readResolve();
      Complex complex10 = complex0.sin();
      complex9.negate();
      complex5.add(complex7);
      complex10.INF.cosh();
      Complex complex11 = complex5.negate();
      complex11.NaN.multiply(1288);
      complex4.I.divide(0.0);
      complex2.I.exp();
      Complex complex12 = Complex.valueOf(1471.512271);
      complex8.abs();
      complex10.abs();
      complex12.add(complex2);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.getArgument();
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getField();
      complex0.I.abs();
      complex0.ONE.reciprocal();
      complex0.isInfinite();
      Complex complex1 = complex0.cos();
      complex1.ZERO.hashCode();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ZERO.hashCode();
      complex0.getArgument();
      Complex complex4 = complex0.pow(0.0);
      complex2.subtract(complex1);
      complex4.createComplex(2445.7147, 0.20660123229026794);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.negate();
      Complex complex2 = complex0.INF.asin();
      complex2.ZERO.abs();
      complex0.getImaginary();
      complex0.negate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.sin();
      complex3.log();
      Complex complex5 = complex2.multiply(0);
      Complex complex6 = complex5.ONE.tanh();
      complex2.ONE.subtract((double) 0);
      Complex complex7 = complex5.exp();
      complex4.add(complex5);
      complex3.readResolve();
      complex5.readResolve();
      Complex complex8 = complex6.exp();
      complex8.sinh();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(1784.3, 2.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.INF.sinh();
      complex0.hashCode();
      Complex complex3 = complex1.createComplex(1784.3, (-1606.64166));
      complex3.I.tan();
      Complex complex4 = complex2.subtract(complex0);
      complex4.ZERO.atan();
      complex4.isNaN();
      complex2.I.sin();
      Complex complex5 = complex0.reciprocal();
      complex1.getField();
      complex5.getReal();
      complex2.readResolve();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(7.526183084319617E-8);
      Complex complex1 = complex0.ZERO.tanh();
      complex0.ZERO.toString();
      Complex complex2 = complex0.asin();
      complex2.I.abs();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.tan();
      complex4.INF.tan();
      Complex complex5 = complex1.ONE.subtract(7.526183084319617E-8);
      complex5.pow(complex1);
      Complex complex6 = complex2.ONE.cosh();
      complex6.add(1.0);
      Complex complex7 = complex4.ONE.subtract(complex2);
      complex7.NaN.readResolve();
      complex3.abs();
      Complex complex8 = complex1.divide(complex0);
      complex8.INF.sinh();
      complex2.abs();
      complex8.isNaN();
      Complex complex9 = complex6.divide(complex4);
      complex4.equals(complex3);
      Complex complex10 = complex4.subtract(2090.0);
      complex10.INF.exp();
      complex0.tanh();
      complex1.acos();
      complex6.tanh();
      complex1.abs();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3166.9510858704), (-2203.702810773127));
      Complex complex1 = complex0.divide((-2203.702810773127));
      complex1.NaN.getField();
      complex1.INF.multiply(complex0);
      complex1.ONE.negate();
      complex0.ONE.toString();
      complex0.NaN.toString();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.pow((-3166.9510858704));
      complex3.INF.getField();
      Complex complex4 = complex2.pow((-1071.0));
      complex4.ZERO.log();
      Complex complex5 = complex4.sqrt();
      complex5.ZERO.readResolve();
      Complex complex6 = complex4.ONE.cos();
      Complex complex7 = complex3.negate();
      complex7.INF.sqrt1z();
      Complex complex8 = complex2.log();
      complex8.ONE.getArgument();
      complex4.I.getField();
      Complex complex9 = new Complex((-2203.702810773127));
      Complex complex10 = complex9.I.createComplex((-1071.0), (-2770.2878));
      complex9.NaN.asin();
      complex8.equals(complex9);
      complex6.divide(complex10);
      complex3.multiply(226.53);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-2352.182851009206));
      Complex complex1 = complex0.ONE.multiply(0);
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex2.ONE.conjugate();
      complex3.ZERO.readResolve();
      complex2.ZERO.log();
      complex2.I.sinh();
      complex0.toString();
      Complex complex4 = complex2.I.tan();
      Complex complex5 = complex4.ZERO.add(0.0);
      complex3.log();
      Complex complex6 = complex4.subtract(586.33010383441);
      Complex complex7 = complex6.ONE.log();
      complex7.INF.acos();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex3.atan();
      complex8.conjugate();
      complex5.isInfinite();
      complex0.add(complex1);
      Complex.valueOf((-4032.67706689), 0.0);
      Complex complex10 = complex9.sqrt();
      complex3.getArgument();
      complex6.pow((-4032.67706689));
      Complex.valueOf((-5.234055273962444E-8));
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-2482.6252736394763));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.ZERO.tan();
      complex3.INF.pow((-2482.6252736394763));
      complex2.INF.sin();
      Complex complex4 = Complex.valueOf(2.0, (-1.0));
      complex3.ZERO.sqrt1z();
      Complex complex5 = complex3.NaN.acos();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex1.atan();
      complex7.divide(complex3);
      complex3.NaN.conjugate();
      Complex complex8 = complex2.createComplex((-2482.6252736394763), 2616.94132373268);
      Complex complex9 = complex8.log();
      complex5.abs();
      complex9.tan();
      Complex complex10 = complex1.add(complex5);
      Complex complex11 = complex8.add(Double.NaN);
      complex11.NaN.subtract(complex10);
      complex6.asin();
      complex6.createComplex((-8.491135959370133E-8), (-1.0));
      complex4.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(2.0);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1057.4391845621, (-20.0));
      Complex complex1 = complex0.multiply(1279);
      Complex complex2 = complex1.I.add(complex0);
      complex0.NaN.hashCode();
      Complex complex3 = Complex.valueOf(1057.4391845621);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.ONE.pow(complex0);
      complex4.I.getField();
      complex0.NaN.getArgument();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex1.add(complex0);
      complex3.ONE.readResolve();
      Complex complex8 = complex2.multiply(1057.4391845621);
      Complex complex9 = complex7.divide(complex5);
      complex9.ZERO.reciprocal();
      complex4.multiply(complex8);
      complex4.createComplex((-20.0), 1057.4391845621);
      Complex complex10 = complex9.sinh();
      complex10.INF.log();
      complex6.getArgument();
      complex3.log();
      complex8.add((-20.0));
      complex3.getReal();
      complex8.isNaN();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex.valueOf(0.0, (-4449.479733164));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.ZERO.conjugate();
      String string0 = complex0.ZERO.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      complex0.isNaN();
      complex0.getField();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex5.ONE.divide(complex4);
      complex2.getField();
      Complex complex7 = complex6.ZERO.sqrt1z();
      complex3.add(complex5);
      Complex complex8 = complex2.exp();
      complex0.ONE.add(0.0);
      Complex complex9 = complex8.I.cos();
      complex8.ONE.conjugate();
      Complex complex10 = complex8.pow(0.0);
      Complex complex11 = complex6.INF.divide(1.0);
      assertEquals(Double.POSITIVE_INFINITY, complex11.getImaginary(), 0.01);
      assertTrue(complex11.isInfinite());
      
      complex3.getReal();
      Complex complex12 = complex6.cosh();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertTrue(complex12.equals((Object)complex9));
      
      Complex complex13 = complex1.pow(0.06977382302284241);
      Complex complex14 = complex13.multiply(259.83052049683886);
      complex3.isNaN();
      assertSame(complex3, complex14);
      
      Complex complex15 = complex10.subtract((-2520.085343));
      assertTrue(complex10.equals((Object)complex7));
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(850.7758473);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.createComplex(2653.02, 1.9200356006622314);
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex2.ONE.log();
      Complex complex6 = complex0.multiply(complex5);
      complex0.isNaN();
      Complex complex7 = complex3.log();
      Complex complex8 = complex0.log();
      assertTrue(complex8.isInfinite());
      
      Complex complex9 = complex6.conjugate();
      Complex complex10 = complex9.ONE.divide(2653.02);
      assertEquals(3.769289338188178E-4, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      double double0 = complex7.getReal();
      assertEquals(7.8834541546278905, double0, 0.01);
      
      Complex complex11 = complex9.acos();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex6, complex4);
      
      Complex complex12 = complex3.add(complex1);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(3503.7958473, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertNotSame(complex2, complex11);
      assertFalse(complex0.equals((Object)complex9));
      assertEquals(1.9200356006622314, complex12.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.INF.hashCode();
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.getArgument();
      complex0.I.hashCode();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.I.conjugate();
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex5.tan();
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex2.log();
      assertSame(complex9, complex7);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      
      List<Complex> list0 = complex4.nthRoot(228);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(228, list0.size());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertTrue(list0.contains(complex4));
      assertEquals(0.7615941559557649, complex3.getImaginary(), 0.01);
      
      Complex complex10 = complex0.log();
      assertFalse(complex0.equals((Object)complex6));
      assertEquals(0.0, complex10.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 1;
      complex0.INF.nthRoot(1);
      Complex complex1 = complex0.ONE.tanh();
      complex1.ONE.toString();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(678.0159736, (-2607.635056523475));
      Complex complex1 = complex0.multiply((-126));
      Complex complex2 = complex1.INF.log();
      Complex complex3 = Complex.valueOf(2.872649515690124E56);
      assertEquals(2.872649515690124E56, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.I.conjugate();
      Complex complex5 = complex4.I.acos();
      assertEquals((-0.8813735870195429), complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex1.add(0.0);
      Complex complex7 = complex0.INF.conjugate();
      Complex complex8 = complex1.multiply(1815);
      complex8.ZERO.getField();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex9.ZERO.asin();
      Complex complex11 = complex10.ZERO.createComplex((-1207.53), Double.POSITIVE_INFINITY);
      assertTrue(complex11.isInfinite());
      
      Complex complex12 = complex10.I.sqrt1z();
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      complex9.ONE.hashCode();
      assertEquals((-7.412499722954061E-7), complex9.getReal(), 0.01);
      
      complex0.conjugate();
      Complex complex13 = complex6.sin();
      assertTrue(complex13.equals((Object)complex7));
      
      complex2.sinh();
      assertTrue(complex2.isInfinite());
  }
}
