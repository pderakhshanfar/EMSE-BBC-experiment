/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:00:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.ONE.tanh();
      complex1.acos();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-4373236.623557743), (-4373236.623557743));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.tan();
      complex1.toString();
      complex3.getArgument();
      complex0.ZERO.getField();
      Complex complex4 = complex3.pow(2.0);
      Complex complex5 = complex4.asin();
      complex5.NaN.hashCode();
      complex1.ONE.divide(9.77929222446451E85);
      Complex complex6 = complex0.conjugate();
      complex2.nthRoot(2390);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3.8250384914780414E13), 2.0527342305586606E186);
      Complex complex2 = complex1.acos();
      complex2.tan();
      Complex complex3 = complex0.tan();
      complex3.ONE.getField();
      Complex complex4 = complex3.subtract(complex1);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex.valueOf(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.sinh();
      complex0.INF.getArgument();
      Complex complex1 = complex0.multiply((double) (-518));
      Complex complex2 = new Complex((-518));
      Complex complex3 = complex1.pow(complex2);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(111.46072666, (-3988.0608643400046));
      Complex complex1 = new Complex((-3988.0608643400046));
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.I;
      complex1.asin();
      Complex complex5 = new Complex((-863.0188353));
      complex5.NaN.exp();
      complex0.divide((-3988.0608643400046));
      complex0.asin();
      complex1.readResolve();
      complex3.tan();
      Complex complex6 = complex2.tanh();
      complex5.negate();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex1.negate();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(364);
      complex1.divide((double) 364);
      Complex complex3 = new Complex((-20.0), 2577.82);
      complex3.tanh();
      complex0.multiply(complex3);
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-955.5234113220414));
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.I;
      complex1.INF.reciprocal();
      complex4.asin();
      Complex complex5 = new Complex((-863.0188353));
      complex0.divide((-863.0188353));
      Complex complex6 = Complex.I;
      complex6.asin();
      complex1.readResolve();
      complex3.tan();
      Complex complex7 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.acos();
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.asin();
      complex1.readResolve();
      Complex complex3 = complex1.tan();
      complex3.I.pow(complex1);
      complex3.equals("");
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = new Complex((-3080.97081), Double.NaN);
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.cosh();
      complex2.multiply(8.761416875971053E-298);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.169926810324408E237, (-1.9600580584843318E-8));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2193.552882, 2193.552882);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.INF.nthRoot(2832);
      complex0.multiply(8.169926810324408E237);
      complex0.reciprocal();
      complex0.sinh();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2493.2492654);
      complex0.ZERO.sinh();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(2493.2492654, 0.0);
      Complex complex4 = complex2.asin();
      complex3.readResolve();
      complex4.tan();
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.nthRoot(2845);
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = Complex.ZERO;
      complex0.readResolve();
      complex2.readResolve();
      complex2.readResolve();
      Complex complex4 = (Complex)complex1.readResolve();
      complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2493.2492654);
      Complex complex1 = complex0.subtract(2493.2492654);
      Complex complex2 = complex0.divide(0.5051454305648804);
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.9997704315886135);
      complex2.acos();
      Complex complex3 = complex1.asin();
      complex1.readResolve();
      Object object0 = complex0.readResolve();
      complex3.readResolve();
      Complex complex4 = Complex.NaN;
      complex4.equals(object0);
      complex1.divide(0.9997704315886135);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.isNaN();
      Complex complex2 = complex0.createComplex(964.3376, 964.3376);
      complex1.ONE.cosh();
      complex1.ZERO.multiply(complex0);
      complex1.I.conjugate();
      Complex complex3 = complex2.createComplex(2.0, 964.3376);
      complex3.I.cos();
      complex0.multiply((-3536.22));
      complex1.multiply(4971);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(2493.2492654, 2493.2492654);
      complex0.ZERO.sinh();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex0);
      Complex complex3 = Complex.valueOf(2493.2492654, 0.0);
      complex2.asin();
      complex3.cosh();
      complex3.readResolve();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.NaN;
      complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex1.I.asin();
      Complex complex2 = complex1.I.tanh();
      complex1.I.cos();
      complex2.ONE.divide(2.381600167287677E-297);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.I.abs();
      complex0.multiply(1.2629002145276675E-111);
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-2.928362616578011E142));
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.I;
      complex2.add(complex1);
      Complex complex3 = Complex.valueOf(1.7516078165936552E170, 1.7516078165936552E170);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.divide((-3066.5572246896268));
      complex1.sinh();
      complex3.abs();
      complex2.getArgument();
      Complex complex7 = new Complex((-2.928362616578011E142), (-151.6108));
      Complex complex8 = Complex.NaN;
      complex8.tan();
      complex5.subtract(complex6);
      Complex complex9 = complex2.sqrt();
      complex9.NaN.subtract(1.7516078165936552E170);
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      complex1.log();
      complex0.isInfinite();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex1.negate();
      complex3.I.pow(complex4);
      complex2.abs();
      complex1.cos();
      complex3.createComplex(1.5703952437419346, 0.7615941559557649);
      Complex.valueOf((-6216289.899417639), (-6216289.899417639));
      complex0.multiply(1736193708);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      complex0.sqrt();
      complex0.subtract(complex2);
      Complex complex3 = new Complex((-1244.9602613370087), (-20.0));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract((-3986.840380803639));
      complex0.divide((-1.0));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.negate();
      complex3.INF.abs();
      complex3.abs();
      Complex complex4 = complex1.cos();
      Complex complex5 = Complex.INF;
      complex5.getArgument();
      complex4.tan();
      complex4.INF.atan();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.subtract(complex6);
      complex7.sqrt();
      complex6.subtract(complex5);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.asin();
      complex1.isNaN();
      Complex complex3 = complex0.createComplex(964.3376, 964.3376);
      complex2.ONE.cosh();
      complex2.ZERO.multiply(complex0);
      Complex complex4 = complex2.I.conjugate();
      complex4.createComplex(0.0, 0.0);
      complex2.conjugate();
      complex3.exp();
      Complex.valueOf(1.5894895222006507E7);
      complex4.acos();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2493.2492654);
      complex0.ZERO.sinh();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex(2493.2492654, 964.3376);
      Complex complex4 = complex3.createComplex(2237.33698737189, 325.71852148012476);
      complex4.cosh();
      Complex complex5 = new Complex((-1492.13), (-1198.25225752861));
      complex4.multiply(complex5);
      complex1.conjugate();
      complex5.conjugate();
      complex1.exp();
      Complex.valueOf(964.3376);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = Complex.ZERO;
      complex1.getField();
      complex2.abs();
      complex2.cos();
      Complex complex4 = Complex.I;
      complex4.getArgument();
      complex2.tan();
      Complex.valueOf(3922.36931);
      Complex complex5 = Complex.ONE;
      complex4.NaN.multiply((-2144));
      complex2.subtract(complex5);
      Complex complex6 = complex0.sqrt();
      complex6.INF.sqrt();
      complex4.subtract(complex6);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3187.14518836455);
      Complex complex1 = Complex.valueOf(3187.14518836455, 583.41391759217);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.log();
      complex3.toString();
      complex2.I.abs();
      Complex complex4 = complex2.reciprocal();
      complex4.INF.exp();
      Complex complex5 = complex2.pow((-1.5894894222006507E7));
      Complex complex6 = complex1.cos();
      complex0.ZERO.add((-4830.1203));
      complex6.acos();
      complex2.multiply(complex5);
      Complex.valueOf((-303.8494741), 1.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract((-3986.840380803639));
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ONE.subtract((-3986.840380803639));
      complex2.getImaginary();
      Complex complex4 = complex3.cosh();
      complex0.log();
      Complex complex5 = complex3.asin();
      complex1.divide(3.794385569450774E-9);
      Complex complex6 = complex5.createComplex((-3986.840380803639), 2103.4941998016975);
      complex6.cosh();
      Complex complex7 = complex5.cosh();
      complex4.divide(complex2);
      complex4.sqrt();
      complex7.hashCode();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-3986.840380803639));
      Complex complex2 = complex1.divide(1369.5347993029447);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.subtract((-3986.840380803639));
      complex0.add(complex3);
      complex2.getArgument();
      Complex complex5 = complex4.negate();
      complex5.asin();
      Complex complex6 = complex5.divide((-2967.53));
      complex6.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex.valueOf((-2967.53), (-811.7621616521247));
      Complex complex7 = complex3.multiply(998);
      complex1.acos();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2493.2492654);
      complex0.ZERO.sinh();
      Complex complex1 = Complex.I;
      complex0.add(complex1);
      Complex complex2 = Complex.valueOf(2493.2492654, 0.0);
      Complex complex3 = complex2.divide(0.5403023058681398);
      complex2.sinh();
      complex1.abs();
      Complex complex4 = complex3.cos();
      complex1.getArgument();
      Complex complex5 = new Complex(Double.NaN, 1037.86);
      Complex complex6 = complex4.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.subtract(complex2);
      complex0.sqrt();
      complex8.subtract(complex6);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2493.2492654);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      Complex.valueOf(2493.2492654, 0.0);
      Complex complex4 = new Complex(2493.2492654);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.divide((-3861.98782901));
      complex5.sinh();
      complex6.abs();
      Complex complex7 = Complex.INF;
      complex7.cos();
      complex6.getArgument();
      Complex complex8 = new Complex((-3.141592653589793), 2493.2492654);
      Complex complex9 = complex1.tan();
      Complex complex10 = new Complex(2845.0);
      complex7.subtract(complex10);
      Complex complex11 = Complex.valueOf((-3.141592653589793), (-2537.11712970851));
      complex11.sqrt();
      complex4.subtract(complex3);
      complex3.tan();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract((-3986.840380803639));
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex3.acos();
      complex1.asin();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.asin();
      complex0.createComplex(4085.547998, Double.POSITIVE_INFINITY);
      complex2.multiply((-2725));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      complex0.isInfinite();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.pow(complex3);
      complex0.getImaginary();
      complex2.cosh();
      complex0.log();
      Complex complex5 = complex2.asin();
      complex1.ZERO.divide(0.0);
      complex5.ONE.createComplex(0.0, (-5289.0));
      Complex complex6 = complex2.cosh();
      complex6.cosh();
      Complex complex7 = complex4.divide(complex2);
      complex7.NaN.sqrt();
      complex7.hashCode();
      Complex complex8 = Complex.valueOf((-481.1450443148), 638.0190782160212);
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.negate();
      complex3.nthRoot(2845);
      Complex complex4 = Complex.ZERO;
      complex4.readResolve();
      complex0.INF.nthRoot(2845);
      complex1.exp();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.divide((-331.71));
      complex2.getField();
      complex2.equals("_[nApgW_\"[ex");
      complex6.readResolve();
      complex6.pow(2764.272858358393);
      complex6.multiply((-1941.848103548));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2493.2492654);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.add(complex2);
      Complex.valueOf(2493.2492654, 0.0);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.ONE.divide(0.0);
      complex0.sinh();
      complex2.abs();
      complex5.cos();
      Complex complex6 = Complex.INF;
      complex6.isInfinite();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.reciprocal();
      complex0.getArgument();
      Complex complex2 = new Complex((-458.6865), (-458.6865));
      Complex complex3 = complex0.tan();
      complex0.subtract(complex3);
      complex1.sqrt();
      complex0.subtract(complex1);
      complex0.tan();
      complex2.isInfinite();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      complex1.INF.divide(5328.0);
      complex1.getImaginary();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.divide(Double.NaN);
      complex3.createComplex(0.0, (-815.3));
      complex5.cosh();
      complex2.cosh();
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex3.sqrt();
      complex6.hashCode();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(402.82098104, 402.82098104);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.sin();
      complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.ZERO.divide(939.786198291137);
      Complex complex4 = complex2.pow(4159.04883492);
      Complex complex5 = complex2.add(939.786198291137);
      Complex complex6 = complex1.add(complex5);
      complex1.readResolve();
      complex0.atan();
      complex0.tanh();
      complex4.INF.sin();
      Complex complex7 = complex6.pow(939.786198291137);
      complex7.ZERO.sqrt1z();
      complex4.getField();
      complex3.divide(998.1038847283553);
      complex4.sqrt1z();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.reciprocal();
      complex0.isInfinite();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.10467669367790222, 0.10467669367790222);
      complex0.I.getField();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.subtract(complex0);
      complex0.toString();
      complex0.acos();
      Complex complex5 = complex3.subtract(complex2);
      complex4.cos();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = Complex.valueOf(1685.5313170075121, 1685.5313170075121);
      Complex complex8 = Complex.valueOf(Double.NaN, 1685.5313170075121);
      complex8.getReal();
      complex1.getField();
      complex7.isNaN();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex8.add(Double.NaN);
      complex8.pow(complex5);
      complex3.toString();
      complex0.equals(complex7);
      complex0.isInfinite();
      complex10.subtract(0.0);
      complex9.reciprocal();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-997.1038847283553), (-997.1038847283553));
      Complex complex2 = complex1.atan();
      Complex.valueOf(0.0);
      Complex complex3 = Complex.ONE;
      complex0.subtract(complex3);
      complex2.multiply(974);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(998.1038847283553, 0.7853981633974483);
      Complex complex1 = complex0.asin();
      complex1.isNaN();
      complex0.ONE.divide(complex1);
      complex1.createComplex(9.697418238031897E-8, 1242.1085918677556);
      complex1.cosh();
      complex0.multiply(complex1);
      complex0.conjugate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.createComplex(1.0, 356.3703876178985);
      Complex complex4 = complex2.conjugate();
      complex4.exp();
      complex3.multiply(4451);
      Complex.valueOf((-1.1511990258493999E-8));
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide((-1.0));
      complex1.ZERO.divide((-1.0));
      Complex complex2 = complex1.ZERO.tanh();
      complex2.ONE.acos();
      complex0.asin();
      Complex complex3 = complex1.ONE.divide((-1.0));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.divide(2209.37572132876);
      complex2.getField();
      complex5.equals((Object) null);
      complex5.readResolve();
      complex3.pow(2209.37572132876);
      Complex complex6 = new Complex(2209.37572132876, 0.0);
      complex6.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.subtract((-3986.840380803639));
      Complex complex1 = new Complex((-58.99355278112), (-3986.840380803639));
      complex1.tanh();
      Complex complex2 = complex1.cos();
      complex1.ZERO.cosh();
      complex2.pow(2.591270923614502);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.divide(5328.0);
      Complex complex3 = complex0.I.negate();
      complex0.NaN.abs();
      Complex complex4 = complex0.cos();
      complex0.getArgument();
      complex0.cosh();
      complex1.nthRoot(1);
      complex2.getReal();
      complex4.tanh();
      complex2.cos();
      complex3.subtract((double) 1);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ZERO.negate();
      complex1.nthRoot(2845);
      Complex complex4 = (Complex)complex2.readResolve();
      Complex complex5 = complex3.INF.exp();
      complex0.I.cosh();
      Complex complex6 = complex1.I.divide((double) 2845);
      complex6.isNaN();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex2.add(1058.01563193);
      Complex complex9 = Complex.ZERO;
      complex7.add(complex8);
      complex4.toString();
      complex1.equals(complex7);
      complex1.isInfinite();
      complex5.subtract(997.1038847283553);
      complex4.reciprocal();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide((-1.0));
      complex1.ZERO.divide((-1.0));
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.ONE.acos();
      complex1.getField();
      int int0 = (-1590);
      // Undeclared exception!
      complex3.nthRoot(955538525);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf(0.0, (-1975.2894399));
      complex3.getReal();
      ComplexField complexField0 = complex4.getField();
      complex4.isNaN();
      Complex complex6 = complex1.add(1.401987075805664);
      complex6.pow(complex4);
      Complex complex7 = complex4.add(complex0);
      complex7.toString();
      complex1.equals(complexField0);
      complex6.isInfinite();
      complex7.subtract(1058.01563193);
      complex5.reciprocal();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-997.1038847283553), (-997.1038847283553));
      complex1.atan();
      Complex.valueOf(0.0);
      Complex complex2 = Complex.ONE;
      complex0.subtract(complex2);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex3.ONE.divide(complex0);
      complex3.ONE.atan();
      complex0.atan();
      complex0.INF.nthRoot(446);
      Complex complex5 = complex3.I.atan();
      complex5.NaN.add((-1.2906712010774655E-8));
      complex3.abs();
      complex4.subtract(complex0);
      complex0.log();
      complex5.pow(0.0);
      Complex complex6 = complex3.pow(complex5);
      complex2.multiply(0.0);
      complex5.reciprocal();
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 0;
      complex0.sqrt();
      Complex complex1 = complex0.multiply(0);
      complex1.ZERO.readResolve();
      complex0.NaN.sin();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.cosh();
      complex0.NaN.abs();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex5.NaN.tan();
      complex5.nthRoot(2251);
      complex0.getField();
      Complex complex8 = complex5.subtract(Double.NaN);
      Complex complex9 = complex8.ZERO.exp();
      complex9.INF.divide(1113.148296567497);
      complex9.NaN.getArgument();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex6.exp();
      complex6.pow((-1649.6319924));
      Complex complex12 = Complex.valueOf((-467.83235875819), 2174.83382539);
      Complex complex13 = complex12.INF.subtract(2174.83382539);
      Complex complex14 = complex6.add(complex4);
      complex14.ONE.sqrt1z();
      complex10.hashCode();
      Complex complex15 = complex7.negate();
      Complex complex16 = complex15.tan();
      complex16.ZERO.reciprocal();
      Complex complex17 = complex16.I.divide(complex11);
      complex13.exp();
      complex16.multiply(complex15);
      complex17.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-2116.60100872), (-2116.60100872));
      complex0.getImaginary();
      complex0.ONE.multiply(291.64093852035);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.I.tanh();
      complex0.getReal();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.cos();
      Complex.valueOf(1.0);
      complex5.ZERO.abs();
      complex0.readResolve();
      Complex complex6 = complex0.sqrt1z();
      complex2.ONE.hashCode();
      Complex complex7 = complex6.ZERO.createComplex(291.64093852035, 875.56982);
      complex7.INF.add((-2116.60100872));
      Complex complex8 = complex6.add(complex1);
      Complex complex9 = complex8.ONE.subtract(complex6);
      complex0.equals(complex3);
      complex6.sin();
      complex9.divide(complex0);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.INF.getField();
      Complex complex2 = complex1.I.add(822.04);
      complex0.add(complex1);
      complex0.ZERO.getArgument();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.NaN.negate();
      complex4.ONE.readResolve();
      complex3.subtract((-3500.0));
      Complex complex5 = Complex.valueOf((-4346.13));
      Complex complex6 = complex0.asin();
      complex2.isNaN();
      complex1.subtract((-1.0));
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.subtract(0.0);
      complex5.ZERO.getArgument();
      complex8.ONE.reciprocal();
      Complex complex9 = complex5.sqrt();
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.getField();
      Complex complex2 = complex0.subtract(complex1);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.NaN.sin();
      complex1.ONE.divide(complex0);
      Complex complex3 = complex0.ZERO.pow(complex1);
      complex3.NaN.exp();
      Complex complex4 = complex3.add((-2555.65));
      complex4.I.readResolve();
      Complex complex5 = complex0.atan();
      complex5.ONE.cosh();
      complex0.hashCode();
      complex0.getImaginary();
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add((-5.450354376430758E-9));
      Complex complex2 = complex0.divide(551.4784981);
      Complex complex3 = complex2.acos();
      complex1.ZERO.getField();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex2.INF.sqrt1z();
      Complex complex6 = complex0.asin();
      complex6.I.nthRoot(1);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex0.sqrt1z();
      complex3.ZERO.sin();
      Complex.valueOf(1195.24854, 2359.3491);
      complex4.sqrt();
      complex6.equals(complex1);
      complex8.isNaN();
      complex6.tanh();
      complex7.add(complex5);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex1.INF.tan();
      complex2.I.sin();
      complex1.ONE.hashCode();
      complex0.ZERO.hashCode();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ONE.tanh();
      complex2.ZERO.tan();
      complex4.I.nthRoot(1117);
      complex4.NaN.sqrt1z();
      complex3.toString();
      Complex complex5 = complex0.asin();
      complex5.INF.toString();
      complex5.ONE.exp();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = complex5.NaN.cos();
      complex5.NaN.sinh();
      complex5.isInfinite();
      complex3.isInfinite();
      complex7.INF.multiply(complex0);
      complex1.abs();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex7.acos();
      Complex complex10 = complex2.subtract(complex8);
      complex6.multiply(0.0);
      complex3.pow(complex7);
      complex10.INF.toString();
      Complex complex11 = complex8.negate();
      complex10.sqrt();
      complex11.divide(1.0);
      complex11.sinh();
      complex0.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.asin();
      complex1.isNaN();
      complex0.createComplex(964.3376, 964.3376);
      complex2.ONE.cosh();
      complex2.ZERO.multiply(complex0);
      complex2.I.conjugate();
      Complex complex3 = complex2.createComplex(0.0, (-4688.1920907789));
      complex3.I.conjugate();
      Complex complex4 = complex1.exp();
      complex4.ONE.multiply(1);
      Complex.valueOf((-4688.1920907789));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      complex0.getArgument();
      Complex complex2 = complex0.sinh();
      complex2.pow(complex0);
      Complex.valueOf(1411.0, Double.NaN);
      Complex complex3 = complex2.ZERO.createComplex(Double.NaN, Double.NaN);
      complex3.NaN.cosh();
      complex3.multiply(1508);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex2.INF.reciprocal();
      complex1.getImaginary();
      complex5.ZERO.subtract((double) 1508);
      Complex complex6 = Complex.ONE;
      complex4.ZERO.multiply(complex6);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.createComplex(Double.NaN, 6.283185307179586);
      Complex complex9 = complex8.I.cosh();
      complex9.ONE.reciprocal();
      complex2.hashCode();
      complex0.tan();
      complex1.toString();
      Complex complex10 = new Complex(1938.02737, 1.1752011936438014);
      complex7.subtract(complex10);
      Complex complex11 = Complex.valueOf(Double.NaN);
      complex2.ZERO.log();
      Complex complex12 = complex5.sin();
      complex0.tan();
      complex4.multiply(complex7);
      complex12.getImaginary();
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-3094.2661));
      complex1.ZERO.abs();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.pow(complex0);
      complex3.divide((-1373.6517660784593));
      complex2.multiply(63);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply((-128));
      complex1.readResolve();
      Complex complex2 = complex0.NaN.conjugate();
      complex0.I.divide(complex2);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.I.multiply(0.0);
      complex5.ZERO.nthRoot(833);
      complex4.INF.hashCode();
      complex3.ZERO.subtract(1.0);
      complex0.toString();
      complex4.getField();
      complex3.tan();
      complex4.subtract((double) (-128));
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(2402.703930179011, 2937.5830032453);
      complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.subtract(2402.703930179011);
      Complex complex2 = complex0.NaN.subtract(2937.5830032453);
      Complex complex3 = complex1.ZERO.multiply(2937.5830032453);
      Complex complex4 = complex1.ZERO.conjugate();
      complex1.INF.getArgument();
      complex0.abs();
      Complex complex5 = complex3.INF.pow(2402.703930179011);
      Complex.valueOf(505.95, 2937.5830032453);
      complex4.isNaN();
      complex3.abs();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex5.NaN.sqrt1z();
      complex1.multiply(1442.65731463016);
      Complex complex8 = complex7.INF.createComplex(0.0, (-955.260178));
      Complex complex9 = complex6.cos();
      complex9.subtract(complex5);
      complex6.INF.tanh();
      complex3.subtract(complex1);
      Complex complex10 = complex1.cos();
      complex10.I.negate();
      complex6.reciprocal();
      complex2.conjugate();
      complex6.subtract(1442.65731463016);
      complex0.multiply(complex7);
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.divide(5328.0);
      Complex complex3 = complex0.I.negate();
      complex0.NaN.abs();
      complex0.cos();
      complex0.getArgument();
      Complex complex4 = complex3.tan();
      complex4.subtract(complex0);
      Complex complex5 = complex2.sqrt();
      complex2.subtract(complex0);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1338.0470583738704), 737.4288350424);
      Complex complex1 = complex0.add(737.4288350424);
      complex1.NaN.divide(complex0);
      complex0.getField();
      Complex complex2 = complex0.ZERO.createComplex((-1339.95551), (-2160.0774628));
      Complex complex3 = complex2.ONE.add(complex0);
      complex3.ZERO.abs();
      complex1.ONE.acos();
      complex0.NaN.getField();
      Complex complex4 = complex1.multiply(complex0);
      complex4.tan();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.ONE.reciprocal();
      Complex complex3 = complex0.createComplex((-1.7990934773848504E-8), (-1.7990934773848504E-8));
      complex1.ZERO.add(complex3);
      complex3.NaN.pow(complex1);
      complex1.I.asin();
      Complex complex4 = complex3.acos();
      complex2.NaN.subtract(complex4);
      complex1.abs();
      complex0.negate();
      complex2.multiply((-1.7990934773848504E-8));
      Complex complex5 = Complex.INF;
      complex3.equals(complex5);
      complex2.add((-1.650155887561251E-8));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      int int0 = 1308;
      try { 
        complex0.ONE.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.I.sin();
      complex0.equals(object0);
      Complex complex6 = complex0.acos();
      complex5.cos();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.I.add(0.0);
      complex8.INF.sqrt();
      Complex complex9 = complex7.ZERO.exp();
      complex9.NaN.reciprocal();
      complex9.INF.sinh();
      complex0.hashCode();
      complex6.toString();
      complex2.getImaginary();
      Complex complex10 = complex6.log();
      complex3.ONE.tan();
      complex1.sin();
      complex6.multiply(1.3152074173459994E-8);
      Complex complex11 = complex5.pow(complex4);
      complex11.ONE.sin();
      complex3.conjugate();
      complex10.conjugate();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2493.2492654);
      complex0.ZERO.sinh();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex.valueOf(2493.2492654, 0.0);
      Complex complex3 = complex2.asin();
      double double0 = 0.0;
      complex3.ONE.divide(0.0);
      Complex complex4 = complex0.sinh();
      double double1 = (-52.676808);
      complex1.add((-52.676808));
      Complex complex5 = complex4.divide(complex1);
      complex5.NaN.sin();
      complex5.ZERO.multiply(889);
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-3986.840380803639);
      Complex complex1 = complex0.ZERO.subtract((-3986.840380803639));
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ONE.subtract((-3986.840380803639));
      Complex complex5 = complex4.INF.add(complex2);
      complex0.NaN.getArgument();
      complex5.ZERO.negate();
      complex1.ONE.getField();
      int int0 = (-1590);
      try { 
        complex3.nthRoot((-1590));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,590
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(0.0);
      complex0.pow(complex2);
      Complex complex3 = complex1.ONE.add(0.0);
      complex2.INF.asin();
      Complex complex4 = complex2.I.pow(0.0);
      complex0.NaN.divide(complex3);
      Complex complex5 = complex0.subtract(1.991444798915497E-192);
      Complex complex6 = complex5.divide(complex4);
      complex6.ZERO.tan();
      complex2.asin();
      Complex complex7 = complex1.asin();
      complex7.INF.sinh();
      Complex complex8 = complex3.add(0.0);
      complex5.acos();
      complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.ONE.pow(0.0);
      Complex complex4 = complex3.ONE.add(0.0);
      Complex complex5 = complex2.INF.tan();
      complex5.ONE.abs();
      complex4.INF.getField();
      complex2.acos();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex3.ZERO.sin();
      Complex complex8 = Complex.valueOf(715.09);
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.INF.tanh();
      complex6.abs();
      complex2.getImaginary();
      complex4.isInfinite();
      Complex complex12 = complex10.ONE.sqrt1z();
      complex12.INF.multiply(496);
      complex10.log();
      complex8.INF.pow(complex6);
      complex1.hashCode();
      complex11.isNaN();
      complex11.subtract((-389.491398245));
      Complex complex13 = Complex.valueOf(1.0);
      complex13.I.conjugate();
      complex1.readResolve();
      complex9.subtract((-389.491398245));
      complex3.reciprocal();
      Complex complex14 = complex7.acos();
      complex6.negate();
      complex14.tan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.INF.divide(complex2);
      Complex.valueOf(0.0);
      complex3.cos();
      Complex complex4 = complex0.multiply(complex1);
      complex4.acos();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex3.INF.sqrt1z();
      complex0.readResolve();
      complex1.getReal();
      complex2.isNaN();
      Complex complex5 = complex2.INF.createComplex(0.0, 0.0);
      complex5.I.pow(0.0);
      complex2.INF.divide(complex3);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = Complex.valueOf((-1035.7774));
      Complex complex8 = complex7.NaN.conjugate();
      complex6.ONE.divide(4177.86081006369);
      Complex complex9 = complex0.negate();
      complex9.NaN.hashCode();
      complex2.nthRoot(37);
      complex9.createComplex(0.0, 37);
      Complex complex10 = complex4.sqrt1z();
      complex10.ZERO.abs();
      complex1.isNaN();
      complex0.readResolve();
      complex0.createComplex((-1035.7774), 0.0);
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.acos();
      int int0 = (-130);
      complex1.ZERO.divide(complex0);
      try { 
        complex0.nthRoot((-130));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -130
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.2936025225250634E-8));
      Complex complex1 = new Complex(1173.5043, 1173.5043);
      complex0.I.divide(complex1);
      complex1.ONE.reciprocal();
      complex1.tan();
      complex1.I.negate();
      int int0 = 0;
      try { 
        complex0.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.add(0.0);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.ZERO.negate();
      complex3.ZERO.acos();
      Complex complex4 = complex0.ONE.pow(144.8089932296);
      complex4.ZERO.divide(144.8089932296);
      Complex complex5 = complex2.I.pow(144.8089932296);
      complex5.INF.exp();
      complex1.ZERO.pow((-2061.9368162));
      Complex.valueOf((-2061.9368162), 144.8089932296);
      complex2.cos();
      Object object1 = new Object();
      complex0.equals(object1);
      complex1.divide(144.8089932296);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.sqrt1z();
      complex3.NaN.abs();
      Complex.valueOf((-1823.87392077));
      complex2.ZERO.conjugate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.exp();
      complex5.log();
      Complex complex6 = complex5.ONE.pow(1.0);
      complex6.NaN.tanh();
      complex5.ZERO.conjugate();
      Complex complex7 = complex5.I.multiply((-3285));
      complex7.NaN.cos();
      complex5.I.sinh();
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.add(Double.POSITIVE_INFINITY);
      complex8.ZERO.getField();
      Complex complex9 = Complex.valueOf(838.661337);
      Complex complex10 = complex7.asin();
      complex10.INF.tan();
      complex9.toString();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      Complex complex1 = complex0.tan();
      complex1.INF.conjugate();
      complex1.ZERO.subtract(complex0);
      complex1.getArgument();
      complex1.hashCode();
      Complex complex2 = complex1.divide(complex0);
      complex2.ZERO.toString();
      Complex complex3 = complex2.INF.add(Double.NaN);
      complex0.I.cos();
      complex2.asin();
      try { 
        complex3.nthRoot((-4634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,634
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      complex0.isInfinite();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex4.INF.negate();
      complex0.getImaginary();
      Complex complex6 = complex2.cosh();
      complex0.log();
      Complex complex7 = complex2.asin();
      complex5.ZERO.divide(0.0);
      complex7.ONE.createComplex(0.0, (-5289.0));
      Complex complex8 = complex2.cosh();
      complex8.cosh();
      Complex complex9 = complex4.divide(complex5);
      complex9.NaN.sqrt();
      complex9.hashCode();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.10467669367790222, 0.10467669367790222);
      double double0 = 0.0;
      complex0.I.getField();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.I.tan();
      complex3.I.cosh();
      complex0.isNaN();
      Complex complex4 = complex1.ZERO.add(complex2);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.I.cosh();
      complex5.getReal();
      complex6.toString();
      Complex complex7 = complex4.add(0.10467669367790222);
      int int0 = (-1);
      try { 
        complex7.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.exp();
      complex2.ZERO.hashCode();
      Complex complex3 = complex1.INF.tan();
      complex3.I.hashCode();
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = complex4.INF.subtract(1.1702606678009033);
      complex1.ONE.hashCode();
      Complex complex6 = complex0.cosh();
      complex6.negate();
      complex0.ONE.sin();
      Complex complex7 = complex1.subtract((-1477.4978026));
      complex7.toString();
      Complex.valueOf((-1477.4978026));
      Complex complex8 = Complex.valueOf((-1477.4978026));
      Complex complex9 = complex8.INF.pow(3674.364163941274);
      complex1.ONE.atan();
      complex0.reciprocal();
      complex1.getField();
      Complex complex10 = complex6.tanh();
      complex10.INF.hashCode();
      Complex complex11 = complex7.I.atan();
      complex11.ZERO.multiply((-634));
      Complex complex12 = Complex.valueOf(0.0);
      complex12.I.tan();
      complex7.nthRoot(1073);
      complex5.reciprocal();
      complex8.createComplex((-2074.913069053997), 3674.364163941274);
      complex9.getField();
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide((-1.0));
      Complex complex2 = complex1.ZERO.divide((-1.0));
      Complex complex3 = complex1.ZERO.tanh();
      complex3.ONE.acos();
      complex0.asin();
      complex1.ONE.divide((-1.0));
      complex0.asin();
      complex0.createComplex(1.820141955326842E-7, 1.820141955326842E-7);
      Complex.valueOf(Double.NaN, 2352.0855953015916);
      complex2.multiply(998);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sinh();
      complex0.multiply(51.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.subtract((-2661.6368));
      Complex complex4 = complex1.ONE.sqrt1z();
      Complex complex5 = complex4.NaN.atan();
      complex3.INF.hashCode();
      complex5.INF.multiply(complex0);
      Complex complex6 = complex0.divide((-447.6902775429));
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex1.multiply(complex0);
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex10.ZERO.asin();
      complex3.cosh();
      Complex complex12 = Complex.valueOf((-2661.6368), (-447.6902775429));
      complex8.isInfinite();
      Complex complex13 = complex5.ZERO.multiply(1);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      double double0 = complex11.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex14 = complex12.ONE.subtract(1534.072451002963);
      assertEquals((-1533.072451002963), complex14.getReal(), 0.01);
      
      Complex complex15 = complex6.negate();
      complex15.hashCode();
      complex5.atan();
      complex8.getReal();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      complex12.hashCode();
      complex2.INF.sqrt1z();
      Complex complex16 = complex4.sin();
      double double1 = complex10.getArgument();
      assertEquals(Double.NEGATIVE_INFINITY, complex10.getImaginary(), 0.01);
      
      double double2 = complex3.abs();
      assertEquals(double2, double1, 0.01);
      
      Complex complex17 = Complex.valueOf(37.3619778, 0.0);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      
      complex16.isNaN();
      complex9.subtract(complex16);
      assertFalse(complex16.equals((Object)complex8));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-1286.297473), 3436.09328018);
      complex0.I.getArgument();
      complex0.ZERO.getField();
      Complex complex1 = complex0.I.negate();
      complex0.getImaginary();
      Complex complex2 = complex1.asin();
      assertEquals((-0.8813735870195429), complex2.getImaginary(), 0.01);
      
      complex1.log();
      complex0.isNaN();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.I.pow(complex4);
      double double0 = complex1.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex6 = complex1.tanh();
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertEquals((-1.557407724654902), complex6.getImaginary(), 0.01);
      
      complex4.getArgument();
      Complex complex7 = complex3.sin();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.multiply(complex8);
      assertSame(complex9, complex5);
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1825.98);
      Complex complex1 = complex0.I.sin();
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1825.98, double0, 0.01);
      
      Complex complex2 = complex0.I.reciprocal();
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      complex0.isInfinite();
      Complex complex3 = complex0.sinh();
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(166.828);
      Complex complex2 = complex1.I.add(complex0);
      assertTrue(complex2.isInfinite());
      
      Complex complex3 = Complex.valueOf(166.828);
      complex0.getImaginary();
      Complex complex4 = complex0.cos();
      complex4.ONE.getArgument();
      Complex complex5 = complex4.log();
      assertTrue(complex0.equals((Object)complex2));
      assertNotSame(complex5, complex4);
      assertTrue(complex5.isNaN());
      
      boolean boolean0 = complex3.isNaN();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(166.828, complex3.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.INF.multiply((-1134.42151));
      Complex complex3 = complex0.divide((-1134.42151));
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.ONE.divide(complex1);
      Complex.valueOf((-1525.76818945));
      complex0.ONE.cos();
      Complex complex6 = complex2.multiply(complex4);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.INF.add((-1134.42151));
      Complex complex9 = complex6.I.multiply(complex7);
      assertEquals(1.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex10.ONE.sqrt1z();
      assertTrue(complex10.equals((Object)complex5));
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      double double0 = complex3.getArgument();
      assertEquals((-3.141592653589793), double0, 0.01);
      
      Complex complex12 = Complex.valueOf(1896.74654704);
      assertFalse(complex12.isInfinite());
      
      complex8.getField();
      assertTrue(complex8.equals((Object)complex6));
      assertTrue(complex8.isInfinite());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(404.3034915044, 404.3034915044);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.I.cos();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      Complex complex3 = complex0.pow(404.3034915044);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertTrue(complex3.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.divide((-2933.6));
      Complex complex2 = complex1.I.asin();
      assertEquals(0.8813735870195428, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      
      Complex complex3 = complex0.subtract(825.8136933);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.sqrt();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.equals((Object)complex3));
  }
}
