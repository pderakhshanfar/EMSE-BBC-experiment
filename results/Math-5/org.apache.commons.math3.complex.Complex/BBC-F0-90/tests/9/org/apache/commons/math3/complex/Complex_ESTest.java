/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:38:54 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = complex0.reciprocal();
      complex1.sinh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.log();
      complex4.getField();
      complex2.pow(complex5);
      Complex complex6 = complex5.tan();
      complex6.INF.abs();
      Complex complex7 = complex2.multiply(complex3);
      complex7.tanh();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex0.acos();
      Complex complex10 = Complex.valueOf((-3081.29579146169));
      complex10.nthRoot(25);
      complex1.tanh();
      complex9.conjugate();
      complex9.tan();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(3.4674011002723395, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex(20.0, 3291.5898);
      complex1.divide(complex2);
      Complex complex3 = Complex.ONE;
      int int0 = (-2282);
      try { 
        complex3.nthRoot((-2282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,282
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      complex2.multiply(1);
      complex1.tanh();
      complex2.multiply((double) 1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.ZERO.getArgument();
      complex1.NaN.cosh();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.3418021646459346E167);
      Complex complex1 = complex0.createComplex(4.3418021646459346E167, 4.3418021646459346E167);
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.ZERO.add(complex0);
      Complex complex3 = complex2.I.pow(complex0);
      complex3.ONE.sqrt1z();
      Complex.valueOf(4.3418021646459346E167);
      Complex complex4 = complex1.sin();
      complex1.NaN.abs();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.INF.conjugate();
      complex0.createComplex(4.3418021646459346E167, 1832.2614);
      Complex.valueOf(4.3418021646459346E167, 0.5827828645706177);
      Complex complex7 = Complex.valueOf(1832.2614);
      Complex complex8 = complex7.INF.conjugate();
      complex0.readResolve();
      complex5.negate();
      Complex complex9 = complex1.subtract(1832.2614);
      complex7.ONE.subtract(complex6);
      complex9.NaN.abs();
      complex4.exp();
      complex8.readResolve();
      complex0.acos();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      complex1.I.getArgument();
      Complex complex2 = new Complex((-242.845332), (-20.0));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      complex0.pow(complex1);
      try { 
        complex1.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex0.ZERO.getField();
      complex2.ZERO.asin();
      complex2.reciprocal();
      Complex complex3 = complex2.log();
      complex3.subtract(complex1);
      Complex.valueOf(Double.NaN, 1.0);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 2.080388582861883E205);
      complex0.abs();
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.INF.hashCode();
      complex1.nthRoot(2793);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-3431.3519));
      Complex complex1 = complex0.negate();
      complex1.toString();
      complex0.pow(complex1);
      Complex complex2 = complex0.asin();
      complex2.asin();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.multiply(1309.5524);
      complex0.subtract(complex4);
      Complex complex5 = Complex.valueOf(1309.5524, 0.03925827145576477);
      complex1.NaN.toString();
      complex5.log();
      complex2.tanh();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.ZERO.sinh();
      complex0.divide(complex0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.INF.cosh();
      complex0.nthRoot(2793);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.pow(4456.308837252);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(15.784009199171193);
      complex0.INF.readResolve();
      Complex complex1 = complex0.divide(15.784009199171193);
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.sqrt();
      Complex complex3 = complex2.pow((-2878.9011));
      Complex complex4 = complex3.cosh();
      complex0.nthRoot(252);
      Complex complex5 = complex1.atan();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.subtract((-9.868269632073771E-8));
      complex7.atan();
      complex4.INF.getArgument();
      Complex complex8 = complex2.NaN.sqrt1z();
      complex8.ONE.subtract(complex3);
      Complex complex9 = complex3.createComplex(15.784009199171193, (-1339.86241));
      complex0.reciprocal();
      Complex complex10 = complex5.pow(complex3);
      complex10.hashCode();
      complex1.pow((-9.868269632073771E-8));
      complex2.sqrt1z();
      complex4.add(0.9567860817362277);
      complex0.readResolve();
      complex1.getField();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, 15.784009199171193);
      complex0.NaN.abs();
      complex0.abs();
      Complex complex1 = new Complex(Double.NaN);
      complex0.multiply(complex1);
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-2861.5745520741), 0.5472630262374878);
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.sinh();
      complex3.divide(complex1);
      Complex complex4 = Complex.NaN;
      complex2.cos();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = (Complex)complex0.I.readResolve();
      Complex complex2 = (Complex)complex0.readResolve();
      complex2.toString();
      Complex complex3 = complex1.conjugate();
      complex3.NaN.cosh();
      complex3.nthRoot(37);
      complex3.pow(3029.939);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0267509648109748E-7);
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-466.1851378408061));
      Complex complex1 = complex0.multiply(20.0);
      Complex.valueOf((-1307.749), Double.NaN);
      complex0.log();
      complex0.tanh();
      Complex complex2 = complex0.asin();
      complex1.cos();
      Complex complex3 = complex2.tan();
      complex3.divide(20.0);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, (-5.533523366931846E-8));
      complex0.NaN.abs();
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      complex1.cosh();
      complex1.createComplex(1.778528517418201E-68, Double.NaN);
      Complex complex2 = Complex.INF;
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, (-5.533523366931846E-8));
      complex0.NaN.abs();
      complex0.abs();
      Complex complex1 = complex0.multiply(1.778528517418201E-68);
      Complex complex2 = complex0.log();
      complex2.ZERO.tanh();
      complex1.asin();
      Complex complex3 = Complex.ONE;
      complex3.tan();
      complex3.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.9731739067444943E32, 2.9731739067444943E32);
      Complex complex1 = complex0.reciprocal();
      complex1.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.acos();
      Complex complex5 = complex2.conjugate();
      complex4.readResolve();
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex2.negate();
      Complex complex9 = Complex.valueOf(2.9731739067444943E32, 0.0);
      Complex complex10 = complex9.multiply(complex8);
      complex10.multiply(complex1);
      Complex complex11 = complex7.subtract(1.5707963267948966);
      complex7.cos();
      complex2.tan();
      complex3.multiply(complex11);
      complex4.pow(complex8);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.exp();
      int int0 = 37;
      int int1 = 111407661;
      // Undeclared exception!
      complex2.nthRoot(111407661);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1586.1655, Double.NaN);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.NaN;
      complex3.getField();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = Complex.NaN;
      complex2.cos();
      Complex complex6 = complex3.subtract(complex4);
      Complex complex7 = complex2.divide(0.41421356237309515);
      complex0.cosh();
      complex7.createComplex(46.25155474051016, (-15.0));
      Complex complex8 = complex2.tan();
      Complex.valueOf((-15.0));
      complex8.equals(complex6);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, (-5.533523366931846E-8));
      complex0.NaN.abs();
      complex0.INF.asin();
      complex0.exp();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, (-5.533523366931846E-8));
      complex0.NaN.abs();
      complex0.exp();
      complex0.add((-4.1291070428848755E-76));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1864.5317911190557);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.INF.tanh();
      complex2.NaN.multiply(1864.5317911190557);
      Complex complex3 = complex0.ZERO.divide(1864.5317911190557);
      Complex complex4 = complex0.I.tan();
      complex3.I.readResolve();
      complex0.divide(1864.5317911190557);
      Complex complex5 = Complex.valueOf(1360.9603735199, 1360.9603735199);
      Complex complex6 = complex5.NaN.subtract(complex0);
      complex6.ZERO.add(complex1);
      complex0.sin();
      complex4.getField();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-3431.3519));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.subtract((-3431.3519));
      Complex complex3 = complex1.I.sqrt();
      complex1.NaN.tan();
      Complex complex4 = complex1.ONE.exp();
      complex1.toString();
      Complex complex5 = complex3.divide((-3431.3519));
      complex5.ONE.cosh();
      complex0.getField();
      complex0.getImaginary();
      Complex complex6 = complex2.sqrt();
      complex6.sqrt1z();
      Object object0 = new Object();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, (-5.533523366931846E-8));
      complex0.NaN.abs();
      complex0.exp();
      complex0.nthRoot(37);
      complex0.multiply(Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.asin();
      complex2.cos();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(823.5784456326855);
      Complex complex2 = complex0.reciprocal();
      complex0.getReal();
      complex0.getField();
      complex2.equals(complex0);
      complex1.NaN.createComplex(1.0, 1.0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.NaN;
      complex1.divide(complex0);
      Complex complex5 = (Complex)complex4.readResolve();
      Complex complex6 = Complex.ZERO;
      complex1.reciprocal();
      Complex complex7 = Complex.valueOf(1.0);
      complex5.getArgument();
      Complex.valueOf(Double.NaN);
      complex3.cos();
      complex3.getReal();
      complex2.abs();
      complex7.getField();
      complex1.hashCode();
      Complex complex8 = Complex.I;
      complex8.multiply(complex4);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.pow(2299.2);
      Complex complex2 = complex0.reciprocal();
      complex0.getReal();
      complex1.getField();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex3 = complex2.createComplex(0.0, 20.0);
      Complex complex4 = complex1.tanh();
      complex2.divide(complex4);
      complex4.createComplex(2757.1317928305, (-780.4344469402845));
      Complex complex5 = complex3.tan();
      Complex.valueOf((-780.4344469402845));
      complex5.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2861.5745520741));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ZERO.sinh();
      complex0.I.getField();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex1.I.multiply(37);
      Complex complex5 = complex4.ONE.multiply(37);
      complex0.cos();
      complex1.I.subtract(complex3);
      Complex complex6 = complex1.divide(Double.POSITIVE_INFINITY);
      complex4.ONE.multiply(complex2);
      Complex complex7 = complex6.INF.cosh();
      complex7.ONE.tan();
      Complex complex8 = complex1.negate();
      complex8.divide(complex6);
      complex0.isInfinite();
      complex5.abs();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(364.683995983756);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.subtract((-2763500.9940091423));
      Complex complex4 = Complex.ZERO;
      complex4.toString();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = new Complex(0.5887627601623535);
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.ONE;
      complex2.I.subtract(1.0);
      complex8.asin();
      complex3.multiply((-805.3679933));
      Complex complex9 = complex5.log();
      Complex complex10 = complex9.INF.multiply(complex1);
      Complex complex11 = Complex.valueOf(1.2457361221313477);
      complex11.tanh();
      complex3.asin();
      Complex complex12 = complex7.cos();
      complex12.ONE.conjugate();
      complex2.tan();
      complex10.createComplex((-2286.210098), 1.2457361221313477);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2408.304340306336));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.valueOf((-2408.304340306336));
      complex0.getArgument();
      Complex.valueOf(1666.718508);
      Complex complex3 = complex2.cos();
      complex3.getReal();
      complex1.abs();
      Complex complex4 = Complex.INF;
      complex0.getField();
      complex0.hashCode();
      complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, (-5.533523366931846E-8));
      complex0.NaN.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.INF.reciprocal();
      complex2.NaN.toString();
      Complex complex3 = Complex.ONE;
      complex3.tan();
      Complex complex4 = complex0.exp();
      complex4.toString();
      complex3.divide((-21.480158383));
      complex2.cosh();
      complex3.subtract(0.0);
      complex3.getField();
      complex1.getImaginary();
      complex1.sqrt();
      Complex complex5 = Complex.valueOf(9.261937193267689E-4);
      complex5.getReal();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(823.5784456326855);
      Complex complex2 = complex0.reciprocal();
      complex0.getReal();
      complex0.getField();
      complex2.equals(complex0);
      Complex complex3 = complex1.NaN.createComplex(0.0, 0.0);
      complex0.divide(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.divide(complex0);
      complex4.readResolve();
      Complex complex6 = Complex.ZERO;
      complex6.reciprocal();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.getArgument();
      complex4.sin();
      Complex complex8 = complex3.tanh();
      complex2.hashCode();
      Complex complex9 = Complex.ZERO;
      complex9.getImaginary();
      complex5.divide((-549.3464983822921));
      complex8.atan();
      Complex complex10 = Complex.valueOf((-3059.216046));
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2861.5745520741));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ZERO.sinh();
      complex0.I.getField();
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.sqrt();
      complex2.tan();
      Complex complex5 = complex0.exp();
      complex5.toString();
      Complex complex6 = complex5.divide(6.283185307179586);
      complex6.cosh();
      complex0.subtract(1.3790154522394582E-163);
      complex1.getField();
      complex4.getImaginary();
      Complex complex7 = complex3.sqrt();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(921.45923, Double.POSITIVE_INFINITY);
      complex0.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.reciprocal();
      complex2.toString();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.cosh();
      Complex complex6 = Complex.valueOf((-2.6993478083348727E-303));
      complex4.getArgument();
      Complex complex7 = complex5.sinh();
      complex4.add((-3071.1206794315));
      Complex complex8 = complex0.pow(complex4);
      complex6.cos();
      complex1.getField();
      complex8.hashCode();
      complex8.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(5.771457643937893E237, (-5.533523366931846E-8));
      Complex complex1 = new Complex((-2861.5745520741), 1.778528517418201E-68);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.sinh();
      complex0.getField();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex2.multiply(37);
      Complex complex6 = complex5.multiply(37);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex5.subtract(complex1);
      complex3.divide(1.880582039589629E-283);
      complex2.multiply(complex7);
      complex4.cosh();
      Complex complex9 = complex1.tan();
      complex5.negate();
      Complex complex10 = new Complex((-1387.347773857), (-2861.5745520741));
      complex9.INF.multiply((-1387.347773857));
      complex10.divide(complex8);
      complex4.isNaN();
      complex4.abs();
      complex9.isInfinite();
      complex5.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = new Complex((-475.131), (-475.131));
      complex0.abs();
      complex0.exp();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.reciprocal();
      complex3.toString();
      complex1.exp();
      Complex complex4 = complex0.createComplex(1909.159020849, 1.9867963790893555);
      complex4.cosh();
      Complex.valueOf(1.9867963790893555);
      Complex complex5 = new Complex((-475.131), 1.7785285174182037E-68);
      complex5.ONE.conjugate();
      complex5.getArgument();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex6.add((-2167.1298056));
      complex2.pow(complex7);
      Complex complex9 = complex2.cos();
      complex6.getField();
      complex8.hashCode();
      Complex complex10 = new Complex(0.0);
      complex10.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.pow(3246.19455);
      Complex complex2 = complex1.sinh();
      complex0.hashCode();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.ONE;
      complex3.tan();
      complex4.acos();
      Complex complex5 = complex3.conjugate();
      complex1.readResolve();
      Complex complex6 = complex2.pow(complex3);
      Complex complex7 = complex2.negate();
      complex6.negate();
      complex4.multiply(complex5);
      Complex complex8 = Complex.I;
      complex8.getImaginary();
      complex1.sqrt();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, (-5.533523366931846E-8));
      complex0.NaN.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = new Complex(2.0, 629.4822276);
      complex3.nthRoot(1217);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.cos();
      complex4.sqrt();
      Complex complex6 = complex4.multiply((-1));
      Complex.valueOf((-5.533523366931846E-8));
      complex2.isNaN();
      complex2.sin();
      complex6.tanh();
      complex4.getImaginary();
      complex6.divide(629.4822276);
      complex5.atan();
      complex4.nthRoot(1217);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add((-1174.813));
      complex0.getField();
      Complex complex2 = complex1.divide((-1174.813));
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex1.I.sinh();
      complex3.reciprocal();
      complex4.toString();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.createComplex((-314.70420914), (-6862.703654284835));
      complex0.cosh();
      Complex complex7 = Complex.valueOf((-1174.813));
      complex1.getArgument();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex4.add(2.0);
      complex8.pow(complex6);
      Complex complex10 = complex4.cos();
      complex10.getField();
      complex3.hashCode();
      complex1.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex1.sinh();
      complex2.hashCode();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = Complex.ONE;
      complex4.ONE.tan();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex4.sin();
      complex0.cos();
      complex3.sqrt();
      Complex complex7 = complex5.multiply(1163);
      complex0.isNaN();
      complex7.sin();
      complex6.tanh();
      complex0.hashCode();
      complex3.getImaginary();
      Complex complex8 = complex1.divide((-1.0));
      complex5.atan();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-701.668555), (-701.668555));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex2.I.conjugate();
      complex2.INF.nthRoot(1073741824);
      complex2.NaN.getArgument();
      complex1.toString();
      complex0.multiply((-701.668555));
      complex1.acos();
      complex0.conjugate();
      complex1.multiply(18);
      complex0.multiply(76.56962418829184);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(2948.7903742463);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex2.asin();
      complex4.ZERO.pow(complex2);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex2.ONE.cosh();
      Complex complex7 = Complex.valueOf(2948.7903742463);
      complex5.asin();
      complex0.nthRoot(37);
      Complex complex8 = complex5.NaN.createComplex(2948.7903742463, 1868.64035731441);
      complex5.ZERO.cosh();
      complex5.getField();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex1.exp();
      complex2.getReal();
      Complex complex11 = complex5.subtract(complex6);
      complex10.pow(complex3);
      complex11.ZERO.negate();
      complex10.multiply(19);
      complex1.isInfinite();
      Complex complex12 = complex0.multiply(complex2);
      complex12.ZERO.atan();
      complex11.sinh();
      complex7.sqrt();
      complex0.readResolve();
      complex9.exp();
      Complex complex13 = complex8.multiply(complex3);
      complex13.multiply(2657.279776416);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      complex0.getReal();
      Complex complex1 = Complex.valueOf(1394.9, (double) 1);
      Complex complex2 = Complex.valueOf(1394.9, (double) 1);
      complex1.ONE.log();
      Complex complex3 = complex0.tan();
      complex3.INF.readResolve();
      Complex complex4 = complex0.exp();
      complex0.toString();
      Complex.valueOf(0.0, (double) 1);
      Complex complex5 = complex4.cosh();
      complex2.subtract(0.0);
      complex4.getField();
      complex4.getImaginary();
      complex0.sqrt();
      complex1.getReal();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-3431.3519));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.exp();
      complex0.ZERO.subtract((-3431.3519));
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex0.tanh();
      Complex complex7 = new Complex((-3431.3519));
      complex7.getField();
      complex2.getField();
      Complex complex8 = Complex.I;
      complex8.subtract(complex2);
      complex7.getArgument();
      complex5.nthRoot(290);
      complex2.ONE.toString();
      Complex complex9 = complex6.acos();
      complex9.sqrt1z();
      Complex complex10 = complex3.acos();
      Complex complex11 = new Complex(2.0);
      complex11.isInfinite();
      complex10.tan();
      Complex complex12 = Complex.valueOf((-20.0), 2.0);
      complex12.tan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2.0, 1094.877);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex2.I.sqrt();
      Complex complex4 = complex0.ONE.divide(complex1);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.multiply(complex4);
      Complex complex7 = complex6.NaN.conjugate();
      Complex.valueOf((-1.2277120342804144E295));
      Complex complex8 = complex7.NaN.createComplex(0.0, 0.0);
      complex8.INF.getField();
      Complex complex9 = complex5.subtract(0.0);
      complex9.ZERO.sinh();
      Complex complex10 = complex7.asin();
      complex10.ZERO.add(complex4);
      complex6.ZERO.reciprocal();
      complex4.isNaN();
      complex3.tan();
      Complex complex11 = Complex.valueOf(2.0);
      Object object0 = new Object();
      complex11.equals(object0);
      complex3.add(complex10);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(2281.39846);
      complex0.I.getArgument();
      Complex complex1 = complex0.INF.multiply(3193.234);
      complex0.NaN.toString();
      Complex complex2 = complex0.ONE.acos();
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex0.add(0.0);
      complex3.ONE.hashCode();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.I.createComplex(0.0, 1433.286649609824);
      complex3.ZERO.pow(1.5707963267948966);
      complex4.exp();
      Complex complex6 = complex4.sqrt1z();
      complex3.subtract((-1768.377365868));
      complex4.ONE.add((-1265.7087515234));
      Complex complex7 = complex3.pow(0.0);
      Complex complex8 = complex6.ZERO.atan();
      complex7.add((-1265.7087515234));
      complex8.createComplex((-3842.4107554219), 2281.39846);
      Complex complex9 = complex1.tan();
      Complex.valueOf((-806.254));
      complex6.equals((Object) null);
      complex5.add(complex9);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, (-5.533523366931846E-8));
      complex0.NaN.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex(Double.NaN, Double.NaN);
      Complex complex3 = complex0.INF.reciprocal();
      complex3.NaN.toString();
      Complex complex4 = complex3.I.exp();
      Complex.valueOf(1.778528517418201E-68);
      complex0.INF.getArgument();
      Complex complex5 = complex1.ONE.sinh();
      complex5.I.add(0.0);
      complex0.pow(complex1);
      Complex complex6 = complex1.cos();
      complex6.add(36.0);
      complex2.getField();
      complex1.hashCode();
      complex3.multiply(complex2);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(2281.39846);
      Complex complex1 = complex0.ONE.asin();
      complex1.I.getArgument();
      Complex complex2 = complex0.INF.multiply(3193.234);
      complex0.NaN.toString();
      Complex complex3 = Complex.valueOf(7.929779522970144, 7.929779522970144);
      Complex complex4 = complex2.multiply(complex3);
      complex4.log();
      Complex complex5 = Complex.ONE;
      complex5.acos();
      complex4.reciprocal();
      complex0.tanh();
      complex0.getField();
      complex2.getField();
      Complex complex6 = complex3.subtract(complex4);
      Complex complex7 = Complex.valueOf(4379.508);
      complex7.getArgument();
      try { 
        complex6.nthRoot((-1073741824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,073,741,824
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add((-1174.813));
      complex0.getField();
      complex1.divide((-1174.813));
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex3.NaN.pow(complex1);
      complex0.ONE.nthRoot(1217);
      complex2.ZERO.sin();
      Complex complex5 = complex0.cos();
      complex5.sqrt();
      complex1.INF.multiply(1217);
      complex1.isNaN();
      Complex.valueOf((-1174.813));
      Complex complex6 = complex4.negate();
      Complex complex7 = Complex.NaN;
      complex7.multiply(complex5);
      Complex complex8 = Complex.valueOf((-0.7615941559557649));
      complex8.multiply(complex1);
      complex7.subtract(0.43812888860702515);
      complex7.cos();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-3431.3519), (-3431.3519));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.exp();
      complex0.ZERO.subtract((-3431.3519));
      Complex complex3 = complex2.I.sqrt();
      complex2.NaN.tan();
      complex2.ONE.exp();
      complex2.toString();
      Complex complex4 = complex3.divide((-3431.3519));
      complex4.ONE.cosh();
      Complex complex5 = complex1.subtract((-3431.3519));
      complex1.getField();
      complex4.subtract((-3285.48));
      complex0.cos();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add((-1174.813));
      complex0.getField();
      Complex complex2 = complex1.divide((-1174.813));
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex4.NaN.pow(complex1);
      complex0.ONE.nthRoot(1217);
      Complex complex6 = complex3.ZERO.sin();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex5.add((double) 1217);
      complex8.pow(9.92958982547828E-153);
      Complex complex9 = complex1.atan();
      complex3.add((-1.0088898215431471E52));
      complex4.readResolve();
      complex9.reciprocal();
      complex7.getArgument();
      Complex.valueOf((-1.778528517418201E-68));
      complex2.asin();
      Complex complex10 = complex7.cos();
      complex6.getReal();
      complex10.abs();
      Complex complex11 = complex9.sqrt1z();
      Complex complex12 = Complex.INF;
      complex12.subtract(complex3);
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(2281.39846);
      Complex complex1 = complex0.ONE.asin();
      complex1.I.getArgument();
      Complex complex2 = complex0.INF.multiply(3193.234);
      complex2.toString();
      Complex complex3 = complex1.ONE.acos();
      complex3.ZERO.divide(complex0);
      Complex complex4 = complex0.add(0.0);
      complex4.ONE.hashCode();
      Complex complex5 = complex4.sin();
      complex5.I.createComplex(0.0, 1433.286649609824);
      Complex complex6 = complex4.ZERO.pow(1.5707963267948966);
      Complex complex7 = complex5.exp();
      complex5.sqrt1z();
      complex4.subtract((-1768.377365868));
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex6.sin();
      complex9.tanh();
      complex0.hashCode();
      complex2.getImaginary();
      Complex complex10 = Complex.INF;
      complex10.divide(559.8904925536449);
      complex4.atan();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, (-5.533523366931846E-8));
      complex0.NaN.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.INF.reciprocal();
      complex3.NaN.toString();
      complex3.I.exp();
      complex2.NaN.createComplex(0.0, 0.0);
      Complex.valueOf(1.778528517418201E-68);
      Complex complex4 = complex3.createComplex(2636.0, 20.0);
      complex1.tan();
      Complex complex5 = Complex.valueOf((-1.5529608026276525E-8));
      complex4.equals(complex3);
      complex5.add(complex1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2290570545894685E191, (-1.1302647617762544E-8));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.multiply((-3104));
      complex2.ZERO.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.acos();
      complex4.ONE.abs();
      complex2.equals(complex3);
      complex1.ONE.abs();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex3.subtract(0.0);
      complex6.I.abs();
      complex1.isNaN();
      complex3.I.atan();
      complex0.log();
      complex1.ZERO.multiply((-1.1302647617762544E-8));
      Complex complex7 = complex2.multiply((-3104));
      Complex complex8 = complex7.I.acos();
      complex1.INF.pow(complex7);
      complex3.negate();
      Complex complex9 = complex5.divide(1.0);
      complex9.ZERO.pow(complex1);
      complex5.readResolve();
      complex9.conjugate();
      Complex complex10 = complex8.log();
      complex10.negate();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-2382.362851361078));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add((-1174.813));
      complex0.getField();
      complex1.divide((-1174.813));
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex3.NaN.pow(complex1);
      complex0.ONE.nthRoot(1217);
      Complex complex5 = complex2.ZERO.sin();
      Complex complex6 = complex0.cos();
      complex6.sqrt();
      complex1.INF.multiply(1217);
      complex1.isNaN();
      complex2.sin();
      Complex complex7 = complex2.tanh();
      complex7.hashCode();
      complex5.getImaginary();
      complex4.divide((-1174.813));
      complex2.atan();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(0.0, 1.042139023692827E22);
      Complex complex2 = complex0.I.atan();
      complex2.ONE.abs();
      complex2.ONE.sqrt1z();
      Complex complex3 = Complex.I;
      complex0.NaN.add(complex3);
      complex3.ONE.hashCode();
      complex3.createComplex(3310.50408254109, 1333.3772787282);
      Complex complex4 = Complex.valueOf(1.042139023692827E22);
      complex0.equals(complex3);
      complex1.getArgument();
      Complex complex5 = complex1.sin();
      complex5.INF.divide(0.0);
      Complex.valueOf(1.5707963267948966, 3690.0203726614764);
      complex1.hashCode();
      Complex complex6 = complex4.negate();
      complex6.INF.subtract(3310.50408254109);
      Complex.valueOf(1.042139023692827E22);
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex6.tanh();
      complex8.ZERO.add(0.0);
      complex7.subtract(0.0);
      Complex.valueOf((-1069.2), 1.042139023692827E22);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(2281.39846);
      Complex complex1 = complex0.ONE.asin();
      complex1.I.getArgument();
      complex0.INF.multiply(3193.234);
      complex0.NaN.toString();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex0.add(0.0);
      complex4.ONE.hashCode();
      Complex complex5 = complex4.sin();
      complex5.I.createComplex(0.0, 1433.286649609824);
      complex4.ZERO.pow(1.5707963267948966);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.sqrt1z();
      complex4.subtract((-1768.377365868));
      complex5.ONE.add((-1265.7087515234));
      Complex complex8 = complex4.pow(0.0);
      Complex complex9 = complex7.ZERO.atan();
      Complex complex10 = complex8.add((-1265.7087515234));
      complex10.ONE.readResolve();
      complex7.reciprocal();
      complex2.getArgument();
      Complex.valueOf(6.283185307179586);
      complex3.asin();
      complex3.cos();
      complex6.getReal();
      complex1.abs();
      complex9.sqrt1z();
      complex0.subtract(complex9);
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.NaN.subtract(Double.POSITIVE_INFINITY);
      complex5.INF.getArgument();
      Complex complex6 = complex3.sqrt();
      complex6.INF.negate();
      Complex complex7 = complex1.INF.acos();
      complex7.ONE.getArgument();
      Complex complex8 = complex0.exp();
      complex3.ONE.nthRoot(1205);
      Complex complex9 = complex8.I.log();
      Complex complex10 = complex2.ZERO.asin();
      complex9.ONE.sqrt();
      complex3.equals(complex1);
      Complex complex11 = complex8.ZERO.sqrt1z();
      complex11.ONE.sqrt();
      complex11.INF.createComplex(1205, 0.0);
      complex11.NaN.tan();
      complex11.INF.atan();
      Complex complex12 = complex2.cos();
      complex12.NaN.reciprocal();
      Complex complex13 = complex8.log();
      complex0.subtract(complex13);
      complex7.negate();
      Complex complex14 = complex10.multiply(1760.21925976);
      complex2.asin();
      Complex complex15 = Complex.NaN;
      complex14.INF.divide(complex15);
      complex2.nthRoot(1205);
      complex0.getReal();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      Complex complex1 = Complex.valueOf((-1389.40577661838));
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex4.NaN.acos();
      complex5.I.conjugate();
      complex0.I.cosh();
      complex1.getField();
      complex0.multiply(complex1);
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex6.pow(0.0);
      Complex complex8 = complex6.NaN.log();
      complex8.multiply(202.356442281);
      Complex complex9 = complex7.ONE.cosh();
      complex7.createComplex(444.4802672021776, 0.0);
      Complex.valueOf(0.0, (-1389.40577661838));
      complex1.multiply(1);
      Complex.valueOf(1.378904104232788);
      Complex complex10 = complex9.atan();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.tan();
      complex2.ONE.atan();
      complex3.NaN.divide(complex1);
      complex1.ZERO.tan();
      Complex complex4 = complex0.I.negate();
      complex4.INF.multiply(2254.67616);
      try { 
        complex3.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.INF.negate();
      double double0 = 0.0;
      complex2.ZERO.multiply(0.0);
      complex1.ZERO.asin();
      Complex complex3 = complex0.subtract(1265.578870539575);
      complex0.isInfinite();
      Complex.valueOf(0.0, 0.0);
      complex0.log();
      Complex complex4 = complex3.add(0.0);
      Complex complex5 = complex4.ZERO.pow(20.0);
      complex5.abs();
      Complex complex6 = complex3.cosh();
      Complex complex7 = Complex.valueOf(0.0);
      complex6.INF.acos();
      complex7.NaN.readResolve();
      complex7.I.cos();
      complex7.equals(complex6);
      try { 
        complex6.NaN.nthRoot((-380));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -380
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(1.0364355880696472E-7);
      complex1.ZERO.cos();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.I.add(1.0364355880696472E-7);
      complex1.log();
      complex3.multiply(0.0);
      complex2.hashCode();
      complex4.createComplex((-1568.805623), (-1568.805623));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(1305);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.sqrt1z();
      complex2.NaN.multiply(complex0);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.ZERO.negate();
      complex4.ONE.multiply(120.0404816607);
      Complex complex5 = Complex.valueOf(1.0);
      complex1.NaN.negate();
      complex1.I.pow(0.0);
      Complex complex6 = complex0.I.sqrt();
      complex1.reciprocal();
      Complex complex7 = complex0.sqrt();
      complex7.nthRoot(1727);
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.multiply(1727);
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex5.atan();
      Complex complex12 = complex11.ZERO.add(complex5);
      complex0.atan();
      complex7.ONE.sqrt1z();
      complex0.getImaginary();
      complex1.isInfinite();
      complex0.abs();
      Complex complex13 = complex7.negate();
      complex13.exp();
      complex11.isNaN();
      complex6.getReal();
      complex5.divide(0.0);
      complex10.getField();
      complex12.divide((-1.5529608026276525E-8));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.exp();
      complex0.toString();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.INF.pow(0.0);
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex2.acos();
      complex4.toString();
      Complex complex9 = complex8.tan();
      complex4.NaN.subtract(complex7);
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex10.divide(complex9);
      complex11.ONE.hashCode();
      Complex complex12 = complex9.pow(complex4);
      complex0.divide(complex12);
      complex1.divide(complex2);
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double double0 = (-382.7202226);
      Complex complex0 = Complex.valueOf((-382.7202226));
      complex0.exp();
      Complex complex1 = null;
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.975449484028966E-31);
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.getArgument();
      Complex complex2 = complex1.INF.sinh();
      complex2.I.tan();
      complex1.getArgument();
      complex0.getImaginary();
      complex1.I.toString();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.ONE.pow(complex1);
      complex6.ZERO.atan();
      Complex complex7 = complex3.divide(complex4);
      complex7.subtract(0.0);
      complex7.ONE.tan();
      Complex complex8 = complex7.createComplex((-1.0), 0.0);
      complex8.ONE.atan();
      Complex complex9 = complex1.multiply(0.0);
      Complex complex10 = complex9.tan();
      complex10.I.cosh();
      complex1.getReal();
      complex4.sin();
      complex3.abs();
      complex4.getImaginary();
      Complex complex11 = complex3.conjugate();
      complex8.abs();
      complex7.sin();
      complex4.hashCode();
      complex11.sin();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.ONE.sqrt1z();
      int int0 = 0;
      complex1.ZERO.divide((double) 0);
      try { 
        complex3.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-330.076657734861), 1.0);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.reciprocal();
      complex3.I.toString();
      complex2.I.sin();
      Complex complex4 = complex2.ONE.sin();
      Complex complex5 = complex1.ZERO.subtract(complex4);
      complex4.ONE.toString();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex0.ONE.tan();
      Complex complex8 = complex0.negate();
      complex1.hashCode();
      Complex complex9 = complex8.INF.atan();
      complex9.I.hashCode();
      Complex complex10 = complex9.ZERO.multiply(0);
      complex0.isNaN();
      complex0.I.divide(complex10);
      Complex complex11 = complex8.acos();
      complex8.divide(complex11);
      complex4.ZERO.multiply(0);
      Complex complex12 = Complex.valueOf((-330.076657734861), 0.0);
      complex2.equals(complex12);
      complex1.conjugate();
      complex6.sqrt();
      complex5.multiply(0.0);
      complex7.subtract(complex4);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2285.59031700565, (-20.0));
      Complex complex1 = complex0.ZERO.add((-20.0));
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex0.ZERO.subtract((-20.0));
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex4.I.divide((-648.772945210307));
      complex1.I.tanh();
      Complex complex7 = complex0.I.sin();
      complex7.ONE.createComplex(2285.59031700565, 1403.945656876545);
      complex7.INF.toString();
      complex2.NaN.tan();
      complex0.INF.toString();
      Complex complex8 = complex0.acos();
      complex8.multiply(2285.59031700565);
      complex0.sinh();
      complex3.sinh();
      complex1.readResolve();
      Complex complex9 = complex5.subtract(complex1);
      complex6.cosh();
      complex2.abs();
      complex5.divide((-20.0));
      complex9.equals(complex5);
      Complex.valueOf(0.0, 3626.1763);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex1.sinh();
      complex2.hashCode();
      complex0.I.reciprocal();
      Complex complex3 = complex0.NaN.acos();
      complex3.ONE.tan();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.conjugate();
      complex4.ONE.readResolve();
      complex4.ZERO.pow(complex3);
      Complex complex6 = complex5.I.negate();
      complex4.NaN.negate();
      Complex complex7 = complex5.ZERO.multiply(complex2);
      complex7.I.multiply(complex6);
      Complex complex8 = complex4.subtract(0.0);
      complex8.cos();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      complex0.getReal();
      Complex complex1 = Complex.valueOf(1394.9, (double) 1);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.ONE.log();
      complex2.INF.acos();
      Complex complex4 = complex2.INF.reciprocal();
      Complex complex5 = complex4.ZERO.tanh();
      complex0.NaN.getField();
      complex0.ONE.getField();
      complex4.I.subtract(complex1);
      complex2.getArgument();
      complex0.nthRoot(1);
      complex0.acos();
      complex5.sqrt1z();
      complex0.acos();
      complex5.isInfinite();
      complex4.tan();
      complex0.tan();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.NaN.negate();
      complex1.ZERO.toString();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.asin();
      complex3.I.asin();
      complex3.NaN.multiply(1309.5524);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.tanh();
      complex5.I.asin();
      complex5.ZERO.cos();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.9731739067444943E32, 2.9731739067444943E32);
      complex0.ONE.multiply(1);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.exp();
      complex0.toString();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1028.2758743145484);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.cos();
      complex1.ZERO.toString();
      complex1.getArgument();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf((-465.273));
      complex0.isNaN();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.NaN.multiply(complex2);
      complex5.INF.abs();
      complex5.pow(0.0);
      Complex complex6 = complex4.NaN.createComplex((-815.4596), 1028.2758743145484);
      Complex complex7 = complex6.INF.negate();
      complex7.NaN.sqrt1z();
      complex4.multiply((-2277));
      complex0.cosh();
      complex4.pow(complex6);
      complex7.readResolve();
      Complex complex8 = complex1.multiply(complex6);
      complex0.sqrt1z();
      complex6.log();
      complex4.toString();
      complex6.conjugate();
      complex7.readResolve();
      complex3.log();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2.0, 1094.877);
      Complex complex2 = complex1.NaN.sqrt();
      complex2.ZERO.subtract(complex1);
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.ONE.divide(complex1);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.multiply(complex4);
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = Complex.valueOf((-1.2277120342804144E295));
      Complex complex9 = complex7.NaN.createComplex(0.0, 0.0);
      complex9.INF.getField();
      Complex complex10 = complex5.subtract(0.0);
      complex10.ZERO.sinh();
      Complex complex11 = complex7.asin();
      complex11.ZERO.add(complex4);
      complex6.ZERO.reciprocal();
      complex4.isNaN();
      complex3.cos();
      complex8.I.negate();
      complex6.log();
      complex8.createComplex(1094.877, Double.POSITIVE_INFINITY);
      complex8.multiply(Double.POSITIVE_INFINITY);
      complex11.createComplex((-1.2277120342804144E295), Double.POSITIVE_INFINITY);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(689.4738211198);
      Complex complex1 = Complex.I;
      complex0.ONE.divide(complex1);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.ONE.pow(complex1);
      complex4.INF.sqrt1z();
      Complex complex5 = complex0.createComplex(689.4738211198, (-2224.880227278668));
      Complex complex6 = complex2.ZERO.sqrt();
      complex5.getReal();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex0.pow(689.4738211198);
      complex8.ZERO.pow((-2224.880227278668));
      complex7.toString();
      complex3.NaN.multiply((-794));
      complex2.sqrt1z();
      Complex complex9 = complex6.negate();
      complex9.INF.abs();
      complex3.subtract(5.354472503748251E-9);
      Complex complex10 = new Complex((-4.019569741253664E-293));
      complex8.multiply(complex10);
      complex0.getArgument();
      complex4.tan();
      complex1.add(complex5);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-3431.3519));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.ZERO.subtract((-3431.3519));
      Complex complex4 = complex2.I.sqrt();
      Complex complex5 = complex2.NaN.tan();
      complex2.ONE.exp();
      complex2.toString();
      Complex complex6 = complex4.divide((-3431.3519));
      complex6.ONE.cosh();
      Complex complex7 = complex1.subtract((-3431.3519));
      complex1.getField();
      complex7.getImaginary();
      complex3.sqrt();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2861.5745520741));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ZERO.sinh();
      complex0.I.getField();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex1.I.multiply(37);
      Complex complex5 = complex4.ONE.multiply(37);
      Complex complex6 = complex0.cos();
      complex1.I.subtract(complex3);
      Complex complex7 = complex1.divide(Double.POSITIVE_INFINITY);
      complex4.ONE.multiply(complex2);
      complex1.readResolve();
      Complex complex8 = complex7.INF.cosh();
      complex8.ONE.tan();
      Complex complex9 = complex1.negate();
      complex9.divide(complex7);
      complex6.isNaN();
      complex5.abs();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.ZERO.conjugate();
      complex0.divide(complex3);
      complex1.cos();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.INF.acos();
      complex7.INF.tanh();
      Complex complex8 = new Complex((-1226.13));
      Complex complex9 = complex4.divide(complex8);
      complex5.atan();
      complex6.abs();
      complex8.add(0.0);
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4862.31, 4862.31);
      Complex complex2 = complex0.pow(complex1);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.multiply((-712.5662927891821));
      complex0.I.hashCode();
      Complex complex3 = complex0.exp();
      complex3.tan();
      complex0.isNaN();
      complex2.I.sin();
      complex3.log();
      int int0 = (-717);
      try { 
        complex0.nthRoot((-717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -717
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex2.ZERO.subtract(complex0);
      Complex complex6 = complex0.tan();
      complex5.getImaginary();
      Complex complex7 = complex0.ONE.add(complex2);
      Complex complex8 = complex7.I.multiply(408);
      Complex complex9 = complex8.ONE.sqrt1z();
      complex4.I.subtract(complex5);
      Complex complex10 = complex6.subtract(20.0);
      assertTrue(complex6.equals((Object)complex9));
      
      complex1.isNaN();
      Complex complex11 = complex2.I.subtract(1547.735413330397);
      Complex complex12 = complex4.acos();
      Complex complex13 = complex5.acos();
      complex5.ONE.multiply(complex11);
      complex12.add(complex3);
      assertEquals((-0.764285459740499), complex12.getImaginary(), 0.01);
      
      Complex complex14 = complex13.multiply(complex7);
      complex8.isInfinite();
      complex14.hashCode();
      Complex complex15 = complex4.sinh();
      assertEquals(0.5835053242126248, complex15.getReal(), 0.01);
      assertEquals(0.8189270221070483, complex15.getImaginary(), 0.01);
      
      complex8.log();
      assertFalse(complex2.equals((Object)complex10));
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(823.5784456326855);
      Complex complex2 = complex0.reciprocal();
      complex0.getReal();
      ComplexField complexField0 = complex0.getField();
      complex2.equals(complex0);
      Complex complex3 = complex1.NaN.createComplex(1.0, 1.0);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.INF.tanh();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex5.equals((Object)complex1));
      
      Complex complex6 = complex1.divide(complex0);
      complex6.INF.createComplex((-1322.1231096346), 2741.178);
      Complex complex7 = complex0.tan();
      assertEquals(1.557407724654902, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = Complex.valueOf(787.987500849369);
      complex8.equals(complexField0);
      Complex complex9 = complex8.add(complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex7));
      assertEquals(788.987500849369, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(1.778528517418201E-68, (-5.533523366931846E-8));
      double double0 = complex0.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.INF.reciprocal();
      String string0 = complex3.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      complex3.I.exp();
      Complex complex4 = complex2.NaN.createComplex(0.0, 0.0);
      Complex.valueOf(1.778528517418201E-68);
      complex4.INF.getArgument();
      Complex complex5 = complex1.ONE.sinh();
      Complex complex6 = complex5.I.add(0.0);
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.pow(complex1);
      assertEquals(9.246437058708574E-7, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex1.cos();
      assertEquals(9.841529112114266E-76, complex8.getImaginary(), 0.01);
      
      complex2.getField();
      complex1.hashCode();
      Complex complex9 = complex3.multiply(complex2);
      assertEquals(0.9999999999999984, complex2.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
  }
}
