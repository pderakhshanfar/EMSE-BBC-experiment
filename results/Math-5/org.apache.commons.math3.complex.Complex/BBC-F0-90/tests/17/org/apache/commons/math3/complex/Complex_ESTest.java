/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:52:07 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
      Complex complex1 = Complex.valueOf(7.494218049456063E304);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = (-1596.897290379716);
      Complex complex0 = new Complex((-1596.897290379716));
      Complex complex1 = Complex.valueOf((-1596.897290379716), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.cosh();
      complex2.ZERO.cos();
      complex0.ONE.multiply(complex1);
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.6617520126181329, 0.6617520126181329);
      Complex complex2 = Complex.valueOf(20.0, (-9.759223482150195E-4));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt1z();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.createComplex((-1.0041839843783489), Double.POSITIVE_INFINITY);
      complex2.reciprocal();
      Complex complex3 = new Complex((-10007.34301210309), (-1687.4));
      Complex complex4 = Complex.valueOf((-1746.1), 0.0);
      complex4.pow(complex2);
      Complex complex5 = Complex.ZERO;
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(1073741824, 1073741824);
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(2682.3410457505856, 2571.8690301);
      complex2.asin();
      complex1.pow(complex2);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.ZERO;
      complex5.isNaN();
      Complex complex6 = new Complex(1073741824);
      complex6.toString();
      complex2.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(7.467788172398272E228, 2.7698267293941856E-162);
      complex1.acos();
      Complex complex2 = complex1.divide(1.4421346926592482);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3950.313827592), Double.NaN);
      complex0.acos();
      complex1.divide(3.174358801839755E-60);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 5707.8);
      Complex complex2 = complex1.acos();
      complex0.getField();
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex2.tanh();
      complex3.acos();
      Complex.valueOf(5707.8);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.createComplex(Double.POSITIVE_INFINITY, 4.574547269925268E-4);
      Complex complex1 = new Complex(4.574547269925268E-4, 20.0);
      complex1.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1073741824, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(1073741824, 1073741824);
      Complex complex3 = new Complex(1073741824, 2035.59576233771);
      complex1.multiply(1073741824);
      complex1.pow(complex3);
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.ZERO;
      complex4.toString();
      complex1.isInfinite();
      complex2.toString();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1073741824, 137.92600536);
      Complex complex1 = complex0.createComplex(137.92600536, 2.0);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 1073741824);
      complex2.divide(complex1);
      Complex complex3 = complex0.acos();
      complex3.tan();
      Complex complex4 = new Complex(0.04430733370174704);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1073741824, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(1073741824, 1073741824);
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      complex0.divide(complex2);
      complex1.acos();
      complex1.tan();
      complex1.sqrt();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(3314.13402, 3.082479557497307);
      complex1.divide(complex0);
      Complex complex3 = Complex.ONE;
      complex3.acos();
      complex0.tan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.ZERO.reciprocal();
      Complex complex2 = new Complex(7, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2126.257789917873, 2126.257789917873);
      Complex complex1 = complex0.conjugate();
      complex0.NaN.subtract(0.5707963267948966);
      Complex complex2 = complex1.I.conjugate();
      complex2.ZERO.asin();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex2.atan();
      complex5.NaN.atan();
      complex0.toString();
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2035.59576233771, 7.277212447141125E238);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.subtract((-1956.471));
      Complex complex6 = new Complex((-10007.34301210309));
      complex2.toString();
      Complex complex7 = Complex.ZERO;
      complex7.isNaN();
      Complex complex8 = new Complex((-10007.34301210309), (-1956.471));
      complex8.toString();
      Complex complex9 = complex4.log();
      complex5.cosh();
      Complex complex10 = Complex.INF;
      complex10.cosh();
      complex9.sin();
      complex8.cos();
      Complex.valueOf(7.277212447141125E238, (-10007.34301210309));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1073741824, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(-0.0, -0.0);
      complex0.divide(complex2);
      complex1.acos();
      complex1.tan();
      Complex complex3 = complex0.divide((-1956.471));
      complex3.INF.pow((-1956.471));
      complex1.multiply(1790.5673669445);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(1073741824, 1115.67);
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex((-1488.39778));
      Complex complex3 = complex1.createComplex(1115.67, 79.8412457963);
      Complex complex4 = new Complex(0.0, 1115.67);
      Complex complex5 = complex4.divide(complex2);
      complex4.acos();
      complex1.tan();
      complex5.divide(Double.NaN);
      Complex complex6 = new Complex(Double.NaN);
      complex6.cosh();
      // Undeclared exception!
      complex3.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1073741824);
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-20.0), 1308.68322);
      Complex complex2 = new Complex(2.0, (-20.0));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.acos();
      complex3.tan();
      complex0.divide((-20.0));
      Complex complex5 = complex4.pow(8.668714514280051E-69);
      complex3.cosh();
      complex5.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.divide(complex1);
      Complex complex2 = new Complex(1073741824, 1073741824);
      Complex complex3 = complex2.sin();
      Complex complex4 = new Complex(6.283185307179586, (-10007.34301210309));
      Complex complex5 = Complex.NaN;
      complex5.pow(complex1);
      Complex complex6 = complex2.log();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.subtract((-10007.34301210309));
      Complex complex9 = Complex.I;
      complex9.toString();
      Complex complex10 = Complex.I;
      complex10.isNaN();
      complex5.toString();
      complex3.log();
      complex4.cosh();
      complex8.cosh();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1073741824, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(-0.0, -0.0);
      Complex complex3 = complex0.divide(complex2);
      complex1.acos();
      complex1.tan();
      Complex complex4 = complex0.divide((-1956.471));
      complex4.INF.pow((-1956.471));
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.createComplex(Double.POSITIVE_INFINITY, (-1024.6716881));
      complex0.divide((-1024.6716881));
      Complex.valueOf((-1024.6716881), (-963.895457700795));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(523.3193478209);
      Complex complex1 = new Complex(1.0, 523.3193478209);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.divide((-676.289119242));
      Complex complex6 = complex5.subtract(1178.270596738);
      complex6.atan();
      complex2.toString();
      complex2.isNaN();
      complex3.toString();
      complex6.log();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1024.6716881, (-4600.7955746));
      Complex complex1 = new Complex((-20.0), 1899.7483124);
      Complex complex2 = complex0.subtract(complex1);
      complex1.ONE.log();
      Complex complex3 = complex0.subtract(428.11687602);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex2.log();
      Complex complex7 = complex3.negate();
      complex6.subtract((-4600.7955746));
      Complex complex8 = complex6.sinh();
      complex5.acos();
      Complex complex9 = complex7.sin();
      complex9.I.sqrt();
      complex5.negate();
      complex8.sqrt1z();
      complex0.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.sqrt();
      complex2.ONE.pow(58.26890107323607);
      Complex complex3 = complex0.subtract(complex1);
      complex3.conjugate();
      complex0.reciprocal();
      Complex complex4 = complex2.multiply(4206);
      complex1.add(0.17435410468088536);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1024.6716881), 23.64382399499941);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.createComplex(0.0, 7);
      complex1.I.divide(complex0);
      Complex complex4 = complex3.multiply(7);
      Complex complex5 = complex4.multiply((-1024.6716881));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.3115298086593728, 1.5886595249176025);
      Complex complex1 = complex0.createComplex(76.98801983992504, 1.5707963267948966);
      complex0.divide(complex1);
      complex0.sin();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.multiply(2405);
      complex5.ZERO.asin();
      complex1.multiply((-2931.1));
      Complex.valueOf((-8.305334708631055E-8));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.398504543014496E-4, (-1849.6971370118831));
      Complex complex1 = complex0.pow(338.9805444837148);
      Complex complex2 = new Complex(4.384201020002365E-7);
      complex0.subtract(complex2);
      complex1.log();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(523.3193478209);
      complex0.toString();
      int int0 = 1113;
      Complex complex1 = Complex.I;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-1024.6716881), (-6.046505301493));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.createComplex(0.0, 7);
      Complex complex4 = complex1.I.divide(complex0);
      complex4.ONE.sin();
      complex4.acos();
      complex3.tan();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.I;
      complex6.subtract(complex2);
      Complex complex7 = Complex.valueOf(0.0);
      complex7.multiply(2811);
      complex2.multiply(0.0);
      complex3.reciprocal();
      // Undeclared exception!
      complex1.nthRoot(1073729296);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex.valueOf((-771.650639303017), Double.POSITIVE_INFINITY);
      Complex complex0 = Complex.ZERO;
      complex0.subtract(3596.969359);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.I;
      complex0.add(complex2);
      Complex complex3 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.divide(1277.315552);
      Complex complex8 = complex7.subtract(2.167272474431968E-8);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.atan();
      complex8.toString();
      complex1.isNaN();
      complex10.toString();
      Complex complex11 = complex5.log();
      complex10.add(2.167272474431968E-8);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex1.negate();
      complex13.divide(complex12);
      complex5.add((-771.650639303017));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(3596.969359);
      Complex complex3 = complex1.ZERO.tanh();
      complex3.isInfinite();
      complex2.getField();
      complex0.equals(complex1);
      complex0.negate();
      Complex complex4 = complex0.sqrt1z();
      complex0.getArgument();
      complex0.nthRoot(2383);
      complex1.readResolve();
      Complex complex5 = new Complex(2.414213562373095);
      complex1.add(complex5);
      Complex.valueOf(1.5707963267948966, (-2132.7773079557));
      complex3.getArgument();
      complex4.abs();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.I;
      complex5.equals(complex7);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.tanh();
      complex2.acos();
      Complex complex3 = Complex.INF;
      complex3.sqrt();
      Complex complex4 = Complex.INF;
      complex3.divide(complex4);
      complex3.sin();
      Complex.valueOf((-3217.40629227281), (-175.8685));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2806.54200112526);
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      complex1.equals(complex0);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.NaN;
      complex2.INF.log();
      complex0.divide(0.0);
      Complex complex3 = complex0.subtract(0.0);
      complex3.toString();
      Complex complex4 = complex3.NaN.atan();
      complex4.INF.toString();
      complex2.toString();
      complex1.negate();
      Complex.valueOf(426408.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.add(complex0);
      complex1.INF.exp();
      Complex complex3 = complex0.divide(860.0);
      Complex complex4 = Complex.INF;
      complex2.subtract(complex4);
      complex4.abs();
      Complex complex5 = complex3.sqrt();
      complex5.tanh();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.acos();
      complex4.sqrt();
      Complex complex8 = Complex.INF;
      complex7.divide(complex6);
      complex0.sin();
      Complex.valueOf(860.0, 860.0);
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      complex0.NaN.getArgument();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex3.ZERO.tanh();
      Complex complex6 = complex5.ZERO.pow(Double.NaN);
      complex6.ONE.cos();
      Complex complex7 = complex6.I.cos();
      complex7.INF.sqrt1z();
      complex1.I.atan();
      complex7.NaN.add(complex3);
      complex2.ZERO.pow(complex4);
      complex3.ONE.acos();
      Complex complex8 = new Complex(Double.NaN, Double.NaN);
      Complex complex9 = complex4.subtract(complex8);
      complex9.I.sin();
      complex3.I.subtract(complex1);
      Complex complex10 = complex0.acos();
      complex10.multiply(Double.NaN);
      complex10.I.asin();
      complex4.NaN.subtract((-348.1018986));
      complex4.nthRoot(1);
      Complex complex11 = complex2.sqrt1z();
      complex11.I.sqrt();
      complex2.acos();
      complex0.subtract(20.0);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((double) 653);
      Complex complex2 = complex0.multiply(653);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = Complex.valueOf((double) 653);
      complex0.isInfinite();
      complex0.getField();
      complex0.equals(complex3);
      Complex complex5 = complex2.negate();
      complex4.sqrt1z();
      complex5.getArgument();
      complex0.nthRoot(653);
      complex0.readResolve();
      complex0.add(complex1);
      Complex complex6 = Complex.valueOf(Double.NaN, (-666.0));
      complex6.getArgument();
      complex4.abs();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.7080734182735711);
      Complex complex2 = Complex.INF;
      complex2.atan();
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.valueOf((-20.0), 1.0000009524244298);
      complex1.divide(0.7080734182735711);
      Complex complex5 = complex3.subtract(complex1);
      complex5.NaN.sqrt();
      complex0.abs();
      complex0.sqrt();
      complex4.tanh();
      Complex complex6 = complex2.acos();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-1024.6716881), 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.createComplex(0.0, 7);
      Complex complex3 = complex1.I.divide(complex0);
      complex3.ONE.sin();
      Complex complex4 = Complex.NaN;
      complex1.pow(complex3);
      complex2.log();
      complex4.subtract(2406.041);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.atan();
      complex0.toString();
      complex6.isNaN();
      complex3.toString();
      complex3.log();
      Complex complex7 = complex0.add(672.60129632);
      Complex complex8 = Complex.INF;
      complex8.tan();
      Complex complex9 = complex7.divide(complex2);
      Complex complex10 = complex2.add(1038.253080506);
      complex10.sqrt();
      complex9.multiply(0.4999999999999999);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-1024.6716881), 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.createComplex(0.0, 7);
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = Complex.NaN;
      complex4.divide(2529.9765255899);
      complex2.subtract(complex1);
      Complex complex6 = Complex.valueOf((-589.5232209509), 2529.9765255899);
      complex6.abs();
      complex3.sqrt();
      complex0.acos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1024.6716881));
      complex0.NaN.sqrt();
      Complex complex1 = complex0.I.subtract(657.681);
      Complex complex2 = complex0.multiply((-1873.864));
      Complex complex3 = complex2.reciprocal();
      complex3.ZERO.sqrt();
      Complex complex4 = Complex.valueOf(4611.78);
      Complex.valueOf((-1024.6716881), 4611.78);
      complex2.toString();
      Complex complex5 = complex1.pow(complex0);
      Complex.valueOf(657.681);
      complex4.divide(complex5);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(2712.885467121);
      Complex complex1 = complex0.multiply(2712.885467121);
      complex0.abs();
      Complex complex2 = complex1.add(2712.885467121);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex4.NaN.subtract(complex2);
      Complex complex6 = complex0.conjugate();
      complex2.conjugate();
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex3.ZERO.sin();
      complex8.I.acos();
      complex8.NaN.hashCode();
      Complex complex9 = complex5.multiply(complex0);
      complex9.I.pow(complex6);
      complex6.I.multiply(1262.573855);
      Complex complex10 = complex6.multiply(2712.885467121);
      Complex complex11 = complex10.ONE.multiply(complex4);
      complex11.add(complex7);
      complex5.readResolve();
      complex10.INF.reciprocal();
      complex1.negate();
      complex10.asin();
      Complex.valueOf(1.0076552294433743E-119);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(3596.969359);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex2.add(complex1);
      double double1 = 860.0;
      Complex complex5 = complex4.I.subtract(860.0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex7.exp();
      complex4.cos();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.add(complex7);
      complex5.abs();
      complex8.cosh();
      Complex complex11 = complex10.negate();
      Complex complex12 = complex3.multiply(complex11);
      complex12.sinh();
      try { 
        complex2.nthRoot((-914));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -914
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-3114.209731976));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.createComplex(1955.770967078, 358.66017018242);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex4.multiply(175);
      Complex complex7 = Complex.ONE;
      complex7.subtract(complex1);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex5.acos();
      complex6.tan();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex1.negate();
      Complex.valueOf((double) 7);
      complex8.isInfinite();
      ComplexField complexField0 = complex4.getField();
      complex8.readResolve();
      complex11.equals("RLh:K~_lU$}2");
      Complex.valueOf(5.8759898326913254E166, 0.0);
      Complex complex12 = complex9.acos();
      complex7.subtract(0.9428090415820632);
      complex12.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(3596.969359);
      complex1.ZERO.tanh();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.I.subtract(860.0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.pow(complex5);
      complex5.INF.log();
      Complex complex7 = complex1.divide(1.0);
      Complex complex8 = complex1.subtract(1.0);
      complex8.NaN.atan();
      complex1.pow(complex8);
      Complex complex9 = complex2.log();
      complex5.hashCode();
      complex4.isNaN();
      Complex complex10 = Complex.INF;
      complex10.sqrt1z();
      complex9.divide(7.516351204878488E-4);
      complex1.cos();
      complex4.subtract(complex7);
      Complex complex11 = new Complex(3596.969359);
      complex11.add(1.767197002609876E-8);
      complex4.reciprocal();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-1024.6716881), 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.createComplex(0.0, 7);
      Complex complex4 = complex1.I.divide(complex0);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = Complex.NaN;
      Complex complex7 = new Complex((-10007.34301210309), 2035.5957623377103);
      Complex complex8 = complex7.pow(complex3);
      Complex complex9 = complex2.log();
      complex9.divide(2035.5957623377103);
      complex1.subtract((double) 7);
      complex3.atan();
      complex9.toString();
      complex8.isNaN();
      complex8.toString();
      complex8.log();
      complex0.add((-2563.87091913987));
      complex4.tan();
      complex1.negate();
      complex9.divide(complex5);
      complex9.multiply(7);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(3596.969359);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex4.I.subtract(860.0);
      Complex complex6 = Complex.valueOf(1.0, 860.0);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.INF.log();
      complex1.divide(1.0);
      Complex complex9 = complex1.subtract(1.0);
      Complex complex10 = complex9.NaN.atan();
      complex10.INF.toString();
      complex2.isNaN();
      complex6.toString();
      complex3.log();
      complex8.equals(complex10);
      complex5.acos();
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(4.2634204358490415E-9);
      Complex complex1 = complex0.atan();
      complex0.subtract(2270.18904382598);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.valueOf(4.2634204358490415E-9, (-167.189845917));
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = Complex.valueOf(860.0);
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.divide(1454.5);
      complex7.subtract((-20.0));
      complex7.atan();
      complex7.toString();
      complex4.isNaN();
      complex6.toString();
      complex1.log();
      Complex complex8 = complex2.add(0.11517547070980072);
      complex1.tan();
      complex7.negate();
      complex2.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-3114.209731976));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      complex1.reciprocal();
      Complex complex3 = complex1.createComplex(0.0, 7);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide(complex0);
      complex5.ONE.divide(complex4);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.multiply(7);
      complex7.subtract(complex2);
      Complex complex8 = complex4.negate();
      complex3.acos();
      complex0.tan();
      Complex complex9 = Complex.ONE;
      complex7.negate();
      Complex.valueOf((double) 7);
      complex9.isInfinite();
      complex8.getField();
      complex3.readResolve();
      Complex complex10 = Complex.I;
      complex1.equals(complex10);
      Complex.valueOf(510.32046, (-860.0));
      complex8.acos();
      complex10.subtract((-1481.6251));
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-1024.6716881), 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = new Complex(1.880582039589629E-283, (-1024.6716881));
      Complex complex4 = complex3.sqrt1z();
      complex3.readResolve();
      Complex complex5 = Complex.NaN;
      complex2.isNaN();
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex6.add(0.0);
      Complex complex8 = Complex.INF;
      complex7.multiply(complex8);
      Complex complex9 = Complex.ZERO;
      complex9.acos();
      Complex complex10 = complex8.multiply(complex0);
      Complex complex11 = complex5.reciprocal();
      complex8.log();
      complex3.exp();
      complex11.toString();
      complex10.abs();
      complex5.getImaginary();
      complex0.cosh();
      complex0.acos();
      complex4.acos();
      Complex complex12 = Complex.I;
      complex12.subtract(complex1);
      Complex complex13 = Complex.valueOf((-723.762401274));
      complex13.cosh();
      complex13.add(1.880582039589629E-283);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2270.18904382598), 3202.1811052);
      Complex complex1 = complex0.NaN.multiply((-2270.18904382598));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.NaN.sin();
      complex2.abs();
      complex0.getReal();
      Complex.valueOf(Double.NaN);
      complex1.multiply(1483);
      Complex complex4 = complex1.tan();
      complex1.negate();
      Complex complex5 = Complex.valueOf(54.59476691169341);
      complex5.isInfinite();
      complex1.getField();
      complex4.equals(complex3);
      complex3.acos();
      Complex complex6 = new Complex(1.0);
      complex6.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((double) 653);
      Complex complex2 = complex1.INF.add(complex0);
      complex1.isNaN();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.log();
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex3.conjugate();
      complex2.getArgument();
      complex1.exp();
      complex5.toString();
      complex3.pow(complex5);
      Complex complex7 = complex4.log();
      complex2.hashCode();
      complex0.isNaN();
      Complex complex8 = Complex.INF;
      complex6.divide(2.0);
      Complex complex9 = Complex.valueOf(Double.NaN, 2.0);
      complex9.acos();
      complex6.sqrt();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2938.0, (-1374.340906));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract(1.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.subtract(860.0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.pow(complex4);
      complex2.log();
      Complex complex8 = complex2.divide((-1774.0));
      Complex complex9 = complex2.subtract(1.0);
      complex9.atan();
      complex6.toString();
      complex6.isNaN();
      complex2.toString();
      complex8.log();
      complex1.add((-4313.0));
      Complex complex10 = complex3.tan();
      complex7.negate();
      complex5.divide(complex10);
      Complex complex11 = new Complex(2346);
      complex11.multiply(17);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-3114.209731976));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = (Complex)complex2.ZERO.readResolve();
      Complex complex6 = Complex.NaN;
      complex0.isNaN();
      Complex complex7 = complex2.INF.divide(complex4);
      Complex complex8 = complex2.add((-3114.209731976));
      Complex complex9 = complex2.multiply(complex8);
      Complex complex10 = complex3.acos();
      Complex complex11 = complex9.multiply(complex3);
      complex10.reciprocal();
      complex7.log();
      Complex complex12 = complex5.exp();
      complex7.toString();
      complex11.abs();
      Complex complex13 = Complex.I;
      complex13.getImaginary();
      complex12.cosh();
      complex12.acos();
      complex7.acos();
      complex10.subtract(complex7);
      complex10.cosh();
      complex9.add(1.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-3114.209731976));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = (Complex)complex2.ZERO.readResolve();
      Complex complex6 = Complex.NaN;
      complex0.isNaN();
      Complex complex7 = complex2.INF.divide(complex4);
      Complex complex8 = complex2.add((-3114.209731976));
      Complex complex9 = Complex.valueOf((-3114.209731976));
      complex9.multiply(complex4);
      complex5.acos();
      Complex complex10 = Complex.ONE;
      complex10.multiply(complex2);
      complex7.reciprocal();
      Complex complex11 = complex1.log();
      Complex complex12 = complex10.exp();
      complex8.toString();
      complex4.abs();
      complex6.getImaginary();
      complex4.cosh();
      complex9.acos();
      complex9.acos();
      complex11.subtract(complex7);
      complex7.cosh();
      complex12.add(0.0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(587);
      complex1.NaN.exp();
      Complex complex2 = complex0.I.createComplex((-2365.187756119), 3592.948979791);
      Complex complex3 = complex0.ZERO.pow(404.906078881834);
      complex0.getImaginary();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex5.ONE.multiply(complex2);
      complex7.I.multiply(55894.79128175746);
      Complex complex8 = complex6.INF.pow(1643.0);
      complex4.multiply(complex0);
      Complex complex9 = complex3.acos();
      Complex complex10 = complex9.INF.reciprocal();
      Complex complex11 = complex3.subtract(3592.948979791);
      complex3.reciprocal();
      Complex complex12 = complex2.cosh();
      complex8.divide(complex12);
      complex11.NaN.tan();
      Complex complex13 = complex3.add(0.0);
      complex13.conjugate();
      complex11.negate();
      complex13.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2266.496022308725), 3202.1811052);
      Complex complex1 = complex0.multiply(3202.1811052);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.NaN.sin();
      complex2.abs();
      complex0.getReal();
      Complex complex4 = complex0.sin();
      complex1.isInfinite();
      complex0.NaN.nthRoot(1940);
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.NaN.pow(complex4);
      Complex complex8 = complex6.I.conjugate();
      complex6.ZERO.getArgument();
      complex8.NaN.toString();
      complex7.pow(complex4);
      Complex complex9 = complex0.log();
      complex0.hashCode();
      complex4.isNaN();
      complex6.sqrt1z();
      complex9.divide((-2266.496022308725));
      complex4.cos();
      complex6.subtract(complex5);
      complex3.add((-5.688639355498786E-10));
      complex6.reciprocal();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      complex1.add((double) 653);
      Complex complex2 = complex0.add((double) 653);
      complex0.hashCode();
      complex2.isNaN();
      Complex complex3 = Complex.valueOf(1002.360106, 2404.9054016487);
      complex3.exp();
      complex0.cos();
      Complex complex4 = complex1.add(complex0);
      complex1.abs();
      complex4.cosh();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.sinh();
      complex0.nthRoot(37);
      complex5.readResolve();
      complex4.add(complex6);
      Complex complex7 = Complex.INF;
      complex7.getArgument();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(236.42290769246);
      Complex complex1 = complex0.INF.divide(236.42290769246);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.add(236.42290769246);
      complex1.ZERO.add(236.42290769246);
      complex0.hashCode();
      complex0.isNaN();
      Complex complex4 = Complex.valueOf(236.42290769246, 236.42290769246);
      Complex complex5 = complex2.exp();
      complex0.I.cos();
      complex0.NaN.add(complex3);
      complex2.NaN.abs();
      complex4.cosh();
      Complex complex6 = complex5.negate();
      complex6.I.multiply(complex1);
      complex2.sinh();
      complex4.nthRoot(37);
      Complex complex7 = complex1.multiply((double) 37);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(3596.969359);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex4.I.subtract(860.0);
      complex3.NaN.negate();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex6.INF.log();
      complex1.divide((-20.0));
      Complex complex9 = complex1.subtract(1.0);
      Complex complex10 = complex9.NaN.atan();
      complex10.INF.toString();
      Complex complex11 = new Complex(0.0, (-510.8412289));
      complex11.negate();
      complex5.sinh();
      complex3.nthRoot(37);
      complex10.readResolve();
      complex8.add(complex9);
      complex7.getArgument();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(4.2634204358490415E-9);
      Complex complex1 = complex0.atan();
      complex0.ONE.cosh();
      Complex complex2 = Complex.valueOf((-1.9600580584843318E-8), 1454.5);
      complex2.ZERO.divide((-1.9600580584843318E-8));
      complex0.subtract(complex2);
      complex2.abs();
      Complex complex3 = complex2.sqrt();
      complex1.tanh();
      Complex complex4 = new Complex(1454.5);
      complex2.add((-7.608239893));
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-3114.209731976));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.sqrt1z();
      complex2.ZERO.readResolve();
      Complex complex5 = Complex.NaN;
      complex0.isNaN();
      complex2.INF.divide(complex4);
      Complex complex6 = complex2.add((-3114.209731976));
      Complex complex7 = complex6.ZERO.multiply(complex2);
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.I.multiply(complex6);
      Complex complex10 = complex7.INF.reciprocal();
      Complex complex11 = complex7.log();
      Complex complex12 = complex11.exp();
      complex12.INF.toString();
      complex4.abs();
      complex6.getImaginary();
      complex3.cosh();
      complex3.acos();
      complex8.acos();
      complex9.subtract(complex0);
      complex0.cosh();
      complex10.add(0.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(3596.969359);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex2.add(complex1);
      complex4.I.subtract(860.0);
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.pow(complex5);
      complex7.log();
      Complex complex8 = complex2.divide((-636.7777826822));
      complex3.subtract(1999.22001654654);
      complex3.atan();
      Complex complex9 = Complex.ONE;
      complex9.toString();
      complex1.isNaN();
      complex2.toString();
      complex8.log();
      Complex complex10 = complex8.add(417.87530755222485);
      complex5.tan();
      Complex.valueOf((-4313.0));
      complex10.negate();
      complex0.divide(complex8);
      complex5.multiply(2346);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-1024.6716881), 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.createComplex(0.0, 7);
      Complex complex4 = complex1.I.divide(complex0);
      Complex complex5 = complex4.ONE.sin();
      complex0.multiply(7);
      Complex complex6 = complex1.subtract(complex0);
      complex1.ONE.negate();
      Complex complex7 = complex6.I.acos();
      complex7.tan();
      Complex complex8 = Complex.ONE;
      complex8.negate();
      Complex.valueOf(2689.6238426444);
      complex8.isInfinite();
      complex3.getField();
      Object object0 = complex5.readResolve();
      complex1.equals(object0);
      Complex complex9 = Complex.valueOf(2689.6238426444, 2689.6238426444);
      complex9.acos();
      complex6.subtract(0.9428090415820632);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(236.42290769246);
      Complex complex1 = complex0.INF.divide(236.42290769246);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.add(236.42290769246);
      Complex complex4 = complex1.ZERO.add(236.42290769246);
      complex0.hashCode();
      complex0.isNaN();
      Complex complex5 = Complex.valueOf(236.42290769246, 236.42290769246);
      Complex complex6 = complex2.exp();
      complex0.I.cos();
      complex0.NaN.add(complex3);
      complex2.NaN.abs();
      complex5.cosh();
      complex6.negate();
      complex2.sinh();
      Complex.valueOf(0.0, 2133.186);
      Complex complex7 = complex3.multiply(1153);
      complex7.createComplex(1153, (-741.15068));
      complex6.acos();
      complex4.sqrt();
      Complex complex8 = Complex.INF;
      complex1.add(complex8);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(3596.969359);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex2.add(complex1);
      complex4.I.subtract(860.0);
      complex3.NaN.negate();
      Complex complex5 = Complex.NaN;
      complex0.pow(complex5);
      complex5.INF.log();
      complex1.divide((-20.0));
      Complex complex6 = complex1.subtract(1.0);
      Complex complex7 = complex6.NaN.atan();
      complex7.INF.toString();
      complex2.isNaN();
      complex5.toString();
      Complex complex8 = complex2.log();
      complex8.add((-4313.0));
      Complex complex9 = new Complex(7.120242132370469E65, 20.0);
      complex9.tanh();
      complex5.acos();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(4.2634204358490415E-9);
      complex0.sqrt();
      Complex complex1 = Complex.valueOf((-1589.4417521));
      Complex complex2 = new Complex((-1.9600580584843318E-8));
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.asin();
      complex0.hashCode();
      complex2.divide(complex0);
      complex2.multiply((-833.43716844));
      complex1.multiply(complex3);
      Complex complex7 = Complex.valueOf(4.2634204358490415E-9);
      complex0.add(complex7);
      Complex.valueOf((-1589.4417521), (-833.43716844));
      Complex complex8 = complex3.conjugate();
      complex6.getReal();
      complex8.divide(1365.3558902781);
      complex4.toString();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-1041.95338), (-1041.95338));
      Complex complex1 = Complex.ONE;
      complex1.add(388.222799);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = Complex.NaN;
      complex4.atan();
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.valueOf((-1310.580120725094), 1231.42290357367);
      Complex complex7 = complex1.divide(1454.5);
      complex2.subtract(complex5);
      complex7.abs();
      Complex complex8 = Complex.ZERO;
      complex6.tanh();
      complex3.acos();
      Complex complex9 = Complex.I;
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ZERO.createComplex((-16.2), (-16.2));
      complex2.I.multiply(complex1);
      Complex complex3 = complex0.ONE.exp();
      complex1.pow(complex2);
      complex0.subtract(complex1);
      Complex complex4 = new Complex((-3415.24511912));
      complex4.INF.hashCode();
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.ZERO.add(complex6);
      complex0.I.subtract((-16.2));
      Complex complex8 = complex0.I.subtract(complex1);
      complex4.tan();
      complex5.INF.getField();
      complex4.nthRoot(2813);
      complex0.sinh();
      complex7.negate();
      complex8.reciprocal();
      complex3.sqrt();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-2270.18904382598), (-1041.95338));
      Complex complex2 = Complex.ZERO;
      complex1.subtract(complex0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = new Complex(8.526840871698083E-9);
      Complex complex5 = complex4.sqrt1z();
      complex5.subtract(complex3);
      complex1.negate();
      Complex complex6 = complex3.atan();
      complex6.tanh();
      Complex.valueOf(4.2634204358490415E-9, 1.4310184489676175E-201);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ZERO.createComplex((-16.2), (-16.2));
      complex2.I.multiply(complex1);
      Complex complex3 = complex0.ONE.exp();
      complex1.pow(complex2);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = new Complex((-3415.24511912));
      Complex complex6 = Complex.I;
      complex6.readResolve();
      Complex complex7 = new Complex((-4.813899778443457E-9));
      complex7.tan();
      Complex complex8 = complex2.atan();
      complex8.isNaN();
      complex4.exp();
      Complex complex9 = Complex.INF;
      complex9.asin();
      Complex complex10 = complex4.cosh();
      Complex complex11 = new Complex((-16.2));
      complex11.divide(582454.4341246617);
      complex0.exp();
      Complex.valueOf(5158.69449620821, 582454.4341246617);
      Complex complex12 = complex3.reciprocal();
      complex10.getImaginary();
      complex12.pow((-16.2));
      complex5.divide(complex7);
      Complex complex13 = Complex.ONE;
      complex13.multiply(372.22733233419814);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(4.2634204358490415E-9);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.subtract(4.2634204358490415E-9);
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex((-1.9600580584843318E-8), (-2.071910882200156E-7));
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = complex0.log();
      Complex complex8 = Complex.INF;
      complex8.divide(860.0);
      complex1.subtract(4.2634204358490415E-9);
      complex2.atan();
      complex5.toString();
      complex7.isNaN();
      complex6.toString();
      complex8.log();
      Complex complex9 = Complex.ZERO;
      complex9.add((-20.0));
      complex7.tan();
      Complex.valueOf(1.5800256583859738);
      Complex complex10 = complex8.negate();
      Complex complex11 = complex9.divide(complex10);
      complex11.multiply(17);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((double) 653);
      complex1.INF.add(complex0);
      Complex.valueOf((-1469.07398547));
      Complex complex2 = complex0.multiply(653);
      Complex complex3 = complex2.ZERO.tan();
      complex0.negate();
      Complex complex4 = Complex.valueOf((double) 653);
      complex4.NaN.acos();
      complex0.isInfinite();
      complex0.getField();
      complex0.equals(complex3);
      Complex complex5 = complex3.reciprocal();
      complex5.getImaginary();
      Complex complex6 = complex5.pow(Double.NaN);
      Complex complex7 = Complex.ZERO;
      complex7.divide(complex1);
      complex6.multiply((-738.2398787365));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2270.18904382598), 3202.1811052);
      Complex complex1 = complex0.NaN.multiply((-2270.18904382598));
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.NaN.sin();
      complex2.abs();
      complex0.getReal();
      Complex complex4 = complex0.sin();
      complex1.isInfinite();
      complex0.NaN.nthRoot(1940);
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.NaN.pow(complex4);
      Complex complex8 = complex6.I.conjugate();
      complex6.ZERO.getArgument();
      complex8.NaN.toString();
      complex7.pow(complex4);
      Complex complex9 = complex0.log();
      complex0.hashCode();
      complex4.isNaN();
      complex6.sqrt1z();
      complex9.divide((-2270.18904382598));
      complex4.cos();
      complex6.subtract(complex5);
      complex3.add((-5.688639355498786E-10));
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((double) 653);
      complex1.INF.add(complex0);
      Complex.valueOf((-1469.07398547));
      Complex complex2 = complex0.multiply(653);
      Complex complex3 = complex2.ZERO.tan();
      complex0.negate();
      Complex.valueOf((double) 653);
      complex0.isInfinite();
      complex0.getField();
      complex0.equals(complex3);
      complex0.acos();
      complex1.subtract(1.8178469851136E-8);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = complex0.INF.multiply(0);
      complex1.tanh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.multiply(7);
      complex3.ZERO.exp();
      complex3.readResolve();
      complex0.readResolve();
      Complex complex4 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.INF.negate();
      complex4.pow(Double.POSITIVE_INFINITY);
      complex4.reciprocal();
      complex5.sin();
      complex2.pow((-3078.679983520848));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sqrt();
      complex2.ONE.pow(58.26890107323607);
      Complex complex3 = complex0.subtract(complex1);
      complex3.conjugate();
      complex0.reciprocal();
      Complex complex4 = complex2.multiply(4206);
      complex1.add(0.0);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8305382378470305E269);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex0.NaN.atan();
      complex0.readResolve();
      complex1.isNaN();
      Complex complex6 = complex5.add(1.8305382378470305E269);
      Complex complex7 = complex5.exp();
      Complex complex8 = complex2.multiply(164);
      complex5.INF.pow((double) 164);
      complex2.log();
      complex0.pow((-6326.276522));
      Complex complex9 = complex6.divide(8.869266069401045E-8);
      complex9.ZERO.pow((double) 164);
      complex4.abs();
      complex8.ONE.getArgument();
      Object object0 = new Object();
      complex8.equals(object0);
      complex6.readResolve();
      complex8.getReal();
      complex7.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(3596.969359);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex2.add(complex1);
      complex4.I.subtract(860.0);
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = Complex.NaN;
      complex0.pow(complex6);
      complex6.INF.log();
      complex1.divide((-20.0));
      Complex complex7 = complex1.subtract(1.0);
      Complex complex8 = complex7.NaN.atan();
      complex8.INF.toString();
      complex2.isNaN();
      complex6.toString();
      Complex complex9 = complex2.log();
      Complex complex10 = complex9.add((-4313.0));
      complex10.tan();
      Complex.valueOf((-4313.0));
      Complex complex11 = complex3.negate();
      complex11.divide(complex5);
      complex4.multiply(2346);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.multiply(0);
      Complex complex1 = complex0.reciprocal();
      try { 
        complex1.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex1.conjugate();
      complex4.ONE.tan();
      complex4.ZERO.getArgument();
      Complex complex5 = complex4.NaN.pow(complex0);
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex7.sqrt();
      complex0.NaN.readResolve();
      complex5.I.multiply(complex6);
      complex0.divide(1078.318794094);
      complex0.getImaginary();
      Complex complex9 = complex0.subtract(0.0);
      Complex complex10 = complex9.NaN.sin();
      complex10.ONE.tanh();
      complex10.I.pow(complex0);
      complex1.nthRoot(37);
      complex5.add(complex3);
      complex9.add(809.1319);
      Complex complex11 = complex4.tan();
      complex11.pow(complex8);
      complex1.cos();
      complex3.cos();
      complex9.getReal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add((-2153.7979470856));
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex0.pow(0.0);
      complex2.NaN.atan();
      complex3.ZERO.sqrt1z();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(1.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.subtract(1.0);
      complex2.ONE.add(complex1);
      complex2.ONE.sqrt();
      complex2.negate();
      Complex complex3 = Complex.valueOf(4318.91245743);
      complex3.ONE.getField();
      Complex complex4 = complex1.multiply(0.0);
      complex4.abs();
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex4.ONE.add((-1460.093438617));
      complex4.getArgument();
      Complex complex7 = complex0.atan();
      complex1.NaN.acos();
      complex6.NaN.multiply(1979);
      Complex complex8 = complex7.sqrt();
      complex8.INF.sqrt();
      Complex complex9 = complex6.createComplex(0.32270604372024536, (-3.141592653589793));
      complex9.getReal();
      Complex complex10 = complex7.atan();
      complex0.multiply(complex5);
      complex10.isNaN();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(4.2634204358490415E-9);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = Complex.valueOf((-1.9600580584843318E-8), 1454.5);
      complex3.ZERO.divide((-1.9600580584843318E-8));
      Complex complex4 = complex0.subtract(complex3);
      complex3.abs();
      complex3.sqrt();
      complex1.tanh();
      complex2.acos();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.nthRoot(472);
      complex0.getImaginary();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.ONE.createComplex(0.0, 472);
      complex3.ZERO.sin();
      Complex complex6 = complex2.ONE.tan();
      complex6.ZERO.hashCode();
      complex6.I.getArgument();
      complex1.createComplex(0.0, 0.0);
      complex0.cos();
      complex3.conjugate();
      Complex complex7 = complex5.cos();
      complex1.getReal();
      complex0.sqrt();
      complex7.cos();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      complex0.I.multiply((-1295));
      Complex complex1 = complex0.cos();
      complex1.log();
      Complex.valueOf((double) (-1295), (-764.2794313635045));
      complex0.abs();
      complex1.INF.negate();
      complex0.getArgument();
      try { 
        complex1.nthRoot((-1295));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,295
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.I.createComplex(0.0, 20.0);
      Complex complex3 = complex0.divide(1.8214070796966553);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.reciprocal();
      complex5.NaN.abs();
      complex5.INF.sqrt();
      complex4.hashCode();
      complex4.add(complex0);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex3.multiply(3308.43);
      complex7.I.cosh();
      complex0.toString();
      complex0.ZERO.exp();
      complex2.sin();
      Complex.valueOf(1.8214070796966553, 20.0);
      complex1.pow((-3741.54));
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex0.NaN.multiply(1713.9304055616499);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex3.pow(complex1);
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex6.acos();
      complex8.NaN.hashCode();
      Complex complex9 = complex5.acos();
      complex7.exp();
      complex4.cos();
      Complex complex10 = complex3.subtract(complex9);
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(236.42290769246);
      Complex complex1 = complex0.INF.divide(236.42290769246);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.add(236.42290769246);
      complex1.ZERO.add(236.42290769246);
      complex0.hashCode();
      complex0.isNaN();
      Complex complex4 = Complex.valueOf(236.42290769246, 236.42290769246);
      Complex complex5 = complex2.exp();
      complex0.I.cos();
      complex0.NaN.add(complex3);
      complex2.NaN.abs();
      complex4.cosh();
      Complex complex6 = complex5.negate();
      complex2.sinh();
      complex4.nthRoot(37);
      complex3.readResolve();
      Complex complex7 = complex3.add(complex5);
      complex6.getArgument();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-1024.6716881), 0.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.createComplex(0.0, 7);
      Complex complex3 = complex1.I.divide(complex0);
      complex3.ONE.sin();
      Complex complex4 = complex0.multiply(7);
      Complex complex5 = complex1.subtract(complex0);
      complex1.ONE.negate();
      Complex complex6 = complex5.I.acos();
      complex5.NaN.readResolve();
      complex6.I.tan();
      Complex complex7 = complex4.atan();
      complex5.isNaN();
      Complex complex8 = complex5.exp();
      complex8.ONE.asin();
      complex4.cosh();
      complex8.NaN.divide(0.0);
      Complex complex9 = complex0.exp();
      Complex.valueOf(0.0, (-459.040037298));
      complex9.I.reciprocal();
      complex7.getImaginary();
      Complex complex10 = complex4.pow((double) 7);
      complex3.divide(complex10);
      complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-2406.131976822073));
      Complex complex1 = complex0.subtract((-2406.131976822073));
      complex0.isInfinite();
      Complex complex2 = complex0.sinh();
      complex0.isNaN();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.ZERO.multiply(0);
      Complex complex5 = complex1.NaN.reciprocal();
      Complex complex6 = complex5.ONE.reciprocal();
      complex6.ONE.conjugate();
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex7.asin();
      complex8.hashCode();
      complex3.createComplex((-2406.131976822073), (-1910.52130143));
      Complex complex9 = complex1.pow((-1910.52130143));
      complex4.NaN.add(complex0);
      complex0.ZERO.tan();
      complex9.NaN.subtract(complex7);
      complex3.hashCode();
      Complex complex10 = complex9.exp();
      complex10.ZERO.atan();
      complex2.add(complex4);
      complex4.divide(2.6501317024230957);
      Complex complex11 = complex4.add(complex7);
      complex11.NaN.divide(complex8);
      complex7.reciprocal();
      complex2.conjugate();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.subtract(complex0);
      complex1.I.createComplex(0.0, 4369.905403);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex0.subtract(303.3068824727);
      Complex complex6 = complex1.multiply((-2435.2));
      Complex complex7 = complex6.reciprocal();
      complex0.INF.sinh();
      complex4.add(complex2);
      Complex complex8 = Complex.NaN;
      complex8.I.exp();
      complex5.equals(complex8);
      Complex complex9 = complex7.add(complex6);
      Complex complex10 = complex9.INF.negate();
      complex2.getField();
      complex7.getReal();
      Complex complex11 = complex3.reciprocal();
      complex11.tanh();
      complex10.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      complex0.NaN.getArgument();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex3.ZERO.tanh();
      Complex complex6 = complex5.ZERO.pow(Double.NaN);
      complex6.ONE.cos();
      Complex complex7 = complex6.I.cos();
      complex7.INF.sqrt1z();
      complex1.I.atan();
      complex7.NaN.add(complex3);
      complex2.ZERO.pow(complex4);
      complex3.ONE.acos();
      Complex complex8 = new Complex(Double.NaN, Double.NaN);
      complex4.subtract(complex8);
      complex3.I.subtract(complex1);
      Complex complex9 = complex0.acos();
      complex4.NaN.subtract((-348.1018986));
      complex4.nthRoot(1);
      Complex complex10 = complex2.sqrt1z();
      complex10.I.sqrt();
      Complex complex11 = complex3.negate();
      complex11.NaN.getArgument();
      Complex complex12 = Complex.valueOf(0.0, Double.NaN);
      complex9.abs();
      complex12.multiply(1);
      complex9.createComplex(0.0, Double.NaN);
      Complex complex13 = complex3.acos();
      complex13.INF.sqrt();
      complex8.add(complex12);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.NaN.getField();
      Complex complex2 = complex1.INF.pow(complex0);
      complex1.toString();
      complex2.INF.divide(564.8512357);
      Complex complex3 = complex2.ONE.conjugate();
      complex0.toString();
      complex0.getArgument();
      Complex complex4 = complex3.cosh();
      try { 
        complex4.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.NaN.createComplex((-4.1527104733570825E-8), 913.24365);
      complex0.getArgument();
      List<Complex> list0 = complex0.INF.nthRoot(17);
      complex0.getArgument();
      Complex complex2 = complex0.add(818.6);
      complex2.NaN.getArgument();
      Complex complex3 = Complex.ONE;
      complex3.pow(complex1);
      complex2.NaN.subtract(complex3);
      Complex complex4 = complex0.log();
      complex4.INF.subtract(complex0);
      complex0.equals(list0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = (-1626.09505731302);
      Complex complex0 = new Complex((-1626.09505731302), (-1626.09505731302));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.INF;
      complex2.INF.pow(3095.8839131528);
      Complex complex3 = complex2.INF.negate();
      complex3.sqrt1z();
      complex1.INF.divide(1147.24492);
      complex0.NaN.pow(complex2);
      Complex complex4 = Complex.valueOf(3715.163);
      Complex complex5 = complex0.exp();
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex4.cosh();
      try { 
        complex6.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      complex0.readResolve();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.INF.add(2458.206119);
      complex3.I.negate();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.cosh();
      complex2.INF.sqrt1z();
      Complex complex6 = complex1.sin();
      complex6.ZERO.multiply(complex4);
      Complex.valueOf(2051.643, (-218.2));
      complex6.pow(0.0);
      complex0.abs();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2180.1795738872215), (-2180.1795738872215));
      Complex complex1 = new Complex((-2180.1795738872215));
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.ONE.pow(complex1);
      complex4.toString();
      complex0.toString();
      complex4.getImaginary();
      Complex complex5 = complex3.divide(376.220590308);
      complex0.tan();
      complex2.I.hashCode();
      complex4.tan();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2619.0), (-2619.0));
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.multiply((-3322));
      complex0.isInfinite();
      Complex complex4 = complex1.subtract((-1.0));
      complex1.ONE.abs();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex5.ONE.sqrt();
      complex6.INF.conjugate();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.ZERO.pow(0.0);
      Complex complex10 = complex6.acos();
      complex10.I.getArgument();
      complex1.ONE.divide(complex7);
      Complex complex11 = complex10.asin();
      complex11.getArgument();
      Complex complex12 = complex1.add(complex7);
      complex12.I.tan();
      Complex complex13 = complex2.acos();
      complex8.sqrt();
      complex9.pow(0.08961215615272522);
      complex4.equals((Object) null);
      complex0.getImaginary();
      complex13.multiply(complex11);
      complex7.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-3114.209731976));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.I.tanh();
      complex2.ZERO.readResolve();
      complex5.add(complex1);
      Complex.valueOf((-3114.209731976), 0.0);
      complex0.isNaN();
      Complex complex6 = complex2.add((-3114.209731976));
      Complex complex7 = complex6.ZERO.multiply(complex2);
      Complex complex8 = complex5.acos();
      Complex complex9 = complex8.I.multiply(complex6);
      complex7.INF.reciprocal();
      Complex complex10 = complex7.log();
      complex3.isInfinite();
      Complex complex11 = complex10.exp();
      complex11.INF.toString();
      complex4.abs();
      complex6.getImaginary();
      complex3.cosh();
      complex3.acos();
      complex8.acos();
      complex9.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex((-386.0198), 0.0);
      complex0.ZERO.getField();
      Complex complex1 = Complex.valueOf(0.0, Double.NaN);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.reciprocal();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.NaN.log();
      complex4.INF.abs();
      Complex complex5 = complex4.ZERO.multiply((-1455.9865));
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex6.I.pow(complex2);
      assertEquals(4.599811156157711E-264, complex7.getReal(), 0.01);
      
      complex6.ONE.hashCode();
      complex6.INF.toString();
      Complex complex8 = complex0.ZERO.asin();
      assertTrue(complex8.equals((Object)complex5));
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      complex6.getArgument();
      complex0.INF.getArgument();
      Complex complex9 = complex0.subtract(0.0);
      complex9.INF.createComplex(0.7853981633974483, 6.283185307179586);
      complex9.INF.hashCode();
      Complex complex10 = complex4.sinh();
      complex1.ZERO.sqrt1z();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex1.cosh();
      complex12.getArgument();
      Complex complex13 = complex11.sqrt();
      assertSame(complex13, complex12);
      
      Complex complex14 = complex9.add(Double.NaN);
      assertFalse(complex9.equals((Object)complex8));
      assertSame(complex14, complex1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.INF.subtract(1.0);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.I.negate();
      complex5.INF.subtract((-2814.2455697450187));
      complex0.sinh();
      Complex complex6 = complex0.ONE.sinh();
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex7.ONE.multiply(656);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(656.0, complex8.getReal(), 0.01);
      
      complex6.INF.subtract((-2721.4230316));
      Complex complex9 = complex1.atan();
      assertEquals(1.25947072527746, complex9.getImaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex9.getReal(), 0.01);
      
      complex0.hashCode();
      complex6.ONE.sinh();
      complex1.log();
      complex0.isInfinite();
      Complex complex10 = complex7.cosh();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.3246090892520057, complex10.getReal(), 0.01);
      
      Complex complex11 = complex4.conjugate();
      assertSame(complex4, complex11);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6244332790374756);
      Complex complex1 = Complex.valueOf(0.6244332790374756);
      Complex complex2 = complex0.ONE.sqrt();
      complex2.NaN.readResolve();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.add(complex1);
      complex3.NaN.toString();
      Complex complex4 = complex0.log();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.ZERO.pow(complex0);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.2488665580749512, complex5.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      
      Complex complex7 = Complex.valueOf(0.6244332790374756, 0.0);
      assertTrue(complex7.equals((Object)complex0));
      assertEquals(0.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = 2.6735267639160156;
      Complex complex0 = Complex.valueOf(2.6735267639160156, 1902.063681973315);
      complex0.isInfinite();
      Complex complex1 = null;
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-3320.0));
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(706.91096);
      Complex complex1 = complex0.INF.subtract(0.0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      
      Complex complex2 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(706.91096, complex2.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2806.54200112526);
      Complex complex1 = complex0.acos();
      assertEquals((-8.63285561222965), complex1.getImaginary(), 0.01);
      assertEquals(2806.54200112526, complex0.getImaginary(), 0.01);
  }
}
