/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:42:26 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1.0), 1.6985075903314236E-173);
      complex1.asin();
      Complex complex2 = new Complex(20.0, 20.0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 4.077833411912652E-116;
      Complex complex0 = new Complex(4.077833411912652E-116, (-703.0));
      Complex complex1 = complex0.tan();
      complex1.subtract(complex0);
      complex0.acos();
      complex1.getArgument();
      Complex.valueOf((-1.5707963267948966));
      Complex complex2 = complex0.multiply(4065.082284485539);
      complex2.nthRoot(37);
      complex0.multiply(1033);
      complex1.log();
      complex1.atan();
      Complex complex3 = Complex.INF;
      try { 
        complex3.ONE.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2.105749999899302E-7), Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-19.5704493521), Double.POSITIVE_INFINITY);
      complex0.tan();
      complex1.multiply((-4744.0));
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.cosh();
      double double0 = (-4617.74829846);
      Complex complex2 = Complex.valueOf(1.6985075903314236E-173);
      complex2.readResolve();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.add(2262.17);
      Complex complex5 = Complex.ZERO;
      complex5.divide((-302.002950039));
      complex0.negate();
      Complex complex6 = complex2.reciprocal();
      complex4.hashCode();
      complex4.readResolve();
      complex2.acos();
      complex3.getReal();
      complex1.add(0.0);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.sqrt();
      complex7.isInfinite();
      int int0 = (-2428);
      complex7.multiply((-2428));
      double double1 = 6.1009492034592176E-158;
      Complex complex9 = Complex.valueOf(6.1009492034592176E-158, 0.0);
      try { 
        complex9.nthRoot((-2428));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,428
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = complex1.tanh();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 1.6985075903314236E-173);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.divide(complex0);
      Complex.valueOf((-1.0), 972.8071782485388);
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex4.sqrt1z();
      complex0.createComplex(1.6985075903314236E-173, (-375.112950552));
      complex0.createComplex((-1.0), (-1.0));
      complex5.sqrt1z();
      Complex complex6 = new Complex(972.8071782485388, Double.POSITIVE_INFINITY);
      complex6.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.sin();
      Complex complex1 = Complex.valueOf(342.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      complex0.ZERO.hashCode();
      Complex complex3 = Complex.valueOf(1655.89875258043, 816.7059670251747);
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1.956199868121249E282);
      complex0.ZERO.conjugate();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.asin();
      Complex complex2 = complex1.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.tanh();
      Complex complex1 = complex0.negate();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 2833.93368;
      Complex complex0 = Complex.valueOf(2833.93368);
      complex0.ONE.sinh();
      Complex complex1 = Complex.valueOf(2833.93368, 2833.93368);
      complex1.INF.sinh();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1026.4285385));
      complex0.tan();
      Complex complex1 = Complex.valueOf(2.414213562373095, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex0.pow(complex1);
      complex0.multiply(2309);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(274.135815541);
      complex1.ZERO.readResolve();
      complex0.ONE.subtract(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.multiply(1432);
      Complex complex5 = complex0.ONE.multiply(1.237151935191621);
      complex5.NaN.add(274.135815541);
      complex4.NaN.subtract(1.237151935191621);
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex6.conjugate();
      complex7.NaN.conjugate();
      Complex complex8 = complex7.acos();
      complex8.INF.sin();
      complex6.toString();
      complex6.cos();
      Complex complex9 = Complex.valueOf(418.40940494572, 418.40940494572);
      complex6.readResolve();
      complex2.readResolve();
      Complex complex10 = complex0.cosh();
      Complex complex11 = Complex.valueOf((-1312.618365095));
      Complex complex12 = complex0.negate();
      Complex complex13 = complex11.asin();
      complex9.toString();
      complex10.ZERO.acos();
      complex0.INF.getArgument();
      complex13.log();
      complex10.getField();
      complex12.isInfinite();
      complex3.abs();
      complex2.sinh();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.conjugate();
      complex1.tan();
      complex1.toString();
      complex2.tan();
      complex2.pow(958.2448475404);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      complex1.getArgument();
      Complex complex2 = complex0.ZERO.atan();
      complex0.nthRoot(3491);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.INF.sin();
      complex4.getArgument();
      complex4.negate();
      complex3.INF.createComplex(3491, 377.2465416977);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex0.pow(0.25769591331481934);
      complex0.multiply(2358);
      Complex complex7 = Complex.valueOf(16.921481301902226, Double.NaN);
      complex7.subtract(complex6);
      complex2.toString();
      complex5.conjugate();
      complex3.asin();
      complex5.nthRoot(2358);
      complex7.cosh();
      Complex.valueOf((double) 3491, (-656.737018291669));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3295368.759875412);
      Complex complex1 = Complex.valueOf(3295368.759875412, 3295368.759875412);
      Complex complex2 = complex0.multiply(complex1);
      complex1.asin();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.tan();
      complex4.pow(complex2);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1083.6994134));
      complex0.I.tan();
      Complex complex1 = complex0.atan();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.subtract((-1083.6994134));
      Complex complex3 = new Complex((-1024.0), Double.NaN);
      complex2.subtract(complex3);
      complex2.ZERO.sqrt1z();
      complex1.equals(object0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-971.0), (-971.0));
      Complex complex1 = new Complex(2064.0);
      complex1.negate();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.log();
      complex0.INF.hashCode();
      complex2.hashCode();
      complex2.ZERO.abs();
      complex2.divide(Double.NaN);
      Complex complex3 = complex0.pow(Double.NaN);
      Complex complex4 = Complex.valueOf(370.0);
      complex3.ZERO.abs();
      complex2.readResolve();
      Complex complex5 = complex1.acos();
      Complex.valueOf(1037.868377);
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.valueOf(Double.NaN, 2890.0);
      complex3.multiply(complex7);
      complex4.pow(complex0);
      complex3.isInfinite();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex9.cos();
      complex10.ONE.multiply(Double.NaN);
      complex0.tan();
      complex7.sqrt1z();
      Complex complex11 = complex8.subtract(1.9999999342640997);
      complex11.negate();
      Object object0 = complex6.readResolve();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1506.74511772525, 1506.74511772525);
      complex0.asin();
      Complex.valueOf(1.085945526356281E13);
      Complex complex1 = Complex.ONE;
      // Undeclared exception!
      complex1.nthRoot(1072967873);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7815888.45054882, (-1976.8521));
      Complex complex1 = complex0.asin();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.011140695847862658;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(3295368.759875412);
      Complex complex1 = Complex.valueOf(3295368.759875412, 3295368.759875412);
      complex1.I.hashCode();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.log();
      Complex.valueOf(3295368.759875412, 1453.271663689852);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex0.log();
      complex5.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.log();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex2.sqrt1z();
      complex0.nthRoot(659);
      complex6.ONE.pow(1453.271663689852);
      complex7.I.pow((double) 659);
      complex4.hashCode();
      complex8.readResolve();
      complex6.equals(complex7);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(744.86651245228);
      complex1.tan();
      Complex complex2 = complex1.atan();
      complex0.readResolve();
      complex2.NaN.pow(complex1);
      Complex complex3 = complex0.subtract(4613.701478);
      complex3.sqrt1z();
      Complex complex4 = Complex.valueOf((-1833.351039825839), (-1.0));
      complex2.equals(complex4);
      complex1.divide(complex0);
      complex4.asin();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1064.5715969715814));
      complex1.divide((-3.080380385962424E-286));
      Complex complex2 = new Complex(232.0, (-1064.5715969715814));
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.038910843666258E-7, 24841.85613837422);
      Complex complex1 = complex0.divide(514.3155862);
      Complex complex2 = complex1.NaN.sinh();
      complex0.sinh();
      complex0.cosh();
      complex2.toString();
      Complex complex3 = complex1.atan();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.multiply(3514);
      complex1.asin();
      Complex complex2 = complex0.asin();
      complex2.getField();
      Complex complex3 = new Complex(3514, 3514);
      complex1.equals(complex3);
      Complex complex4 = Complex.I;
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      complex1.abs();
      complex1.I.subtract((-2900.83846672311));
      Complex complex2 = Complex.valueOf((-2900.83846672311), 443.37);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = complex6.I.tanh();
      complex7.I.sqrt();
      complex0.abs();
      Complex.valueOf(Double.NaN, 1.0);
      complex3.readResolve();
      complex5.nthRoot(155);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex2.pow(complex8);
      complex9.ONE.multiply(complex5);
      Complex complex10 = complex5.cosh();
      complex4.pow(complex5);
      Complex complex11 = complex10.negate();
      complex11.I.getArgument();
      Complex complex12 = complex3.conjugate();
      Complex complex13 = complex2.add(complex5);
      complex13.I.divide(complex8);
      complex13.ZERO.getField();
      Complex complex14 = complex11.NaN.asin();
      complex14.I.divide(1.5707963267948966);
      complex10.abs();
      complex4.reciprocal();
      complex11.sinh();
      complex4.multiply(complex0);
      complex1.conjugate();
      complex5.sin();
      complex11.add(complex12);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(283.88072132161926, 283.88072132161926);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = Complex.valueOf((-375.112950552), 0.0);
      complex0.negate();
      Complex complex4 = Complex.ZERO;
      complex4.abs();
      complex2.createComplex(0.0, (-375.112950552));
      complex4.isInfinite();
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex5.subtract(0.0);
      complex6.nthRoot(1314);
      Complex complex7 = Complex.valueOf((double) 1314);
      complex7.getImaginary();
      Complex complex8 = complex0.log();
      complex4.hashCode();
      complex5.sin();
      complex8.readResolve();
      complex4.equals(complex7);
      Complex complex9 = Complex.valueOf((-1444.2784119));
      complex9.getReal();
      Complex complex10 = Complex.NaN;
      complex10.asin();
      Complex complex11 = complex5.log();
      Complex complex12 = complex3.multiply(283.88072132161926);
      complex6.getField();
      complex11.tanh();
      complex1.cos();
      complex1.readResolve();
      try { 
        complex12.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0, (-375.112950552));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.negate();
      complex0.abs();
      Complex complex6 = complex5.createComplex(20.0, 284.18520552623);
      Complex complex7 = new Complex(0.0);
      complex7.isInfinite();
      complex4.add(complex3);
      Complex complex8 = complex5.subtract(2.0);
      complex8.nthRoot(254);
      Complex complex9 = Complex.valueOf(2.0);
      complex4.getImaginary();
      complex0.log();
      complex3.hashCode();
      complex6.sin();
      complex9.readResolve();
      complex4.equals("");
      complex2.getReal();
      complex4.asin();
      complex4.log();
      complex8.multiply(0.0);
      complex0.getField();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 675.074);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.cos();
      complex1.nthRoot(1);
      complex0.nthRoot(37);
      complex1.hashCode();
      complex3.abs();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.divide(complex2);
      complex0.asin();
      complex5.getField();
      complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4110.83228161728);
      complex0.ONE.hashCode();
      complex0.NaN.hashCode();
      Complex complex1 = complex0.NaN.reciprocal();
      double double0 = (-37.4551191);
      Complex.valueOf((-37.4551191));
      Complex complex2 = complex1.NaN.reciprocal();
      complex2.NaN.subtract((-37.4551191));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf((-1976.8521), 6.283185307179586);
      complex1.tan();
      complex0.atan();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex1.subtract(195.7);
      complex3.NaN.getArgument();
      Complex complex4 = complex3.sqrt1z();
      complex1.ZERO.log();
      complex4.ONE.subtract(6.283185307179586);
      complex2.multiply(27301.094867604308);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(23.28793325898401);
      Complex complex1 = Complex.valueOf((-1976.8521), 6.283185307179586);
      complex1.tan();
      complex0.atan();
      complex1.readResolve();
      Complex complex2 = complex1.subtract(195.7);
      complex2.sqrt1z();
      Complex complex3 = Complex.I;
      complex3.getArgument();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.multiply(3514);
      complex1.asin();
      Complex complex2 = complex0.asin();
      Complex complex3 = new Complex(Double.NaN);
      Complex complex4 = complex3.sin();
      complex4.equals(complex2);
      complex2.getReal();
      complex4.asin();
      complex1.log();
      complex3.multiply(1.5707963267948966);
      complex0.getField();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(3.691814001080034E75);
      Complex.valueOf(0.0656966151422349, 750.2265675705182);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.asin();
      complex3.sqrt1z();
      complex4.tan();
      complex1.multiply(1.216515209074735);
      Complex complex5 = Complex.INF;
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = Complex.INF;
      complex0.nthRoot(37);
      Complex complex4 = complex0.negate();
      complex4.NaN.abs();
      complex1.INF.createComplex(20.0, 0.0);
      complex0.isInfinite();
      complex3.add(complex0);
      Complex.valueOf(102.5098933908096, 102.5098933908096);
      complex2.abs();
      complex1.add(337.30281120092);
      complex0.reciprocal();
      Complex complex5 = Complex.valueOf(Double.NaN, 102.5098933908096);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = Complex.valueOf((-4830.7), 3376.4903);
      complex1.ONE.add(2420.83314054);
      Complex complex2 = complex1.I.sin();
      complex2.INF.sqrt1z();
      complex0.INF.abs();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.conjugate();
      complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = Complex.valueOf((-375.112950552), (-375.112950552));
      complex0.nthRoot(37);
      Complex complex4 = complex0.negate();
      complex4.NaN.abs();
      complex1.INF.createComplex(20.0, 0.0);
      complex0.isInfinite();
      complex3.ZERO.conjugate();
      complex3.add(complex0);
      Complex complex5 = complex2.subtract((-337.537));
      complex3.asin();
      complex5.getField();
      complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.multiply(3514);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.asin();
      complex0.nthRoot(3514);
      Complex complex4 = Complex.valueOf(573.8134358530646);
      complex2.getImaginary();
      Complex complex5 = complex1.log();
      Complex complex6 = Complex.INF;
      complex6.hashCode();
      Complex complex7 = complex3.sin();
      complex0.readResolve();
      complex0.equals(complex5);
      complex6.getReal();
      complex4.asin();
      Complex complex8 = complex3.log();
      complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf((-3293.0047957950246), Double.POSITIVE_INFINITY);
      complex9.getField();
      complex8.getField();
      complex6.tanh();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = Complex.valueOf((-375.112950552), (-375.112950552));
      complex0.nthRoot(37);
      Complex complex4 = complex0.negate();
      complex4.NaN.abs();
      Complex complex5 = complex1.INF.createComplex(20.0, 0.0);
      complex0.isInfinite();
      Complex complex6 = complex3.add(complex0);
      complex2.subtract((-337.537));
      complex6.NaN.nthRoot(254);
      Complex.valueOf((double) 254);
      complex3.getImaginary();
      complex5.add(Double.NaN);
      complex4.reciprocal();
      Complex complex7 = complex2.multiply((-337.537));
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      double double0 = (-375.112950552);
      Complex complex3 = complex0.add(complex2);
      complex0.cos();
      int int0 = 37;
      int int1 = 304;
      complex3.nthRoot(304);
      Complex complex4 = Complex.valueOf((double) 304, (double) 37);
      complex4.nthRoot(959);
      complex0.hashCode();
      complex2.abs();
      complex1.sinh();
      Complex complex5 = Complex.NaN;
      try { 
        complex5.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(2147453691);
      complex0.getField();
      complex0.I.cosh();
      Complex complex1 = complex0.divide((-3057.343));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.createComplex((-140708.72567182718), (-2530.939408191877));
      complex2.NaN.atan();
      Complex complex4 = complex3.INF.reciprocal();
      complex3.INF.subtract(complex1);
      complex3.sinh();
      complex4.divide(complex2);
      complex3.sqrt1z();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1422.8409107125187));
      Complex complex1 = Complex.valueOf(0.499235272, (-1422.8409107125187));
      complex1.multiply(complex0);
      complex1.sin();
      complex1.pow(20.0);
      Complex.valueOf(800.57514);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = complex0.divide(0.0);
      complex1.I.subtract(0.0);
      Complex complex2 = Complex.valueOf((-375.112950552), (-375.112950552));
      complex0.nthRoot(37);
      Complex complex3 = complex0.negate();
      complex3.NaN.abs();
      Complex complex4 = complex1.INF.createComplex(20.0, 0.0);
      complex0.isInfinite();
      complex2.add(complex0);
      Complex complex5 = Complex.NaN;
      complex4.multiply(12);
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.asin();
      complex5.asin();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = Complex.valueOf((-375.112950552), (-375.112950552));
      complex0.nthRoot(37);
      Complex complex4 = complex0.negate();
      complex4.NaN.abs();
      complex1.INF.createComplex(20.0, 0.0);
      complex0.isInfinite();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex2.subtract((-337.537));
      complex5.NaN.nthRoot(254);
      Complex.valueOf((double) 254);
      complex3.getImaginary();
      Complex complex7 = complex6.log();
      complex7.NaN.hashCode();
      complex5.sin();
      complex2.equals(complex4);
      complex0.getReal();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex8.ZERO.log();
      complex9.ONE.divide(complex3);
      complex9.ZERO.multiply(0.0);
      Complex.valueOf(0.0);
      complex4.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.asin();
      Complex complex2 = complex0.sqrt1z();
      complex1.tan();
      Complex complex3 = complex0.multiply((-189.2332557));
      complex3.add((-189.2332557));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4100.733192434363));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      complex1.ONE.tanh();
      complex2.tan();
      complex0.multiply(complex2);
      Complex complex3 = complex0.sin();
      complex3.INF.readResolve();
      complex0.pow(253.0);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = Complex.valueOf((-375.112950552), (-375.112950552));
      complex0.nthRoot(37);
      Complex complex4 = complex0.negate();
      complex4.NaN.abs();
      Complex complex5 = complex1.INF.createComplex(20.0, 0.0);
      complex0.isInfinite();
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex2.subtract((-337.537));
      complex6.NaN.nthRoot(254);
      Complex.valueOf((double) 254);
      complex3.getImaginary();
      Complex complex8 = complex7.log();
      complex8.NaN.hashCode();
      complex6.sin();
      complex2.equals(complex4);
      complex0.getReal();
      Complex complex9 = complex5.add(Double.NaN);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.cos();
      complex1.nthRoot(37);
      complex0.nthRoot(37);
      complex2.hashCode();
      complex0.abs();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.sinh();
      complex5.divide(complex3);
      Complex complex7 = complex4.divide(1453.271663689852);
      Complex complex8 = complex2.pow(complex1);
      complex3.log();
      Complex complex9 = complex6.subtract(complex4);
      Complex complex10 = complex2.multiply(1.0000000056351737);
      complex9.pow(2.0);
      Complex complex11 = Complex.INF;
      complex11.abs();
      complex1.add((double) 37);
      complex5.getReal();
      Complex complex12 = complex5.tan();
      complex8.sqrt();
      complex12.subtract(complex8);
      complex7.multiply(complex0);
      complex7.readResolve();
      complex6.pow(0.0);
      Complex complex13 = complex10.acos();
      complex3.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.getArgument();
      Complex complex3 = complex1.subtract(Double.NaN);
      complex3.isNaN();
      complex1.reciprocal();
      complex0.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex2.I.divide(complex0);
      complex2.ZERO.getArgument();
      complex2.INF.hashCode();
      Complex complex4 = complex1.I.add((-3804.0));
      complex4.ONE.cosh();
      Complex complex5 = complex2.NaN.subtract(complex0);
      complex5.I.conjugate();
      Complex complex6 = Complex.valueOf(396.658, 6.283185307179586);
      complex6.ZERO.asin();
      Complex complex7 = complex2.INF.sqrt();
      complex2.asin();
      complex7.ONE.add(0.0);
      complex0.getReal();
      Complex complex8 = complex1.sqrt1z();
      complex8.ZERO.sin();
      complex8.INF.exp();
      complex8.ONE.log();
      complex1.subtract(6.283185307179586);
      Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex0.sinh();
      complex3.INF.subtract(complex8);
      Complex complex10 = complex9.negate();
      Complex.valueOf((-3804.0));
      complex3.sqrt();
      Complex complex11 = complex0.sqrt1z();
      complex1.divide(complex11);
      complex1.sin();
      complex10.asin();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(3.691814001080034E75);
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex1.INF.add(complex2);
      Complex complex5 = complex3.ZERO.cos();
      complex0.nthRoot(37);
      complex0.nthRoot(37);
      complex0.hashCode();
      complex2.abs();
      Complex complex6 = complex1.sinh();
      complex2.ZERO.divide(complex0);
      Complex complex7 = complex6.ZERO.divide(3.691814001080034E75);
      complex1.ONE.pow(complex5);
      complex7.ZERO.log();
      Complex complex8 = complex2.NaN.subtract(complex7);
      Complex complex9 = complex8.multiply(3.691814001080034E75);
      complex9.INF.atan();
      complex8.NaN.pow(3.691814001080034E75);
      complex3.abs();
      Complex complex10 = complex4.add((double) 37);
      complex1.getReal();
      Complex complex11 = complex10.tan();
      complex2.sqrt();
      complex6.subtract(complex4);
      complex3.multiply(complex11);
      complex5.readResolve();
      complex10.pow((-1.0));
      complex1.acos();
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = Complex.valueOf(3.691814001080034E75);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.cos();
      complex4.ONE.conjugate();
      complex2.nthRoot(37);
      complex1.nthRoot(1341);
      complex2.hashCode();
      complex2.abs();
      Complex complex5 = complex4.sinh();
      complex0.divide(complex3);
      Complex complex6 = complex4.divide((double) 1341);
      Complex complex7 = complex4.pow(complex5);
      complex6.log();
      Complex complex8 = complex3.subtract(complex5);
      Complex complex9 = complex7.multiply(1.483734774684272E78);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.pow((double) 37);
      complex7.abs();
      complex3.add(284.18520552623);
      complex5.getReal();
      complex2.tan();
      complex9.sqrt();
      Complex complex12 = complex6.subtract(complex3);
      Complex complex13 = complex11.multiply(complex12);
      complex2.readResolve();
      Complex complex14 = complex13.pow((double) 1341);
      complex8.acos();
      complex6.equals(complex7);
      complex14.multiply(1568);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.asin();
      complex2.NaN.sqrt1z();
      complex1.tan();
      Complex complex3 = complex2.add(0.0);
      complex3.getReal();
      Complex complex4 = Complex.valueOf(0.5045560598373413);
      Complex complex5 = complex4.tan();
      complex2.sqrt();
      complex3.subtract(complex1);
      Complex complex6 = Complex.valueOf(38.47841760435743);
      complex6.multiply(complex5);
      complex3.readResolve();
      complex6.INF.getArgument();
      Complex complex7 = Complex.NaN;
      complex7.pow(0.0);
      complex6.acos();
      Object object0 = new Object();
      complex0.equals(object0);
      complex6.pow(2.6761388778686523);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.ONE.getArgument();
      Complex complex2 = complex0.conjugate();
      complex1.getArgument();
      Complex complex3 = complex0.multiply(3514);
      Complex complex4 = complex2.cosh();
      complex3.asin();
      complex3.isNaN();
      complex2.add((double) 3514);
      Complex complex5 = complex1.pow((-2554.137376869149));
      complex5.getField();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf((-124.082), (-588.28));
      complex1.I.abs();
      Complex complex4 = complex3.pow(428.6350342162832);
      complex4.abs();
      complex0.add(1.0);
      complex4.getReal();
      Complex complex5 = complex4.tan();
      complex0.sqrt();
      complex1.subtract(complex5);
      complex5.multiply(complex2);
      complex3.readResolve();
      Complex complex6 = Complex.I;
      complex6.pow((-1434.381));
      complex6.acos();
      complex5.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.tan();
      Complex complex1 = complex0.subtract(0.0);
      complex1.isNaN();
      complex0.pow(1956.73698675);
      complex1.readResolve();
      complex1.multiply(585.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.ONE.getArgument();
      Complex complex2 = complex0.conjugate();
      complex1.getArgument();
      complex2.isInfinite();
      Complex complex3 = complex1.subtract(-0.0);
      Complex complex4 = Complex.ONE;
      complex4.nthRoot(1385);
      Complex complex5 = Complex.valueOf(20.0);
      complex1.getImaginary();
      Complex complex6 = complex2.log();
      complex4.hashCode();
      complex3.sin();
      complex3.equals(complex6);
      complex5.getReal();
      complex6.asin();
      complex4.log();
      complex5.multiply(527.9208247104252);
      complex1.getField();
      complex0.getField();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex0.ZERO.toString();
      complex1.ONE.getArgument();
      Complex complex2 = complex0.conjugate();
      complex1.getArgument();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = Complex.valueOf((-375.112950552), (-375.112950552));
      complex3.getArgument();
      complex3.multiply(179);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex2.asin();
      complex5.isNaN();
      Complex complex6 = Complex.INF;
      complex6.add((-577.860553945025));
      complex4.pow(20.0);
      complex0.NaN.nthRoot(179);
      complex3.getField();
      complex2.negate();
      complex2.subtract(284.18520552623);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1282.92);
      Complex complex1 = complex0.INF.multiply((-3528.2370162316));
      Complex complex2 = complex1.ZERO.negate();
      Complex.valueOf(0.0);
      complex1.subtract(1282.92);
      complex1.ZERO.sqrt();
      Complex complex3 = complex0.subtract(0.22157981991767883);
      Complex complex4 = complex3.NaN.sqrt1z();
      complex0.equals(complex3);
      complex0.isNaN();
      complex3.ZERO.exp();
      complex3.abs();
      complex3.isNaN();
      Complex complex5 = complex4.sqrt();
      complex4.toString();
      complex5.atan();
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex2.I.divide(complex0);
      complex2.ZERO.getArgument();
      complex2.INF.hashCode();
      Complex complex4 = complex1.I.add((-3804.0));
      complex4.ONE.cosh();
      Complex complex5 = complex2.NaN.subtract(complex0);
      complex5.I.conjugate();
      Complex.valueOf(396.658, 6.283185307179586);
      Complex complex6 = complex2.INF.sqrt();
      complex2.asin();
      complex6.ONE.add(0.0);
      complex0.getReal();
      Complex complex7 = complex1.sqrt1z();
      complex7.ZERO.sin();
      complex7.INF.exp();
      complex7.ONE.log();
      complex1.subtract(6.283185307179586);
      Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex0.sinh();
      complex3.INF.subtract(complex7);
      Complex complex9 = complex8.negate();
      Complex.valueOf((-3804.0));
      complex3.sqrt();
      Complex complex10 = complex0.sqrt1z();
      complex1.divide(complex10);
      complex1.sin();
      complex9.asin();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = Complex.valueOf((-4830.69997548387), 3376.4902992694015);
      complex1.ONE.add(2420.83314054);
      complex1.I.sin();
      complex0.INF.abs();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.negate();
      complex2.ZERO.cosh();
      Complex complex3 = Complex.valueOf(420.4313785, (-1184.4));
      complex3.INF.divide(420.4313785);
      complex3.NaN.asin();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex5.I.multiply(1474.84798174393);
      complex6.INF.sqrt();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex8.I.sqrt();
      complex9.NaN.tanh();
      complex8.INF.multiply(0.0);
      complex7.reciprocal();
      complex1.abs();
      Complex complex10 = complex4.conjugate();
      complex10.I.subtract(1.0327515602111816);
      Complex complex11 = complex2.asin();
      complex11.divide((-1184.4));
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf((-124.082), (-588.28));
      complex1.I.abs();
      Complex complex4 = complex2.NaN.add(0.0);
      complex4.ONE.reciprocal();
      complex0.multiply((-835.0));
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1422.8409107125187));
      Complex complex1 = Complex.valueOf(0.49923527240753174, (-1422.8409107125187));
      Complex complex2 = complex0.tanh();
      complex1.abs();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.I.sqrt();
      complex1.ZERO.divide(complex3);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.ZERO.subtract(complex4);
      Complex complex6 = complex0.sqrt1z();
      complex6.sqrt1z();
      complex4.NaN.getField();
      complex5.divide(3166.841);
      Complex complex7 = Complex.valueOf((-198.4381), 20.0);
      complex5.readResolve();
      Complex complex8 = Complex.valueOf((-198.4381));
      Complex complex9 = complex8.I.tan();
      complex8.I.sqrt1z();
      complex0.INF.createComplex(1650.915344655, 1650.915344655);
      Complex complex10 = complex7.NaN.acos();
      complex8.INF.tanh();
      Complex complex11 = complex1.pow(20.0);
      complex11.multiply(386);
      Complex complex12 = complex7.cos();
      complex12.negate();
      complex0.tanh();
      complex3.acos();
      complex9.sqrt();
      complex10.negate();
      complex12.negate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(284.18520552623, 284.18520552623);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      Complex complex3 = Complex.valueOf((-375.112950552), (-375.112950552));
      complex0.nthRoot(37);
      Complex complex4 = complex0.negate();
      complex4.NaN.abs();
      complex1.INF.createComplex(20.0, 0.0);
      complex0.isInfinite();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex2.subtract((-337.537));
      complex5.NaN.nthRoot(254);
      Complex complex7 = Complex.valueOf((double) 254);
      complex3.getImaginary();
      Complex complex8 = complex6.log();
      complex8.NaN.hashCode();
      complex5.sin();
      complex2.equals(complex4);
      complex0.getReal();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex9.ZERO.log();
      Complex complex11 = complex10.ZERO.multiply(0.0);
      complex11.ZERO.getField();
      complex0.getField();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-6.456588023278983E-253), (-6.456588023278983E-253));
      complex0.ONE.toString();
      complex0.getField();
      complex0.isInfinite();
      complex0.ONE.sinh();
      Complex complex1 = complex0.ONE.tanh();
      complex0.ONE.negate();
      complex1.NaN.sin();
      Complex.valueOf((-6.456588023278983E-253), (-6.456588023278983E-253));
      complex0.subtract((-4520.0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1127.3509059977048, 1127.3509059977048);
      Complex complex1 = Complex.valueOf(1127.3509059977048);
      complex0.I.divide(complex1);
      Complex complex2 = complex0.exp();
      complex2.ONE.divide(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.tanh();
      complex4.I.asin();
      Complex complex5 = complex1.add(Double.POSITIVE_INFINITY);
      complex4.divide(Double.POSITIVE_INFINITY);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.ZERO.multiply(1.3286716938018799);
      complex3.ZERO.cos();
      Complex complex4 = complex2.pow(40.017);
      complex2.subtract(1.3286716938018799);
      Complex complex5 = complex0.ZERO.tan();
      Complex complex6 = complex5.I.subtract(1.3286716938018799);
      Complex complex7 = complex0.multiply(1);
      complex7.I.tan();
      complex2.abs();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex8.INF.reciprocal();
      complex9.ZERO.abs();
      complex0.subtract(complex6);
      complex4.nthRoot(1);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.INF.divide(1.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2930091396008281E-8), (-1.2930091396008281E-8));
      complex0.getArgument();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.ONE.multiply(0);
      Complex complex3 = complex0.sin();
      double double0 = 0.0;
      Complex complex4 = complex3.multiply(0.0);
      complex4.INF.exp();
      Complex complex5 = complex3.NaN.multiply((-2.356194490192345));
      Complex complex6 = complex5.ZERO.add((-738.353));
      complex0.getField();
      Complex complex7 = complex2.sin();
      complex5.toString();
      complex0.subtract(complex5);
      complex6.tan();
      Complex complex8 = complex7.cosh();
      complex8.NaN.readResolve();
      Complex complex9 = complex1.add((-4617.74829846));
      complex1.sinh();
      complex8.divide(0.0);
      Complex complex10 = complex2.negate();
      complex10.I.reciprocal();
      complex10.hashCode();
      complex5.readResolve();
      complex10.acos();
      complex9.getReal();
      complex10.add((-738.353));
      complex7.sqrt1z();
      Complex complex11 = complex0.sqrt();
      complex5.isInfinite();
      complex7.multiply(0);
      complex2.divide(complex11);
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.INF.reciprocal();
      complex3.I.getField();
      Complex complex4 = complex2.NaN.multiply(1590);
      complex4.ZERO.atan();
      complex4.NaN.readResolve();
      complex0.isNaN();
      complex0.ONE.divide(complex2);
      complex0.isNaN();
      complex0.isInfinite();
      complex2.ZERO.reciprocal();
      complex0.toString();
      Complex complex5 = complex2.divide(0.0);
      Complex complex6 = complex2.subtract(complex0);
      Complex complex7 = complex5.reciprocal();
      complex7.I.tanh();
      complex7.ONE.pow((-3738.402));
      complex7.ZERO.createComplex(0.0, 0.0);
      complex1.getReal();
      complex5.ONE.add(0.7071067811865476);
      Complex complex8 = complex7.exp();
      complex8.I.readResolve();
      complex7.multiply(0.7071067811865476);
      complex5.conjugate();
      complex2.add((double) 1590);
      complex5.add(complex3);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(3553.7530051254175);
      complex0.ONE.divide(complex1);
      Complex complex2 = Complex.valueOf((-700.7401491105893), 0.0);
      Complex complex3 = complex0.pow(complex2);
      complex3.INF.exp();
      complex3.exp();
      try { 
        complex0.NaN.nthRoot((-2883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,883
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(868.8628570980477, 868.8628570980477);
      complex0.getField();
      Complex complex1 = Complex.I;
      complex0.ZERO.subtract(complex1);
      Complex complex2 = Complex.valueOf((-798.05));
      Complex complex3 = complex0.createComplex(868.8628570980477, (-798.05));
      complex2.subtract(complex1);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.INF.nthRoot(3999);
      complex2.divide(complex4);
      Complex complex5 = complex3.ZERO.sqrt();
      complex5.INF.nthRoot(1029);
      complex3.createComplex(0.0, 0.0);
      Complex complex6 = complex4.asin();
      Complex.valueOf(Double.NaN);
      complex6.divide(0.0);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(253.0);
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.nthRoot(1341);
      complex1.I.getArgument();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.getArgument();
      Complex complex1 = Complex.INF;
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.getField();
      complex0.toString();
      complex0.readResolve();
      complex0.conjugate();
      Complex complex3 = Complex.valueOf(0.7853981633974483, 0.42353010177612305);
      complex3.asin();
      Complex.valueOf(1448.6248494266, (-2074.24740679));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex1.NaN.atan();
      complex1.I.pow(0.0);
      Complex complex3 = complex0.pow(1.2244183812423448E-7);
      complex0.tanh();
      complex3.pow(1.2244183812423448E-7);
      complex2.cos();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      complex2.NaN.getArgument();
      complex2.toString();
      Complex complex3 = complex0.divide(complex1);
      complex3.ONE.getField();
      complex3.ZERO.sinh();
      complex3.ZERO.cosh();
      complex3.INF.sinh();
      Complex complex4 = complex3.asin();
      complex0.INF.getArgument();
      complex4.add(354.1927252);
      complex0.getImaginary();
      try { 
        complex4.nthRoot((-741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -741
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.asin();
      complex2.NaN.sqrt1z();
      Complex complex3 = complex1.tan();
      complex3.ONE.multiply((-189.2332557));
      Complex complex4 = complex0.add(0.0);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(3.691814001080034E75);
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex1.INF.add(complex2);
      Complex complex5 = complex3.ZERO.cos();
      complex0.nthRoot(37);
      complex0.nthRoot(37);
      complex0.hashCode();
      complex2.abs();
      Complex complex6 = complex1.sinh();
      complex2.ZERO.divide(complex0);
      Complex complex7 = complex6.ZERO.divide(3.691814001080034E75);
      complex1.ONE.pow(complex5);
      complex7.ZERO.log();
      Complex complex8 = complex2.NaN.subtract(complex7);
      complex8.multiply(3.691814001080034E75);
      complex8.NaN.pow(3.691814001080034E75);
      complex3.abs();
      Complex complex9 = complex4.add((double) 37);
      complex1.getReal();
      Complex complex10 = complex9.tan();
      complex2.sqrt();
      complex6.subtract(complex4);
      complex3.multiply(complex10);
      complex5.readResolve();
      complex9.pow((-1.0));
      complex1.acos();
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1358.5760425972967);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2454.12100498693));
      Complex complex1 = complex0.ONE.createComplex((-2454.12100498693), (-2454.12100498693));
      Complex complex2 = complex1.NaN.multiply(723);
      Complex complex3 = complex0.NaN.cosh();
      complex3.I.subtract(0.0);
      complex3.INF.sqrt1z();
      Complex complex4 = complex3.INF.pow((-2454.12100498693));
      Complex complex5 = complex4.INF.divide(0.0);
      complex3.ZERO.tan();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.negate();
      complex7.I.getArgument();
      complex3.abs();
      Complex complex8 = complex5.tanh();
      complex0.INF.acos();
      complex8.INF.tan();
      complex5.sinh();
      complex4.tanh();
      complex1.isNaN();
      complex2.nthRoot(723);
      complex8.acos();
      complex2.nthRoot(2171);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-1657.7591), (-1657.7591));
      Complex complex1 = Complex.valueOf(891.0, (-1657.7591));
      complex1.ZERO.abs();
      complex1.ZERO.cos();
      complex0.hashCode();
      complex0.ZERO.createComplex(891.0, 715.19);
      try { 
        complex0.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3371.3354);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.INF.subtract(0.0);
      complex1.NaN.getArgument();
      complex0.I.add(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex3.NaN.sinh();
      complex1.ONE.divide(complex4);
      complex2.cosh();
      complex3.isInfinite();
      Complex complex6 = complex2.subtract(6.52252321321176E-8);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex0.multiply(complex6);
      Complex complex9 = complex1.log();
      complex9.INF.asin();
      complex7.pow((-4607.5894654));
      complex0.sin();
      Complex complex10 = complex5.acos();
      complex10.toString();
      complex3.isInfinite();
      Complex complex11 = complex2.exp();
      complex11.INF.pow(complex8);
      Complex.valueOf(0.0);
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.add(complex0);
      complex0.ONE.readResolve();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex0.add(complex4);
      complex5.I.add(complex1);
      Complex complex6 = Complex.NaN;
      complex6.ONE.multiply(complex4);
      complex6.log();
      Complex complex7 = complex3.pow(complex6);
      complex6.ONE.hashCode();
      complex2.ONE.toString();
      Complex complex8 = complex7.cosh();
      complex0.cos();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex10.ONE.tanh();
      complex10.ZERO.readResolve();
      complex2.getImaginary();
      complex3.readResolve();
      complex10.I.negate();
      complex8.getArgument();
      complex11.createComplex(0.0, Double.NaN);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sin();
      complex1.ZERO.createComplex(0.0, (-139.58026425663897));
      complex0.NaN.toString();
      try { 
        complex1.INF.nthRoot((-228));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -228
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.ONE.getArgument();
      Complex complex2 = complex0.conjugate();
      complex1.getArgument();
      Complex complex3 = complex0.multiply(3514);
      complex2.cosh();
      Complex complex4 = complex3.asin();
      complex3.isNaN();
      Complex complex5 = complex2.add((double) 3514);
      complex5.ONE.pow(0.0);
      complex4.getField();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(1378.131644648023, 1378.131644648023);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.divide(0.0);
      Complex complex2 = complex0.conjugate();
      complex2.hashCode();
      complex2.isInfinite();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.cosh();
      complex3.readResolve();
      Complex complex5 = complex4.asin();
      complex5.createComplex(1378.131644648023, 0.0);
      complex5.negate();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(20.0);
      complex0.I.exp();
      Complex complex2 = complex0.divide(complex1);
      complex2.isNaN();
      complex1.subtract(20.0);
      complex1.INF.getArgument();
      Complex complex3 = complex2.pow(20.0);
      complex1.getField();
      Complex complex4 = complex1.subtract((-118.0));
      complex3.sinh();
      complex1.getReal();
      complex4.nthRoot(2213);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.pow(0.0);
      complex1.INF.toString();
      Complex complex2 = complex0.createComplex(3.706956710275979E-120, 782.12568963487);
      Complex complex3 = complex2.ONE.multiply(complex1);
      complex3.toString();
      complex2.ONE.getArgument();
      complex2.acos();
      complex0.I.acos();
      complex0.getReal();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex4.INF.pow((-3.2666060441373307E-8));
      complex5.NaN.readResolve();
      Complex complex7 = complex5.INF.multiply(complex4);
      Complex complex8 = complex5.atan();
      Complex complex9 = complex8.NaN.negate();
      complex8.I.getArgument();
      complex7.equals(complex5);
      complex6.readResolve();
      complex6.isInfinite();
      complex6.getImaginary();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(737.1263580691, (-5.635173762130303E-9));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.NaN.reciprocal();
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex3.ONE.sqrt();
      complex4.ONE.nthRoot(879);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex1.tan();
      complex5.sqrt1z();
      Complex complex7 = complex1.multiply((-20.0));
      complex7.ONE.getField();
      Complex complex8 = complex0.atan();
      complex8.cos();
      Complex complex9 = Complex.valueOf((-5.635173762130303E-9));
      complex1.acos();
      Complex complex10 = complex0.reciprocal();
      complex10.I.createComplex(6.283185307179586, 2.7593424989059015E-8);
      complex6.sin();
      complex9.getField();
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.subtract((-4.179048566709334E-9));
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.ONE.divide(645.0);
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.ZERO.atan();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.divide(0.0);
      Complex complex9 = complex6.tanh();
      complex2.isInfinite();
      complex0.getImaginary();
      Complex complex10 = complex6.ZERO.reciprocal();
      Complex complex11 = complex2.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex0.I.log();
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      Complex complex13 = complex3.tan();
      Complex complex14 = complex13.I.tanh();
      complex14.ZERO.readResolve();
      Complex complex15 = Complex.valueOf((-4.179048566709334E-9));
      double double0 = complex13.getArgument();
      assertEquals(1.2434025209108033, double0, 0.01);
      
      Complex complex16 = complex2.cos();
      Complex complex17 = complex16.ONE.log();
      Complex complex18 = complex17.I.tanh();
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertEquals(1.557407724654902, complex18.getImaginary(), 0.01);
      
      complex8.hashCode();
      complex4.getImaginary();
      double double1 = complex17.abs();
      assertEquals(0.0, double1, 0.01);
      
      Complex complex19 = complex4.sinh();
      Complex complex20 = complex19.ONE.multiply(0.0);
      Complex complex21 = complex20.ZERO.tan();
      complex15.conjugate();
      complex1.isInfinite();
      Complex complex22 = complex5.sinh();
      Complex complex23 = complex22.ZERO.multiply(complex15);
      assertTrue(complex23.equals((Object)complex9));
      assertEquals(-0.0, complex23.getReal(), 0.01);
      
      Complex complex24 = complex20.multiply(1007);
      assertTrue(complex24.equals((Object)complex7));
      assertEquals(1.0000000041790487, complex2.getReal(), 0.01);
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      
      complex8.multiply(0.0);
      assertTrue(complex8.equals((Object)complex11));
      assertSame(complex8, complex10);
      assertFalse(complex8.equals((Object)complex21));
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.ZERO.abs();
      Complex complex2 = complex0.I.tanh();
      complex0.getField();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.NaN.pow(complex0);
      Complex complex6 = complex1.INF.cosh();
      Complex complex7 = complex6.divide(complex2);
      Complex complex8 = complex6.pow(complex1);
      Complex complex9 = complex8.INF.sqrt1z();
      assertTrue(complex9.equals((Object)complex7));
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getImaginary(), 0.01);
      
      complex4.getReal();
      Complex complex10 = complex2.log();
      assertEquals(0.4430227241169225, complex10.getReal(), 0.01);
      
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex0.multiply(complex4);
      Complex complex13 = complex12.ONE.sin();
      Complex complex14 = complex13.I.atan();
      assertEquals(0.16143936157119557, complex12.getImaginary(), 0.01);
      
      Complex complex15 = complex5.cos();
      assertSame(complex15, complex14);
      
      Complex complex16 = complex5.add(0.0);
      assertSame(complex5, complex16);
      
      Complex complex17 = complex0.add(complex3);
      assertTrue(complex3.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex0));
      assertEquals(1.0, complex17.getImaginary(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
  }
}
