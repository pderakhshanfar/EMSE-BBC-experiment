/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:12:15 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.pow(914.0030078390197);
      complex1.tanh();
      try { 
        complex2.nthRoot((-2512));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,512
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-531.474495989872), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf(1513.6785);
      Complex complex4 = complex3.multiply(Double.POSITIVE_INFINITY);
      complex1.nthRoot(3647);
      complex1.pow(1513.6785);
      complex0.hashCode();
      Complex complex5 = Complex.INF;
      complex5.nthRoot(37);
      complex0.multiply((-531.474495989872));
      Complex complex6 = new Complex((-0.8364288087425561), 1513.6785);
      complex6.conjugate();
      Complex complex7 = complex3.tan();
      complex7.cosh();
      complex4.multiply(37);
      complex1.getField();
      complex5.isNaN();
      complex1.isInfinite();
      complex2.nthRoot(1177);
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.NaN;
      complex9.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-1307.5795253776532), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.abs();
      Complex complex2 = new Complex((-2623.2576177071));
      complex2.tan();
      Complex complex3 = complex0.divide((-3609.4138792297));
      Complex complex4 = complex1.asin();
      complex4.sqrt();
      complex2.readResolve();
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3108.7));
      Complex complex1 = complex0.pow((-3108.7));
      Complex complex2 = complex0.ZERO.asin();
      complex2.ZERO.conjugate();
      Complex complex3 = complex1.subtract((-3108.7));
      complex0.toString();
      Complex complex4 = complex2.NaN.createComplex(1.0, 833.0);
      Complex complex5 = complex4.NaN.add(complex1);
      complex5.ONE.pow((-1.9872713979884691E43));
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.NaN.cosh();
      complex0.INF.sinh();
      complex7.ONE.subtract(2106.6603344);
      complex7.INF.divide(complex6);
      Complex complex8 = complex1.log();
      complex0.tan();
      complex1.sin();
      complex3.multiply(complex5);
      complex8.sqrt();
      complex2.multiply((-2034));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.INF;
      complex2.asin();
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      complex0.sin();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      complex2.pow(complex1);
      Complex complex3 = new Complex(1883.3066266395, 1.0);
      Complex complex4 = complex3.exp();
      complex1.acos();
      Complex complex5 = complex4.acos();
      complex5.sinh();
      complex4.multiply(complex0);
      complex1.subtract(complex0);
      Complex complex6 = complex3.divide(complex2);
      complex4.multiply(653);
      Complex complex7 = complex2.exp();
      Complex complex8 = new Complex(268.2141259, 154.91);
      complex8.sqrt1z();
      complex6.subtract(complex8);
      complex7.nthRoot(653);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.divide(Double.POSITIVE_INFINITY);
      // Undeclared exception!
      complex0.nthRoot(2145541981);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = new Complex((-4940.335));
      complex0.tanh();
      Complex complex2 = Complex.valueOf((double) 0, Double.POSITIVE_INFINITY);
      complex2.multiply(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.readResolve();
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2851.6706909005106), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(complex1);
      complex1.subtract(complex2);
      Complex complex3 = new Complex(0.0);
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.tan();
      complex2.tanh();
      Complex complex3 = new Complex((-20.0), (-3088.36884));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3070830.561112333, (-3251.9585862899));
      Complex complex1 = new Complex((-2605.24), Double.POSITIVE_INFINITY);
      complex0.INF.divide(complex1);
      complex0.ZERO.exp();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = new Complex(1212.1675645686464, 2.623848491704216E-9);
      Complex complex3 = complex1.multiply(complex2);
      complex3.divide(595.9);
      Complex complex4 = complex2.asin();
      complex4.add(complex0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex1.NaN.tan();
      complex0.INF.add(Double.POSITIVE_INFINITY);
      complex1.INF.add(complex0);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
      Complex complex1 = complex0.add(0.7071067811865476);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf(675.2002243, 20.0);
      complex3.sqrt1z();
      Complex complex5 = complex1.multiply((-1392));
      Complex complex6 = complex5.sinh();
      Complex complex7 = new Complex((-2.3450920230816267E-8));
      complex6.tanh();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.divide(Double.NaN);
      complex1.asin();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 1894.85567318071);
      complex0.add(1.0368403169781264E257);
      Complex complex1 = complex0.exp();
      complex1.INF.divide(1.0368403169781264E257);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex.valueOf((-4940.335), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-4940.335), (-4940.335));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.I;
      complex2.NaN.log();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.add((-4940.335));
      complex1.acos();
      complex3.negate();
      complex3.getReal();
      Complex complex5 = complex4.tan();
      complex5.atan();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.I;
      complex1.atan();
      complex1.ONE.nthRoot(297);
      Complex.valueOf((double) 297, (-3310.969779));
      complex1.subtract((double) 297);
      Complex complex2 = Complex.valueOf((-3310.969779), (-1.002050258431592));
      complex2.getReal();
      Complex complex3 = Complex.ZERO;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1237.11867), (-1237.11867));
      complex0.INF.nthRoot(82);
      Complex complex1 = Complex.valueOf(0.0, (-1237.11867));
      Complex complex2 = complex1.NaN.sqrt1z();
      complex2.multiply(complex0);
      Complex complex3 = Complex.valueOf((-3730.1470012), (-3730.1470012));
      Complex complex4 = complex3.multiply((-1237.11867));
      complex4.getArgument();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex3.tanh();
      complex6.NaN.createComplex((-2760.9159795917376), 3351.0);
      complex3.add(0.7853981633974483);
      complex5.isInfinite();
      complex0.multiply(675);
      complex5.multiply((-2145749174));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1237.11867), (-1237.11867));
      complex0.INF.nthRoot(82);
      Complex complex1 = Complex.valueOf(0.0, (-1237.11867));
      complex1.NaN.sqrt1z();
      Complex complex2 = Complex.valueOf(890.964569286);
      Complex complex3 = complex1.reciprocal();
      complex1.add(890.964569286);
      Complex complex4 = complex2.add((-93.3287577));
      complex0.acos();
      complex4.negate();
      complex3.add(972.8538151560244);
      complex3.equals(complex1);
      Complex complex5 = new Complex(82, (-1580.7851281));
      complex5.acos();
      complex3.subtract(890.964569286);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(0.3691789525514772);
      Complex complex1 = complex0.multiply(3351);
      complex1.getArgument();
      complex1.divide((-1237.11867));
      Complex complex2 = Complex.valueOf((double) 3351, (double) 3351);
      Complex complex3 = complex2.sin();
      Complex.valueOf((-2440.529369), (-2440.529369));
      complex1.nthRoot(3351);
      Complex complex4 = Complex.INF;
      Complex.valueOf((-1237.11867));
      complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(12.566370614359172, 12.566370614359172);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.ONE.negate();
      complex0.equals(object0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.multiply(complex3);
      Complex.valueOf((-7856.75), (-1725.67552457));
      Complex complex5 = complex4.ONE.multiply(6.283185307179586);
      complex5.ZERO.getArgument();
      complex5.ZERO.sinh();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex6.sinh();
      complex7.I.multiply((-7856.75));
      complex3.abs();
      Complex complex8 = complex5.tan();
      complex3.getField();
      complex6.toString();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(3351);
      complex0.getArgument();
      Complex complex2 = complex0.divide((double) 3351);
      complex1.abs();
      complex2.pow((-2314.04));
      complex0.sqrt1z();
      complex2.acos();
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.I.readResolve();
      complex0.NaN.getField();
      Complex complex1 = complex0.add(6.283185307179586);
      complex1.getReal();
      complex1.INF.hashCode();
      complex0.nthRoot(1331);
      Complex complex2 = Complex.valueOf(12.566370614359172);
      Complex complex3 = complex2.reciprocal();
      complex3.NaN.add(6.283185307179586);
      Complex complex4 = complex1.add(6.283185307179586);
      Complex complex5 = complex4.I.acos();
      complex1.INF.multiply((-12));
      complex5.I.sqrt1z();
      Complex complex6 = complex2.multiply((-840));
      complex4.tanh();
      Complex complex7 = complex1.cos();
      complex7.atan();
      complex6.abs();
      Complex complex8 = complex6.multiply(2472);
      complex5.reciprocal();
      complex5.nthRoot(7);
      complex0.log();
      complex8.conjugate();
      complex5.getArgument();
      complex5.subtract((double) 2472);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(972.8538151560244, 972.8538151560244);
      Complex complex1 = complex0.tan();
      complex0.ZERO.getArgument();
      complex1.readResolve();
      complex1.toString();
      complex1.hashCode();
      Complex complex2 = Complex.valueOf(972.8538151560244);
      Complex complex3 = complex0.multiply(0.0);
      complex3.sqrt();
      Complex complex4 = complex0.pow(3115.59141454);
      complex0.abs();
      Complex complex5 = Complex.valueOf((-1.0), (-0.21869016664648713));
      Complex complex6 = complex5.pow((-1313.056409463));
      complex4.toString();
      complex6.sqrt1z();
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.valueOf(793816.8637229876, (-1313.056409463));
      complex8.conjugate();
      complex8.equals(complex3);
      complex4.acos();
      complex2.subtract(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.getField();
      complex0.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      complex0.add(complex2);
      Complex complex3 = Complex.NaN;
      complex3.multiply((-12));
      Complex.valueOf((-1753.9771064223444), Double.NaN);
      complex0.ONE.getField();
      Complex.valueOf(Double.NaN, 2.2756495475769043);
      try { 
        complex1.nthRoot((-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -12
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-700.039205850759), (-700.039205850759));
      Complex complex1 = new Complex((-700.039205850759), (-700.039205850759));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.INF.divide((-9.85679317683347));
      complex3.ZERO.getArgument();
      Complex complex4 = complex2.I.multiply((-9.85679317683347));
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex1.NaN.add(complex5);
      Complex complex8 = Complex.ZERO;
      complex0.readResolve();
      complex5.ZERO.divide((-9.85679317683347));
      complex0.isInfinite();
      complex8.ZERO.tanh();
      Complex.valueOf(0.0);
      complex2.divide(complex0);
      complex7.multiply(complex5);
      Complex complex9 = complex1.sin();
      complex9.ZERO.createComplex(0.0, 0.0);
      complex0.abs();
      complex9.NaN.reciprocal();
      complex8.toString();
      complex9.reciprocal();
      Complex complex10 = Complex.valueOf((-700.039205850759));
      complex0.equals("+S<W$j*1");
      complex2.getArgument();
      complex1.cos();
      Complex complex11 = complex10.multiply(0.0);
      complex11.ONE.tan();
      Complex.valueOf((-700.039205850759), 0.0);
      Complex complex12 = complex6.sinh();
      Complex.valueOf(990.0049391070344);
      complex10.sqrt1z();
      complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      complex0.ONE.subtract(180.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.multiply(complex0);
      complex1.ONE.hashCode();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex.valueOf((-3176.45));
      Complex complex4 = complex1.ONE.tan();
      Complex.valueOf((-2952.0));
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.valueOf((-3176.45), (-3176.45));
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex1.divide(complex2);
      complex8.cos();
      Complex complex9 = complex1.ZERO.atan();
      complex5.I.cos();
      complex6.sin();
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex10.ZERO.add(0.0);
      Complex.valueOf(0.0);
      complex11.INF.sinh();
      complex5.subtract((-3176.45));
      complex7.INF.sinh();
      complex5.tan();
      complex7.equals(complex9);
      complex4.createComplex((-3176.45), 180.0);
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1237.11867));
      Complex complex2 = complex0.multiply(3351);
      complex1.getArgument();
      Complex complex3 = complex1.divide((double) 3351);
      Complex complex4 = complex0.pow((-1.0));
      complex2.abs();
      complex3.pow((-2314.04));
      complex3.toString();
      complex4.sqrt1z();
      complex3.acos();
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.tan();
      Object object0 = complex2.readResolve();
      ((Complex) object0).INF.tan();
      complex0.NaN.toString();
      complex1.I.hashCode();
      Complex.valueOf(0.0);
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex0.INF.sqrt();
      complex1.pow(0.0);
      complex4.ONE.abs();
      Complex complex5 = complex2.pow(0.0);
      complex3.toString();
      complex0.sqrt1z();
      complex0.acos();
      complex5.equals("We_j'N+rJ?^");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(972.8538151560244, 972.8538151560244);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex0.log();
      Complex complex6 = Complex.valueOf(972.8538151560244, 972.8538151560244);
      complex5.getImaginary();
      complex6.getReal();
      Complex complex7 = complex0.INF.multiply((-1.0));
      complex7.reciprocal();
      complex5.hashCode();
      complex0.getField();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex9.atan();
      complex8.equals(complex7);
      complex3.I.divide(complex2);
      complex7.subtract(0.0);
      complex11.divide((-1.6167825196198978E160));
      Complex complex12 = complex0.cosh();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex4.multiply(0.0);
      complex14.I.abs();
      Complex complex15 = Complex.valueOf(0.0);
      complex9.log();
      complex15.log();
      complex5.conjugate();
      complex12.getArgument();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1237.11867), (-1237.11867));
      Complex complex1 = Complex.valueOf(0.0, (-1237.11867));
      Complex complex2 = Complex.valueOf(890.964569286);
      complex1.reciprocal();
      Complex complex3 = complex1.add(890.964569286);
      complex3.NaN.acos();
      complex0.atan();
      complex3.nthRoot(82);
      Complex complex4 = complex0.cos();
      complex2.tan();
      complex4.readResolve();
      Complex complex5 = Complex.ONE;
      complex1.multiply(complex5);
      try { 
        complex2.nthRoot((-219));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -219
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = Complex.valueOf(3129.5098839586262);
      Complex complex2 = complex0.multiply(3351);
      complex1.getArgument();
      Complex complex3 = Complex.ZERO;
      complex3.divide(5948.08146797523);
      Complex complex4 = Complex.valueOf(4.156916476922876E-203, 3129.5098839586262);
      Complex.valueOf(3233.23348486903, 3129.5098839586262);
      complex4.nthRoot(3351);
      Complex complex5 = Complex.INF;
      complex4.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      complex0.getField();
      Complex complex1 = complex0.add(510.1804);
      complex0.getReal();
      Complex complex2 = Complex.INF;
      complex2.hashCode();
      complex2.nthRoot(1086);
      Complex complex3 = Complex.valueOf(510.1804);
      Complex complex4 = complex0.reciprocal();
      complex4.add((-20.0));
      complex3.add(510.1804);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex3.multiply(1086);
      complex5.sqrt1z();
      complex3.multiply(1086);
      Complex complex7 = Complex.valueOf(2.479773539153719E-5, 2.479773539153719E-5);
      complex7.tanh();
      complex2.cos();
      Complex complex8 = complex3.atan();
      complex6.abs();
      Complex complex9 = complex2.multiply(1331);
      complex8.reciprocal();
      Complex complex10 = new Complex((-1620.1108045099));
      complex10.nthRoot(2546);
      complex9.log();
      complex8.conjugate();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1237.11867), (-1237.11867));
      complex0.INF.nthRoot(82);
      Complex complex1 = Complex.valueOf(0.0, (-1237.11867));
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = Complex.valueOf(890.964569286);
      complex1.reciprocal();
      Complex complex4 = complex1.add(890.964569286);
      Complex complex5 = complex3.add((-93.3287577));
      Complex complex6 = complex0.acos();
      Complex complex7 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex4.getArgument();
      complex1.subtract((-3.369999130712228E-9));
      complex5.divide(complex7);
      complex2.hashCode();
      complex7.acos();
      int int0 = (-4343);
      try { 
        complex6.nthRoot((-195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -195
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1237.11867), (-1237.11867));
      complex0.INF.nthRoot(82);
      Complex complex1 = Complex.valueOf(0.0, (-1237.11867));
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.NaN.multiply(0.0);
      Complex complex4 = complex0.log();
      complex2.multiply(82);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.multiply((-840));
      Complex complex7 = complex5.tanh();
      complex3.cos();
      Complex complex8 = complex7.atan();
      complex7.abs();
      complex6.multiply((-840));
      Complex complex9 = complex2.reciprocal();
      complex9.nthRoot(82);
      complex2.log();
      Complex complex10 = Complex.INF;
      complex8.conjugate();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.pow(0.0);
      complex0.abs();
      complex3.ONE.tanh();
      Complex complex4 = complex2.I.sqrt1z();
      Complex complex5 = new Complex((-2115.35135));
      complex5.multiply((-12));
      Complex complex6 = complex1.sqrt1z();
      complex2.multiply((-840));
      complex5.tanh();
      complex0.cos();
      Complex complex7 = complex6.atan();
      complex0.abs();
      complex5.multiply((-840));
      complex7.reciprocal();
      complex7.nthRoot(419);
      Complex complex8 = complex4.conjugate();
      complex8.I.tan();
      Complex complex9 = new Complex(5.278759515330048E-8);
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = (Complex)complex0.I.readResolve();
      complex0.NaN.getField();
      Complex complex2 = complex0.add(6.283185307179586);
      complex2.getReal();
      complex2.INF.hashCode();
      complex0.nthRoot(1331);
      complex2.readResolve();
      complex2.multiply((double) 1331);
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.multiply(12.566370614359172);
      complex1.getArgument();
      complex3.subtract(6.283185307179586);
      Complex complex5 = complex4.divide(complex3);
      complex4.hashCode();
      Complex complex6 = complex5.acos();
      complex5.nthRoot(1331);
      complex5.multiply(1045);
      complex1.sqrt();
      complex5.conjugate();
      complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1237.11867), (-1237.11867));
      complex0.INF.nthRoot(82);
      Complex complex1 = Complex.valueOf(0.0, (-1237.11867));
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = Complex.valueOf(890.964569286);
      Complex complex4 = complex1.reciprocal();
      complex1.add(890.964569286);
      complex3.add((-93.3287577));
      complex0.acos();
      Complex complex5 = complex1.multiply((-12));
      complex0.sqrt1z();
      Complex complex6 = complex4.multiply((-840));
      complex6.tanh();
      complex4.cos();
      Complex complex7 = complex5.atan();
      complex0.abs();
      complex2.multiply((-840));
      complex7.reciprocal();
      complex2.nthRoot(7);
      complex6.log();
      Complex complex8 = Complex.INF;
      complex8.conjugate();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      int int0 = 3647;
      complex1.nthRoot(3647);
      complex0.pow((double) 3647);
      complex1.hashCode();
      // Undeclared exception!
      complex2.nthRoot(3647);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.INF.getArgument();
      complex0.INF.readResolve();
      Complex complex1 = Complex.INF;
      complex1.ONE.getArgument();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.INF.conjugate();
      complex3.NaN.multiply(complex1);
      complex3.getArgument();
      complex2.hashCode();
      Complex complex4 = Complex.ONE;
      complex4.readResolve();
      Complex.valueOf((-0.7853981633974483));
      complex3.reciprocal();
      Complex complex5 = complex0.acos();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(972.8538151560244, 972.8538151560244);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.subtract(972.8538151560244);
      complex5.getImaginary();
      complex6.getReal();
      Complex complex7 = complex0.INF.multiply((-1.0));
      complex7.reciprocal();
      complex5.hashCode();
      complex0.getField();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex0.cosh();
      complex8.sinh();
      Complex complex10 = complex9.atan();
      complex8.equals(complex7);
      Complex complex11 = complex3.I.divide(complex2);
      Complex complex12 = complex7.subtract(0.0);
      complex10.divide((-1.6167825196198978E160));
      complex0.cosh();
      Complex complex13 = complex1.asin();
      complex4.multiply(0.0);
      complex13.pow(complex10);
      complex9.log();
      complex12.multiply((-2252));
      complex11.divide(complex1);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.I.tanh();
      complex3.acos();
      Complex complex7 = complex4.ZERO.sinh();
      Complex complex8 = complex6.pow(0.0);
      Complex complex9 = Complex.valueOf(0.0, (-2392.6002463254));
      complex9.hashCode();
      complex8.nthRoot(1);
      Complex complex10 = complex0.conjugate();
      complex9.tan();
      Complex complex11 = complex2.cosh();
      complex7.multiply((-1477));
      complex9.getField();
      complex10.isNaN();
      complex11.isInfinite();
      try { 
        complex10.nthRoot((-2738));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,738
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.INF.getArgument();
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = Complex.INF;
      complex2.ONE.getArgument();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.NaN.multiply(complex2);
      complex4.getArgument();
      complex4.ZERO.hashCode();
      Complex complex6 = complex2.INF.multiply(complex3);
      complex6.I.nthRoot(3647);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex4.sin();
      complex3.sqrt();
      complex6.subtract(1.224029779434204);
      complex8.divide((-0.7853981633974483));
      Complex complex9 = complex7.subtract(complex0);
      complex5.divide(complex9);
      complex7.toString();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1306.2959), (-1306.2959));
      Complex complex1 = complex0.multiply(2727.80525);
      Complex.valueOf(2727.80525);
      complex1.ZERO.acos();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.I.log();
      complex2.ZERO.readResolve();
      complex1.INF.hashCode();
      Complex complex4 = complex1.cos();
      complex0.hashCode();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.ONE.sqrt();
      Complex complex7 = Complex.ONE;
      complex5.pow(complex7);
      complex6.add(complex1);
      Complex complex8 = new Complex(1.4262712796792241E-9);
      complex8.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = (Complex)complex2.readResolve();
      complex0.NaN.toString();
      complex1.I.hashCode();
      Complex.valueOf(0.0);
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex0.INF.sqrt();
      complex1.pow(0.0);
      complex5.ONE.abs();
      Complex complex6 = complex2.tan();
      Complex complex7 = new Complex(1.0, 7.683861476080006E7);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex0.multiply(1796066208);
      complex3.getField();
      complex9.isNaN();
      complex3.isInfinite();
      complex6.nthRoot(17);
      complex8.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.INF.getArgument();
      complex0.INF.readResolve();
      Complex complex1 = Complex.INF;
      complex1.ONE.getArgument();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex3.getArgument();
      complex3.ZERO.hashCode();
      Complex complex5 = complex1.INF.multiply(complex2);
      complex5.I.nthRoot(3647);
      Complex complex6 = complex0.NaN.pow(0.7853981633974483);
      complex6.ZERO.hashCode();
      complex6.NaN.nthRoot(1);
      complex2.I.conjugate();
      Complex complex7 = complex2.pow((-1817.39));
      complex6.toString();
      Complex complex8 = new Complex(0.0, (-1817.39));
      complex5.acos();
      complex7.equals("We_j'N+rJ?^");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sqrt();
      complex2.tan();
      Complex complex3 = Complex.NaN;
      complex3.readResolve();
      complex2.toString();
      complex3.hashCode();
      Complex complex4 = Complex.valueOf((-4.881381982445E7));
      Complex complex5 = complex1.multiply(3319.736106);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex4.pow(103.0);
      complex3.abs();
      Complex complex8 = complex6.pow((-4.881381982445E7));
      complex5.toString();
      complex8.sqrt1z();
      complex7.acos();
      complex7.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.getField();
      complex0.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      complex0.add(complex2);
      complex2.negate();
      Complex complex3 = complex0.add(0.7615941559557649);
      complex1.log();
      complex1.isInfinite();
      complex3.multiply((-2145749174));
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.ONE;
      complex0.ONE.exp();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      complex0.pow(complex4);
      complex2.isNaN();
      complex4.tanh();
      Complex complex5 = complex1.pow(complex2);
      complex5.multiply(Double.NaN);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.ONE.acos();
      Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex4.ZERO.sinh();
      Complex complex8 = Complex.I;
      Complex complex9 = complex4.NaN.sin();
      complex9.ZERO.sqrt();
      complex7.ZERO.sin();
      Complex complex10 = complex0.subtract(3209.3074578099095);
      complex10.ZERO.divide(0.0);
      complex5.subtract(complex10);
      complex6.divide(complex0);
      complex4.toString();
      complex7.atan();
      complex2.add((-1148.29));
      complex5.nthRoot(982);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(972.8538151560244, 972.8538151560244);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.subtract(972.8538151560244);
      complex5.getImaginary();
      complex6.getReal();
      Complex complex7 = complex0.INF.multiply((-1.0));
      complex7.reciprocal();
      complex5.hashCode();
      complex0.getField();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex9.atan();
      complex8.equals(complex7);
      complex3.I.divide(complex2);
      complex7.subtract(0.0);
      complex11.divide((-1.6167825196198978E160));
      Complex complex12 = complex0.cosh();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex4.multiply(0.0);
      complex14.I.abs();
      Complex complex15 = Complex.valueOf(0.0);
      complex9.log();
      complex15.log();
      complex5.conjugate();
      complex12.getArgument();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.INF.getArgument();
      complex0.INF.readResolve();
      Complex complex1 = Complex.INF;
      complex1.ONE.getArgument();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.INF.conjugate();
      complex2.ZERO.asin();
      complex3.NaN.multiply(complex1);
      complex3.getArgument();
      complex3.ZERO.hashCode();
      Complex complex4 = complex1.INF.multiply(complex2);
      complex4.I.nthRoot(3647);
      Complex complex5 = complex0.NaN.pow(0.7853981633974483);
      complex5.ZERO.hashCode();
      complex5.NaN.nthRoot(1);
      complex2.INF.conjugate();
      complex2.I.conjugate();
      Complex complex6 = complex4.ZERO.tan();
      complex6.ZERO.cosh();
      complex1.NaN.multiply((-344));
      complex0.getField();
      complex1.isNaN();
      complex0.isInfinite();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.pow(0.0);
      complex3.abs();
      Complex complex4 = complex1.tanh();
      complex4.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex2.negate();
      complex6.ONE.hashCode();
      complex0.add(6.283185307179586);
      complex3.log();
      complex6.isInfinite();
      complex6.multiply((-2121));
      Complex complex7 = complex5.divide(complex4);
      complex2.add(complex7);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      complex1.ONE.hashCode();
      complex0.ONE.getArgument();
      Complex complex2 = complex1.ONE.pow((-1792.1));
      Complex complex3 = complex2.sqrt();
      complex3.NaN.divide(complex2);
      Complex complex4 = complex0.atan();
      complex2.ZERO.sqrt1z();
      complex1.INF.add((-1792.1));
      Complex complex5 = complex1.NaN.sqrt1z();
      complex1.isNaN();
      Complex complex6 = complex4.divide(0.08154398202896118);
      complex6.INF.getArgument();
      complex6.NaN.getArgument();
      complex0.getField();
      Complex complex7 = complex5.subtract(complex2);
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex8.INF.negate();
      complex6.asin();
      complex4.readResolve();
      Complex complex10 = complex2.sqrt1z();
      complex2.INF.reciprocal();
      Complex complex11 = complex5.I.add(1.375);
      complex5.add(0.0);
      complex10.cosh();
      Complex.valueOf(1879.3);
      complex2.cosh();
      complex11.subtract(4.408531734441582E-71);
      complex9.abs();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.002095574584687E155, 0.0);
      Complex complex1 = new Complex(0.0, 0.5920095443725586);
      Complex complex2 = complex1.INF.asin();
      complex2.sqrt1z();
      complex0.ZERO.multiply(complex1);
      Complex.valueOf((-2357.8629659635));
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.ONE.cos();
      complex5.sqrt();
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex0.sqrt1z();
      complex4.NaN.asin();
      Complex complex8 = complex7.I.negate();
      complex8.NaN.divide(3.002095574584687E155);
      Complex complex9 = complex6.NaN.exp();
      Complex.valueOf((-841.4728745120826), 3.002095574584687E155);
      complex6.reciprocal();
      complex5.isInfinite();
      complex0.asin();
      complex9.sqrt1z();
      complex3.atan();
      Complex.valueOf(3.002095574584687E155);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-1306.2959), (-1306.2959));
      Complex complex1 = complex0.multiply(2727.80525);
      Complex.valueOf(2727.80525);
      complex1.ZERO.acos();
      Complex complex2 = complex1.add(complex0);
      complex0.I.log();
      complex2.ZERO.readResolve();
      complex1.INF.hashCode();
      Complex complex3 = complex1.cos();
      complex0.hashCode();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex4.pow(complex6);
      complex5.add(complex1);
      complex7.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Complex complex0 = new Complex(972.8538151560244, 972.8538151560244);
          Complex complex1 = Complex.NaN;
          Complex complex2 = complex1.I.cos();
          Complex complex3 = complex0.I.subtract(complex1);
          Complex complex4 = complex3.ZERO.negate();
          Complex complex5 = complex0.log();
          Complex complex6 = complex0.subtract(972.8538151560244);
          complex5.getImaginary();
          complex6.getReal();
          Complex complex7 = complex0.INF.multiply((-1.0));
          complex7.reciprocal();
          complex5.hashCode();
          complex0.getField();
          Complex complex8 = complex6.cosh();
          Complex complex9 = complex0.cosh();
          complex8.sinh();
          Complex complex10 = complex9.atan();
          complex8.equals(complex7);
          complex3.I.divide(complex2);
          complex7.subtract(0.0);
          complex10.divide((-1.6167825196198978E160));
          complex0.cosh();
          Complex complex11 = complex1.asin();
          complex4.multiply(0.0);
          complex11.pow(complex10);
          complex9.log();
          Complex.valueOf(872.9169037, 2682.91923369999);
          complex11.divide(2682.91923369999);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.pow(0.0);
      complex0.ZERO.abs();
      Complex complex2 = complex0.cos();
      complex1.INF.readResolve();
      complex0.NaN.abs();
      Complex complex3 = complex0.tan();
      complex2.pow((-2380.63));
      complex1.I.tan();
      Complex complex4 = complex3.INF.multiply(complex1);
      complex0.ONE.sqrt();
      Complex complex5 = complex4.INF.acos();
      complex4.INF.nthRoot(1594);
      complex0.exp();
      Complex complex6 = complex3.subtract(complex1);
      complex4.sin();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex6.pow(complex7);
      complex8.exp();
      complex5.pow(0.0);
      complex6.hashCode();
      complex6.equals("9q9(|*08iC@l?]");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ONE.divide(complex0);
      complex0.NaN.subtract((-199.029589981661));
      complex1.NaN.pow((-199.029589981661));
      Complex complex2 = complex0.NaN.add(complex1);
      complex0.equals("a");
      Complex complex3 = complex1.sqrt();
      complex2.add(complex1);
      Complex complex4 = complex1.divide(complex3);
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex5 = complex4.I.sqrt();
      complex1.toString();
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = complex3.subtract((-160.548));
      Complex complex8 = complex7.cosh();
      complex8.isNaN();
      complex6.abs();
      complex5.createComplex((-199.029589981661), (-199.029589981661));
      complex8.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = Complex.valueOf(928.1812449, 928.1812449);
      complex3.sinh();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.I.readResolve();
      complex0.NaN.getField();
      Complex complex1 = complex0.add(6.283185307179586);
      complex1.getReal();
      complex1.INF.hashCode();
      complex0.nthRoot(1331);
      Complex complex2 = Complex.valueOf(12.566370614359172);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.NaN.add(6.283185307179586);
      Complex complex5 = complex1.add(6.283185307179586);
      Complex complex6 = complex5.I.acos();
      complex1.INF.multiply((-12));
      complex6.I.sqrt1z();
      Complex complex7 = complex2.multiply((-840));
      complex5.tanh();
      Complex complex8 = complex1.cos();
      complex8.NaN.atan();
      complex5.abs();
      complex7.multiply(1331);
      complex5.reciprocal();
      complex0.nthRoot(7);
      Complex complex9 = complex4.log();
      complex9.NaN.conjugate();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.INF.getArgument();
      complex0.INF.readResolve();
      Complex complex1 = Complex.INF;
      complex1.ONE.getArgument();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.INF.conjugate();
      complex3.NaN.multiply(complex1);
      complex3.getArgument();
      complex3.ZERO.hashCode();
      Complex complex4 = complex1.INF.multiply(complex2);
      complex4.I.nthRoot(3647);
      Complex complex5 = complex0.NaN.pow(0.7853981633974483);
      complex5.ZERO.hashCode();
      complex5.NaN.nthRoot(1);
      complex2.I.conjugate();
      Complex complex6 = complex4.ZERO.tan();
      complex6.ZERO.cosh();
      complex1.NaN.multiply((-344));
      complex0.getField();
      complex1.isNaN();
      complex0.isInfinite();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.nthRoot(379);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ONE.pow(5.4445606140746644E-8);
      complex2.NaN.getField();
      Complex complex3 = complex0.I.acos();
      complex3.INF.toString();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.add(complex4);
      complex5.ZERO.sinh();
      complex5.ONE.hashCode();
      complex0.getReal();
      complex5.sqrt1z();
      Complex complex6 = complex4.log();
      Complex.valueOf(0.0, 1123.8358);
      complex4.ZERO.reciprocal();
      complex6.NaN.sqrt();
      Complex complex7 = complex0.divide(complex4);
      complex0.createComplex(0.0, 20.0);
      Object object0 = new Object();
      complex3.equals(object0);
      complex5.divide(complex7);
      complex0.toString();
      complex7.atan();
      Complex.valueOf(0.0);
      complex3.getField();
      complex0.add(1200.7120477403);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.pow(0.0);
      complex0.abs();
      Complex complex4 = complex3.ONE.tanh();
      complex2.I.sqrt1z();
      try { 
        complex4.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex0.ZERO.cosh();
      Complex complex4 = complex1.reciprocal();
      complex4.ZERO.readResolve();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex2.reciprocal();
      complex6.ZERO.pow(0.0);
      complex6.sqrt();
      Complex complex7 = complex5.NaN.tan();
      complex0.atan();
      complex2.isNaN();
      complex7.toString();
      complex0.getReal();
      Complex complex8 = complex7.pow(complex3);
      Complex.valueOf(0.0);
      complex8.sinh();
      complex6.exp();
      Complex.valueOf(0.0);
      complex8.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4940.335), (-4940.335));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-700.039205850759), (-700.039205850759));
      Complex complex1 = new Complex((-700.039205850759), (-700.039205850759));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.INF.divide(4.995552216100365E-193);
      complex3.ZERO.getArgument();
      Complex complex4 = complex2.I.multiply(4.995552216100365E-193);
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex1.NaN.add(complex5);
      Complex complex8 = complex6.ONE.exp();
      complex0.readResolve();
      complex5.ZERO.divide(4.995552216100365E-193);
      complex0.isInfinite();
      complex8.ZERO.tanh();
      Complex.valueOf(0.0);
      complex7.multiply(complex5);
      Complex complex9 = complex1.sin();
      complex9.ZERO.createComplex(0.0, 0.0);
      complex0.abs();
      complex9.NaN.reciprocal();
      complex8.toString();
      complex9.reciprocal();
      Complex complex10 = complex7.conjugate();
      complex0.equals("+S<W$j*1");
      complex2.getArgument();
      complex1.cos();
      Complex complex11 = complex10.multiply(0.0);
      complex11.ONE.tan();
      Complex.valueOf((-700.039205850759), 0.0);
      complex6.sinh();
      Complex.valueOf(990.0049391070344);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.sqrt();
      complex0.I.toString();
      Complex complex2 = complex0.INF.conjugate();
      complex1.INF.readResolve();
      complex0.nthRoot(1);
      Complex.valueOf(123.55268479256124, 0.0);
      Complex complex3 = complex1.multiply(complex2);
      complex0.readResolve();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.ONE;
      complex0.ONE.exp();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      complex0.pow(complex4);
      complex2.isNaN();
      complex4.tanh();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.ONE.divide(0.4494072198867798);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.add(complex0);
      complex5.I.sqrt1z();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex6.ONE.acos();
      complex7.I.add(complex0);
      complex0.tanh();
      Complex complex8 = Complex.valueOf(0.0, 1787.535317500511);
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex5.multiply((-29));
      Complex complex11 = complex10.ZERO.subtract((-995.165252));
      complex11.ZERO.cos();
      Complex complex12 = complex9.negate();
      Complex complex13 = complex12.ONE.pow((-1.0));
      complex13.ONE.negate();
      complex9.readResolve();
      complex4.sin();
      complex3.multiply(1.5979955196380615);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.toString();
      Complex complex1 = complex0.multiply(0.0);
      complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.INF.add(complex0);
      complex2.INF.getArgument();
      complex2.INF.log();
      Complex complex3 = complex0.I.reciprocal();
      complex3.tan();
      Complex complex4 = Complex.valueOf(0.0, 4940.11);
      complex4.ONE.hashCode();
      Complex complex5 = complex1.cosh();
      complex5.hashCode();
      complex5.log();
      complex1.cosh();
      complex3.ONE.subtract(complex1);
      complex2.sinh();
      int int0 = (-1511);
      try { 
        complex2.nthRoot((-1511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,511
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.I.exp();
      int int0 = 0;
      try { 
        complex2.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.INF.cos();
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.pow(complex2);
      complex2.NaN.getArgument();
      complex3.I.sqrt();
      Complex complex4 = Complex.valueOf((-938.81540506066), 0.0);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.I.pow(complex7);
      Complex complex9 = complex8.ONE.cosh();
      complex5.ZERO.toString();
      Complex complex10 = complex1.log();
      Complex complex11 = complex1.acos();
      complex11.ONE.hashCode();
      Complex complex12 = complex3.ZERO.divide(complex9);
      complex12.ZERO.subtract(complex7);
      Complex.valueOf(1.7663064617118723E-8);
      Complex complex13 = complex10.subtract(Double.POSITIVE_INFINITY);
      Complex complex14 = complex7.exp();
      complex14.ONE.tanh();
      complex13.pow((-1.54434478239181E-8));
      complex1.abs();
      complex4.atan();
      complex3.toString();
      complex4.negate();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3479.6016, 3479.6016);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.createComplex(3479.6016, (-1.8494343291160577E254));
      complex3.INF.sqrt();
      complex2.I.sin();
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex.valueOf(1.2988535295611824E247, 1381.981815987);
      Complex complex5 = complex3.NaN.add(1.2988535295611824E247);
      complex5.NaN.atan();
      complex5.INF.getField();
      Complex complex6 = complex4.I.multiply((-668));
      complex6.ONE.getField();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex7.NaN.asin();
      Complex.valueOf((-1.0));
      complex8.sqrt();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.subtract(395.87);
      complex1.add(complex0);
      complex2.INF.createComplex(0.0, 1006.718629);
      Complex complex4 = Complex.valueOf(0.0, 395.87);
      Complex complex5 = complex3.pow(complex4);
      complex5.ONE.tanh();
      complex0.I.pow(0.0);
      complex0.I.add(complex1);
      complex3.nthRoot(2168);
      Complex.valueOf(0.0, (double) 2168);
      complex1.getField();
      Complex complex6 = complex0.multiply(7.802219817310385E-9);
      complex6.cosh();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(496.805, 40.19140625);
      Complex complex1 = Complex.I;
      complex0.I.pow(complex1);
      complex0.readResolve();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.getField();
      Complex complex1 = complex0.ZERO.cos();
      complex1.atan();
      complex1.ONE.nthRoot(297);
      Complex complex2 = complex0.cos();
      complex2.ONE.tan();
      complex0.readResolve();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      complex1.ONE.subtract(complex0);
      complex1.ONE.exp();
      Complex complex2 = complex1.log();
      complex2.ZERO.abs();
      Complex complex3 = complex2.ZERO.sinh();
      complex3.I.sqrt();
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.NaN.createComplex(Double.NaN, Double.NaN);
      complex5.NaN.reciprocal();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(1.096019026243815E274);
      complex0.NaN.getField();
      Complex complex1 = complex0.createComplex(1.1177616119384766, 1.096019026243815E274);
      Complex complex2 = complex1.atan();
      complex2.ONE.atan();
      Complex complex3 = complex0.ONE.sin();
      complex3.INF.sinh();
      complex3.toString();
      Complex complex4 = complex1.NaN.cos();
      complex0.acos();
      complex4.ONE.tanh();
      complex1.abs();
      complex4.pow(1.096019026243815E274);
      complex4.divide(1.096019026243815E274);
      Complex.valueOf(1.096019026243815E274);
      complex4.add((-556.1488626397313));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.sinh();
      Complex complex1 = complex0.multiply((-2236.14));
      Complex complex2 = complex0.exp();
      complex0.conjugate();
      Complex.valueOf((-2236.14), (-2236.14));
      complex1.getReal();
      Complex complex3 = complex2.cos();
      complex3.NaN.tanh();
      Complex complex4 = complex3.negate();
      complex4.INF.sqrt1z();
      complex4.conjugate();
      complex0.nthRoot(1465);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(2112.01507743511, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.NaN.multiply(2112.01507743511);
      Complex complex5 = complex4.NaN.reciprocal();
      complex4.I.sqrt();
      complex1.NaN.getField();
      complex1.I.multiply(2112.01507743511);
      Complex complex6 = complex3.pow((-931.3));
      complex6.I.pow(1.0);
      complex2.INF.toString();
      complex1.getReal();
      Complex complex7 = complex2.multiply(complex0);
      complex7.I.pow((-361.28112668716324));
      complex2.subtract(0.0);
      complex3.divide((-23.3885801635));
      complex0.toString();
      complex1.add(6.283185307179586);
      complex4.conjugate();
      complex1.subtract(complex6);
      complex6.nthRoot(1);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.add(0.0);
      Complex complex6 = complex3.ONE.pow(complex4);
      complex1.getImaginary();
      complex3.getImaginary();
      Complex complex7 = complex6.cos();
      complex6.ZERO.tan();
      complex0.cosh();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex3.pow(complex7);
      Complex complex10 = complex9.sin();
      complex10.INF.readResolve();
      complex8.sinh();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1237.11867), (-1237.11867));
      complex0.INF.nthRoot(82);
      Complex complex1 = Complex.valueOf(0.0, (-1237.11867));
      complex1.NaN.sqrt1z();
      complex0.readResolve();
      complex0.NaN.multiply(0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.multiply((-1237.11867));
      complex2.ONE.getArgument();
      Complex complex4 = complex0.subtract(0.0);
      complex4.ONE.divide(complex2);
      complex4.hashCode();
      complex3.acos();
      try { 
        complex4.nthRoot((-4343));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,343
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.I.sqrt1z();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      
      Complex complex2 = complex1.ONE.sqrt();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.INF.sqrt1z();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotNull(complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex0.subtract((-375.638606773));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotNull(complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex4.ONE.atan();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotNull(complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = complex5.NaN.tanh();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotNull(complex6);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      
      Complex complex7 = complex6.ZERO.sinh();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex7);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotNull(complex7);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertTrue(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = complex6.ZERO.sqrt1z();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotNull(complex8);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      
      Complex complex9 = complex0.multiply(complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotNull(complex9);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      
      Complex complex10 = complex0.I.sinh();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex2);
      assertNotNull(complex10);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      
      double double0 = complex9.ZERO.abs();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      
      Complex complex11 = complex9.I.exp();
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex1);
      assertNotNull(complex11);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex1));
      
      Complex complex12 = complex3.ZERO.add(complex11);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex8);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex1);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex9);
      assertNotNull(complex12);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex5));
      assertTrue(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex9));
      
      double double1 = complex0.getReal();
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertEquals(0.0, double1, 0.01);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertEquals(double1, double0, 0.01);
      
      Complex complex13 = complex0.createComplex(0.0, 0.0);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex4);
      assertNotNull(complex13);
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertTrue(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex4));
      
      Complex complex14 = complex0.pow(0.0);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotNull(complex14);
      assertTrue(complex14.equals((Object)complex2));
      assertTrue(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      
      Complex complex15 = complex14.NaN.sqrt();
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex15, complex8);
      assertSame(complex15, complex6);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex1);
      assertNotNull(complex15);
      assertTrue(complex14.equals((Object)complex2));
      assertTrue(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex1));
      assertTrue(complex15.equals((Object)complex3));
      
      List<Complex> list0 = complex4.nthRoot(1832);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotNull(list0);
      assertFalse(list0.contains(complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      
      Complex complex16 = complex13.divide((-401.05612962));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex4);
      assertNotNull(complex16);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex13));
      assertTrue(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertTrue(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex4));
      
      Complex complex17 = complex6.ONE.pow(complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex4);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex7);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertSame(complex6, complex15);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex12);
      assertNotNull(complex17);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex12));
      assertTrue(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex6));
      assertTrue(complex17.equals((Object)complex14));
      assertTrue(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex12));
      
      List<Complex> list1 = complex16.nthRoot(2389);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex4);
      assertNotSame(list1, list0);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex4);
      assertNotNull(list1);
      assertTrue(list1.contains(complex13));
      assertFalse(list1.contains(complex17));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex13));
      assertTrue(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(list1.equals((Object)list0));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex14));
      assertTrue(complex13.equals((Object)complex16));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex17));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertTrue(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex4));
      
      double double2 = complex2.getImaginary();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex4);
      assertEquals(0.0, double2, 0.01);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex17));
      assertTrue(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex4));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      Complex complex18 = complex4.createComplex(0.0, (-401.05612962));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex13);
      assertNotNull(complex18);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex13));
      
      double double3 = complex9.abs();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex7);
      assertEquals(375.63993783723333, double3, 0.01);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex17));
      assertFalse(complex9.equals((Object)complex16));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex18));
      assertFalse(complex9.equals((Object)complex7));
      
      Complex complex19 = complex3.multiply((-1483));
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex8);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex17);
      assertSame(complex19, complex15);
      assertSame(complex19, complex6);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex7);
      assertNotNull(complex19);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertTrue(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex16));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex18));
      assertTrue(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex17));
      assertTrue(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex7));
      
      Complex complex20 = complex0.negate();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex7);
      assertNotNull(complex20);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex20.equals((Object)complex2));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex19));
      assertFalse(complex20.equals((Object)complex7));
      
      Complex complex21 = complex7.createComplex(0.0, 0.0);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex21);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertSame(complex6, complex19);
      assertSame(complex6, complex15);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex12);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex20);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex21);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex8);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex13);
      assertNotNull(complex21);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex20));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex19));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex19));
      assertFalse(complex5.equals((Object)complex20));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex11));
      assertTrue(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex19));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex20));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertTrue(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex8));
      assertTrue(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex12));
      assertTrue(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex4));
      assertTrue(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex20));
      
      Complex complex22 = complex2.multiply(complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex22);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex22);
      assertNotSame(complex2, complex21);
      assertNotSame(complex2, complex4);
      assertNotSame(complex4, complex22);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex21);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex22);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertSame(complex6, complex19);
      assertSame(complex6, complex15);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex12);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex21);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex22);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex9);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex20);
      assertNotNull(complex22);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex21));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex20));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex19));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex18));
      assertTrue(complex2.equals((Object)complex17));
      assertTrue(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex20));
      assertFalse(complex2.equals((Object)complex21));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex20));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex21));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex19));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex21));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex19));
      assertFalse(complex5.equals((Object)complex20));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex21));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex8));
      assertTrue(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex15));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex20));
      assertFalse(complex8.equals((Object)complex21));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex10));
      assertTrue(complex8.equals((Object)complex17));
      assertTrue(complex8.equals((Object)complex14));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex18));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex19));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex16));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex13));
      assertFalse(complex22.equals((Object)complex4));
      assertFalse(complex22.equals((Object)complex0));
      assertFalse(complex22.equals((Object)complex10));
      assertFalse(complex22.equals((Object)complex16));
      assertFalse(complex22.equals((Object)complex9));
      assertTrue(complex22.equals((Object)complex17));
      assertFalse(complex22.equals((Object)complex1));
      assertTrue(complex22.equals((Object)complex14));
      assertFalse(complex22.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex15));
      assertFalse(complex22.equals((Object)complex6));
      assertTrue(complex22.equals((Object)complex2));
      assertFalse(complex22.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex3));
      assertTrue(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex21));
      assertFalse(complex22.equals((Object)complex18));
      assertFalse(complex22.equals((Object)complex11));
      assertFalse(complex22.equals((Object)complex19));
      assertFalse(complex22.equals((Object)complex20));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      
      Complex complex1 = null;
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.sinh();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex4.NaN.createComplex(1.0, Double.NaN);
      Complex complex6 = complex5.INF.conjugate();
      List<Complex> list0 = complex6.INF.nthRoot(504);
      assertFalse(list0.contains(complex0));
      
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex5.ONE.add(Double.NaN);
      Complex complex9 = complex4.NaN.sqrt1z();
      double double0 = complex5.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      complex1.ONE.getField();
      complex8.I.abs();
      Complex complex10 = complex0.cos();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex10.getReal(), 0.01);
      
      double double1 = complex3.getArgument();
      assertEquals(0.7853981633974483, double1, 0.01);
      
      Complex complex11 = complex2.conjugate();
      assertEquals((-0.7456241416655579), complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex4.pow(1.0);
      assertEquals(9.131262184577181E-17, complex12.getImaginary(), 0.01);
      assertEquals((-0.7456241416655579), complex12.getReal(), 0.01);
      
      Complex complex13 = complex8.createComplex(1.0, 575.0547847239001);
      Complex complex14 = complex13.negate();
      assertSame(complex8, complex9);
      assertEquals((-1.0), complex14.getReal(), 0.01);
      assertTrue(complex5.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = (-2426.5);
      complex0.ONE.subtract((-2426.5));
      complex0.INF.hashCode();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-82.658217005002), 0.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.sqrt();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(9.091656450009646, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex4.INF.divide(754.36);
      assertTrue(complex5.isInfinite());
      
      Complex complex6 = Complex.valueOf(0.0);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.I.cosh();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex0.negate();
      Complex complex9 = complex4.negate();
      Complex complex10 = complex9.add(0.0);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex9.cosh();
      assertTrue(complex3.equals((Object)complex1));
      assertEquals(1.0, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex3.equals((Object)complex5));
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex8.multiply((-320));
      assertEquals((-26450.629441600642), complex12.getReal(), 0.01);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.acos();
      assertEquals(1.1102230246251565E-16, complex3.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.9999999999999999, complex3.getReal(), 0.01);
      
      Complex complex4 = complex1.sqrt1z();
      assertEquals(0.6173312283870106, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex5 = Complex.valueOf((-1.036103313062145E-7), (-2004.104880731821));
      assertEquals((-2004.104880731821), complex5.getImaginary(), 0.01);
      assertEquals((-1.036103313062145E-7), complex5.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.ONE.acos();
      Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex4.ZERO.sinh();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex4.NaN.sin();
      Complex complex10 = complex9.ZERO.sqrt();
      Complex complex11 = complex0.subtract(3209.3074578099095);
      complex11.ZERO.divide(0.0);
      Complex complex12 = complex5.subtract(complex11);
      assertEquals(1.557407724654902, complex5.getImaginary(), 0.01);
      assertSame(complex12, complex8);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      complex6.divide(complex0);
      String string0 = complex4.toString();
      assertEquals("(0.0, -0.0)", string0);
      
      Complex complex13 = complex7.atan();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertTrue(complex13.equals((Object)complex10));
  }
}
