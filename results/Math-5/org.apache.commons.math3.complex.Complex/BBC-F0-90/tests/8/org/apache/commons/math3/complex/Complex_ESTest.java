/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:39:27 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1.564440844355254E-7), Double.POSITIVE_INFINITY);
      complex1.multiply(complex1);
      complex1.divide(111.4457498);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.5781599575584034E286);
      complex1.acos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-43.0407), (-43.0407));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.cos();
      Complex complex4 = new Complex((-3717.5));
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.createComplex(3.1170298734336303E-169, 0.0);
      complex0.getField();
      Complex complex7 = complex0.exp();
      complex6.hashCode();
      Complex complex8 = complex1.tan();
      Complex complex9 = (Complex)complex0.readResolve();
      Complex complex10 = Complex.valueOf((-150.2326525177), 0.0);
      Complex complex11 = (Complex)complex10.readResolve();
      Complex complex12 = complex7.pow(complex0);
      Complex complex13 = complex9.multiply((-2579));
      complex7.NaN.tanh();
      Complex complex14 = Complex.NaN;
      complex12.multiply(811);
      complex8.nthRoot(811);
      Complex complex15 = Complex.ZERO;
      complex3.acos();
      complex11.multiply(complex13);
      complex8.multiply(722);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1.564440844355254E-7), Double.POSITIVE_INFINITY);
      complex1.asin();
      Complex complex2 = complex1.multiply(1475);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(1627.53415276907, Double.POSITIVE_INFINITY);
      complex0.createComplex((-1.0), 1151.215052284837);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3.1170298734336303E-169);
      Complex complex2 = new Complex(3.1170298734336303E-169, 20.0);
      complex2.tan();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-106354.94452408869), (-106354.94452408869));
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = (-43.0407);
      Complex complex0 = Complex.valueOf((-43.0407));
      double double1 = 3.1170298734336303E-169;
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.subtract(1.584282131261716E-4);
      Complex complex1 = new Complex(2.718281828459045, 3.257488853378793E-70);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex1.tan();
      Complex complex3 = complex2.sqrt();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide(complex0);
      complex2.reciprocal();
      Complex.valueOf((-1014.122866), (-1531.32297));
      Complex complex3 = new Complex(2538.3787469, 2523.0);
      Complex complex4 = new Complex((-5.381287389094251E-8));
      Complex complex5 = new Complex(2.099699725059235, Double.NaN);
      Complex complex6 = Complex.INF;
      complex6.tan();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = new Complex(3.7354891429968973);
      Complex complex9 = Complex.ONE;
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(1.792532422030812, 1.792532422030812);
      Complex complex1 = new Complex(1.792532422030812);
      complex1.toString();
      complex1.readResolve();
      complex1.ONE.nthRoot(1373);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex2.multiply(complex1);
      complex4.multiply(complex0);
      complex4.NaN.sqrt1z();
      Complex complex5 = complex1.INF.subtract(1.792532422030812);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.ZERO.cosh();
      complex2.cosh();
      Complex complex8 = complex1.log();
      Complex complex9 = complex8.add((double) 1373);
      Complex complex10 = complex5.pow((double) 1373);
      complex10.add(complex3);
      complex7.createComplex(1.071796178817749, 2011.0);
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(985.7875621268165, 985.7875621268165);
      complex0.ZERO.getArgument();
      Complex complex1 = new Complex(2.0);
      complex1.ZERO.multiply((-3421));
      complex0.multiply(complex1);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.multiply(complex4);
      complex0.cos();
      complex4.NaN.hashCode();
      complex5.multiply(0.0);
      Complex complex6 = complex3.createComplex(2.0, 2.0);
      complex0.getField();
      Complex complex7 = complex2.exp();
      complex7.ONE.hashCode();
      complex6.tan();
      complex5.readResolve();
      complex3.readResolve();
      complex5.pow(complex0);
      complex1.multiply((-3421));
      complex6.divide(0.0);
      complex2.abs();
      complex0.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-43.0407), (-43.0407));
      Complex complex1 = new Complex(3.1170298734336303E-169);
      Complex complex2 = complex0.pow(complex1);
      complex2.sinh();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex2.asin();
      complex0.nthRoot(3);
      Complex complex4 = (Complex)complex1.readResolve();
      Complex complex5 = Complex.I;
      complex5.multiply((-784.9680389));
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
      complex0.reciprocal();
      Complex complex2 = new Complex((-1.6661676835672304E143), Double.POSITIVE_INFINITY);
      try { 
        complex2.nthRoot((-610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -610
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1995.0613975892263), (-1995.0613975892263));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf((-1995.0613975892263));
      complex5.asin();
      complex3.createComplex(1841.075315307, 2604.32343888729);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-3.4208181099237867));
      complex1.INF.abs();
      Complex complex2 = complex1.sinh();
      complex2.tanh();
      Complex complex3 = complex0.log();
      complex0.conjugate();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-885.93710224905));
      Complex complex1 = complex0.multiply((-3150.57963242484));
      Complex complex2 = new Complex((-885.93710224905));
      complex0.tan();
      Complex complex3 = Complex.valueOf((-3150.57963242484), 2543.1);
      complex1.pow(complex3);
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = new Complex((-20.0));
      complex1.tanh();
      Complex complex3 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.pow(complex0);
      Complex complex2 = Complex.valueOf(2464.7, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(5.707036058460089E-142);
      Complex complex4 = new Complex(5.707036058460089E-142);
      complex1.tan();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.sin();
      complex3.pow(complex6);
      complex4.sqrt();
      try { 
        complex4.nthRoot((-1076));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,076
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-885.93710224905), (-885.93710224905));
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.NaN;
      complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-43.0407), (-43.0407));
      Complex complex1 = complex0.pow(complex0);
      complex1.I.exp();
      Complex complex2 = complex1.sinh();
      complex1.ZERO.multiply(complex0);
      complex1.ZERO.tan();
      complex1.asin();
      complex0.multiply((-875));
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = Complex.ZERO;
      complex2.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.I;
      Object object0 = complex0.readResolve();
      complex4.equals(object0);
      Complex.valueOf(0.0);
      complex2.sinh();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-43.0407));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.asin();
      complex2.multiply(complex3);
      complex0.asin();
      complex3.multiply((-1157));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1395.6299976636574));
      Complex complex1 = Complex.valueOf(459.2807336);
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = Complex.valueOf(459.2807336);
      complex4.NaN.exp();
      Complex complex5 = complex2.INF.exp();
      complex5.createComplex(Double.POSITIVE_INFINITY, 322.51693575059);
      complex4.toString();
      Complex.valueOf(1.6207809718247905E-10);
      Complex complex6 = new Complex(1024.0, 1.6207809718247905E-10);
      complex3.tanh();
      complex4.equals(complex0);
      complex3.multiply(1308);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-3.4208181099237867));
      Complex complex2 = complex1.sinh();
      complex2.tanh();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.multiply(149);
      Complex complex2 = complex0.multiply(149);
      complex1.toString();
      Complex complex3 = Complex.INF;
      complex1.getImaginary();
      Complex complex4 = complex2.createComplex(20.0, 839.8706352096633);
      complex4.toString();
      Complex.valueOf(0.0);
      Complex complex5 = new Complex(839.8706352096633, 20.0);
      complex4.tanh();
      complex0.equals(complex3);
      complex4.multiply(1359);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.INF.nthRoot(513);
      complex0.nthRoot(1285);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-43.0407), (-43.0407));
      Complex complex1 = new Complex((-43.0407));
      Complex complex2 = new Complex((-43.0407));
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.NaN;
      complex4.pow(complex0);
      Complex complex5 = complex0.reciprocal();
      complex4.reciprocal();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.multiply(3.1170298734336303E-169);
      complex7.getImaginary();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = Complex.I;
      complex9.getReal();
      complex3.sinh();
      Complex complex10 = complex8.tanh();
      Complex complex11 = Complex.ZERO;
      complex3.equals(complex5);
      Complex.valueOf(7.90594243412116E-12);
      Complex complex12 = complex3.sinh();
      complex12.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2048.7791013), (-2048.7791013));
      Complex complex2 = new Complex(218.503405487);
      Complex complex3 = new Complex((-2048.7791013));
      Complex complex4 = complex3.tan();
      complex2.multiply((-1373));
      Complex complex5 = complex1.sin();
      Complex complex6 = complex2.pow(complex1);
      complex0.reciprocal();
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.ZERO;
      complex3.getImaginary();
      Complex complex9 = complex3.sqrt();
      complex5.getReal();
      complex4.sinh();
      complex9.tanh();
      Complex complex10 = Complex.I;
      complex10.readResolve();
      complex6.equals(complex4);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ZERO;
      complex0.divide(complex2);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.cos();
      complex1.pow(complex4);
      Complex complex5 = complex3.reciprocal();
      complex5.reciprocal();
      complex3.multiply(3.1170298734336303E-169);
      complex2.getImaginary();
      Complex complex6 = complex1.sqrt();
      complex4.getReal();
      complex4.sinh();
      complex6.tanh();
      Complex complex7 = Complex.ZERO;
      complex1.equals(complex7);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.sinh();
      complex2.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.I.createComplex(2.0, 2.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex4.ZERO.tanh();
      complex5.ONE.acos();
      Complex complex6 = complex5.pow((-1005.104765004214));
      complex0.INF.hashCode();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex7.I.pow((-1005.104765004214));
      complex7.abs();
      complex3.equals("ouq");
      complex0.add(complex4);
      Complex.valueOf((-579.292117885), 340.2257);
      Complex complex9 = complex6.divide(complex3);
      Complex complex10 = complex6.atan();
      complex3.sinh();
      Complex.valueOf(2694.891);
      complex9.pow(7.344328613549262E-169);
      complex8.reciprocal();
      complex3.ZERO.sinh();
      complex10.I.atan();
      Complex complex11 = complex1.negate();
      Complex complex12 = complex10.multiply((-3432.7131923238));
      complex2.getField();
      complex12.toString();
      complex4.subtract(complex9);
      Complex complex13 = complex11.reciprocal();
      complex13.ONE.log();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.NaN.multiply(0.0);
      Complex complex3 = complex2.INF.divide(Double.NaN);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex5.NaN.subtract(complex0);
      complex7.NaN.hashCode();
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = Complex.INF;
      complex7.ZERO.subtract(complex9);
      Complex complex10 = complex7.ONE.sin();
      complex10.ZERO.conjugate();
      complex5.ONE.abs();
      Complex complex11 = complex6.createComplex(Double.NaN, 2.2538131805476768E-8);
      complex11.ZERO.sinh();
      Complex complex12 = complex5.exp();
      Complex.valueOf((-1397.2864678921069));
      complex0.acos();
      complex6.cosh();
      complex12.readResolve();
      Complex.valueOf(Double.NaN, (-1397.2864678921069));
      Complex complex13 = complex1.divide(1.0);
      complex13.ZERO.subtract(complex0);
      Complex complex14 = complex12.tanh();
      complex14.I.pow(complex13);
      complex14.cos();
      complex4.abs();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-43.0407), (-43.0407));
      Complex complex1 = new Complex(3.1170298734336303E-169);
      Complex complex2 = complex0.pow(complex1);
      complex2.sinh();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex2.multiply((-391.1918));
      complex1.getImaginary();
      complex5.sqrt();
      complex0.getReal();
      complex6.sinh();
      complex4.tanh();
      complex3.equals(complex2);
      Complex.valueOf((-43.0407));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = new Complex(4097.704244);
      complex1.pow(complex0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply(complex2);
      complex2.asin();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.createComplex(6.283185307179586, 563.889756);
      complex5.ZERO.multiply(complex3);
      Complex complex6 = Complex.ZERO;
      complex6.nthRoot(3349);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-4087.7328798992007), 0.33115679025650024);
      complex1.subtract(complex0);
      Complex complex3 = complex0.multiply((-120.2273966));
      Complex complex4 = new Complex((-1.0));
      Complex complex5 = complex3.tan();
      complex5.multiply((-1460));
      Complex complex6 = complex0.sin();
      Complex complex7 = Complex.valueOf(13668.403977940025);
      complex5.pow(complex7);
      complex5.reciprocal();
      Complex complex8 = Complex.valueOf(2.001249211922384, (-148.554032604));
      Complex complex9 = complex8.multiply((-996.9080241));
      complex0.getImaginary();
      complex2.sqrt();
      Complex complex10 = Complex.I;
      complex10.I.abs();
      complex10.getReal();
      complex3.sinh();
      complex2.tanh();
      complex9.equals(complex6);
      Complex.valueOf((-148.554032604));
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex0.multiply(1913);
      Complex complex5 = complex4.multiply(1913);
      complex0.toString();
      Complex complex6 = Complex.INF;
      complex6.getImaginary();
      complex5.createComplex(1353.415, 1269.32589234);
      complex1.toString();
      Complex.valueOf((-3.4208181099237867));
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, 1269.32589234);
      complex7.tanh();
      complex1.equals(complex2);
      complex5.multiply(639);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-43.0407), (-43.0407));
      Complex complex1 = new Complex(3.1170298734336303E-169);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.multiply(complex0);
      complex3.ONE.multiply(3364.957720501);
      complex2.asin();
      complex1.createComplex((-43.0407), 3.1170298734336303E-169);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(39.97504693322084);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.createComplex(39.97504693322084, 1047.682532614903);
      Complex complex3 = complex1.I.add(1765.1994150591681);
      complex3.readResolve();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.ONE.sqrt();
      complex5.NaN.negate();
      complex5.I.readResolve();
      Complex complex6 = complex4.divide(39.97504693322084);
      complex0.subtract((-1395.62999766));
      complex2.abs();
      Complex complex7 = complex6.log();
      complex7.ZERO.asin();
      complex2.equals(complex7);
      complex1.pow(1765.1994150591681);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 1.0);
      complex0.ZERO.getArgument();
      complex0.INF.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.sqrt1z();
      complex1.ZERO.getArgument();
      Complex complex3 = complex1.I.exp();
      complex3.NaN.log();
      Complex complex4 = complex1.sqrt();
      complex0.add(1.0);
      complex0.I.multiply(2043);
      complex3.divide(complex4);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-43.0407), (-43.0407));
      Complex complex1 = new Complex(3.1170298734336303E-169);
      Complex complex2 = complex0.pow(complex1);
      complex2.sinh();
      complex2.ZERO.multiply(complex0);
      complex2.asin();
      complex1.createComplex((-43.0407), 3.1170298734336303E-169);
      complex0.nthRoot(3349);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = Complex.NaN;
      Complex.valueOf(0.0, (-2339.8901047300724));
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex3.ZERO.atan();
      complex3.INF.hashCode();
      Complex.valueOf((-2429.0));
      Complex complex5 = complex4.pow(complex0);
      complex2.getImaginary();
      Complex complex6 = Complex.ONE;
      complex5.cosh();
      Complex.valueOf(1.4788974793889734E-74);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-1395.6299976636574));
      Complex complex1 = complex0.createComplex(459.2807336, 459.2807336);
      Complex complex2 = complex1.ZERO.cosh();
      complex1.ZERO.cosh();
      Complex complex3 = Complex.valueOf(459.2807336);
      complex2.abs();
      Complex complex4 = complex3.NaN.exp();
      complex2.INF.exp();
      complex0.I.exp();
      complex3.multiply(3034.0);
      Complex complex5 = Complex.ONE;
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.INF.sin();
      Complex.valueOf((-4087.7328798992007));
      Complex complex3 = Complex.INF;
      complex1.acos();
      complex0.hashCode();
      Complex complex4 = complex2.sqrt();
      complex3.divide((-4088.0));
      Object object0 = complex4.readResolve();
      complex1.equals(object0);
      Complex.valueOf(3193.7719279, 1047.682532614903);
      Complex complex5 = complex4.reciprocal();
      complex5.isInfinite();
      complex4.nthRoot(401);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.I.reciprocal();
      Complex complex2 = Complex.ONE;
      complex1.reciprocal();
      Complex complex3 = complex1.multiply(Double.NaN);
      complex3.getImaginary();
      Complex complex4 = complex0.cos();
      Complex complex5 = new Complex(Double.NaN);
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      complex6.getReal();
      complex0.sinh();
      complex3.tanh();
      Complex.valueOf((-804.9685416783), Double.POSITIVE_INFINITY);
      complex1.equals("L5i({D9*='*&xcb6S{;");
      Complex complex7 = Complex.INF;
      complex4.multiply(501);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, (-1047.682532614903));
      Complex.valueOf(0.0, (-1047.682532614903));
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.ZERO.multiply((-120.2273966));
      Complex complex4 = new Complex(0.0);
      complex4.I.tan();
      Complex complex5 = complex3.pow(complex1);
      complex1.tan();
      complex2.getReal();
      complex5.add(1.0);
      Complex complex6 = Complex.ONE;
      complex6.isInfinite();
      complex4.tanh();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex0.multiply(1913);
      Complex complex5 = complex4.multiply(1913);
      complex0.toString();
      complex1.hashCode();
      Complex complex6 = complex3.sqrt();
      Object object0 = new Object();
      complex6.equals(object0);
      Complex.valueOf(Double.NaN, 3038.0961300000004);
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = Complex.valueOf(449.764616764693, (double) 1913);
      complex8.isInfinite();
      complex0.nthRoot(1208);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.divide((-1721.9363));
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.tanh();
      complex0.I.multiply(complex2);
      Complex complex6 = complex0.createComplex((-1721.9363), (-1172.9284867233));
      Complex complex7 = complex6.ONE.cos();
      complex7.I.conjugate();
      Complex complex8 = complex7.ONE.add(complex0);
      complex8.INF.log();
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex0.I.conjugate();
      Complex complex11 = complex5.reciprocal();
      complex11.add((-1172.9284867233));
      complex2.equals(":8");
      complex11.getImaginary();
      Complex complex12 = complex3.ONE.subtract(complex7);
      complex12.sinh();
      Complex.valueOf((-1721.9363));
      complex10.atan();
      complex1.sqrt();
      complex0.divide(complex3);
      Complex complex13 = complex11.conjugate();
      complex13.NaN.log();
      complex6.getField();
      complex2.multiply(979);
      Complex complex14 = complex1.atan();
      complex6.add(complex14);
      complex6.sqrt1z();
      complex9.add((-394.486));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.acos();
      Complex complex2 = Complex.ONE;
      complex1.divide(complex2);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.multiply((-1333.39613));
      complex0.getImaginary();
      complex3.cos();
      complex1.sqrt();
      complex2.getReal();
      complex3.sinh();
      complex4.tanh();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 2301.158462);
      complex5.equals(complex3);
      Complex complex6 = Complex.INF;
      complex6.multiply(501);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-1395.6299976636574));
      Complex complex1 = complex0.createComplex(459.2807336, 459.2807336);
      Complex complex2 = complex1.ZERO.cosh();
      complex1.ZERO.cosh();
      Complex complex3 = Complex.valueOf(459.2807336);
      complex2.abs();
      complex3.NaN.exp();
      complex2.INF.exp();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex3.multiply(3034.0);
      complex5.ZERO.hashCode();
      complex1.I.sqrt();
      Complex complex6 = complex5.divide(459.2807336);
      complex0.equals(complex2);
      Complex.valueOf(3034.0, Double.NaN);
      Complex complex7 = complex4.reciprocal();
      complex6.isInfinite();
      complex4.nthRoot(401);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = Complex.valueOf((-4088.0));
      Complex complex3 = complex1.ZERO.add(1776.909920722);
      Complex complex4 = Complex.valueOf(1776.909920722);
      complex4.toString();
      complex2.createComplex((-4088.0), (-538.913));
      complex3.add(1776.909920722);
      Complex complex5 = Complex.valueOf(1776.909920722);
      complex5.getArgument();
      complex5.tan();
      int int0 = 1274766256;
      // Undeclared exception!
      complex5.nthRoot(1274766256);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.ZERO.exp();
      complex2.I.subtract(complex1);
      Complex complex3 = complex0.multiply(1913);
      Complex complex4 = complex3.multiply(1913);
      complex0.toString();
      Complex complex5 = Complex.INF;
      complex5.getImaginary();
      complex4.createComplex(1353.415, 1269.32589234);
      complex1.toString();
      Complex complex6 = Complex.valueOf((-3.4208181099237867));
      Complex complex7 = complex6.sinh();
      complex7.tanh();
      complex1.equals(complex2);
      complex4.multiply(639);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, (-1047.682532614903));
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex1.add((-1.0));
      double double0 = 232.37580883346;
      Complex complex3 = Complex.valueOf(232.37580883346);
      Complex complex4 = complex1.sqrt();
      complex4.getArgument();
      complex0.cosh();
      complex0.sqrt();
      complex3.sqrt1z();
      Complex complex5 = new Complex(232.37580883346);
      Complex complex6 = Complex.INF;
      complex5.divide(complex6);
      complex0.tan();
      Complex.valueOf(1038.257643, (-1047.682532614903));
      try { 
        complex2.nthRoot((-2198));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,198
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.atan();
      Complex complex1 = Complex.valueOf((-4088.0));
      Complex complex2 = new Complex((-4088.0));
      Complex complex3 = complex0.tan();
      Complex.valueOf((-4088.0));
      Complex complex4 = Complex.INF;
      complex4.exp();
      complex3.tan();
      Complex complex5 = complex2.cosh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.valueOf((-2.134387988350615E-80), 1047.682532614903);
      complex3.readResolve();
      complex5.equals("*T@?W`.$~P");
      Complex complex8 = new Complex(1482.95805, (-1157.0396104067));
      complex8.abs();
      Complex complex9 = Complex.ONE;
      complex1.reciprocal();
      complex7.readResolve();
      Complex complex10 = complex1.pow((-1157.0396104067));
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(-0.0, (-1047.682532614903));
      Complex complex2 = Complex.valueOf(1.460686206817627, (-20.0));
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex0.multiply((-307.69));
      Complex complex6 = new Complex(4723.572806436);
      Complex complex7 = complex5.tan();
      complex3.multiply((-1521));
      complex3.sin();
      Complex complex8 = new Complex((-20.0), (-1521));
      complex2.reciprocal();
      complex1.multiply((-1047.682532614903));
      complex3.getImaginary();
      complex0.sqrt();
      complex7.getReal();
      Complex complex9 = complex5.sinh();
      complex9.tanh();
      Object object0 = new Object();
      complex4.equals(object0);
      complex9.multiply((-3153));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2098.086);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.ZERO.tan();
      complex1.ZERO.readResolve();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.subtract(complex3);
      Complex complex8 = complex7.ONE.acos();
      complex8.ZERO.cos();
      Complex complex9 = complex7.NaN.multiply(2098.086);
      complex9.INF.multiply(complex7);
      complex6.INF.hashCode();
      Complex complex10 = complex2.sqrt();
      complex10.INF.pow(2098.086);
      Complex complex11 = complex10.reciprocal();
      Complex.valueOf(2098.086, (-775.00197467));
      complex11.I.createComplex(2098.086, 2098.086);
      Complex complex12 = complex10.ONE.tanh();
      Complex complex13 = complex10.tanh();
      complex13.NaN.abs();
      complex10.abs();
      complex12.getImaginary();
      complex5.reciprocal();
      complex4.conjugate();
      Complex complex14 = complex3.multiply(2098.086);
      complex14.ZERO.conjugate();
      complex10.multiply((-2525.1));
      complex10.subtract(2342.5084363986753);
      complex5.subtract((-399.0));
      complex11.sqrt1z();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.414213562373095, 2.414213562373095);
      Complex complex2 = complex1.I.createComplex(2.414213562373095, (-3351.160900611));
      Complex complex3 = complex0.divide(complex1);
      complex0.cos();
      Complex complex4 = complex1.add(complex0);
      complex3.divide(complex1);
      complex0.multiply(37);
      complex4.getField();
      Complex complex5 = complex2.cosh();
      complex5.equals(complex1);
      complex5.subtract(2.414213562373095);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, (-1047.682532614903));
      Complex complex2 = Complex.valueOf(0.0, (-1047.682532614903));
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex0.ZERO.multiply((-120.2273966));
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex5.I.tan();
      complex6.NaN.multiply((-1373));
      complex5.ZERO.sin();
      Complex complex7 = complex0.pow(complex5);
      complex2.I.reciprocal();
      complex7.NaN.multiply((-120.2273966));
      complex5.getImaginary();
      Complex complex8 = complex3.sqrt();
      complex2.getReal();
      complex2.sinh();
      complex3.tanh();
      complex4.equals(complex6);
      complex8.multiply(501);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply((-1721.9363));
      complex1.INF.exp();
      Complex complex2 = new Complex((-1721.9363));
      complex2.I.getField();
      complex2.I.getField();
      Complex complex3 = complex2.ZERO.pow((-8.281845251820919E-8));
      complex3.ONE.hashCode();
      Complex complex4 = complex3.I.pow((-8.281845251820919E-8));
      complex4.I.tanh();
      Complex complex5 = complex2.I.multiply(complex0);
      complex5.ZERO.acos();
      complex0.divide(complex2);
      Complex complex6 = complex0.subtract(complex5);
      complex6.I.tanh();
      try { 
        complex6.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = new Complex(1157.0396104067, 1157.0396104067);
      complex1.INF.add(complex2);
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex4 = complex3.INF.add(complex0);
      complex4.ONE.sqrt();
      complex4.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.NaN.add(0.0);
      complex5.NaN.asin();
      Complex complex6 = complex3.sinh();
      complex6.INF.getField();
      complex3.readResolve();
      complex6.isNaN();
      Complex complex7 = complex6.subtract(4.293620869258453E210);
      Complex complex8 = complex7.I.subtract(complex4);
      Complex complex9 = Complex.ONE;
      complex6.ONE.abs();
      complex2.ZERO.add(complex9);
      complex8.ZERO.multiply(0);
      complex2.isInfinite();
      complex6.asin();
      complex2.sqrt();
      complex3.sinh();
      Complex.valueOf((double) 0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.atan();
      complex2.getArgument();
      complex2.reciprocal();
      complex2.getField();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex4.reciprocal();
      complex0.sqrt();
      complex0.tan();
      Complex complex6 = (Complex)complex4.INF.readResolve();
      Complex complex7 = complex3.pow((-614.0));
      Complex complex8 = Complex.valueOf((-614.0), (-357.88));
      Complex complex9 = complex7.multiply(complex8);
      Complex complex10 = complex5.log();
      complex3.abs();
      complex10.subtract(complex7);
      complex7.isNaN();
      complex10.subtract(Double.NaN);
      complex9.subtract(complex7);
      Complex complex11 = Complex.ONE;
      Complex complex12 = Complex.NaN;
      complex12.add(complex3);
      complex6.multiply((-2417));
      Complex complex13 = Complex.NaN;
      complex13.isInfinite();
      complex6.asin();
      complex12.sqrt();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.subtract(3247.0);
      Complex complex1 = complex0.ONE.createComplex(3247.0, 4007.149);
      complex0.negate();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.tan();
      complex3.ONE.multiply(0);
      complex0.INF.readResolve();
      Complex complex4 = Complex.valueOf((-990.381), 0.41421356237309515);
      complex4.cosh();
      Complex complex5 = Complex.valueOf(20.0);
      complex3.isNaN();
      Complex complex6 = complex5.add(complex2);
      complex6.isNaN();
      Complex complex7 = complex5.asin();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.I.subtract(complex1);
      complex0.ONE.reciprocal();
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex5.pow(1285.0589604576126);
      complex1.add((-1938.0));
      Complex complex8 = complex2.asin();
      Complex complex9 = complex7.sinh();
      complex6.getField();
      complex9.readResolve();
      complex3.isNaN();
      complex4.subtract(4.293620869258453E210);
      complex2.subtract(complex0);
      Complex complex10 = Complex.ONE;
      complex0.add(complex1);
      Complex complex11 = complex2.multiply(0);
      complex0.isInfinite();
      complex9.asin();
      complex11.sqrt();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex0.multiply(1913);
      complex4.multiply(1913);
      complex0.toString();
      Complex complex5 = Complex.valueOf(4165.8892086961, (double) 1913);
      complex3.INF.cosh();
      Complex complex6 = Complex.valueOf((double) 1913);
      complex4.isNaN();
      complex5.add(complex3);
      complex5.add((double) 1913);
      Complex complex7 = Complex.I;
      complex7.exp();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.getField();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.add(complex1);
      complex2.isNaN();
      complex0.asin();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = new Complex((-7.724219106106896E111));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.pow((-7.724219106106896E111));
      Complex complex5 = complex4.add((-7.724219106106896E111));
      Complex complex6 = complex1.asin();
      Complex complex7 = complex1.sinh();
      complex7.getField();
      complex6.readResolve();
      complex1.isNaN();
      Complex complex8 = new Complex(1.6121022701263428);
      complex8.subtract((-20.0));
      complex2.subtract(complex3);
      Complex complex9 = Complex.ONE;
      complex0.add(complex5);
      complex5.multiply(0);
      complex3.isInfinite();
      complex6.asin();
      complex5.sqrt();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = new Complex(1157.0396104067, 1157.0396104067);
      complex1.INF.add(complex2);
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      complex3.NaN.sinh();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1333.39613));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex2.ONE.tan();
      complex0.readResolve();
      complex0.getReal();
      complex1.add((-1333.39613));
      complex4.divide(complex0);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(0.9921976327896118, 0.9921976327896118);
      complex2.equals(complex1);
      Complex.valueOf(0.9921976327896118, (-3.4174925203771133E-9));
      complex0.reciprocal();
      complex1.isInfinite();
      complex1.createComplex(0.2845032215118408, Double.NaN);
      Complex.valueOf(0.2845032215118408);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-1395.6299976636574));
      Complex complex1 = complex0.createComplex(459.2807336, 459.2807336);
      Complex complex2 = complex1.ZERO.cosh();
      complex1.ZERO.cosh();
      Complex complex3 = Complex.valueOf(459.2807336);
      Complex complex4 = complex3.NaN.exp();
      complex0.I.exp();
      Complex complex5 = complex3.multiply(3034.0);
      complex5.ZERO.hashCode();
      Complex complex6 = complex1.I.sqrt();
      complex6.INF.multiply(1);
      complex5.divide((-1160.0));
      complex0.equals(complex2);
      complex0.sqrt();
      complex4.getReal();
      complex3.sinh();
      complex1.conjugate();
      Complex complex7 = Complex.ONE;
      complex7.add(Double.NaN);
      complex1.exp();
      Complex complex8 = Complex.NaN;
      complex8.getField();
      Complex complex9 = Complex.ZERO;
      complex9.asin();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.cos();
      complex3.negate();
      complex1.readResolve();
      complex3.reciprocal();
      Complex complex5 = Complex.valueOf(1358.1, 1358.1);
      complex4.conjugate();
      Complex.valueOf((-2412.205303));
      complex3.sqrt1z();
      complex5.getImaginary();
      complex0.I.hashCode();
      complex0.ONE.multiply(17);
      Complex complex6 = complex5.pow(complex4);
      complex6.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.createComplex(3247.0, 4007.149);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.ONE.multiply(0);
      complex0.INF.readResolve();
      Complex complex6 = complex1.INF.createComplex(756.9, 4007.149);
      complex6.INF.add(0.0);
      complex4.getArgument();
      complex1.tan();
      complex5.nthRoot(1);
      complex3.readResolve();
      complex2.multiply(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.INF.createComplex((-2571.603), 0.0);
      Complex complex4 = Complex.ONE;
      complex3.NaN.pow(complex4);
      Complex complex5 = complex0.createComplex((-2571.603), (-2571.603));
      complex0.asin();
      complex2.readResolve();
      complex0.isNaN();
      Complex complex6 = Complex.valueOf((-2571.603), (-2571.603));
      complex6.NaN.multiply(1);
      complex5.atan();
      complex5.pow((-2571.603));
      complex3.subtract(0.0);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.363437558318513E-8);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex1.ONE.sqrt();
      Complex complex4 = complex0.subtract((-3848.8389541584625));
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.NaN.pow(1827.071513501);
      Complex complex8 = complex7.NaN.atan();
      complex8.ONE.getField();
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = complex8.I.add(complex4);
      complex3.subtract(complex10);
      Complex complex11 = complex2.reciprocal();
      complex11.asin();
      complex4.tan();
      complex2.acos();
      Complex.valueOf(0.0, 4.363437558318513E-8);
      Complex complex12 = complex3.multiply((-1737));
      Complex complex13 = complex6.asin();
      complex13.I.getField();
      complex4.isInfinite();
      complex5.getField();
      complex0.tanh();
      complex12.hashCode();
      complex6.exp();
      complex11.nthRoot(1);
      complex2.add(6.283185307179586);
      complex9.toString();
      complex10.sin();
      Complex.valueOf(1767.500986262008);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1333.39613));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      complex1.pow(complex0);
      complex2.ONE.tan();
      complex0.readResolve();
      complex0.getReal();
      complex1.add((-1333.39613));
      complex1.isInfinite();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply((-1721.9363));
      complex1.INF.exp();
      Complex complex2 = Complex.I;
      complex2.I.getField();
      complex2.I.getField();
      Complex complex3 = complex2.ZERO.pow((-8.281845251820919E-8));
      complex3.ONE.hashCode();
      Complex complex4 = complex3.I.pow((-8.281845251820919E-8));
      complex4.I.tanh();
      Complex complex5 = complex2.I.multiply(complex0);
      complex5.ZERO.acos();
      complex0.divide(complex2);
      Complex complex6 = complex0.subtract(complex5);
      complex6.I.tanh();
      try { 
        complex6.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      complex1.ZERO.getArgument();
      complex1.ZERO.multiply(complex0);
      complex1.ZERO.divide((-1.0));
      complex1.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.add(complex3);
      complex4.I.acos();
      Complex complex5 = complex2.cosh();
      complex3.subtract(1314.478496323);
      complex5.readResolve();
      complex1.subtract(2756.92);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex3.ZERO.atan();
      complex3.INF.hashCode();
      Complex complex5 = Complex.valueOf((-2429.0));
      complex2.ONE.pow(complex5);
      complex0.getImaginary();
      complex0.createComplex(1.0, (-1176.86407989585));
      complex1.toString();
      Complex complex6 = Complex.valueOf(1.0);
      Complex complex7 = complex2.sinh();
      complex7.tanh();
      complex6.equals(complex4);
      complex1.multiply(639);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-862.529435351));
      Complex complex1 = new Complex((-2630.8049235761));
      complex1.add(779.58);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex1.atan();
      complex2.NaN.createComplex(0.0, (-2761.83550602));
      complex4.ONE.pow(complex1);
      complex4.INF.readResolve();
      complex2.sin();
      complex3.ZERO.readResolve();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = complex0.ZERO.negate();
      complex0.ZERO.abs();
      complex1.I.getArgument();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.createComplex(0.0, 0.0);
      complex3.ZERO.getArgument();
      Complex complex4 = complex3.I.sin();
      complex4.NaN.reciprocal();
      Complex complex5 = complex2.ZERO.divide(0.0);
      complex2.cosh();
      complex1.getReal();
      complex2.subtract(complex5);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = new Complex(1157.0396104067, 1157.0396104067);
      complex1.INF.add(complex2);
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex4 = complex3.INF.add(complex0);
      complex4.ONE.sqrt();
      complex4.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.NaN.add(0.0);
      complex5.NaN.asin();
      Complex complex6 = complex3.sinh();
      complex6.INF.getField();
      complex3.readResolve();
      complex6.isNaN();
      Complex complex7 = complex6.subtract(4.293620869258453E210);
      Complex complex8 = complex7.I.subtract(complex4);
      Complex complex9 = Complex.ONE;
      complex2.ZERO.add(complex9);
      complex8.ZERO.multiply(0);
      complex2.isInfinite();
      complex6.asin();
      complex2.sqrt();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex0.multiply(1913);
      complex4.multiply(1913);
      complex0.toString();
      Complex complex5 = Complex.valueOf(4165.8892086961, (double) 1913);
      Complex complex6 = complex3.INF.cosh();
      Complex.valueOf((-1244.619006763112));
      complex4.isNaN();
      complex5.add(complex3);
      complex2.isNaN();
      complex5.asin();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.add(1984.31856726962);
      complex1.I.createComplex(2444.0, 2444.0);
      complex1.ONE.getArgument();
      complex0.ONE.readResolve();
      Complex complex2 = complex0.multiply(1118.3221082);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = Complex.valueOf(1118.3221082, 1118.3221082);
      Complex complex6 = complex0.createComplex(1984.31856726962, 1118.3221082);
      complex4.INF.createComplex(0.0, 0.0);
      Complex complex7 = complex6.sqrt1z();
      complex0.getImaginary();
      complex7.isInfinite();
      complex5.multiply(complex6);
      Complex complex8 = complex2.pow(complex7);
      complex5.NaN.sqrt1z();
      Complex complex9 = complex8.NaN.divide(Double.NaN);
      complex0.toString();
      Complex complex10 = complex9.sinh();
      complex5.multiply(Double.NaN);
      complex10.I.sqrt();
      Complex complex11 = complex9.subtract(complex10);
      Complex complex12 = complex11.ONE.negate();
      complex12.I.sin();
      complex2.readResolve();
      Complex.valueOf(6398.0, Double.NaN);
      complex2.isNaN();
      complex7.conjugate();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1395.6299976636574));
      Complex complex1 = complex0.createComplex(459.2807336, 459.2807336);
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = Complex.valueOf(459.2807336);
      complex4.NaN.exp();
      Complex complex5 = complex2.INF.exp();
      Complex complex6 = complex0.I.exp();
      Complex complex7 = complex4.multiply(3034.0);
      complex7.ZERO.hashCode();
      complex1.I.sqrt();
      Complex complex8 = complex7.divide((-1160.0));
      complex0.equals(complex2);
      Complex.valueOf((-1160.0), Double.NaN);
      complex6.reciprocal();
      complex8.isInfinite();
      complex5.createComplex(0.2845032215118408, (-251.19));
      Complex.valueOf(Double.NaN);
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.atan();
      complex2.getArgument();
      Complex complex3 = complex2.reciprocal();
      complex2.getField();
      Complex complex4 = complex1.I.sin();
      Complex complex5 = complex1.INF.log();
      Complex complex6 = complex5.reciprocal();
      complex0.sqrt();
      Complex complex7 = complex0.tan();
      complex5.INF.readResolve();
      Complex complex8 = complex4.pow((-614.0));
      Complex complex9 = Complex.valueOf((-614.0), (-357.88));
      Complex complex10 = complex8.multiply(complex9);
      Complex complex11 = complex6.log();
      complex4.abs();
      Complex complex12 = complex11.subtract(complex8);
      complex3.toString();
      complex6.ONE.nthRoot(1153);
      Complex complex13 = complex7.atan();
      complex13.ZERO.multiply(1.1752011936438014);
      complex10.sqrt();
      complex12.atan();
      complex9.subtract((-3191.888640867625));
      complex7.subtract(0.0);
      complex10.multiply((-3191.888640867625));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = Complex.INF;
      complex1.I.abs();
      complex0.pow(complex1);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.divide(943.16778);
      Complex.valueOf(0.0, 0.0);
      complex1.ONE.pow(0.0);
      Complex complex2 = complex1.sqrt();
      complex2.ONE.multiply(2150);
      complex2.cos();
      Complex complex3 = complex0.ZERO.createComplex(0.0, (-4558.348));
      Complex complex4 = complex3.NaN.sqrt();
      Complex.valueOf((double) 2150);
      Complex complex5 = Complex.NaN;
      complex5.pow((-4558.348));
      complex3.NaN.createComplex(0.0, 2150);
      Complex complex6 = complex0.pow(complex5);
      complex6.INF.add(0.0);
      Complex complex7 = complex4.ZERO.cosh();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.sqrt1z();
      complex9.ZERO.createComplex(0.0, 0.0);
      complex9.NaN.divide(complex7);
      complex5.I.tan();
      Complex complex10 = complex0.pow(0.0);
      complex10.NaN.tan();
      Complex complex11 = complex8.log();
      try { 
        complex11.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.createComplex(1572.8589381093, 1572.8589381093);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.NaN.tan();
      complex4.tan();
      Complex complex5 = complex4.INF.add(complex1);
      Complex complex6 = complex3.I.exp();
      Complex complex7 = complex3.I.createComplex(0.0, 1572.8589381093);
      complex6.ZERO.abs();
      complex6.ZERO.subtract(complex3);
      Complex complex8 = complex0.multiply(complex3);
      Complex complex9 = complex8.I.createComplex(2.0, 1424.1353);
      complex8.ZERO.exp();
      complex9.NaN.getField();
      complex3.NaN.sin();
      Complex complex10 = complex0.multiply(complex8);
      complex1.NaN.sinh();
      complex6.readResolve();
      complex0.hashCode();
      complex6.getField();
      complex3.isInfinite();
      complex2.conjugate();
      complex8.ONE.asin();
      complex7.readResolve();
      Complex complex11 = complex10.sqrt();
      complex11.conjugate();
      complex6.asin();
      complex5.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.ONE.subtract((double) 1);
      complex3.sin();
      Complex complex4 = complex0.tanh();
      complex2.ONE.hashCode();
      Complex complex5 = complex4.NaN.add((double) 1);
      complex5.sqrt();
      Complex.valueOf((double) 1);
      complex0.ONE.exp();
      Complex complex6 = complex0.NaN.tan();
      complex6.ONE.cosh();
      complex4.equals(complex3);
      complex4.abs();
      Complex complex7 = complex0.reciprocal();
      complex1.readResolve();
      complex6.pow((double) 1);
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(2699);
      complex1.NaN.getField();
      complex0.subtract(0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.tanh();
      complex3.acos();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ZERO.multiply(2699);
      complex4.I.multiply((-5777));
      complex0.NaN.subtract((-3747.980004976285));
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = Complex.valueOf(2.0);
      Complex complex8 = complex1.sin();
      complex8.ONE.atan();
      Complex complex9 = complex4.add(complex2);
      complex4.NaN.pow((double) (-5777));
      Complex complex10 = complex6.multiply(1374);
      complex10.NaN.divide(complex5);
      complex8.nthRoot(2699);
      complex9.cos();
      complex7.tan();
      Complex complex11 = Complex.valueOf((double) 2699, 2.0);
      complex6.atan();
      complex0.cos();
      complex11.readResolve();
      complex3.multiply(1374);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(0.9921976327896118, 0.9921976327896118);
      complex2.ONE.multiply(284);
      complex2.I.sqrt1z();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(1);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex1.INF.multiply(complex2);
      complex2.ONE.negate();
      Complex complex5 = complex0.exp();
      complex1.INF.toString();
      Complex complex6 = complex5.pow(complex1);
      complex6.getReal();
      Complex complex7 = complex0.multiply(690);
      complex7.INF.tan();
      Complex complex8 = complex7.negate();
      complex8.sqrt();
      Complex complex9 = complex0.subtract(4430.0);
      Complex complex10 = complex9.ONE.sqrt();
      complex10.ONE.add(complex1);
      complex10.INF.sin();
      complex2.tanh();
      complex7.cosh();
      complex0.toString();
      complex3.hashCode();
      complex3.tanh();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1901.4363529781795), (-1901.4363529781795));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex2.pow((-1901.4363529781795));
      Complex complex4 = complex2.ZERO.negate();
      Complex complex5 = complex4.NaN.multiply(complex2);
      Complex complex6 = complex5.multiply(complex4);
      complex5.NaN.abs();
      complex4.I.add(3647.9503306);
      complex0.isNaN();
      Complex complex7 = complex4.NaN.tanh();
      complex7.ZERO.getArgument();
      complex5.ONE.tanh();
      Complex complex8 = complex2.pow((-1901.4363529781795));
      Complex complex9 = complex2.reciprocal();
      complex2.I.readResolve();
      Complex complex10 = complex1.INF.log();
      Complex complex11 = complex10.I.sqrt();
      Complex complex12 = complex4.sqrt1z();
      complex12.add(complex9);
      complex12.NaN.divide(complex8);
      Complex complex13 = complex9.add(complex1);
      complex11.INF.divide((-1901.4363529781795));
      complex2.INF.divide((-469.9804217));
      Complex complex14 = Complex.valueOf(0.0);
      complex14.ONE.hashCode();
      complex2.equals(complex5);
      complex6.exp();
      complex14.multiply((-296));
      complex11.acos();
      complex0.multiply(1);
      complex13.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1859.1726058, (-1026.139209934706));
      Complex complex1 = complex0.INF.tanh();
      complex1.INF.toString();
      Complex complex2 = complex0.NaN.subtract((-1875.301887));
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.NaN.pow(complex1);
      complex0.isNaN();
      Complex complex5 = complex0.multiply(6.987544103716777E-8);
      complex5.ONE.asin();
      Complex complex6 = complex1.tan();
      complex6.abs();
      Complex complex7 = complex0.conjugate();
      complex7.I.asin();
      Complex complex8 = complex4.add(complex0);
      complex0.readResolve();
      complex6.divide(complex0);
      Complex complex9 = complex4.atan();
      Complex complex10 = complex9.acos();
      complex10.INF.getField();
      complex8.INF.readResolve();
      Complex complex11 = complex8.tanh();
      complex4.isInfinite();
      complex11.sqrt();
      complex3.subtract(complex4);
      complex0.sin();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.pow(212.2989065);
      Complex complex3 = complex0.ZERO.divide(complex1);
      complex3.I.toString();
      Complex.valueOf((-2468.0641));
      Complex complex4 = complex0.INF.subtract(0.0);
      complex0.divide((-5009.8557967504));
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex2.negate();
      complex6.ZERO.pow(complex1);
      complex5.getField();
      Complex complex7 = complex0.reciprocal();
      complex3.isNaN();
      Complex complex8 = complex7.tanh();
      complex1.sqrt1z();
      complex8.sin();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      complex0.INF.add(complex1);
      complex0.I.getField();
      Complex complex2 = complex0.sqrt1z();
      complex2.INF.sqrt1z();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.pow(9.704297297526684E31);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex2.ONE.multiply(complex0);
      complex2.ZERO.getField();
      complex0.nthRoot(1044);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.subtract(complex4);
      complex5.ZERO.toString();
      Complex complex6 = complex5.I.cos();
      complex4.abs();
      Complex complex7 = complex4.add(0.8414709848078965);
      complex4.INF.pow(complex6);
      complex7.I.tanh();
      Complex complex8 = complex2.NaN.conjugate();
      complex8.INF.toString();
      Complex complex9 = complex8.INF.subtract(0.0);
      complex9.NaN.reciprocal();
      Complex.valueOf(0.8414709848078965, (-687.386682));
      Complex complex10 = Complex.valueOf(0.0);
      complex3.getReal();
      Complex complex11 = complex0.tan();
      complex11.I.reciprocal();
      Complex.valueOf(0.0);
      complex11.I.log();
      complex9.ZERO.sqrt();
      complex11.subtract(0.0);
      complex11.atan();
      complex9.sinh();
      complex10.tan();
      Complex complex12 = Complex.ONE;
      complex12.I.sqrt1z();
      complex9.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex0.NaN.log();
      complex3.INF.multiply(1358);
      complex0.isNaN();
      Complex complex5 = complex3.multiply(complex0);
      complex1.I.hashCode();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex5.cosh();
      complex7.ONE.nthRoot(502);
      Complex complex8 = complex3.cosh();
      Complex complex9 = Complex.valueOf(0.0, 2430.484156377101);
      complex9.divide(680.359214);
      Complex complex10 = Complex.valueOf(2430.484156377101);
      complex8.I.getField();
      complex6.hashCode();
      Complex complex11 = complex6.acos();
      complex11.NaN.multiply(502);
      Complex complex12 = complex4.sinh();
      complex5.add(complex12);
      complex0.multiply(complex3);
      Complex.valueOf(2430.484156377101, 2430.484156377101);
      complex2.sin();
      complex10.sinh();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex0.NaN.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex2.NaN.acos();
      complex1.INF.abs();
      complex2.hashCode();
      complex2.sqrt();
      Complex complex5 = Complex.valueOf((-1238.5452379310811), (-5464.78937));
      Complex complex6 = complex5.I.atan();
      complex6.cosh();
      complex6.ZERO.reciprocal();
      Complex complex7 = complex3.multiply(1691.728);
      Complex complex8 = complex7.cosh();
      complex8.NaN.pow(0.0);
      complex7.INF.sqrt();
      Complex complex9 = complex1.divide(complex5);
      complex9.log();
      complex2.divide((-5464.78937));
      Complex complex10 = complex9.sqrt();
      complex10.I.add(complex2);
      complex1.readResolve();
      Complex complex11 = complex2.tanh();
      complex11.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, (-1047.682532614903));
      Complex complex2 = Complex.valueOf(0.0, (-1047.682532614903));
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex0.ZERO.multiply((-120.2273966));
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex4.I.tan();
      complex5.NaN.multiply((-1373));
      complex4.ZERO.sin();
      Complex complex6 = complex0.pow(complex4);
      complex2.I.reciprocal();
      complex6.NaN.multiply((-120.2273966));
      complex4.getImaginary();
      Complex complex7 = complex3.sqrt();
      complex2.getReal();
      complex2.sinh();
      complex6.conjugate();
      complex2.add(0.0);
      complex6.exp();
      complex6.getField();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(2442.94651085991);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.divide(2027.1083543);
      complex1.subtract(2027.1083543);
      complex1.ONE.readResolve();
      Complex complex3 = complex2.ZERO.multiply(2442.94651085991);
      complex0.ONE.getField();
      Complex complex4 = complex3.NaN.multiply((-3454));
      complex4.INF.pow(2.0);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.ONE.divide(complex0);
      complex7.INF.sin();
      complex1.toString();
      int int0 = (-706);
      try { 
        complex0.nthRoot((-706));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -706
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(1554.0);
      Complex complex1 = complex0.divide((-1.7335469415174996E-8));
      Complex complex2 = complex0.subtract(1554.0);
      Complex complex3 = complex1.NaN.divide(1554.0);
      complex2.INF.abs();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex0.ZERO.divide(complex3);
      Complex complex6 = complex2.I.tan();
      Complex complex7 = complex6.ONE.tanh();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex7.getReal(), 0.01);
      
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex2.asin();
      Complex complex10 = complex9.atan();
      Complex complex11 = complex2.acos();
      complex2.getImaginary();
      complex3.equals(complex1);
      complex8.getField();
      Complex complex12 = complex4.I.sqrt1z();
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = complex1.NaN.pow(964.591555984032);
      Complex complex15 = complex3.acos();
      Complex complex16 = complex15.ONE.negate();
      complex13.NaN.acos();
      Complex complex17 = complex15.NaN.pow(complex8);
      complex17.abs();
      Complex complex18 = complex4.asin();
      complex18.conjugate();
      Complex complex19 = complex11.add(complex10);
      complex6.isInfinite();
      assertEquals(0.7615941559557649, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      complex5.getReal();
      assertSame(complex5, complex14);
      
      complex4.equals(complex16);
      List<Complex> list0 = complex12.nthRoot(1284);
      assertEquals(1284, list0.size());
      
      complex17.divide(964.591555984032);
      assertTrue(complex8.equals((Object)complex18));
      
      complex13.add(complex15);
      assertEquals(1.2113633229846195, complex13.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex20 = complex19.subtract((-3432.676077767));
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex11.getReal(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex20.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(3163.68261, 1390.06764911);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.ZERO.multiply(37);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.acos();
      double double0 = complex4.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex5 = complex0.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.asin();
      Complex complex7 = Complex.valueOf(3163.68261, 0.3339579105377197);
      assertEquals(3163.68261, complex7.getReal(), 0.01);
      
      complex2.subtract(complex4);
      complex6.isInfinite();
      assertEquals(0.04247984165135947, complex6.getReal(), 0.01);
      
      Complex complex8 = (Complex)complex5.readResolve();
      assertTrue(complex8.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = 1574.26;
      Complex complex0 = Complex.valueOf(1574.26);
      complex0.NaN.abs();
      int int0 = (-1289);
      try { 
        complex0.ZERO.nthRoot((-1289));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,289
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
