/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:51:22 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2817.5104136176087, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(14.509382501215526, 419.9098924);
      Complex complex1 = complex0.pow(419.9098924);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.cos();
      complex2.nthRoot(349);
      complex0.multiply(complex3);
      Complex complex4 = complex2.multiply(670);
      complex4.acos();
      complex1.multiply(complex4);
      Complex complex5 = Complex.valueOf(419.9098924, 3.725487772578621E-38);
      complex5.getField();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.6295084953308105);
      complex0.INF.nthRoot(1);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.pow(539.8);
      complex0.sin();
      complex1.ZERO.readResolve();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.add(2.6295084953308105);
      complex0.atan();
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex5.INF.log();
      complex6.ZERO.tanh();
      complex3.ONE.sinh();
      Complex complex7 = Complex.valueOf(3067.0, 2.6295084953308105);
      complex1.multiply(246);
      Complex complex8 = complex3.multiply(4.313978872469646E-84);
      complex8.NaN.nthRoot(1);
      complex7.sqrt1z();
      complex4.add(complex1);
      complex4.abs();
      Complex.valueOf((double) 246);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(246.472096984, 246.472096984);
      complex0.readResolve();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.divide(complex0);
      complex1.getField();
      Complex complex5 = complex2.asin();
      complex5.sinh();
      Complex complex6 = complex5.acos();
      complex3.sinh();
      complex6.toString();
      complex4.pow((-354.8071615986105));
      Complex complex7 = complex6.multiply(2.8307533984544136E23);
      complex3.log();
      complex2.cos();
      complex1.multiply(complex3);
      Complex complex8 = Complex.NaN;
      Complex complex9 = new Complex(552.209356573183, 800.7897280973574);
      Complex complex10 = complex7.sqrt();
      complex10.acos();
      Complex complex11 = complex2.reciprocal();
      complex7.atan();
      complex11.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.abs();
      complex0.I.cosh();
      complex0.INF.multiply(Double.NaN);
      Complex complex1 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(1.744218911916857E-13);
      Complex complex1 = new Complex(8.328915201745144, 20.0);
      complex1.tan();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 14.509382501215526);
      Complex complex1 = complex0.INF.asin();
      complex1.readResolve();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.NaN;
      complex3.ZERO.negate();
      Complex complex4 = complex2.divide(complex1);
      complex4.INF.exp();
      complex4.getField();
      complex4.ZERO.asin();
      complex0.INF.sinh();
      complex2.NaN.nthRoot(202);
      complex2.toString();
      Complex complex5 = complex0.sinh();
      complex5.ONE.toString();
      Complex complex6 = complex5.pow(775.0);
      complex2.cosh();
      Complex complex7 = Complex.ZERO;
      complex5.cos();
      complex6.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1052.46904008));
      Complex complex2 = complex1.multiply((-1052.46904008));
      Complex complex3 = Complex.INF;
      complex2.toString();
      Complex complex4 = complex0.subtract((-3149.752));
      complex4.reciprocal();
      Complex complex5 = complex3.cos();
      complex2.acos();
      complex2.subtract(complex1);
      complex3.sqrt();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex((-1052.46904008), (-1052.46904008));
      complex3.divide(Double.POSITIVE_INFINITY);
      complex5.tan();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1052.46904008));
      Complex complex2 = complex1.multiply((-1052.46904008));
      Complex complex3 = Complex.INF;
      complex2.toString();
      Complex complex4 = complex0.subtract((-3149.752));
      complex4.reciprocal();
      complex3.cos();
      complex2.acos();
      complex2.subtract(complex1);
      complex3.sqrt();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.NaN;
      Complex complex7 = new Complex((-1052.46904008), (-3149.752));
      complex1.divide(Double.POSITIVE_INFINITY);
      try { 
        complex3.nthRoot((-1444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,444
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex.valueOf((-1992.425133), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      complex0.ZERO.createComplex(0.0, (-8.27343074126263E-8));
      Complex complex2 = new Complex((-330.239255262967), Double.NaN);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.asin();
      complex1.cosh();
      Complex complex2 = new Complex(1.1802241249113175E168, 16.0);
      complex2.ZERO.divide(Double.NaN);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1818.5075251830606));
      Complex complex2 = complex0.divide(complex1);
      complex2.cos();
      Complex complex3 = complex1.log();
      complex0.abs();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = Complex.ONE;
      complex7.INF.subtract((-1818.5075251830606));
      complex6.multiply(complex1);
      Complex complex8 = complex3.pow((-20.0));
      complex8.cosh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.valueOf((-20.0), 0.04860413819551468);
      complex10.tanh();
      Complex complex11 = complex10.createComplex(1497.826404926, 1506.2);
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-793.1133466));
      Complex complex2 = Complex.INF;
      complex0.divide(complex2);
      complex0.cos();
      complex1.log();
      complex2.abs();
      complex0.pow(complex1);
      Complex complex3 = Complex.INF;
      complex0.multiply(complex1);
      complex0.pow(Double.POSITIVE_INFINITY);
      complex3.cosh();
      Complex complex4 = Complex.ONE;
      complex1.tanh();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-223.3629594975), (-20.0));
      Complex complex1 = Complex.valueOf((-1.5707963267948966), (-2273.247974222));
      complex0.tan();
      Complex complex2 = complex1.atan();
      complex2.createComplex((-20.0), (-2273.247974222));
      Complex complex3 = Complex.ONE;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.add(20.0);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex3.divide(complex6);
      complex5.tan();
      complex7.subtract(complex1);
      Complex complex9 = Complex.I;
      complex0.negate();
      Complex complex10 = complex4.multiply(complex7);
      Complex complex11 = complex9.subtract(0.9946757311227196);
      complex10.conjugate();
      complex9.tanh();
      complex1.getField();
      Complex complex12 = complex7.pow(complex11);
      complex1.subtract(0.9946757311227196);
      complex8.multiply(435);
      complex8.negate();
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.sinh();
      int int0 = 2051008593;
      // Undeclared exception!
      complex2.nthRoot(2051008593);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      complex0.readResolve();
      complex0.cosh();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-7.368602086210704E159));
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.multiply((-7.368602086210704E159));
      complex5.readResolve();
      Complex complex6 = Complex.ZERO;
      complex4.equals(complex6);
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1159.4986);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply(1285);
      Complex complex4 = complex0.cos();
      Complex complex5 = Complex.ONE;
      complex5.acos();
      complex3.log();
      complex1.abs();
      Complex complex6 = new Complex((-869.93));
      Complex complex7 = complex4.pow(complex6);
      complex7.multiply(complex1);
      complex4.pow((-20.0));
      complex6.cosh();
      Complex complex8 = Complex.ONE;
      complex1.tanh();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.8539018802262107, 0.8414709848078965);
      Complex complex1 = Complex.NaN;
      complex0.pow(complex1);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.createComplex((-8.27343074126263E-8), 1.0340436948077763E-129);
      complex0.createComplex(Double.POSITIVE_INFINITY, 1.0340436948077763E-129);
      Complex complex4 = complex3.multiply((-964));
      complex0.getArgument();
      complex4.multiply(1.0340436948077763E-129);
      complex0.readResolve();
      complex4.equals((Object) null);
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.sinh();
      Complex complex4 = new Complex((-8.27343074126263E-8));
      complex4.abs();
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
      complex4.divide(0.0);
      complex2.conjugate();
      complex0.createComplex(8.27343074126263E-8, 0.0);
      complex3.sqrt();
      Complex complex5 = Complex.I;
      complex2.acos();
      Complex complex6 = Complex.valueOf((-8.27343074126263E-8));
      complex1.tanh();
      complex5.pow(complex6);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-7.368602086210704E159));
      Complex complex1 = Complex.valueOf(1.7413966655731201);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply(934);
      Complex complex4 = Complex.INF;
      complex4.cos();
      Complex complex5 = complex3.acos();
      Complex complex6 = Complex.ZERO;
      complex6.log();
      complex5.abs();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.pow(complex7);
      complex2.multiply(complex7);
      complex1.abs();
      Complex complex9 = complex5.pow((-1005.0));
      complex2.cosh();
      Complex complex10 = Complex.ONE;
      complex8.tanh();
      complex9.nthRoot(934);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-7.368602086210704E159));
      Complex complex1 = complex0.sqrt1z();
      complex1.divide(580.02995);
      complex1.isInfinite();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.createComplex(0.0, (-8.27343074126263E-8));
      complex3.multiply((-8.27343074126263E-8));
      complex2.readResolve();
      complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 3217.9331924;
      Complex complex0 = new Complex(3858.61027647, 3217.9331924);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-235.1461691324904), (-235.1461691324904));
      Complex complex1 = complex0.I.sinh();
      complex1.I.subtract((-235.1461691324904));
      Complex complex2 = new Complex((-235.1461691324904));
      complex1.multiply(950.0614750997127);
      complex0.exp();
      Complex.valueOf(2657.661308384);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ZERO;
      complex2.getField();
      Complex complex3 = complex2.subtract(complex1);
      complex1.readResolve();
      Complex complex4 = Complex.ONE;
      complex4.divide(complex3);
      complex3.abs();
      Complex complex5 = new Complex(1.0, (-1941.8133191217));
      complex5.sqrt1z();
      complex3.divide(3281.371857);
      Complex complex6 = Complex.ONE;
      complex6.isInfinite();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex2.ZERO.asin();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = Complex.valueOf((-1402.54953999));
      complex10.I.tanh();
      Complex complex11 = complex2.ZERO.acos();
      complex11.multiply((-486.32309529));
      complex8.NaN.sqrt1z();
      Complex complex12 = complex3.asin();
      complex12.ZERO.subtract(9.697418238031897E-8);
      Complex complex13 = Complex.valueOf((-0.7615941559557649), (-0.7615941559557649));
      Complex complex14 = complex13.I.add(7194.244536595086);
      Complex complex15 = complex4.tanh();
      complex15.tan();
      complex4.abs();
      Object object0 = complex7.readResolve();
      complex14.equals(object0);
      complex1.conjugate();
      complex6.createComplex(7194.244536595086, 2134.6434);
      complex9.sqrt();
      complex8.tanh();
      complex2.acos();
      complex7.tanh();
      complex8.tanh();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-3.6230268489088716E-8), 0.0);
      Complex complex1 = complex0.divide((-3008.26398));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ZERO.cos();
      complex3.nthRoot(938);
      complex3.reciprocal();
      Complex complex4 = complex1.createComplex(3612.4848503715, (-0.9957473642907105));
      complex4.sqrt1z();
      complex3.reciprocal();
      complex4.cosh();
      Complex.valueOf(8.498192212235393E178);
      complex1.conjugate();
      Complex complex5 = new Complex((-3139.9202), (-0.9957473642907105));
      Complex complex6 = Complex.I;
      complex6.equals((Object) null);
      Complex.valueOf(1.5655577182769775);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(4.820873399634487E-8);
      Complex complex2 = complex0.pow(complex1);
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-235.1461691324904), (-235.1461691324904));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.I.subtract((-235.1461691324904));
      Complex complex4 = complex2.ZERO.multiply(complex1);
      complex4.INF.getField();
      Complex complex5 = complex3.subtract(complex0);
      complex5.NaN.readResolve();
      Complex complex6 = complex0.I.add((-235.1461691324904));
      complex0.tan();
      Complex complex7 = complex6.sin();
      complex0.reciprocal();
      complex7.subtract(2.414213562373095);
      complex3.tan();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-235.1461691324904), (-235.1461691324904));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.I.subtract((-235.1461691324904));
      Complex complex4 = complex2.ZERO.multiply(complex1);
      complex4.INF.getField();
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = (Complex)complex5.NaN.readResolve();
      complex0.I.add((-235.1461691324904));
      complex4.tan();
      complex0.sin();
      complex5.reciprocal();
      complex4.subtract((-6.655106680680314E-8));
      complex6.tan();
      complex0.atan();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4752.386324);
      Complex complex2 = new Complex(4752.386324);
      complex0.divide(complex2);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(2147483503);
      Complex complex5 = complex1.cos();
      complex3.acos();
      Complex complex6 = complex5.log();
      complex3.abs();
      Complex complex7 = complex5.pow(complex6);
      Complex complex8 = new Complex((-2969.8892639));
      complex8.multiply(complex3);
      complex8.abs();
      complex7.pow((-1.0));
      complex4.cosh();
      Complex complex9 = Complex.ONE;
      complex0.tanh();
      complex0.conjugate();
      complex7.reciprocal();
      Complex.valueOf((double) 2147483503, 0.0);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-235.1461691324904), (-235.1461691324904));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.sinh();
      complex2.I.subtract((-235.1461691324904));
      Complex complex3 = new Complex((-235.1461691324904));
      complex3.INF.getField();
      complex0.sin();
      complex3.abs();
      complex0.getField();
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex1.cosh();
      complex0.toString();
      complex5.multiply(complex1);
      Complex complex6 = complex2.log();
      complex4.abs();
      Complex complex7 = complex6.divide((-235.1461691324904));
      Complex complex8 = Complex.NaN;
      complex8.reciprocal();
      Complex complex9 = new Complex(1.045647032279984E-172, Double.POSITIVE_INFINITY);
      complex9.multiply((-387));
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex11 = Complex.I;
      Object object0 = new Object();
      complex11.equals(object0);
      complex7.sinh();
      complex2.asin();
      complex2.reciprocal();
      complex3.divide(1.045647032279984E-172);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.9171523356672743, 3.3855429446520427E-49);
      Complex complex1 = complex0.INF.conjugate();
      complex1.ONE.toString();
      complex1.ONE.divide(complex0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.negate();
      complex3.NaN.sin();
      complex1.I.abs();
      complex2.ONE.getField();
      Complex complex4 = complex2.I.pow(complex0);
      Complex complex5 = complex2.NaN.cosh();
      complex4.toString();
      Complex complex6 = complex0.multiply(complex2);
      complex6.INF.log();
      complex2.abs();
      Complex complex7 = complex0.divide(453.706);
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex1.multiply((-387));
      Complex complex10 = new Complex(0.0, 453.706);
      complex9.equals(complex10);
      complex8.sinh();
      complex0.asin();
      complex5.reciprocal();
      complex5.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(55291.72085768578, (-2299.32291717));
      Complex complex1 = complex0.exp();
      complex1.divide(complex0);
      complex1.getReal();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.multiply(complex4);
      complex2.createComplex(55291.72085768578, 1222.9);
      complex0.getArgument();
      Complex complex6 = Complex.NaN;
      complex5.add(complex6);
      complex0.divide(1222.9);
      Complex complex7 = complex3.tan();
      complex5.multiply(complex0);
      complex3.subtract(complex7);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.multiply(17);
      Complex complex10 = Complex.valueOf(1222.9);
      complex9.pow(1432.89588923139);
      complex4.hashCode();
      complex10.readResolve();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      complex1.ZERO.pow(complex0);
      complex0.sinh();
      Complex complex2 = new Complex((-981.805554), (-981.805554));
      Complex complex3 = complex2.subtract((-981.805554));
      complex1.multiply(complex2);
      complex2.getField();
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-3.6230268489088716E-8), 0.0);
      Complex complex1 = complex0.divide((-3008.26398));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ZERO.cos();
      complex3.I.nthRoot(938);
      complex1.NaN.toString();
      Complex complex4 = complex1.reciprocal();
      complex0.getImaginary();
      Complex complex5 = complex4.multiply(complex2);
      complex4.NaN.createComplex((-3.6230268489088716E-8), 0.0);
      complex2.hashCode();
      complex0.INF.pow(complex4);
      complex0.multiply(425);
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.sqrt1z();
      complex7.NaN.divide(complex5);
      complex7.I.divide((-460.383002393));
      Complex complex8 = complex2.negate();
      complex4.INF.createComplex(0.0, 0.0);
      complex6.ONE.log();
      complex8.getReal();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.sin();
      complex10.reciprocal();
      complex2.subtract((-943.0));
      complex3.tan();
      Complex complex11 = Complex.valueOf((double) 425);
      complex11.atan();
      complex6.multiply((double) 938);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-235.1461691324904), (-235.1461691324904));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.I.subtract((-235.1461691324904));
      Complex complex4 = new Complex((-235.1461691324904));
      complex4.INF.getField();
      Complex complex5 = complex3.subtract(complex0);
      Object object0 = complex5.NaN.readResolve();
      Complex complex6 = complex4.divide((-235.1461691324904));
      Complex complex7 = complex1.tan();
      Complex complex8 = complex6.multiply(complex1);
      Complex complex9 = complex7.subtract(complex4);
      complex9.multiply(1110);
      complex0.ZERO.sinh();
      Complex.valueOf((-0.9989934224305906));
      complex5.pow(235.1461691324904);
      object0.hashCode();
      complex2.readResolve();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(2082.51681, 2082.51681);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(complex0);
      complex0.getReal();
      Complex complex3 = complex0.ONE.divide(complex1);
      complex1.sinh();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.createComplex(2082.51681, 2082.51681);
      complex3.getArgument();
      complex6.add(complex3);
      complex2.add(1484.96);
      complex0.tan();
      Complex complex7 = complex6.sin();
      complex7.reciprocal();
      complex4.subtract((-0.8813735870195429));
      complex0.tan();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1497.826404926);
      Complex complex2 = complex0.divide(complex1);
      complex0.I.multiply(1285);
      Complex complex3 = complex0.cos();
      complex3.I.acos();
      Complex complex4 = complex0.log();
      complex0.abs();
      complex4.INF.pow(complex3);
      Complex complex5 = complex0.multiply(complex4);
      complex5.I.abs();
      Complex complex6 = complex0.pow((-20.0));
      complex6.ONE.cosh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex5.tanh();
      complex8.ONE.conjugate();
      complex2.reciprocal();
      Complex.valueOf(Double.NaN, (-1261.6662363665412));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-475.553238));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sqrt();
      complex1.abs();
      complex0.getField();
      complex1.sqrt();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.negate();
      complex3.negate();
      complex3.getReal();
      complex0.tanh();
      Complex complex4 = complex1.asin();
      complex2.NaN.add((-2325.344035291972));
      complex4.multiply(2.320822576772103E-287);
      Complex complex5 = complex1.divide(175.7369);
      Complex.valueOf(84.79699571, 0.8414709848078965);
      complex3.getReal();
      complex2.getImaginary();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex5.pow(complex6);
      complex1.getArgument();
      complex5.reciprocal();
      complex0.equals(complex7);
      Complex.valueOf(1482.08, 84.79699571);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1596.7);
      Complex complex1 = complex0.sqrt();
      complex1.abs();
      complex1.getField();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf(39.95872870850623);
      complex1.negate();
      complex2.negate();
      Complex complex4 = Complex.I;
      complex4.getReal();
      Complex complex5 = complex1.tanh();
      Complex complex6 = Complex.ONE;
      complex6.asin();
      Complex complex7 = Complex.valueOf(39.95872870850623, 946.31127902);
      complex6.getReal();
      complex7.getImaginary();
      Complex complex8 = complex4.sqrt1z();
      complex5.pow(complex8);
      complex6.getArgument();
      Complex complex9 = Complex.ZERO;
      complex7.tan();
      complex6.cos();
      complex3.toString();
      Complex complex10 = Complex.valueOf(39.95872870850623, 0.0);
      complex10.toString();
      complex4.subtract(39.95872870850623);
      complex10.add((-2328.62294748049));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.subtract(0.7071067811865476);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = Complex.ZERO;
      complex5.getField();
      Complex complex6 = complex2.subtract(complex0);
      complex5.readResolve();
      Complex complex7 = complex4.add(0.7071067811865476);
      complex6.tan();
      complex3.sin();
      complex5.reciprocal();
      complex7.subtract(6.773803682579552E-9);
      Complex complex8 = Complex.NaN;
      complex8.tan();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-235.1461691324904), (-235.1461691324904));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.createComplex((-3931.71), (-398.8902381884495));
      complex2.pow(complex4);
      complex1.acos();
      complex2.getArgument();
      complex0.abs();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.createComplex(0.0, 2.581312717296228E20);
      complex3.tanh();
      complex1.asin();
      Complex complex4 = Complex.valueOf(905.138222764, 1375.571);
      complex0.getReal();
      complex2.getImaginary();
      complex3.sqrt1z();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.pow(complex4);
      complex6.getArgument();
      Complex complex7 = Complex.ZERO;
      complex4.tan();
      Complex complex8 = Complex.INF;
      complex8.cos();
      complex3.toString();
      Complex complex9 = new Complex(0.0, 0.0);
      complex9.toString();
      complex8.subtract((-3851.1028));
      complex2.add((-3851.1028));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(55291.72085768578, (-2299.32291717));
      Complex complex1 = complex0.exp();
      complex1.divide(complex0);
      complex1.getReal();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.tanh();
      complex2.createComplex(55291.72085768578, 1222.9);
      complex6.getArgument();
      Complex complex7 = Complex.NaN;
      complex5.add(complex7);
      complex0.divide(1222.9);
      Complex complex8 = complex6.tan();
      complex5.multiply(complex6);
      complex3.subtract(complex8);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.multiply(17);
      Complex complex11 = Complex.valueOf(1222.9);
      complex10.pow(1432.89588923139);
      complex4.hashCode();
      complex11.readResolve();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-3.6230268489088716E-8), 0.0);
      Complex complex1 = complex0.divide((-3008.26398));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ZERO.cos();
      complex3.I.nthRoot(938);
      complex1.NaN.toString();
      Complex complex4 = complex1.reciprocal();
      complex1.createComplex(603.41198, (-1.0));
      complex3.sqrt1z();
      complex3.reciprocal();
      complex2.cosh();
      Complex complex5 = Complex.valueOf((-3008.26398));
      complex4.conjugate();
      Complex complex6 = new Complex((-1.0), 938);
      complex5.equals(complex3);
      Complex.valueOf((-3.6230268489088716E-8), Double.NaN);
      Complex.valueOf((double) 938);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.27343074126263E-8), 9.608060944124859E-295);
      Complex complex1 = complex0.NaN.divide(1.1149986927391714E-7);
      complex1.I.readResolve();
      Complex complex2 = complex0.ONE.asin();
      Complex.valueOf((-1005.98558194331));
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = Complex.valueOf((-959.260841686), (-1.5707963267948966));
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex7.ZERO.cosh();
      complex0.ONE.toString();
      Complex complex9 = complex6.ZERO.add((-8.27343074126263E-8));
      Complex complex10 = complex0.acos();
      complex5.ONE.add(complex0);
      complex10.NaN.createComplex((-1.5707963267948966), 9.608060944124859E-295);
      complex9.subtract(complex10);
      complex5.conjugate();
      complex3.log();
      complex9.divide(complex3);
      complex8.toString();
      complex2.readResolve();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2551.27985777345));
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex0.sinh();
      Complex complex3 = complex0.reciprocal();
      Complex.valueOf((-113.44309828), (-2551.27985777345));
      Complex complex4 = complex1.atan();
      Complex complex5 = complex0.pow(2412.0);
      complex3.INF.nthRoot(2342);
      Complex complex6 = complex3.tan();
      complex3.ONE.toString();
      Complex complex7 = complex0.pow((-113.44309828));
      Complex complex8 = complex6.ONE.subtract(complex7);
      Complex complex9 = complex8.I.tanh();
      complex6.nthRoot(7);
      complex5.getImaginary();
      Complex complex10 = complex4.add(complex2);
      complex2.pow((-2551.27985777345));
      complex6.log();
      complex9.abs();
      complex0.add(complex2);
      complex1.log();
      complex1.isInfinite();
      complex10.conjugate();
      Complex.valueOf((-0.9645574184578459), (double) 7);
      complex0.add(896.079288480478);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(2082.51681, 2082.51681);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(complex0);
      complex0.getReal();
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.add(2829.0);
      Complex complex7 = Complex.valueOf(2829.0);
      complex6.ZERO.divide(complex7);
      complex1.acos();
      complex3.ZERO.getArgument();
      complex4.createComplex(0.0, 2082.51681);
      Complex complex8 = complex5.I.acos();
      Complex complex9 = complex8.ZERO.atan();
      complex3.nthRoot(37);
      Complex complex10 = complex1.subtract(complex4);
      complex10.ONE.abs();
      complex10.I.subtract(0.0);
      Complex complex11 = Complex.valueOf((-2551.27985777345));
      Complex complex12 = complex11.negate();
      complex10.subtract(complex6);
      Complex complex13 = Complex.ZERO;
      complex13.getField();
      complex11.pow(complex8);
      complex12.tan();
      complex10.toString();
      complex2.subtract(2082.51681);
      Object object0 = complex10.readResolve();
      complex9.equals(object0);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1497.826404926);
      Complex complex2 = complex0.divide(complex1);
      complex0.I.multiply(1285);
      complex0.cos();
      Complex complex3 = new Complex(1285, 1497.826404926);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.createComplex((-8.27343074126263E-8), -0.0);
      Complex complex6 = complex5.pow(complex1);
      complex2.acos();
      complex4.getArgument();
      complex5.abs();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-475.553238));
      Complex complex1 = complex0.I.sqrt();
      complex1.abs();
      complex0.getField();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.valueOf((-475.553238));
      complex3.ZERO.negate();
      Complex complex4 = complex2.negate();
      complex3.getReal();
      Complex complex5 = complex0.ZERO.tanh();
      complex1.INF.asin();
      Complex.valueOf(1.0, (-475.553238));
      complex2.getReal();
      complex4.getImaginary();
      Complex complex6 = complex4.sqrt1z();
      complex6.ONE.pow(complex5);
      complex0.INF.getArgument();
      Complex complex7 = Complex.ZERO;
      complex6.tan();
      complex0.cos();
      complex7.toString();
      complex3.toString();
      complex2.subtract(0.7853981633974483);
      complex0.add((-475.553238));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2551.27985777345));
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.createComplex((-1628.5307357), 4587.990129353396);
      complex3.sqrt1z();
      complex4.reciprocal();
      Complex complex5 = complex4.multiply(complex2);
      complex3.cosh();
      Complex complex6 = Complex.valueOf((-2551.27985777345));
      complex6.conjugate();
      complex5.reciprocal();
      complex5.equals((Object) null);
      Complex.valueOf((-2551.27985777345), (-20.0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex((-1222.9), 3360.023415);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.valueOf(0.0, (-1985.9308245896987));
      complex5.atan();
      complex2.pow(3.919601359894397E-4);
      complex2.nthRoot(7);
      Complex complex6 = complex1.tan();
      complex3.toString();
      Complex complex7 = complex3.pow(2412.0);
      Complex complex8 = complex5.subtract(complex3);
      complex5.tanh();
      complex5.nthRoot(7);
      complex7.getImaginary();
      complex6.add(complex1);
      complex2.pow(1.7647101734915075E47);
      complex7.log();
      Complex complex9 = Complex.NaN;
      Complex.valueOf((-251.0), (-20.0));
      complex9.createComplex(1.0, 1.006859302520752);
      complex1.pow((double) 2342);
      complex0.getImaginary();
      complex4.sqrt();
      complex3.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-235.1461691324904), (-235.1461691324904));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.INF;
      complex0.abs();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.divide((-235.1461691324904));
      complex2.isInfinite();
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = Complex.NaN;
      complex6.sqrt();
      complex5.multiply((-4159));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt();
      complex2.ONE.createComplex(0.0, 2.581312717296228E20);
      Complex complex3 = complex0.sqrt1z();
      complex3.ONE.reciprocal();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex4.I.cosh();
      Complex.valueOf(0.0);
      complex1.conjugate();
      Complex.valueOf(2.581312717296228E20, 714.666576689467);
      complex3.tan();
      complex5.cos();
      Complex complex6 = Complex.INF;
      complex6.toString();
      Complex complex7 = Complex.ZERO;
      complex4.add(complex0);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-974.4142361425443), 2533.257894392);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.I.reciprocal();
      Complex.valueOf(1589.80086672643, 0.3540347218513489);
      complex2.NaN.tanh();
      complex1.createComplex(Double.NaN, Double.NaN);
      complex0.INF.getArgument();
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-20.0));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.divide((-20.0));
      Complex complex4 = complex3.tan();
      complex2.multiply(complex4);
      complex0.subtract(complex2);
      complex3.multiply(165);
      complex0.pow(0.19999998807907104);
      complex4.hashCode();
      complex4.readResolve();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-3.6230268489088716E-8), 0.0);
      Complex complex1 = complex0.divide((-3008.26398));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ZERO.cos();
      complex3.I.nthRoot(938);
      Complex complex4 = Complex.valueOf((double) 938, (-3008.26398));
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.pow((-1.4923330530645769E-9));
      Complex complex7 = Complex.ONE;
      complex7.nthRoot(938);
      Complex complex8 = complex3.tan();
      complex6.toString();
      Complex complex9 = complex5.pow((-20.0));
      Complex complex10 = Complex.INF;
      complex9.subtract(complex10);
      Complex complex11 = complex5.tanh();
      complex6.nthRoot(938);
      complex2.getImaginary();
      complex4.add(complex3);
      Complex complex12 = Complex.I;
      complex12.pow((-1.4923330530645769E-9));
      complex11.log();
      Complex complex13 = Complex.valueOf((-1.4923330530645769E-9));
      Complex.valueOf((double) 938);
      complex13.createComplex(7, (-3895.64218));
      complex7.pow((-113.44309828));
      complex5.getImaginary();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2551.27985777345));
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.reciprocal();
      Complex.valueOf((-113.44309828), (-2551.27985777345));
      Complex complex5 = complex1.atan();
      Complex complex6 = complex0.pow(2412.0);
      complex4.INF.nthRoot(2342);
      Complex complex7 = complex4.tan();
      complex4.ONE.toString();
      Complex complex8 = complex0.pow((-113.44309828));
      Complex complex9 = complex7.ONE.subtract(complex8);
      complex9.I.tanh();
      complex7.nthRoot(7);
      complex6.getImaginary();
      complex5.add(complex2);
      complex2.pow((-2551.27985777345));
      complex7.log();
      complex7.createComplex((-3895.64218), (-113.44309828));
      complex5.pow(115.05);
      complex3.getImaginary();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(1596.7);
      Complex complex1 = complex0.I.sqrt();
      complex1.abs();
      complex0.getField();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.valueOf(1596.7);
      complex3.ZERO.negate();
      Complex complex4 = complex2.negate();
      complex3.getReal();
      Complex complex5 = complex0.ZERO.tanh();
      complex1.INF.asin();
      Complex.valueOf(1.0, 1596.7);
      complex2.getReal();
      complex4.getImaginary();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.ONE.pow(complex5);
      complex0.INF.getArgument();
      Complex complex8 = Complex.valueOf(1.0, 993.4161699);
      complex6.tan();
      Complex complex9 = complex0.cos();
      complex8.toString();
      Complex complex10 = Complex.ZERO;
      complex9.add(complex10);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.reciprocal();
      complex3.ZERO.reciprocal();
      Complex complex4 = complex3.NaN.subtract(0.0);
      Complex complex5 = complex2.I.atan();
      complex2.NaN.abs();
      Complex complex6 = new Complex(Double.NaN, 0.0);
      Complex complex7 = complex4.acos();
      Complex complex8 = complex2.NaN.multiply(complex6);
      Complex complex9 = complex1.cosh();
      complex2.I.cosh();
      complex2.abs();
      complex9.pow(complex1);
      complex9.sinh();
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex10.ONE.negate();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex9.negate();
      complex6.pow(complex4);
      complex6.equals(complex1);
      complex5.isNaN();
      complex5.log();
      complex7.equals(complex12);
      complex9.exp();
      complex11.divide(0.0);
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.ZERO;
      complex1.NaN.hashCode();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex.valueOf(1733.441, 1733.441);
      complex0.readResolve();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.INF.tanh();
      complex5.toString();
      complex3.toString();
      complex0.sqrt();
      complex5.divide(complex3);
      Complex complex6 = complex5.sqrt();
      complex6.ONE.getArgument();
      complex6.isNaN();
      complex4.equals("(1.272019649514069, -0.7861513777574233)");
      Complex complex7 = complex0.subtract(complex4);
      complex7.readResolve();
      complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.subtract(0.2231435477733612);
      complex0.isNaN();
      Complex complex2 = complex0.log();
      complex2.INF.abs();
      Complex complex3 = complex2.I.divide(2887.164555651103);
      Complex complex4 = complex3.ZERO.pow(Double.NaN);
      Complex complex5 = new Complex(3028.339126969332);
      complex5.ONE.multiply(0.0);
      Complex complex6 = complex0.INF.add(complex3);
      complex6.I.subtract(Double.NaN);
      Complex complex7 = complex0.add(complex5);
      Complex complex8 = complex7.INF.sqrt1z();
      complex7.I.hashCode();
      Complex complex9 = complex0.divide(complex5);
      Complex complex10 = complex2.INF.pow(complex4);
      complex8.I.multiply((-2249));
      complex3.I.sqrt1z();
      Complex.valueOf((-1920.7688299756574), 259.5624503);
      complex8.tan();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      complex7.subtract(complex11);
      complex9.getReal();
      complex9.pow(0.0);
      complex3.tan();
      complex0.conjugate();
      complex1.abs();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-3.6230268489088716E-8), 0.0);
      Complex complex1 = complex0.divide((-3008.26398));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ZERO.cos();
      complex3.I.nthRoot(938);
      complex1.NaN.toString();
      Complex complex4 = complex1.reciprocal();
      complex4.I.tan();
      complex0.getImaginary();
      Complex complex5 = complex4.multiply(complex2);
      complex4.NaN.createComplex((-3.6230268489088716E-8), 0.0);
      complex2.hashCode();
      complex0.INF.pow(complex4);
      complex0.multiply(425);
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.sqrt1z();
      complex7.NaN.divide(complex5);
      complex7.I.divide((-460.383002393));
      Complex complex8 = complex2.negate();
      complex4.INF.createComplex(0.0, 0.0);
      complex6.ONE.log();
      complex8.getReal();
      Complex complex9 = complex1.add(complex4);
      Complex complex10 = complex9.I.exp();
      complex10.ZERO.conjugate();
      Complex complex11 = Complex.NaN;
      complex11.NaN.abs();
      complex1.add(complex11);
      complex10.NaN.log();
      complex6.isInfinite();
      complex0.conjugate();
      Complex.valueOf((-3.6230268489088716E-8), 0.0);
      complex9.add(0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-235.1461691324904), (-235.1461691324904));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.I.subtract((-235.1461691324904));
      Complex complex4 = complex2.ZERO.multiply(complex1);
      complex4.INF.getField();
      Complex complex5 = complex3.subtract(complex0);
      complex5.NaN.readResolve();
      Complex complex6 = complex0.I.add((-235.1461691324904));
      complex6.ONE.tan();
      Complex complex7 = complex1.sin();
      complex7.INF.reciprocal();
      complex0.ZERO.subtract((-235.1461691324904));
      complex1.ONE.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      complex1.ZERO.getField();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.ONE.toString();
      complex0.NaN.toString();
      complex0.equals(complex1);
      complex0.NaN.multiply(complex2);
      complex1.subtract(0.0);
      complex0.NaN.abs();
      complex0.nthRoot(7);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.NaN.cos();
      complex4.ONE.hashCode();
      Complex complex5 = complex3.I.pow((double) 7);
      complex5.NaN.sin();
      Complex complex6 = complex0.sqrt1z();
      complex6.add(Double.NaN);
      Complex complex7 = complex1.ONE.subtract((-8.987));
      complex7.NaN.asin();
      complex6.NaN.log();
      complex3.ONE.add((double) 7);
      complex1.readResolve();
      complex4.sin();
      Complex complex8 = complex4.multiply(482);
      complex4.getReal();
      complex0.negate();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ZERO.tanh();
      complex2.I.multiply(822);
      Complex complex3 = complex0.NaN.createComplex(0.0, 1.6525336989036362E59);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.I.pow(complex4);
      Complex complex6 = Complex.ONE;
      complex6.ZERO.abs();
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex6.ONE.acos();
      Complex complex9 = complex4.asin();
      Complex complex10 = complex6.INF.add(complex9);
      complex10.ZERO.sinh();
      complex9.NaN.acos();
      Complex complex11 = complex6.sqrt();
      complex11.divide(complex5);
      complex11.ZERO.readResolve();
      complex9.atan();
      complex9.sin();
      Complex complex12 = complex8.sqrt1z();
      complex12.I.abs();
      complex12.getField();
      complex7.sin();
      complex4.negate();
      complex6.cosh();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double double0 = (-2823.22725556);
      Complex complex0 = Complex.valueOf(2.0, (-2823.22725556));
      Complex complex1 = complex0.conjugate();
      complex1.ONE.negate();
      complex1.INF.getArgument();
      complex1.INF.cosh();
      double double1 = 0.0;
      Complex complex2 = complex1.ONE.createComplex((-2823.22725556), 0.0);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.NaN.negate();
      complex4.getReal();
      complex3.INF.divide(complex5);
      int int0 = 17;
      complex5.multiply(17);
      Complex complex6 = Complex.valueOf((-1.0));
      complex4.ONE.log();
      try { 
        complex6.I.nthRoot((-188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -188
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex3.I.sqrt1z();
      Complex complex6 = complex2.exp();
      complex5.ZERO.readResolve();
      Complex complex7 = complex2.multiply(1262.7810984732132);
      Complex complex8 = Complex.valueOf(1262.7810984732132, 1262.7810984732132);
      complex8.createComplex(1262.7810984732132, (-551.28));
      complex2.NaN.multiply(1262.7810984732132);
      Complex complex9 = complex7.ZERO.subtract(complex3);
      complex9.divide((-551.28));
      complex1.multiply(complex7);
      Complex complex10 = complex0.subtract(1262.7810984732132);
      complex10.acos();
      complex5.atan();
      complex4.tan();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(3858.61027647);
      Complex complex1 = Complex.ZERO;
      complex0.ZERO.divide(complex1);
      complex0.NaN.abs();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.divide(3858.61027647);
      complex0.isInfinite();
      complex2.pow(complex3);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-1.0389614239253089E-8));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.add(complex0);
      complex0.I.sin();
      Complex complex3 = complex2.I.pow(714.0);
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex2.ZERO.exp();
      complex5.createComplex(714.0, (-836.2782083410682));
      Complex complex6 = complex4.exp();
      complex6.tanh();
      complex6.ONE.divide(complex5);
      Complex complex7 = complex0.add(complex1);
      complex0.ONE.asin();
      complex7.I.pow(complex1);
      complex4.createComplex((-1135.854320751), (-1.0389614239253089E-8));
      complex4.nthRoot(2792);
      complex0.cosh();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1602.499434398617), 0.0);
      complex0.INF.abs();
      complex0.I.cosh();
      Complex complex1 = complex0.I.sqrt();
      complex0.isNaN();
      complex0.ZERO.reciprocal();
      Complex complex2 = complex0.I.multiply((-1602.499434398617));
      Complex complex3 = complex0.INF.cos();
      complex3.NaN.abs();
      complex0.subtract(0.0);
      complex1.negate();
      Complex complex4 = complex0.subtract(complex2);
      int int0 = (-346);
      try { 
        complex4.nthRoot((-346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -346
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1497.826404926);
      Complex complex2 = complex0.divide(complex1);
      complex0.I.multiply(1285);
      Complex complex3 = complex0.cos();
      complex3.I.acos();
      Complex complex4 = complex0.log();
      complex0.abs();
      complex4.getField();
      complex4.INF.pow(complex3);
      Complex complex5 = complex0.multiply(complex4);
      complex5.I.abs();
      Complex complex6 = complex0.pow((-20.0));
      complex6.ONE.cosh();
      complex6.NaN.pow((-959.1198406719441));
      Complex complex7 = complex5.tanh();
      complex7.ONE.conjugate();
      complex5.pow(0.0);
      Complex complex8 = complex7.cosh();
      complex8.toString();
      complex8.pow((-638.0));
      complex2.getArgument();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex9.conjugate();
      complex3.exp();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.pow(0.0);
      complex0.divide(complex1);
      Complex complex2 = complex0.add(3456.7769);
      complex2.NaN.tan();
      complex1.add(0.0);
      Complex complex3 = complex1.multiply(0);
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(2082.51681, 2082.51681);
      Complex complex1 = complex0.exp();
      complex1.divide(complex0);
      complex0.getReal();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.sinh();
      complex1.equals("nBdn'~W");
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.add(2829.0);
      Complex complex6 = Complex.valueOf(2829.0);
      complex5.ZERO.divide(complex6);
      Complex complex7 = complex1.acos();
      complex2.ZERO.getArgument();
      complex3.createComplex(0.0, 2082.51681);
      Complex complex8 = complex4.I.acos();
      complex8.ZERO.atan();
      complex2.nthRoot(37);
      Complex complex9 = complex1.subtract(complex3);
      complex9.ONE.abs();
      complex9.I.subtract(0.0);
      complex9.negate();
      complex5.subtract(complex6);
      complex4.getField();
      complex4.pow(complex2);
      complex7.tan();
      complex6.toString();
      complex1.subtract(2179.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2261.15337545), 0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.INF.exp();
      int int0 = 100;
      Complex complex3 = complex0.multiply(100);
      try { 
        complex3.ZERO.nthRoot((-428));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -428
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-144.9702885557016));
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex2 = complex1.I.sqrt1z();
      Complex.valueOf(0.0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.createComplex((-625.5521669185982), 0.0);
      Complex complex5 = complex4.INF.sqrt();
      complex5.I.tan();
      Complex complex6 = complex3.add(complex2);
      complex2.ONE.readResolve();
      Complex complex7 = Complex.valueOf(0.0, 803.799219899697);
      complex6.NaN.multiply(803.799219899697);
      complex6.ZERO.cos();
      complex3.reciprocal();
      complex3.ONE.add(0.0);
      complex0.isInfinite();
      complex1.readResolve();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-974.4142361425443), 2533.257894392);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex1.createComplex(Double.NaN, Double.NaN);
      complex0.INF.getArgument();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex0.add(complex4);
      complex0.I.divide(2.003926370146842E-8);
      Complex complex7 = complex6.ONE.tan();
      complex5.INF.multiply(complex0);
      complex7.ZERO.subtract(complex0);
      complex1.ONE.multiply((-324));
      complex5.pow(0.19999998807907104);
      complex1.hashCode();
      complex3.readResolve();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.I.acos();
      complex1.ONE.getField();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf(Double.NaN);
      complex0.toString();
      Complex complex5 = complex0.pow(1801.8206905756085);
      Complex complex6 = complex5.NaN.sin();
      complex3.getArgument();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex2.subtract(1626.211932447);
      complex8.isInfinite();
      Complex complex9 = complex7.INF.divide(1801.8206905756085);
      Complex complex10 = complex6.multiply(complex1);
      complex10.I.subtract(0.0);
      complex4.getArgument();
      complex8.multiply((-657));
      complex7.sin();
      complex9.getReal();
      complex7.divide((double) (-657));
      try { 
        complex2.nthRoot((-775));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -775
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-2299.32291717));
      Complex complex1 = complex0.INF.tanh();
      complex1.ZERO.hashCode();
      complex0.getReal();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.tanh();
      complex3.INF.abs();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = Complex.valueOf((-2299.32291717), (-2299.32291717));
      Complex complex6 = complex5.INF.add(complex2);
      complex2.abs();
      complex6.add((-910.6459954393));
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7195.725222523985));
      complex0.nthRoot(279);
      Complex complex1 = complex0.multiply((-1138.1001854785));
      Complex.valueOf(3540.512);
      complex1.sqrt1z();
      Complex.valueOf((-1113.0167356161746));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.negate();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-1346.31));
      Complex complex2 = complex1.NaN.negate();
      complex2.I.getArgument();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.negate();
      complex4.NaN.cos();
      complex0.log();
      complex4.multiply(4931.13805);
      complex3.multiply(0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.add(2.0958481826069642E-8);
      complex1.NaN.cos();
      complex2.readResolve();
      complex1.pow(0.0);
      complex4.isInfinite();
      Complex complex5 = complex2.add(complex4);
      Complex complex6 = complex5.tan();
      complex0.INF.tanh();
      complex6.I.abs();
      complex1.getArgument();
      complex3.abs();
      try { 
        complex2.nthRoot((-970));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -970
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4999.292929807), 1.5400881501571645E-51);
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.NaN.log();
      complex3.createComplex((-4999.292929807), 188.94);
      complex1.I.acos();
      complex0.multiply((-2649.818866786));
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.tan();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = Complex.valueOf(991.43067);
      complex4.INF.pow(complex3);
      complex0.isNaN();
      Complex complex6 = complex5.I.tan();
      complex6.I.toString();
      complex0.isNaN();
      Complex complex7 = complex0.ONE.sinh();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex5.createComplex(974.98956671985, 991.43067);
      complex4.sin();
      Complex complex10 = complex4.add(974.98956671985);
      Complex complex11 = complex2.tanh();
      complex3.getArgument();
      complex3.readResolve();
      Complex complex12 = complex11.I.atan();
      complex0.getImaginary();
      Complex complex13 = complex5.sinh();
      complex0.createComplex(991.43067, (-1258.5562834));
      complex11.getField();
      complex9.isNaN();
      complex8.readResolve();
      complex3.getReal();
      complex10.reciprocal();
      complex1.getReal();
      Complex complex14 = complex3.reciprocal();
      complex14.I.negate();
      complex13.toString();
      complex9.cos();
      complex8.log();
      complex12.tanh();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-1.0128633727463388E-7));
      Complex complex1 = Complex.valueOf((-1.0128633727463388E-7), (-1.0128633727463388E-7));
      complex0.NaN.multiply(complex1);
      complex0.readResolve();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt();
      complex2.ONE.createComplex(0.0, 2.581312717296228E20);
      Complex complex3 = complex0.sqrt1z();
      complex3.ONE.reciprocal();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      complex4.I.cosh();
      Complex.valueOf(0.0);
      complex1.conjugate();
      Complex complex5 = complex3.reciprocal();
      complex5.equals(complex1);
      Complex.valueOf((-2663.093), (-175.7369));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.ONE.abs();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.NaN.readResolve();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.I.pow(complex0);
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = Complex.valueOf(2070.8);
      complex3.readResolve();
      Complex complex7 = complex2.reciprocal();
      complex7.ONE.log();
      complex0.INF.subtract((-593.443326558));
      complex1.INF.negate();
      Complex complex8 = Complex.valueOf(1584.5865, 6.283185307179586);
      complex8.INF.readResolve();
      complex6.I.getField();
      complex0.I.multiply(0);
      complex1.getField();
      complex6.add(2844.802699471963);
      complex3.readResolve();
      complex3.conjugate();
      Complex complex9 = complex3.asin();
      complex5.equals(complex3);
      complex0.conjugate();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(4141.846577, 4141.846577);
      Complex complex2 = new Complex(234.9862);
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = complex0.INF.subtract(complex1);
      complex4.toString();
      complex1.ZERO.pow(complex0);
      Complex complex5 = complex0.createComplex(766.434597267653, 766.434597267653);
      Complex complex6 = complex5.I.sqrt();
      complex6.NaN.getArgument();
      complex0.readResolve();
      complex3.divide(complex6);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1955.9378090711));
      Complex complex1 = Complex.ONE;
      complex1.ZERO.nthRoot(37);
      Complex complex2 = complex0.NaN.sinh();
      complex2.ONE.multiply(complex1);
      Complex.valueOf((double) 37);
      Complex complex3 = complex0.INF.pow(complex1);
      complex3.NaN.multiply((-739.8916491815));
      Complex complex4 = complex0.ZERO.reciprocal();
      complex0.nthRoot(17);
      complex4.divide(1626.03114);
      complex4.getReal();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.sqrt();
      Complex.valueOf((double) 37);
      Complex complex7 = complex6.multiply(3061.4950456844263);
      complex5.asin();
      complex5.getReal();
      Complex complex8 = Complex.valueOf(0.0, 1626.03114);
      complex8.ONE.sinh();
      complex1.NaN.pow(2228.4548);
      complex0.divide(complex8);
      complex7.cos();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-756.05410192621), (-756.05410192621));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.ZERO.subtract(complex0);
      Complex complex7 = complex5.ZERO.multiply((-756.05410192621));
      Complex complex8 = complex7.ZERO.add(complex5);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      Complex complex9 = complex6.INF.subtract(complex5);
      Complex complex10 = complex4.INF.log();
      complex0.createComplex(20.0, (-975.373653));
      Complex complex11 = complex4.divide(0.0);
      Complex complex12 = complex11.INF.atan();
      Complex complex13 = complex9.exp();
      Complex complex14 = complex9.sqrt1z();
      Complex complex15 = complex13.negate();
      complex0.hashCode();
      Complex complex16 = Complex.valueOf(837.0);
      complex3.NaN.add(complex12);
      Complex complex17 = complex1.divide(complex3);
      complex17.divide(0.0);
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      
      complex0.ONE.log();
      String string0 = complex6.toString();
      assertEquals("(756.05410192621, 756.05410192621)", string0);
      
      Object object0 = complex4.readResolve();
      complex16.equals(object0);
      complex14.log();
      assertTrue(complex5.equals((Object)complex8));
      assertEquals(Double.NEGATIVE_INFINITY, complex14.getImaginary(), 0.01);
      assertFalse(complex14.equals((Object)complex10));
      
      Complex complex18 = complex3.sqrt();
      assertTrue(complex18.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex17));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex15));
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }
}
