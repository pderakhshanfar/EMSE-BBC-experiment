/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:02:35 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf((double) 17, Double.POSITIVE_INFINITY);
      complex2.I.pow(complex1);
      complex2.multiply(17);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-4737.889884873584), (-4737.889884873584));
      complex0.multiply(714);
      Complex complex2 = new Complex(20.0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(342.75, 3.815359096108819E217);
      complex1.asin();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.toString();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(3.3739397633046517E-9, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(6.283185307179586);
      complex2.asin();
      try { 
        complex2.nthRoot((-215));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -215
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex1.multiply(1790.4);
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.INF.subtract(0.0);
      complex4.NaN.divide(0.0);
      complex3.add(0.9360536560548998);
      complex2.ZERO.sinh();
      complex1.pow(0.9360536560548998);
      Complex complex7 = complex3.atan();
      complex2.pow(complex0);
      Complex complex8 = complex6.multiply(complex0);
      Complex complex9 = complex1.tanh();
      complex9.divide(0.0);
      complex7.multiply(0.9360536560548998);
      Complex complex10 = complex1.multiply(1790.4);
      complex10.I.negate();
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex6.I.cos();
      complex12.NaN.getArgument();
      complex3.sinh();
      Complex complex13 = complex4.cosh();
      complex11.NaN.atan();
      complex13.divide(1790.4);
      Complex complex14 = complex13.sinh();
      complex8.multiply(complex2);
      complex14.pow(complex0);
      complex11.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.0153690688015855E-238, Double.NaN);
      complex1.ONE.acos();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3016.8, Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.380177790989479E207, 2983.7196);
      Complex complex1 = Complex.I;
      complex1.I.reciprocal();
      Complex complex2 = complex0.subtract(complex1);
      complex2.acos();
      try { 
        complex2.I.nthRoot((-169));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -169
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.NaN;
      complex1.asin();
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf((-2.0332050860436034E-263), 3927.0);
      complex5.exp();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-1.0));
      complex1.hashCode();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      complex0.sqrt();
      Complex complex4 = Complex.valueOf(0.41421356237309515, (-20.0));
      complex4.tan();
      complex1.pow(complex3);
      Complex complex5 = complex3.divide((-1.0));
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(1360.9779, (-1165.616));
      complex0.ZERO.sin();
      Complex complex1 = Complex.valueOf((-1117.3231027));
      Complex complex2 = complex0.subtract(1360.9779);
      Complex complex3 = Complex.valueOf(1.7861513777574234, (-1165.616));
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex0.sinh();
      complex6.toString();
      Complex complex7 = complex2.negate();
      complex7.sqrt1z();
      complex0.sqrt1z();
      complex0.divide(complex2);
      complex4.ONE.acos();
      Complex complex8 = complex4.sin();
      complex8.getField();
      complex5.toString();
      complex3.readResolve();
      complex5.cos();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(16.88613231045814);
      complex0.divide(Double.NaN);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2321.5));
      Complex complex1 = complex0.subtract(0.0);
      complex1.ONE.cos();
      Complex complex2 = complex1.divide(40.47841760435743);
      complex2.tan();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0));
      Complex complex2 = Complex.NaN;
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(5883.57, 0.6865234817656829);
      Complex complex2 = complex1.pow(6.283185307179586);
      complex1.pow((-2.0332050860436034E-263));
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.INF;
      complex2.asin();
      Complex.valueOf((-2.0332050860436034E-263), 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(858.66454780708, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = Complex.I;
      complex2.equals(complex1);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.NaN, (-2.0332050860436034E-263));
      complex0.pow((-4255.91));
      Complex complex2 = Complex.valueOf(9.495670187931182E-7, (-2.0332050860436034E-263));
      Complex complex3 = complex2.pow((-3294.27814610883));
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.asin();
      complex3.equals(complex1);
      complex6.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = Complex.INF;
      complex0.INF.divide(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.atan();
      Complex complex5 = new Complex(0.5);
      complex5.sqrt();
      complex4.tan();
      Complex complex6 = complex5.pow(complex2);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-353.2219), (-353.2219));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf((-353.2219));
      complex0.equals(complex1);
      Complex complex2 = complex0.tanh();
      complex2.toString();
      complex2.tan();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2321.5407211509532));
      complex0.INF.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ONE;
      complex1.INF.atan();
      Complex complex3 = Complex.I;
      complex1.I.multiply(0.0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.tan();
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 615.973);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(746.327309, 0.0014155436055602877);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2323.5401704314));
      Complex complex1 = Complex.I;
      complex1.cosh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.cosh();
      Complex.valueOf((-97.166581857), (-97.166581857));
      complex1.getField();
      Complex complex4 = new Complex((-97.166581857));
      complex2.multiply((-97.166581857));
      complex4.sqrt();
      complex3.tan();
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      Complex complex1 = complex0.subtract((-1173.0200559889236));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.add(Double.NaN);
      complex3.conjugate();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-338.08));
      complex1.tanh();
      Complex complex2 = Complex.valueOf(1959.985412198, (-843.009132));
      Complex complex3 = Complex.valueOf((-843.009132), Double.POSITIVE_INFINITY);
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ONE;
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = Complex.NaN;
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      complex3.tanh();
      complex2.toString();
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-353.2219));
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = Complex.NaN;
      complex1.equals(complex2);
      Complex complex3 = Complex.ONE;
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(3026.077);
      Complex complex1 = Complex.valueOf(3026.077, 3026.077);
      complex1.ZERO.cosh();
      complex1.negate();
      complex1.NaN.negate();
      Complex complex2 = complex0.NaN.subtract(3026.077);
      Complex complex3 = complex0.asin();
      complex2.getField();
      Complex complex4 = complex3.sqrt1z();
      complex3.toString();
      complex2.log();
      complex0.cos();
      Complex complex5 = complex3.sin();
      complex5.nthRoot(32);
      complex4.nthRoot(3840);
      complex3.atan();
      Complex complex6 = new Complex((-5.159602957634814E-9), 8.725534992123734);
      Complex complex7 = complex6.ZERO.log();
      complex7.hashCode();
      Complex complex8 = complex0.pow(complex6);
      // Undeclared exception!
      complex8.ZERO.nthRoot(2857);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1829.0272), (-1829.0272));
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.cosh();
      complex3.divide(complex0);
      Complex complex4 = complex3.cosh();
      Complex.valueOf((-2323.5401704314), (-1.0));
      Complex complex5 = Complex.ZERO;
      complex5.getField();
      complex3.pow((-1.0003247717627868));
      complex4.pow((-1829.0272));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.atan();
      Complex complex8 = Complex.INF;
      complex7.asin();
      Complex complex9 = Complex.ZERO;
      complex0.nthRoot(3872);
      Complex complex10 = Complex.I;
      complex10.divide(complex5);
      Complex complex11 = Complex.NaN;
      complex11.asin();
      complex2.pow(1676.9);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.tanh();
      Complex complex3 = Complex.valueOf(1808.298, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(0.0, 1808.298);
      complex2.equals("wDmzO|3C0Wx^E");
      Complex complex5 = Complex.ONE;
      complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-353.2219));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.ONE;
      complex1.atan();
      complex0.divide(complex1);
      complex1.negate();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.divide(1250.5514171067);
      complex1.tanh();
      Complex.valueOf((-353.2219), 621.5777548486259);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 984.093878168);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = Complex.ZERO;
      complex6.add(complex2);
      Complex complex7 = complex4.negate();
      complex7.getField();
      complex5.tan();
      Complex complex8 = Complex.I;
      complex0.multiply(complex1);
      complex4.cos();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2.6033824355191673E-8));
      Complex complex1 = complex0.pow(complex0);
      complex1.abs();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex0.INF.cos();
      complex3.INF.log();
      complex0.nthRoot(17);
      complex1.NaN.exp();
      complex3.toString();
      complex0.add(complex0);
      complex0.add(0.999999959106165);
      complex1.multiply(3868);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2.6033824355191673E-8));
      complex0.INF.abs();
      Complex complex1 = new Complex(0.0, (-1790.4));
      Complex complex2 = complex0.pow(complex1);
      complex2.abs();
      complex0.ZERO.reciprocal();
      Complex complex3 = complex0.INF.cos();
      complex3.INF.log();
      complex0.nthRoot(17);
      Complex complex4 = complex2.multiply(3235);
      complex1.abs();
      complex4.ONE.abs();
      Complex complex5 = complex0.reciprocal();
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex5.nthRoot(952);
      Complex.valueOf(957.6025508305);
      complex4.isInfinite();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-1812.62));
      complex0.abs();
      Complex complex1 = new Complex(1098.303183702, 1098.303183702);
      Complex complex2 = complex1.pow(complex0);
      complex0.abs();
      Complex complex3 = complex1.reciprocal();
      complex2.cos();
      Complex complex4 = complex1.log();
      complex1.nthRoot(17);
      complex0.exp();
      complex3.multiply(3235);
      complex1.abs();
      complex2.abs();
      complex2.multiply(0);
      complex0.exp();
      Complex complex5 = Complex.ONE;
      complex4.getReal();
      complex5.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(845.176276428, 845.176276428);
      complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt1z();
      complex0.sqrt1z();
      Complex complex3 = complex0.tan();
      Complex.valueOf(1320.0);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.asin();
      complex3.sqrt1z();
      complex5.asin();
      Complex complex6 = complex3.subtract(complex1);
      complex2.atan();
      complex6.cos();
      complex1.cos();
      complex0.negate();
      complex0.nthRoot(576);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1245.5147293956227);
      complex0.INF.toString();
      Complex complex1 = Complex.I;
      complex1.INF.readResolve();
      complex1.I.multiply(0.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.tan();
      complex3.ONE.createComplex(983.253622226604, 1245.5147293956227);
      complex3.ONE.multiply(1);
      complex0.exp();
      complex1.getReal();
      complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide((-20.0));
      complex0.tanh();
      Complex complex1 = Complex.valueOf((-353.2219), (-353.2219));
      Complex complex2 = Complex.valueOf(621.5777548486259, Double.NaN);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.ONE;
      complex4.divide(complex2);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.add(complex2);
      complex5.negate();
      complex2.getField();
      Complex complex7 = complex6.tan();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.NaN;
      complex9.multiply(complex1);
      complex7.cos();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(1006);
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex2.conjugate();
      complex0.ZERO.toString();
      Complex.valueOf((-375.93197102721), (-2295.266910852));
      complex5.ONE.nthRoot(1006);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex5.divide((-1.0));
      complex3.negate();
      Complex complex8 = complex4.sqrt();
      complex6.tan();
      complex7.pow((-747.4));
      complex1.multiply(1);
      complex5.exp();
      complex8.getReal();
      Complex complex9 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2323.5401704314));
      complex0.INF.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = (Complex)complex1.INF.readResolve();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.I.multiply(0.0);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex5.divide(0.0);
      complex7.INF.abs();
      complex4.subtract(0.0);
      complex7.conjugate();
      complex7.multiply((-1835));
      complex7.asin();
      complex6.getField();
      complex6.negate();
      complex6.abs();
      complex3.multiply(complex2);
      Complex.valueOf(6.283185307179586, 0.0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-353.2219));
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = new Complex((-353.2219), (-127.87528609383));
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.divide(complex2);
      complex1.add(complex2);
      Complex complex5 = Complex.INF;
      complex5.negate();
      complex2.getField();
      Complex complex6 = complex4.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.INF;
      Complex complex9 = complex0.multiply(complex6);
      Complex complex10 = Complex.ONE;
      complex9.cos();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2323.5401704314));
      complex0.INF.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = (Complex)complex1.INF.readResolve();
      Complex complex3 = complex0.divide(complex1);
      complex0.sqrt();
      Complex complex4 = new Complex(0.0, 0.0);
      complex3.getField();
      complex4.pow((-2633.717793491056));
      Complex complex5 = complex0.pow(3039.9877750459364);
      complex5.cos();
      complex3.atan();
      Complex complex6 = complex2.asin();
      try { 
        complex6.nthRoot((-155));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -155
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2323.5401704314));
      complex0.INF.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = (Complex)complex1.INF.readResolve();
      Complex complex3 = complex0.divide(complex1);
      complex1.I.multiply(0.0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = new Complex(0.0, 0.0);
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex4.add(complex5);
      complex6.negate();
      complex7.getField();
      complex3.tan();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.INF;
      Complex complex10 = complex0.multiply(complex9);
      Complex complex11 = Complex.ONE;
      complex11.cos();
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.ONE;
      complex3.readResolve();
      complex3.divide((-1058.5860084378692));
      complex1.tanh();
      Complex complex4 = Complex.valueOf((-1058.5860084378692), 1365.00656);
      Complex complex5 = Complex.valueOf(2102.3, 0.0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.divide(complex4);
      Complex complex8 = complex0.add(complex5);
      complex2.negate();
      complex7.getField();
      complex6.tan();
      Complex complex9 = Complex.I;
      complex2.multiply(complex4);
      complex8.cos();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2.6033824355191673E-8));
      Complex complex1 = new Complex((-2.6033824355191673E-8), 0.0);
      complex1.toString();
      Complex complex2 = Complex.I;
      complex2.readResolve();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.multiply((-7871.4955772));
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex0.tan();
      complex5.pow((-3523.42846));
      complex4.multiply(0);
      complex6.exp();
      Complex complex7 = Complex.valueOf(1.0);
      complex7.getReal();
      complex0.subtract(4.814793918384117E127);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = new Complex((-20.0), 1366.2332268004);
      Complex complex2 = complex0.pow(complex1);
      complex0.abs();
      Complex complex3 = complex0.reciprocal();
      complex1.cos();
      complex0.log();
      complex3.nthRoot(17);
      Complex.valueOf(Double.NaN, Double.NaN);
      complex0.multiply(2429);
      complex2.abs();
      complex2.abs();
      Complex complex4 = complex1.reciprocal();
      complex4.sin();
      complex4.multiply(Double.NaN);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex4.NaN.add(0.0);
      Complex complex6 = complex5.INF.cosh();
      complex6.I.atan();
      Complex complex7 = complex3.INF.subtract(20.0);
      complex7.divide(complex6);
      Complex complex8 = complex1.NaN.asin();
      complex7.abs();
      complex7.I.acos();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.ZERO.add(complex3);
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex0.NaN.asin();
      complex1.tan();
      Complex complex13 = complex0.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.I.log();
      complex11.readResolve();
      complex12.INF.exp();
      complex5.ONE.tanh();
      Complex complex14 = complex5.I.divide(20.0);
      Object object0 = complex5.readResolve();
      ((Complex) object0).ZERO.divide(complex14);
      complex12.cos();
      complex5.abs();
      Complex complex15 = complex5.sqrt();
      complex15.I.multiply(0.0);
      complex11.isNaN();
      complex13.hashCode();
      Complex complex16 = complex10.createComplex(Double.NaN, 20.0);
      complex8.multiply(complex10);
      Complex complex17 = Complex.valueOf((-1361.341642057354), 0.0);
      complex16.add(complex17);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1812.62), 20.0);
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.I.tan();
      Complex.valueOf(0.0);
      complex0.tan();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.sqrt1z();
      complex6.ZERO.asin();
      Complex complex7 = complex4.NaN.subtract(complex5);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex8.INF.cos();
      complex9.I.cos();
      complex3.I.tan();
      complex9.ZERO.conjugate();
      complex6.sqrt();
      Complex complex10 = complex1.subtract(complex4);
      complex10.abs();
      complex3.getImaginary();
      Complex complex11 = complex0.reciprocal();
      complex4.acos();
      complex11.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ONE;
      Complex complex3 = (Complex)complex2.I.readResolve();
      Complex complex4 = complex3.add((-5.0706081370522526E85));
      Complex complex5 = Complex.valueOf((-5.0706081370522526E85), (-5.0706081370522526E85));
      complex5.toString();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = complex0.sqrt1z();
      complex1.add((-600.1));
      Complex complex2 = Complex.valueOf((-1361.3158), (-3285190.2643999998));
      complex2.toString();
      Complex complex3 = complex1.reciprocal();
      complex3.multiply(complex2);
      complex2.log();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.multiply((-843.05));
      complex5.getArgument();
      Complex complex7 = Complex.I;
      complex7.negate();
      complex3.hashCode();
      complex3.sqrt1z();
      Complex complex8 = Complex.NaN;
      complex1.subtract(complex7);
      complex3.nthRoot(500);
      complex6.add(20.0);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2.6033824355191673E-8));
      complex0.INF.abs();
      Complex complex1 = new Complex(0.0, (-1790.4));
      Complex complex2 = complex0.pow(complex1);
      complex2.abs();
      complex0.ZERO.reciprocal();
      Complex complex3 = complex0.INF.cos();
      complex3.INF.log();
      complex0.nthRoot(17);
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex2.multiply(3235);
      complex1.abs();
      complex5.ONE.abs();
      complex0.reciprocal();
      Complex complex6 = complex1.sin();
      complex1.multiply((-1777.3310833));
      complex6.nthRoot(952);
      Complex.valueOf(957.6025508305);
      complex5.isInfinite();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1812.62), 20.0);
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.I.tan();
      Complex.valueOf(0.0);
      complex0.tan();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.sqrt1z();
      complex6.ZERO.asin();
      Complex complex7 = complex4.NaN.subtract(complex5);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex8.INF.cos();
      complex9.I.cos();
      complex3.I.tan();
      complex9.ZERO.conjugate();
      complex6.sqrt();
      Complex complex10 = complex1.subtract(complex4);
      complex10.abs();
      complex3.getImaginary();
      Complex complex11 = complex0.reciprocal();
      complex4.acos();
      complex11.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.reciprocal();
      complex1.toString();
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex4.NaN.subtract(0.0);
      Complex complex6 = complex5.ZERO.multiply(complex1);
      Complex complex7 = complex0.conjugate();
      complex7.ZERO.toString();
      complex7.ZERO.multiply(2588);
      complex0.getReal();
      complex4.negate();
      Complex complex8 = complex0.NaN.exp();
      complex8.I.getField();
      Complex.valueOf((double) 2588, 2360.886208558);
      Complex complex9 = complex1.cosh();
      complex9.INF.getField();
      complex9.hashCode();
      Complex complex10 = complex6.negate();
      complex10.NaN.subtract(1.7534012237555307E-252);
      complex0.ONE.acos();
      complex7.getField();
      complex0.divide(complex2);
      complex6.cos();
      complex3.getImaginary();
      complex9.multiply((-2556.267));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = Complex.valueOf((-567.5437));
      complex4.NaN.cos();
      complex1.equals(complex0);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.sqrt1z();
      complex5.createComplex((-1460.711707), 0.0);
      complex6.getImaginary();
      complex6.NaN.getField();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.ZERO.sinh();
      Complex.valueOf((-567.5437), 1.3497357222487465);
      complex4.tan();
      complex4.pow(0.0);
      complex2.abs();
      Complex.valueOf((-1.0), 1.557407724654902);
      complex8.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2323.5401704314));
      complex0.INF.toString();
      Complex complex1 = Complex.I;
      complex1.INF.readResolve();
      Complex complex2 = complex0.divide(complex1);
      complex1.I.multiply(0.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.tan();
      complex4.ZERO.pow((-45.64198978563));
      complex4.ONE.multiply(1);
      complex2.exp();
      complex1.getReal();
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2.6033824355191673E-8));
      complex0.INF.abs();
      Complex complex1 = new Complex(0.0, (-1790.4));
      Complex complex2 = complex0.pow(complex1);
      complex2.abs();
      complex0.ZERO.reciprocal();
      Complex complex3 = complex0.INF.cos();
      complex3.INF.log();
      complex0.nthRoot(17);
      complex2.NaN.exp();
      Complex complex4 = complex2.multiply(3235);
      complex1.abs();
      complex4.ONE.abs();
      complex0.reciprocal();
      Complex complex5 = complex4.sin();
      complex5.INF.multiply((-273.6845511));
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex4.NaN.add(0.0);
      Complex complex6 = complex5.INF.cosh();
      complex6.I.atan();
      Complex complex7 = complex3.INF.subtract(20.0);
      complex7.divide(complex6);
      Complex complex8 = complex1.NaN.asin();
      complex7.abs();
      complex7.I.acos();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.ZERO.add(complex3);
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex0.NaN.asin();
      complex1.tan();
      Complex complex13 = complex0.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.I.log();
      complex11.readResolve();
      complex12.INF.exp();
      complex5.ONE.tanh();
      complex5.I.divide(20.0);
      complex5.readResolve();
      complex12.cos();
      complex5.abs();
      Complex complex14 = complex5.sqrt();
      complex14.I.multiply(0.0);
      complex11.isNaN();
      complex13.hashCode();
      Complex complex15 = complex10.createComplex(Double.NaN, 20.0);
      complex8.multiply(complex10);
      Complex complex16 = Complex.valueOf((-1361.341642057354), 0.0);
      complex15.add(complex16);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      complex0.ONE.nthRoot(1161);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.pow(0.0);
      complex0.INF.getField();
      Complex complex3 = complex1.tan();
      complex3.readResolve();
      Complex complex4 = complex0.I.pow(complex3);
      complex4.ONE.sinh();
      Complex complex5 = complex2.ONE.pow((-1352.9));
      complex5.ONE.nthRoot(1161);
      complex5.ONE.reciprocal();
      complex2.multiply(0.0);
      complex3.sin();
      Complex.valueOf(0.0);
      complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1025.2828960617);
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.I.abs();
      Complex complex2 = new Complex((-4456.6208328), (-4456.6208328));
      complex2.NaN.log();
      complex2.ZERO.cos();
      Complex complex3 = complex0.divide(complex2);
      complex3.NaN.abs();
      Complex complex4 = complex3.ONE.sinh();
      complex4.ONE.hashCode();
      complex0.getField();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-353.2219));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9867963790893555, (-3.538563171970534E-268));
      Complex complex1 = complex0.I.add((-3.538563171970534E-268));
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.NaN.divide((-3.538563171970534E-268));
      Complex complex5 = complex3.ZERO.sqrt();
      complex5.cos();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex2.createComplex(1.9867963790893555, 1.9867963790893555);
      complex3.INF.tanh();
      complex7.acos();
      Complex complex8 = complex4.NaN.conjugate();
      complex6.getImaginary();
      complex4.getArgument();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.INF.multiply(-0.0);
      Complex complex11 = complex9.NaN.log();
      complex4.hashCode();
      complex11.I.cos();
      Complex complex12 = complex4.cos();
      Complex.valueOf(1710.74902068553);
      Complex complex13 = complex12.INF.pow(complex6);
      complex8.exp();
      complex0.multiply(complex12);
      Complex.valueOf(-0.0);
      complex8.abs();
      complex13.multiply(1);
      complex1.getImaginary();
      complex4.isNaN();
      complex10.createComplex((-8.291832428736212E-8), 1.2038281262953917E-213);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sqrt();
      complex0.equals(complex1);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.multiply((-1695));
      complex4.toString();
      Complex complex5 = Complex.valueOf((-735.9), 6.283185307179586);
      complex0.INF.createComplex((-735.9), (-735.9));
      complex5.cos();
      complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.tanh();
      complex0.sin();
      complex2.INF.nthRoot(677);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.INF.divide((double) 677);
      Complex complex5 = complex0.INF.subtract(complex1);
      Complex complex6 = complex5.NaN.subtract((double) 677);
      Complex complex7 = complex1.INF.add((-1412.33));
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex8.sqrt();
      complex9.ZERO.createComplex(0.0, 0.0);
      complex7.INF.log();
      complex0.ZERO.abs();
      complex0.nthRoot(387);
      Complex complex10 = complex2.NaN.log();
      complex10.ONE.subtract((double) 677);
      Complex complex11 = complex2.divide(complex1);
      Complex complex12 = complex1.asin();
      complex6.NaN.conjugate();
      complex12.ONE.reciprocal();
      complex12.NaN.add(0.0);
      complex11.abs();
      complex1.I.acos();
      complex4.isInfinite();
      complex4.multiply(complex3);
      complex6.getReal();
      complex3.isNaN();
      Complex complex13 = complex5.tanh();
      complex13.atan();
      complex9.add(complex10);
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 1069.06;
      Complex complex0 = new Complex(1069.06, 0.0);
      complex0.toString();
      Complex complex1 = complex0.ZERO.createComplex(1069.06, (-815.305253941));
      complex1.ZERO.asin();
      complex0.getReal();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2640.39), (-1787.9));
      Complex complex1 = new Complex((-2640.39), (-1787.9));
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.INF.sqrt();
      complex3.NaN.divide(1999.0);
      complex0.isInfinite();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.I.exp();
      complex5.NaN.conjugate();
      complex4.getImaginary();
      Complex complex6 = complex4.ONE.divide((-1787.9));
      complex6.conjugate();
      complex4.createComplex(0.0, (-2640.39));
      Complex.valueOf((-2090.538929796682));
      complex2.getArgument();
      complex2.toString();
      complex4.nthRoot(1319);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1406.325);
      Complex complex1 = complex0.log();
      complex1.NaN.divide(1406.325);
      Complex complex2 = complex1.I.subtract(1406.325);
      complex2.getArgument();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.INF;
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 885.111369);
      complex0.INF.getArgument();
      Complex complex1 = Complex.valueOf(0.7853981633974483, 885.111369);
      Complex complex2 = Complex.valueOf(885.111369, 0.0);
      complex0.getReal();
      complex0.nthRoot(267);
      complex0.INF.nthRoot(267);
      complex2.isInfinite();
      complex0.createComplex((-2621.0), 2.6527209281921387);
      Complex complex3 = Complex.valueOf((double) 267, 0.0);
      complex3.divide(complex1);
      complex1.reciprocal();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.atan();
      complex0.I.hashCode();
      Complex complex1 = Complex.valueOf((-590.8738), (-590.8738));
      complex1.NaN.sqrt1z();
      complex1.ZERO.tan();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.INF.getArgument();
      Complex complex2 = complex1.I.sin();
      complex2.NaN.getField();
      complex0.getField();
      try { 
        complex0.nthRoot((-1128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,128
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-102.364));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.NaN.acos();
      complex1.equals(complex0);
      Complex complex5 = complex2.tan();
      complex5.ONE.tanh();
      Complex complex6 = complex0.sin();
      complex6.ZERO.abs();
      complex6.conjugate();
      complex1.log();
      complex4.INF.conjugate();
      complex1.nthRoot(1252);
      Complex.valueOf((-1082.80287913), 169.48312);
      complex1.abs();
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex5.cos();
      complex3.multiply(0.0);
      Complex.valueOf((-20.0), (-20.0));
      complex8.conjugate();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-920);
      complex0.multiply((-920));
      complex0.getReal();
      complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(1.0);
      complex2.NaN.toString();
      Complex.valueOf(2.0);
      complex0.tanh();
      Complex complex3 = complex2.asin();
      complex1.atan();
      Complex complex4 = complex3.I.log();
      try { 
        complex4.I.nthRoot((-920));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -920
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex0.pow(0.0);
      complex1.ZERO.readResolve();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex3.multiply(complex1);
      Complex complex7 = complex3.negate();
      complex7.ONE.cosh();
      complex7.isInfinite();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex3.negate();
      complex7.I.multiply(complex3);
      complex9.toString();
      Complex complex10 = complex6.add(complex1);
      complex3.multiply(2864);
      Complex complex11 = complex8.multiply(complex3);
      Complex complex12 = complex11.ONE.pow((double) 2864);
      complex11.toString();
      complex7.log();
      Complex complex13 = complex0.createComplex(0.0, 2390.62106915132);
      Complex complex14 = complex13.ZERO.sin();
      Complex complex15 = complex8.add(0.0);
      complex2.cosh();
      complex15.add(0.0);
      Complex complex16 = complex10.pow(complex9);
      complex16.add(complex14);
      complex5.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(1194.24171, 1194.24171);
      Complex complex1 = complex0.sin();
      complex0.INF.hashCode();
      complex1.ZERO.toString();
      complex0.isNaN();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.INF.sqrt1z();
      complex3.ZERO.multiply(complex0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex0.sqrt1z();
      complex5.cosh();
      complex6.I.readResolve();
      Complex complex7 = complex5.atan();
      complex7.I.subtract(complex4);
      Complex complex8 = complex5.sin();
      Complex complex9 = complex0.sqrt1z();
      complex9.readResolve();
      complex4.abs();
      complex8.subtract(0.0);
      complex0.reciprocal();
      Complex complex10 = complex6.multiply(1863.8301836910284);
      Complex complex11 = complex10.tan();
      complex2.getField();
      Complex complex12 = complex11.divide(complex2);
      complex12.add(complex6);
      complex12.NaN.divide(complex1);
      Complex complex13 = complex2.exp();
      complex13.abs();
      complex12.readResolve();
      Object object0 = new Object();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.multiply(666);
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = Complex.valueOf((double) 666, 0.0);
      complex2.ZERO.createComplex(0.0, 0.0);
      complex4.ONE.readResolve();
      complex4.I.toString();
      complex2.I.readResolve();
      complex3.ONE.conjugate();
      Complex complex5 = Complex.valueOf((double) 666);
      Complex complex6 = complex5.ZERO.exp();
      complex6.ONE.pow(complex3);
      Complex complex7 = complex5.tan();
      complex7.ONE.cos();
      Complex complex8 = complex7.subtract(complex5);
      complex8.I.cosh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.NaN.exp();
      complex2.NaN.tan();
      Complex complex3 = complex1.NaN.add((-793.84418579));
      complex3.ONE.getArgument();
      Complex complex4 = Complex.valueOf(245.0237925110851, 2045.397830398);
      complex0.hashCode();
      complex0.negate();
      complex1.reciprocal();
      complex4.I.readResolve();
      Complex complex5 = complex4.multiply(1.0);
      complex4.getReal();
      Complex complex6 = complex2.exp();
      complex2.ZERO.readResolve();
      complex6.ONE.exp();
      complex0.isNaN();
      Complex complex7 = complex2.sin();
      complex7.NaN.divide(0.0);
      complex6.equals(complex2);
      complex3.acos();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      complex1.NaN.subtract(3.929132560365955E283);
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex3.divide(complex0);
      complex4.ZERO.cos();
      complex4.I.acos();
      Complex complex5 = complex1.ZERO.tanh();
      complex0.negate();
      complex5.INF.sqrt();
      Complex complex6 = complex1.ZERO.acos();
      complex6.sinh();
      complex2.cos();
      complex5.abs();
      complex3.I.cosh();
      complex2.divide((-1525.321570666));
      Complex complex7 = complex3.cos();
      complex7.log();
      try { 
        complex1.nthRoot((-2138));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,138
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.conjugate();
      Complex complex1 = Complex.valueOf((-23.608045560508));
      Complex.valueOf((-2279.510322793593), (-23.608045560508));
      Complex complex2 = complex1.INF.subtract(complex0);
      complex0.ONE.log();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.INF.add(complex4);
      complex1.reciprocal();
      complex2.divide((-23.608045560508));
      complex4.INF.sqrt();
      complex5.I.multiply((-2279.510322793593));
      Complex.valueOf((-23.608045560508), (-2279.510322793593));
      complex5.add((-1.0));
      Complex complex6 = complex5.sqrt();
      complex2.multiply(0.0);
      complex0.subtract(complex1);
      complex6.tanh();
      Complex.valueOf(0.0);
      Complex.valueOf(0.0, (-2279.510322793593));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      Complex complex1 = complex0.add(0.0);
      complex1.conjugate();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.tanh();
      complex2.ONE.cosh();
      Complex complex3 = complex2.I.divide(complex0);
      complex1.ZERO.cosh();
      complex2.abs();
      Complex complex4 = complex0.exp();
      Complex.valueOf(0.7615941559557649, 0.7615941559557649);
      complex4.getField();
      Complex complex5 = complex4.INF.pow(0.7615941559557649);
      Complex complex6 = complex5.I.pow(0.0);
      complex6.INF.cos();
      Complex complex7 = complex1.atan();
      complex7.I.asin();
      try { 
        complex3.nthRoot((-155));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -155
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.I.readResolve();
      Complex complex3 = complex0.I.divide(1590.189441757329);
      complex3.I.tanh();
      Complex.valueOf(1365.00656, 0.0);
      Complex complex4 = Complex.valueOf((-1201.452881845853), 1590.189441757329);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.NaN.divide(complex5);
      Complex complex7 = complex4.ZERO.add(complex0);
      complex7.ONE.negate();
      complex7.I.getField();
      complex0.tan();
      Complex complex8 = Complex.I;
      Complex complex9 = complex6.multiply(complex8);
      complex9.ONE.cos();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3769.729951249083));
      Complex complex1 = Complex.valueOf((-1673.5));
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex3.NaN.readResolve();
      Complex complex4 = complex0.cos();
      complex0.isInfinite();
      Complex complex5 = complex4.conjugate();
      complex4.INF.nthRoot(7);
      Complex complex6 = complex0.divide((-3769.729951249083));
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex4.ZERO.exp();
      Complex complex10 = complex7.I.add((double) 7);
      Complex complex11 = complex0.ONE.atan();
      complex11.ONE.abs();
      complex4.isInfinite();
      complex4.ONE.sqrt();
      Complex complex12 = complex0.tanh();
      complex12.ONE.cosh();
      complex6.isInfinite();
      complex5.add((double) 7);
      complex12.add(complex2);
      complex1.sin();
      Complex complex13 = complex9.sin();
      complex13.tanh();
      complex10.acos();
      complex7.add(6.283185307179586);
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = complex0.sqrt1z();
      complex0.ONE.add((-1395.4056));
      complex0.NaN.toString();
      Complex complex2 = complex0.INF.reciprocal();
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex1.I.log();
      complex3.NaN.conjugate();
      Complex complex4 = complex3.ZERO.multiply((-843.05));
      complex0.sqrt();
      complex4.getArgument();
      Complex complex5 = complex4.negate();
      complex5.INF.hashCode();
      complex1.sqrt1z();
      Complex complex6 = Complex.NaN;
      complex0.subtract(complex6);
      complex1.nthRoot(500);
      complex4.add(1979.63693734938);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-1.0), 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.I.add((-1.0));
      Complex complex5 = complex1.INF.pow(complex3);
      Complex.valueOf(0.0);
      Complex complex6 = complex1.I.pow(1730.0);
      Complex complex7 = complex2.ONE.cos();
      complex3.readResolve();
      Complex complex8 = complex2.add(complex0);
      complex1.getReal();
      Complex complex9 = complex8.multiply(1310.1238503398);
      Complex complex10 = complex9.exp();
      complex10.ZERO.toString();
      Complex complex11 = complex1.createComplex(948.994241217287, 0.0);
      Complex.valueOf(20.0);
      complex5.nthRoot(567);
      complex11.NaN.cosh();
      complex11.sin();
      complex5.getImaginary();
      complex6.getImaginary();
      complex4.sqrt();
      complex7.add(996.67868);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getImaginary();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.acos();
      complex1.getImaginary();
      complex0.INF.add(complex2);
      complex1.pow(0.0);
      Complex complex3 = complex2.cos();
      complex2.toString();
      Complex complex4 = complex0.add(complex3);
      complex4.I.add(0.0);
      complex1.multiply(4091);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1326936872620137E-8), (-2372.22535));
      Complex complex1 = new Complex((-1.1326936872620137E-8));
      Complex complex2 = complex0.subtract(complex1);
      complex1.ZERO.subtract(0.0);
      Complex complex3 = complex1.I.sinh();
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.ZERO.log();
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
      
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex2.subtract(complex0);
      complex7.ONE.subtract(0.0);
      List<Complex> list0 = complex0.nthRoot(1042);
      assertEquals(1042, list0.size());
      
      Complex complex8 = complex2.exp();
      assertEquals((-0.9483202828110457), complex8.getReal(), 0.01);
      assertEquals(0.3173147352537828, complex8.getImaginary(), 0.01);
      
      complex4.tanh();
      complex2.hashCode();
      Complex complex9 = complex4.I.atan();
      Complex complex10 = complex2.multiply((double) 1042);
      Complex complex11 = complex10.tanh();
      assertEquals((-0.31788193102713935), complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      Complex complex12 = complex4.asin();
      complex9.multiply(complex6);
      assertFalse(complex6.equals((Object)complex7));
      assertSame(complex9, complex12);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      
      Complex complex13 = Complex.valueOf(97.973360172472);
      assertFalse(complex13.isInfinite());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1652.763053568132, 20.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex3.pow(4.278478878300888E134);
      assertSame(complex4, complex3);
      
      Object object0 = complex1.readResolve();
      Complex complex5 = complex1.ZERO.divide(4.278478878300888E134);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      complex1.INF.log();
      double double0 = complex1.getArgument();
      assertEquals((-0.28531777990066537), double0, 0.01);
      
      Complex complex6 = complex1.negate();
      complex2.isNaN();
      assertEquals(0.8813735870195428, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex7 = complex6.createComplex(0.0, 4.278478878300888E134);
      assertTrue(complex1.equals((Object)object0));
      assertEquals((-2.3277553103524148E8), complex6.getReal(), 0.01);
      assertFalse(complex7.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.multiply(2222.7);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      
      double double0 = complex2.abs();
      assertFalse(complex0.equals((Object)complex3));
      assertEquals(Double.NaN, double0, 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(515.575902, 515.575902);
      Complex complex1 = complex0.add(515.575902);
      Complex complex2 = complex1.ONE.sinh();
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf(515.575902, 0.4938860535621643);
      assertEquals(515.575902, complex4.getReal(), 0.01);
      
      Complex complex5 = complex1.INF.pow(complex0);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      
      Complex complex6 = complex3.divide(515.575902);
      complex6.INF.hashCode();
      assertEquals(1.0000003761966805, complex6.getReal(), 0.01);
      assertEquals((-1.9999992476069222), complex6.getImaginary(), 0.01);
      
      complex1.getArgument();
      Complex complex7 = complex3.reciprocal();
      assertFalse(complex0.equals((Object)complex4));
      assertEquals(3.8791604640695665E-4, complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.divide(complex0);
      complex1.ZERO.cos();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex1.ZERO.cos();
      complex0.hashCode();
      complex2.ZERO.asin();
      complex1.createComplex(1.0, 1.0);
      complex0.isNaN();
      complex2.asin();
      try { 
        complex0.nthRoot((-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.log();
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.ZERO.sin();
      complex3.NaN.multiply((-2304.3494));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex1.NaN.tan();
      complex4.exp();
      Complex complex5 = complex4.NaN.divide((-1198.67578));
      Complex complex6 = complex5.NaN.subtract(complex1);
      assertSame(complex6, complex5);
      
      Complex complex7 = complex0.INF.multiply(complex1);
      Complex complex8 = Complex.valueOf((-1400.820116), (-1400.820116));
      Complex complex9 = complex0.multiply(0);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertTrue(complex9.equals((Object)complex3));
      
      complex8.INF.multiply(complex1);
      Complex complex10 = complex0.subtract((double) 0);
      Complex complex11 = complex10.ONE.add(complex1);
      Object object0 = complex7.readResolve();
      double double0 = complex8.abs();
      assertEquals(1981.0588064922524, double0, 0.01);
      
      Complex complex12 = complex0.tanh();
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex10));
      assertEquals(1.557407724654902, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex4.pow((-1400.820116));
      assertTrue(complex13.equals((Object)object0));
      assertSame(complex4, complex11);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(3448.3211474);
      Complex complex2 = complex0.divide(2106.3819995);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex2.negate();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals((-4.747476954500057E-4), complex5.getReal(), 0.01);
      
      String string0 = complex1.toString();
      assertEquals("(3448.3211474, 1.0)", string0);
      
      Complex complex6 = complex4.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(2.718281828459045, complex3.getReal(), 0.01);
      
      Complex complex7 = complex0.sqrt();
      assertEquals(1.0, complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1161.807));
      List<Complex> list0 = complex0.nthRoot(214);
      assertEquals(214, list0.size());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-1161.807), complex0.getImaginary(), 0.01);
  }
}
