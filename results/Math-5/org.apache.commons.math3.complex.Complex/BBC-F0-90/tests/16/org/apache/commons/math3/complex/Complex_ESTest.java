/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:50:44 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-5.991861800175064E-17), (-5.991861800175064E-17));
      complex0.pow(complex1);
      complex1.ONE.getField();
      Complex complex2 = complex1.acos();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = new Complex((-1454.0), 20.0);
      complex1.tan();
      complex1.pow(1780.5058602455);
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.INF.abs();
      complex0.abs();
      Complex complex2 = new Complex((-20.0), (-20.0));
      complex0.asin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.tan();
      complex4.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0546185744775492E-16);
      Complex complex1 = complex0.ZERO.createComplex((-1996.494), 1.0546185744775492E-16);
      complex1.NaN.abs();
      complex0.ZERO.createComplex(2484.2312705338, Double.NaN);
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = new Complex((-292.65222578510554));
      complex3.ZERO.sin();
      complex0.ZERO.pow(complex3);
      Complex complex4 = Complex.valueOf(-0.0);
      complex0.abs();
      complex4.readResolve();
      Complex complex5 = Complex.valueOf(1.0546185744775492E-16);
      complex5.NaN.reciprocal();
      Complex complex6 = complex4.multiply(complex5);
      complex6.ONE.add(Double.NaN);
      Complex.valueOf(1.0546185744775492E-16, (-292.65222578510554));
      complex5.NaN.getArgument();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex7.sin();
      complex8.getField();
      complex2.subtract((-1923.1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.divide(complex1);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.conjugate();
      complex2.abs();
      complex2.cos();
      Complex complex4 = Complex.valueOf(2.2505716077585116E36, (-7.981320644583728E-8));
      complex4.tan();
      complex3.negate();
      Complex complex5 = complex1.asin();
      try { 
        complex5.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.INF.abs();
      complex0.abs();
      Complex complex2 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex2.tan();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.tanh();
      Complex.valueOf((-20.0));
      complex1.getArgument();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex0.INF.abs();
      complex0.abs();
      Complex complex2 = new Complex(1.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tan();
      complex2.ONE.getArgument();
      complex3.add(Double.POSITIVE_INFINITY);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf((-295.75966832));
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = new Complex((-295.75966832), (-295.75966832));
      complex5.getField();
      complex2.reciprocal();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.INF;
      complex7.asin();
      complex4.tanh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(25.349556399, 25.349556399);
      Complex complex1 = new Complex(438.29263);
      complex0.I.multiply(complex1);
      complex0.ONE.sin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex4.conjugate();
      complex5.conjugate();
      Complex complex6 = complex2.log();
      complex6.ZERO.toString();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex3.createComplex(25.349556399, 25.349556399);
      Complex complex9 = complex7.pow(complex8);
      complex3.INF.acos();
      Complex complex10 = complex9.INF.asin();
      Complex complex11 = complex10.INF.log();
      complex3.pow(25.349556399);
      Complex complex12 = complex3.divide(complex7);
      complex12.NaN.subtract(25.349556399);
      complex8.negate();
      complex12.subtract(complex1);
      Complex.valueOf(25.349556399, 25.349556399);
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(complex0);
      Complex complex1 = Complex.INF;
      complex1.NaN.abs();
      complex0.INF.abs();
      complex0.abs();
      Complex complex2 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(complex0);
      complex1.tanh();
      complex2.conjugate();
      Complex complex3 = complex1.cos();
      complex3.tan();
      complex1.asin();
      Complex complex4 = Complex.ZERO;
      complex4.multiply(Double.NaN);
      Complex complex5 = complex2.tanh();
      Complex complex6 = new Complex(0.0016905666409456899, (-13.693514819347616));
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1743.088, 1743.088);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(complex0);
      complex0.INF.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.tan();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(complex0);
      complex1.ONE.tanh();
      complex0.INF.abs();
      complex0.abs();
      Complex complex2 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex2.tan();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex2.multiply((-2583));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1933.0746848762758));
      Complex complex1 = complex0.I.add((-1070.2124727646938));
      complex0.atan();
      Complex complex2 = complex1.I.multiply((-3599));
      complex1.ZERO.toString();
      complex2.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex3.add((-1070.2124727646938));
      Complex complex6 = complex5.conjugate();
      complex6.I.getArgument();
      complex2.I.cos();
      Complex complex7 = complex6.ONE.pow(1228.18);
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex0.add(complex5);
      Complex complex10 = complex9.INF.tanh();
      Complex.valueOf((-1933.0746848762758), (double) (-3599));
      complex3.sqrt();
      Complex complex11 = complex2.pow((-899.5318865311948));
      complex4.multiply(complex8);
      complex0.sqrt();
      complex10.add(complex7);
      Complex complex12 = complex11.exp();
      complex2.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(complex0);
      complex1.ONE.tanh();
      complex0.INF.abs();
      complex0.abs();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.readResolve();
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
      Complex complex2 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(669.867485305);
      Complex complex1 = complex0.pow(6.283185307179586);
      Complex complex2 = Complex.INF;
      complex1.asin();
      complex0.tanh();
      Complex complex3 = Complex.valueOf(679.4264315);
      Complex complex4 = complex3.reciprocal();
      complex4.multiply(complex3);
      complex1.log();
      complex1.acos();
      complex2.add(2654.7425409493585);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.ONE.tanh();
      complex0.INF.abs();
      complex0.abs();
      Complex complex3 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      Complex complex4 = Complex.ONE;
      complex4.multiply(complex3);
      complex2.acos();
      complex0.add(1.557407724654902);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1650.67957, 1650.67957);
      Complex complex1 = complex0.multiply(1650.67957);
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex1.sinh();
      complex2.I.pow(complex3);
      complex1.INF.tan();
      complex1.INF.sqrt1z();
      complex3.tan();
      complex0.getField();
      Complex complex4 = complex0.I.sqrt();
      complex1.exp();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.exp();
      complex3.equals(complex1);
      complex1.conjugate();
      Complex.valueOf(1650.67957, (-7911.427));
      complex6.pow((-7911.427));
      Object object0 = complex5.readResolve();
      complex2.equals(object0);
      Complex complex7 = complex1.exp();
      complex7.NaN.sqrt();
      try { 
        complex4.nthRoot((-1849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,849
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf((-295.75966832));
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.tanh();
      complex5.abs();
      complex4.conjugate();
      Object object0 = complex1.ZERO.readResolve();
      complex0.abs();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex3.cos();
      complex7.ONE.tan();
      complex2.asin();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.divide(complex6);
      complex9.atan();
      object0.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(529.2894721706, 529.2894721706);
      complex0.hashCode();
      Complex complex1 = complex0.conjugate();
      complex1.I.hashCode();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.NaN.add(complex1);
      complex1.cosh();
      Complex.valueOf(5.1635269305465607E216);
      Complex complex4 = complex0.multiply(147.8672);
      complex4.ZERO.toString();
      complex3.getArgument();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.ZERO.sin();
      complex1.ONE.log();
      Complex complex2 = complex1.NaN.add((-2066.6572358772));
      Complex complex3 = complex0.I.sinh();
      int int0 = (-398);
      Complex complex4 = Complex.valueOf(20.0, (double) (-398));
      complex3.I.multiply((-398));
      complex0.NaN.abs();
      complex0.tanh();
      Complex complex5 = complex0.pow(complex3);
      complex5.I.sin();
      complex4.ONE.subtract(462.386089);
      complex0.exp();
      Complex complex6 = complex5.NaN.sin();
      complex6.NaN.conjugate();
      complex4.INF.divide(complex2);
      complex4.I.negate();
      complex0.multiply(complex4);
      Complex complex7 = complex4.divide(Double.NaN);
      complex7.I.multiply(6482);
      try { 
        complex3.ONE.nthRoot((-2314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,314
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.divide(complex0);
      Complex complex2 = Complex.valueOf((-295.75966832));
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = complex3.ONE.tanh();
      complex0.INF.abs();
      complex0.abs();
      complex4.tanh();
      complex0.cos();
      complex2.asin();
      Complex complex5 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex5.tan();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2502.094137));
      Complex complex2 = complex1.pow(complex0);
      complex2.tanh();
      complex0.abs();
      complex0.abs();
      complex1.tanh();
      complex0.cos();
      complex0.asin();
      Complex complex3 = new Complex(Double.NaN, 86.77676503323);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-3036.087611), (-4119.0));
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.I.multiply(1);
      complex1.ZERO.exp();
      complex0.reciprocal();
      complex1.sin();
      complex0.I.getField();
      Complex complex2 = new Complex((-287.581715859573));
      complex1.readResolve();
      complex1.equals(complex0);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.equals(complex1);
      Complex.valueOf(2.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-1170.85923916), Double.NaN);
      complex0.abs();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.valueOf(6.317463237641817E-9, 462.9469771684358);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex4.atan();
      complex1.readResolve();
      Complex complex7 = Complex.INF;
      complex7.sqrt();
      complex7.asin();
      complex3.sqrt();
      complex6.getField();
      complex5.getField();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf((-295.75966832));
      Complex complex4 = complex2.pow(complex1);
      complex1.tanh();
      complex2.abs();
      complex4.conjugate();
      Complex complex5 = Complex.ZERO;
      complex5.abs();
      complex3.tanh();
      complex0.cos();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.06979868747393601);
      complex0.asin();
      Complex.valueOf((-2273.40138744707), 1.9276698418065647E249);
      Complex.valueOf(1.9276698418065647E249);
      Complex complex2 = new Complex((-2273.40138744707), 4119.0);
      complex2.abs();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-3036.087611), (-4119.0));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.I.multiply(1);
      complex1.ZERO.exp();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.sin();
      complex0.I.getField();
      complex4.reciprocal();
      complex4.INF.pow((-4119.0));
      Complex complex5 = complex1.INF.asin();
      Complex complex6 = new Complex(1);
      complex4.tanh();
      complex3.I.multiply(complex2);
      Complex complex7 = Complex.valueOf((-3036.087611));
      Complex complex8 = Complex.valueOf((double) 1);
      complex6.equals(complex8);
      complex6.acos();
      complex7.subtract(complex5);
      complex3.asin();
      Complex complex9 = Complex.ZERO;
      complex9.reciprocal();
      try { 
        complex2.nthRoot((-2414));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,414
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(1.0);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.tanh();
      complex4.abs();
      complex3.conjugate();
      complex3.abs();
      complex2.tanh();
      Complex complex5 = new Complex(0.6480542736638855, (-2471.508));
      Complex complex6 = complex5.cos();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(3708.5973512703863);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.add(3708.5973512703863);
      complex1.divide(complex0);
      complex1.NaN.reciprocal();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(4.793444363780116E219);
      complex0.pow(complex1);
      Complex complex5 = Complex.I;
      complex5.tanh();
      Complex complex6 = Complex.INF;
      complex6.abs();
      complex3.conjugate();
      complex3.abs();
      complex4.tanh();
      complex2.cos();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf((-295.75966832));
      Complex complex4 = complex1.I.pow(complex0);
      complex4.ONE.tanh();
      complex0.INF.abs();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = Complex.INF;
      complex4.equals(",|IE*SiSJ.");
      Complex complex7 = complex3.acos();
      complex3.subtract(complex5);
      complex7.asin();
      Complex complex8 = new Complex(6.283185307179586, 6.283185307179586);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(947.955811075);
      complex0.pow(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(0.0, 1279.4542148208975);
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.cos();
      complex2.conjugate();
      Complex complex6 = complex3.atan();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.ZERO;
      complex2.equals(complex8);
      complex2.acos();
      complex5.subtract(complex6);
      complex0.asin();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(529.2894721706, 529.2894721706);
      complex0.hashCode();
      Complex complex1 = complex0.conjugate();
      complex1.I.hashCode();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.NaN.add(complex1);
      complex1.cosh();
      Complex.valueOf(5.1635269305465607E216);
      complex0.multiply(147.8672);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(947.955811075, (-2172.9));
      Complex complex1 = complex0.add((-2172.9));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.cos();
      Complex complex5 = Complex.valueOf(1696.065, (-1918.1880726));
      Complex complex6 = complex5.exp();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.exp();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex7.cosh();
      complex0.tan();
      Complex complex12 = complex1.conjugate();
      complex5.pow(complex2);
      complex7.divide(complex12);
      complex8.sinh();
      complex4.pow(complex10);
      complex3.sqrt();
      complex5.sqrt1z();
      complex9.atan();
      complex0.hashCode();
      complex2.add(complex12);
      Complex complex13 = complex4.subtract(complex6);
      Complex complex14 = Complex.valueOf(2933.851479976324, (-2172.9));
      complex14.getField();
      Complex complex15 = Complex.NaN;
      complex15.multiply(complex13);
      complex13.getImaginary();
      complex11.pow(complex5);
      complex1.sin();
      complex15.acos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.003926370146842E-8);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.valueOf(2.003926370146842E-8, 2.003926370146842E-8);
      Complex complex6 = complex2.cos();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex5.atan();
      Complex complex9 = Complex.INF;
      complex1.equals(complex5);
      complex7.acos();
      complex2.subtract(complex6);
      complex5.asin();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-3036.087611), (-4119.0));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.I.multiply(1);
      complex2.ZERO.exp();
      complex0.reciprocal();
      Complex complex3 = complex1.sin();
      complex0.I.getField();
      Complex complex4 = complex3.reciprocal();
      complex3.INF.pow((-4119.0));
      Complex.valueOf(947.955811075);
      complex1.INF.asin();
      complex4.NaN.add((-3036.087611));
      complex3.tanh();
      complex4.sqrt1z();
      // Undeclared exception!
      complex1.nthRoot(2146776560);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(3708.5973512703863, 1.00450880870391);
      Complex complex1 = Complex.valueOf(3708.5973512703863);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.reciprocal();
      complex0.multiply(1);
      complex3.exp();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.sin();
      complex2.getField();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.pow(1.00450880870391);
      complex2.asin();
      complex0.add(3708.5973512703863);
      complex5.tanh();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.sqrt1z();
      complex7.multiply(complex3);
      complex9.log();
      complex1.acos();
      Complex complex10 = complex6.sin();
      complex10.I.acos();
      Complex complex11 = new Complex(3708.5973512703863);
      complex11.exp();
      Complex complex12 = Complex.valueOf((-1.3753693313849725E7));
      complex12.tan();
      complex3.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add(1696.065);
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex5 = complex4.ONE.exp();
      complex0.ONE.sqrt();
      complex0.I.multiply(1696.065);
      Complex complex6 = complex4.ONE.exp();
      complex6.NaN.negate();
      Complex complex7 = Complex.I;
      complex7.INF.tan();
      complex7.ZERO.conjugate();
      complex5.NaN.pow(complex4);
      Complex complex8 = Complex.ONE;
      complex8.NaN.sinh();
      Complex complex9 = complex1.ONE.pow(complex4);
      complex1.sqrt();
      Complex complex10 = complex3.sqrt1z();
      complex10.atan();
      complex9.hashCode();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 1237);
      complex11.nthRoot(1237);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add(1696.065);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.asin();
      Complex complex8 = Complex.valueOf(1696.065, (-191.0623));
      complex8.reciprocal();
      complex4.abs();
      Complex complex9 = complex8.subtract(complex3);
      complex9.log();
      complex1.toString();
      Complex complex10 = Complex.valueOf((-1193.2118071), 2642.499015);
      Complex complex11 = complex8.cos();
      complex2.atan();
      complex6.readResolve();
      complex1.getImaginary();
      complex7.asin();
      complex10.sqrt();
      complex4.getField();
      complex1.getField();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(947.955811075);
      Complex complex1 = complex0.atan();
      complex1.ONE.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.cosh();
      complex3.sinh();
      complex2.conjugate();
      Complex complex4 = new Complex(0.0);
      complex4.atan();
      complex2.tanh();
      Complex complex5 = complex3.sqrt1z();
      complex3.multiply(complex5);
      Complex complex6 = new Complex((-2269.3781615717367), 0.6608942747116089);
      complex6.log();
      complex3.acos();
      Complex complex7 = new Complex(947.955811075);
      complex7.sin();
      Complex complex8 = Complex.ZERO;
      complex8.exp();
      Complex complex9 = complex7.multiply((-1));
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(1.4736818914204564E-150, Double.NaN);
      complex0.ONE.multiply(37);
      Complex complex1 = complex0.I.negate();
      complex1.INF.cosh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex2.divide(complex3);
      complex4.add(complex3);
      Complex complex6 = complex3.sin();
      complex4.createComplex(3699.64188878, (-206.5137));
      complex4.toString();
      complex5.add(20.284695131);
      complex0.log();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2700.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply(0);
      complex2.INF.toString();
      Complex complex3 = complex0.NaN.pow(1.3482186432156595E-4);
      Complex complex4 = complex1.createComplex(0, 1982.0);
      Complex complex5 = complex4.ONE.conjugate();
      complex5.I.readResolve();
      complex4.abs();
      Complex complex6 = complex5.INF.sin();
      complex5.NaN.add(complex3);
      Complex complex7 = Complex.valueOf((-1.0006437934465773));
      complex7.ONE.cos();
      complex6.ZERO.divide(11.61598703288748);
      complex1.ONE.toString();
      complex0.I.conjugate();
      Complex complex8 = complex4.multiply((-4584));
      complex8.I.add(complex7);
      complex8.INF.getField();
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex1.divide(complex0);
      complex0.cos();
      complex4.log();
      complex5.I.reciprocal();
      Complex complex11 = complex8.reciprocal();
      complex4.pow(complex9);
      complex10.sqrt1z();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 345.621);
      Complex complex1 = new Complex(1363.032765752, 2299.18350578);
      Complex complex2 = complex1.divide(complex0);
      complex1.atan();
      Complex complex3 = Complex.ONE;
      complex3.multiply(complex2);
      complex3.log();
      Complex complex4 = complex0.acos();
      complex4.ZERO.tanh();
      complex0.sin();
      Complex complex5 = Complex.INF;
      complex5.reciprocal();
      complex1.pow(2299.18350578);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-3036.087611), (-4119.0));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.I.multiply(1);
      complex2.ZERO.exp();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.sin();
      complex0.I.getField();
      Complex complex5 = complex4.reciprocal();
      complex4.INF.pow((-4119.0));
      complex1.INF.asin();
      complex5.NaN.add((-3036.087611));
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex3.multiply(complex6);
      Complex complex9 = complex8.log();
      complex5.acos();
      complex5.sin();
      complex9.exp();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(3708.5973512703863, 3708.5973512703863);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.add(3708.5973512703863);
      complex1.divide(complex0);
      complex0.ZERO.pow(complex1);
      complex1.NaN.reciprocal();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.createComplex(3708.5973512703863, 199.354981404);
      complex1.asin();
      Complex complex5 = Complex.valueOf(3708.5973512703863, 0.7616);
      complex2.reciprocal();
      complex2.negate();
      Complex complex6 = Complex.INF;
      complex4.subtract(complex6);
      complex5.toString();
      complex6.tanh();
      complex3.abs();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.NaN.atan();
      complex2.NaN.sin();
      complex2.INF.cosh();
      Complex complex4 = complex0.sinh();
      complex4.ZERO.conjugate();
      Complex complex5 = complex4.atan();
      complex3.getReal();
      complex4.isNaN();
      Complex complex6 = complex2.subtract((-20.0));
      Complex complex7 = complex1.sin();
      Complex complex8 = complex7.tanh();
      complex5.equals(complex6);
      complex5.acos();
      Complex complex9 = Complex.ONE;
      complex5.subtract(complex8);
      complex8.asin();
      complex9.reciprocal();
      complex5.add(complex7);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.6719275712966919);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.add((-1672.728654));
      Complex complex5 = complex2.divide(complex0);
      complex1.pow(complex4);
      complex4.reciprocal();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.createComplex(0.6719275712966919, 199.354981404);
      Complex complex8 = Complex.ZERO;
      complex8.asin();
      Complex.valueOf(0.7616, 199.354981404);
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex2.add(complex9);
      Complex complex11 = complex7.subtract(complex10);
      complex9.getField();
      Complex complex12 = Complex.NaN;
      complex11.multiply(complex12);
      complex12.getImaginary();
      complex6.pow(complex11);
      complex11.sin();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.sqrt();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.add(1.1595206571182372E-4);
      Complex complex4 = complex2.divide(complex3);
      complex2.pow(complex0);
      complex4.reciprocal();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.createComplex(199.354981404, 199.354981404);
      Complex complex7 = complex1.asin();
      Complex complex8 = Complex.valueOf(199.354981404, 199.354981404);
      complex1.reciprocal();
      complex0.add(complex8);
      complex3.subtract(complex4);
      complex4.getField();
      complex7.multiply(complex5);
      complex6.getImaginary();
      Complex complex9 = Complex.ZERO;
      complex9.pow(complex0);
      complex4.sin();
      Complex complex10 = complex3.acos();
      complex2.sinh();
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(3708.5973512703863);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(3708.5973512703863, 3708.5973512703863);
      complex3.atan();
      complex2.sin();
      complex1.cosh();
      Complex complex4 = new Complex(2135.485759935);
      Complex complex5 = complex4.sinh();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.conjugate();
      complex7.atan();
      complex3.tanh();
      complex7.sqrt1z();
      Complex complex8 = new Complex(2135.485759935, 2135.485759935);
      Complex complex9 = complex7.multiply(complex8);
      Complex complex10 = complex3.log();
      complex2.acos();
      complex5.sin();
      complex9.exp();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.divide(complex0);
      complex0.pow(1.7884841356632925E49);
      Complex complex3 = Complex.valueOf(1.7884841356632925E49);
      Complex complex4 = Complex.valueOf(1.7884841356632925E49, (-3230.82622207));
      complex4.tan();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.valueOf(1524.91984967624, 1524.91984967624);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex3.atan();
      complex5.tanh();
      complex7.sqrt1z();
      Complex complex10 = Complex.NaN;
      complex10.multiply(complex6);
      complex8.log();
      complex9.acos();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.subtract(162754.78125);
      complex1.NaN.acos();
      complex1.INF.abs();
      complex0.INF.exp();
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.sin();
      complex1.asin();
      complex1.NaN.multiply(complex2);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.sinh();
      complex8.getField();
      complex5.sinh();
      complex7.pow(complex0);
      Complex complex9 = complex7.pow(162754.78125);
      complex4.atan();
      complex6.atan();
      complex7.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.divide(complex0);
      complex1.NaN.atan();
      Complex complex3 = complex2.NaN.sin();
      complex2.INF.cosh();
      Complex complex4 = complex0.sinh();
      complex4.ZERO.conjugate();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.ONE.tanh();
      complex6.ONE.sqrt1z();
      complex5.I.multiply(complex2);
      complex1.log();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex5.sin();
      complex7.exp();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-3036.087611), (-4119.0));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.I.multiply(1);
      complex2.ZERO.exp();
      Complex complex4 = complex0.reciprocal();
      complex1.I.reciprocal();
      Complex complex5 = complex1.sin();
      complex0.I.getField();
      Complex complex6 = complex5.reciprocal();
      complex5.INF.pow((-4119.0));
      Complex complex7 = complex1.INF.asin();
      Complex complex8 = complex6.NaN.add((-3036.087611));
      complex1.getArgument();
      complex6.getReal();
      complex8.isNaN();
      Complex complex9 = complex6.subtract(1.1883951057781212);
      complex9.I.sin();
      complex9.I.createComplex((-409.8524742), 0.0);
      complex5.I.asin();
      complex9.INF.reciprocal();
      Complex complex10 = complex5.add(complex4);
      complex5.subtract(complex1);
      complex4.getField();
      Complex complex11 = Complex.valueOf((-1509.648944781554), 20.0);
      complex11.equals(complex10);
      Complex complex12 = complex3.reciprocal();
      Complex complex13 = complex7.log();
      complex1.sqrt1z();
      complex12.acos();
      complex8.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(5.318335165745994);
      complex1.conjugate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = new Complex(5.318335165745994, (-3.096733638475319E128));
      Complex complex4 = complex2.pow(complex3);
      complex4.INF.subtract(3036.087611);
      complex1.nthRoot(1237);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.44566190242767334);
      Complex complex1 = complex0.ZERO.multiply(0.44566190242767334);
      complex1.INF.getField();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.acos();
      Object object0 = complex3.INF.readResolve();
      complex3.getField();
      Complex complex4 = complex1.ONE.subtract((-1585.0));
      complex4.ZERO.tan();
      Complex complex5 = complex0.pow(complex3);
      complex5.ZERO.readResolve();
      complex2.negate();
      Complex complex6 = complex0.multiply(0.0);
      complex6.NaN.sqrt1z();
      ((Complex) object0).INF.multiply(Double.POSITIVE_INFINITY);
      complex1.log();
      complex0.equals((Object) null);
      complex2.getImaginary();
      complex6.tan();
      complex1.NaN.tanh();
      Complex complex7 = complex1.pow(complex5);
      Complex complex8 = complex7.INF.multiply(0.44566190242767334);
      complex8.abs();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex9.divide(complex4);
      complex10.hashCode();
      complex2.getReal();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex0.reciprocal();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(3708.5973512703863);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.add(3708.5973512703863);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.ZERO.pow(complex1);
      Complex complex5 = complex1.NaN.reciprocal();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.createComplex(3708.5973512703863, 199.354981404);
      Complex complex8 = complex1.asin();
      Complex complex9 = Complex.valueOf(3708.5973512703863, 0.7616);
      complex2.reciprocal();
      complex5.add(complex7);
      complex3.subtract(complex5);
      complex4.getField();
      complex9.multiply(complex3);
      complex0.getImaginary();
      Complex complex10 = complex5.pow(complex2);
      complex10.sin();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex0.ZERO.add((-3215.0));
      complex3.ZERO.toString();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex2.subtract(1.5707963267948966);
      Complex complex7 = new Complex((-3215.0), (-3215.0));
      Complex complex8 = complex0.pow(complex7);
      complex8.readResolve();
      complex1.negate();
      Complex complex9 = complex7.multiply(0.0);
      Complex complex10 = complex9.sqrt1z();
      complex1.negate();
      Complex complex11 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex12 = complex4.log();
      complex10.equals(complexField0);
      complex5.getImaginary();
      complex1.tan();
      complex8.tanh();
      Complex complex13 = complex12.pow(complex2);
      Complex complex14 = Complex.NaN;
      complex14.multiply((-697.8847041202795));
      complex14.abs();
      complex13.tanh();
      complex11.divide(complex8);
      complex7.hashCode();
      complex6.getReal();
      Complex.valueOf(0.0);
      complex1.reciprocal();
      complex14.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.686779260635376);
      Complex complex1 = complex0.ZERO.sinh();
      complex1.ZERO.readResolve();
      Complex complex2 = null;
      Complex complex3 = complex1.ONE.sinh();
      complex3.INF.multiply(complex1);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.multiply(994.605173);
      Complex complex4 = complex3.ONE.pow(6.283185307179586);
      complex0.multiply(994.605173);
      complex3.multiply(complex2);
      Complex complex5 = complex3.INF.sinh();
      complex5.hashCode();
      Complex complex6 = complex2.NaN.cos();
      complex6.negate();
      complex1.equals(complex2);
      complex0.INF.tan();
      Complex complex7 = complex2.log();
      Complex complex8 = complex7.INF.divide(6.283185307179586);
      Complex complex9 = complex1.log();
      complex9.ONE.getArgument();
      Complex complex10 = complex2.I.multiply((-1570.57132825));
      complex1.readResolve();
      complex3.NaN.subtract(complex4);
      Complex complex11 = complex8.cos();
      complex11.ONE.abs();
      complex4.log();
      complex11.multiply((-1238.8882942432));
      complex2.conjugate();
      Complex complex12 = complex4.multiply(994.605173);
      complex10.multiply(0.0);
      complex7.atan();
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add(1696.065);
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex0.ONE.sqrt();
      Complex complex7 = complex4.ONE.exp();
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex6.INF.cosh();
      Complex complex10 = complex9.INF.tan();
      complex9.ZERO.conjugate();
      complex5.NaN.pow(complex4);
      Complex complex11 = complex4.I.divide(complex1);
      complex11.NaN.sinh();
      Complex complex12 = complex1.ONE.pow(complex4);
      Complex complex13 = complex1.sqrt();
      Complex complex14 = complex3.sqrt1z();
      complex14.atan();
      complex12.hashCode();
      complex13.NaN.abs();
      complex5.pow(4016.937924);
      complex12.subtract(complex13);
      complex8.toString();
      Complex complex15 = Complex.valueOf(3.529920406834134E113, 0.0);
      Complex complex16 = complex5.cos();
      complex16.INF.atan();
      complex16.INF.readResolve();
      complex15.getImaginary();
      complex10.asin();
      complex0.getField();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.negate();
      complex1.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.tan();
      complex0.nthRoot(1627);
      complex5.getField();
      complex2.INF.multiply(1627);
      complex4.hashCode();
      complex2.isNaN();
      complex2.NaN.reciprocal();
      Complex complex6 = complex4.conjugate();
      complex6.NaN.sin();
      complex6.I.multiply(complex3);
      Complex complex7 = complex6.multiply(1627);
      complex2.nthRoot(931);
      Object object0 = new Object();
      complex2.equals(object0);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2931.070957));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt();
      complex2.sinh();
      complex1.atan();
      Complex complex3 = Complex.valueOf((-2209.3897516));
      complex1.atan();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(7);
      Complex complex1 = Complex.valueOf((double) 7);
      complex1.ONE.subtract(0.0);
      Complex complex2 = new Complex(6.283185307179586, 2744.183489068772);
      complex0.multiply(complex2);
      complex1.sinh();
      complex1.getField();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(285);
      Complex complex2 = complex1.acos();
      complex1.isInfinite();
      Complex complex3 = complex2.exp();
      complex3.createComplex(285, (-2198.344603));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(3547.0382695163935);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.INF.pow(complex2);
      complex3.I.nthRoot(800);
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.INF.add(complex2);
      Complex complex6 = complex2.ZERO.divide(complex4);
      Complex complex7 = complex6.I.subtract(complex2);
      complex7.ZERO.sqrt1z();
      Complex.valueOf(2010.394857957523);
      Complex complex8 = complex0.cosh();
      complex8.getArgument();
      Complex complex9 = complex8.ZERO.multiply(complex1);
      complex9.NaN.getField();
      complex9.multiply(1290);
      complex8.INF.getField();
      complex1.toString();
      Complex complex10 = complex3.conjugate();
      complex10.I.toString();
      complex5.tan();
      complex3.add((double) 800);
      complex4.asin();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 774.5);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.ONE.pow(774.5);
      complex1.INF.pow(complex2);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.negate();
      complex3.ZERO.readResolve();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.pow(complex5);
      complex6.getArgument();
      Complex complex7 = complex6.pow(774.5);
      complex3.divide(complex1);
      complex0.sqrt1z();
      Complex complex8 = complex0.multiply((-1571));
      complex1.ONE.toString();
      complex3.INF.abs();
      complex8.log();
      complex8.equals((Object) null);
      complex8.I.negate();
      complex8.getImaginary();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex7.multiply(complex3);
      Complex complex11 = complex10.I.sinh();
      complex8.cosh();
      complex4.subtract(complex9);
      complex9.sqrt1z();
      complex6.negate();
      complex4.acos();
      complex1.hashCode();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.atan();
      Complex.valueOf(0.0);
      complex0.NaN.divide(0.0);
      Complex complex1 = complex0.I.add(1886.2291);
      complex1.NaN.cosh();
      Complex complex2 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.NaN.getField();
      Complex complex2 = complex0.sinh();
      complex0.equals("-X)");
      complex2.getReal();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.ZERO.multiply(37);
      Complex complex5 = complex3.add(complex0);
      complex5.NaN.sinh();
      complex3.INF.asin();
      Complex.valueOf((-2386.67), (-492.81441642));
      complex5.getImaginary();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.multiply((-1866.47633074));
      complex7.subtract(complex2);
      complex2.sqrt1z();
      complex7.readResolve();
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-502.1459218017), 20.0);
      Complex complex1 = complex0.INF.cosh();
      complex1.ZERO.negate();
      Complex complex2 = complex0.multiply(17);
      complex2.ZERO.createComplex(20.0, (-2036.0));
      Complex.valueOf((double) 17, (double) 17);
      complex0.ONE.multiply((-502.1459218017));
      complex2.tan();
      complex2.toString();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1975.309));
      complex0.ONE.acos();
      Complex complex1 = complex0.ONE.createComplex(0.0, 2.0);
      Complex complex2 = Complex.valueOf(2.0, 1922.86);
      Complex complex3 = complex2.ONE.asin();
      complex3.INF.acos();
      complex3.getArgument();
      complex2.ONE.divide(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.divide(2.0);
      complex4.abs();
      complex1.divide(0.0);
      complex2.equals(complex0);
      Complex complex6 = complex5.divide(2.0);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex4.negate();
      complex8.ZERO.createComplex((-4403.19359), 2.0);
      complex7.sqrt1z();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-2725.63316393));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf((-2725.63316393), (-2725.63316393));
      complex1.ONE.hashCode();
      complex1.getArgument();
      Complex complex3 = complex0.sqrt();
      complex0.divide((-2725.63316393));
      complex1.I.add((-1.0));
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex3.createComplex(0.0, (-1513.148));
      complex5.INF.sin();
      complex5.equals(complexField0);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(3708.5973512703863);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.add(123.26091621791466);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.ZERO.pow(complex1);
      complex1.NaN.reciprocal();
      complex3.isNaN();
      complex0.equals(complex2);
      complex2.ONE.acos();
      complex1.subtract(complex2);
      complex2.asin();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(2285.054534, (-1.0));
      Complex complex1 = Complex.valueOf((-3542.7804196));
      complex1.INF.abs();
      complex0.getArgument();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex1.pow(complex0);
      complex4.INF.atan();
      complex4.readResolve();
      Complex complex5 = complex0.subtract(1096.633056640625);
      Complex complex6 = complex5.ZERO.createComplex((-3542.7804196), (-1.0));
      complex0.negate();
      complex6.I.sqrt();
      complex0.toString();
      complex3.exp();
      complex1.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-667.34009));
      complex0.getField();
      complex0.isNaN();
      Complex complex1 = complex0.add((-667.34009));
      complex0.INF.abs();
      Complex complex2 = complex1.ONE.asin();
      complex2.I.multiply(complex0);
      complex2.sqrt();
      Complex complex3 = complex1.ONE.add(complex0);
      complex3.NaN.add((-1188.30467904));
      complex2.ZERO.log();
      complex0.getArgument();
      complex1.pow((-667.34009));
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.multiply(0);
      complex0.I.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.pow((double) 0);
      Complex complex3 = Complex.valueOf((double) 0, (double) 0);
      complex1.pow(complex0);
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-5.6696107089038004E-8);
      Complex complex1 = new Complex((-5.6696107089038004E-8));
      Complex complex2 = complex0.divide(complex1);
      double double1 = 1444.71;
      complex0.I.abs();
      complex2.createComplex((-20.0), 1444.71);
      complex1.divide((-5.6696107089038004E-8));
      int int0 = 1;
      int int1 = (-3109);
      try { 
        complex2.I.nthRoot((-3109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,109
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.nthRoot((-123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -123
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getArgument();
      Complex complex1 = complex0.log();
      complex1.I.cos();
      Complex complex2 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      complex0.add(complex2);
      Complex complex3 = complex0.ZERO.add((-3215.0));
      complex2.ZERO.toString();
      Complex complex4 = complex0.multiply((-3867.822092102014));
      Complex complex5 = complex4.ONE.acos();
      complex5.ONE.negate();
      complex1.getReal();
      complex2.getImaginary();
      complex5.I.negate();
      Complex complex6 = complex0.multiply(1.5707963267948966);
      Complex complex7 = complex6.ZERO.negate();
      complex7.I.multiply(complex6);
      complex6.INF.atan();
      Complex.valueOf((-3215.0), 3590.036391868626);
      Complex complex8 = complex3.multiply(360);
      Complex complex9 = complex8.ONE.pow((-1122.1022948628192));
      Complex complex10 = complex9.NaN.subtract(complex3);
      complex7.abs();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = Complex.valueOf(2796.98684, 2796.98684);
      complex11.equals(complex12);
      complex5.reciprocal();
      Complex complex13 = complex1.log();
      complex13.ONE.sqrt1z();
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      complex0.NaN.hashCode();
      complex0.getReal();
      Complex complex1 = complex0.ONE.add((-8.204903560604627E-9));
      complex0.sqrt();
      Complex complex2 = complex0.multiply((-3171));
      complex0.getArgument();
      complex0.sinh();
      Complex complex3 = complex0.add((double) (-3171));
      Complex complex4 = complex3.INF.pow(Double.NaN);
      complex4.createComplex(Double.NaN, Double.NaN);
      complex2.isNaN();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex2.cos();
      complex6.ZERO.readResolve();
      complex5.ZERO.sin();
      complex5.INF.pow(complex1);
      complex5.toString();
      complex5.isNaN();
      complex5.isInfinite();
      complex5.subtract(complex6);
      complex3.getImaginary();
      Complex.valueOf((-20.0), 333.881976);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 435.951);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.INF.createComplex(2556.4118348336, 2556.4118348336);
      complex2.I.sinh();
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = Complex.valueOf(360.30246992515, 360.30246992515);
      complex4.INF.sqrt();
      complex0.getField();
      complex0.hashCode();
      Complex complex5 = complex0.INF.exp();
      complex5.ONE.multiply(complex3);
      Complex complex6 = complex0.pow(0.0);
      complex6.getField();
      Complex complex7 = complex0.add(2556.4118348336);
      complex0.getImaginary();
      Complex complex8 = complex7.multiply(2672.151452);
      Complex complex9 = complex1.conjugate();
      complex9.getField();
      complex4.add(1.0);
      complex5.subtract(complex2);
      complex5.getImaginary();
      Complex complex10 = complex8.createComplex((-713.83504), 2556.4118348336);
      complex10.sin();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.subtract(840.6150539);
      complex0.getArgument();
      Complex complex4 = complex1.conjugate();
      complex1.ONE.sin();
      Complex complex5 = complex4.I.divide(complex2);
      complex5.ZERO.atan();
      complex4.pow(6.283185307179586);
      complex3.divide((-891.27));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.conjugate();
      complex2.INF.pow(complex1);
      complex2.nthRoot(1237);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.I.negate();
      complex0.INF.atan();
      complex1.INF.atan();
      Complex complex2 = complex0.ZERO.acos();
      complex1.sqrt();
      int int0 = 0;
      try { 
        complex2.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.ONE.sinh();
      complex0.getReal();
      Complex complex3 = complex0.cos();
      complex3.NaN.getField();
      Complex complex4 = complex2.pow(0.0);
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex0.asin();
      complex1.isNaN();
      complex6.sqrt();
      complex4.getArgument();
      complex0.readResolve();
      Complex complex7 = complex0.pow(0.0);
      complex4.exp();
      Complex.valueOf(0.0);
      Complex complex8 = complex7.sqrt();
      complex8.toString();
      Complex complex9 = complex8.log();
      Complex complex10 = complex5.cosh();
      complex10.NaN.reciprocal();
      Complex complex11 = complex8.sin();
      complex7.cos();
      complex9.acos();
      complex11.tan();
      complex8.sin();
      complex7.readResolve();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(2846.55481098384);
      Complex complex1 = complex0.sqrt();
      complex1.getImaginary();
      Complex complex2 = complex0.exp();
      complex0.INF.add(2846.55481098384);
      complex2.ZERO.divide((-431.27019));
      complex1.toString();
      complex2.asin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.add(complex3);
      complex4.NaN.sinh();
      complex3.pow(complex4);
      Complex complex5 = complex3.createComplex(2846.55481098384, 2906.1233376252567);
      complex5.isNaN();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(669.867485305);
      complex0.multiply(1441);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(1.1373425785132867E221, 2287.33469273479);
      Complex complex1 = new Complex((-2503.53), 2165.9237980563607);
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex0.readResolve();
      complex2.isNaN();
      Complex complex3 = complex2.ZERO.add(560.84391203);
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex2.ONE.multiply(1);
      Complex complex6 = Complex.valueOf(560.84391203, (-2503.53));
      complex2.getField();
      complex1.add(complex0);
      complex4.atan();
      Complex complex7 = complex5.atan();
      complex7.I.pow(complex6);
      complex7.asin();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.NaN.pow((-4157.823740875066));
      complex0.getImaginary();
      complex0.isInfinite();
      Complex complex3 = complex0.subtract(Double.NaN);
      Complex complex4 = complex0.I.add(1.0);
      complex3.NaN.getArgument();
      Complex complex5 = complex0.INF.createComplex(1.0, 1.1702606678009033);
      Complex complex6 = complex0.pow(0.0);
      complex6.ONE.hashCode();
      Complex complex7 = complex3.negate();
      complex0.readResolve();
      complex5.add(complex7);
      Complex complex8 = complex2.atan();
      complex8.toString();
      complex4.asin();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3436.4030223433406, 0.0);
      complex0.NaN.sin();
      Complex complex1 = Complex.valueOf((-500.41254), 7.462678536479685E-9);
      complex1.I.log();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex0.ZERO.divide((-500.41254));
      Complex complex5 = complex1.INF.add(1156.3);
      complex5.INF.divide(3436.4030223433406);
      Complex complex6 = Complex.valueOf(1156.3);
      complex6.NaN.sqrt();
      complex2.sqrt1z();
      Complex complex7 = complex1.pow((-20.0));
      complex1.ZERO.sin();
      complex7.negate();
      complex1.ZERO.divide(7.462678536479685E-9);
      Complex complex8 = complex0.add(complex3);
      Complex complex9 = complex2.add(complex8);
      complex8.ZERO.sqrt1z();
      complex9.NaN.divide((-3445.7115209594));
      complex1.atan();
      Complex complex10 = complex4.divide(3436.4030223433406);
      complex10.I.abs();
      complex10.pow((-500.41254));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.createComplex(270.3, 270.3);
      complex0.getImaginary();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.ONE.multiply(complex3);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.pow(complex1);
      complex6.I.add(complex4);
      complex6.INF.add(0.0);
      Complex complex7 = complex2.createComplex(0.0, 270.3);
      Complex complex8 = complex7.INF.pow(2070.5537);
      Complex complex9 = complex8.conjugate();
      complex9.NaN.getField();
      complex2.hashCode();
      Complex complex10 = complex0.divide(0.0);
      Complex complex11 = complex1.divide(0.0);
      Complex complex12 = complex10.negate();
      Object object0 = new Object();
      complex5.equals(object0);
      Complex.valueOf(2.244531711424792E-8);
      complex11.NaN.tanh();
      complex12.cosh();
      Complex complex13 = complex0.cos();
      complex13.NaN.log();
      complex3.subtract(complex8);
      complex11.tanh();
      complex8.hashCode();
      complex1.readResolve();
      Complex complex14 = new Complex((-980.0));
      complex12.add(complex14);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex((-3036.087611), (-4119.0));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.I.multiply(1);
      complex2.ZERO.exp();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.sin();
      complex0.I.getField();
      Complex complex5 = complex4.reciprocal();
      complex4.INF.pow((-4119.0));
      complex1.INF.asin();
      Complex complex6 = complex5.NaN.add((-3036.087611));
      complex1.getArgument();
      complex5.getReal();
      complex6.isNaN();
      Complex complex7 = complex5.subtract(1.1883951057781212);
      Complex complex8 = complex7.I.sin();
      complex7.I.createComplex((-409.8524742), 0.0);
      complex4.I.asin();
      complex7.INF.reciprocal();
      complex4.add(complex3);
      Complex complex9 = complex4.subtract(complex1);
      complex3.getField();
      complex2.multiply(complex0);
      complex9.getImaginary();
      complex3.pow(complex9);
      complex0.sin();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(0.44566190242767334);
      Complex complex1 = complex0.ZERO.multiply(0.44566190242767334);
      complex1.INF.getField();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.acos();
      complex3.INF.readResolve();
      Complex complex4 = complex3.createComplex(0.44566190242767334, (-1.0));
      complex4.getField();
      Complex complex5 = complex1.ONE.subtract((-1585.0));
      complex5.ZERO.tan();
      Complex complex6 = complex0.pow(complex3);
      complex6.ZERO.readResolve();
      complex2.negate();
      Complex complex7 = complex0.multiply(0.0);
      complex7.NaN.sqrt1z();
      Complex complex8 = complex0.negate();
      complex8.INF.multiply(Double.POSITIVE_INFINITY);
      complex1.log();
      complex0.equals((Object) null);
      complex2.getImaginary();
      complex7.tan();
      complex1.NaN.tanh();
      Complex complex9 = complex1.pow(complex6);
      Complex complex10 = complex9.INF.multiply(0.44566190242767334);
      complex10.abs();
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex11.divide(complex5);
      complex12.hashCode();
      complex2.getReal();
      Complex.valueOf(0.0);
      complex0.reciprocal();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.valueOf(947.955811075);
      Complex complex1 = complex0.pow(0.0);
      complex0.asin();
      Complex complex2 = Complex.valueOf(947.955811075);
      Complex complex3 = complex2.tan();
      complex3.ONE.sqrt1z();
      Complex.valueOf(0.0, 947.955811075);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.ONE.createComplex((-681.9857), 0.0);
      Complex complex6 = complex1.sqrt1z();
      complex0.getImaginary();
      Complex complex7 = Complex.valueOf(20.0);
      complex5.divide(complex2);
      complex6.nthRoot(2107);
      complex1.getArgument();
      Complex complex8 = Complex.NaN;
      complex7.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-939.5));
      Complex complex1 = Complex.valueOf((-939.5));
      Complex complex2 = complex0.NaN.pow((-939.5));
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex4.INF.add(0.0);
      complex0.ONE.hashCode();
      complex0.readResolve();
      Complex complex6 = complex4.negate();
      List<Complex> list0 = complex1.I.nthRoot(1);
      assertEquals(1, list0.size());
      
      Complex complex7 = complex5.sinh();
      Complex complex8 = Complex.valueOf((-939.5), Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex8.NaN.add((-939.5));
      complex3.negate();
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex6.ONE.subtract(0.0);
      String string0 = complex12.toString();
      assertEquals("(1.0, 0.0)", string0);
      assertTrue(complex12.equals((Object)complex13));
      
      Complex complex14 = complex2.subtract(complex5);
      Complex complex15 = complex14.NaN.sqrt();
      assertSame(complex14, complex10);
      
      complex6.getImaginary();
      complex11.log();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex16 = complex2.cosh();
      Complex complex17 = Complex.valueOf(Double.NaN, (-871.2444032624184));
      assertSame(complex17, complex15);
      
      complex7.getField();
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      
      double double0 = complex8.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex18 = complex16.atan();
      Object object0 = new Object();
      complex18.equals(object0);
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertSame(complex2, complex6);
      
      Complex complex19 = complex1.divide(complex8);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertSame(complex19, complex9);
  }
}
