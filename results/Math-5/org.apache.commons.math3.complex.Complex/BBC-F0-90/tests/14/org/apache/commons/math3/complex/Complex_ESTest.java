/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:49:06 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2747.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex1.sqrt1z();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = complex0.log();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(7.710512446969693E192, 3015.362350555203);
      Complex.valueOf(7.710512446969693E192);
      Complex complex1 = complex0.acos();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.acos();
      complex0.NaN.getField();
      complex0.multiply(4.691921416188566E137);
      complex0.I.subtract(4.691921416188566E137);
      Complex complex1 = Complex.valueOf(4.691921416188566E137);
      Complex complex2 = complex1.acos();
      complex1.sinh();
      complex2.createComplex(5139.7, 5139.7);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(1918.612482583, 2.489012E7);
      Complex complex1 = complex0.reciprocal();
      complex1.nthRoot(3106);
      Complex complex2 = complex1.acos();
      complex0.add(complex2);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.add(complex3);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = new Complex(0.7615941559557649);
      Complex complex3 = complex2.atan();
      complex3.tanh();
      complex1.tanh();
      complex0.tan();
      complex3.multiply(0.7615941559557649);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex(0.7615941559557649);
      Complex complex3 = complex2.atan();
      complex3.tanh();
      complex1.tanh();
      complex0.tan();
      complex3.multiply(0.7615941559557649);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(684.3837, Double.POSITIVE_INFINITY);
      complex1.INF.getField();
      complex1.multiply(170);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-2.7648210023059463E-26));
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(4.90334700062756E236);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = Complex.I;
      complex4.atan();
      complex3.tanh();
      complex2.nthRoot(3859);
      complex0.atan();
      Complex complex5 = Complex.valueOf(4.90334700062756E236);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(946);
      Complex complex1 = complex0.createComplex(946, 0.0);
      Complex complex2 = complex1.multiply(0.0);
      complex1.getImaginary();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex0.tanh();
      complex2.hashCode();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.subtract(complex0);
      Complex complex7 = complex1.sin();
      complex5.hashCode();
      complex4.cos();
      Complex complex8 = new Complex(1.0014684291767073);
      Complex complex9 = complex8.multiply((-133.09));
      Complex.valueOf(1.0014684291767073, 0.0);
      Complex complex10 = complex3.subtract(0.0);
      complex2.negate();
      complex9.subtract(complex6);
      Complex complex11 = complex5.tanh();
      complex8.sqrt1z();
      Complex complex12 = Complex.ZERO;
      complex12.multiply(complex10);
      complex11.getArgument();
      complex7.divide(Double.POSITIVE_INFINITY);
      try { 
        complex4.nthRoot((-399));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -399
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.I.subtract(Double.NaN);
      Complex complex1 = new Complex(6.283185307179586, 6.283185307179586);
      complex1.ZERO.add(complex0);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(684.3837, Double.POSITIVE_INFINITY);
      Complex.valueOf(4.542536646012133E-276);
      complex1.multiply(374.788);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2108.0802929878973), (-2108.0802929878973));
      Complex complex2 = complex1.multiply(3576);
      Complex complex3 = new Complex((-2108.0802929878973));
      Complex complex4 = complex3.cosh();
      complex1.sinh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex2.pow((-2108.0802929878973));
      Complex complex8 = complex2.reciprocal();
      complex8.INF.getArgument();
      complex4.tanh();
      complex7.asin();
      complex7.nthRoot(3576);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2265.0));
      complex1.I.negate();
      complex1.add((-2265.0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2403.830447));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.log();
      complex0.getField();
      complex1.multiply(complex0);
      Complex complex3 = complex2.INF.pow((-545.2088010891603));
      Complex complex4 = complex3.sqrt1z();
      complex4.NaN.cosh();
      complex4.INF.subtract(1463.336934);
      Complex complex5 = complex3.ONE.pow((-3488.8362));
      complex2.sqrt();
      Complex complex6 = complex3.divide(complex2);
      complex6.NaN.divide(complex3);
      complex3.multiply(0);
      complex1.exp();
      complex3.createComplex((-545.2088010891603), 0);
      complex6.reciprocal();
      complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-907.46), Double.NaN);
      Complex complex1 = complex0.divide((-907.46));
      complex1.conjugate();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1918.612482583, 2.489012E7);
      Complex complex1 = Complex.valueOf(6.283185307179586, 1056.782285);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.valueOf((-1233.825684660679));
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.tan();
      complex4.log();
      complex1.reciprocal();
      complex3.subtract(2.489012E7);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cosh();
      complex0.ZERO.abs();
      complex1.NaN.atan();
      Complex complex3 = complex2.add(complex0);
      complex3.ONE.readResolve();
      Complex complex4 = complex0.INF.asin();
      complex4.ZERO.exp();
      complex4.INF.divide(complex2);
      complex2.I.toString();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex1.acos();
      complex6.ONE.add(complex7);
      Complex complex8 = complex0.subtract((-0.7200218552696186));
      complex7.ONE.toString();
      complex8.ONE.cos();
      complex7.divide((-0.7200218552696186));
      complex5.ZERO.cos();
      Complex complex9 = complex6.cos();
      complex5.NaN.negate();
      complex9.NaN.cos();
      try { 
        complex9.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.I.multiply(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      complex3.multiply((-2777.6918));
      Complex.valueOf((-2777.6918));
      Complex complex4 = new Complex((-2777.6918), Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.hashCode();
      complex1.tan();
      Complex complex2 = Complex.INF;
      complex2.NaN.getArgument();
      Complex complex3 = complex2.asin();
      complex3.sin();
      complex3.log();
      complex1.reciprocal();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      complex0.I.log();
      complex0.equals((Object) null);
      Complex complex1 = Complex.ZERO;
      complex0.I.add(complex1);
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      complex2.NaN.sqrt1z();
      complex2.sinh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ZERO.exp();
      complex4.getArgument();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = Complex.I;
      complex3.INF.sqrt();
      complex5.NaN.multiply(complex6);
      complex3.ONE.sqrt1z();
      Complex complex7 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex7.cos();
      complex7.ONE.tan();
      complex1.INF.cosh();
      Complex complex8 = new Complex(1770.118040997, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      Complex complex1 = complex0.I.log();
      complex0.equals((Object) null);
      Complex complex2 = Complex.ZERO;
      complex0.I.add(complex2);
      Complex complex3 = complex2.I.sinh();
      complex3.NaN.sqrt1z();
      complex3.I.sinh();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.ZERO.exp();
      complex5.getArgument();
      Complex complex6 = complex5.I.tan();
      Complex complex7 = Complex.I;
      complex6.NaN.multiply(complex7);
      Complex complex8 = complex4.ONE.sqrt1z();
      Complex complex9 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex9.ONE.tan();
      Complex complex10 = Complex.INF;
      complex7.asin();
      complex3.add(complex6);
      complex8.reciprocal();
      complex1.readResolve();
      complex7.equals(complex1);
      Complex complex11 = complex6.createComplex(2.2689924240112305, (-8.925958555729115E-9));
      Complex.valueOf(800.0);
      complex11.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      complex1.equals(complex0);
      Complex complex2 = Complex.ZERO;
      complex0.add(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.sinh();
      complex4.pow(complex0);
      Complex complex6 = Complex.NaN;
      complex6.exp();
      complex1.getArgument();
      double double0 = (-1064.3076);
      Complex complex7 = Complex.valueOf((-1064.3076));
      complex7.tan();
      Complex complex8 = Complex.I;
      try { 
        complex5.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.exp();
      complex1.getArgument();
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.multiply(complex4);
      complex2.sqrt1z();
      Complex complex7 = Complex.valueOf((-2464.6388656), 2.6888010385137123E39);
      Complex complex8 = Complex.ZERO;
      complex8.tan();
      complex7.cosh();
      Complex complex9 = Complex.valueOf((-2464.6388656));
      complex6.nthRoot(3125);
      Complex complex10 = complex4.multiply(2.6888010385137123E39);
      complex9.tan();
      complex5.divide((-2511.81029877));
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.cos();
      Complex complex12 = new Complex(2940.96431, 1148);
      complex12.sin();
      complex2.isInfinite();
      Complex complex13 = Complex.valueOf((-840.972061379));
      complex13.sqrt();
      complex13.sqrt();
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2275.148);
      Complex complex1 = new Complex(6.283185307179586, 2275.148);
      complex1.I.sinh();
      complex0.divide(complex1);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(940.767283294, (-3.096539751496479E-140));
      complex0.ONE.subtract(2202.7135541606);
      Complex complex1 = complex0.exp();
      complex0.ZERO.sin();
      Complex complex2 = complex1.sinh();
      complex2.I.pow(complex0);
      try { 
        complex1.nthRoot((-1844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,844
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.cos();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.reciprocal();
      complex2.NaN.negate();
      complex0.divide(complex1);
      complex2.createComplex((-844.3466708512), (-5351.255070815282));
      complex0.add((-2558.19));
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = Complex.I;
      complex2.divide(complex0);
      complex0.multiply(2.0);
      Complex complex3 = new Complex(1.0, (-1278.2675234740564));
      complex1.isInfinite();
      Complex complex4 = new Complex(Double.NaN, (-1278.2675234740564));
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      complex0.I.log();
      complex0.equals((Object) null);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex1.I.sinh();
      complex3.NaN.sqrt1z();
      complex3.I.sinh();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ZERO.exp();
      complex5.getArgument();
      Complex complex6 = complex5.I.tan();
      Complex complex7 = Complex.I;
      complex6.NaN.multiply(complex7);
      Complex complex8 = complex4.ONE.sqrt1z();
      Complex complex9 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex9.ONE.tan();
      complex1.INF.cosh();
      Complex complex10 = Complex.valueOf(1.0);
      complex10.INF.nthRoot(1148);
      complex10.INF.multiply(1.0);
      Complex complex11 = complex8.tan();
      Complex complex12 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.I.cos();
      Complex complex13 = complex11.sin();
      complex2.isInfinite();
      Complex complex14 = complex13.sqrt();
      complex12.sqrt();
      complex14.getField();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(822.340582998);
      complex1.tanh();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(822.340582998, (-3697.157056));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.negate();
      complex0.sin();
      complex1.nthRoot(711);
      Complex complex5 = Complex.valueOf(20.0);
      complex1.multiply((-1893));
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.pow(complex1);
      Complex complex8 = Complex.ZERO;
      complex2.asin();
      complex4.hashCode();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex6.add(complex9);
      complex7.reciprocal();
      complex0.readResolve();
      Object object0 = complex6.readResolve();
      complex10.equals(object0);
      Complex complex11 = Complex.ONE;
      complex11.createComplex(20.0, 711);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(3494, 20.0);
      Complex complex1 = complex0.conjugate();
      complex1.tan();
      Complex complex2 = Complex.INF;
      complex2.nthRoot(3494);
      complex2.readResolve();
      Complex complex3 = Complex.valueOf(285.20556400644, 2248.0);
      Complex complex4 = Complex.valueOf((-5.301386276260592E-111));
      complex3.pow(complex4);
      Complex.valueOf(2248.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.log();
      complex2.multiply((-0.5875298504289653));
      complex2.readResolve();
      complex1.conjugate();
      complex0.readResolve();
      complex3.equals((Object) null);
      Complex complex4 = complex2.createComplex(1.18970675910281E-13, 180.49242888211);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-840.972061379));
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ZERO;
      complex0.pow(Double.POSITIVE_INFINITY);
      complex2.pow((-567.0902587043083));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.nthRoot(2404);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.tanh();
      complex2.INF.conjugate();
      complex1.add(Double.NaN);
      Complex.valueOf((-656.5493005254));
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.tan();
      complex3.cos();
      complex4.ONE.atan();
      Complex complex6 = Complex.valueOf((double) 2404, (-1008.062929589));
      complex6.divide((-1008.062929589));
      Complex complex7 = complex5.add((-1409.32608));
      Complex complex8 = complex7.I.sinh();
      complex3.negate();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex4.add((-1409.32608));
      complex6.divide(1602.21940040348);
      complex10.createComplex((-1409.32608), (-9.007199254740992E15));
      complex8.toString();
      complex9.divide(3998.48);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.tanh();
      complex0.hashCode();
      complex2.tan();
      complex2.NaN.negate();
      Complex complex4 = complex3.ONE.sin();
      complex4.nthRoot(1);
      Complex complex5 = Complex.valueOf((double) 1);
      Complex complex6 = complex5.multiply(1);
      Complex complex7 = Complex.I;
      Complex complex8 = complex0.pow(complex7);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex4.asin();
      complex6.ZERO.hashCode();
      complex4.add(complex1);
      Complex complex11 = complex8.reciprocal();
      complex10.readResolve();
      complex11.equals(complex6);
      Complex complex12 = complex4.createComplex((-956.2165782595802), (-956.2165782595802));
      Complex.valueOf((double) 1);
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-840.972061379));
      Complex complex1 = complex0.multiply(4989);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.ZERO.cosh();
      complex0.nthRoot(4989);
      Complex.valueOf((-840.972061379));
      Complex complex4 = complex1.multiply(852);
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = Complex.ZERO;
      complex4.asin();
      complex5.hashCode();
      complex4.add(complex6);
      Complex complex8 = Complex.INF;
      complex3.readResolve();
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      complex7.createComplex(4989, (-956.2165782595802));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.cos();
      complex0.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.multiply(3968);
      Complex complex5 = Complex.I;
      complex2.pow(complex4);
      Complex complex6 = Complex.ZERO;
      complex1.asin();
      complex1.hashCode();
      Complex complex7 = new Complex(3968, (-204.714));
      complex1.add(complex7);
      complex7.reciprocal();
      complex2.readResolve();
      complex3.equals("/");
      complex1.createComplex((-956.2165782595802), 0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-840.972061379), (double) 4989);
      complex0.multiply(4989);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-840.972061379));
      Complex complex1 = complex0.add((double) 4989);
      Complex complex2 = Complex.valueOf((double) 4989, 0.31560879945755005);
      complex1.pow(complex2);
      Complex.valueOf(8.141871494748862);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(207.476606299169);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow((-1461.4711));
      Complex complex3 = complex2.divide(3307.68457192271);
      Complex complex4 = complex3.ZERO.asin();
      complex4.cos();
      Complex complex5 = complex2.multiply(complex1);
      complex5.NaN.sqrt1z();
      complex1.log();
      complex5.add(0.5403023058681398);
      Complex complex6 = complex2.atan();
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(27.17, (-3435.2336334));
      Complex complex1 = complex0.ZERO.tan();
      complex1.abs();
      Complex complex2 = Complex.valueOf(0.058823529411764705);
      complex2.I.getArgument();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.conjugate();
      complex3.ONE.toString();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.log();
      complex6.ZERO.getField();
      complex3.acos();
      complex6.add(complex5);
      Complex complex7 = complex6.pow(complex3);
      Complex complex8 = complex2.createComplex((-1689257.216419704), 0.058823529411764705);
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex4.sin();
      complex10.INF.pow(complex2);
      complex10.ONE.multiply(728);
      complex7.readResolve();
      Complex complex11 = complex9.pow(complex1);
      Complex complex12 = complex10.sin();
      complex12.I.divide(complex3);
      complex11.abs();
      complex7.conjugate();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-207.476606299169));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.divide(complex2);
      complex5.cos();
      complex5.ONE.cosh();
      Complex complex6 = complex2.NaN.log();
      complex2.ONE.sinh();
      complex3.getArgument();
      Complex complex7 = complex2.subtract(complex1);
      Complex complex8 = complex3.ONE.sqrt1z();
      complex8.I.sqrt();
      Complex complex9 = complex8.add((-207.476606299169));
      complex9.I.multiply(Double.NaN);
      complex7.I.cosh();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex10.ZERO.tan();
      complex3.acos();
      complex3.toString();
      complex11.NaN.log();
      Complex complex12 = Complex.INF;
      complex11.multiply(complex12);
      complex1.toString();
      complex4.sin();
      complex6.abs();
      complex12.nthRoot(2147483512);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-87.65875663388984));
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.multiply((-87.65875663388984));
      double double0 = 2.398038505188316E-163;
      complex0.ZERO.cos();
      Complex complex2 = complex1.ONE.asin();
      complex1.ZERO.createComplex(0.0, 0.0);
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-840.972061379));
      complex0.INF.add((-840.972061379));
      Complex complex1 = Complex.valueOf((-840.972061379), (double) 4989);
      Complex complex2 = complex1.NaN.cosh();
      complex2.ZERO.cosh();
      Complex complex3 = Complex.valueOf((-840.972061379));
      Complex complex4 = complex1.asin();
      complex4.ZERO.add(complex0);
      complex4.cos();
      Complex complex5 = new Complex(4989);
      complex5.sqrt();
      complex3.createComplex((-840.972061379), (-840.972061379));
      complex3.sqrt();
      complex1.sqrt();
      Complex complex6 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(50.027143566326345);
      Complex complex2 = complex1.createComplex(50.027143566326345, 4.9780242E7);
      Complex complex3 = complex1.atan();
      complex3.I.toString();
      complex2.hashCode();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      complex0.cosh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex3.log();
      complex5.cosh();
      complex3.sqrt1z();
      Complex complex6 = Complex.ONE;
      complex6.divide(complex5);
      complex4.createComplex(2.0, 20.0);
      Complex complex7 = complex2.sin();
      complex5.sqrt1z();
      complex2.getField();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.sqrt1z();
      complex2.divide(complex2);
      complex3.createComplex(20.0, 2813.9605871462);
      complex5.sin();
      complex4.sqrt1z();
      complex2.getField();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.sqrt1z();
      complex0.cos();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.subtract(complex1);
      complex2.ZERO.divide(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(0.0);
      complex3.divide(complex2);
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = Complex.ONE;
      complex1.add(complex5);
      complex3.reciprocal();
      complex2.readResolve();
      complex0.equals(complex4);
      complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = (-87.65875663388984);
      Complex complex0 = new Complex(0.0, (-87.65875663388984));
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.multiply((-87.65875663388984));
      complex1.getArgument();
      complex1.conjugate();
      Complex complex2 = Complex.NaN;
      try { 
        complex0.nthRoot((-1622));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,622
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      int int0 = 834914536;
      // Undeclared exception!
      complex1.nthRoot(834914536);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.NaN;
      complex0.cos();
      Complex complex3 = Complex.INF;
      complex3.acos();
      complex2.reciprocal();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1147.3707553), (-1748.853284454974));
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.ONE.tanh();
      complex2.ZERO.cos();
      Complex complex3 = complex1.NaN.multiply((-5443));
      complex3.I.toString();
      Complex complex4 = Complex.valueOf((-1147.3707553));
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.multiply(complex4);
      complex2.NaN.pow(complex6);
      Complex complex7 = Complex.valueOf(183.1115342578, 6.329113924050633E-4);
      complex4.NaN.tan();
      Complex complex8 = complex1.NaN.pow(complex7);
      Complex complex9 = complex6.NaN.asin();
      complex1.ZERO.abs();
      Complex complex10 = complex5.acos();
      complex10.ONE.readResolve();
      Complex complex11 = complex6.ZERO.pow(complex2);
      complex11.ZERO.sin();
      Complex complex12 = complex0.multiply(1.618327917706804E96);
      complex12.isInfinite();
      Complex complex13 = complex6.sin();
      complex13.toString();
      complex5.createComplex(266.54273314, (-1.3282890219894906E230));
      complex13.toString();
      complex5.sin();
      complex7.divide(complex9);
      complex4.cosh();
      complex8.createComplex(4629.496151993772, 6.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(0.0);
      complex2.divide(complex1);
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = Complex.valueOf(0.0, 2243.833378);
      complex4.multiply(complex0);
      complex2.createComplex(0.0, 0.0);
      complex3.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.divide((-0.5875298504289653));
      complex3.createComplex(0.0, (-0.5875298504289653));
      Complex complex4 = complex0.atan();
      complex4.INF.sqrt();
      complex4.hashCode();
      Complex.valueOf((-0.5875298504289653), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.tanh();
      complex0.hashCode();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.ONE.conjugate();
      complex5.NaN.negate();
      Complex complex6 = complex3.ONE.sin();
      complex6.nthRoot(1);
      Complex complex7 = Complex.valueOf((double) 1);
      Complex complex8 = complex7.multiply(1);
      Complex complex9 = Complex.I;
      Complex complex10 = complex0.pow(complex9);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex6.asin();
      complex8.ZERO.hashCode();
      complex6.add(complex1);
      Complex complex13 = complex10.reciprocal();
      complex12.readResolve();
      complex13.equals(complex8);
      complex6.createComplex((-956.2165782595802), (-956.2165782595802));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.sqrt1z();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(0.0);
      complex2.divide(complex1);
      complex0.multiply(0.0);
      complex0.isInfinite();
      complex0.multiply((-936));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2314.748184));
      Complex complex1 = Complex.valueOf((-2314.748184));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.tanh();
      complex2.hashCode();
      complex3.tan();
      complex2.conjugate();
      Complex complex4 = complex2.sin();
      complex3.nthRoot(1024);
      complex4.multiply((-1941));
      complex1.pow(complex0);
      Complex complex5 = Complex.ZERO;
      complex5.asin();
      Complex complex6 = complex3.add(complex4);
      complex4.reciprocal();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((-1298.511263));
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex2.multiply(17);
      complex4.negate();
      Complex complex5 = complex1.multiply((-1298.511263));
      complex3.getField();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.acos();
      complex7.I.sqrt();
      Complex.valueOf((double) 17);
      complex5.asin();
      complex7.tanh();
      complex6.exp();
      Complex complex8 = Complex.INF;
      complex8.multiply(complex3);
      complex7.sinh();
      Complex complex9 = new Complex((-1118.07), (-4.02082180625013E7));
      complex9.subtract(0.0);
      complex4.add((-1118.07));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-87.65875663388984));
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.multiply((-87.65875663388984));
      Complex complex2 = Complex.valueOf(2.398038505188316E-163);
      complex2.ZERO.cos();
      Complex complex3 = complex1.ONE.asin();
      complex3.I.sqrt();
      complex1.ZERO.createComplex(0.0, 0.0);
      complex0.sqrt();
      complex1.sqrt();
      complex3.cos();
      complex2.readResolve();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3102.612634));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.reciprocal();
      complex2.I.readResolve();
      complex1.pow((-3102.612634));
      Complex complex3 = complex1.multiply(1435);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.asin();
      complex5.ZERO.log();
      complex2.getField();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.31560879945755005);
      complex1.NaN.cos();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex2.multiply(2038.74855);
      complex0.hashCode();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.I.pow(complex0);
      complex5.INF.asin();
      complex0.hashCode();
      Complex complex6 = complex4.INF.sin();
      Complex complex7 = complex4.multiply(complex0);
      complex7.INF.abs();
      Complex complex8 = complex1.createComplex(Double.POSITIVE_INFINITY, (-5803.345309438649));
      complex8.INF.hashCode();
      complex7.createComplex(184.0, 2.0);
      complex0.readResolve();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex7.multiply(complex2);
      Complex complex11 = complex10.conjugate();
      complex9.I.cosh();
      complex3.readResolve();
      Complex complex12 = complex9.sin();
      Complex complex13 = complex6.sqrt1z();
      complex12.cosh();
      complex2.acos();
      complex13.divide(Double.POSITIVE_INFINITY);
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.tanh();
      complex0.hashCode();
      Complex complex4 = complex2.tan();
      complex4.ONE.conjugate();
      Complex complex5 = complex3.ONE.sin();
      complex5.ZERO.nthRoot(1);
      Complex complex6 = complex0.multiply(1);
      complex3.pow(complex6);
      Complex complex7 = Complex.ZERO;
      complex6.NaN.asin();
      complex2.add(complex7);
      complex6.reciprocal();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.ONE.multiply(3827.0318);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex.valueOf((-2747.55869506));
      complex4.I.sqrt();
      Complex complex5 = complex4.acos();
      complex5.I.negate();
      complex5.NaN.subtract(complex1);
      complex3.sinh();
      Complex complex6 = complex1.subtract(complex0);
      complex6.I.abs();
      complex3.abs();
      complex3.divide(complex2);
      complex5.asin();
      complex3.exp();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.3548568223001414E-8), (-1.3548568223001414E-8));
      Complex complex1 = complex0.NaN.createComplex(3002.211825537513, 3002.211825537513);
      Complex complex2 = complex1.ZERO.conjugate();
      complex0.abs();
      complex2.INF.subtract(complex1);
      Complex complex3 = complex2.NaN.add((-1.0));
      complex3.NaN.add(complex2);
      Complex complex4 = complex0.reciprocal();
      complex0.readResolve();
      complex4.pow((-1.3548568223001414E-8));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-2140.62), 0.0);
      complex0.NaN.pow(complex1);
      complex0.getField();
      Complex complex2 = Complex.valueOf(4705.0);
      complex2.NaN.toString();
      complex1.ONE.createComplex(1.681239366531372, 4705.0);
      complex2.ZERO.negate();
      Complex complex3 = complex0.divide(682.5602871);
      Complex complex4 = complex3.INF.multiply(1493);
      complex4.multiply(complex2);
      complex4.I.hashCode();
      Complex complex5 = complex3.ZERO.cosh();
      complex0.getReal();
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex6.exp();
      complex7.NaN.tanh();
      Complex complex8 = complex3.add(complex5);
      complex8.ONE.sqrt();
      complex0.readResolve();
      complex1.isInfinite();
      complex8.tanh();
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-543.66571448345));
      complex0.isNaN();
      Complex complex1 = Complex.valueOf((-543.66571448345), (-543.66571448345));
      Complex complex2 = complex1.INF.pow(complex0);
      complex0.isNaN();
      Complex complex3 = Complex.valueOf(7.165331603232264E-8, 2157.123695);
      complex3.I.sqrt();
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      Complex.valueOf(2157.123695, (-543.66571448345));
      Complex.valueOf(551.6106769504514, 7.165331603232264E-8);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2917.282491174471), (-2917.282491174471));
      complex0.hashCode();
      Complex complex1 = complex0.sin();
      complex1.ZERO.tanh();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex2.pow((-2917.282491174471));
      complex2.ONE.acos();
      Complex complex5 = Complex.valueOf(1871.196);
      complex0.toString();
      complex2.getField();
      complex2.INF.abs();
      complex0.getImaginary();
      complex4.log();
      Complex.valueOf((-1577.295));
      Complex complex6 = complex4.tanh();
      complex5.abs();
      complex6.multiply(complex2);
      complex2.ZERO.toString();
      complex0.ONE.reciprocal();
      complex1.createComplex((-2917.282491174471), (-2.1058207594753368E-8));
      complex3.readResolve();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-2318.324934048355), 2199.0634762363275);
      Complex complex1 = Complex.ONE;
      complex0.add(complex1);
      complex0.ZERO.sqrt();
      complex0.toString();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.multiply(2438);
      Complex complex4 = complex2.ZERO.reciprocal();
      complex3.toString();
      Complex complex5 = complex3.ONE.pow(complex1);
      complex5.ZERO.getArgument();
      Complex complex6 = complex0.pow(0.0);
      complex1.pow(complex2);
      Complex complex7 = complex6.atan();
      complex7.ONE.hashCode();
      Complex complex8 = complex1.cos();
      Complex complex9 = Complex.valueOf((-712.500084));
      complex8.ONE.multiply(complex9);
      Complex complex10 = complex6.acos();
      complex10.multiply(2438);
      complex8.I.createComplex(3059.6075462259496, 3059.6075462259496);
      Complex complex11 = complex6.tan();
      complex0.cosh();
      complex10.exp();
      complex8.nthRoot(2438);
      complex4.divide(0.0);
      complex0.atan();
      complex11.add((-712.500084));
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.acos();
      complex1.INF.tanh();
      Complex complex3 = complex2.add(complex1);
      complex1.readResolve();
      Complex complex4 = complex0.cosh();
      complex4.ZERO.sin();
      Complex complex5 = complex1.negate();
      complex5.INF.tanh();
      complex0.cosh();
      complex4.ZERO.log();
      Complex complex6 = complex4.createComplex(0.0, 0.0);
      complex4.toString();
      complex1.ONE.divide(complex3);
      complex1.getImaginary();
      Complex complex7 = complex0.multiply(0);
      complex7.toString();
      Complex.valueOf(Double.NaN, (double) 0);
      complex6.getReal();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.cos();
      Complex complex1 = new Complex(1.9848570823669434, 1619.3198124365);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex4.NaN.negate();
      complex2.readResolve();
      Complex complex7 = complex1.atan();
      complex7.INF.sin();
      complex1.NaN.subtract(complex4);
      complex4.ONE.abs();
      complex0.getImaginary();
      complex3.NaN.pow(1336.45023);
      complex1.NaN.sqrt1z();
      Complex complex8 = Complex.ZERO;
      complex5.subtract(complex8);
      complex7.multiply(0);
      complex0.NaN.add(0.0);
      complex4.isNaN();
      Complex complex9 = complex6.cosh();
      complex9.ZERO.sinh();
      Complex complex10 = complex9.ONE.divide(complex3);
      Complex complex11 = complex10.NaN.add(complex4);
      complex3.tan();
      complex7.acos();
      complex9.tan();
      complex5.add(complex9);
      complex10.isNaN();
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.hashCode();
      Complex complex1 = complex0.conjugate();
      complex1.I.tan();
      complex0.nthRoot(3494);
      complex0.readResolve();
      Complex complex2 = Complex.ZERO;
      Complex.valueOf(1390.491, 2899.5456095175);
      Complex complex3 = complex2.add(complex0);
      complex3.I.getField();
      complex0.pow(complex2);
      complex3.multiply(complex0);
      complex2.createComplex(3494, 3494);
      complex0.divide(3520.13874513);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-2913.6013175));
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.I.subtract((-2913.6013175));
      complex0.add(0.0);
      complex0.subtract((-2913.6013175));
      Complex complex2 = complex0.I.tanh();
      complex0.createComplex(0.0, 1168.732);
      complex1.getImaginary();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.I.cosh();
      Complex.valueOf((-6.038239639506472E-32));
      complex3.NaN.divide(3083.1703981);
      complex0.isNaN();
      complex1.sinh();
      Complex complex4 = complex0.createComplex((-20.0), (-20.0));
      complex3.isInfinite();
      complex1.getImaginary();
      Complex complex5 = complex2.multiply(3083.1703981);
      complex4.tanh();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(2617.56);
      complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.add(2617.56);
      Complex complex3 = complex0.cosh();
      complex3.INF.sin();
      Complex complex4 = complex0.multiply(37);
      Complex complex5 = complex4.NaN.multiply(complex1);
      complex4.ONE.sqrt1z();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex0.pow(complex6);
      complex7.NaN.sqrt();
      complex0.NaN.multiply(0);
      Complex complex8 = complex1.add(complex3);
      complex8.NaN.getArgument();
      complex1.I.pow(2617.56);
      Complex complex9 = complex6.atan();
      complex9.createComplex(37, 2617.56);
      try { 
        complex5.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(488.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.add(complex0);
      complex1.I.divide(488.0);
      Complex complex3 = complex1.ZERO.reciprocal();
      complex2.NaN.divide((-1237.35887094));
      complex2.I.sqrt();
      Complex complex4 = Complex.valueOf(488.0, 488.0);
      complex4.I.hashCode();
      Complex complex5 = complex0.NaN.divide(1.799550702470095E-8);
      complex5.ONE.reciprocal();
      complex0.ZERO.hashCode();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex4.conjugate();
      complex6.ZERO.readResolve();
      Complex complex9 = complex6.cos();
      complex9.abs();
      complex9.getArgument();
      complex6.I.readResolve();
      Complex complex10 = complex9.multiply(1378.5595519208384);
      Complex complex11 = complex5.acos();
      Complex complex12 = complex4.asin();
      complex12.pow(complex4);
      complex6.I.multiply(complex7);
      Complex complex13 = complex9.pow(2.4059133529663086);
      complex13.ZERO.abs();
      Complex complex14 = complex10.asin();
      complex14.pow(488.0);
      complex11.multiply(1378.5595519208384);
      complex7.multiply(complex3);
      complex8.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2314.748184));
      Complex complex1 = complex0.I.cos();
      complex1.INF.subtract(956.0);
      complex1.cosh();
      complex0.ZERO.abs();
      Complex complex2 = complex0.sin();
      complex2.ONE.readResolve();
      complex0.toString();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.tanh();
      complex4.NaN.exp();
      complex2.multiply(complex0);
      complex4.sinh();
      complex2.subtract(0.0);
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ZERO.subtract(complex2);
      complex0.I.exp();
      complex3.ONE.hashCode();
      Complex complex4 = complex2.sin();
      complex4.hashCode();
      Complex complex5 = complex0.divide(1245.00359);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex6.multiply((-1149));
      Complex complex8 = complex7.subtract(1.0);
      complex8.INF.subtract((-2333.617));
      Complex complex9 = complex5.add(complex0);
      complex5.cosh();
      Complex complex10 = complex9.add(1.0);
      complex10.equals(complex0);
      Complex.valueOf(408.7572927486);
      complex0.add(complex3);
      Complex complex11 = new Complex((-4.2365298585101096E-8), 408.7572927486);
      complex5.divide(complex11);
      complex7.log();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.NaN.createComplex(1695.201513361, 1695.201513361);
      Complex complex5 = complex4.NaN.subtract(complex0);
      Complex complex6 = complex5.INF.cos();
      complex6.ONE.exp();
      Complex.valueOf((-4177.9123));
      complex3.INF.reciprocal();
      Complex complex7 = complex0.ZERO.divide(complex3);
      Complex complex8 = complex7.ONE.multiply(complex6);
      complex0.getImaginary();
      complex0.sqrt1z();
      complex0.isNaN();
      complex5.INF.log();
      Complex complex9 = complex2.tanh();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex0.subtract(complex9);
      complex11.I.createComplex(0.0, (-1.8791776732592608E-7));
      complex4.cos();
      complex1.getImaginary();
      complex3.getImaginary();
      complex10.add(complex8);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cos();
      Complex complex1 = complex0.NaN.cosh();
      complex1.ZERO.pow(20.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      complex0.toString();
      complex0.exp();
      complex3.subtract(20.0);
      Complex.valueOf(0.0);
      complex0.getField();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(3994.9800558833176, (-760.0));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex0.I.divide(complex2);
      complex4.I.readResolve();
      complex0.exp();
      complex0.INF.exp();
      Complex.valueOf((-2722.7057446385), (-822.6));
      Complex complex5 = complex2.negate();
      complex2.equals(complex3);
      complex5.cos();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(1988.611149595);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.INF.multiply(311.69510275);
      complex2.ZERO.abs();
      complex2.NaN.reciprocal();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.I.divide(complex4);
      complex6.INF.toString();
      Complex complex7 = complex5.ONE.sqrt();
      complex1.isInfinite();
      complex5.asin();
      complex7.ZERO.add(311.69510275);
      Complex complex8 = complex0.multiply(0.0);
      Complex complex9 = complex8.I.asin();
      complex7.tanh();
      complex1.isInfinite();
      Complex complex10 = complex9.sqrt();
      complex10.I.add(complex0);
      complex9.multiply((-1249));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.add(49.937281873);
      Complex complex2 = complex1.NaN.tan();
      complex0.readResolve();
      Complex complex3 = complex0.log();
      complex3.getField();
      complex0.getArgument();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex5.ONE.pow(complex6);
      Complex complex8 = complex5.I.exp();
      Complex complex9 = complex3.sqrt();
      complex8.I.tanh();
      complex9.INF.createComplex(Double.NaN, (-2231.290931510972));
      complex7.ZERO.multiply(complex6);
      complex0.createComplex((-955.4008824622576), 0.0);
      complex1.sin();
      Complex complex10 = complex6.sin();
      Complex complex11 = complex7.divide(0.0);
      complex8.getArgument();
      complex7.ONE.pow(0.0);
      complex6.ZERO.atan();
      complex3.multiply(1);
      complex10.equals(complex11);
      complex9.tan();
      complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex1.abs();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.multiply(0.0);
      complex3.ONE.pow(0.0);
      complex1.readResolve();
      complex2.divide(0.0);
      complex1.toString();
      int int0 = 0;
      complex2.multiply(0);
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.INF.acos();
      Complex complex2 = Complex.ZERO;
      complex2.tanh();
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex0.INF.tan();
      complex4.INF.pow((-1291.5315259525812));
      Complex complex5 = complex0.multiply((-1097));
      Complex complex6 = complex0.pow((double) (-1097));
      complex0.add(complex6);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.I.cos();
      Complex complex9 = complex8.ZERO.cos();
      complex6.NaN.hashCode();
      Complex complex10 = complex5.acos();
      complex10.acos();
      Complex complex11 = complex3.subtract((double) (-1097));
      Complex complex12 = complex11.ZERO.divide(complex6);
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      complex12.sqrt1z();
      complex3.conjugate();
      Complex.valueOf(342.3706228, 0.0);
      complex13.add(complex12);
      Complex.valueOf((-603.62238994573), (double) (-1097));
      complex9.acos();
      complex11.asin();
      complex2.add(1151.7466481612935);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-1684.52011014));
      Complex complex1 = Complex.valueOf(1.1991832256317139, 1.1991832256317139);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.negate();
      complex0.ZERO.toString();
      complex3.ONE.hashCode();
      complex3.isNaN();
      complex3.createComplex((-1684.52011014), (-1684.52011014));
      complex0.readResolve();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.NaN.acos();
      complex5.cos();
      complex4.readResolve();
      complex4.isNaN();
      complex3.readResolve();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.createComplex((-4.350745270980051E-10), (-4.350745270980051E-10));
      Complex complex3 = complex2.INF.pow((-2742.43));
      complex3.ONE.log();
      complex0.pow(complex2);
      Complex complex4 = complex0.multiply(463.5414293);
      complex0.getArgument();
      complex2.I.readResolve();
      Complex complex5 = complex0.INF.tan();
      complex5.ONE.subtract(463.5414293);
      Complex complex6 = complex4.multiply(3576);
      Complex complex7 = complex6.I.multiply(3576);
      complex7.atan();
      Complex.valueOf((-3625.097836), (-544.963202));
      complex7.getArgument();
      complex0.createComplex(1.5707963267948966, (-2127.3917149528));
      complex1.add(complex2);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.521448560089285E190, 4.521448560089285E190);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.log();
      complex3.I.getField();
      complex3.INF.multiply(complex0);
      complex0.multiply(1);
      try { 
        complex3.nthRoot((-2677));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,677
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-316.12059561707));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.conjugate();
      complex0.INF.toString();
      complex0.getImaginary();
      Complex complex3 = complex1.cosh();
      complex3.readResolve();
      complex0.isNaN();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex3.ONE.sin();
      complex5.ZERO.tan();
      Complex complex6 = Complex.NaN;
      complex3.INF.createComplex((-316.12059561707), 0.0);
      complex2.multiply(complex6);
      complex3.ONE.getField();
      Complex complex7 = complex6.divide((-316.12059561707));
      complex6.negate();
      complex3.getReal();
      complex4.pow(177.46);
      Complex complex8 = complex6.add(complex7);
      complex8.ZERO.asin();
      complex4.add((-316.12059561707));
      complex6.pow(1.0733387687251168);
      complex0.nthRoot(3674);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.I.subtract(744.5728027758);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex3.ONE.add(744.5728027758);
      Complex complex5 = complex2.I.multiply(0.0);
      Complex complex6 = complex5.asin();
      complex2.ONE.add(744.5728027758);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex0.multiply(453.0466464993171);
      complex8.NaN.nthRoot(56);
      Complex complex9 = complex7.asin();
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex9.log();
      complex1.I.pow(453.0466464993171);
      Complex complex12 = complex2.multiply(complex11);
      Complex complex13 = complex10.ZERO.sin();
      Complex complex14 = complex13.ONE.atan();
      complex14.INF.nthRoot(56);
      Complex complex15 = complex12.INF.acos();
      complex15.INF.sqrt1z();
      Complex complex16 = complex12.createComplex(744.5728027758, 1.0708593250394448E-7);
      complex10.getField();
      complex15.exp();
      Complex complex17 = complex0.negate();
      complex17.add(complex16);
      complex10.multiply(0.0);
      complex6.isNaN();
      complex13.isInfinite();
      complex5.nthRoot(1);
      Complex.valueOf(0.0);
      complex4.multiply((-2853));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.ONE.asin();
      complex1.abs();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.I.multiply(complex2);
      complex6.ONE.cosh();
      complex1.reciprocal();
      Complex complex7 = Complex.ZERO;
      complex6.ONE.pow(complex7);
      Complex.valueOf(772.4628541);
      complex6.ZERO.sqrt();
      Complex complex8 = complex5.INF.exp();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex8.ZERO.multiply(37);
      Complex complex11 = complex0.asin();
      complex0.I.cos();
      Complex complex12 = complex10.ONE.tan();
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex10.asin();
      Complex complex15 = complex4.sinh();
      complex15.ZERO.sqrt();
      complex15.INF.add((-959.8455707085));
      complex9.NaN.pow(complex10);
      complex11.isNaN();
      complex6.sqrt();
      complex12.isNaN();
      complex12.subtract(772.4628541);
      complex14.divide(245.235996275995);
      complex14.multiply(complex8);
      complex9.multiply(complex13);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(2.343525263620692E-8, 2.343525263620692E-8);
      Complex complex1 = complex0.I.pow(2.343525263620692E-8);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.pow(complex0);
      complex0.ONE.nthRoot(946);
      complex3.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.NaN.multiply(2.343525263620692E-8);
      complex2.getImaginary();
      Complex complex5 = complex2.I.add(2360.2);
      complex1.ZERO.tanh();
      complex2.ONE.hashCode();
      Complex complex6 = complex4.I.sin();
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex4.sin();
      complex8.ONE.hashCode();
      Complex complex9 = complex7.cos();
      complex9.I.multiply((-133.09));
      Complex.valueOf((-1509.8932661289), Double.NaN);
      complex3.ONE.subtract((double) 946);
      Complex complex10 = complex6.negate();
      Complex complex11 = complex10.subtract(complex5);
      Complex complex12 = complex11.I.tanh();
      complex12.I.sqrt1z();
      Complex complex13 = complex1.multiply(complex4);
      complex0.getArgument();
      complex9.divide((-1227.3817135));
      try { 
        complex13.nthRoot((-2524));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,524
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.hashCode();
      complex0.NaN.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.multiply((-84));
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals((-84.0), complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.NaN.reciprocal();
      Complex complex4 = complex1.divide((-2721.942709442883));
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex5.ZERO.atan();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.ZERO.cosh();
      assertFalse(complex8.equals((Object)complex6));
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex3.multiply(complex7);
      assertSame(complex9, complex5);
      assertSame(complex3, complex4);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-7.635830383612894E-133));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals((-7.635830383612894E-133), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.INF.nthRoot(387);
      assertTrue(list0.contains(complex0));
      
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.NaN.multiply(1);
      complex2.INF.hashCode();
      Complex complex3 = Complex.valueOf(1.261950308999819E-90, (-1822.87864));
      complex3.I.getField();
      Complex complex4 = complex1.ZERO.tanh();
      complex0.equals(complex3);
      complex0.I.createComplex((-1822.87864), 2002.4);
      complex2.equals((Object) null);
      Complex complex5 = complex2.divide(complex0);
      complex0.atan();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.pow(complex4);
      assertFalse(complex4.equals((Object)complex1));
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex4.equals((Object)complex5));
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex8 = complex1.sqrt1z();
      assertEquals(0.6173312283870106, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((-1298.511263));
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.ZERO.tanh();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.multiply(17);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex1.multiply((-1298.511263));
      complex6.INF.getField();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.I.sqrt();
      assertEquals(0.7071067811865476, complex9.getReal(), 0.01);
      
      complex6.ONE.cos();
      Complex complex10 = complex6.reciprocal();
      complex10.I.createComplex(1284.1934194, 17);
      Complex complex11 = complex6.reciprocal();
      assertTrue(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex7));
      
      Complex complex12 = Complex.valueOf((-729.7373432048283));
      Complex complex13 = complex12.exp();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      Complex.valueOf(2956.754829830569);
      Complex complex14 = complex4.tan();
      assertFalse(complex4.equals((Object)complex5));
      assertEquals(3.493915645474841, complex14.getReal(), 0.01);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex13));
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.ONE.tanh();
      complex1.log();
      Complex complex4 = complex0.divide(963.86);
      Complex complex5 = complex3.createComplex(6.283185307179586, 963.86);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex3.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      
      Complex complex6 = complex2.atan();
      complex2.hashCode();
      assertSame(complex1, complex4);
      assertFalse(complex2.equals((Object)complex5));
      assertSame(complex2, complex6);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.divide(complex2);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = Complex.valueOf(0.0, 2243.833378);
      assertEquals(2243.833378, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex3.pow(complex1);
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex5));
      assertNotSame(complex0, complex4);
      assertTrue(complex7.isNaN());
      
      Complex complex8 = Complex.valueOf(1210.51296430434);
      assertFalse(complex8.equals((Object)complex7));
  }
}
