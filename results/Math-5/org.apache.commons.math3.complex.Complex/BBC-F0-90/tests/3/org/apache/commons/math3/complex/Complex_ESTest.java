/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:31:35 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.add(536.9929496211296);
      Complex complex2 = Complex.valueOf((-2042.1903595882375));
      Complex complex3 = complex0.NaN.multiply(complex2);
      complex1.ONE.getField();
      Complex complex4 = complex3.I.tanh();
      complex2.ZERO.cosh();
      complex2.I.nthRoot(548);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex2.I.sin();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex5.subtract((-2042.1903595882375));
      complex0.readResolve();
      complex1.INF.negate();
      Complex complex9 = complex8.multiply((-2042.1903595882375));
      Complex complex10 = complex9.I.conjugate();
      complex10.atan();
      complex2.I.divide(complex1);
      complex3.acos();
      complex9.NaN.multiply(0);
      Complex complex11 = complex2.acos();
      complex11.ZERO.negate();
      Complex complex12 = complex0.acos();
      complex4.readResolve();
      Complex complex13 = complex8.multiply(623);
      complex13.asin();
      complex4.negate();
      complex12.reciprocal();
      complex9.atan();
      complex3.cosh();
      complex7.readResolve();
      complex12.cos();
      Complex.valueOf(650.423);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.5990624232176244E7, 5.5990624232176244E7);
      Complex complex1 = complex0.I.add(5.5990624232176244E7);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex1.pow(complex0);
      complex4.INF.divide(complex1);
      complex2.abs();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex4.tan();
      complex5.abs();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex8.sin();
      complex9.ONE.sqrt1z();
      Complex complex10 = complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex4.multiply(Double.NaN);
      Complex complex13 = complex3.pow(complex2);
      Complex complex14 = complex0.createComplex(1476.3677729506, Double.POSITIVE_INFINITY);
      complex13.cos();
      Complex complex15 = complex14.exp();
      complex12.reciprocal();
      complex15.toString();
      complex0.abs();
      complex7.nthRoot(586);
      Complex complex16 = complex10.atan();
      complex13.nthRoot(586);
      complex16.cos();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(46.9526666, 20.0);
      Complex complex2 = new Complex(0.16191753099445805);
      Complex complex3 = complex1.tan();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.5990624232176244E7, 5.5990624232176244E7);
      Complex complex1 = Complex.ZERO;
      complex1.add((-3437.0));
      complex0.asin();
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2254.7419021916076, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(2254.7419021916076);
      complex1.multiply(310.15440284);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.createComplex((-101.15082529804087), 561.25847881773);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.multiply((-687.7290427));
      complex1.getArgument();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = new Complex((-1810.6511325414));
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.pow(complex5);
      Complex complex10 = Complex.valueOf((-1620.37042106), (-1.0));
      complex9.I.pow(complex10);
      complex6.subtract((-687.7290427));
      complex2.getImaginary();
      Complex complex11 = Complex.I;
      complex2.tan();
      Complex complex12 = complex4.acos();
      Complex.valueOf(3024.20437543, (-2127.05));
      complex12.ONE.getField();
      complex12.nthRoot(1397);
      Complex complex13 = Complex.ONE;
      complex13.ONE.tan();
      complex3.multiply(complex13);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.getArgument();
      complex1.log();
      complex1.tanh();
      Complex.valueOf((-20.0), 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1861.730005245513));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract((-1861.730005245513));
      complex1.getImaginary();
      complex2.log();
      Complex complex3 = complex2.tan();
      complex3.INF.getArgument();
      // Undeclared exception!
      complex3.nthRoot(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2246.4369310313914, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(2246.4369310313914);
      Complex complex3 = Complex.NaN;
      complex1.tan();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex0.createComplex(Double.POSITIVE_INFINITY, (-2003.469309700496));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2246.4369310313914, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex0.nthRoot(673);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2246.4369310313914, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(2246.4369310313914, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(complex0);
      complex2.nthRoot(641);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex0.multiply((-687.7290427));
      Complex complex2 = Complex.ONE;
      complex2.getArgument();
      complex1.tanh();
      Complex complex3 = new Complex((-5.642353243120268E243));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = new Complex((-618.358861034051));
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.valueOf(4624.3914606402, 0.5403023058681398);
      Complex complex8 = complex3.pow(complex7);
      Complex complex9 = complex8.subtract(0.5403023058681398);
      complex7.getImaginary();
      complex5.log();
      complex9.tan();
      complex4.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-25.115119028631746));
      Complex complex1 = Complex.valueOf((-25.115119028631746));
      Complex complex2 = new Complex((-25.115119028631746), (-25.115119028631746));
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex0.readResolve();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex1.multiply((-3690.5723894));
      complex3.getArgument();
      Complex complex5 = new Complex(-0.0, 2.0);
      Complex complex6 = complex3.tanh();
      complex6.sqrt1z();
      Complex complex7 = new Complex((-1.4652759033760925E-8));
      Complex complex8 = Complex.NaN;
      complex8.pow(complex5);
      complex7.reciprocal();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.valueOf(1086.549062337108);
      complex10.subtract(2.0);
      complex4.getImaginary();
      complex7.log();
      Complex complex11 = Complex.valueOf(1.557407724654902, (-20.0));
      complex11.tan();
      complex8.acos();
      Complex.valueOf(860.5);
      Complex complex12 = Complex.I;
      complex3.equals(complex1);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex(395.7012, 2143.331099231147);
      complex2.getField();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.valueOf(2143.331099231147);
      complex0.getField();
      Complex.valueOf(395.7012);
      complex4.abs();
      complex5.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getArgument();
      Complex complex1 = new Complex(0.0, Double.NaN);
      complex0.sqrt1z();
      Complex complex2 = new Complex((-2969.159996345));
      complex2.tan();
      complex2.acos();
      Complex.valueOf((-2751.58));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      complex0.multiply(complex1);
      Complex complex2 = new Complex(51.2, (-2581.5));
      complex2.NaN.tanh();
      complex0.getField();
      Complex complex3 = Complex.INF;
      Complex.valueOf(2.63957027915428E-66);
      Complex complex4 = Complex.INF;
      complex4.getField();
      Complex complex5 = Complex.valueOf(2388.0232386517005);
      complex5.ONE.sqrt();
      complex3.abs();
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2246.4369310313914, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(2220);
      Complex complex3 = complex2.subtract(complex0);
      complex3.tanh();
      complex1.divide(14614.689024499718);
      Complex complex4 = new Complex(13.415, Double.POSITIVE_INFINITY);
      complex1.divide(complex4);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = new Complex(20.0, 1.1251810371241123E-127);
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.INF;
      complex3.sqrt1z();
      Complex complex4 = new Complex((-2607.975672299));
      Complex complex5 = Complex.NaN;
      complex3.pow(complex4);
      Complex complex6 = complex2.reciprocal();
      complex4.subtract((-2674.9640555196056));
      complex6.getImaginary();
      complex6.log();
      complex6.tan();
      Complex complex7 = new Complex((-1719.07364), 1.777477741241455);
      complex7.acos();
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.divide(1767.0);
      complex2.hashCode();
      complex3.sqrt();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.sqrt1z();
      complex2.multiply(0);
      complex4.getArgument();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.ZERO.divide(2.0);
      Complex complex1 = complex0.sin();
      complex1.ONE.hashCode();
      complex1.INF.nthRoot(2834);
      Complex complex2 = complex1.createComplex((-3.141592653589793), 1.3752309224575428E-179);
      Complex complex3 = complex2.I.sqrt1z();
      complex1.I.multiply(1.6922605350647674E-8);
      complex2.INF.tanh();
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = Complex.valueOf(2930.0);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex5.sinh();
      complex7.reciprocal();
      Complex complex8 = complex1.divide(1.1251810371241123E-127);
      Complex complex9 = complex8.acos();
      complex9.I.sqrt1z();
      Complex complex10 = complex4.reciprocal();
      Complex.valueOf(5.579910641313343E186, 20.0);
      Complex complex11 = complex2.reciprocal();
      complex10.I.acos();
      complex3.divide(complex6);
      complex10.nthRoot(2834);
      complex2.multiply(0.001977401954485109);
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.7106771835183788);
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(0.7106771835183788, (-1392.5));
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf(0.7106771835183788);
      Complex complex4 = complex3.multiply(complex1);
      complex3.multiply(0.7106771835183788);
      complex3.getArgument();
      Complex complex5 = new Complex(0.7106771835183788, 1186.251534);
      Complex complex6 = complex5.tanh();
      complex2.sqrt1z();
      Complex complex7 = new Complex(4639.60472);
      Complex complex8 = new Complex(0.7106771835183788, 0.7106771835183788);
      complex6.pow(complex4);
      complex8.reciprocal();
      Complex complex9 = Complex.NaN;
      complex2.subtract(1186.251534);
      complex2.getImaginary();
      Complex complex10 = Complex.valueOf(4639.60472);
      complex10.log();
      Complex complex11 = Complex.valueOf((-4.4703076268400615E-80), (-824.1566));
      Complex complex12 = complex11.tan();
      complex7.acos();
      complex9.cosh();
      complex10.atan();
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.7106771835183788);
      Complex complex1 = complex0.createComplex(0.7106771835183788, (-100.5));
      Complex complex2 = Complex.ZERO;
      complex0.tan();
      Complex complex3 = complex1.multiply(14614.689024499718);
      complex1.getArgument();
      Complex complex4 = new Complex(2246.4369310313914, Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex4.sqrt1z();
      Complex complex5 = new Complex((-1810.6511325414));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.pow(complex4);
      Complex complex8 = complex5.reciprocal();
      complex7.subtract((-687.7290427));
      complex8.getImaginary();
      complex3.log();
      complex4.tan();
      complex5.acos();
      Complex.valueOf((-2.2153227096187463E-9));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex0.acos();
      complex1.ZERO.atan();
      Complex complex2 = Complex.NaN;
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      complex0.ONE.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.divide((-488.969356947));
      complex0.hashCode();
      complex0.sqrt();
      Complex complex4 = new Complex(4400.198108897615, Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex4.sqrt1z();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.NaN;
      complex6.pow(complex1);
      complex2.reciprocal();
      Complex complex7 = new Complex((-1810.6511325414), 4400.198108897615);
      complex7.subtract(4400.198108897615);
      complex6.getImaginary();
      complex3.log();
      complex7.tan();
      Complex complex8 = Complex.ONE;
      complex8.acos();
      Complex.valueOf(4400.198108897615);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1050.574969339, 1050.574969339);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.exp();
      complex0.pow(complex1);
      Complex complex3 = complex2.negate();
      complex1.multiply(758756447);
      Complex complex4 = complex1.subtract(complex0);
      complex1.tanh();
      complex3.divide(complex4);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getArgument();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf(0.0, (-2.7501042008405925E-8));
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.tan();
      complex3.acos();
      Complex complex4 = Complex.valueOf(0.0);
      complex1.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = (-276.857368568);
      Complex complex0 = Complex.valueOf((-276.857368568));
      complex0.INF.cosh();
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = Complex.INF;
      complex0.hashCode();
      Complex complex2 = complex0.sqrt();
      complex0.conjugate();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = new Complex(1601.92075758);
      complex4.pow(complex3);
      complex3.reciprocal();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.valueOf(1601.92075758, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.subtract(Double.POSITIVE_INFINITY);
      complex3.getImaginary();
      complex6.log();
      complex7.tan();
      Complex complex8 = Complex.NaN;
      Complex.valueOf((-2457.021968364));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.INF;
      complex2.toString();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.ONE;
      complex1.add(Double.NaN);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex3.divide(complex2);
      complex4.negate();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex((-100.5), 561.25847881773);
      Complex complex1 = complex0.conjugate();
      complex0.getField();
      Complex complex2 = Complex.INF;
      complex1.toString();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.INF.divide(6.283185307179586);
      Complex complex4 = complex0.INF.conjugate();
      Complex.valueOf((-4185.8795), (-4185.8795));
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex4.I.subtract(6.283185307179586);
      complex0.getImaginary();
      Complex complex7 = complex0.subtract(2.0);
      complex7.INF.abs();
      complex6.I.cos();
      complex1.toString();
      Complex complex8 = complex2.cos();
      complex0.ZERO.acos();
      Complex complex9 = complex3.ZERO.asin();
      complex9.I.multiply(61);
      complex6.reciprocal();
      Complex complex10 = complex8.asin();
      complex10.abs();
      complex10.subtract((-8.081007442213538E-19));
      Complex complex11 = complex6.log();
      complex11.readResolve();
      complex0.asin();
      Complex complex12 = complex3.asin();
      Complex complex13 = complex8.negate();
      complex5.acos();
      complex12.toString();
      complex13.multiply((-577.139289252));
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 44.36;
      Complex complex1 = complex0.INF.multiply(44.36);
      Complex complex2 = null;
      complex0.ZERO.multiply(complex1);
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getArgument();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.negate();
      complex0.multiply(3208);
      complex1.tanh();
      Complex complex5 = complex4.log();
      Complex.valueOf(0.0, 0.0);
      complex5.ZERO.tan();
      Complex complex6 = new Complex(2058.623, 2058.623);
      complex6.tan();
      complex3.acos();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(89.01536273965, (-1063.1528936));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.exp();
      complex2.add((-1.0));
      complex2.ONE.toString();
      complex2.pow(complex1);
      Complex.valueOf(89.01536273965, 1098.63656);
      Complex complex3 = complex1.multiply((-2227));
      Complex complex4 = complex3.tanh();
      complex0.add(1.0);
      Complex complex5 = Complex.INF;
      complex5.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      Complex complex1 = complex0.negate();
      complex1.readResolve();
      Complex complex2 = complex0.exp();
      complex2.multiply(complex0);
      Complex complex3 = complex1.multiply((-3690.5723894));
      Complex complex4 = Complex.I;
      complex4.getArgument();
      Complex complex5 = new Complex((-1984.0), 1.5707963267948966);
      complex0.tanh();
      Complex complex6 = new Complex((-1984.0));
      Complex complex7 = Complex.NaN;
      complex6.pow(complex2);
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = Complex.NaN;
      complex0.subtract(Double.POSITIVE_INFINITY);
      complex3.getImaginary();
      Complex complex10 = Complex.ZERO;
      complex10.ONE.add(4.943541290458597E-4);
      complex10.log();
      Complex.valueOf(1022941.7264952195, 3907.08988);
      complex0.tan();
      Complex complex11 = complex8.acos();
      complex11.INF.acos();
      Complex.valueOf(3907.08988);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = (Complex)complex1.readResolve();
      complex0.INF.exp();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = new Complex((-3690.5723894), 5.909041310777788E-8);
      Complex complex5 = complex4.log();
      complex3.getField();
      Complex complex6 = Complex.INF;
      complex5.getField();
      Complex complex7 = complex2.negate();
      complex5.cos();
      complex7.abs();
      Complex complex8 = complex4.divide(Double.POSITIVE_INFINITY);
      complex5.sin();
      complex4.ZERO.sqrt();
      complex7.reciprocal();
      complex8.log();
      Complex.valueOf(665.0);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      complex0.getArgument();
      complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = Complex.valueOf(0.0, (-6.564672913105876E-8));
      complex4.negate();
      Complex complex6 = complex5.multiply(3208);
      Complex complex7 = Complex.I;
      complex7.tanh();
      complex6.add((-6.564672913105876E-8));
      Complex complex8 = new Complex(Double.NaN, Double.NaN);
      complex8.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.negate();
      complex0.ONE.hashCode();
      Complex complex1 = complex0.NaN.cos();
      complex1.ONE.add((-233.3));
      Complex complex2 = complex0.multiply(1.5707963267948966);
      complex2.cosh();
      complex2.multiply(0.002395114308142083);
      int int0 = (-1360);
      try { 
        complex1.nthRoot((-1360));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,360
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      complex0.ONE.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.divide((-488.969356947));
      complex0.hashCode();
      complex0.sqrt();
      complex0.conjugate();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.negate();
      complex3.multiply(3208);
      complex2.tanh();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.add(2855.52629);
      complex5.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.createComplex((-100.5), 561.25847881773);
      complex0.conjugate();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.multiply((-687.7290427));
      complex1.getArgument();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 561.25847881773);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex5.negate();
      complex6.abs();
      Complex complex8 = Complex.I;
      Complex complex9 = complex3.sinh();
      complex2.tanh();
      Complex.valueOf(1366.2190912, 570.1861695191116);
      complex6.isNaN();
      complex7.tanh();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = Complex.valueOf(0.0, (-270.8339257549347));
      complex1.toString();
      complex1.getField();
      Complex complex3 = Complex.INF;
      complex2.getField();
      Complex complex4 = complex2.negate();
      complex2.abs();
      Complex complex5 = complex4.divide((-791.2));
      complex3.sinh();
      complex5.tanh();
      Complex.valueOf((-791.2), Double.POSITIVE_INFINITY);
      complex4.NaN.divide(complex5);
      complex5.isNaN();
      complex5.tanh();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.INF.exp();
      complex1.multiply(complex2);
      Complex complex4 = Complex.I;
      complex4.log();
      Complex.valueOf(9.390271617387205E-237, 1642.058483224623);
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.subtract(complex2);
      Complex complex8 = Complex.I;
      complex7.nthRoot(2867);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = new Complex(6.283185307179586);
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.ZERO;
      complex4.getField();
      Complex complex5 = Complex.INF;
      complex4.add(complex3);
      complex1.getField();
      Complex complex6 = complex0.negate();
      complex3.abs();
      complex1.abs();
      Complex complex7 = new Complex(2.1484038133318304);
      Complex complex8 = Complex.valueOf(6.283185307179586, 2.1484038133318304);
      Complex complex9 = new Complex((-1.0), 0.0);
      complex8.sinh();
      complex7.tanh();
      Complex.valueOf(2.529129968492817E-237, Double.POSITIVE_INFINITY);
      complex6.tanh();
      Complex complex10 = Complex.NaN;
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.INF.add(2265.592165212);
      complex2.ONE.hashCode();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.pow(complex4);
      complex3.toString();
      complex1.cos();
      complex2.isNaN();
      complex4.getArgument();
      Object object0 = new Object();
      Complex complex6 = Complex.valueOf(0.7853981633974483);
      Object object1 = complex0.readResolve();
      complex6.equals(object1);
      complex6.acos();
      complex1.pow(0.7853981633974483);
      Complex complex7 = complex3.reciprocal();
      complex5.acos();
      complex7.add(complex5);
      Complex complex8 = Complex.NaN;
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(1956.7683835);
      Complex complex1 = complex0.negate();
      Object object0 = complex1.readResolve();
      Complex complex2 = Complex.ZERO;
      complex0.equals(object0);
      Complex complex3 = complex2.multiply(62);
      Complex complex4 = complex3.tanh();
      complex3.add(20.0);
      complex2.divide(complex4);
      complex4.pow((-3082.42171993));
      complex4.pow((-0.002403425034610467));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      complex0.ONE.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.divide((-488.969356947));
      complex0.hashCode();
      complex0.sqrt();
      complex0.conjugate();
      complex1.sqrt1z();
      Complex complex4 = complex3.reciprocal();
      complex4.negate();
      complex2.atan();
      complex0.divide((-1293.593201));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = Complex.valueOf(0.0, (-270.8339257549347));
      Complex complex3 = complex0.sqrt();
      complex2.conjugate();
      Complex complex4 = Complex.valueOf((-2023.38955283));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.pow((-598.301377));
      Complex complex7 = Complex.I;
      complex0.divide(complex7);
      complex2.isInfinite();
      Complex complex8 = Complex.ZERO;
      complex8.abs();
      complex1.getReal();
      Complex complex9 = complex3.atan();
      complex7.atan();
      complex9.getArgument();
      complex6.cosh();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      complex0.ONE.getField();
      complex0.conjugate();
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.divide((-488.969356947));
      complex0.hashCode();
      complex2.toString();
      Complex.valueOf(Double.NaN, 14.13);
      Complex complex3 = Complex.ONE;
      complex2.subtract(complex3);
      Complex complex4 = Complex.I;
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.createComplex((-100.5), 561.25847881773);
      complex0.conjugate();
      Complex complex2 = complex1.tan();
      complex1.getArgument();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 561.25847881773);
      Complex complex4 = complex3.tanh();
      complex1.sqrt1z();
      Complex complex5 = new Complex((-1810.6511325414));
      Complex complex6 = Complex.NaN;
      complex6.pow(complex4);
      Complex.valueOf((-1.036103313062145E-7));
      complex6.reciprocal();
      complex5.sinh();
      complex5.tanh();
      Complex.valueOf(0.3437005281448364, 0.7071067811865476);
      Complex complex7 = Complex.ONE;
      complex7.tanh();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = new Complex((-3690.5723894), 5.909041310777788E-8);
      Complex complex6 = complex5.log();
      complex4.getField();
      Complex complex7 = Complex.INF;
      complex6.getField();
      Complex complex8 = complex2.negate();
      complex8.abs();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex0.sinh();
      Complex complex9 = complex3.tanh();
      complex2.log();
      complex2.tan();
      complex9.acos();
      Complex.valueOf((-0.5403023058681398));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.acos();
      Complex.valueOf(3.150242850860434E59);
      Complex complex1 = complex0.pow(1582.6778);
      Complex complex2 = complex1.NaN.atan();
      complex2.I.toString();
      complex1.INF.tan();
      Complex complex3 = complex0.sin();
      complex0.divide((-227.811834519));
      Complex complex4 = complex1.add(1582.6778);
      complex4.add(2.4141423627760256E278);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.909041310777802E-8, 5.909041310777802E-8);
      complex0.ZERO.sin();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.I.exp();
      complex0.ZERO.negate();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.exp();
      complex1.isInfinite();
      complex4.getField();
      complex0.I.tan();
      complex0.ZERO.subtract(0.0);
      complex0.divide(5.909041310777802E-8);
      Complex complex6 = complex0.tanh();
      complex6.INF.createComplex(0.0, 0.0);
      complex6.readResolve();
      complex1.nthRoot(573);
      complex2.sin();
      complex5.createComplex(0.0, 1.0);
      complex3.atan();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(0.0, 0.0);
      complex0.conjugate();
      complex0.ZERO.getArgument();
      Complex complex1 = Complex.valueOf(412.0961473379);
      Complex complex2 = complex1.ONE.tan();
      complex2.ONE.multiply(416);
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex3.ONE.log();
      complex0.getField();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.add(complex5);
      complex6.NaN.getField();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex4.pow(412.0961473379);
      Complex complex9 = Complex.ZERO;
      complex1.divide(complex9);
      complex5.isInfinite();
      complex5.abs();
      complex2.getReal();
      complex8.atan();
      complex7.atan();
      complex6.getArgument();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.createComplex(1.7465059757232666, (-1767.71));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.multiply((-2048.4));
      complex1.getArgument();
      Complex complex5 = Complex.INF;
      complex5.tanh();
      Complex complex6 = new Complex(1648.1181502284);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex1.pow(complex7);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.reciprocal();
      complex8.subtract((-1167.9188547000247));
      complex7.getImaginary();
      complex4.log();
      complex8.tan();
      complex2.acos();
      Complex.valueOf(1.7465059757232666);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.INF.add(2265.592165212);
      Complex complex3 = complex1.INF.negate();
      complex2.ONE.hashCode();
      Complex complex4 = complex1.ONE.sin();
      Complex complex5 = Complex.valueOf(0.0, Double.NaN);
      Complex complex6 = Complex.valueOf(0.0);
      Complex.valueOf((-74.2503807808), (-2047.0767122292766));
      complex5.getArgument();
      complex1.divide((-3690.5723894));
      complex3.sinh();
      Complex complex7 = Complex.I;
      Complex complex8 = complex2.subtract(complex7);
      complex6.log();
      complex4.tan();
      complex2.getArgument();
      complex4.pow(complex8);
      complex7.cosh();
      try { 
        complex7.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4347.17346456997), 1515.25720959);
      Complex complex1 = Complex.valueOf((-4347.17346456997), 2039.35276589002);
      complex1.getArgument();
      Complex complex2 = Complex.ONE;
      complex2.getArgument();
      complex2.toString();
      Complex complex3 = complex2.divide(1.523329496383667);
      Complex complex4 = Complex.ZERO;
      complex4.sinh();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex3.log();
      complex5.tan();
      Complex complex7 = Complex.valueOf(3.574744891921E-5, (-4347.17346456997));
      complex7.getArgument();
      Complex complex8 = complex7.pow(complex5);
      complex4.isInfinite();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex0.pow(complex3);
      complex6.divide(complex4);
      complex6.getReal();
      complex10.acos();
      complex9.multiply((-0.4208983974494926));
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      complex0.ONE.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.divide((-488.969356947));
      complex0.hashCode();
      complex0.sqrt();
      complex0.conjugate();
      Complex.valueOf((-2023.38955283));
      Complex complex4 = complex3.subtract((-2023.38955283));
      complex1.divide((-488.969356947));
      complex2.tanh();
      Complex complex5 = complex2.createComplex((-2023.38955283), (-488.969356947));
      complex1.readResolve();
      complex5.nthRoot(573);
      Complex complex6 = complex4.sin();
      complex6.createComplex(2.0916595931561093E24, 2.0916595931561093E24);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.ONE.createComplex((-1.0), 561.25847881773);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.tan();
      complex0.ZERO.multiply((-1.0));
      complex0.getArgument();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.pow(complex6);
      Complex complex8 = complex1.reciprocal();
      complex5.subtract(0.0);
      complex7.getImaginary();
      Complex complex9 = complex3.log();
      complex9.tan();
      complex8.acos();
      complex4.getArgument();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.ONE.createComplex((-1.0), 561.25847881773);
      Complex complex2 = complex1.conjugate();
      complex2.INF.tan();
      complex0.ZERO.multiply((-1.0));
      complex0.getArgument();
      Complex complex3 = complex0.tanh();
      Complex.valueOf(0.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.pow((-2023.38955283));
      Complex complex6 = complex2.divide(complex5);
      complex3.isInfinite();
      complex3.abs();
      complex0.getReal();
      complex0.atan();
      complex6.atan();
      complex5.getArgument();
      Complex complex7 = Complex.INF;
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      complex0.ONE.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.divide((-488.969356947));
      complex0.hashCode();
      complex0.sqrt();
      complex0.conjugate();
      complex1.sqrt1z();
      Complex complex4 = new Complex((-4347.17346456997));
      complex2.pow(complex3);
      complex1.reciprocal();
      Complex complex5 = Complex.ZERO;
      complex5.subtract((-4347.17346456997));
      complex4.getImaginary();
      Complex complex6 = complex2.log();
      complex6.tan();
      complex4.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex0.log();
      complex2.getField();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.add(complex0);
      complex2.getField();
      Complex complex5 = complex3.negate();
      complex4.abs();
      complex2.abs();
      complex0.divide(1141.7);
      complex1.sinh();
      Complex complex6 = Complex.valueOf((double) 416, (-2794.8));
      complex6.tanh();
      Complex complex7 = Complex.valueOf(0.0, (-2053.3));
      complex1.isNaN();
      complex0.tanh();
      complex7.hashCode();
      complex5.subtract((-528.50521371105));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-24.954841876247563), (-24.954841876247563));
      Complex complex1 = Complex.ONE;
      Complex.valueOf((-24.954841876247563), (-270.8339257549347));
      complex0.toString();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.NaN.sqrt();
      complex3.tanh();
      complex2.divide((-3095.2));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = new Complex((-3690.5723894), 5.909041310777788E-8);
      Complex complex6 = complex5.log();
      complex4.getField();
      Complex complex7 = Complex.INF;
      complex6.getField();
      Complex complex8 = complex2.negate();
      complex8.abs();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex0.sinh();
      complex3.tanh();
      Complex.valueOf(0.0018921289214503957, (-187.918));
      complex4.isNaN();
      complex5.tanh();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.conjugate();
      complex2.getArgument();
      Complex complex3 = Complex.valueOf(412.0961473379);
      Complex complex4 = complex3.ONE.tan();
      complex1.INF.getArgument();
      Complex complex5 = complex4.ONE.multiply(416);
      complex0.equals(complex1);
      complex3.reciprocal();
      Complex complex6 = Complex.valueOf((-2053.3), 0.0);
      complex4.subtract(complex5);
      complex6.nthRoot(1039);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.909041310777802E-8, 5.909041310777802E-8);
      complex0.ZERO.sin();
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf(6.283185307179586, 0.0);
      complex4.getArgument();
      complex1.getArgument();
      Complex complex7 = Complex.I;
      complex7.toString();
      Complex complex8 = complex2.divide((-528.50521371105));
      complex6.sinh();
      Complex complex9 = complex4.subtract(complex8);
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex0.tan();
      complex7.getArgument();
      Complex complex12 = complex8.pow(complex3);
      complex5.isInfinite();
      complex12.cosh();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex9.pow(complex13);
      Complex complex15 = Complex.I;
      complex15.divide(complex11);
      complex14.getReal();
      complex7.acos();
      complex10.multiply(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.tanh();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex0.ZERO.subtract(0.0);
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.atan();
      complex5.I.getArgument();
      Complex complex6 = complex5.tanh();
      complex6.INF.add(complex4);
      Complex complex7 = complex0.multiply(556);
      complex0.pow(complex2);
      complex2.getField();
      complex6.hashCode();
      complex6.sqrt1z();
      complex4.sin();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.cos();
      complex2.NaN.atan();
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex3.add(20.0);
      complex4.INF.nthRoot(37);
      complex1.pow(20.0);
      Complex complex5 = complex1.NaN.cosh();
      complex0.getField();
      Complex complex6 = complex1.INF.multiply(1);
      complex5.ZERO.pow(20.0);
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex7.ONE.divide(complex1);
      complex8.ZERO.multiply((double) 1);
      complex5.isNaN();
      Complex complex9 = complex7.INF.sin();
      complex9.ZERO.negate();
      complex1.tanh();
      complex7.sqrt();
      Complex complex10 = complex6.createComplex(20.0, 20.0);
      Complex complex11 = complex5.sinh();
      complex11.I.abs();
      complex4.nthRoot(7);
      complex8.multiply(1);
      complex10.divide(889.2511555400959);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.toString();
      complex0.ONE.getField();
      complex0.conjugate();
      Complex complex1 = complex0.I.sin();
      complex1.divide((-488.969356947));
      complex0.hashCode();
      complex0.sqrt();
      complex0.conjugate();
      Complex.valueOf((-2023.38955283));
      Complex complex2 = Complex.ZERO;
      complex2.NaN.pow(59.084953735533);
      Complex complex3 = complex0.divide(complex2);
      complex2.isInfinite();
      complex3.abs();
      complex0.getReal();
      complex2.ONE.atan();
      Complex complex4 = complex2.atan();
      complex4.ONE.getArgument();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.toString();
      complex0.ZERO.divide(0.36697328090667725);
      Complex complex1 = Complex.I;
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex0.add(complex1);
      complex2.I.multiply(0);
      complex2.ZERO.tanh();
      complex0.pow(2.0);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.INF.add(2265.592165212);
      Complex complex3 = complex1.INF.negate();
      complex2.ONE.hashCode();
      complex1.ONE.sin();
      Complex complex4 = Complex.valueOf(0.0, Double.NaN);
      Complex.valueOf(0.0);
      Complex.valueOf(2.0, 2.0);
      complex4.NaN.getArgument();
      complex0.getArgument();
      complex4.I.toString();
      Complex complex5 = complex1.divide((-3690.5723894));
      complex5.ONE.sinh();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex5.log();
      complex7.I.tan();
      complex7.NaN.getArgument();
      Complex complex8 = complex2.pow(complex1);
      complex8.isInfinite();
      complex7.INF.cosh();
      complex5.ZERO.pow(complex3);
      complex7.divide(complex2);
      complex6.getReal();
      complex4.acos();
      complex8.multiply((-782.9));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2137.599773752, 2137.599773752);
      complex0.NaN.acos();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.pow(complex1);
      complex3.INF.hashCode();
      Complex complex4 = complex3.sqrt();
      complex4.ONE.subtract(0.0);
      complex4.NaN.multiply(2137.599773752);
      Complex complex5 = complex4.ZERO.cos();
      complex5.INF.abs();
      Complex complex6 = complex2.tan();
      complex6.add(complex5);
      complex1.toString();
      complex1.sinh();
      complex0.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.readResolve();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      complex0.ZERO.exp();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.valueOf((-3722.2694101689), (-3722.2694101689));
      complex2.getArgument();
      complex3.getField();
      complex2.ONE.hashCode();
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = Complex.NaN;
      complex5.ZERO.add(complex6);
      complex0.cosh();
      Complex complex7 = complex4.multiply(complex0);
      complex3.acos();
      Complex complex8 = complex2.cosh();
      complex8.ZERO.multiply((-914));
      complex7.pow(complex2);
      complex1.log();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1195.101));
      Complex complex1 = complex0.NaN.conjugate();
      complex0.getReal();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.ONE.subtract((-1195.101));
      complex4.ZERO.abs();
      complex2.hashCode();
      Complex complex5 = complex3.NaN.sin();
      Complex complex6 = complex5.tan();
      complex6.NaN.exp();
      Complex complex7 = complex2.asin();
      complex0.ZERO.readResolve();
      Complex complex8 = complex7.INF.atan();
      complex8.INF.conjugate();
      Complex complex9 = Complex.NaN;
      complex0.ONE.getArgument();
      complex7.ZERO.multiply((-1195.101));
      Complex complex10 = complex3.divide(complex9);
      Complex complex11 = complex10.NaN.subtract(complex2);
      Complex complex12 = complex7.cosh();
      complex12.subtract(complex8);
      complex11.divide(0.0);
      complex12.multiply(1);
      complex4.getReal();
      complex1.multiply(1196.101);
      complex2.add(complex11);
      Complex.valueOf(1196.101, 0.0);
      complex12.getImaginary();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Object object0 = complex1.readResolve();
      complex0.INF.exp();
      complex0.equals(object0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.subtract(complex3);
      try { 
        complex2.nthRoot((-1095));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,095
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(89.01536273965, (-1063.1528936));
      complex0.divide(1193.738244);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1686.074576));
      Complex complex1 = complex0.NaN.subtract((-1686.074576));
      Complex complex2 = Complex.valueOf((-1686.074576));
      complex1.I.getField();
      Complex complex3 = complex1.ZERO.pow(0.0);
      complex3.ZERO.hashCode();
      Complex complex4 = complex0.cos();
      complex4.I.tanh();
      Complex complex5 = complex4.I.multiply(complex0);
      complex5.createComplex((-672.46489), (-1686.074576));
      complex4.acos();
      Complex.valueOf((-1686.074576));
      complex0.getImaginary();
      complex2.cosh();
      complex5.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.conjugate();
      complex0.ZERO.getArgument();
      Complex complex2 = Complex.valueOf(412.0961473379);
      Complex complex3 = complex2.ONE.tan();
      complex3.ONE.multiply(416);
      Complex complex4 = complex2.INF.multiply(complex0);
      complex4.ONE.log();
      complex0.getField();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.add(complex5);
      complex6.NaN.getField();
      Complex complex7 = complex5.negate();
      complex7.abs();
      complex1.abs();
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex8.sinh();
      complex8.I.tanh();
      Complex.valueOf((-1264.2583), (-1807.590619));
      complex9.isNaN();
      complex3.tanh();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.subtract(complex0);
      complex0.NaN.negate();
      complex0.INF.toString();
      Complex complex3 = complex1.ONE.multiply(0);
      complex0.getReal();
      complex0.getArgument();
      Complex complex4 = complex0.INF.pow(Double.NaN);
      complex4.getField();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex3.ZERO.pow((double) 0);
      complex3.multiply((-594.507775312));
      Complex complex7 = complex2.createComplex(0, Double.NaN);
      complex6.conjugate();
      complex2.log();
      complex5.toString();
      Complex complex8 = new Complex(6.283185307179586, (-570.2268413548));
      complex7.pow(complex8);
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.NaN.tanh();
      complex2.readResolve();
      Complex complex3 = Complex.ONE;
      complex0.I.add(complex2);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex1.atan();
      Complex.valueOf((-964.669), (-964.669));
      complex0.isNaN();
      complex4.sin();
      Complex complex6 = complex3.cosh();
      Complex complex7 = Complex.valueOf(2.8614950293715483E-8, (-1000.86760461302));
      complex1.isInfinite();
      Complex complex8 = complex6.multiply((-964.669));
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex7.sqrt1z();
      complex10.ZERO.createComplex((-964.669), (-1000.86760461302));
      Complex complex11 = complex0.sinh();
      complex11.INF.reciprocal();
      complex7.I.sqrt1z();
      complex5.multiply((-413.6046638700236));
      complex9.asin();
      complex8.tanh();
      complex4.getImaginary();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.reciprocal();
      complex0.ONE.asin();
      complex0.sqrt();
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.ONE.abs();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.pow(207.486823);
      Complex complex4 = complex3.atan();
      complex4.I.atan();
      Complex complex5 = complex3.ZERO.cos();
      complex5.ZERO.negate();
      complex2.equals(complex3);
      Complex complex6 = complex0.ONE.tanh();
      Complex complex7 = complex2.sin();
      complex7.reciprocal();
      complex7.tan();
      complex6.INF.tan();
      Complex.valueOf(417.879808);
      Complex complex8 = Complex.valueOf(4.2303826056297614E-123);
      complex8.NaN.abs();
      complex6.getArgument();
      complex0.reciprocal();
      complex0.multiply(complex6);
      complex7.tan();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.readResolve();
      complex0.isNaN();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.sin();
      complex3.NaN.pow(complex0);
      complex1.INF.pow(complex2);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.NaN);
      complex1.NaN.sqrt1z();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.I.cos();
      complex5.toString();
      complex4.I.hashCode();
      complex1.sqrt1z();
      Complex complex6 = Complex.valueOf(1210.311965745);
      complex6.sqrt();
      complex1.I.readResolve();
      complex2.getField();
      complex1.getField();
      complex6.cos();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3392.0));
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.divide(0.0);
      complex1.I.multiply(0.0);
      Complex complex2 = complex0.asin();
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2073.680476712178, 2073.680476712178);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.subtract(2.0);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex3.I.tanh();
      complex0.NaN.add(complex4);
      Complex complex6 = complex3.ZERO.subtract(1510.2167152025);
      Complex complex7 = complex6.INF.log();
      complex7.I.sqrt();
      complex0.ONE.atan();
      Complex complex8 = complex0.pow(2358.783477806);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex9.ZERO.cosh();
      complex10.I.acos();
      complex4.log();
      Complex complex11 = complex3.add((-1346.437882414365));
      complex11.ONE.multiply(6.283185307179586);
      complex0.getReal();
      complex0.sqrt();
      complex2.subtract((-1144.22673865));
      complex5.multiply(1510.2167152025);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(150.7226258989212, 150.7226258989212);
      Complex complex1 = Complex.valueOf(150.7226258989212, (-9.374695893307895E158));
      double double0 = (-152.6759771029);
      Complex complex2 = complex0.ONE.createComplex((-152.6759771029), Double.NaN);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex3.ZERO.reciprocal();
      complex4.I.readResolve();
      Complex complex5 = complex0.ZERO.exp();
      complex1.INF.getField();
      Complex complex6 = complex0.log();
      complex2.getImaginary();
      complex6.sinh();
      Complex complex7 = complex5.multiply(150.7226258989212);
      try { 
        complex7.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      complex1.equals("[=3l2Sq0__H_@8xE");
      Complex complex2 = complex1.pow(complex0);
      complex2.ZERO.toString();
      Complex complex3 = complex2.I.cos();
      complex0.isNaN();
      complex2.I.getArgument();
      Object object0 = new Object();
      complex2.equals(object0);
      complex0.ZERO.acos();
      complex2.pow(1.5707963267948966);
      complex0.reciprocal();
      Complex complex4 = complex0.acos();
      complex3.add(complex4);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0458641052246094);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.pow((-1.0));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex3.INF.divide(complex2);
      complex5.ZERO.asin();
      Complex.valueOf(2.0458641052246094);
      Complex complex6 = complex2.ONE.exp();
      Complex complex7 = complex2.INF.exp();
      Complex complex8 = complex0.ZERO.sin();
      Complex complex9 = complex2.ZERO.sinh();
      complex1.cosh();
      Complex complex10 = complex1.multiply(2.0458641052246094);
      complex0.ONE.multiply((-1.0));
      Complex complex11 = complex10.conjugate();
      complex11.INF.getArgument();
      Complex complex12 = complex8.add((-1.0));
      Complex.valueOf(2.0458641052246094);
      complex6.pow(194.8622);
      complex6.conjugate();
      complex9.getArgument();
      Complex complex13 = complex7.conjugate();
      complex2.getArgument();
      complex12.add((-1.0));
      complex3.conjugate();
      complex4.sqrt();
      complex13.abs();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.604606371472047E299);
      complex0.ZERO.abs();
      Complex complex1 = complex0.I.sqrt1z();
      complex1.NaN.readResolve();
      Complex complex2 = complex1.INF.sqrt();
      complex0.divide(2.0990624115923312E100);
      complex0.subtract(complex2);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract(complex1);
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(1);
      complex1.ONE.multiply((-2945));
      complex1.INF.createComplex(1, 0.0);
      complex1.ONE.toString();
      complex0.ZERO.subtract(0.0);
      complex0.getField();
      complex0.isInfinite();
      complex0.INF.add((-612.41529));
      complex0.atan();
      Complex complex2 = complex0.reciprocal();
      try { 
        complex2.nthRoot((-1898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,898
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4347.17346456997), 1515.25720959);
      Complex complex1 = complex0.asin();
      complex1.ZERO.tanh();
      complex0.subtract(1515.25720959);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.divide(complex1);
      complex2.I.nthRoot(2849);
      Complex complex3 = complex2.NaN.subtract(complex1);
      complex3.NaN.toString();
      Complex complex4 = complex0.divide(1239.0988923);
      complex1.getImaginary();
      complex1.subtract(1239.0988923);
      Complex complex5 = Complex.valueOf(1239.0988923);
      complex1.ONE.log();
      Complex complex6 = complex5.createComplex((-403.1215622245322), 0.0);
      Complex complex7 = complex1.multiply(complex4);
      Complex complex8 = new Complex(0.0, (-187.574));
      Complex complex9 = complex5.subtract(complex8);
      complex9.INF.getField();
      complex3.isInfinite();
      complex6.isNaN();
      complex1.negate();
      complex7.divide(972.9025);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2841.26859272309));
      Complex complex1 = Complex.valueOf(0.0);
      complex1.INF.tanh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.pow(complex0);
      complex3.INF.cosh();
      Complex complex4 = complex0.I.log();
      complex4.ZERO.add(complex0);
      complex4.getArgument();
      Complex complex5 = new Complex((-2841.26859272309), (-2841.26859272309));
      Complex complex6 = complex0.multiply(complex5);
      complex1.readResolve();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.ONE.createComplex((-1.0), 561.25847881773);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.tan();
      complex0.ZERO.multiply((-1.0));
      complex0.getArgument();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.pow(complex6);
      Complex complex8 = complex1.reciprocal();
      complex5.subtract(0.0);
      complex7.getImaginary();
      Complex complex9 = complex3.log();
      complex9.tan();
      complex8.acos();
      Complex.valueOf(2.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.add(complex0);
      complex3.ZERO.subtract(Double.NaN);
      Complex complex4 = complex3.ONE.divide(1.1857939200074815E-7);
      Complex complex5 = complex3.INF.add(complex0);
      complex5.reciprocal();
      complex2.ZERO.getArgument();
      complex0.hashCode();
      Complex complex6 = complex1.INF.cos();
      Complex complex7 = Complex.valueOf((-1832.87306));
      complex1.getImaginary();
      Complex complex8 = complex7.divide(0.0);
      Complex complex9 = complex1.acos();
      complex9.INF.getField();
      complex9.I.sin();
      complex9.ONE.atan();
      complex3.divide(complex7);
      Complex.valueOf(1.1857939200074815E-7, (-1832.87306));
      complex2.hashCode();
      complex8.pow((-1832.87306));
      complex4.multiply(1);
      complex6.hashCode();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.multiply(173);
      Complex complex1 = Complex.valueOf(1.122932337832262E-7, 0.0);
      complex1.INF.readResolve();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf((double) 173);
      Complex complex4 = complex2.divide(complex0);
      complex4.ONE.cosh();
      complex4.NaN.sinh();
      Complex complex5 = complex3.ONE.pow(complex1);
      complex5.ZERO.tan();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = Complex.valueOf(1.122932337832262E-7, (-1012.3));
      complex2.conjugate();
      Complex complex9 = complex8.sinh();
      complex9.I.sin();
      complex8.add(0.0);
      complex7.multiply(complex6);
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1703.1));
      complex0.I.getArgument();
      Complex complex1 = complex0.I.cos();
      complex0.isNaN();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.valueOf(1084.4509, 1.5707963267948966);
      complex3.I.sqrt();
      complex2.readResolve();
      complex1.pow((-1703.1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      complex0.INF.tanh();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex1.conjugate();
      complex6.INF.conjugate();
      complex3.I.exp();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex7.INF.sqrt1z();
      complex8.reciprocal();
      complex6.exp();
      double double0 = (-1783.4876);
      complex3.createComplex((-1783.4876), 0.0);
      Complex complex9 = complex4.reciprocal();
      try { 
        complex9.nthRoot((-339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -339
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.readResolve();
      Complex complex1 = complex0.createComplex((-4038.48), 1.089738130569458);
      complex1.I.multiply(3569.91820949029);
      complex1.ONE.log();
      Complex complex2 = new Complex(2469.9, 2469.9);
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex2.ZERO.sin();
      complex4.NaN.divide((-1383.767124036463));
      Complex.valueOf((-1.8494343291160577E254));
      complex4.ONE.divide((-1383.767124036463));
      Complex complex6 = complex3.ONE.subtract((-1383.767124036463));
      complex2.abs();
      complex4.multiply(1);
      complex4.tan();
      complex0.multiply(0.0);
      complex2.createComplex(1.0, (-1383.767124036463));
      Complex complex7 = complex3.pow(complex1);
      complex7.I.multiply(1);
      complex5.nthRoot(1380);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      complex1.ONE.getField();
      Complex complex2 = complex1.ONE.add(complex0);
      complex1.ONE.getArgument();
      complex2.INF.sqrt();
      Complex complex3 = complex2.I.tan();
      assertEquals(0.7615941559557649, complex3.getImaginary(), 0.01);
      
      complex0.multiply(60.414112376);
      Complex complex4 = Complex.valueOf(60.414112376);
      complex4.multiply((-1.0));
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex2.ZERO.tan();
      complex0.log();
      Complex complex7 = complex6.INF.add(2167.9832841);
      Complex complex8 = complex1.asin();
      complex8.ZERO.log();
      Complex complex9 = complex8.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getImaginary(), 0.01);
      assertTrue(complex9.equals((Object)complex5));
      
      Complex complex10 = complex2.sqrt1z();
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex1.pow(0.0);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      complex2.getImaginary();
      Complex complex12 = complex1.pow(complex8);
      Complex complex13 = (Complex)complex12.I.readResolve();
      assertEquals(0.12229811253654961, complex12.getReal(), 0.01);
      assertEquals(1.0, complex13.getImaginary(), 0.01);
      
      complex7.sqrt();
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex.valueOf(60.414112376, 60.414112376);
      Complex complex14 = Complex.valueOf(0.0);
      assertTrue(complex14.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.INF.getField();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.I.pow(complex1);
      Complex complex5 = complex4.exp();
      assertEquals(0.8414709848078965, complex5.getImaginary(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      
      complex3.NaN.getArgument();
      Complex complex6 = complex3.I.divide(4.2808762411845363E-137);
      assertEquals(2.335970356674679E136, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      complex0.getArgument();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex7.createComplex(0.0, 0.0);
      complex8.INF.abs();
      Complex complex9 = complex7.tanh();
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertTrue(complex9.equals((Object)complex8));
      assertEquals(0.0, complex9.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.INF.log();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ZERO.add((-2121.96237));
      Complex complex5 = complex2.INF.divide((-1948.388768046356));
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex2.INF.log();
      assertEquals(0.7853981633974483, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      
      Complex complex8 = complex6.ZERO.multiply(254);
      assertFalse(complex8.equals((Object)complex4));
      
      complex6.ZERO.getArgument();
      complex0.hashCode();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.NaN.log();
      Complex complex11 = complex9.ONE.divide(complex0);
      assertEquals((-1.0), complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      Complex complex12 = complex1.subtract(0.0);
      Complex complex13 = complex12.NaN.cosh();
      complex9.NaN.pow((-2121.96237));
      Complex complex14 = complex9.multiply((-574));
      complex14.getField();
      Complex complex15 = complex14.cosh();
      complex14.conjugate();
      complex6.multiply(complex15);
      assertEquals((-505.90843894921755), complex14.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getImaginary(), 0.01);
      assertTrue(complex5.isInfinite());
      assertSame(complex6, complex13);
      assertSame(complex2, complex10);
  }
}
