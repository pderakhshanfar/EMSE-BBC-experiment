/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 17:35:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3.8809601937571554E-8));
      Complex complex2 = complex0.sinh();
      double double0 = 1.0;
      Complex complex3 = complex1.pow(1.0);
      Complex complex4 = complex0.atan();
      complex3.multiply(complex4);
      Complex complex5 = new Complex(1.5367645598839362E247, 4596.655425073369);
      Complex complex6 = complex2.asin();
      Complex complex7 = complex3.sinh();
      complex2.hashCode();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex2.multiply(29);
      complex5.sqrt1z();
      complex0.nthRoot(2243);
      double double1 = 1277.12281;
      complex0.pow(1277.12281);
      complex6.nthRoot(1433);
      complex9.ONE.multiply(complex7);
      try { 
        complex9.nthRoot((-1434));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,434
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.equals(complex0);
      complex0.nthRoot(4162);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tanh();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex((-2154.225520214), (-2154.225520214));
      Complex.valueOf((-2154.225520214));
      Complex complex2 = complex1.INF.multiply((-2823.87614219919));
      Complex complex3 = complex2.INF.tan();
      complex2.ZERO.abs();
      complex0.I.getField();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.sqrt();
      complex2.ZERO.add(complex5);
      complex2.ONE.add((-3388.087));
      Complex complex6 = complex2.I.multiply((-3296));
      complex6.cos();
      Complex complex7 = complex6.createComplex(1069.06326811894, (-2823.87614219919));
      Complex complex8 = complex7.sqrt();
      complex8.INF.subtract((-1.0));
      Complex complex9 = complex6.I.cos();
      complex9.INF.multiply((-3296));
      complex6.NaN.add(complex3);
      complex0.sqrt1z();
      complex2.getField();
      complex5.exp();
      complex1.atan();
      complex0.I.getArgument();
      complex4.sinh();
      Complex complex10 = complex2.divide(0.0);
      Complex complex11 = complex10.cos();
      complex0.ZERO.tanh();
      Complex.valueOf((-1.0), 1069.06326811894);
      complex1.readResolve();
      complex2.reciprocal();
      complex0.asin();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(1.0, Double.POSITIVE_INFINITY);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.INF;
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2147483647));
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex1.toString();
      Complex complex2 = complex0.divide(complex1);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.I;
      complex0.NaN.add(complex1);
      Complex complex2 = new Complex((-1.0), (-5870.4179));
      Complex complex3 = complex2.NaN.conjugate();
      complex3.ONE.pow(complex1);
      complex0.ZERO.multiply(complex2);
      Complex complex4 = complex0.ONE.cosh();
      Complex complex5 = complex0.add((-1.0));
      Complex complex6 = complex2.subtract(complex5);
      Complex complex7 = complex2.subtract((-5870.4179));
      Complex complex8 = Complex.I;
      complex7.ONE.multiply(complex8);
      complex6.tanh();
      complex4.getArgument();
      complex0.add(complex6);
      complex4.asin();
      Complex complex9 = complex6.multiply(2078.0);
      complex6.sqrt1z();
      Complex complex10 = complex9.pow(complex6);
      complex2.divide(complex10);
      Complex.valueOf(2.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 2.6218161582946777;
      Complex complex1 = new Complex(2.6218161582946777);
      complex1.acos();
      Complex complex2 = Complex.NaN;
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(661.3657789752);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.ONE.pow(661.3657789752);
      complex3.NaN.sqrt1z();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.INF.cos();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex0.multiply(661.3657789752);
      Complex complex8 = complex6.multiply(complex0);
      complex8.getArgument();
      complex5.I.getField();
      complex8.INF.readResolve();
      Complex complex9 = complex8.multiply(2795.1);
      complex7.acos();
      complex2.readResolve();
      Complex complex10 = Complex.valueOf(2734.0, 2734.0);
      Complex complex11 = complex4.pow(complex10);
      complex10.multiply(159);
      complex5.readResolve();
      complex9.exp();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(14.48882715250224, 14.48882715250224);
      Complex complex1 = complex0.INF.subtract((-2167.2386));
      Complex complex2 = complex1.INF.cos();
      complex1.ZERO.add((-2167.2386));
      complex0.ONE.asin();
      Complex complex3 = complex0.I.divide((-1.0));
      Complex complex4 = complex2.INF.add(complex1);
      Complex complex5 = complex0.sqrt();
      complex5.NaN.acos();
      Complex complex6 = complex5.ZERO.negate();
      complex6.ONE.subtract(3544.35596);
      complex4.add(complex3);
      complex5.readResolve();
      complex0.tanh();
      Complex.valueOf((-2123.156807619));
      complex3.atan();
      Complex complex7 = complex2.multiply((-2167.2386));
      complex7.ONE.add(14.48882715250224);
      complex7.INF.multiply(Double.NaN);
      Complex.valueOf(1879.4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Complex complex0 = new Complex(1468.5298053872145);
          Complex complex1 = complex0.ONE.reciprocal();
          complex1.tan();
          Complex complex2 = complex1.INF.divide((-1958.774839768));
          Complex complex3 = complex2.NaN.negate();
          complex3.NaN.conjugate();
          complex2.NaN.readResolve();
          complex0.I.readResolve();
          Complex complex4 = complex0.NaN.cos();
          complex4.hashCode();
          Complex complex5 = complex0.tanh();
          complex5.I.conjugate();
          Complex.valueOf(1468.5298053872145, 0.9503897470294104);
          complex5.NaN.cos();
          complex5.sqrt1z();
          complex0.I.atan();
          Complex complex6 = complex0.asin();
          // Undeclared exception!
          complex6.nthRoot(2045222521);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 0.0);
      complex0.hashCode();
      Complex complex2 = Complex.I;
      complex2.readResolve();
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.pow((-4602.0));
      complex1.INF.add((-4602.0));
      Complex complex2 = complex0.subtract((-1.8889614379831606E233));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex3.cosh();
      complex2.pow((-369.7));
      Complex complex7 = complex6.atan();
      complex7.I.abs();
      complex7.INF.getArgument();
      complex3.equals((Object) null);
      Complex complex8 = complex3.ZERO.negate();
      Complex complex9 = complex2.acos();
      complex9.NaN.cosh();
      Complex complex10 = complex5.multiply(483);
      complex10.ZERO.cos();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex11.NaN.sin();
      Complex complex13 = complex12.I.createComplex((-1812.5572267100592), 483);
      complex13.subtract(5768374.239981159);
      complex5.sinh();
      complex9.tanh();
      complex5.pow(complex11);
      complex0.negate();
      complex3.cos();
      complex9.pow((-2.756054703800197E-8));
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-3583.16), (-3583.16));
      Complex complex1 = complex0.asin();
      complex1.ONE.negate();
      complex1.ZERO.createComplex((-2769.91765935974), (-2769.91765935974));
      complex0.acos();
      complex0.ONE.toString();
      Complex complex2 = new Complex(Double.NaN);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sqrt();
      try { 
        complex4.nthRoot((-1623));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,623
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.004543233037223704, Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex0.hashCode();
      complex0.readResolve();
      complex0.subtract(126.8987583922);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(4.6026833992372715, (-3047.8296895917));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.INF;
      complex4.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.sinh();
      complex6.I.toString();
      complex2.sinh();
      complex6.getField();
      complex4.readResolve();
      complex5.equals((Object) null);
      complex0.hashCode();
      complex1.readResolve();
      complex3.cosh();
      complex0.subtract(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = (Complex)complex0.ZERO.readResolve();
      complex2.log();
      Complex complex3 = new Complex(20.0);
      Complex complex4 = new Complex(0.9999999228155264, 20.0);
      complex0.hashCode();
      complex4.tan();
      complex3.readResolve();
      complex1.multiply(3396.5790848973884);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.createComplex((-1180.37438666918), (-3681.895190308));
      complex0.ONE.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.sinh();
      complex2.I.sinh();
      Complex complex3 = complex2.ZERO.subtract((-3681.895190308));
      Complex complex4 = complex0.divide(1315.527509941895);
      complex4.ONE.readResolve();
      Complex.valueOf(3.1410875902074773);
      complex0.abs();
      Complex complex5 = complex0.sqrt1z();
      complex1.subtract((-2668.9));
      Complex complex6 = complex5.I.sinh();
      complex6.toString();
      complex6.ZERO.asin();
      complex3.sqrt();
      try { 
        complex1.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.sin();
      complex2.ONE.sin();
      Complex complex3 = complex1.divide(3222.215075737668);
      complex2.hashCode();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.sqrt();
      complex3.add((-0.9999987776896483));
      Complex complex6 = complex5.divide(complex3);
      Complex complex7 = Complex.valueOf((-20.0));
      Complex complex8 = new Complex(3222.215075737668, 0.0);
      complex7.equals(complex8);
      complex5.sqrt();
      Complex complex9 = complex7.tanh();
      complex9.createComplex((-0.9999987776896483), (-4.8293856891818295E-8));
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex8.atan();
      complex10.pow(3222.215075737668);
      Complex complex11 = complex6.log();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-2718.3919));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      Complex complex3 = new Complex((-2718.3919), (-2718.3919));
      complex1.I.nthRoot(186);
      complex2.I.hashCode();
      complex0.NaN.sin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex((-2718.3919), 186);
      complex5.asin();
      complex0.sin();
      Complex complex6 = complex4.exp();
      Complex complex7 = complex6.NaN.pow(complex0);
      complex3.reciprocal();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-3583.16), (-3583.16));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = Complex.valueOf((-3583.16), 861.0);
      complex2.nthRoot(485);
      Complex complex4 = Complex.INF;
      complex4.divide(complex3);
      complex4.isInfinite();
      complex3.tanh();
      complex3.tanh();
      Complex complex5 = new Complex((-1283.1));
      complex5.createComplex(485, (-197.989884127));
      complex5.multiply(485);
      complex4.atan();
      complex4.isInfinite();
      complex5.atan();
      Complex.valueOf((-1.0007909892589986), (-1.0007909892589986));
      complex3.cosh();
      complex0.subtract(9.223721142464626);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1658.55849, 1658.55849);
      Complex complex1 = Complex.INF;
      complex1.readResolve();
      Complex complex2 = complex0.createComplex(1201.5, 1658.55849);
      complex2.atan();
      Complex complex3 = complex0.negate();
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 813.74960231);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 1.0391097066325166;
      Complex complex1 = new Complex(1.0391097066325166);
      complex1.sqrt();
      Complex complex2 = complex0.atan();
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-3583.16), (-3583.16));
      Complex complex1 = complex0.asin();
      complex1.ONE.negate();
      Complex complex2 = complex1.ZERO.createComplex((-2769.91765935974), (-2769.91765935974));
      complex0.acos();
      Complex complex3 = Complex.valueOf(1319.7891758825515, (-2769.91765935974));
      Complex complex4 = complex1.createComplex(888.67438236586, (-2769.91765935974));
      Complex complex5 = complex4.createComplex(1.2118105325725891E-113, 1.2118105325725891E-113);
      complex5.multiply(645);
      Complex complex6 = Complex.INF;
      complex5.conjugate();
      Complex complex7 = Complex.I;
      complex7.log();
      complex7.getField();
      complex6.add(complex0);
      Complex complex8 = Complex.valueOf(1.2118105325725891E-113);
      complex1.pow(complex8);
      Complex complex9 = Complex.ZERO;
      complex9.add(complex3);
      Complex.valueOf((-1538.7613216666), 0.8055242082111551);
      complex2.subtract(0.22704219818115234);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex1.NaN.nthRoot(485);
      Complex complex2 = complex0.divide(complex1);
      complex2.isInfinite();
      Complex complex3 = complex1.tanh();
      complex2.NaN.tanh();
      complex3.createComplex((-197.989884127), (-1283.1));
      complex1.multiply(485);
      complex1.INF.atan();
      complex0.isInfinite();
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.valueOf(754.889282, (-1283.1));
      complex5.INF.cosh();
      complex5.toString();
      complex2.cosh();
      complex4.tanh();
      complex4.divide((-1283.1));
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-3583.16), (-3583.16));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.log();
      complex1.abs();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.cosh();
      complex1.getArgument();
      complex0.readResolve();
      Complex complex8 = complex1.cos();
      complex2.tan();
      complex4.sinh();
      Complex complex9 = complex5.createComplex(4.742576902572182E-5, 2908.38);
      Complex complex10 = complex2.createComplex((-3583.16), 1910.343510833);
      Complex complex11 = complex5.multiply(2015);
      complex9.conjugate();
      complex6.ONE.divide(complex11);
      Complex complex12 = complex7.log();
      complex9.getField();
      Complex complex13 = Complex.INF;
      complex13.add(complex6);
      complex8.pow(complex12);
      complex10.add(complex13);
      complex3.subtract(1.0391097066325166);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-3583.16), (-3583.16));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.ZERO.createComplex((-2769.91765935974), (-2769.91765935974));
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.divide(1977.612);
      complex1.hashCode();
      complex0.tan();
      complex5.sqrt();
      complex5.add(0.9999997641693235);
      Complex complex6 = complex1.divide(complex4);
      Complex complex7 = Complex.valueOf((-4.8293856891818295E-8));
      complex3.equals("input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}");
      complex6.sqrt();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex7.createComplex(0.9999997641693235, (-1.0));
      complex8.divide(0.9999930253396107);
      Complex.valueOf((-2769.91765935974));
      complex1.atan();
      complex5.pow((-3.4338804891896943E-4));
      complex9.log();
      complex6.tan();
      Complex complex10 = Complex.ONE;
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex0.hashCode();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.cos();
      complex3.negate();
      complex1.subtract(complex0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.divide((-2912.157261));
      complex6.hashCode();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex4.sqrt();
      complex1.add(2718.3919);
      Complex complex9 = complex7.divide(complex6);
      Complex.valueOf((-2912.157261));
      Complex complex10 = Complex.I;
      complex0.equals(complex10);
      complex4.sqrt();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex9.createComplex(17, 2718.3919);
      complex12.divide((-20.0));
      Complex.valueOf(368.0);
      complex6.atan();
      complex5.pow(2718.3919);
      complex8.log();
      complex11.tan();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.multiply(17);
      complex2.INF.exp();
      Complex complex3 = complex2.INF.conjugate();
      complex3.NaN.negate();
      complex0.abs();
      complex3.abs();
      complex3.abs();
      Complex complex4 = complex3.INF.pow(complex1);
      complex4.INF.divide(complex1);
      complex2.subtract(complex3);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex.valueOf(20.0);
      Complex complex5 = complex2.divide((double) 17);
      Complex complex6 = Complex.ZERO;
      complex6.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.sin();
      complex2.INF.getArgument();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex3.acos();
      complex6.toString();
      Complex complex7 = complex0.add(0.0);
      complex0.readResolve();
      Complex complex8 = Complex.valueOf((-1.0), (-1.0));
      complex8.add(0.7853981633974483);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.subtract(complex5);
      complex10.getArgument();
      Complex complex11 = Complex.NaN;
      Object object0 = complex11.readResolve();
      complex7.equals(object0);
      complex7.multiply(459.694274515);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-3583.16), (-3583.16));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.ZERO.createComplex((-2769.91765935974), (-2769.91765935974));
      Complex complex4 = complex3.sinh();
      ComplexField complexField0 = complex4.getField();
      complex3.readResolve();
      complex2.equals(complexField0);
      Complex complex5 = Complex.ONE;
      complex5.readResolve();
      Complex complex6 = complex3.createComplex(3703.544154, 415.672301171);
      complex0.atan();
      Complex complex7 = complex6.negate();
      complex2.readResolve();
      Complex.valueOf((-2769.91765935974), (-2769.91765935974));
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex0.divide((-2870.0));
      complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-2718.3919));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      complex2.I.divide(complex0);
      complex1.I.nthRoot(186);
      complex2.I.hashCode();
      Complex complex3 = complex2.add(0.2247048318386078);
      Complex complex4 = complex2.divide(complex1);
      Complex.valueOf((-3129.21252216838));
      Object object0 = new Object();
      complex4.equals(object0);
      complex1.sqrt();
      complex1.tanh();
      complex4.createComplex((-2718.3919), 4082.196537493586);
      complex0.divide(2814.26450969);
      Complex.valueOf(7.696848280337067E-17);
      Complex complex5 = complex4.atan();
      complex5.pow((-3352.4576245723));
      complex3.log();
      complex1.tan();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.createComplex(6.283185307179586, (-20.0));
      Complex complex2 = complex0.cosh();
      complex1.hashCode();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.negate();
      complex5.INF.subtract(complex3);
      complex5.INF.log();
      complex1.sin();
      Complex complex6 = complex0.divide((-20.0));
      complex6.INF.hashCode();
      complex0.tan();
      complex1.sqrt();
      complex5.NaN.add(6.283185307179586);
      complex3.ZERO.divide(complex4);
      complex1.tan();
      Complex complex7 = Complex.ZERO;
      try { 
        complex7.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.multiply(17);
      complex2.INF.exp();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.NaN.negate();
      complex0.abs();
      complex3.abs();
      Complex complex5 = complex4.atan();
      complex1.log();
      complex1.isInfinite();
      complex2.multiply((-1395));
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.ZERO;
      complex7.atan();
      complex3.cos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex8.divide(1.1681688445204168E-7);
      Complex complex9 = Complex.NaN;
      complex6.multiply(complex9);
      complex6.createComplex((-1395), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2814.26450969);
      Complex complex1 = complex0.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ONE.reciprocal();
      complex1.NaN.add(complex2);
      complex2.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(2814.26450969);
      complex1.NaN.tanh();
      complex0.NaN.log();
      complex0.abs();
      Complex complex4 = complex1.cosh();
      complex4.INF.getArgument();
      complex0.ONE.readResolve();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.sinh();
      complex7.NaN.createComplex(1910.343510833, (-1929.0));
      Complex complex8 = complex5.createComplex(7.699097067385825E-248, (-2532.0321845));
      Complex complex9 = complex3.multiply(645);
      complex9.conjugate();
      complex8.INF.log();
      complex0.getField();
      complex8.add(complex2);
      Complex complex10 = complex3.pow(complex0);
      complex10.I.add(complex6);
      complex8.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1581.4855778769631), (-1581.4855778769631));
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.add((-1581.4855778769631));
      complex4.I.toString();
      Complex complex5 = Complex.valueOf((-1581.4855778769631), 3.7730204737910044E260);
      Complex complex6 = complex5.ZERO.atan();
      complex6.divide(3775.0970086695065);
      Complex complex7 = complex6.ONE.pow(complex4);
      complex7.getArgument();
      Complex complex8 = complex0.atan();
      complex8.ZERO.add(3329.2643194942702);
      complex8.equals(complex0);
      Complex complex9 = complex0.multiply((-2452));
      complex1.createComplex((-2452), 2267.62558);
      Complex complex10 = complex8.asin();
      complex10.getField();
      complex9.getField();
      complex3.conjugate();
      Complex complex11 = complex3.acos();
      complex11.negate();
      complex2.NaN.divide(3.7730204737910044E260);
      complex3.negate();
      complex10.subtract((-1581.4855778769631));
      complex8.divide(complex2);
      try { 
        complex4.nthRoot((-2452));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,452
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      complex0.nthRoot(1);
      Complex complex2 = complex1.ONE.conjugate();
      complex0.nthRoot(2529);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.acos();
      complex3.subtract(complex1);
      Complex complex5 = complex4.cos();
      complex3.I.toString();
      Complex complex6 = complex5.subtract(1109.15665);
      Complex complex7 = complex3.ZERO.tan();
      Complex complex8 = complex7.ZERO.pow(1804.921858);
      complex6.sqrt();
      Complex complex9 = complex5.log();
      Complex complex10 = complex3.INF.exp();
      complex10.ZERO.multiply((-4698.057742543649));
      complex9.I.reciprocal();
      complex9.INF.negate();
      Complex complex11 = complex4.NaN.divide(complex10);
      complex11.NaN.log();
      complex2.sin();
      complex11.hashCode();
      Complex complex12 = complex5.tanh();
      Complex.valueOf((double) 1);
      complex0.negate();
      complex1.multiply(1804.921858);
      complex10.exp();
      complex5.isInfinite();
      complex5.add(complex4);
      complex8.toString();
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.I.subtract(3330.71458);
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex4.ONE.acos();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex0.NaN.cos();
      Complex complex9 = complex8.ZERO.log();
      complex9.ZERO.atan();
      Complex complex10 = complex0.log();
      complex10.isInfinite();
      Complex complex11 = complex10.multiply((-1395));
      Complex complex12 = Complex.valueOf((double) (-1395), (-2624.66));
      complex12.sinh();
      Complex complex13 = complex3.atan();
      complex2.cos();
      complex13.toString();
      Complex.valueOf((-2916.0), Double.NaN);
      complex5.add(complex7);
      complex12.subtract(complex11);
      complex9.negate();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.ZERO.subtract(complex1);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.I.subtract(3330.71458);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex3.ONE.acos();
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex0.NaN.cos();
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = complex0.log();
      complex10.isInfinite();
      complex10.multiply((-1395));
      complex9.sinh();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex2.cos();
      complex11.toString();
      Complex.valueOf(Double.NaN, 3330.71458);
      complex6.add(complex12);
      complex11.subtract(complex9);
      complex3.negate();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex((-2639.159939032), (-1115.52530464));
      Complex complex3 = complex2.negate();
      complex3.abs();
      complex1.abs();
      complex0.abs();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex1.divide(complex0);
      complex5.subtract(complex1);
      complex4.tanh();
      int int0 = (-1);
      try { 
        complex4.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-2718.3919));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      complex2.toString();
      Complex complex3 = complex2.add((-2718.3919));
      complex1.readResolve();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex2.add(complex5);
      complex1.multiply(196);
      Complex complex8 = complex3.log();
      complex4.add((double) 196);
      complex6.sin();
      complex5.hashCode();
      complex7.tanh();
      Complex.valueOf((-99.0));
      Complex complex9 = complex1.negate();
      complex3.multiply((double) 196);
      complex9.exp();
      complex8.isInfinite();
      complex8.add(complex5);
      Complex complex10 = new Complex(0.0);
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-3583.16), (-3583.16));
      Complex complex1 = complex0.asin();
      complex1.ONE.negate();
      Complex complex2 = complex1.ZERO.createComplex((-2769.91765935974), (-2769.91765935974));
      Complex complex3 = complex0.acos();
      complex0.ONE.toString();
      Complex complex4 = complex3.ZERO.add(0.0);
      complex4.INF.readResolve();
      complex3.subtract(complex1);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.add(complex0);
      complex3.multiply(196);
      complex2.log();
      Complex complex7 = new Complex((-3583.16), (-2769.91765935974));
      Complex complex8 = complex6.sin();
      complex8.NaN.hashCode();
      complex8.ONE.tanh();
      Complex complex9 = Complex.valueOf((-3583.16));
      complex1.negate();
      complex9.multiply(0.0);
      complex9.subtract(complex8);
      complex2.cos();
      Complex.valueOf(1.328167263606087E161, 438.28118577118);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.sin();
      complex2.ONE.sin();
      complex2.INF.getArgument();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.sinh();
      complex5.INF.getField();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = complex4.ZERO.createComplex(1201.5, 0.7853981633974483);
      complex7.atan();
      Complex complex8 = complex5.negate();
      complex0.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-542.52648));
      Complex.valueOf(20.0);
      complex8.divide(Double.POSITIVE_INFINITY);
      complex6.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.multiply(17);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = Complex.ONE;
      complex5.toString();
      complex4.subtract(3302.33403140399);
      complex3.tan();
      complex3.pow((-1889.3689299222));
      complex1.sqrt();
      Complex complex6 = complex3.log();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex6.multiply(1.0);
      complex1.reciprocal();
      complex7.negate();
      Complex complex9 = Complex.I;
      complex9.divide(complex8);
      try { 
        complex0.nthRoot((-601));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -601
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      complex0.nthRoot(1);
      Complex complex2 = complex1.ONE.conjugate();
      complex0.nthRoot(2529);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex3.negate();
      complex7.abs();
      complex4.abs();
      complex2.abs();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex5.pow(complex8);
      complex4.divide(complex6);
      complex7.subtract(complex6);
      complex8.tanh();
      complex6.nthRoot(1);
      complex9.nthRoot(2529);
      Complex.valueOf((-720.59491));
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-3583.16), (-3583.16));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.negate();
      complex2.NaN.sin();
      Complex complex3 = complex1.ZERO.createComplex((-2769.91765935974), (-2769.91765935974));
      Complex complex4 = complex0.acos();
      complex0.ONE.toString();
      Complex complex5 = complex4.ZERO.add(0.0);
      complex5.INF.readResolve();
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = complex6.negate();
      complex4.readResolve();
      Complex.valueOf(6.663175904917432E40, (-1826.6133409));
      Complex.valueOf((-3166.793847023768));
      Complex complex8 = Complex.INF;
      complex8.I.sinh();
      complex8.divide((-2769.91765935974));
      complex1.multiply(complex3);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-2718.3919));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.divide(complex0);
      complex1.I.nthRoot(186);
      complex2.I.hashCode();
      Complex complex4 = complex0.NaN.sin();
      complex0.toString();
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex((-2718.3919), 186);
      complex6.asin();
      complex0.sin();
      complex4.toString();
      complex5.exp();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.I.multiply(3675);
      Complex complex3 = complex1.NaN.divide(1.0);
      Complex complex4 = complex3.I.acos();
      complex0.ONE.toString();
      complex0.negate();
      Complex complex5 = complex2.multiply(299);
      complex5.ONE.getField();
      complex3.toString();
      complex4.atan();
      complex3.pow((double) 3675);
      Complex complex6 = complex3.log();
      complex6.tan();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1128.76180322958), (-1613.3881));
      Complex complex1 = Complex.valueOf((-2948.6835864144296));
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex3.I.sqrt();
      complex3.ZERO.pow(complex1);
      Complex complex5 = Complex.valueOf((-1852.81742897));
      Complex complex6 = complex0.NaN.subtract(complex1);
      Complex complex7 = complex0.NaN.atan();
      complex0.getReal();
      complex5.divide(complex1);
      complex0.getField();
      complex7.getArgument();
      complex2.nthRoot(724);
      complex0.divide(complex1);
      complex2.equals((Object) null);
      Complex complex8 = complex6.exp();
      complex1.reciprocal();
      Complex complex9 = complex0.reciprocal();
      complex9.atan();
      complex8.sqrt1z();
      complex9.log();
      complex4.hashCode();
      Complex complex10 = complex0.add(0.0);
      complex10.ZERO.conjugate();
      complex7.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      complex0.nthRoot(1);
      complex1.ONE.conjugate();
      complex0.nthRoot(2529);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.acos();
      complex2.subtract(complex1);
      Complex complex4 = complex3.cos();
      complex2.I.toString();
      Complex complex5 = complex4.subtract(1109.15665);
      Complex complex6 = complex2.ZERO.tan();
      complex6.ZERO.pow(1804.921858);
      complex5.sqrt();
      Complex complex7 = complex4.log();
      Complex complex8 = complex2.INF.exp();
      complex8.ZERO.multiply((-4698.057742543649));
      complex7.I.reciprocal();
      complex7.INF.negate();
      Complex complex9 = complex3.NaN.divide(complex8);
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.I.multiply(complex1);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex0.tanh();
      complex3.NaN.getArgument();
      Complex complex4 = complex3.add(complex0);
      complex4.ONE.sqrt();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex6.ZERO.add(Double.NaN);
      complex7.NaN.multiply(Double.NaN);
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex5.ONE.exp();
      complex8.I.multiply((-1418.0));
      complex4.INF.toString();
      complex3.isNaN();
      complex5.NaN.pow(Double.NaN);
      Complex complex10 = complex4.sinh();
      complex2.getImaginary();
      complex10.getField();
      complex0.subtract(complex10);
      complex9.getField();
      complex8.divide(0.0);
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1368933260611668E-7), (-702.8889956));
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf((-1653.384), (-48.0319808731));
      complex0.NaN.negate();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = Complex.valueOf((-702.8889956));
      Complex complex6 = complex0.NaN.sqrt();
      complex6.subtract(1226.3119);
      Complex complex7 = complex2.ONE.add(complex1);
      Complex complex8 = complex7.I.sqrt();
      complex8.ONE.multiply(complex5);
      Complex complex9 = complex8.ONE.negate();
      complex9.INF.asin();
      complex2.ONE.abs();
      complex6.NaN.reciprocal();
      complex0.getArgument();
      Complex complex10 = complex0.multiply(1729.36363157);
      Complex complex11 = complex3.add((-165.0));
      complex10.hashCode();
      Complex complex12 = Complex.valueOf((-165.0), 0.0);
      complex12.NaN.hashCode();
      complex11.readResolve();
      complex6.readResolve();
      complex4.multiply((-702.8889956));
      complex2.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.7658271111516935E-8));
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex0.log();
      complex1.NaN.add(1.1864056832305874E-207);
      Complex complex4 = complex3.NaN.add((-1.7658271111516935E-8));
      complex3.isNaN();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.createComplex((-1745.6729799769), (-1.7658271111516935E-8));
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex1.asin();
      complex0.toString();
      complex3.NaN.acos();
      complex4.INF.conjugate();
      Complex complex9 = complex3.ZERO.cosh();
      Complex complex10 = complex4.multiply((-2874));
      complex8.ONE.subtract(complex0);
      complex4.log();
      Complex complex11 = complex7.log();
      Complex complex12 = complex1.multiply((-587.505));
      Complex complex13 = complex1.multiply(complex2);
      Complex complex14 = complex8.subtract(Double.NaN);
      complex9.equals(complex11);
      complex6.sin();
      complex14.isInfinite();
      complex10.getImaginary();
      complex8.createComplex((-2874), Double.NaN);
      complex10.pow((-587.505));
      complex13.getField();
      complex12.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-1.0028661472061573E-7), 1.8019459247589111);
      complex0.getImaginary();
      complex0.ZERO.sin();
      complex0.ONE.divide(0.0);
      complex0.isNaN();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1258.63);
      Complex complex1 = complex0.negate();
      complex0.isInfinite();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.INF.asin();
      complex1.INF.nthRoot(961);
      complex0.getArgument();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex4.subtract(complex0);
      complex0.ONE.conjugate();
      Complex.valueOf(0.0);
      complex6.INF.conjugate();
      Complex complex7 = complex6.cosh();
      complex0.getImaginary();
      complex1.negate();
      complex1.conjugate();
      complex5.INF.asin();
      Complex.valueOf((double) 961);
      complex1.acos();
      complex4.toString();
      Complex complex8 = complex5.multiply((-1610));
      complex8.I.pow(complex7);
      complex0.multiply(2541.35);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply((-1351.316));
      complex1.ZERO.getArgument();
      Complex complex2 = Complex.ONE;
      complex0.equals(complex2);
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.tan();
      double double0 = 2.0;
      complex2.INF.subtract(2.0);
      complex0.ZERO.subtract(2.0);
      complex0.INF.add(complex1);
      complex0.getField();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.cos();
      complex3.NaN.pow(complex2);
      Complex complex4 = complex1.asin();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-662.8039733625665));
      complex0.isInfinite();
      complex0.asin();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-662.8039733625665), 0.0);
      complex0.acos();
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = Complex.valueOf(0.0, (-2299.18751231));
      Complex.valueOf((-294.637327), 0.0);
      Complex complex7 = complex6.ZERO.sin();
      complex1.ZERO.createComplex((-3619.1993922024385), 0.0);
      complex3.I.hashCode();
      Complex complex8 = complex1.subtract(complex3);
      complex8.exp();
      Complex complex9 = complex7.acos();
      complex2.add((-1383.658193675));
      Complex complex10 = Complex.valueOf(3914.52, 3914.52);
      complex10.ONE.subtract(4.980100072851796E-153);
      Complex complex11 = complex6.tanh();
      complex7.cosh();
      Complex complex12 = complex7.asin();
      complex12.ZERO.divide(complex3);
      complex11.tan();
      complex5.subtract(20.0);
      complex9.nthRoot(1481);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.I.subtract(3330.71458);
      complex4.divide(complex3);
      Complex complex5 = complex4.ONE.acos();
      complex5.ONE.sin();
      Complex complex6 = complex0.NaN.cos();
      Complex complex7 = complex6.ZERO.log();
      complex7.ZERO.atan();
      Complex complex8 = complex0.log();
      complex8.isInfinite();
      Complex complex9 = complex8.multiply((-1395));
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex1.atan();
      complex11.cos();
      complex2.toString();
      Complex.valueOf(Double.NaN, (-2916.0));
      complex8.I.add(complex9);
      complex1.subtract(complex6);
      complex10.negate();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2392.81056, 2392.81056);
      complex0.isNaN();
      complex0.sin();
      Complex complex1 = Complex.I;
      complex1.INF.pow(complex0);
      complex0.ONE.hashCode();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.multiply(complex1);
      complex1.getReal();
      complex2.readResolve();
      Complex complex4 = complex2.tan();
      complex2.ONE.getField();
      Complex complex5 = complex3.add(0.0);
      complex5.ONE.asin();
      complex0.I.negate();
      Complex complex6 = complex5.pow(complex4);
      Complex complex7 = Complex.valueOf((-3281.963197282567));
      Complex complex8 = complex6.I.acos();
      Complex complex9 = complex8.ZERO.sin();
      complex2.ZERO.sinh();
      complex2.getReal();
      complex6.NaN.sqrt1z();
      complex6.getField();
      complex7.isInfinite();
      complex8.isInfinite();
      complex9.multiply(0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-3583.16), (-3583.16));
      Complex complex1 = complex0.asin();
      complex1.ONE.negate();
      Complex complex2 = complex1.ZERO.createComplex((-2769.91765935974), (-2769.91765935974));
      Complex complex3 = complex0.acos();
      complex0.ONE.toString();
      Complex complex4 = complex3.ZERO.add(0.0);
      complex4.INF.readResolve();
      complex3.subtract(complex1);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.add(complex0);
      complex3.multiply(196);
      complex2.log();
      complex3.add((-10.0));
      Complex complex7 = complex6.sin();
      complex7.NaN.hashCode();
      complex7.ONE.tanh();
      Complex complex8 = Complex.valueOf((-3583.16));
      Complex complex9 = complex1.negate();
      complex8.multiply(0.0);
      complex5.exp();
      complex9.isInfinite();
      complex3.add(complex7);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cosh();
      complex2.ONE.hashCode();
      complex0.NaN.negate();
      complex1.ZERO.abs();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.ONE.multiply((-472));
      Complex complex5 = complex4.ONE.cosh();
      complex5.ZERO.atan();
      Complex complex6 = complex4.ZERO.sqrt1z();
      complex6.NaN.reciprocal();
      int int0 = (-1714);
      try { 
        complex3.nthRoot((-1714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,714
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.createComplex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.createComplex(Double.NaN, 255.3722);
      Complex complex2 = complex0.cos();
      complex2.NaN.multiply(0.0);
      complex2.ONE.tan();
      complex0.subtract(complex2);
      complex0.hashCode();
      Complex complex3 = complex1.subtract(complex0);
      complex2.atan();
      Complex complex4 = complex3.sinh();
      complex4.INF.asin();
      complex0.subtract(6.283185307179586);
      Complex complex5 = complex4.atan();
      complex5.ONE.tan();
      Complex complex6 = complex5.ONE.cos();
      complex5.multiply(complex1);
      complex5.toString();
      complex1.isInfinite();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(1.0);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.I.add(complex3);
      Complex complex6 = complex3.multiply(2748);
      Complex complex7 = complex6.multiply((double) 2748);
      complex7.ZERO.divide((double) 2748);
      Complex complex8 = complex3.ZERO.multiply((-233));
      Complex complex9 = complex8.ONE.tan();
      complex2.isNaN();
      complex1.nthRoot(2748);
      complex0.hashCode();
      complex6.NaN.pow(0.0);
      Complex complex10 = complex2.sin();
      complex4.cos();
      complex7.toString();
      complex2.ZERO.cos();
      complex0.log();
      complex10.add(complex9);
      complex0.isNaN();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sqrt();
      complex1.I.nthRoot(487);
      complex1.INF.getField();
      complex1.tan();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.NaN.exp();
      complex1.multiply(complex0);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3227.9440853730107));
      Complex complex1 = complex0.sqrt();
      complex1.ONE.readResolve();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.INF.createComplex(0.0, 5478.087608324577);
      Complex complex5 = Complex.NaN;
      complex4.I.subtract(complex5);
      complex0.getImaginary();
      Complex complex6 = complex2.log();
      complex6.NaN.divide(complex0);
      Complex complex7 = Complex.valueOf(370.51719189632206, 0.0);
      complex1.ONE.tanh();
      complex6.INF.divide(complex1);
      complex6.I.hashCode();
      complex6.sqrt();
      Complex complex8 = complex6.multiply(859);
      Complex complex9 = complex8.NaN.subtract(0.0);
      Complex complex10 = complex6.multiply(370.51719189632206);
      complex10.multiply(859);
      complex10.equals(complex2);
      complex6.subtract(370.51719189632206);
      Complex.valueOf(5478.087608324577, 370.51719189632206);
      complex0.readResolve();
      Complex complex11 = complex9.tanh();
      complex11.INF.exp();
      complex8.exp();
      Complex complex12 = complex7.pow(complex9);
      complex12.add(370.51719189632206);
      complex4.pow((-2.5711014608334873E-9));
      complex8.multiply(859);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(279.286594806);
      Complex complex1 = Complex.valueOf(279.286594806);
      complex0.getReal();
      Complex complex2 = complex0.multiply(279.286594806);
      Complex complex3 = complex1.sinh();
      Complex complex4 = Complex.valueOf(6.034539636024073E-8, 279.286594806);
      Complex complex5 = complex4.INF.multiply((-1033));
      complex3.multiply(6.034539636024073E-8);
      complex5.multiply(588.2857435772);
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.readResolve();
      complex0.nthRoot(37);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.I.sqrt();
      complex2.INF.multiply(2.0);
      complex0.negate();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-1.8026348269183678E-9));
      complex0.NaN.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.tanh();
      complex1.NaN.getField();
      Complex.valueOf(2.0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.createComplex(0.0, 1.5714110564653245E-8);
      complex0.hashCode();
      Complex complex5 = complex2.ZERO.multiply(0.0);
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = new Complex(403.51247, 2707.60407914);
      complex6.subtract(complex7);
      Complex complex8 = complex1.multiply(2066);
      complex2.acos();
      Complex complex9 = complex2.subtract(complex4);
      Complex complex10 = complex9.ONE.createComplex(2066, (-1.8026348269183678E-9));
      complex1.getReal();
      complex8.multiply(0);
      Complex complex11 = complex3.cosh();
      complex11.I.toString();
      complex10.readResolve();
      complex10.multiply((double) 2066);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-96.7743), (-96.7743));
      Complex complex1 = new Complex((-96.7743), (-232.1));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex2.ZERO.createComplex((-96.7743), (-232.1));
      complex3.ZERO.toString();
      Complex complex6 = complex0.acos();
      complex2.I.pow(172.9346707);
      complex0.readResolve();
      complex6.NaN.toString();
      complex6.INF.multiply(complex5);
      Complex complex7 = complex2.pow(complex6);
      Complex complex8 = complex7.createComplex(3224.7, (-232.1));
      Complex complex9 = complex8.NaN.cos();
      complex6.INF.acos();
      Complex complex10 = complex9.NaN.cos();
      complex10.NaN.add(complex8);
      complex0.isNaN();
      complex4.sqrt1z();
      complex7.sqrt();
      complex8.pow((-497.5));
      complex1.log();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex0.ZERO.hashCode();
      complex1.I.getField();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.tanh();
      complex3.getArgument();
      Complex complex4 = complex0.log();
      complex4.ZERO.toString();
      Complex complex5 = complex2.multiply(0);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.I.divide(Double.NaN);
      complex7.ZERO.subtract(complex4);
      Complex complex8 = complex7.I.log();
      complex8.INF.toString();
      complex8.INF.createComplex(0.0, Double.NaN);
      Complex complex9 = complex5.exp();
      complex9.NaN.pow(0.0);
      complex4.cosh();
      complex2.abs();
      complex9.createComplex(0.0, Double.NaN);
      Complex complex10 = Complex.valueOf((-358.7061820227346), 1312.61966589543);
      complex6.getReal();
      complex4.exp();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2618.98682), 6.283185307179586);
      complex0.negate();
      complex0.NaN.readResolve();
      Complex complex1 = Complex.valueOf(2274.5, (-1.0));
      Complex complex2 = Complex.valueOf((-2618.98682));
      complex2.divide(2274.5);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1.8981247089866317E-7), (-1.8981247089866317E-7));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = Complex.valueOf((-1.8981247089866317E-7));
      Complex complex3 = complex2.I.multiply((-1.8981247089866317E-7));
      Complex complex4 = complex3.conjugate();
      complex1.ONE.sqrt1z();
      complex4.ONE.add(2099.069317735);
      complex1.getField();
      complex0.pow((-3330.97982708758));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(1870.6);
      Complex complex1 = complex0.negate();
      complex0.I.toString();
      Complex complex2 = complex1.I.negate();
      complex0.subtract((-3983.463646511831));
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.NaN.readResolve();
      complex3.ZERO.sqrt1z();
      Complex complex4 = complex2.ZERO.subtract((-71.0592392591974));
      Complex complex5 = complex1.tanh();
      complex5.ZERO.readResolve();
      Complex complex6 = complex0.multiply(1870.6);
      complex6.I.negate();
      complex5.divide(1870.6);
      Complex.valueOf(1870.6, 0.0);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.sin();
      complex8.ZERO.acos();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 994.37);
      Complex complex1 = complex0.pow(994.37);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.negate();
      complex3.NaN.tanh();
      complex3.getArgument();
      complex1.sinh();
      Complex complex4 = complex0.ZERO.cos();
      complex1.acos();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.divide(0.0);
      Complex complex7 = Complex.valueOf(994.37, Double.NaN);
      complex3.asin();
      Complex complex8 = Complex.valueOf(4153.685581520624, (-853.558060448411));
      complex8.ONE.getField();
      Complex complex9 = Complex.valueOf((-3063.463696224));
      complex9.ONE.negate();
      complex5.multiply(complex8);
      Complex complex10 = complex6.sqrt1z();
      complex10.toString();
      Complex complex11 = complex6.pow(complex3);
      complex6.sqrt1z();
      complex4.isNaN();
      complex11.toString();
      complex9.tan();
      complex0.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.558581829071045, 2.558581829071045);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.NaN.cos();
      complex2.I.readResolve();
      Complex complex3 = Complex.valueOf(2.558581829071045, 2.558581829071045);
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex0.ONE.multiply(0);
      Complex complex6 = complex5.ONE.add(2.558581829071045);
      Complex complex7 = Complex.valueOf(2.558581829071045);
      complex7.NaN.sin();
      Complex complex8 = complex0.negate();
      Complex.valueOf((double) 0, (double) 0);
      complex6.multiply(0.0);
      complex0.exp();
      Complex complex9 = complex6.add(complex8);
      complex9.I.add((double) 0);
      complex8.hashCode();
      complex0.sin();
      Complex complex10 = complex9.I.multiply(325);
      complex9.pow(3190.554042594888);
      complex8.isNaN();
      Complex complex11 = complex4.subtract(complex0);
      complex9.cosh();
      complex3.sin();
      Complex complex12 = complex11.acos();
      complex12.divide(complex4);
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.ONE.atan();
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.pow((-1586.07912344));
      complex1.sin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.multiply(17);
      complex2.INF.exp();
      Complex complex3 = complex2.INF.conjugate();
      complex3.NaN.negate();
      complex0.abs();
      complex3.abs();
      complex3.abs();
      Complex complex4 = complex3.INF.pow(complex1);
      complex4.INF.divide(complex1);
      Complex complex5 = complex2.subtract(complex3);
      complex0.ONE.tanh();
      complex5.nthRoot(17);
      complex0.nthRoot(1138);
      Complex complex6 = Complex.valueOf((double) 1138);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.readResolve();
      complex0.getField();
      Complex complex1 = complex0.createComplex((-2417.37179898), (-2417.37179898));
      complex1.I.add(complex0);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex2.cos();
      complex4.ZERO.pow(complex3);
      complex4.I.negate();
      Complex complex5 = complex4.sqrt1z();
      complex5.ZERO.multiply(1.695838923802857E-243);
      complex0.ONE.negate();
      complex2.readResolve();
      complex2.cos();
      complex3.isNaN();
      complex2.sinh();
      complex1.subtract(312.38340865767077);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-1809.530008));
      complex1.ONE.tan();
      complex1.NaN.add(complex0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.sinh();
      complex3.isNaN();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex2.conjugate();
      complex5.exp();
      complex5.getReal();
      complex6.nthRoot(1936);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      complex0.I.atan();
      complex0.NaN.sqrt1z();
      complex0.isNaN();
      Complex complex1 = Complex.valueOf(2470.229263063577);
      Complex complex2 = complex1.conjugate();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cosh();
      complex0.getImaginary();
      Complex complex2 = complex1.divide(289.209767);
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = Complex.valueOf(289.209767, (-96.36741119271879));
      complex4.ONE.createComplex((-96.36741119271879), 1.0300006058273187E-7);
      Complex complex5 = Complex.valueOf((double) 771);
      Complex complex6 = complex0.multiply(771);
      Complex complex7 = complex6.divide(289.209767);
      complex2.INF.getArgument();
      Complex complex8 = complex6.I.log();
      complex3.multiply(complex6);
      complex8.ZERO.hashCode();
      complex6.I.toString();
      complex2.divide(complex0);
      complex3.conjugate();
      complex2.sin();
      complex6.multiply(2043.0371);
      complex5.divide(5.795621295524984E-9);
      complex5.sinh();
      Complex complex9 = Complex.valueOf(2364.828174896938);
      complex9.sqrt();
      complex2.divide(complex1);
      complex5.cosh();
      complex9.divide(1686.51797893);
      complex1.createComplex(2.0, 0.0);
      complex2.isInfinite();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.7853981633974483);
      complex0.acos();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.negate();
      complex2.hashCode();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.INF.exp();
      complex5.add(2.0);
      Complex complex6 = Complex.valueOf(2.0);
      complex4.ONE.multiply((-3038));
      complex2.ZERO.multiply((-349));
      complex3.INF.tanh();
      complex3.createComplex(2284.3340348651914, 1953.3517);
      complex6.INF.cos();
      complex3.divide(0.0);
      Complex complex7 = complex3.multiply(complex2);
      complex6.reciprocal();
      try { 
        complex7.nthRoot((-349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -349
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.sin();
      complex2.INF.getArgument();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.sinh();
      complex6.INF.getField();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex0.readResolve();
      complex5.ZERO.createComplex(1201.5, 0.7853981633974483);
      Complex complex7 = complex5.add((-20.0));
      complex7.ZERO.tanh();
      Complex complex8 = complex7.INF.subtract(complex3);
      Complex complex9 = complex5.subtract((-20.0));
      complex7.add(0.7853981633974483);
      complex8.reciprocal();
      complex9.NaN.divide(1532.2752932103226);
      Complex complex10 = complex5.ZERO.negate();
      complex10.NaN.getArgument();
      Complex complex11 = complex0.divide(complex9);
      complex8.add((-1234.7962744));
      complex1.negate();
      complex4.getReal();
      complex1.multiply((-1.0));
      complex3.subtract(complex4);
      complex11.cos();
      Complex.valueOf(1201.5, 0.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2572.92278);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.createComplex(6.283185307179586, (-20.0));
      Complex complex2 = complex0.cosh();
      complex1.hashCode();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.INF.subtract(complex3);
      complex5.INF.log();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex0.divide((-20.0));
      complex8.INF.hashCode();
      complex0.tan();
      Complex complex9 = complex1.sqrt();
      complex5.NaN.add(6.283185307179586);
      Complex complex10 = complex3.ZERO.divide(complex4);
      Complex complex11 = Complex.valueOf((-20.0));
      complex9.equals("input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}");
      complex10.sqrt();
      complex5.ZERO.tanh();
      complex11.createComplex((-666.71), 6.283185307179586);
      complex6.divide((-3207.265053407));
      Complex.valueOf(368.0);
      complex10.atan();
      complex2.pow(6.283185307179586);
      Complex complex12 = complex7.log();
      complex12.tan();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex4.asin();
      Complex complex7 = complex2.INF.subtract(0.0);
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex7.I.atan();
      double double0 = complex2.getArgument();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex10 = complex0.INF.sinh();
      complex0.I.exp();
      Complex complex11 = complex0.tan();
      complex11.INF.negate();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex0.pow(complex1);
      complex1.INF.createComplex((-637.50362425), 0.0);
      complex1.getField();
      Complex complex13 = complex12.log();
      complex1.isInfinite();
      complex10.atan();
      Complex complex14 = complex7.exp();
      complex14.tan();
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      
      Complex complex15 = complex13.sqrt();
      complex12.subtract(0.0);
      complex2.add((-637.50362425));
      complex15.toString();
      assertSame(complex15, complex8);
      
      Complex complex16 = complex6.multiply((-2960.0542972345));
      assertEquals((-1.0), complex3.getReal(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertSame(complex16, complex9);
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-2718.3919));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      complex2.I.divide(complex0);
      List<Complex> list0 = complex1.I.nthRoot(186);
      assertEquals(186, list0.size());
      
      complex2.I.hashCode();
      Complex complex3 = complex0.NaN.sin();
      String string0 = complex2.toString();
      assertEquals("(-1.5707963267948966, 0.019182147608610277)", string0);
      
      Complex complex4 = complex1.NaN.tanh();
      assertSame(complex4, complex3);
      
      Complex complex5 = complex2.ZERO.subtract((double) 186);
      Complex complex6 = complex0.asin();
      complex2.sin();
      complex6.toString();
      Complex complex7 = complex6.exp();
      assertEquals((-0.14123592465979237), complex7.getReal(), 0.01);
      
      Complex complex8 = complex5.reciprocal();
      assertEquals((-0.005376344086021506), complex8.getReal(), 0.01);
  }
}
