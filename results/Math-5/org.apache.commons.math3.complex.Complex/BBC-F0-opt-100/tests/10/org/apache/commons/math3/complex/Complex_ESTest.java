/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:04:21 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(932.40858, Double.POSITIVE_INFINITY);
      complex1.multiply((-1340.3927651402));
      Complex complex2 = Complex.I;
      int int0 = 1106;
      Complex complex3 = complex0.multiply((-754));
      complex3.NaN.pow((double) (-754));
      try { 
        complex3.nthRoot((-754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -754
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      int int0 = 2839;
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex4.I.multiply(2839);
      complex5.NaN.negate();
      complex0.nthRoot(2839);
      complex1.readResolve();
      Complex complex6 = Complex.valueOf((-1398.702469), (-1398.702469));
      Complex complex7 = complex3.log();
      Complex complex8 = complex7.INF.conjugate();
      complex8.ZERO.hashCode();
      Complex complex9 = Complex.NaN;
      complex5.NaN.divide(complex9);
      Complex complex10 = complex6.ONE.tanh();
      complex10.NaN.tan();
      complex2.nthRoot(2839);
      complex5.multiply(2839);
      Complex complex11 = complex3.atan();
      complex11.abs();
      // Undeclared exception!
      complex1.nthRoot(2839);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(6.05565907641637E157);
      Complex complex1 = Complex.valueOf((-558.6917953230212), 6.05565907641637E157);
      complex1.ONE.toString();
      complex0.I.multiply(complex1);
      complex0.sqrt1z();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(3.405124925700107E-8);
      complex1.abs();
      complex0.tan();
      Complex complex2 = new Complex(3.405124925700107E-8, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(2689.67902653614);
      Complex complex2 = Complex.valueOf(20.0, (-20.0));
      complex2.multiply(complex1);
      complex2.tan();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2689.67902653614, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide((-74.901018045));
      Complex complex3 = Complex.valueOf((-74.901018045), 491.8986429698238);
      Complex complex4 = complex2.multiply(complex1);
      complex4.readResolve();
      complex0.negate();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.cos();
      complex3.tan();
      complex4.acos();
      complex6.readResolve();
      try { 
        complex0.nthRoot((-1661));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,661
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.tan();
      complex3.NaN.subtract((-5188.0));
      complex2.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = Complex.valueOf((-1240.0));
      complex1.tanh();
      complex2.sqrt1z();
      Complex complex3 = Complex.ONE;
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 4570196.9626707155);
      complex0.hashCode();
      Complex complex1 = new Complex((-565.3839538658394));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2243.0), (-1252.398649609434));
      Complex complex1 = complex0.ZERO.subtract((-1252.398649609434));
      Complex complex2 = complex0.ONE.add((-2243.0));
      Complex complex3 = complex2.I.multiply(complex0);
      complex0.abs();
      complex2.getField();
      Complex complex4 = complex0.negate();
      complex4.readResolve();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex4.exp();
      Complex complex7 = complex0.NaN.pow(complex6);
      Complex complex8 = complex0.divide((-2243.0));
      complex6.asin();
      complex8.exp();
      complex0.divide(complex3);
      Complex complex9 = complex2.pow(complex5);
      complex6.ONE.asin();
      Complex complex10 = complex9.pow(complex2);
      complex7.asin();
      complex2.log();
      complex1.asin();
      Complex.valueOf((-3412.3342));
      complex10.createComplex(7089.594211606603, (-3412.3342));
      complex1.divide((-2.086162567138672E-7));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(Double.NaN);
      Complex complex3 = complex2.log();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.add(complex2);
      complex2.readResolve();
      complex0.reciprocal();
      complex3.ONE.toString();
      complex2.ONE.getArgument();
      Complex complex4 = Complex.INF;
      Complex.valueOf(0.0);
      complex4.divide(complex3);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(8.98079409878202E234);
      complex1.tanh();
      Complex complex2 = Complex.I;
      complex2.sinh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf(8.98079409878202E234);
      complex4.asin();
      Complex complex5 = Complex.valueOf(20.0);
      complex5.negate();
      Complex complex6 = Complex.INF;
      complex2.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      complex0.NaN.atan();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.add(complex2);
      complex2.readResolve();
      complex1.abs();
      complex1.toString();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = Complex.valueOf(1365.8);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.subtract(complex6);
      Complex complex8 = complex2.pow(Double.NaN);
      complex3.add(complex8);
      complex4.tanh();
      try { 
        complex7.nthRoot((-813));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -813
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-3592.656271222));
      complex0.getArgument();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.reciprocal();
      complex0.cos();
      complex3.abs();
      complex3.toString();
      Complex complex4 = new Complex((-1873.167913815456), Double.POSITIVE_INFINITY);
      complex0.atan();
      complex2.pow(Double.POSITIVE_INFINITY);
      complex0.add(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.tanh();
      complex5.sqrt();
      Complex complex7 = Complex.INF;
      complex7.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(371.4288, 371.4288);
      Complex complex1 = Complex.valueOf(371.4288);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ZERO.multiply(233);
      Complex complex4 = complex3.INF.subtract((-6075.973401));
      Complex complex5 = complex4.ZERO.multiply((-2146809974));
      Complex complex6 = complex5.ONE.divide(complex4);
      Complex complex7 = complex0.ONE.sin();
      complex0.ONE.getArgument();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex1.tan();
      complex0.nthRoot(1283);
      Complex complex10 = complex4.ONE.subtract(complex1);
      complex7.INF.tanh();
      Complex.valueOf((double) (-2146809974));
      Complex complex11 = complex7.divide((-1564.4751026));
      complex7.getField();
      Complex complex12 = complex3.multiply(complex11);
      complex12.INF.tan();
      complex12.divide(0.0);
      complex12.NaN.reciprocal();
      Complex complex13 = complex4.multiply(complex5);
      complex6.readResolve();
      complex2.negate();
      complex10.cos();
      complex13.createComplex((-2146809974), (-1462.6906));
      complex1.cos();
      Complex complex14 = complex9.conjugate();
      complex8.acos();
      complex14.negate();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-396.7179565411237), 4.981496462621207E-273);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = Complex.valueOf(4.981496462621207E-273, 20.0);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex7.asin();
      complex6.reciprocal();
      Complex complex9 = new Complex((-396.7179565411237));
      Complex complex10 = complex9.sqrt();
      complex8.multiply(3048);
      complex7.pow(3.9606375434872095E247);
      complex2.divide(complex10);
      complex7.tanh();
      complex4.createComplex((-1221.062522), 3.9606375434872095E247);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex((-0.7761552401806218));
      Complex complex4 = Complex.NaN;
      complex0.tan();
      Complex complex5 = complex2.reciprocal();
      complex5.sqrt();
      complex1.multiply(1);
      complex4.pow(136.9);
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      Complex complex1 = complex0.NaN.atan();
      complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.add(complex2);
      complex2.readResolve();
      complex3.readResolve();
      Complex complex4 = complex0.reciprocal();
      complex3.ONE.toString();
      complex2.ONE.getArgument();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.I;
      complex6.equals(complex4);
      Complex complex7 = complex1.sinh();
      Complex.valueOf(0.9999993659203217, 0.0);
      Complex complex8 = new Complex(0.0);
      Complex.valueOf(0.0);
      complex8.divide(complex7);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1858.99835680368, 1858.99835680368);
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = complex0.add((-20.16402517));
      complex2.getArgument();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex1.cos();
      complex5.abs();
      complex1.toString();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.pow((-20.16402517));
      complex4.add(complex1);
      complex4.tanh();
      Complex complex9 = complex0.conjugate();
      complex9.sqrt();
      Complex.valueOf(1858.99835680368);
      complex8.divide(Double.NaN);
      complex6.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-3186.721605161752), (-3186.721605161752));
      Complex complex1 = Complex.ZERO;
      complex1.readResolve();
      complex1.readResolve();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.valueOf(0.0012603412367739569, 6.283185307179586);
      Complex complex6 = Complex.NaN;
      complex5.subtract(complex2);
      Complex complex7 = new Complex(6.283185307179586, (-3186.721605161752));
      complex7.cos();
      complex4.pow(6.283185307179586);
      try { 
        complex5.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = new Complex(20.0);
      complex0.hashCode();
      complex1.atan();
      complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.4165862935961285E-21);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.subtract(3.4165862935961285E-21);
      complex4.I.multiply(complex2);
      Complex complex5 = complex2.ONE.subtract(complex1);
      Complex complex6 = complex2.createComplex(1.5564115047454834, 3.4165862935961285E-21);
      complex6.ZERO.tanh();
      complex6.pow(complex1);
      complex6.ZERO.sin();
      complex4.divide(complex5);
      complex3.tanh();
      int int0 = 5101;
      // Undeclared exception!
      complex6.nthRoot(5101);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(984.7351270341853, (-1.642361029990822E65));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.NaN;
      complex2.readResolve();
      complex1.readResolve();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.log();
      Complex.valueOf(4.981496462621207E-273, (-1.642361029990822E65));
      complex0.sqrt();
      Complex complex6 = Complex.I;
      complex6.tan();
      Complex complex7 = complex6.asin();
      complex7.ZERO.sqrt();
      complex4.reciprocal();
      Complex complex8 = complex3.sqrt();
      complex8.multiply((-3524));
      complex0.pow(658.128738304);
      Complex complex9 = complex5.divide(complex3);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1858.99835680368, 1858.99835680368);
      Complex complex1 = complex0.add(1858.99835680368);
      complex1.NaN.divide(8.98079409878202E234);
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.sqrt();
      complex0.readResolve();
      complex3.log();
      complex1.tan();
      complex3.hashCode();
      Complex complex4 = new Complex(8.98079409878202E234, (-2102.0));
      Complex complex5 = complex1.subtract(complex0);
      complex4.isInfinite();
      Complex.valueOf(8.98079409878202E234, 993.9783739256);
      complex5.getReal();
      complex0.createComplex(0.0, 6144.8);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-396.7179565411237), 4.981496462621207E-273);
      complex0.NaN.readResolve();
      complex0.INF.readResolve();
      complex0.NaN.sqrt();
      Complex complex1 = complex0.log();
      complex0.multiply(0);
      Complex.valueOf((double) 0, (-4352.662479));
      Complex complex2 = new Complex(1216.3074);
      complex2.add(4.981496462621207E-273);
      Complex complex3 = Complex.I;
      complex3.subtract(3535.266117);
      Complex complex4 = Complex.I;
      complex4.getReal();
      complex1.conjugate();
      Complex complex5 = Complex.INF;
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt();
      Complex complex1 = complex0.atan();
      complex1.I.getField();
      Complex complex2 = complex0.conjugate();
      complex1.add((double) 0);
      Complex complex3 = complex2.subtract((double) 0);
      complex1.getReal();
      complex3.conjugate();
      Complex complex4 = Complex.INF;
      complex0.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-396.7179565411237), 4.981496462621207E-273);
      Complex complex1 = (Complex)complex0.NaN.readResolve();
      Complex complex2 = (Complex)complex0.INF.readResolve();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.multiply(0);
      Complex.valueOf((double) 0, (-4352.662479));
      complex0.sinh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.INF;
      complex7.equals(complex2);
      Complex complex8 = complex1.sinh();
      complex4.sin();
      complex5.asin();
      Complex complex9 = Complex.NaN;
      complex3.divide(complex8);
      complex0.subtract(0.0012603432387550129);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = Complex.valueOf(0.6921701431274414);
      complex3.cos();
      complex2.hashCode();
      Complex complex4 = complex1.multiply(955);
      Complex complex5 = Complex.valueOf(2033.8598115412, (-4352.662479));
      Complex complex6 = complex4.sinh();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.INF;
      complex5.subtract((-4352.662479));
      complex6.createComplex((-1481.22088982), 0.6921701431274414);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1858.99835680368, 1858.99835680368);
      Complex complex1 = complex0.add(1858.99835680368);
      Complex complex2 = complex1.NaN.divide(8.98079409878202E234);
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex3.sqrt();
      Complex.valueOf(8.98079409878202E234, 8.98079409878202E234);
      Complex complex5 = complex0.sinh();
      Complex complex6 = Complex.INF;
      complex5.equals(complex6);
      complex2.sinh();
      complex5.sin();
      Complex complex7 = new Complex(1858.99835680368);
      complex7.asin();
      Complex complex8 = Complex.valueOf(1858.99835680368);
      complex8.divide(complex5);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.tanh();
      Complex complex1 = Complex.valueOf(4115.522959186);
      Complex complex2 = complex0.cos();
      complex0.I.hashCode();
      Complex complex3 = complex2.I.multiply((-2068));
      Complex complex4 = complex1.subtract(complex3);
      complex1.cos();
      Complex complex5 = complex4.pow(550.510668112);
      complex5.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = (Complex)complex3.readResolve();
      Complex complex6 = (Complex)complex4.readResolve();
      Complex complex7 = complex0.reciprocal();
      complex4.ONE.toString();
      complex3.ONE.getArgument();
      complex7.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.pow((-8.146080588190463E-9));
      Complex complex9 = complex8.cosh();
      complex1.tan();
      complex5.asin();
      complex2.reciprocal();
      complex6.sqrt();
      complex9.multiply(3198);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1479.56), (-1479.56));
      Complex complex2 = complex1.add(3245.898621702);
      Complex complex3 = complex1.add(2716.214);
      complex1.getArgument();
      Complex complex4 = complex0.cos();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.cos();
      complex4.abs();
      complex4.toString();
      Complex complex7 = complex6.subtract(complex3);
      Complex complex8 = complex7.atan();
      complex4.pow(1812.5441289762866);
      Complex complex9 = complex8.add(complex4);
      Complex complex10 = complex3.asin();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex2.conjugate();
      complex11.cos();
      complex10.cos();
      Complex complex13 = complex12.conjugate();
      Complex complex14 = Complex.INF;
      complex13.divide((-1.0));
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1442.683105206163, 1442.683105206163);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.INF;
      complex2.I.sqrt1z();
      Complex complex3 = complex0.multiply(complex2);
      complex3.INF.divide(complex1);
      complex1.subtract(396.7179565411237);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-257.38686835190333));
      Complex complex2 = Complex.valueOf(2686.066);
      complex2.readResolve();
      complex0.readResolve();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.log();
      complex3.sqrt();
      Complex complex7 = Complex.ONE;
      complex7.tan();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex6.reciprocal();
      complex8.sqrt();
      complex6.multiply(315);
      complex9.pow((double) 315);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1812.5441289762866), (-1812.5441289762866));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.reciprocal();
      complex2.toString();
      complex1.getArgument();
      Complex complex3 = complex2.multiply((-978.1582330450301));
      Complex complex4 = complex0.pow(0.41421356237309515);
      Complex complex5 = Complex.valueOf(0.0, (-0.9026853619330714));
      complex5.tanh();
      Complex complex6 = complex3.exp();
      Complex.valueOf((-537.1));
      complex6.readResolve();
      Complex complex7 = new Complex((-1812.5441289762866), 2815.261);
      complex7.log();
      complex1.tan();
      complex4.hashCode();
      Complex complex8 = Complex.ONE;
      complex8.createComplex((-171.218144), 0.41421356237309515);
      complex4.subtract(complex7);
      complex4.isInfinite();
      complex0.sin();
      complex3.getReal();
      Complex complex9 = new Complex(6.283185307179586, 0.0037663263461524933);
      complex9.createComplex((-2169.2515160836156), (-692.96191068405));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-224.5163), 2.0);
      Complex complex1 = complex0.INF.createComplex(2.0, (-224.5163));
      Complex complex2 = complex1.ONE.sqrt();
      complex0.sinh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.divide(complex1);
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = Complex.valueOf((-569.26176015));
      Complex complex7 = complex3.add(complex6);
      complex5.sinh();
      complex2.conjugate();
      complex1.pow((-2.4591344661022708E-8));
      Complex complex8 = Complex.valueOf(2.0, (-2477.1836502));
      complex8.multiply((-224.5163));
      Complex complex9 = Complex.valueOf(2.0);
      complex7.add(complex9);
      complex2.asin();
      complex2.tanh();
      complex8.conjugate();
      complex9.cos();
      complex7.cos();
      complex5.readResolve();
      Complex.valueOf(2.0, (-1124.26));
      complex4.isNaN();
      Complex complex10 = Complex.NaN;
      complex10.acos();
      complex1.sin();
      complex10.reciprocal();
      complex6.tanh();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.conjugate();
      complex2.getArgument();
      complex0.nthRoot(957);
      Complex complex4 = new Complex(4285.0, 957);
      Complex complex5 = complex0.sin();
      complex0.hashCode();
      complex2.log();
      Complex complex6 = complex1.log();
      Complex complex7 = complex5.add(2.356194490192345);
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex1.divide(complex4);
      complex7.NaN.pow(4285.0);
      complex3.reciprocal();
      complex0.nthRoot(1);
      complex8.getImaginary();
      complex6.sqrt1z();
      Complex complex10 = complex6.sqrt();
      complex9.exp();
      complex7.negate();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(complex0);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.exp();
      complex2.negate();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.divide(265.5107147105174);
      Complex complex8 = Complex.valueOf(998.528, Double.NaN);
      complex8.divide(complex3);
      Complex complex9 = complex3.multiply(364);
      Complex complex10 = complex6.add((-2900.37345));
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.tan();
      complex10.readResolve();
      complex7.sin();
      Complex complex13 = Complex.valueOf((-268.4445951144519));
      complex5.pow(complex13);
      Complex complex14 = Complex.INF;
      complex14.getReal();
      complex12.acos();
      Complex complex15 = complex4.sin();
      complex13.reciprocal();
      complex9.tanh();
      complex15.getReal();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.NaN.add(6.283185307179586);
      Complex complex2 = complex1.INF.add((-1.486720391901626E-9));
      complex0.ONE.getArgument();
      complex1.INF.cos();
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex0.ZERO.cos();
      complex3.abs();
      complex0.toString();
      Complex complex5 = complex1.subtract(complex0);
      complex5.INF.atan();
      Complex complex6 = complex3.pow(6.283185307179586);
      Complex complex7 = complex1.multiply(6.283185307179586);
      Complex complex8 = complex0.INF.add(complex7);
      Complex complex9 = complex8.ONE.asin();
      complex9.NaN.subtract(0.0);
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex11.INF.cos();
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.cos();
      complex12.readResolve();
      Complex.valueOf(12.41544734030846, (-20.0));
      complex10.isNaN();
      complex12.acos();
      Complex complex15 = complex6.sin();
      complex15.reciprocal();
      complex14.tanh();
      complex2.getReal();
      complex4.multiply(17);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = 1858.99835680368;
      Complex complex0 = Complex.valueOf(1858.99835680368, 1858.99835680368);
      Complex complex1 = complex0.add(1858.99835680368);
      complex1.NaN.divide(8.98079409878202E234);
      Complex complex2 = complex0.ONE.tanh();
      complex2.sqrt();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
      Complex complex2 = complex0.pow(763.115659510887);
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex3.ZERO.add(complex0);
      Complex complex4 = complex1.sin();
      complex4.NaN.add(complex0);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.NaN.sin();
      Complex.valueOf(1526829.0462381945);
      complex6.asin();
      complex6.ONE.add(763.115659510887);
      complex4.I.sqrt1z();
      complex5.ONE.sinh();
      Complex complex7 = complex1.log();
      Complex complex8 = complex3.divide((-2682.1209033917185));
      Complex complex9 = Complex.valueOf((-1474383.6071947347), (-1474383.6071947347));
      complex7.multiply(complex9);
      Complex complex10 = complex2.pow(complex5);
      Complex complex11 = complex5.createComplex((-2682.1209033917185), 0.32905077934265137);
      Complex complex12 = complex11.acos();
      complex11.atan();
      Complex complex13 = complex12.ONE.add(complex2);
      complex4.acos();
      complex13.cosh();
      complex5.multiply(245.1135803235167);
      complex10.tan();
      complex1.exp();
      complex8.createComplex((-1211.337727160832), (-134.6420787513));
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = Complex.valueOf(4115.522959186);
      Complex complex3 = complex0.cos();
      complex3.nthRoot(1307772550);
      Complex complex4 = complex1.multiply(1307772550);
      Complex complex5 = complex4.sin();
      complex0.hashCode();
      Complex complex6 = complex2.log();
      Complex complex7 = complex5.log();
      Complex complex8 = complex6.add((double) 1307772550);
      complex7.conjugate();
      Complex complex9 = new Complex(1307772550);
      complex9.divide(complex3);
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = new Complex(0.0, 0.772543162027621);
      complex11.nthRoot(3599);
      Complex complex12 = Complex.INF;
      complex12.getImaginary();
      complex10.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.exp();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-224.5163), 2.0);
      Complex complex1 = complex0.INF.createComplex(2.0, (-224.5163));
      complex1.hashCode();
      Complex complex2 = complex1.ONE.sqrt();
      complex0.sinh();
      Complex complex3 = complex0.asin();
      complex3.INF.divide(complex1);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = Complex.valueOf((-569.26176015));
      Complex complex6 = complex0.sinh();
      complex6.conjugate();
      complex4.tan();
      complex5.hashCode();
      Complex complex7 = Complex.valueOf(169.570692089973, (-364.130249));
      Complex complex8 = complex7.exp();
      Complex complex9 = new Complex((-984.3215863763219));
      Complex complex10 = complex8.multiply(complex9);
      complex4.add((-1842.3421341852531));
      complex5.divide(complex2);
      Complex complex11 = complex10.pow((-20.0));
      complex3.hashCode();
      complex6.sin();
      complex5.isInfinite();
      Complex.valueOf(1.0340436948077763E-129);
      complex10.I.tanh();
      complex2.cos();
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-224.5163), 2.0);
      Complex complex1 = complex0.INF.createComplex(2.0, (-224.5163));
      complex1.hashCode();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.divide(complex1);
      complex0.pow(complex3);
      Complex complex5 = Complex.valueOf((-569.26176015));
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = complex6.sinh();
      complex5.conjugate();
      Complex complex8 = Complex.ZERO;
      complex8.tan();
      complex0.hashCode();
      Complex.valueOf((-224.5163), (-20.0));
      complex2.exp();
      Complex complex9 = new Complex(2.0);
      Complex complex10 = complex4.multiply(complex9);
      complex2.add(1.0);
      complex0.divide(complex8);
      complex7.pow((-20.0));
      complex10.hashCode();
      complex5.sin();
      complex1.isInfinite();
      complex8.multiply(1.0);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      Complex complex1 = complex0.NaN.atan();
      complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.add(complex2);
      complex2.readResolve();
      complex3.readResolve();
      Complex complex4 = complex0.reciprocal();
      complex3.ONE.toString();
      complex2.ONE.getArgument();
      Complex complex5 = complex4.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.pow((-8.146080588190463E-9));
      Complex complex7 = complex3.tanh();
      complex4.NaN.exp();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.readResolve();
      Complex complex9 = complex4.log();
      complex9.tan();
      complex2.hashCode();
      complex5.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex5.subtract(complex7);
      complex0.isInfinite();
      complex6.sin();
      complex1.getReal();
      complex8.createComplex(9.45732984079136E214, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex0.atan();
      complex3.I.getField();
      complex0.add((double) 0);
      complex2.conjugate();
      Complex complex4 = complex3.add((double) 0);
      complex4.ONE.subtract((-652.4737889));
      complex4.getReal();
      complex2.conjugate();
      Complex complex5 = Complex.INF;
      complex5.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-224.5163), 2.0);
      Complex complex1 = complex0.INF.createComplex(2.0, (-224.5163));
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.asin();
      complex4.INF.divide(complex1);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = Complex.valueOf((-569.26176015));
      complex4.add(complex6);
      Complex complex7 = complex5.sinh();
      complex2.conjugate();
      complex2.tanh();
      complex0.exp();
      complex1.log();
      complex7.readResolve();
      complex0.log();
      Complex complex8 = complex1.tan();
      complex1.hashCode();
      complex1.createComplex((-2007.939030503184), (-224.5163));
      complex3.subtract(complex7);
      Complex complex9 = Complex.valueOf((-704.26777998));
      complex9.isInfinite();
      Complex complex10 = new Complex((-3.5821668044872306E-285));
      complex10.sin();
      complex8.getReal();
      complex4.getReal();
      Complex complex11 = complex2.conjugate();
      complex11.divide(1.31961989402771);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.tanh();
      Complex.valueOf(4115.522959186);
      Complex complex1 = complex0.cos();
      complex0.I.hashCode();
      complex1.I.multiply((-2068));
      Complex complex2 = Complex.valueOf(3.529920406834134E113, 2033.8598115412);
      complex0.sin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.pow(complex4);
      complex5.getReal();
      complex0.acos();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.reciprocal();
      complex7.tanh();
      Complex complex8 = Complex.I;
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.I.multiply(complex2);
      complex3.I.exp();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex2.NaN.conjugate();
      complex6.I.divide(265.5107147105174);
      Complex complex7 = complex5.divide(complex1);
      Complex complex8 = complex5.multiply(364);
      complex2.ZERO.add((double) 364);
      Complex complex9 = complex8.I.tan();
      complex2.readResolve();
      complex4.sinh();
      complex4.equals(complex9);
      Complex complex10 = Complex.valueOf((double) 364);
      complex10.sinh();
      Complex complex11 = Complex.valueOf(2972.317539127058, (double) 364);
      complex11.sin();
      complex7.asin();
      Complex complex12 = new Complex(265.5107147105174);
      complex12.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.conjugate();
      complex1.getArgument();
      Complex complex4 = Complex.valueOf(1.5707963267948966);
      complex4.nthRoot(930);
      Complex complex5 = complex1.multiply(930);
      Complex complex6 = complex1.sin();
      complex6.hashCode();
      Complex complex7 = complex1.log();
      complex6.log();
      Complex complex8 = complex0.add(1561.32204);
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex7.divide(complex3);
      complex10.reciprocal();
      complex9.nthRoot(1);
      complex3.getImaginary();
      Complex complex11 = Complex.valueOf(Double.NaN, Double.NaN);
      complex11.sqrt1z();
      complex8.sqrt();
      Complex complex12 = Complex.ZERO;
      complex12.exp();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = Complex.valueOf(0.6921701431274414);
      Complex complex4 = complex3.cos();
      complex2.hashCode();
      Complex complex5 = complex1.multiply(955);
      Complex.valueOf(2033.8598115412, (-4352.662479));
      complex5.sinh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.INF;
      complex6.equals(complex7);
      complex4.sinh();
      Complex complex8 = complex6.sin();
      complex1.asin();
      Complex complex9 = Complex.NaN;
      complex8.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.I.multiply(complex2);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex2.NaN.conjugate();
      complex6.I.divide(265.5107147105174);
      complex5.divide(complex1);
      Complex complex7 = complex5.multiply(364);
      complex2.ZERO.add((double) 364);
      complex7.I.tan();
      complex2.readResolve();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.pow(complex0);
      complex0.getReal();
      Complex complex10 = complex4.acos();
      complex10.I.sin();
      complex9.reciprocal();
      Complex complex11 = complex10.tanh();
      complex11.getReal();
      Complex.valueOf(0.9949751551566894);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2549.976750862727), (-2549.976750862727));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.divide((-2549.976750862727));
      complex2.divide(complex3);
      Complex complex4 = complex3.multiply(364);
      complex4.add(265.5107147105174);
      Complex complex5 = complex4.tan();
      complex5.readResolve();
      Complex complex6 = Complex.valueOf((double) 364);
      complex6.sin();
      Complex complex7 = complex1.pow(complex3);
      complex6.getReal();
      Complex complex8 = Complex.ZERO;
      complex8.acos();
      complex4.sin();
      Complex complex9 = complex7.reciprocal();
      complex9.tanh();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.I.multiply(complex2);
      complex3.I.exp();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex2.NaN.conjugate();
      complex6.I.divide(265.5107147105174);
      complex5.divide(complex1);
      Complex complex7 = complex5.multiply(364);
      complex2.ZERO.add((double) 364);
      complex7.I.tan();
      complex2.readResolve();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.pow(complex0);
      complex0.getReal();
      Complex complex10 = complex4.acos();
      complex10.I.sin();
      complex9.reciprocal();
      Complex complex11 = complex10.tanh();
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-224.5163), 2.0);
      Complex complex1 = complex0.INF.createComplex(2.0, (-224.5163));
      complex1.hashCode();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.asin();
      complex4.INF.divide(complex1);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = Complex.valueOf((-569.26176015));
      Complex complex7 = complex4.add(complex6);
      Complex complex8 = complex5.sinh();
      complex2.conjugate();
      Complex complex9 = complex7.tan();
      complex9.NaN.hashCode();
      Complex.valueOf(2.0, (-984.3215863763219));
      complex9.I.exp();
      Complex complex10 = new Complex(605.86);
      complex8.multiply(complex10);
      Complex complex11 = complex3.add(0.0);
      complex11.I.divide(complex5);
      Complex complex12 = complex10.pow(1024.3277);
      complex12.hashCode();
      complex8.sin();
      complex12.isInfinite();
      complex7.multiply(605.86);
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.sinh();
      complex0.getArgument();
      Complex complex2 = complex0.I.negate();
      complex0.I.createComplex(0.0, (-20.0));
      complex0.getArgument();
      Complex complex3 = complex2.asin();
      complex2.abs();
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex3.ONE.multiply((-137));
      complex5.ZERO.getArgument();
      Complex.valueOf((-2456.8830589558), 0.0);
      Complex complex6 = complex3.atan();
      complex6.INF.log();
      complex6.ONE.acos();
      Complex complex7 = complex1.pow(0.0);
      Complex complex8 = complex1.subtract(0.0);
      Complex complex9 = complex1.atan();
      Complex complex10 = complex1.sqrt1z();
      complex6.ONE.sinh();
      complex10.ZERO.abs();
      Complex complex11 = complex3.pow(0.0);
      complex11.NaN.divide(complex5);
      complex11.INF.abs();
      complex9.toString();
      complex7.getField();
      complex6.reciprocal();
      Complex complex12 = complex1.pow(complex4);
      complex3.exp();
      complex12.multiply(0);
      complex0.exp();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      complex0.readResolve();
      Complex complex1 = complex0.add(2801.35569419);
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.tanh();
      complex3.I.hashCode();
      Complex complex4 = complex0.sqrt();
      complex4.NaN.multiply(complex1);
      complex3.I.asin();
      complex3.getArgument();
      Complex complex5 = complex3.subtract(complex2);
      Complex complex6 = complex5.sinh();
      complex1.getField();
      complex2.asin();
      Complex.valueOf(Double.NaN);
      complex6.isInfinite();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.toString();
      complex0.getField();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.atan();
      complex0.readResolve();
      complex3.ONE.readResolve();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex3.acos();
      complex6.I.multiply(complex0);
      Complex complex7 = complex6.atan();
      complex4.subtract(1480.20443515155);
      complex7.INF.atan();
      Complex complex8 = complex2.add(0.0);
      complex5.readResolve();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex2.pow(0.0);
      complex10.I.tanh();
      complex2.subtract(complex10);
      complex9.multiply(0.0);
      Complex.valueOf((-1.0), (-1937.534));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 1.0;
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex1.ONE.getField();
      Complex complex3 = complex2.NaN.divide(1.0);
      complex0.NaN.nthRoot(1909);
      complex0.log();
      complex0.cos();
      complex3.INF.readResolve();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-6018.6));
      complex0.ONE.pow((-256.49666521));
      double double0 = 1517.0783;
      Complex complex1 = complex0.NaN.divide(1517.0783);
      Complex complex2 = complex1.I.sinh();
      complex0.NaN.abs();
      complex0.NaN.abs();
      Complex complex3 = complex0.tanh();
      int int0 = 1385;
      complex3.INF.sinh();
      complex1.ONE.multiply(1385);
      complex1.sinh();
      Complex complex4 = complex2.I.divide(complex3);
      complex4.ONE.cos();
      complex2.isNaN();
      complex3.getReal();
      Complex complex5 = complex0.add(0.9925454353191863);
      complex5.INF.getField();
      int int1 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getField();
      Complex complex1 = complex0.add(0.0);
      complex1.ZERO.createComplex((-1194.283507683933), 0.0);
      Complex complex2 = complex1.ONE.multiply(591.555535208);
      complex2.add(complex1);
      complex2.I.toString();
      Complex complex3 = complex2.I.sqrt();
      complex1.INF.atan();
      Complex complex4 = complex1.add(0.0);
      complex4.NaN.abs();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex5.ONE.asin();
      complex5.ZERO.sin();
      Complex complex7 = new Complex(0.0, 0.0);
      complex7.ZERO.getArgument();
      Complex complex8 = complex5.pow(complex7);
      Complex complex9 = complex8.I.multiply((-906));
      complex0.isInfinite();
      complex7.I.divide(2224.148945619454);
      complex5.pow((-20.0));
      complex5.isNaN();
      complex6.divide(complex3);
      complex9.toString();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 496;
      complex0.ZERO.add((-1059.1));
      complex0.I.multiply(496);
      Complex complex1 = complex0.ZERO.sin();
      complex1.ONE.getArgument();
      complex0.NaN.getField();
      complex0.ONE.hashCode();
      int int1 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.I.reciprocal();
      complex1.INF.nthRoot(17);
      Complex.valueOf(0.0);
      Complex complex3 = complex2.INF.tanh();
      complex3.negate();
      complex3.I.divide(0.0);
      complex2.ZERO.subtract(0.0);
      complex2.ONE.subtract(0.24740394949913025);
      Complex complex4 = complex0.negate();
      complex4.sqrt();
      Complex complex5 = complex0.conjugate();
      complex5.hashCode();
      complex5.I.multiply(complex1);
      Complex complex6 = Complex.valueOf(886.643);
      Complex complex7 = complex6.reciprocal();
      complex7.INF.multiply(complex2);
      Complex complex8 = complex6.I.conjugate();
      complex5.subtract(complex6);
      complex2.abs();
      Complex complex9 = new Complex(0.0, 0.0);
      complex9.I.abs();
      complex6.add(complex9);
      complex7.sqrt1z();
      complex8.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.INF.cosh();
      complex3.ONE.getField();
      complex3.I.tan();
      Complex complex4 = Complex.valueOf(3626.92271926, 3626.92271926);
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = Complex.valueOf((-1324.4719652358986), 1527.09);
      complex1.getImaginary();
      Complex complex7 = complex1.add(complex6);
      complex4.NaN.add(3626.92271926);
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = complex7.add(complex5);
      complex6.I.subtract(complex8);
      complex9.ONE.atan();
      Complex complex10 = Complex.valueOf(1.1595585743839232E-212, 3626.92271926);
      Complex complex11 = complex10.subtract(3626.92271926);
      Complex complex12 = complex2.divide(complex4);
      complex12.acos();
      complex7.readResolve();
      Complex complex13 = complex5.sqrt();
      complex13.hashCode();
      complex4.I.pow(complex10);
      Complex complex14 = complex11.cosh();
      complex14.atan();
      complex11.add(complex5);
      complex1.log();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-396.7179565411237), 4.981496462621207E-273);
      complex0.NaN.readResolve();
      complex0.INF.readResolve();
      complex0.NaN.sqrt();
      Complex complex1 = complex0.log();
      complex1.INF.log();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.asin();
      complex4.INF.reciprocal();
      Complex complex5 = complex4.sqrt();
      complex3.multiply(315);
      complex3.pow(3.3057007442449645E-37);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.NaN.add(6.283185307179586);
      complex1.INF.add((-1.486720391901626E-9));
      complex0.ONE.getArgument();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex0.ZERO.cos();
      complex3.abs();
      complex0.toString();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex3.pow(6.283185307179586);
      Complex complex8 = complex1.multiply(6.283185307179586);
      Complex complex9 = complex0.INF.add(complex8);
      complex9.ONE.asin();
      Complex complex10 = complex7.tanh();
      Complex complex11 = complex10.ONE.conjugate();
      complex11.INF.cos();
      Complex complex12 = complex11.INF.cos();
      complex12.readResolve();
      Complex.valueOf(0.0, 6.283185307179586);
      complex2.isNaN();
      complex3.ONE.sqrt1z();
      Complex complex13 = complex1.multiply(0);
      complex4.getReal();
      Complex complex14 = complex3.divide(complex13);
      complex8.exp();
      complex6.add(complex14);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.ONE.divide(complex0);
      complex1.ZERO.exp();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex4.getArgument();
      Complex complex8 = complex0.acos();
      complex8.pow(complex7);
      Complex complex9 = complex6.exp();
      complex9.INF.negate();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex10.I.pow(complex5);
      complex11.ONE.toString();
      complex5.divide(3853.144262534164);
      Complex complex12 = Complex.NaN;
      complex12.ONE.toString();
      complex4.equals(complex12);
      complex10.getArgument();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(45.21);
      complex0.abs();
      Complex complex1 = complex0.asin();
      complex1.ZERO.getArgument();
      Complex complex2 = complex1.createComplex((-2262.85089211), 0.0);
      Complex complex3 = complex0.ONE.acos();
      complex3.INF.divide((-831.8035));
      complex3.I.exp();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.pow((-471.711134));
      Complex complex7 = complex5.ZERO.add(2571.335951389);
      Complex complex8 = complex2.ONE.sinh();
      complex2.add(45.21);
      complex8.pow(45.21);
      complex0.hashCode();
      complex0.nthRoot(1875);
      complex0.abs();
      complex2.readResolve();
      complex6.atan();
      complex8.pow(complex7);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow((-384.39766231));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.divide(460.61048004);
      complex1.nthRoot(1);
      complex0.getArgument();
      complex0.readResolve();
      Complex complex2 = complex0.sinh();
      complex2.hashCode();
      complex2.INF.cosh();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.asin();
      complex4.INF.multiply(1);
      complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-946.227));
      complex1.I.getArgument();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.ONE.sqrt();
      Complex complex4 = complex3.I.multiply(0.0);
      Complex complex5 = complex0.multiply((-1.17260039161597E-7));
      Complex complex6 = complex5.add(complex0);
      complex5.ONE.subtract(complex2);
      complex3.add(complex2);
      Complex complex7 = complex4.ONE.exp();
      complex5.ZERO.sinh();
      Complex complex8 = complex0.conjugate();
      complex0.nthRoot(621);
      complex6.isInfinite();
      complex3.add(complex1);
      complex3.cosh();
      complex4.toString();
      complex1.hashCode();
      complex7.nthRoot(621);
      complex8.asin();
      complex4.exp();
      complex2.atan();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1812.5441289762866), (-1812.5441289762866));
      Complex complex1 = complex0.cosh();
      complex1.NaN.pow(2.9271223293841774E-106);
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf(0.0);
      complex0.getField();
      Complex complex4 = complex0.pow((-1812.5441289762866));
      complex4.tan();
      complex2.createComplex(2.0, 6.283185307179586);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.createComplex(0.0, 1253.984585059957);
      Complex complex4 = complex3.I.sinh();
      complex3.NaN.add(0.0);
      Complex complex5 = complex3.add(complex0);
      complex3.cosh();
      Complex complex6 = complex2.divide(0.0);
      complex0.reciprocal();
      complex5.pow(complex0);
      complex0.isNaN();
      complex6.isNaN();
      complex4.multiply(2718.996473709);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      complex1.ZERO.conjugate();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.INF.conjugate();
      complex0.hashCode();
      complex0.I.pow(0.0);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.I.asin();
      Complex complex5 = Complex.valueOf(1073.18696163, 0.0);
      Complex complex6 = complex0.I.cos();
      complex6.ZERO.getArgument();
      complex5.readResolve();
      complex5.ZERO.multiply(0.0);
      Complex complex7 = complex0.INF.log();
      Complex complex8 = complex0.tan();
      complex5.readResolve();
      Complex complex9 = complex7.pow(complex8);
      Complex complex10 = complex9.tan();
      Complex complex11 = complex10.ZERO.pow(complex3);
      complex11.ZERO.multiply((-1));
      complex11.ZERO.toString();
      complex3.sinh();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex.valueOf(4115.522959186);
      Complex complex2 = complex0.cos();
      complex0.I.hashCode();
      complex2.I.multiply((-2068));
      Complex.valueOf(3.529920406834134E113, 2033.8598115412);
      Complex complex3 = complex2.ONE.sinh();
      complex0.equals(complex2);
      Complex complex4 = complex3.sinh();
      complex4.NaN.sin();
      Complex complex5 = complex0.asin();
      complex5.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cos();
      complex0.INF.abs();
      complex2.ONE.add(complex1);
      Complex complex3 = Complex.valueOf((-945.5020539534871), Double.POSITIVE_INFINITY);
      complex3.I.multiply(1748.06709481);
      complex0.getReal();
      Complex complex4 = complex2.subtract((-945.5020539534871));
      Complex complex5 = complex4.ONE.acos();
      complex4.ONE.sin();
      complex4.I.reciprocal();
      Complex complex6 = complex4.pow(complex0);
      complex6.ZERO.subtract(0.5903874635696411);
      Complex complex7 = complex0.tan();
      complex7.divide(complex6);
      Complex complex8 = Complex.valueOf((-837.1517597367));
      complex8.NaN.multiply((-1393));
      complex0.readResolve();
      complex5.tanh();
      complex5.cosh();
      Complex complex9 = complex0.acos();
      try { 
        complex9.nthRoot((-2523));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,523
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.tan();
      complex4.NaN.toString();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = Complex.valueOf(662.051619286981);
      Complex complex7 = complex5.INF.add(0.0);
      Complex complex8 = complex7.ZERO.asin();
      complex8.asin();
      complex5.NaN.abs();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex1.exp();
      complex9.toString();
      Complex complex11 = complex0.INF.sqrt1z();
      complex11.I.abs();
      Complex complex12 = complex3.sinh();
      complex2.equals("(NaN, NaN)");
      complex3.atan();
      complex9.multiply(0);
      Complex complex13 = Complex.INF;
      Complex complex14 = complex5.multiply(complex13);
      complex14.I.createComplex(1.0, Double.NaN);
      Complex complex15 = complex10.multiply(complex6);
      complex14.add(complex4);
      complex15.multiply(0);
      complex12.getImaginary();
      Complex complex16 = complex13.cosh();
      complex16.NaN.pow(0.0);
      complex10.negate();
      complex1.nthRoot(1108);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = new Complex(0.0, 6.283185307179586);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.createComplex(0.0, 0.0);
      Complex.valueOf(1.0, (-374.8));
      complex3.pow(complex2);
      complex3.hashCode();
      complex5.ONE.add(6.283185307179586);
      Complex.valueOf(0.0, 6.283185307179586);
      Complex complex6 = complex4.cosh();
      complex5.reciprocal();
      complex3.readResolve();
      complex6.isNaN();
      complex3.hashCode();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex(0.0);
      complex1.ONE.pow(complex0);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex1.INF.multiply((-628));
      Complex complex5 = complex1.INF.multiply((-628));
      complex5.INF.multiply((-628));
      complex1.ZERO.conjugate();
      complex2.NaN.exp();
      Complex complex6 = complex0.pow(complex1);
      complex4.ONE.sqrt1z();
      complex6.getArgument();
      Complex complex7 = complex6.cos();
      complex7.ONE.divide(Double.NaN);
      complex7.INF.getArgument();
      complex4.I.negate();
      Complex complex8 = complex2.multiply((double) (-628));
      complex8.ONE.multiply(complex3);
      try { 
        complex4.nthRoot((-628));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -628
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.getField();
      complex0.ZERO.tanh();
      Complex complex3 = complex0.subtract(1382.710773654258);
      Complex.valueOf(1.0, 0.0);
      Complex complex4 = complex1.cosh();
      complex4.asin();
      complex3.ONE.cosh();
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = complex0.add(complex1);
      complex2.sinh();
      complex1.exp();
      Complex complex7 = complex5.pow(1.0);
      complex7.NaN.cos();
      complex7.multiply((-1623));
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double double0 = 2.7211316452521414E287;
      Complex complex0 = new Complex(0.0, 2.7211316452521414E287);
      Complex complex1 = Complex.ONE;
      complex0.INF.subtract(complex1);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.sinh();
      complex4.I.toString();
      complex1.asin();
      Complex complex5 = Complex.ONE;
      complex5.cos();
      Complex complex6 = complex3.INF.pow(complex5);
      complex6.toString();
      int int0 = (-1);
      try { 
        complex6.ZERO.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2549.976750862727), (-2549.976750862727));
      Complex.valueOf((-2549.976750862727), (-2549.976750862727));
      complex0.sinh();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex0.atan();
      complex3.I.getField();
      complex0.add((double) 0);
      complex2.conjugate();
      Complex complex4 = complex3.add((double) 0);
      complex4.ONE.subtract((-652.4737889));
      complex4.createComplex(0, 2.1273622512817383);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.NaN.conjugate();
      complex1.I.getArgument();
      complex2.I.nthRoot(930);
      Complex complex5 = complex1.multiply(930);
      complex2.ONE.sin();
      complex0.hashCode();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.ZERO.log();
      complex2.NaN.add((double) 930);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.I.divide(complex7);
      complex9.I.reciprocal();
      complex1.nthRoot(1);
      complex8.getImaginary();
      complex7.sqrt1z();
      complex5.sqrt();
      complex6.exp();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ZERO.sin();
      complex2.INF.multiply(1419);
      complex1.INF.pow(0.0);
      complex0.sqrt();
      complex0.sinh();
      complex0.createComplex(3402.5622, 3402.5622);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.atan();
      complex0.NaN.sin();
      Complex complex1 = complex0.negate();
      complex1.NaN.toString();
      complex0.add(complex1);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.multiply(20.0);
      complex3.getArgument();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.subtract(32.5801816947916);
      complex5.cos();
      Complex complex6 = complex5.I.acos();
      complex3.log();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(3324.7962388);
      complex0.NaN.getField();
      complex0.toString();
      complex0.equals("(3324.7962388, 0.0)");
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.ZERO.cosh();
      complex0.isInfinite();
      complex0.getReal();
      complex0.getField();
      Complex complex2 = Complex.NaN;
      complex1.pow(complex2);
      Complex.valueOf(2210.8);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      complex1.readResolve();
      complex1.getArgument();
      complex0.getImaginary();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double double0 = 1.4436686038970947;
      Complex complex0 = new Complex(1.4436686038970947);
      Complex complex1 = Complex.valueOf(1.4436686038970947);
      Complex complex2 = complex0.subtract(complex1);
      int int0 = (-4);
      try { 
        complex2.I.nthRoot((-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      Complex complex1 = complex0.NaN.atan();
      complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.add(complex2);
      complex2.readResolve();
      complex3.readResolve();
      Complex complex4 = complex0.reciprocal();
      complex3.ONE.toString();
      complex2.ONE.getArgument();
      Complex complex5 = complex4.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.pow((-8.146080588190463E-9));
      Complex complex7 = complex3.tanh();
      complex4.NaN.exp();
      complex7.NaN.log();
      complex2.readResolve();
      Complex complex8 = complex4.log();
      complex8.tan();
      complex2.hashCode();
      complex5.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex9 = complex5.subtract(complex7);
      complex0.isInfinite();
      complex6.sin();
      complex1.getReal();
      complex2.getReal();
      complex9.conjugate();
      complex4.divide(847.28282);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      double double0 = 2.4806815282282017E-8;
      Complex complex0 = Complex.valueOf(2.4806815282282017E-8, 2.4806815282282017E-8);
      double double1 = (-419.761458430751);
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.I.createComplex(20.0, 0.0);
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex4.exp();
      complex4.INF.hashCode();
      Complex complex6 = complex1.reciprocal();
      complex2.NaN.cosh();
      Complex complex7 = complex6.INF.add(complex1);
      Complex complex8 = complex7.ZERO.subtract(complex1);
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex1.pow(complex2);
      Complex complex11 = complex10.I.sin();
      complex2.divide(complex3);
      complex10.log();
      complex11.exp();
      complex9.sin();
      complex2.atan();
      complex5.multiply((-2705.0));
      complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      complex1.NaN.tan();
      Complex complex2 = complex1.INF.asin();
      complex2.NaN.add(0.0);
      complex2.ONE.cos();
      complex1.I.readResolve();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.atan();
      Complex.valueOf((-2985.950114409));
      complex3.ZERO.nthRoot(1536);
      complex4.cosh();
      complex4.toString();
      complex4.log();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex(1258.0, 5084.030476517);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.ZERO.divide(2225.8216);
      complex4.INF.multiply(1);
      Complex complex6 = complex3.INF.tanh();
      Complex complex7 = complex1.INF.negate();
      complex6.I.abs();
      Complex complex8 = complex1.sqrt();
      assertEquals(0.22626663993713522, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex3.sin();
      complex9.INF.add((-4162.489321));
      complex7.conjugate();
      complex2.createComplex(5084.030476517, (-223.6864746));
      Complex complex10 = complex2.multiply(complex5);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      complex6.nthRoot(1374);
      Complex complex11 = complex5.cos();
      Complex complex12 = complex9.subtract(complex11);
      Complex complex13 = complex6.INF.add(0.0);
      assertTrue(complex13.isInfinite());
      
      Complex complex14 = complex12.NaN.exp();
      assertSame(complex14, complex6);
      
      Complex complex15 = complex12.add(1.0);
      assertEquals((-0.0015263094914253169), complex9.getImaginary(), 0.01);
      assertEquals(6.389276573680602E-4, complex15.getReal(), 0.01);
      
      Complex complex16 = complex5.subtract((-4162.489321));
      assertFalse(complex16.equals((Object)complex10));
      assertEquals((-0.8813735870195429), complex4.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)complex10));
      
      Complex.valueOf((double) 1374);
      complex2.hashCode();
      assertEquals(8.563572653404835, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.exp();
      complex0.NaN.acos();
      Complex complex1 = complex0.cos();
      complex1.ZERO.readResolve();
      try { 
        complex1.nthRoot((-635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -635
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
